-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS escala_palliative_prog_atual ON escala_palliative_prog CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_escala_palliative_prog_atual() RETURNS trigger AS $BODY$
DECLARE
    qt_reg_w     smallint;
    sql_w        varchar(200);
    qt_pontos_w  real := 0;
    ds_erro_w   varchar(4000);
    ds_parametro_w  varchar(4000);
BEGIN
  BEGIN
    IF ( NEW.nr_hora IS NULL ) OR ( NEW.dt_avaliacao <> OLD.dt_avaliacao ) THEN
            NEW.nr_hora := (to_char(round(NEW.dt_avaliacao, 'hh24'), 'hh24'))::numeric;
    END IF;

    IF ( wheb_usuario_pck.get_ie_executar_trigger = 'N' ) THEN
        GOTO final;
    END IF;

    BEGIN
        sql_w := 'CALL OBTER_SCORE_ESC_PALL_PROG_MD(:1,:2,:3,:4,:5) INTO :qt_pontos_w';

        EXECUTE sql_w USING IN NEW.ie_karnofsky, 
                                      IN NEW.ie_ingestao_oral, 
                                      IN NEW.ie_edema, 
                                      IN NEW.ie_dispneia, 
                                      IN NEW.ie_delirium, 
                                      OUT qt_pontos_w;
    exception
        when others then
          qt_pontos_w := null;
          ds_erro_w := substr(sqlerrm, 1, 4000);
          ds_parametro_w := substr(':new.nr_atendimento: ' || NEW.nr_atendimento || ' - :new.ie_situacao: ' || NEW.ie_situacao || ' - :new.cd_profissional: ' || NEW.cd_profissional
          || ' - :new.ie_karnofsky: ' || NEW.ie_karnofsky || ' - :new.ie_ingestao_oral: ' || NEW.ie_ingestao_oral || '- :new.ie_edema: ' || NEW.ie_edema || ' - :new.ie_dispneia: ' || NEW.ie_dispneia
          || ' - :new.ie_delirium: ' || NEW.ie_delirium || ' - qt_pontos_w: ' || qt_pontos_w, 1, 4000);
          CALL gravar_log_medical_device('ESCALA_PALLIATIVE_PROG_ATUAL', 'OBTER_SCORE_ESC_PALL_PROG_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'N');
    end;

    NEW.qt_pontos := qt_pontos_w;

    << final >> qt_reg_w := 0;
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_escala_palliative_prog_atual() FROM PUBLIC;

CREATE TRIGGER escala_palliative_prog_atual
	BEFORE INSERT OR UPDATE ON escala_palliative_prog FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_escala_palliative_prog_atual();

