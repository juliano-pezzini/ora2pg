-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_paciente_befins ON atendimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_paciente_befins() RETURNS trigger AS $BODY$
declare

qt_regra_medico_atend_w		bigint;
qt_regra_medico_atend_assist_w	bigint;
qt_regra_medico_atend_categ_w	bigint;
qt_regra_medico_atend_categ_ww	bigint;
ie_pf_credenciada_w		varchar(2);
ie_corpo_clinico_w			varchar(1);
qt_medico_w			bigint;
ie_forma_usuario_intern_w		varchar(1);
qt_idade_w			bigint;
nr_seq_triagem_prioridade_w		bigint;
nr_seq_classif_w			bigint;
ds_classificacao_w			varchar(200);
ie_permite_w			varchar(10);
ie_responsavel_nao_medico_w	varchar(10);
ie_calcula_data_prev_w		varchar(10);
nm_medico_w			varchar(255);
ds_senha_internet_w		atend_senha_internet.ds_senha%type;
reg_integracao_w			gerar_int_padrao.reg_integracao;
ie_case varchar(1);
nr_seq_permissao_w 		medico_permissao_unica.nr_sequencia%type;
dt_fim_permissao_w			medico_permissao_unica.dt_final%type;
qt_minutos_permissao_w		bigint;
allow_future_date_w		funcao_param_usuario.vl_parametro%type;
qt_reg_ww bigint;
ie_sexo_w  				pessoa_fisica.ie_sexo%type;
nr_dias_retroativos_w bigint;
dt_entrada_W timestamp;
c01 CURSOR FOR
	SELECT	nr_sequencia
	from	triagem_classif_prioridade
	where	ie_situacao = 'A'
	and	qt_idade_w between	obter_idade_prioridade(nr_sequencia,'MIN') and obter_idade_prioridade(nr_sequencia,'MAX')
	and	((	qt_idade_min is not null
			and	qt_idade_max is not null) or
		
		(qt_idade_min_mes	is not null AND qt_idade_max_mes	is not null) or (qt_idade_min_dia	is not null and qt_idade_max_dia is not null))
	and (coalesce(cd_estabelecimento,NEW.cd_estabelecimento) = NEW.cd_estabelecimento)
  and (coalesce(ie_sexo,'A') = 'A' or coalesce(ie_sexo,'A') = ie_sexo_w)
	order by nr_seq_prioridade desc;
	
function obter_qt_atendimento(
		nr_seq_episodio_p		bigint,
		nr_atendimento_p	bigint) return bigint is

qt_reg_w	bigint;

pragma autonomous_transaction;
BEGIN
select	count(1)
into STRICT	qt_reg_w
from	atendimento_paciente
where	nr_seq_episodio = nr_seq_episodio_p
and	nr_atendimento <> nr_atendimento_p;

return qt_reg_w;
end;
		

BEGIN

	nr_dias_retroativos_w := Obter_Valor_Param_Usuario(916, 1245, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo);	
	if (nr_dias_retroativos_w > 0) then
		dt_entrada_w := NEW.DT_ENTRADA + nr_dias_retroativos_w;
		if (dt_entrada_w < NEW.DT_ATUALIZACAO_NREC) then 		
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1205626);		
		end if;
	end if;	
	
 if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto final;
end if;
if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT'))then

    CALL cancelar_atend_controle(NEW.cd_pessoa_fisica, 'N');

	allow_future_date_w := Obter_Param_Usuario(916, 1206, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, allow_future_date_w);

	if (coalesce(allow_future_date_w, 'N') = 'N' and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_chegada_paciente) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP))then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083786);
	end if;
	if (coalesce(allow_future_date_w, 'N') = 'N' and NEW.dt_chegada_paciente is not null and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_chegada_paciente) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_entrada) and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_entrada) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP))) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083769);
	end if;
	
end if;

/* acdalfovo em 25/07/2018 - os 1602534 */



/*parametro [144] "tempo em minutos para permissao unica do medico apos abertura do primeiro atendimento"  (funcao: cadastro medico)*/


qt_minutos_permissao_w := coalesce(obter_valor_param_usuario(4, 144, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento),0);
ie_corpo_clinico_w := obter_se_corpo_clinico(NEW.cd_medico_resp);

if (coalesce(ie_corpo_clinico_w,'N') = 'N' and
	qt_minutos_permissao_w > 0) then
	BEGIN
	
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_permissao_w
	from 	medico_permissao_unica
	where	dt_inativacao is null
	and		dt_liberacao is not null
	and		cd_pessoa_fisica = NEW.cd_medico_resp;
	
	if (nr_seq_permissao_w is not null) then
	
		select 	max(nr_sequencia),
			max(dt_final)
		into STRICT	nr_seq_permissao_w,
			dt_fim_permissao_w
		from	medico_permissao_unica
		where	dt_inativacao is null
		and	dt_liberacao is not null
		and	NEW.dt_entrada between dt_inicio and coalesce(dt_final,NEW.dt_entrada)
		and	cd_pessoa_fisica = NEW.cd_medico_resp;
		
		/*se possui permissao unica ativa e liberada, definir a data final de acordo com o parametro e autorizar medico responsavel*/


		if (nr_seq_permissao_w is not null and
			dt_fim_permissao_w is null) then
			
			update 	medico_permissao_unica
			set 	dt_final = NEW.dt_entrada + qt_minutos_permissao_w/1440
			where 	nr_sequencia = nr_seq_permissao_w;
			
		end if;
		
		if (nr_seq_permissao_w is null) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1034265);
			--o medico responsavel pelo atendimento nao possui permissao para efetuar atendimentos.

		end if;
	end if;
	end;
end if;
/* fim acdalfovo em 25/07/2018 - os 1602534 */



select	coalesce(max(ie_forma_usuario_intern),'N')
into STRICT	ie_forma_usuario_intern_w
from	parametro_atendimento
where	cd_estabelecimento	= NEW.cd_estabelecimento;

if (ie_forma_usuario_intern_w = 'U') and (NEW.ie_tipo_atendimento = 1) and (NEW.nm_usuario_intern is null) then
	BEGIN	
	NEW.nm_usuario_intern	:= NEW.nm_usuario;	
	NEW.dt_usuario_intern	:= LOCALTIMESTAMP;		
	end;
end if;

select	coalesce(max(obter_valor_param_usuario(916, 789, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento)),'N')
into STRICT	ie_responsavel_nao_medico_w
;

select	coalesce(max(obter_valor_param_usuario(916, 953, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento)),'S')
into STRICT	ie_calcula_data_prev_w
;

select	count(*)
into STRICT	qt_medico_w
from	medico
where	cd_pessoa_fisica = NEW.cd_medico_resp;

if (coalesce(ie_responsavel_nao_medico_w,'N') = 'S') and (qt_medico_w = 0) then
	BEGIN
	select	coalesce(max(obter_se_responsavel_atend(obter_perfil_ativo,NEW.cd_medico_resp,0,0)),0)
	into STRICT	ie_permite_w
	;
		
	if (ie_permite_w = 'N') then
		BEGIN
		CALL wheb_mensagem_pck.exibir_mensagem_abort(196872);
		--o conselho da pessoa digitada nao esta liberado para ser responsavel do atendimento

		end;
	end if;	
	end;
end if;


if (qt_medico_w = 0) and (NEW.cd_medico_resp is not null) and
	((coalesce(ie_responsavel_nao_medico_w,'N') = 'N') or ((qt_medico_w = 0) and (coalesce(ie_responsavel_nao_medico_w,'N') = 'S') and (ie_permite_w = 'N'))) then	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(196873);
	--o codigo de medico digitado nao esta cadastrado na tabela de medico

end if;

CALL consistir_impedimento_pf(NEW.cd_medico_resp,'EUP',NEW.nm_usuario);

if (NEW.cd_medico_atendimento is null) then
	NEW.cd_medico_atendimento	:= NEW.cd_medico_resp;
end if;	

ie_case := obter_uso_case(NEW.nm_usuario);

/* elemar 26/07/2004 */


if (NEW.ds_senha is null and ie_case != 'S') and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'pt_BR') then
	NEW.ds_senha := gerar_senha_atendimento(NEW.ie_tipo_atendimento, NEW.nr_seq_regra_funcao, NEW.cd_pessoa_fisica, 'A');
end if;

if (NEW.ds_senha_internet is null)  then
	ds_senha_internet_w	:= gerar_senha_atendimento(NEW.ie_tipo_atendimento, NEW.nr_seq_regra_funcao, NEW.cd_pessoa_fisica, 'I');		
	if (ds_senha_internet_w is not null) then
		CALL gerar_senha_internet(NEW.nr_atendimento, null, null, null, ds_senha_internet_w,'');
		NEW.ds_senha_internet	:= ds_senha_internet_w;
	end if;
end if;

/* marcus 23/12/2004 */


NEW.dt_alta_interno	:= to_date('30/12/2999','dd/mm/yyyy');

if (NEW.ie_fim_conta is null) then
	NEW.ie_fim_conta	:= 'A';
end if;

/* rafael em 3/3/8 os82466 */


ie_corpo_clinico_w := obter_se_corpo_clinico(NEW.cd_medico_resp);
if (ie_corpo_clinico_w = 'N') and (NEW.ie_tipo_atendimento = 1) then
	ie_pf_credenciada_w := consistir_credenciamento_pf(coalesce(NEW.cd_estabelecimento,0), coalesce(obter_especialidade_medico(NEW.cd_medico_resp,'C'),0), NEW.cd_pessoa_fisica, coalesce(NEW.dt_alta,LOCALTIMESTAMP), NEW.cd_medico_resp, NEW.nr_atendimento, NEW.nr_atendimento_mae, ie_pf_credenciada_w);	
	if (ie_pf_credenciada_w = 'N') then
		
		select 	substr(obter_nome_pf(NEW.cd_medico_resp),1,60)
		into STRICT	nm_medico_w
		;
		
		CALL wheb_mensagem_pck.exibir_mensagem_abort(196874,'NM_MEDICO=' || nm_medico_w);
		--o medico #@nm_medico#@ nao esta credenciado a realizar este atendimento.

	end if;
else
	ie_pf_credenciada_w	:= 'S';
	if (obter_valor_param_usuario(916, 265, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento) = 'S') then
		ie_pf_credenciada_w := consistir_credenciamento_pf(coalesce(NEW.cd_estabelecimento,0), coalesce(obter_especialidade_medico(NEW.cd_medico_resp,'C'),0), NEW.cd_pessoa_fisica, coalesce(NEW.dt_alta,LOCALTIMESTAMP), NEW.cd_medico_resp, NEW.nr_atendimento, NEW.nr_atendimento_mae, ie_pf_credenciada_w);
		/*if	(ie_pf_credenciada_w = 'N') then
			rase_application_error(-20011,'O medico ' || substr(obter_nome_pf(:new.cd_medico_resp),1,60) || ' nao esta credenciado a realizar este atendimento.#@#@');
		end if;*/

	end if;
end if;
/* fim rafael em 3/3/8 os82466 */



/* oraci em 10/09/2007 os68160 */


select	count(*)
into STRICT	qt_regra_medico_atend_w
from	regra_medico_atend
where	cd_estabelecimento	= NEW.cd_estabelecimento
and	ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	ie_corpo_clinico = 'S'
and 	obter_se_corpo_clinico(NEW.cd_medico_resp) = 'N';

select	count(*)
into STRICT	qt_regra_medico_atend_assist_w
from	regra_medico_atend
where	cd_estabelecimento	= NEW.cd_estabelecimento
and	ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	ie_corpo_assistencial = 'S'
and	obter_se_corpo_assist(NEW.cd_medico_resp) = 'N';


select	count(*)
into STRICT	qt_regra_medico_atend_categ_w
from	regra_medico_atend a,
	regra_medico_atend_categ b
where	a.nr_sequencia	= b.nr_seq_regra
and	a.cd_estabelecimento	= NEW.cd_estabelecimento
and	a.ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	b.nr_seq_categoria	= obter_dados_medico(NEW.cd_medico_resp,'CAT');


select	count(*)
into STRICT	qt_regra_medico_atend_categ_ww
from	regra_medico_atend a,
	regra_medico_atend_categ b
where	a.nr_sequencia	= b.nr_seq_regra
and	a.cd_estabelecimento	= NEW.cd_estabelecimento
and	a.ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	b.nr_seq_categoria	= obter_dados_medico(NEW.cd_medico_resp,'CAT');


if	((qt_regra_medico_atend_w > 0) or (qt_regra_medico_atend_assist_w > 0)) and (ie_pf_credenciada_w <> 'S')  or
	((qt_regra_medico_atend_categ_w	> 0) or (qt_regra_medico_atend_categ_ww	>0)) then /* rafael em 3/3/8 os77352 incluida esta linha */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(196875);
	--medico nao pode ser responsavel pelo atendimento. verificar regra medico atendimento.

end if;

/* dalcastagne em 18/02/2008 os 83134*/


if	((ie_calcula_data_prev_w = 'S') and (coalesce(NEW.qt_dias_prev_inter,0) > 0)) then
	NEW.dt_previsto_alta	:= NEW.dt_entrada + coalesce(NEW.qt_dias_prev_inter,0);
else
	NEW.dt_previsto_alta	:= NEW.dt_previsto_alta;
end if;


if (obter_se_perm_pf_classif(916,0,NEW.cd_pessoa_fisica,LOCALTIMESTAMP)	= 'N') then
	

	
	nr_seq_classif_w	:= obter_se_perm_pf_classif(916,0,NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'SEQ');
	
	select	max(ds_classificacao)
	into STRICT	ds_classificacao_w
	from	classif_pessoa
	where	nr_sequencia	= nr_seq_classif_w;
	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(196876,'DS_CLASSIFICACAO=' || ds_classificacao_w);
	--esse paciente possui a classificacao #@ds_classificacao#@ que nao e permitida nesta funcao.

end if;

if (NEW.cd_pessoa_fisica is not null) and (NEW.nr_seq_triagem_prioridade is null) then
	qt_idade_w	:= obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'DIA');
  ie_sexo_w	:= coalesce(Obter_Sexo_PF(NEW.cd_pessoa_fisica,'C'),'I');
	open c01;
	loop
	fetch c01 into	
		nr_seq_triagem_prioridade_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;
	
	if (nr_seq_triagem_prioridade_w	is not null) then
		NEW.nr_seq_triagem_prioridade	:= nr_seq_triagem_prioridade_w;
	end if;
end if;

if ('00/00/0000 00:00:00' = to_char(NEW.dt_previsto_alta,'dd/mm/yyyy hh24:mi:ss')) then
	NEW.dt_previsto_alta := null;
end if;

if (obter_funcao_ativa <> 381) then
	NEW.ie_nivel_atencao := wheb_assist_pck.get_nivel_atencao_perfil;
end if;
NEW.cd_setor_usuario_atend := wheb_usuario_pck.get_cd_setor_atendimento;

if (NEW.nr_seq_tipo_admissao_fat is not null) then
	CALL consiste_tipo_visita_atend(nr_atendimento_p => NEW.nr_atendimento,
				   cd_pessoa_fisica_p => NEW.cd_pessoa_fisica,
				   nr_seq_tipo_admissao_fat_p => NEW.nr_seq_tipo_admissao_fat,
				   nr_seq_episodio_p => NEW.nr_seq_episodio,
				   dt_entrada_p => NEW.dt_entrada);
end if;

if (NEW.nr_seq_tipo_admissao_fat is not null and NEW.ie_tipo_atendimento is null and coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) then
	NEW.ie_tipo_atendimento := coalesce(obter_tipo_atend_admissao(NEW.nr_seq_tipo_admissao_fat), NEW.ie_tipo_atendimento);
end if;
																
if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'pt_BR') and (NEW.ds_senha is not null) then
	NEW.ds_senha := null;
end if;
																
<<final>>
																  
qt_reg_ww := 0;
																
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_paciente_befins() FROM PUBLIC;

CREATE TRIGGER atendimento_paciente_befins
	BEFORE INSERT ON atendimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_paciente_befins();

