-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS man_ordem_servico_auto_encer ON man_ordem_servico CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_man_ordem_servico_auto_encer() RETURNS trigger AS $BODY$
declare
qt_existe_orc_w				bigint;
qt_reg_w				bigint;
qt_inconsist_teste_w			bigint;
nm_usuario_manutencao_w			varchar(15);
nr_seq_tipo_hist_w			bigint;

procedure encerrar_ordem_servico is
BEGIN
if (NEW.nr_seq_grupo_des is not null) then
	select	count(1)
	into STRICT	qt_existe_orc_w
	from	man_ordem_servico_orc
	where	nr_seq_ordem	= NEW.nr_sequencia
	and	dt_aprovacao is null
	and	dt_reprovacao is null  LIMIT 1;

	if (qt_existe_orc_w = 0) then
		NEW.dt_inicio_real	:= NEW.dt_inicio_previsto;
		NEW.dt_fim_real	:= LOCALTIMESTAMP;
		NEW.nr_seq_estagio	:= 9;
		NEW.ie_status_ordem	:= 3;
		NEW.nm_usuario		:= 'WebService';
		NEW.dt_atualizacao	:= LOCALTIMESTAMP;
		NEW.nm_usuario_encer	:= 'WebService';

		select	b.nm_usuario_manutencao
		into STRICT	nm_usuario_manutencao_w
		from	grupo_desenvolvimento b
		where	b.nr_sequencia	= NEW.nr_seq_grupo_des;

		select	count(1)
		into STRICT	qt_reg_w
		from	man_ordem_servico_exec
		where	nr_seq_ordem	= NEW.nr_sequencia
		and	nm_usuario_exec	= nm_usuario_manutencao_w  LIMIT 1;
		
		if (qt_reg_w > 0) then
			update	man_ordem_servico_exec a
			set	a.dt_fim_execucao	 = NULL
			where	a.nr_seq_ordem		= NEW.nr_sequencia
			and	a.nm_usuario_exec	= nm_usuario_manutencao_w;
		else
			if (coalesce(nm_usuario_manutencao_w,'X') <> 'X') then
				insert into man_ordem_servico_exec(	nr_sequencia,
						nr_seq_ordem,
						dt_atualizacao,
						nm_usuario,
						nm_usuario_exec,
						qt_min_prev,
						nr_seq_tipo_exec,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
				values (	nextval('man_ordem_servico_exec_seq'),
						NEW.nr_sequencia,
						LOCALTIMESTAMP,
						NEW.nm_usuario,
						nm_usuario_manutencao_w,
						15,
						1,
						LOCALTIMESTAMP,
						NEW.nm_usuario);
			end if;
		end if;
	end if;
end if;
end;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

if (phi_is_base_philips  = 'S') then
	if (NEW.nr_seq_estagio <> OLD.nr_seq_estagio) and (NEW.nr_seq_estagio = 511) and --Encerramento solicitado pelo cliente
		(NEW.ie_classificacao in ('T','S','D','E')) and --solicitacao / sugestao
		(coalesce(NEW.ie_grau_satisfacao,'N') in ('O','B','E','N')) and (NEW.nr_seq_tipo_solucao is not null) then
		BEGIN
			
			if (OLD.ie_status_ordem = 3) then
				NEW.ie_status_ordem := 2;
			end if;					

			if (NEW.ie_classificacao = 'D') then
				encerrar_ordem_servico;
			elsif (NEW.ie_classificacao = 'E') then			
				select	count(1)
				into STRICT	qt_reg_w
				from	man_doc_erro
				where	nr_seq_ordem	= NEW.nr_sequencia
				and	dt_liberacao is not null;
				
				if (qt_reg_w > 0) then
					encerrar_ordem_servico;
				end if;					
			else
				select	coalesce(max(nr_seq_tipo_hist), 0)
				into STRICT	nr_seq_tipo_hist_w
				from	man_classificacao
				where	nr_sequencia = NEW.nr_seq_classif;

				select	count(*)
				into STRICT	qt_inconsist_teste_w
				from (	SELECT 	1 -- consistencia do historico com a sequencia do NR_SEQ_TIPO_HIST_W
						
						where 	nr_seq_tipo_hist_w > 0
						and	NEW.nr_seq_estagio <> 2
						and not exists (	select	1
									from	man_ordem_serv_tecnico x
									where	x.nr_seq_ordem_serv = NEW.nr_sequencia
									and	x.nr_seq_tipo = nr_seq_tipo_hist_w
								)
						
union all

						SELECT	1 -- Inconsistencia teste do programador
						
						where	phi_ordem_servico_pck.get_exige_hist_teste(NEW.nr_sequencia, 'P', 'S', NEW.ie_plataforma) = 'S'
						
union all

						select	1 -- Inconsistencia teste do analista
						
						where	phi_ordem_servico_pck.get_exige_hist_teste(NEW.nr_sequencia, 'A', 'S', NEW.ie_plataforma) = 'S'
						
union all

						select	1 -- historico - Teste de performance do analista
						
						where	NEW.ie_classificacao <> 'D'
						and	NEW.ie_teste_performance = 'PA'
						and	NEW.nr_seq_estagio <> 2
						and not exists (	select	1
									from	man_ordem_serv_tecnico x
									where	x.nr_seq_tipo = 37
									and	x.nr_seq_ordem_serv = NEW.nr_sequencia
								)
						
union all

						select	1 -- historico - Teste de performance do programador
						
						where	NEW.ie_classificacao <> 'D'
						and	NEW.ie_teste_performance in ('PA', 'SP')
						and	NEW.nr_seq_estagio <> 2
						and not exists (	select	1
									from	man_ordem_serv_tecnico x
									where	x.nr_seq_tipo = 38
									and	x.nr_seq_ordem_serv = NEW.nr_sequencia
								)
						
union all

						select	1 -- Exigir teste analista negocio
						
						where	NEW.nr_seq_estagio <> 2
						and	NEW.dt_teste_negocio is not null
						and not exists (	select	1
									from	man_ordem_serv_tecnico x
									where	x.nr_seq_tipo = 109
									and	x.nr_seq_ordem_serv = NEW.nr_sequencia
								)
				) x;

				if (qt_inconsist_teste_w = 0) then
					encerrar_ordem_servico;
				end if;
			end if;	
		end;
	end if;
end if;

<<Final>>
qt_reg_w	:= 0;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_man_ordem_servico_auto_encer() FROM PUBLIC;

CREATE TRIGGER man_ordem_servico_auto_encer
	BEFORE UPDATE ON man_ordem_servico FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_man_ordem_servico_auto_encer();

