-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS procedimento_paciente_delete ON procedimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_procedimento_paciente_delete() RETURNS trigger AS $BODY$
DECLARE
nr_seq_resultado_w		bigint;
ie_status_atend_w		smallint;
ie_status_acerto_w		smallint;
qt_repasse_w			integer;
ie_desaprova_excluir_proced_w	varchar(1);
ds_module_w 			varchar(255);
OSUSER_w			varchar(100);
nr_sequencia_autor_w		bigint;
nr_seq_estagio_w		bigint;
ie_cancela_autor_w		varchar(2);
cd_estabelecimento_w		bigint;
qt_proc_autor_w			double precision;
ds_module_tasy_w		varchar(255);
OSUSER_tasy_w			varchar(100);
ds_origem_w			varchar(1500);
qt_erro_w			bigint;
ie_canc_proc_prescr_w		varchar(1);
dt_geracao_resumo_w		timestamp;
ds_call_stack_w			varchar(2000);
nr_seq_case_w		    episodio_paciente.nr_sequencia%type;
cd_perfil_w   			bigint;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'N')  then
	goto final;
end if;


if (OLD.ie_origem_proced in ('11','15')) then --Somente 11-OPS, 15-DRG interfere na DRG
	CALL INATIVAR_DRG_EPISODIO_PACIENTE(OLD.nr_atendimento, OLD.cd_procedimento, 'PROCEDIMENTO_PACIENTE', OLD.nm_usuario, 'TPP');
end if;

/*if (billing_i18n_pck.obter_se_calcula_drg = 'S') then	
	select 	max(a.nr_seq_episodio)
	into   	nr_seq_case_w
	from   	atendimento_paciente a,
		episodio_paciente_drg b
	where  	a.nr_atendimento 	= :old.nr_atendimento
	and	a.nr_seq_episodio 	= b.nr_seq_episodio_paciente
	and	b.ie_situacao 		= 'A';
	
	if	(nr_seq_case_w is not null) then
	
		INATIVAR_EPISODIO_PACIENTE_DRG(nr_seq_case_w, :old.nr_sequencia, :old.nr_interno_conta, :old.nm_usuario);
		/*update episodio_paciente_drg 
		set    ie_situacao = 'I'
		where  nr_seq_episodio_paciente = nr_seq_case_w;*/

--	end if;

--end if;


if (OLD.nr_interno_conta is not null) then
	BEGIN
	select max(ie_status_acerto)
	into STRICT	ie_status_acerto_w
	from	Conta_paciente
	where nr_interno_conta	= OLD.nr_interno_conta;
	if (ie_status_acerto_w = 2) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(193549);
	end if;
	end;
end if;
/* Incluido e retirado por Marcus em 05/11/2003
select count(*)
into	qt_repasse_w
from	Procedimento_repasse
where	nr_seq_procedimento	= :old.nr_sequencia;
if	(qt_repasse_w > 0) then
	application_error(-20011,'Existem repasses pendentes para este procedimento !'); 
end if;

*/


if (coalesce(OLD.nr_cirurgia,0) > 0) then -- OS 393146 - Problema de mutante
	CALL ajustar_cirurgia_partic(OLD.nr_sequencia, OLD.nr_cirurgia);
end if;


/*lhalves OS254416 em 04/10/2010 - Cancelar autorizacao do item.*/


select 	max(cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from 	conta_paciente
where	nr_interno_conta 	= OLD.nr_interno_conta;


if (OLD.NR_PRESCRICAO is not null) and (OLD.nr_seq_origem is null) then
	BEGIN
	
	UPDATE PRESCR_PROCEDIMENTO A
	SET 	A.DT_BAIXA  = NULL,
    		A.CD_MOTIVO_BAIXA = 0,
    		a.dt_atualizacao	= LOCALTIMESTAMP,
		a.ie_status_execucao =	CASE
								WHEN DT_CHEGADA_PACIENTE IS NOT NULL
								THEN '11'
								ELSE '10' END,
		a.nm_usuario	= coalesce(wheb_usuario_pck.get_nm_usuario, OLD.nm_usuario)
	WHERE A.NR_PRESCRICAO  	= OLD.NR_PRESCRICAO
	  AND A.NR_SEQUENCIA   	= OLD.NR_SEQUENCIA_PRESCRICAO;

	BEGIN
	select ie_status_atend
	into STRICT ie_status_atend_w
	from prescr_procedimento
	where nr_prescricao = OLD.NR_PRESCRICAO
	  and nr_sequencia = OLD.NR_SEQUENCIA_PRESCRICAO;
	exception
		when others then
			ie_status_atend_w := 0;
	end;

	select coalesce(max(ie_desaprova_excluir_proced),'S')
	into STRICT ie_desaprova_excluir_proced_w
	from lab_parametro
	where cd_estabelecimento = cd_estabelecimento_w;
	
	select 	coalesce(max(ie_canc_proc_prescr),'N')
	into STRICT	ie_canc_proc_prescr_w
	from 	parametro_faturamento
	where 	cd_estabelecimento	= cd_estabelecimento_w;
	
	if ((ie_status_atend_w > 0) and (ie_desaprova_excluir_proced_w = 'S') and (ie_canc_proc_prescr_w = 'S' or wheb_usuario_pck.get_cd_funcao <> 722)) then
		-- Incluida a restricao para a funcao ser diferente da Exames pendentes, pois quando a rotina era chamada no momento da aprovacao, ocorria um defeito.

		BEGIN
		BEGIN
		select nr_seq_resultado
		into STRICT nr_seq_resultado_w
		from exame_lab_resultado
		where nr_prescricao = OLD.NR_PRESCRICAO;
		exception
			when others then
				nr_seq_resultado_w := 0;
		end;

		if (nr_seq_resultado_w is not null) and (nr_seq_resultado_w <> 0) then
			BEGIN
			UPDATE EXAME_LAB_RESULT_ITEM
			SET	 DT_APROVACAO  = NULL,
				 NM_USUARIO_APROVACAO  = NULL
			WHERE NR_SEQ_RESULTADO = nr_seq_resultado_w
			  AND NR_SEQ_PRESCR = OLD.NR_SEQUENCIA_PRESCRICAO
			  AND NR_SEQ_MATERIAL IS NOT NULL;

			UPDATE PRESCR_PROCEDIMENTO A
			SET	A.IE_STATUS_ATEND = 30,
				A.NM_USUARIO = wheb_usuario_pck.get_nm_usuario
			WHERE A.NR_PRESCRICAO  = OLD.NR_PRESCRICAO
  	  		  AND A.NR_SEQUENCIA   = OLD.NR_SEQUENCIA_PRESCRICAO
			  and a.ie_status_atend > 30;
			
			end;
		end if;
		end;
	end if;
	end;
end if;


select 	coalesce(max(ie_cancela_autor_exec),'N')
into STRICT	ie_cancela_autor_w
from 	parametro_faturamento
where 	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_cancela_autor_w = 'S') then

	select 	max(a.nr_sequencia)
	into STRICT 	nr_sequencia_autor_w
	from 	autorizacao_convenio a,
		estagio_autorizacao b
	where	a.nr_seq_estagio	= b.nr_sequencia
	and 	b.ie_interno		= '1' --Necessidade

	and	a.nr_sequencia		= (SELECT	max(x.nr_sequencia_autor)	
					   from		procedimento_autorizado x
					   where	x.nr_sequencia	= OLD.nr_seq_proc_autor);
					
	if (nr_sequencia_autor_w is not null) then

		select 	sum(a.qt_solicitada)
		into STRICT 	qt_proc_autor_w
		from 	procedimento_autorizado a
		where	a.nr_sequencia_autor	= nr_sequencia_autor_w
		and 	a.cd_procedimento	= OLD.cd_procedimento
		and 	a.ie_origem_proced	= OLD.ie_origem_proced;

		select 	max(nr_sequencia)
		into STRICT 	nr_seq_estagio_w
		from 	estagio_autorizacao
		where	ie_interno	= '70'--Cancelado

		and 	ie_situacao	= 'A'
		and		OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
	
		if (nr_seq_estagio_w is not null) then
			if (qt_proc_autor_w = OLD.qt_procedimento) then
				update	autorizacao_convenio
				set 	nr_seq_estagio	= nr_seq_estagio_w
				where	nr_sequencia	= nr_sequencia_autor_w;
			else
				update	procedimento_autorizado
				set 	qt_solicitada		= qt_solicitada - OLD.qt_procedimento
				where	nr_sequencia_autor	= nr_sequencia_autor_w;
			end if;
		end if;
	end if;
end if;

/*select	max(module||' - ' || machine||' - ' || program|| ' - ' || OSUSER|| ' - ' || TERMINAL),
	max(substr(OSUSER,1,15))
into	ds_module_w,
	OSUSER_w
from	v$session
where	audsid = (select userenv('sessionid') from dual)
and 	((upper(program) not like '%TASY%') and (upper(program) not like '%JDBC%'));

if	(ds_module_w is not null) then
	insert into log_exclusao(nm_tabela, dt_atualizacao, nm_usuario, ds_chave) 
			values ('PROCEDIMENTO_PACIENTE', SYSDATE, OSUSER_w, substr('Conta: ' || :old.nr_interno_conta || '  ' ||
				'Procedimento: ' || :old.cd_procedimento || '  ' || ds_module_w,1,255));
end if;*/


select	max(substr(module||' - ' || machine||' - ' || program|| ' - ' || OSUSER|| ' - ' || TERMINAL,1,255)),
	max(substr(OSUSER,1,15))
into STRICT	ds_module_tasy_w,
	OSUSER_tasy_w
from	v$session
where	audsid = (SELECT userenv('sessionid') );

ds_call_stack_w	:= substr(dbms_utility.format_call_stack,1,1800);

BEGIN

cd_perfil_w := obter_perfil_ativo;

if (cd_perfil_w = 0) then
	cd_perfil_w := null;
end if;

insert into proc_pac_log(	cd_funcao,		
				cd_perfil,
				cd_setor_atendimento,
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_entrada_unidade,
				ie_acao,
				ie_valor_informado,
				nm_usuario,
				nm_usuario_nrec,
				nr_atendimento,
				nr_cirurgia,
				nr_prescricao,
				nr_seq_atepacu,
				nr_seq_propaci,
				nr_sequencia,
				qt_procedimento,
				tx_procedimento,
				vl_custo_operacional,
				vl_medico,              
				vl_procedimento,
				cd_procedimento,
				ie_origem_proced,
				ds_call_stack,
				ds_module)
values (	obter_funcao_ativa,
        cd_perfil_w,
        OLD.cd_setor_atendimento,
        LOCALTIMESTAMP,
        LOCALTIMESTAMP,
        OLD.dt_entrada_unidade,
        'E',
        OLD.ie_valor_informado,
        coalesce(wheb_usuario_pck.get_nm_usuario, OSUSER_tasy_w),
        coalesce(wheb_usuario_pck.get_nm_usuario, OSUSER_tasy_w),
        OLD.nr_atendimento,
        OLD.nr_cirurgia,
        OLD.nr_prescricao,
        OLD.nr_seq_atepacu,
        OLD.nr_sequencia,
        nextval('proc_pac_log_seq'),
        OLD.qt_procedimento,
        OLD.tx_procedimento,
        OLD.vl_custo_operacional,
        OLD.vl_medico,              
        OLD.vl_procedimento,
	OLD.cd_procedimento,
	OLD.ie_origem_proced,
	ds_call_stack_w,
	ds_module_tasy_w);
--exception

	--when others then

	qt_erro_w:=1;
end;

-- OS 465559

if (OLD.nr_interno_conta is not null) then
	
	select	max(dt_geracao_resumo)
	into STRICT	dt_geracao_resumo_w
	from 	conta_paciente
	where 	nr_interno_conta = OLD.nr_interno_conta;
	
	if (dt_geracao_resumo_w is not null) then
		
		update	conta_paciente
		set 	dt_geracao_resumo  = NULL
		where 	nr_interno_conta = OLD.nr_interno_conta;
		
	end if;
	
end if;

<<final>>

null;

  END;
RETURN OLD;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_procedimento_paciente_delete() FROM PUBLIC;

CREATE TRIGGER procedimento_paciente_delete
	BEFORE DELETE ON procedimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_procedimento_paciente_delete();

