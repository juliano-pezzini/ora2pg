-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS parecer_medico_atual ON parecer_medico CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_parecer_medico_atual() RETURNS trigger AS $BODY$
declare

ie_integracao_w		varchar(1);
ds_retorno_integracao_w	varchar(4000);
cd_estabelecimento_w    smallint := obter_estabelecimento_ativo;
nr_atendimento_w        bigint;
cd_pessoa_fisica_w      bigint;
cd_pessoa_parecer_w     bigint;
cd_especialidade_w      bigint;
cd_especialidade_dest_w bigint;
nr_seq_tipo_parecer_w   bigint;
nr_seq_tipo_parecer_ww  regra_envio_sms.nr_seq_tipo_parecer%type;
nr_seq_equipe_dest_w    bigint;
nr_seq_evento_w         bigint;
cd_medico_w             parecer_medico_req.cd_medico%type;

qt_reg_w				smallint;

c01 CURSOR FOR
    SELECT
        nr_seq_evento
    from (
            SELECT
                1 cd,
                nr_seq_evento
            from
                regra_envio_sms
            where
                cd_estabelecimento = cd_estabelecimento_w
                and ie_evento_disp = 'LRP'
                and coalesce(ie_situacao, 'A') = 'A'
                and nr_seq_tipo_parecer = nr_seq_tipo_parecer_w
            
union

            select
                2 cd,
                nr_seq_evento
            from
                regra_envio_sms
            where
                cd_estabelecimento = cd_estabelecimento_w
                and ie_evento_disp = 'LRP'
                and coalesce(ie_situacao, 'A') = 'A'
                and coalesce(nr_seq_tipo_parecer, coalesce(nr_seq_tipo_parecer_w, - 1)) = coalesce(nr_seq_tipo_parecer_w, - 1)
        ) alias5 LIMIT 1;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto Final;
end if;

if (NEW.nr_seq_interno is null) then
	select	nextval('parecer_medico_seq')
	into STRICT	NEW.nr_seq_interno
	;
end if;

if (coalesce(OLD.DT_ATUALIZACAO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_ATUALIZACAO) and (NEW.DT_ATUALIZACAO is not null) then
	NEW.ds_utc		:= obter_data_utc(NEW.DT_ATUALIZACAO, 'HV');	
end if;

if (coalesce(OLD.DT_LIBERACAO,LOCALTIMESTAMP + interval '10 days') <> NEW.DT_LIBERACAO) and (NEW.DT_LIBERACAO is not null) then
	NEW.ds_utc_atualizacao	:= obter_data_utc(NEW.DT_LIBERACAO,'HV');
end if;

if (NEW.ie_situacao = 'I') then
	CALL wl_gerar_finalizar_tarefa('DL', 'R', null, null, NEW.nm_usuario, LOCALTIMESTAMP,'N',null,null,null,null,null,null,null, NEW.nr_parecer );
end if;

-- WorkList AtePac_WL (357)

if (NEW.dt_liberacao is not null) and (OLD.dt_liberacao is null) then
	CALL wl_gerar_finalizar_tarefa('DL', 'F', null, null, NEW.nm_usuario, LOCALTIMESTAMP,'N',null,null,null,null,null,null,null, NEW.nr_parecer );
end if;

if (NEW.dt_liberacao is not null) and (OLD.dt_liberacao is null) then
	
	Select  coalesce(max(ie_integracao),'N')
	into STRICT	ie_integracao_w
	from	parecer_medico_req
	where	nr_parecer = NEW.nr_parecer;

	if (ie_integracao_w = 'S') then
	
		SELECT BIFROST.SEND_INTEGRATION(
		'clinicalnotes.opinioncounterreferralreturn',
		'com.philips.tasy.integration.atepac.clinicalNotes.opinionCounterReferralReturn.OpinionCounterReferralReturn',
		'{"internalSequence" : '|| NEW.nr_seq_interno || '}',
		NEW.nm_usuario)
		INTO STRICT ds_retorno_integracao_w
		;
		
	end if;

-- Event Resposta_Parecer

  SELECT nr_atendimento,
         cd_pessoa_fisica, 
         cd_pessoa_parecer, 
         cd_especialidade, 
         cd_especialidade_dest,
         nr_seq_tipo_parecer, 
         nr_seq_equipe_dest,
         cd_medico
  INTO STRICT   nr_atendimento_w, cd_pessoa_fisica_w, cd_pessoa_parecer_w, 
         cd_especialidade_w, 
  cd_especialidade_dest_w, nr_seq_tipo_parecer_w, nr_seq_equipe_dest_w, cd_medico_w
  FROM   parecer_medico_req 
  WHERE  nr_parecer = NEW.nr_parecer;

  if (cd_pessoa_parecer_w is null) then
    cd_pessoa_parecer_w := NEW.cd_medico;
  end if;
  cd_especialidade_dest_w := obter_especialidade_medico(NEW.cd_medico, 'C');

  OPEN c01;

  LOOP 
      FETCH c01 INTO nr_seq_evento_w;
      EXIT WHEN NOT FOUND; /* apply on c01 */

      BEGIN
            CALL Gerar_evento_paciente(nr_seq_evento_w, nr_atendimento_w, cd_pessoa_fisica_w, NULL, NEW.nm_usuario, NULL, NULL, NULL, NULL, cd_medico_w, cd_medico_w, NULL, NEW.nr_parecer, NULL, NULL, 'N', NULL,
            ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP), NULL, NULL, NULL, NULL,
            cd_especialidade_dest_w, cd_especialidade_w, nr_seq_tipo_parecer_w, nr_seq_equipe_dest_w, 'S');

      END;
  END LOOP;

  CLOSE c01;
	
end if;

<<Final>>
qt_reg_w	:= 0;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_parecer_medico_atual() FROM PUBLIC;

CREATE TRIGGER parecer_medico_atual
	BEFORE INSERT OR UPDATE ON parecer_medico FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_parecer_medico_atual();

