-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_paciente_inf_atual ON atendimento_paciente_inf CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_paciente_inf_atual() RETURNS trigger AS $BODY$
declare

qt_reg_w                integer;
qt_eventos_w            integer;

reg_integracao_p        gerar_int_padrao.reg_integracao;
nr_atendimento_w        atendimento_paciente.nr_atendimento%type;
cd_pessoa_fisica_w      atendimento_paciente.cd_pessoa_fisica%type;
nr_seq_episodio_w       atendimento_paciente.nr_seq_episodio%type;
ie_tipo_kv_w            tipo_admissao_fat.ie_tipo_kv%type;
nr_seq_conv_w           conversao_meio_externo.nr_sequencia%type;

ie_evento_treat_cer_w   constant intpd_eventos.ie_evento%type := '403';
ie_evento_enviar_pf_w   constant intpd_eventos.ie_evento%type := '120';
ie_evento_env_episo_w   constant intpd_eventos.ie_evento%type := '106';
ie_evento_env_case_w    constant intpd_eventos.ie_evento%type := '127';
nm_tabela_atend_pac_w   constant conversao_meio_externo.nm_tabela%type := 'ATENDIMENTO_PACIENTE_INF';
nm_atributo_w           constant conversao_meio_externo.nm_atributo%type := 'NR_SEQUENCIA';
ie_operacao_altera_w    constant varchar(1) := 'A';
ie_operacao_inclui_w    constant varchar(1) := 'I';
ie_operacao_exclui_w    constant varchar(1) := 'E';
ie_situacao_ativo_w     constant varchar(1) := 'A';

function get_pf_atendimento(nr_atendimento_p bigint) return text is

cd_pessoa_fisica_w		atendimento_paciente.cd_pessoa_fisica%type;

pragma autonomous_transaction;
BEGIN
  BEGIN
select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

return cd_pessoa_fisica_w;
end;

function get_tipo_atendimento(nr_atendimento_p number) return varchar2 is

ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;

pragma autonomous_transaction;
BEGIN
select	max(ie_tipo_atendimento)
into STRICT	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

return ie_tipo_atendimento_w;

end;

function get_tipo_admissao_fat(nr_atendimento_p number) return number is

nr_seq_tipo_admissao_fat_w	atendimento_paciente.nr_seq_tipo_admissao_fat%type;

pragma autonomous_transaction;
BEGIN
select	max(nr_seq_tipo_admissao_fat)
into STRICT	nr_seq_tipo_admissao_fat_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

return nr_seq_tipo_admissao_fat_w;

end;

function get_tipo_nr_episodio(nr_atendimento_p number) return number is

nr_seq_episodio_w	atendimento_paciente.nr_seq_episodio%type;

pragma autonomous_transaction;
BEGIN
select	max(nr_seq_episodio)
into STRICT	nr_seq_episodio_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

return nr_seq_episodio_w;

end;

procedure enviar_atual_atendimentos_case(nr_seq_episodio_p number) is

reg_integracao_w		gerar_int_padrao.reg_integracao;

c01 CURSOR FOR
SELECT	a.cd_pessoa_fisica,
	a.nr_atendimento,
	a.ie_tipo_atendimento
from	atendimento_paciente a
where	a.nr_seq_episodio = nr_seq_episodio_p
and	a.dt_cancelamento is null
and	a.dt_alta is null
and	exists (	SELECT	1
		from	atend_paciente_unidade x
		where	x.nr_atendimento = a.nr_atendimento);

c01_w	c01%rowtype;

pragma autonomous_transaction;
BEGIN
	BEGIN
		open C01;
		loop
		fetch C01 into c01_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */

			reg_integracao_w.ie_operacao		:=	ie_operacao_altera_w;	
			reg_integracao_w.cd_pessoa_fisica	:=	c01_w.cd_pessoa_fisica;
			reg_integracao_w.nr_atendimento		:=	c01_w.nr_atendimento;

			if (get_case_encounter_type(null, null, reg_integracao_w.nr_atendimento, null) = '1') then	
				reg_integracao_w := gerar_int_padrao.gravar_integracao(ie_evento_env_episo_w, nr_seq_episodio_p, coalesce(obter_usuario_ativo,OLD.nm_usuario), reg_integracao_w);
			else
				BEGIN
				select	count(1)
				into STRICT	qt_reg_w
				from	intpd_fila_transmissao
				where	nr_seq_documento	= c01_w.nr_atendimento
				and	ie_operacao		= ie_operacao_inclui_w
				and	ie_status		in ('P', 'E', 'AP')
				and	ie_evento		= ie_evento_env_case_w  LIMIT 1;
				exception
				when no_data_found then
					qt_reg_w := 0;
				end;
			
				if (qt_reg_w = 0) then
					reg_integracao_w := gerar_int_padrao.gravar_integracao(ie_evento_enviar_pf_w, reg_integracao_w.nr_atendimento, coalesce(obter_usuario_ativo,OLD.nm_usuario), reg_integracao_w);
				end if;	
			end if;

		end loop;
		close C01;

		commit;
	
	exception
	   when others then
		   rollback;
			CALL wheb_mensagem_pck.exibir_mensagem_abort(sqlerrm);
   end;

end;

BEGIN

nr_atendimento_w	:=	coalesce(NEW.nr_atendimento, OLD.nr_atendimento);
cd_pessoa_fisica_w	:=	get_pf_atendimento(nr_atendimento_w);

if	((TG_OP = 'INSERT' or TG_OP = 'UPDATE') and (coalesce(wheb_usuario_pck.get_ie_executar_trigger, 'S') = 'S'))	then
	CALL insere_pessoa_fisica_emp(NEW.cd_cgc_empregador,
							NEW.dt_inicio_trabalho,
							NEW.nm_usuario,
							cd_pessoa_fisica_w,
							null,
							NEW.cd_profissao,
							NEW.ds_profissao,
							coalesce(OLD.cd_cgc_empregador, NEW.cd_cgc_empregador),
							'N',
							NEW.ds_empresa,
							coalesce(OLD.ds_empresa, NEW.ds_empresa),
                            NEW.ds_endereco_empreg,
							NEW.nr_endereco_empreg,
							NEW.ds_pais_empreg,
							NEW.cd_cep_empreg,
							NEW.ds_municipio_empreg,
							NEW.nr_telefone
                            );
end if;

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
	/* Verificar se existe cadastrado pelo menos um evento*/


	BEGIN
	select	count(1)
	into STRICT	qt_eventos_w
	from	intpd_eventos
	where	ie_evento	= ie_evento_treat_cer_w
	and	ie_situacao	= ie_situacao_ativo_w  LIMIT 1;
	exception
	when no_data_found then
		qt_eventos_w	:= 0;
	end;
	
	nr_seq_episodio_w := coalesce(get_tipo_nr_episodio(nr_atendimento_w),0);

	enviar_atual_atendimentos_case(nr_seq_episodio_w);

	select  max(nr_atendimento)
    into STRICT    nr_atendimento_w
    from    atendimento_paciente
    where   nr_seq_episodio = nr_seq_episodio_w;
	
	if	((qt_eventos_w > 0) and (coalesce(get_tipo_atendimento(nr_atendimento_w),'0') <> '1')) then
		
		BEGIN
		select	1
		into STRICT	qt_reg_w
		from	atend_paciente_unidade
		where	nr_atendimento	= nr_atendimento_w  LIMIT 1;
		exception
		when no_data_found then
			qt_reg_w := 0;
		end;
		
		/*Movido o tratamento para a ish_atend_pac_unidade_ aftins, para agendar a msg somente apos agendado o envio do case.
		Neste caso, ira agendar somente se o atendimento ja possuir unidade e o registro for criado apos*/

		if (TG_OP = 'INSERT') and (qt_reg_w > 0) then	
			
			reg_integracao_p.nr_seq_tipo_admissao_fat	:= 	get_tipo_admissao_fat(nr_atendimento_w);			
			reg_integracao_p.ie_operacao			:=	ie_operacao_inclui_w;	
			reg_integracao_p.cd_pessoa_fisica		:=	cd_pessoa_fisica_w;
			reg_integracao_p.nr_atendimento			:=	nr_atendimento_w;
					
			reg_integracao_p =>   reg_integracao_p := gerar_int_padrao.gravar_integracao(
                ie_evento_p =>        ie_evento_treat_cer_w, nr_seq_documento_p => NEW.nr_sequencia, nm_usuario_p =>       coalesce(obter_usuario_ativo, coalesce(NEW.nm_usuario, OLD.nm_usuario)), reg_integracao_p =>   reg_integracao_p);
		
		elsif (not TG_OP = 'INSERT') and (qt_reg_w > 0) then
			
			reg_integracao_p.nr_seq_tipo_admissao_fat	:= 	get_tipo_admissao_fat(nr_atendimento_w);
			
			if (TG_OP = 'UPDATE' and OLD.dt_inicio_validade is null and NEW.dt_inicio_validade is not null and OLD.dt_validade is null and NEW.dt_validade is not null)then
				reg_integracao_p.ie_operacao		:=	ie_operacao_altera_w;
			else
				reg_integracao_p.ie_operacao		:=	ie_operacao_exclui_w;
			end if;
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_conv_w
			from	conversao_meio_externo
			where	nm_tabela	= nm_tabela_atend_pac_w
			and	nm_atributo	= nm_atributo_w
			and	cd_interno	= coalesce(NEW.nr_sequencia, OLD.nr_sequencia);

			reg_integracao_p.cd_pessoa_fisica	:=	cd_pessoa_fisica_w;
			reg_integracao_p.nr_atendimento		:=	nr_atendimento_w;	
			--Em seguida, uma inclusao para o novo registro

			if (nr_seq_conv_w is not null) then
				reg_integracao_p =>   reg_integracao_p := gerar_int_padrao.gravar_integracao(
                    ie_evento_p =>        ie_evento_treat_cer_w, nr_seq_documento_p => coalesce(NEW.nr_atendimento,OLD.nr_atendimento), nm_usuario_p =>       coalesce(obter_usuario_ativo, coalesce(NEW.nm_usuario, OLD.nm_usuario)), reg_integracao_p =>   reg_integracao_p);
			end if;
		end if;
	end if;
end if;

  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_paciente_inf_atual() FROM PUBLIC;

CREATE TRIGGER atendimento_paciente_inf_atual
	AFTER INSERT OR UPDATE OR DELETE ON atendimento_paciente_inf FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_paciente_inf_atual();

