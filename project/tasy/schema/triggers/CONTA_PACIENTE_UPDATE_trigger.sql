-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS conta_paciente_update ON conta_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_conta_paciente_update() RETURNS trigger AS $BODY$
declare

dt_alta_w			timestamp;
dt_entrada_w		timestamp;
dt_sistema_w		timestamp            := LOCALTIMESTAMP;
dt_dia_vcto_w		smallint;
dt_ref_valida_w		timestamp;
dt_virada_w		timestamp;
ie_ok_w			varchar(1) := 'S';
qt_titulo_w		integer;
qt_nota_fiscal_w		integer;
ie_tipo_convenio_w		integer;
ie_alterar_final_aih_w	varchar(10);
qt_aih_unif_w		integer;
dt_final_w		timestamp;
nr_seq_apresent_w		bigint;
nr_protocolo_w		varchar(40);
dt_mesano_referencia_w	timestamp;
ds_status_protocolo_w	varchar(40);
qt_apac_unif_w		integer;
ds_origem_w		varchar(1800);
qt_existe_w		integer;
cd_pessoa_fisica_w	varchar(10);
nr_seq_conta_conv_w	bigint;
nr_conta_atual_w		bigint := 0;
nr_conta_inicial_w		bigint;
nr_final_conta_w		bigint;
ds_motivo_bloqueio_w	varchar(255);
ds_obs_bloqueio_w	varchar(255);
nm_usuario_bloqueio_w	varchar(15);
dt_bloqueio_w		varchar(25);

nr_seq_status_fat_w	cf_regra_estagio.nr_seq_status_fat%type;
nr_seq_status_mob_w	conta_paciente.nr_seq_status_mob%type;
BEGIN
  BEGIN

BEGIN
select  dt_entrada,
        coalesce(dt_alta,dt_sistema_w),
	cd_pessoa_fisica
into STRICT    dt_entrada_w,
        dt_alta_w,
	cd_pessoa_fisica_w
from    atendimento_paciente
where   nr_atendimento = NEW.nr_atendimento;
exception
        when others then
        ie_ok_w := 'N';
end;

BEGIN
select  max(ie_tipo_convenio)
into STRICT    ie_tipo_convenio_w
from    convenio
where   cd_convenio = NEW.cd_convenio_parametro;
exception
        when others then
        ie_tipo_convenio_w := 0;
end;

if (NEW.ie_status_acerto = 1) and (OLD.ie_status_acerto = 2) and (substr(obter_titulo_conta_protocolo(0, NEW.nr_interno_conta),1,100) <> ' ') then
        BEGIN
        -- A conta possui titulos, nao pode ser aberta!

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(193540);
        end;
end if;

if (OLD.nr_seq_protocolo is not null) and (NEW.nr_seq_protocolo is null) and (obter_status_protocolo(OLD.nr_seq_protocolo) = 2) then
        BEGIN
	-- Nao e possivel retirar a conta do protocolo Definitivo!

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(193541);
        end;
end if;

if      ((OLD.nr_seq_protocolo is null) or (OLD.nr_seq_protocolo <> NEW.nr_seq_protocolo)) and (NEW.nr_seq_protocolo is not null) and (obter_status_protocolo(NEW.nr_seq_protocolo) = 2) then
	BEGIN	
	-- Nao e possivel inserir a conta em protocolo Definitivo!	

	CALL Wheb_mensagem_pck.exibir_mensagem_abort(225218);
	end;
end if;

if (OLD.nr_seq_protocolo is null) and (NEW.nr_seq_protocolo is not null) then
        BEGIN
        select  count(*)
        into STRICT    qt_nota_fiscal_w
        from    nota_fiscal
        where   nr_seq_protocolo        = NEW.nr_seq_protocolo
        and     ie_situacao = '1';
        if (qt_nota_fiscal_w > 0) then
                BEGIN
		-- Existe nota fiscal associada ao protocolo. Nao pode associar mais contas

		CALL Wheb_mensagem_pck.exibir_mensagem_abort(193543);
                end;
        end if;
        select  count(*)
        into STRICT    qt_titulo_w
        from    titulo_receber
        where   nr_seq_protocolo        = NEW.nr_seq_protocolo;
        if (qt_titulo_w > 0) then
                BEGIN
		-- Existe titulo associado ao protocolo. Nao pode associar mais contas

		CALL Wheb_mensagem_pck.exibir_mensagem_abort(193545);
                end;
        end if;

	select	count(*)
	into STRICT	qt_existe_w
	from	prot_conv_regra_ibge
	where	nr_seq_protocolo = NEW.nr_seq_protocolo;

	if (qt_existe_w > 0) then

		select	count(*)
		into STRICT	qt_existe_w
		from	prot_conv_regra_ibge b
		where	nr_seq_protocolo = NEW.nr_seq_protocolo
		and	exists (
			SELECT	1
			from	compl_pessoa_fisica a
			where	a.cd_pessoa_fisica = cd_pessoa_fisica_w
			and	a.cd_municipio_ibge = b.cd_municipio_ibge);

		if (qt_existe_w = 0) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(236176);
		end if;
	end if;
        end;
end if;

if (OLD.nr_seq_protocolo is null) and (NEW.nr_seq_protocolo is not null) then

	if (substr(obter_se_atend_bloqueado(NEW.nr_atendimento),1,1) = 'S') and (substr(obter_se_tipo_bloqueado(NEW.nr_atendimento, NEW.cd_convenio_parametro, 'I'),1,1) = 'S') then
		ds_motivo_bloqueio_w	:= substr(obter_dados_bloqueio_pac(NEW.nr_atendimento,1),1,255);
		ds_obs_bloqueio_w	:= substr(obter_dados_bloqueio_pac(NEW.nr_atendimento,2),1,255);
		nm_usuario_bloqueio_w	:= substr(obter_dados_bloqueio_pac(NEW.nr_atendimento,3),1,15);
		dt_bloqueio_w		:= substr(obter_dados_bloqueio_pac(NEW.nr_atendimento,4),1,25);

		CALL Wheb_mensagem_pck.exibir_mensagem_abort(247137,'DS_MOTIVO_BLOQUEIO=' || ds_motivo_bloqueio_w ||
			';DS_OBS_BLOQUEIO=' || coalesce(ds_obs_bloqueio_w,' ') || ';NM_USUARIO_BLOQUEIO=' || nm_usuario_bloqueio_w ||
			';DT_BLOQUEIO=' || dt_bloqueio_w);
	end if;

end if;

BEGIN
if (ie_ok_w = 'S') and (NEW.dt_periodo_inicial < dt_entrada_w) and (length(dt_entrada_w) < 8) then/*Inserido este tratamento para que nao ocorra o erro 'ORA-12899 Valor  muito grande para a coluna', OS 228723 - Geliard*/

	BEGIN
 	NEW.dt_periodo_inicial := dt_entrada_w;
	end;
end if;
exception
	when others then
	null;
	end;

select  count(*),
        max(dt_final)
into STRICT    qt_aih_unif_w,
        dt_final_w
from    sus_aih_unif
where   nr_interno_conta = NEW.nr_interno_conta;

select  count(*)
into STRICT    qt_apac_unif_w
from    sus_apac_unif
where   nr_interno_conta = NEW.nr_interno_conta;

/*Inicio alteracao OS190963 Geliard*/


if (ie_ok_w = 'S')                         and (NEW.ie_status_acerto = 2)             and (ie_tipo_convenio_w = 3)                and (coalesce(qt_aih_unif_w,0) > 0)              and
        ((NEW.dt_periodo_final > dt_alta_w)    or (dt_final_w > dt_alta_w))               then
        BEGIN
        if (NEW.dt_periodo_final > dt_alta_w) then
                BEGIN
                NEW.dt_periodo_final := dt_alta_w;
                end;
        end if;

	ie_alterar_final_aih_w := obter_valor_param_usuario(1123,91,obter_perfil_ativo,NEW.nm_usuario,0);

        if (ie_alterar_final_aih_w = 'S')  then
                BEGIN

                BEGIN
                update  sus_aih_unif
                set     dt_final = dt_alta_w
                where   nr_interno_conta = NEW.nr_interno_conta
                and     dt_final > dt_alta_w;
                end;

                end;
        end if;

        end;
elsif (ie_ok_w = 'S')                         and (NEW.ie_status_acerto = 2)             and (coalesce(qt_apac_unif_w,0) = 0)		and (NEW.dt_periodo_final > dt_alta_w)     then
        BEGIN
        NEW.dt_periodo_final := dt_alta_w;
        end;
end if;
/*Fim alteracao OS190963 Geliard*/


if (NEW.dt_periodo_inicial > NEW.dt_periodo_final) then
        BEGIN
        NEW.dt_periodo_final := (NEW.dt_periodo_inicial + 365);
        end;
end if;

if (ie_ok_w = 'S')                                         and (NEW.ie_status_acerto = 2)                     then
        BEGIN

	if (NEW.nr_seq_protocolo is null) then
                BEGIN
                NEW.nr_protocolo                       := '0';
                select  coalesce(dt_dia_vencimento,30),
                        coalesce(dt_ref_valida,LOCALTIMESTAMP)
                into STRICT            dt_dia_vcto_w,
                                dt_ref_valida_w
                from            convenio
                where   cd_convenio = NEW.cd_convenio_parametro;

                if (to_date(to_char(NEW.dt_periodo_final,'dd/mm/yyyy'),'dd/mm/yyyy') >
                        to_date(to_char(dt_ref_valida_w,'dd/mm/yyyy'),'dd/mm/yyyy')) then
                        BEGIN
                        dt_virada_w := PKG_DATE_UTILS.ADD_MONTH(dt_ref_valida_w,1,0);
                        if ((to_char(pkg_date_utils.end_of(dt_virada_w, 'MONTH'),'dd'))::numeric  <= dt_dia_vcto_w) then
                                BEGIN
                                dt_virada_w := pkg_date_utils.get_datetime(pkg_date_utils.end_of(dt_virada_w, 'MONTH'), coalesce(dt_virada_w, PKG_DATE_UTILS.GET_TIME('00:00:00')));
                                end;
                        else
                                BEGIN
                                dt_virada_w :=  to_date(to_char(dt_dia_vcto_w)||'/'||to_char(dt_virada_w,'mm/yyyy'),'DD/MM/YYYY');
                                end;
                        end if;
                        NEW.dt_mesano_referencia := dt_virada_w;
                        end;
                end if;
                NEW.nr_seq_apresent            := null;
                end;
        else
                BEGIN
                select  dt_mesano_referencia,
                        nr_protocolo
                into STRICT    dt_mesano_referencia_w,
                        nr_protocolo_w
                from    protocolo_convenio
                where   nr_seq_protocolo = NEW.nr_seq_protocolo;

                NEW.dt_mesano_referencia       := dt_mesano_referencia_w;
                NEW.nr_protocolo               := substr(nr_protocolo_w,1,40);

                if (NEW.nr_seq_apresent is null) then
                        BEGIN
                        select nextval('conta_paciente_seq2')
                        into STRICT    nr_seq_apresent_w
;
                        NEW.nr_seq_apresent := nr_seq_apresent_w;
                        end;
                end if;
                end;
        end if;
        end;
end if;

/* Marcus 11/10/2005 */


if (OLD.ie_status_acerto = 1)             and (NEW.ie_status_acerto = 2)             then
        BEGIN
        NEW.dt_conta_definitiva        := dt_sistema_w;
        NEW.qt_dias_conta              := NEW.dt_conta_definitiva - NEW.dt_periodo_inicial;
	NEW.qt_dias_periodo		:= NEW.dt_periodo_final - NEW.dt_periodo_inicial;
        end;
elsif (NEW.ie_status_acerto = 1)             then
        BEGIN
        NEW.dt_conta_definitiva        := null;
        NEW.qt_dias_conta              := null;
	NEW.qt_dias_periodo		:= null;
        end;
end if;

if (OLD.nr_seq_protocolo is null)         and (NEW.nr_seq_protocolo is not null)     then
        BEGIN
        NEW.dt_conta_protocolo := dt_sistema_w;
        end;
elsif (NEW.nr_seq_protocolo is null) then
        BEGIN
        NEW.dt_conta_protocolo := null;
        end;
end if;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_conta_conv_w
from	conta_convenio_atual
where	cd_convenio = NEW.cd_convenio_parametro
and 	dt_competencia = trunc(NEW.dt_mesano_referencia,'mm')
and	ie_situacao = 'A';

if (nr_seq_conta_conv_w > 0) then
	BEGIN

	if (coalesce(NEW.nr_conta_convenio,0) > 0) and (coalesce(OLD.nr_conta_convenio,0) <> coalesce(NEW.nr_conta_convenio,0)) then
		BEGIN


		BEGIN
		select	coalesce(nr_conta_inicial,0),
			coalesce(nr_final_conta,0)
		into STRICT	nr_conta_inicial_w,
			nr_final_conta_w
		from	conta_convenio_atual
		where	nr_sequencia = nr_seq_conta_conv_w;
		exception
		when others then
			nr_conta_inicial_w	:= 0;
			nr_final_conta_w	:= 0;
		end;

		if (NEW.nr_conta_convenio > nr_final_conta_w) then
			BEGIN
			NEW.nr_conta_convenio := nr_conta_inicial_w;
			nr_conta_atual_w := nr_conta_inicial_w;
			end;
		else
			nr_conta_atual_w := NEW.nr_conta_convenio;
		end if;

		if (nr_conta_atual_w > 0) then
			BEGIN

			update 	conta_convenio_atual
			set 	nr_conta_atual 	= nr_conta_atual_w,
				dt_atualizacao 	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_sequencia 	= nr_seq_conta_conv_w;

			end;
		end if;

		end;
	end if;

	end;
end if;

if      ((coalesce(NEW.nr_seq_status_fat,0) <> coalesce(OLD.nr_seq_status_fat,0))	or (coalesce(NEW.nr_seq_status_mob,0) <> coalesce(OLD.nr_seq_status_mob,0)))	then

	BEGIN

	insert into cf_log_conta_paciente(
				nr_sequencia,
				nr_atendimento,
				nr_interno_conta,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_status_fat,
				nr_seq_status_fat_ant,
				nr_seq_status_mob,
				nr_seq_status_mob_ant,
				nr_seq_regra_fluxo)
			values (
				nextval('cf_log_conta_paciente_seq'),
				NEW.nr_atendimento,
				NEW.nr_interno_conta,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				NEW.nr_seq_status_fat,
				OLD.nr_seq_status_fat,
				NEW.nr_seq_status_mob,
				OLD.nr_seq_status_mob,
				NEW.nr_seq_regra_fluxo);

        end;
end if;

if (NEW.nr_interno_conta is not null) and (coalesce(NEW.nr_atendimento,0) <> 0) and (coalesce(OLD.nr_atendimento,0) <> 0) and (NEW.nr_atendimento <> OLD.nr_atendimento) then
	BEGIN
	insert into conta_hist_transf_atend(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_interno_conta,
				nr_atendimento_atual,
				nr_atendimento_old)
			values (nextval('conta_hist_transf_atend_seq'),
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				NEW.nr_interno_conta,
				NEW.nr_atendimento,
				OLD.nr_atendimento);


	end;
end if;

if (OLD.ie_status_acerto = 2 and NEW.ie_status_acerto = 1) then
	cf_retornar_status_fat(	NEW.nr_interno_conta,
							 'C',
							 nr_seq_status_fat_w,
							 nr_seq_status_mob_w,
							 NEW.nm_usuario);						
	
	NEW.nr_seq_status_fat := nr_seq_status_fat_w;			
	NEW.nr_seq_status_mob := coalesce(nr_seq_status_mob_w, NEW.nr_seq_status_mob);

        if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
                delete
                from    PROC_PAC_DESC_CONTAB
                where   nr_interno_conta = NEW.nr_interno_conta;

                delete
                from    MAT_ATEND_PAC_DESC_CONTAB
                where   nr_interno_conta = NEW.nr_interno_conta;
        end if;
end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_conta_paciente_update() FROM PUBLIC;

CREATE TRIGGER conta_paciente_update
	BEFORE UPDATE ON conta_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_conta_paciente_update();

