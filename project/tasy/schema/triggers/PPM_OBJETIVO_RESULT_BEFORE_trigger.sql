-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS ppm_objetivo_result_before ON ppm_objetivo_result CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_ppm_objetivo_result_before() RETURNS trigger AS $BODY$
declare

dt_fim_ano_w		timestamp;
dt_referencia_w		timestamp;
nr_seq_acumulado_w	bigint;
nr_seq_result_w		bigint;
vl_calculado_w		ppm_objetivo_result.vl_resultado_calc%type;
vl_montante_w		ppm_objetivo_result.vl_montante%type;
vl_individual_w		ppm_objetivo_result.vl_individual%type;
ie_tipo_metrica_w	ppm_metrica.ie_tipo%type;
ie_informacao_w		ppm_metrica.ie_informacao%type;
qt_registro_w		bigint;

pragma autonomous_transaction;
BEGIN

select	a.ie_tipo,
	a.ie_informacao
into STRICT	ie_tipo_metrica_w,
	ie_informacao_w
from	ppm_metrica a,
	ppm_objetivo_metrica b
where	a.nr_sequencia = b.nr_seq_metrica
and	b.nr_sequencia = NEW.nr_seq_metrica;

if (NEW.vl_resultado_calc <> 0) and (ie_tipo_metrica_w = 'I') and (NEW.nm_usuario not in ('Tasy','TasyPPM')) then

	dt_fim_ano_w	:= PKG_DATE_UTILS.end_of(to_date('31/12/' || to_char(NEW.dt_referencia,'yyyy'),'dd/mm/yyyy'),'DAY');

	select	max(nr_sequencia)
	into STRICT	nr_seq_acumulado_w
	from	ppm_objetivo_result a
	where	a.nr_seq_metrica	= NEW.nr_seq_metrica
	and	dt_referencia		= dt_fim_ano_w;

	if (NEW.dt_referencia < dt_fim_ano_w) then
		dt_referencia_w	:= LOCALTIMESTAMP;
	else
		dt_referencia_w	:= dt_fim_ano_w;
	end if;

	if (TG_OP = 'INSERT') then
		select	count(1) + 1,
			coalesce(sum(vl_resultado_calc),0) + NEW.vl_resultado_calc
		into STRICT	qt_registro_w,
			vl_montante_w
		from	ppm_objetivo_result a
		where	a.nr_seq_metrica = NEW.nr_seq_metrica
		and	a.nr_sequencia	not in (nr_seq_acumulado_w)
		and	a.dt_referencia between trunc(dt_referencia_w,'year') and dt_referencia_w;
	else
		select	count(1) + 1,
			coalesce(sum(vl_resultado_calc),0) + NEW.vl_resultado_calc
		into STRICT	qt_registro_w,
			vl_montante_w
		from	ppm_objetivo_result a
		where	a.nr_seq_metrica 	= NEW.nr_seq_metrica
		and	a.nr_sequencia		not in (nr_seq_acumulado_w)
		and	a.nr_sequencia		<> OLD.nr_sequencia
		and	a.dt_referencia 	between trunc(dt_referencia_w,'year') and dt_referencia_w;
	end if;

	if (ie_informacao_w = 'V') then
		vl_calculado_w	:= vl_montante_w;
	else
		vl_calculado_w	:= dividir(vl_montante_w,qt_registro_w);
	end if;

	/* Inserir linha de acumulado caso não exista para essa métrica */

	if (nr_seq_acumulado_w is null) then
		select	nextval('ppm_objetivo_result_seq')
		into STRICT	nr_seq_result_w
		;

		if (vl_calculado_w is not null) then

			insert into ppm_objetivo_result(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_metrica,
				dt_referencia,
				vl_resultado_calc,
				vl_resultado_manual,
				vl_montante,
				vl_individual)
			values (nr_seq_result_w,
				LOCALTIMESTAMP,
				'Tasy',
				LOCALTIMESTAMP,
				'Tasy',
				NEW.nr_seq_metrica,
				dt_fim_ano_w,
				coalesce(vl_calculado_w,0),
				null,
				vl_montante_w,
				vl_individual_w);

			insert into ppm_objetivo_result_ind(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_result,
				nr_seq_metrica)
			values (nextval('ppm_objetivo_result_ind_seq'),
				LOCALTIMESTAMP,
				'Tasy',
				LOCALTIMESTAMP,
				'Tasy',
				nr_seq_result_w,
				NEW.nr_seq_metrica);

			insert into ppm_objetivo_result_gestor(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_result,
				nr_seq_metrica)
			values (nextval('ppm_objetivo_result_gestor_seq'),
				LOCALTIMESTAMP,
				'Tasy',
				LOCALTIMESTAMP,
				'Tasy',
				nr_seq_result_w,
				NEW.nr_seq_metrica);
		end if;
	else
		update	ppm_objetivo_result
		set	vl_resultado_calc 	= vl_calculado_w,
			vl_montante		= vl_montante_w,
			vl_individual		= vl_individual_w
		where	nr_sequencia 		= nr_seq_acumulado_w;
	end if;

end if;

commit;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_ppm_objetivo_result_before() FROM PUBLIC;

CREATE TRIGGER ppm_objetivo_result_before
	BEFORE INSERT OR UPDATE ON ppm_objetivo_result FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_ppm_objetivo_result_before();

