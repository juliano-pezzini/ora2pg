-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS paciente_protocolo_medic_atual ON paciente_protocolo_medic CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_paciente_protocolo_medic_atual() RETURNS trigger AS $BODY$
declare
qt_minuto_aplicacao_w	bigint;
qt_hora_aplicacao_w	bigint;
ds_restricao_medic_onc_w 	varchar(100);
ie_acao_w  varchar(255);
ie_param_usuario_w varchar(1) := 'N';
pr_reducao_w bigint;

BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger = 'N')  then
	RETURN NEW;
end if;

CALL Abortar_Se_Protoc_Inativo(NEW.nr_seq_paciente);

if (NEW.IE_VIA_APLICACAO <> OLD.IE_VIA_APLICACAO) then
	NEW.IE_ALERTA_VIA_ADM	:= 'N';
end if;

if (TG_OP = 'INSERT')  or (NEW.cd_material <> OLD.cd_material) then
	CALL Consiste_Regra_Mat_quimio(NEW.cd_material);
end if;

ie_param_usuario_w := Obter_Param_Usuario(281, 1553, Obter_Perfil_Ativo, NEW.nm_usuario, obter_estabelecimento_ativo, ie_param_usuario_w);
    if (ie_param_usuario_w <>'N') then
         if (TG_OP = 'INSERT') then
                    CALL Gravar_Log_Alt_Prot_Onc(
                  NEW.nr_seq_paciente,
                  NEW.cd_material,
                  NEW.nm_usuario,
                  'PACIENTE_PROTOCOLO_MEDIC',
                  'QT_DOSE',
                  coalesce(OLD.QT_DOSE,0),
                  NEW.QT_DOSE,
                  'I');
              
     elsif (TG_OP = 'UPDATE') then

if (OLD.cd_material <> NEW.cd_material) THEN
        CALL Gravar_Log_Alt_Prot_Onc(   
          NEW.nr_seq_paciente,
          NEW.cd_material,
          NEW.nm_usuario,
          'PACIENTE_PROTOCOLO_MEDIC',
          'CD_MATERIAL',
          OLD.cd_material,
          NEW.cd_material,
           'A');
End if;

if (OLD.QT_DOSE <> NEW.QT_DOSE) THEN
     CALL Gravar_Log_Alt_Prot_Onc(   
          NEW.nr_seq_paciente,
          NEW.cd_material,
          NEW.nm_usuario,
          'PACIENTE_PROTOCOLO_MEDIC',
          'QT_DOSE',
          OLD.QT_DOSE,
          NEW.QT_DOSE,
          'A');
End if;
if (OLD.QT_DOSE_PRESCR <> NEW.QT_DOSE_PRESCR) THEN
      CALL Gravar_Log_Alt_Prot_Onc(
          NEW.nr_seq_paciente,
          NEW.cd_material,
          NEW.nm_usuario,
          'PACIENTE_PROTOCOLO_MEDIC',
           'QT_DOSE_PRESCR',
           OLD.QT_DOSE_PRESCR,
           NEW.QT_DOSE_PRESCR,
           'A');
End if;

if (OLD.DS_DIAS_APLICACAO <> NEW.DS_DIAS_APLICACAO) THEN
CALL Gravar_Log_Alt_Prot_Onc(
              NEW.nr_seq_paciente,
              NEW.cd_material,
              NEW.nm_usuario,
              'PACIENTE_PROTOCOLO_MEDIC',
              'DS_DIAS_APLICACAO',
              OLD.DS_DIAS_APLICACAO,
              NEW.DS_DIAS_APLICACAO,
               'A');
 End if;
        end if;
        end if;
if ((TG_OP = 'INSERT') or (NEW.cd_material <> OLD.cd_material)) and (NEW.cd_material > 0) and (NEW.QT_HORA_APLICACAO is null) and (NEW.QT_MIN_APLICACAO is null) then

	select	coalesce(max(QT_MIN_APLICACAO),0)
	into STRICT	qt_minuto_aplicacao_w
	from	material
	where	cd_material	= NEW.cd_material;	

	if (qt_minuto_aplicacao_w > 0) then
		if (qt_minuto_aplicacao_w < 60) then
			qt_hora_aplicacao_w	:= null;
		elsif (qt_minuto_aplicacao_w = 60) then
			qt_hora_aplicacao_w	:= 1;
			qt_minuto_aplicacao_w	:= null;
		else
			qt_hora_aplicacao_w	:= trunc(dividir(qt_minuto_aplicacao_w,60));		
			qt_minuto_aplicacao_w	:= (qt_minuto_aplicacao_w - (qt_hora_aplicacao_w * 60));
		end if;
	else
		if (NEW.IE_VIA_APLICACAO is not null) then
			select	max(qt_hora_aplicacao),
				max(qt_minuto_aplicacao)
			into STRICT	qt_hora_aplicacao_w,
				qt_minuto_aplicacao_w
			from	material_prescr
			where	cd_material = NEW.cd_material
			and	coalesce(ie_via_aplicacao, coalesce(NEW.ie_via_aplicacao,'0')) = coalesce(NEW.ie_via_aplicacao,'0');
		end if;
	end if;

	if (qt_minuto_aplicacao_w = 0) then
		qt_minuto_aplicacao_w := null;
	end if;	

	if (coalesce(qt_minuto_aplicacao_w,0) > 0) or (coalesce(qt_hora_aplicacao_w,0) > 0) then
		NEW.QT_HORA_APLICACAO	:= qt_hora_aplicacao_w;
		NEW.QT_MIN_APLICACAO	:= qt_minuto_aplicacao_w;
	end if;	
end if;

if (NEW.pr_reducao	is not null) and (coalesce(NEW.pr_reducao,0)	<> coalesce(OLD.pr_reducao,0)) and (coalesce(NEW.ie_aplica_reducao,'S') = 'S') then
    pr_reducao_w := 100;
    if (OLD.pr_reducao > 0) then
        pr_reducao_w := OLD.pr_reducao;
    end if;
	NEW.QT_DOSE_PRESCR	:= (((coalesce(NEW.pr_reducao,100) * coalesce(NEW.QT_DOSE_PRESCR,0)) / pr_reducao_w));
end if;

if (NEW.cd_unid_medida_ref is null) then
	NEW.cd_unid_medida_ref := NEW.cd_unid_med_prescr;
end if;
	
if (NEW.qt_dose_ref is null) then
	NEW.qt_dose_ref := NEW.qt_dose_prescr;
end if;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_paciente_protocolo_medic_atual() FROM PUBLIC;

CREATE TRIGGER paciente_protocolo_medic_atual
	BEFORE INSERT OR UPDATE ON paciente_protocolo_medic FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_paciente_protocolo_medic_atual();

