-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_paciente_proc_atual ON agenda_paciente_proc CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_paciente_proc_atual() RETURNS trigger AS $BODY$
declare

cd_estabelecimento_w		smallint;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
ie_tipo_atendimento_w		smallint;
cd_edicao_amb_w                 integer;
vl_m2_filme_w                   double precision := 0;
cd_agenda_w			bigint;
nr_seq_proc_autor_w		bigint;
nr_atendimento_w		bigint;
cd_setor_atendimento_w		integer;
cd_pessoa_fisica_w		varchar(10);
ie_cobertura_conv_w		varchar(15);
ie_regra_w			integer;
cd_plano_w			varchar(10);
cd_tipo_acomodacao_w	agenda_paciente.cd_tipo_acomodacao%type;
cd_usuario_convenio_w	agenda_paciente.cd_usuario_convenio%type;
ie_carater_cirurgia_w	agenda_paciente.ie_carater_cirurgia%type;
ds_erro_w		varchar(255);


expressao1_w	varchar(255) := obter_desc_expressao_idioma(773925, null, wheb_usuario_pck.get_nr_seq_idioma);
expressao2_w	varchar(255) := obter_desc_expressao_idioma(618484, null, wheb_usuario_pck.get_nr_seq_idioma);
BEGIN
  BEGIN

if (NEW.nr_seq_proc_interno is not null) then
	BEGIN
	select	max(b.cd_estabelecimento),
		max(a.cd_convenio),
		max(a.cd_categoria),
		max(a.ie_tipo_atendimento),
		max(a.cd_agenda),
		max(a.nr_atendimento),
		max(a.cd_setor_atendimento),
		max(a.cd_pessoa_fisica),
		max(a.cd_plano),
		max(a.cd_tipo_acomodacao),
		max(a.cd_usuario_convenio),
		max(a.ie_carater_cirurgia)
	into STRICT	cd_estabelecimento_w,
		cd_convenio_w,
		cd_categoria_w,
		ie_tipo_atendimento_w,
		cd_agenda_w,
		nr_atendimento_w,
		cd_setor_atendimento_w,
		cd_pessoa_fisica_w,
		cd_plano_w,
		cd_tipo_acomodacao_w,
		cd_usuario_convenio_w,
		ie_carater_cirurgia_w
	from	agenda_paciente a,
		agenda b
	where	a.cd_agenda = b.cd_agenda
	and	a.nr_sequencia = NEW.nr_sequencia;

	SELECT * FROM Obter_Edicao_Proc(cd_estabelecimento_w, coalesce(NEW.cd_convenio,cd_convenio_w), coalesce(NEW.cd_categoria,cd_categoria_w), LOCALTIMESTAMP, NEW.cd_procedimento, cd_edicao_amb_w, vl_m2_filme_w) INTO STRICT cd_edicao_amb_w, vl_m2_filme_w;

	NEW.cd_procedimento_tuss       :=      Define_procedimento_TUSS(cd_estabelecimento_w,
								   NEW.nr_seq_proc_interno,
								   coalesce(NEW.cd_convenio,cd_convenio_w),
								   coalesce(NEW.cd_categoria,cd_categoria_w),
								   ie_tipo_atendimento_w,
								   LOCALTIMESTAMP,
								   NEW.cd_procedimento,
								   NEW.ie_origem_proced,
								   cd_edicao_amb_w,
								   null,
								   null);
        end;
	
elsif (OLD.nr_seq_proc_interno is not null) and (NEW.nr_seq_proc_interno is null) and (OLD.cd_procedimento_tuss is not null) and (OLD.cd_procedimento_tuss = NEW.cd_procedimento_tuss)	then
	
	NEW.cd_procedimento_tuss       :=	null;	
	
end if;


if   (((NEW.cd_convenio <> OLD.cd_convenio) or (OLD.cd_convenio is null)) or
      ((NEW.cd_plano <> OLD.cd_plano) or (OLD.cd_plano is null)) or
      ((NEW.cd_categoria <> OLD.cd_categoria) or (OLD.cd_categoria is null)) or
      ((NEW.nr_seq_proc_interno is not null) or (NEW.nr_seq_proc_interno <> OLD.nr_seq_proc_interno))) then

	
		SELECT * FROM verif_autorizacao_conv_age_pac(	nr_atendimento_w, coalesce(NEW.cd_convenio,cd_convenio_w), NEW.cd_procedimento, NEW.ie_origem_proced, NEW.nr_seq_proc_interno, ie_tipo_atendimento_w, coalesce(NEW.cd_plano,cd_plano_w), cd_setor_atendimento_w, coalesce(NEW.cd_categoria,cd_categoria_w), cd_estabelecimento_w, NEW.nr_sequencia, NEW.cd_medico, cd_pessoa_fisica_w, ie_cobertura_conv_w, ie_regra_w, ds_erro_w, cd_tipo_acomodacao_w, cd_usuario_convenio_w, ie_carater_cirurgia_w) INTO STRICT ie_cobertura_conv_w, ie_regra_w, ds_erro_w;
		NEW.ie_cobertura_conv := ie_cobertura_conv_w;			
	
end if;


if (TG_OP = 'UPDATE') and (NEW.cd_procedimento <> OLD.cd_procedimento) then
	CALL atualiza_pedido_kit_agenda(	NEW.nr_sequencia,
					OLD.cd_procedimento,
					OLD.ie_origem_proced,
					NEW.cd_procedimento,
					NEW.ie_origem_proced,
					NEW.nr_seq_proc_interno,
					NEW.cd_medico,
					NEW.nm_usuario,
					cd_estabelecimento_w,
					cd_agenda_w,
					cd_pessoa_fisica_w);
end if;	

if (TG_OP = 'UPDATE')and (NEW.qt_procedimento <> OLD.qt_procedimento) then
	
	BEGIN
	select	a.nr_sequencia
	into STRICT	nr_seq_proc_autor_w
	from	procedimento_autorizado a,
		autorizacao_convenio b
	where	a.nr_sequencia_autor 	= b.nr_sequencia
	and	a.nr_seq_agenda		= NEW.nr_sequencia
	and	a.nr_seq_agenda_proc 	= NEW.nr_seq_agenda
	and	a.cd_procedimento	= NEW.cd_procedimento
	and	not exists (	SELECT	1
				from	estagio_autorizacao x
				where	x.nr_sequencia = b.nr_seq_estagio
				and	x.ie_interno = '10'
				and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa);
	exception
	when others then
		nr_seq_proc_autor_w := null;
	end;

	if (nr_seq_proc_autor_w is not null) then
		
		update	procedimento_autorizado
		set	qt_solicitada = NEW.qt_procedimento,
			nm_usuario	= NEW.nm_usuario,
			dt_atualizacao	= LOCALTIMESTAMP,
			ds_observacao	= substr(ds_observacao || chr(13)||chr(10)|| expressao1_w || ' ' || OLD.qt_procedimento || ' ' || expressao2_w || ' ' || NEW.qt_procedimento,1,2000)
		where	nr_sequencia	= nr_seq_proc_autor_w;
		
	end if;
end if;


  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_paciente_proc_atual() FROM PUBLIC;

CREATE TRIGGER agenda_paciente_proc_atual
	BEFORE INSERT OR UPDATE ON agenda_paciente_proc FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_paciente_proc_atual();

