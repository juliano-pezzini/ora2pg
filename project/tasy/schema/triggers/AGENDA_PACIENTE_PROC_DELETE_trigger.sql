-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_paciente_proc_delete ON agenda_paciente_proc CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_paciente_proc_delete() RETURNS trigger AS $BODY$
declare
ie_exclui_proc_autor_w	varchar(5);
cd_estabelecimento_w	bigint;
nr_seq_proc_autor_w	bigint;
nr_seq_autor_w		bigint;
cd_agenda_w		bigint;
ds_obs_exclusao_w	varchar(4000) := substr(wheb_mensagem_pck.get_texto(326971),1,3800);
/*lhalves OS 217619 em 02/06/2010 - excluir o procedimento da autorização se a autorização estiver pendente*/

cd_pessoa_fisica_w		varchar(10);

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	b.nr_sequencia
from	procedimento_autorizado a,
	autorizacao_convenio b,
	estagio_autorizacao c
where	b.nr_seq_agenda		= OLD.nr_sequencia
and	b.nr_sequencia		= a.nr_sequencia_autor
and	a.cd_procedimento	= OLD.cd_procedimento
and	a.ie_origem_proced	= OLD.ie_origem_proced
and	b.nr_seq_estagio	= c.nr_sequencia
and	c.ie_interno		= 1;


c02 CURSOR FOR
SELECT	a.nr_sequencia,
	b.nr_sequencia
from	procedimento_autorizado a,
	autorizacao_convenio b,
	estagio_autorizacao c
where	b.nr_seq_agenda		= OLD.nr_sequencia
and	b.nr_sequencia		= a.nr_sequencia_autor
and	a.cd_procedimento	= OLD.cd_procedimento
and	a.ie_origem_proced	= OLD.ie_origem_proced
and	b.nr_seq_estagio	= c.nr_sequencia
and	coalesce(c.ie_excluir_proc_adic_agenda,'N') = 'S';


c03 CURSOR FOR
SELECT	a.nr_sequencia,
	b.nr_sequencia
from	procedimento_autorizado a,
	autorizacao_convenio b,
	estagio_autorizacao c
where	b.nr_seq_agenda		= OLD.nr_sequencia
and	b.nr_sequencia		= a.nr_sequencia_autor
and	a.cd_procedimento	= OLD.cd_procedimento
and	a.ie_origem_proced	= OLD.ie_origem_proced
and	b.nr_seq_estagio	= c.nr_sequencia;


BEGIN

if (OLD.nr_seq_proc_interno is not null) then

	delete FROM agenda_pac_equip
	where  nr_seq_proc_interno = OLD.nr_seq_proc_interno
	and    nr_seq_agenda = OLD.nr_sequencia;

	delete FROM agenda_pac_cme
	where  nr_seq_proc_interno = OLD.nr_seq_proc_interno
	and    nr_seq_agenda = OLD.nr_sequencia;

end if;

select 	a.cd_estabelecimento,
         a.cd_agenda,
         b.cd_pessoa_fisica
into STRICT	   cd_estabelecimento_w,
         cd_agenda_w,
         cd_pessoa_fisica_w
from 	agenda a,
	agenda_paciente b
where	b.nr_sequencia		= OLD.nr_sequencia
and	b.cd_agenda		= a.cd_agenda;

ie_exclui_proc_autor_w := obter_param_usuario(871, 315, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_w, ie_exclui_proc_autor_w);


if (coalesce(ie_exclui_proc_autor_w, 'N') = 'S') then
	open c01;
	loop
	fetch c01 into
		nr_seq_proc_autor_w,
		nr_seq_autor_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		update	procedimento_paciente
		set 	nr_seq_proc_autor	 = NULL
		where	nr_seq_proc_autor	= nr_seq_proc_autor_w;

		update	autorizacao_convenio
		set	nr_seq_agenda_proc	 = NULL
		where	nr_sequencia		= nr_seq_autor_w;

		delete 	FROM procedimento_autorizado
		where	nr_sequencia		= nr_seq_proc_autor_w;
	end loop;
	close c01;
elsif (coalesce(ie_exclui_proc_autor_w, 'N') = 'E') then

	open c02;
	loop
	fetch c02 into
		nr_seq_proc_autor_w,
		nr_seq_autor_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		update	procedimento_paciente
		set 	nr_seq_proc_autor	 = NULL
		where	nr_seq_proc_autor	= nr_seq_proc_autor_w;

		update	autorizacao_convenio
		set	nr_seq_agenda_proc	 = NULL
		where	nr_sequencia		= nr_seq_autor_w;

		delete 	FROM procedimento_autorizado
		where	nr_sequencia		= nr_seq_proc_autor_w;
	end loop;
	close c02;
elsif (coalesce(ie_exclui_proc_autor_w, 'N') = 'N') then

	open c03;
	loop
	fetch c03 into
		nr_seq_proc_autor_w,
		nr_seq_autor_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */

		update	autorizacao_convenio
		set	nr_seq_agenda_proc	 = NULL
		where	nr_sequencia		= nr_seq_autor_w;

		update	procedimento_autorizado
		set	nm_usuario 		= coalesce(wheb_usuario_pck.get_nm_usuario(),'TASY'),
			dt_atualizacao		= LOCALTIMESTAMP,
			ds_observacao		= substr(CASE WHEN coalesce(ds_observacao,'X')='X' THEN ds_obs_exclusao_w  ELSE ds_observacao ||chr(13)||ds_obs_exclusao_w END ,1,3900)
		where	nr_sequencia		= nr_seq_proc_autor_w;
	end loop;
	close c03;

end if;

CALL atualiza_pedido_kit_agenda(	OLD.nr_sequencia,
				OLD.cd_procedimento,
				OLD.ie_origem_proced,
				null,
				null,
				null,
				null,
				OLD.nm_usuario,
				cd_estabelecimento_w,
				cd_agenda_w,
            cd_pessoa_fisica_w);


RETURN OLD;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_paciente_proc_delete() FROM PUBLIC;

CREATE TRIGGER agenda_paciente_proc_delete
	BEFORE DELETE ON agenda_paciente_proc FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_paciente_proc_delete();

