-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pessoa_fisica_sib_insert ON pessoa_fisica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pessoa_fisica_sib_insert() RETURNS trigger AS $BODY$
DECLARE

qt_beneficiarios_plano_w	bigint;
cd_estabelecimento_w		bigint;

/*
IE_ATRIBUTO

1 - NM_PESSOA_FISICA
2 - DT_NASCIMENTO
3 - IE_SEXO
4 - NR_CARTAO_NAC_SUS
6 - CD_NACIONALIDADE
7 - NR_PIS_PASEP
8 - NR_CPF
18-CD_DECLARACAO_NASC_VIVO

*/

BEGIN
  BEGIN

qt_beneficiarios_plano_w	:= 0;
cd_estabelecimento_w		:= wheb_usuario_pck.get_cd_estabelecimento;

if (cd_estabelecimento_w is null) then
	cd_estabelecimento_w	:= OLD.cd_estabelecimento;
end if;

if (wheb_usuario_pck.get_ie_executar_trigger = 'S') then
	if (OLD.nm_usuario is not null) and (cd_estabelecimento_w is not null) then
		select	count(1)
		into STRICT	qt_beneficiarios_plano_w
		from	pls_segurado
		where	cd_pessoa_fisica	= OLD.cd_pessoa_fisica
		and	ie_tipo_segurado	in ('A','B','R');
		
		if (qt_beneficiarios_plano_w > 0) then
			--Nome da Pessoa

			if (upper(trim(both OLD.nm_pessoa_fisica)) <> upper(trim(both NEW.nm_pessoa_fisica))) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'1');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Data de nascimento

			if (OLD.dt_nascimento <> NEW.dt_nascimento) or (OLD.dt_nascimento is null and NEW.dt_nascimento is not null) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'2');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Sexo

			if (coalesce(OLD.ie_sexo,'0') <> coalesce(NEW.ie_sexo,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'3');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Numero do cartao SUS

			if (coalesce(OLD.nr_cartao_nac_sus,'0') <> coalesce(NEW.nr_cartao_nac_sus,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'4');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Nacionalidade

			if (coalesce(OLD.cd_nacionalidade,'0') <> coalesce(NEW.cd_nacionalidade,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'6');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Pis/Pasep

			if (coalesce(OLD.nr_pis_pasep,'0') <> coalesce(NEW.nr_pis_pasep,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'7');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--CPF

			if (coalesce(OLD.nr_cpf,'0') <> coalesce(NEW.nr_cpf,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'8');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
			--Declaracao de nascido vivo

			if (coalesce(OLD.cd_declaracao_nasc_vivo,'0') <> coalesce(NEW.cd_declaracao_nasc_vivo,'0')) then
				BEGIN
				insert into pls_pessoa_fisica_sib(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
						cd_estabelecimento,cd_pessoa_fisica,dt_ocorrencia_sib,ie_atributo)
				values (	nextval('pls_pessoa_fisica_sib_seq'),LOCALTIMESTAMP,NEW.nm_usuario,LOCALTIMESTAMP,NEW.nm_usuario,
						cd_estabelecimento_w,OLD.cd_pessoa_fisica,ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(LOCALTIMESTAMP),'18');
				exception
				when others then
					cd_estabelecimento_w := cd_estabelecimento_w;
				end;
			end if;
		end if;
	end if;
end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pessoa_fisica_sib_insert() FROM PUBLIC;

CREATE TRIGGER pessoa_fisica_sib_insert
	AFTER INSERT OR UPDATE ON pessoa_fisica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pessoa_fisica_sib_insert();

