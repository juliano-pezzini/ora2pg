-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS execute_dispensary_product ON padrao_estoque_local CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_execute_dispensary_product() RETURNS trigger AS $BODY$
DECLARE
    SUBTYPE one_char                        IS varchar(1);
    SUBTYPE two_char                        IS varchar(2);
    SUBTYPE three_char                      IS varchar(3);
    SUBTYPE four_char                       IS varchar(4);
    SUBTYPE five_char                       IS varchar(5);
    SUBTYPE seven_char                      IS varchar(7);
    SUBTYPE twelve_char                     IS varchar(12);
    SUBTYPE fourteen_char                   IS varchar(14);
    SUBTYPE fifteen_char                    IS varchar(15);
    SUBTYPE sixteen_char                    IS varchar(16);
    SUBTYPE seventeen_char                  IS varchar(17);
    SUBTYPE eighteen_char                   IS varchar(18);
    SUBTYPE nineteen_char                   IS varchar(19);
    SUBTYPE twenty_char                     IS varchar(20);
    SUBTYPE twenty_one_char                 IS varchar(21);
    SUBTYPE twenty_two_char                 IS varchar(22);
    SUBTYPE twenty_four_char                IS varchar(24);
    SUBTYPE thirty_three_char               IS varchar(33);
    SUBTYPE fourty_three_char               IS varchar(43);
    SUBTYPE two_hundred_fifty_five_char     IS varchar(255);
    SUBTYPE four_thousand_char              IS varchar(4000);

  cd_estabelecimento_w padrao_estoque_local.cd_estabelecimento%TYPE;
  cd_material_generico_w material.cd_material_generico%TYPE;
  cd_material_w material.cd_material%TYPE;
  cd_sistema_ant_w material_estab.nr_sequencia%TYPE;
  cd_unidade_medida_estoque_w material.cd_unidade_medida_estoque%TYPE;
  ds_unidade_medida_w unidade_medida.ds_unidade_medida%TYPE;
  count_cd_material_w two_hundred_fifty_five_char;
  count_nr_sequencia_w dis_parametros_int.nr_sequencia%TYPE;
  ds_material_w material.ds_material%TYPE;
  ie_dupla_checagem_w five_char;
  ie_tipo_material_w integer := 1;
  json_w four_thousand_char;

  char_zero_c CONSTANT one_char := '0';
  char_zero_dot_zero_c CONSTANT three_char := '0.0';
  char_one_c CONSTANT one_char := '1';
  char_ten_c CONSTANT two_char := '10';
  char_false_c CONSTANT five_char := 'false';
  char_true_c CONSTANT four_char := 'true';
  char_I_c CONSTANT one_char := 'I';
  char_S_c CONSTANT one_char := 'S';
  error_code_generic_c CONSTANT integer := -21976;
  error_message_generic_c CONSTANT fourty_three_char := 'Error executing execute_dispensary_product.';
  forma_integracao_M_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'M';
  forma_integracao_B_c CONSTANT dis_parametros_int.ie_forma_integracao%TYPE := 'B';
  json_comma_c CONSTANT one_char := ',';
  json_quotation_mark_c CONSTANT one_char := '"';
  json_open_bracket_c CONSTANT one_char := '[';
  json_closed_bracket_c CONSTANT one_char := ']';
  json_open_brace_c CONSTANT one_char := '{';
  json_closed_brace_c CONSTANT one_char := '}';
  json_customer_code CONSTANT fifteen_char := '"customerCode":';
  json_name CONSTANT seven_char := '"name":';
  json_product_category_id CONSTANT twenty_char := '"productCategoryId":';
  json_product_look_alike_code CONSTANT thirty_three_char := '"productLookAlikeCustomerCode":';
  json_product_type_id CONSTANT sixteen_char := '"productTypeId":';
  json_separation_double_check CONSTANT twenty_four_char := '"separationDoubleCheck":';
  json_discard_double_check CONSTANT twenty_one_char := '"discardDoubleCheck":';
  json_barcode_control CONSTANT seventeen_char := '"barcodeControl":';
  json_schedule_control CONSTANT eighteen_char := '"scheduleControl":';
  json_validity_control CONSTANT eighteen_char := '"validityControl":';
  json_manual_separation CONSTANT nineteen_char := '"manualSeparation":';
  json_risk_value CONSTANT twelve_char := '"riskValue":';
  json_generic_customer_code CONSTANT twenty_two_char := '"genericCustomerCode":';
  json_measurement CONSTANT fourteen_char := '"measurement":';
  json_measurement_code CONSTANT eighteen_char := '"measurementCode":';
  json_establishment_code CONSTANT twenty_char := '"establishmentCode":';
  json_operation CONSTANT twelve_char := '"operation":';
  nr_integration_code_c CONSTANT integer := 1077;
  nr_one_c CONSTANT integer := 1;
  nr_two_c CONSTANT integer := 2;
  nr_zero_c CONSTANT integer := 0;
BEGIN
  BEGIN
    IF (wheb_usuario_pck.get_ie_executar_trigger	= char_S_c)  THEN

        <<count_nr_sequencia>>
        BEGIN

          SELECT COUNT(DISTINCT dpi.nr_sequencia)
          INTO STRICT count_nr_sequencia_w 
          FROM dis_parametros_int dpi
          WHERE dpi.ie_forma_integracao IN (forma_integracao_M_c, forma_integracao_B_c);
          EXCEPTION
              WHEN no_data_found THEN NULL;
              WHEN too_many_rows THEN RAISE;
        END;

    IF (count_nr_sequencia_w > nr_zero_c) THEN
        BEGIN

        <<get_json_data>>
        BEGIN
          SELECT
            NEW.cd_estabelecimento,
            NEW.cd_material,           
            mat.cd_material_generico,  
            mat.ds_material,           
            ume.ds_unidade_medida,     
            mat.cd_unidade_medida_estoque,
            CASE
              WHEN(mat.ie_tipo_material IN (char_one_c, char_ten_c)) THEN nr_one_c
              ELSE nr_two_c
            END productTypeId,     
            CASE
                WHEN(mat.ie_dupla_checagem = char_S_c) THEN char_true_c
                ELSE char_false_c
            END ie_dupla_checagem,
            CASE
              WHEN(SELECT COUNT(mar.cd_material) 
                    FROM material_armazenamento mar
                    WHERE mar.cd_material = mat.cd_material 
                      AND mar.ie_estab_fornec = char_S_c) > nr_zero_c THEN char_true_c
              ELSE char_false_c
            END validityControl, 
            CASE WHEN ((SELECT mes.cd_sistema_ant
            FROM material_estab mes
            WHERE mes.cd_material = mat.cd_material 
              AND mes.cd_estabelecimento = NEW.cd_estabelecimento) is null) THEN char_zero_c
              ELSE (SELECT mes.cd_sistema_ant
            FROM material_estab mes
            WHERE mes.cd_material = mat.cd_material 
              AND mes.cd_estabelecimento = NEW.cd_estabelecimento)
            END
          INTO STRICT
            cd_estabelecimento_w,
            cd_material_w,
            cd_material_generico_w,
            ds_material_w,
            ds_unidade_medida_w,
            cd_unidade_medida_estoque_w,
            ie_tipo_material_w,
            ie_dupla_checagem_w,
            count_cd_material_w,
            cd_sistema_ant_w
          FROM material mat
          JOIN unidade_medida ume
            ON mat.cd_unidade_medida_estoque = ume.cd_unidade_medida
          WHERE mat.cd_material = NEW.cd_material;
          EXCEPTION
              WHEN no_data_found THEN NULL;
              WHEN too_many_rows THEN RAISE;
          END;

          json_w := json_open_bracket_c || json_open_brace_c ||
                    json_establishment_code || json_quotation_mark_c || cd_estabelecimento_w || json_quotation_mark_c || json_comma_c ||
                    json_customer_code || json_quotation_mark_c || cd_material_w || json_quotation_mark_c || json_comma_c ||
                    json_generic_customer_code || json_quotation_mark_c || cd_material_generico_w || json_quotation_mark_c || json_comma_c ||
                    json_name || json_quotation_mark_c || ds_material_w || json_quotation_mark_c || json_comma_c ||
                    json_measurement || json_quotation_mark_c || ds_unidade_medida_w || json_quotation_mark_c || json_comma_c ||
                    json_measurement_code || json_quotation_mark_c || cd_unidade_medida_estoque_w || json_quotation_mark_c || json_comma_c ||
                    json_product_type_id || ie_tipo_material_w || json_comma_c ||
                    json_separation_double_check || ie_dupla_checagem_w || json_comma_c ||
                    json_discard_double_check || ie_dupla_checagem_w || json_comma_c ||
                    json_validity_control || count_cd_material_w || json_comma_c ||
                    json_barcode_control || char_zero_c || json_comma_c ||
                    json_schedule_control || char_true_c || json_comma_c ||
                    json_manual_separation || char_true_c || json_comma_c ||
                    json_risk_value || char_zero_dot_zero_c || json_comma_c ||
                    json_product_category_id || cd_sistema_ant_w || json_comma_c ||
                    json_product_look_alike_code || json_quotation_mark_c || json_quotation_mark_c || json_comma_c ||
                    json_operation || json_quotation_mark_c || char_I_c || json_quotation_mark_c || 
                    json_closed_brace_c || json_closed_bracket_c;

            CALL execute_bifrost_integration(nr_integration_code_c, json_w);

          EXCEPTION
          WHEN no_data_found THEN
              RAISE EXCEPTION '%', error_message_generic_c USING ERRCODE = error_code_generic_c;
          END;
        END IF;
  END IF;
  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_execute_dispensary_product() FROM PUBLIC;

CREATE TRIGGER execute_dispensary_product
	AFTER INSERT ON padrao_estoque_local FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_execute_dispensary_product();

