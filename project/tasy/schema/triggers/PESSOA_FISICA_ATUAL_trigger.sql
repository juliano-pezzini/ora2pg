-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pessoa_fisica_atual ON pessoa_fisica CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pessoa_fisica_atual() RETURNS trigger AS $BODY$
declare

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[  ]  Objetos do dicion?o [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?s [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de aten?:
	Par?tro 5 - [45] - Consistir a informa? do org?emissor do documento de identifica? da pessoa f?ca com base no cadastro de ?os emissores
-------------------------------------------------------------------------------------------------------------------
Refer?ias:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
  ie_altera_cadastro_w          varchar(01);
  nr_identidade_w               varchar(20);
  qt_anos_w                     bigint;
  qt_existe_w                   bigint;
  cd_estabelecimento_w          smallint;
  nr_sequencia_w                bigint;
  qt_emp_w                      bigint;
  qt_solic_w                    bigint;
  nr_seq_emp_w                  bigint;
  cd_setor_atendimento_w        integer;
  ie_emprestar_w                varchar(1);
  nr_seq_pf_hist_w              bigint;
  ie_setor_origem_w             varchar(10); -- Ivan em 10/08/2007 OS60862
  qt_setor_prontuario_w         integer; -- Ivan em 10/08/2007 OS60862
  nr_seq_set_origem_w           bigint; --Ivan em 10/08/2007 OS60862
  nr_seq_duplic_w               bigint;
  ie_orgao_emissor_w            varchar(1);
  nm_pessoa_montar_w            pessoa_fisica.nm_pessoa_fisica%type;
  qt_registro_w                 bigint;
  ie_prontuario_w               varchar(01);
  ie_cancelar_trat_w            varchar(01);
  ie_cancelar_agen_cons_obito_w varchar(01);
  ie_cancelar_agen_serv_obito_w varchar(01);
  ie_cancelar_agen_exam_obito_w varchar(01);
  ie_cancelar_agen_ciru_obito_w varchar(01);
  ie_cancelar_agen_obito_w      varchar(01);
  nr_cartao_nac_sus_w           varchar(20);
  nr_cirurgia_w                 bigint;
  ds_motivo_status_w            agenda_paciente.ds_motivo_status%type := wheb_mensagem_pck.get_texto(795084);
  ie_atualiza_fim_validade_w    varchar(1) := 'N';
  nm_pessoa_retorno_w           varchar(60);
  nm_pessoa_fisica_w            varchar(60);
  cd_tipo_agenda_w				smallint;

  ie_permite_pontuacao_rg_w     varchar(1);
  ie_revisar_alt_w              varchar(10);

  cd_agenda_w                   bigint;
  nr_seq_agenda_w               agenda_pac_equip.nr_seq_agenda%type;
  dt_agenda_w                   agenda_consulta.dt_agenda%type;
  nm_guerra_w                   medico.nm_guerra%type;
  qt_parametro_w                bigint;

  qt_hor_cancel_w               bigint;

  bb_genderID                   varchar(32);
  bb_nr_atendimento             atendimento_paciente.nr_atendimento%type;
  bb_nr_seq_interno             atend_paciente_unidade.nr_seq_interno%type;

  json_demografia               philips_json;
  envio_integracao_bb           text;
  retorno_integracao_bb         text;

  IE_ATUAL_PAC_AGEINT_w         parametro_agenda.IE_ATUAL_PAC_AGEINT%type;
  IE_ATUAL_PAC_AGECON_AGESERV_w parametro_agenda.IE_ATUAL_PAC_AGECON_AGESERV%type;
  ie_cad_completo_w             FUNCAO_PARAMETRO.VL_PARAMETRO_PADRAO%type;
  ie_cad_simplif_w              FUNCAO_PARAMETRO.VL_PARAMETRO_PADRAO%type;
  nr_seq_prestador_w            pls_prestador.nr_sequencia%type;
  country_code_w                smallint;
  ds_given_name_w               person_name.ds_given_name%type;
  ds_component_name_1_w         person_name.ds_component_name_1%type;
  ds_family_name_w              person_name.ds_family_name%type;
  reg_integracao_p              gerar_int_padrao.reg_integracao;
  nr_seq_person_name_w          person_name.nr_sequencia%type;
  NR_PARAM_277_W                bigint;

  esocial_altera_cad_det_w      gerar_esocial_dados_pck.t_esocial_altera_cad_det;

  C01 CURSOR FOR
    SELECT b.cd_tipo_agenda, a.cd_agenda, a.nr_sequencia, a.dt_agenda
      from agenda_consulta a, agenda b
     where a.cd_agenda = b.cd_agenda
       and a.cd_pessoa_fisica = NEW.cd_pessoa_fisica
       and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_agenda) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_obito)
       and a.ie_status_agenda <> 'C'
       and a.ie_status_agenda <> 'E';

  C02 CURSOR FOR
    SELECT a.cd_agenda, a.nr_sequencia, a.hr_inicio
      from agenda_paciente a, agenda b
     where a.cd_agenda = b.cd_agenda
       and b.cd_tipo_agenda = 2
       and a.cd_pessoa_fisica = NEW.cd_pessoa_fisica
       and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.hr_inicio) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_obito)
       and a.ie_status_agenda <> 'C'
       and a.ie_status_agenda <> 'E';

  C03 CURSOR FOR
    SELECT a.cd_agenda, a.nr_sequencia, a.hr_inicio
      from agenda_paciente a, agenda b
    where a.cd_agenda = b.cd_agenda
      and b.cd_tipo_agenda = 1
      and a.cd_pessoa_fisica = NEW.cd_pessoa_fisica
      and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.hr_inicio) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_obito)
      and a.ie_status_agenda <> 'C';

  c_prestadores CURSOR FOR
    SELECT a.nr_sequencia nr_seq_prestador
      from pls_prestador a
     where a.cd_pessoa_fisica = NEW.cd_pessoa_fisica;

  c_atendimentos_bb CURSOR FOR
    SELECT ap.nr_atendimento, apu.nr_seq_interno
      from ATENDIMENTO_PACIENTE ap, 
           ATEND_PACIENTE_UNIDADE apu, 
           UNIDADE_ATENDIMENTO ua,
           SETOR_ATENDIMENTO sa
     where ap.nr_atendimento IN (SELECT ap1.nr_atendimento from ATENDIMENTO_PACIENTE ap1 
                                  where ap1.cd_pessoa_fisica = NEW.cd_pessoa_fisica
                                    and ap1.dt_alta is null
                                    and ap1.dt_cancelamento is null)
       and apu.nr_atendimento = ap.nr_atendimento
       and apu.dt_entrada_unidade = (
           SELECT MAX(dt_entrada_unidade) FROM ATEND_PACIENTE_UNIDADE
            WHERE NR_ATENDIMENTO = ap.nr_atendimento
              AND DT_SAIDA_UNIDADE IS NULL)
       and apu.nr_atendimento = ap.nr_atendimento
       and apu.dt_saida_unidade IS NULL
       and ua.cd_setor_atendimento = apu.cd_setor_atendimento 
       and ua.cd_unidade_basica = apu.cd_unidade_basica 
       and ua.cd_unidade_compl = apu.cd_unidade_compl 
       and ua.cd_setor_atendimento = sa.cd_setor_atendimento
       and sa.cd_classif_setor in (1,3,4);
BEGIN
  BEGIN
if (wheb_usuario_pck.get_ie_executar_trigger = 'S' ) then
	/* Esta deve ser sempre a primeira rotina da trigger */

	country_code_w := philips_param_pck.get_cd_pais();

	if	((NEW.NM_PRIMEIRO_NOME is not null) or (NEW.nr_seq_person_name is not null)) and (country_code_w <> 1) then
		BEGIN		
		if (country_code_w = 2) then
			BEGIN
			if	((NEW.nr_seq_person_name is not null) and
			(((NEW.nm_primeiro_nome != OLD.nm_primeiro_nome) or (NEW.nm_primeiro_nome is null and OLD.nm_primeiro_nome is not null) or (NEW.nm_primeiro_nome is not null and OLD.nm_primeiro_nome is null))or
			((NEW.nm_sobrenome_pai != OLD.nm_sobrenome_pai) or (NEW.nm_sobrenome_pai is null and OLD.nm_sobrenome_pai is not null) or (NEW.nm_sobrenome_pai is not null and OLD.nm_sobrenome_pai is null)) or 
			((NEW.nm_sobrenome_mae != OLD.nm_sobrenome_mae) or (NEW.nm_sobrenome_mae is null and OLD.nm_sobrenome_mae is not null) or (NEW.nm_sobrenome_mae is not null and OLD.nm_sobrenome_mae is null))))then

				update	person_name
				set	ds_given_name = NEW.nm_primeiro_nome,
					ds_component_name_1 = NEW.nm_sobrenome_mae,
					ds_family_name = NEW.nm_sobrenome_pai
				where	nr_sequencia = NEW.nr_seq_person_name;

			elsif	((NEW.nr_seq_person_name is not null) and
			(((NEW.nm_primeiro_nome = OLD.nm_primeiro_nome) or (NEW.nm_primeiro_nome is null and OLD.nm_primeiro_nome is null))and
			((NEW.nm_sobrenome_pai = OLD.nm_sobrenome_pai) or (NEW.nm_sobrenome_pai is null and OLD.nm_sobrenome_pai is null)) and 
			((NEW.nm_sobrenome_mae = OLD.nm_sobrenome_mae) or (NEW.nm_sobrenome_mae is null and OLD.nm_sobrenome_mae is null))))then
				BEGIN
				select 	max(ds_given_name),
						max(ds_component_name_1),
						max(ds_family_name)
				into STRICT	ds_given_name_w,
						ds_component_name_1_w,
						ds_family_name_w
				from	person_name
				where	nr_sequencia = NEW.nr_seq_person_name
				and		ds_type	= 'main';

				NEW.nm_primeiro_nome := ds_given_name_w;
				NEW.nm_sobrenome_pai := ds_family_name_w;
				NEW.nm_sobrenome_mae := ds_component_name_1_w;
				end;
			end if;
      nm_pessoa_montar_w	:= substr(montar_nm_pessoa_fisica(null,NEW.nm_primeiro_nome,NEW.nm_sobrenome_pai,NEW.nm_sobrenome_mae, NEW.nm_usuario, NEW.nr_seq_person_name),1,60);
			if (trim(both nm_pessoa_montar_w) is  not null) then
				NEW.nm_pessoa_fisica	:= nm_pessoa_montar_w;
			end if;
			end;
		elsif (NEW.NR_SEQ_PERSON_NAME is not null) then
			BEGIN
				NEW.nm_pessoa_fisica	:= substr(montar_nm_pessoa_fisica(null,null,null,null,NEW.nm_usuario,NEW.nr_seq_person_name),1,60);
			end;
		end if;
		if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'es_AR') and (NEW.nr_seq_person_name is not null) then
			BEGIN
			select 	max(ds_given_name),
					max(ds_component_name_1),
					max(ds_family_name)
			into STRICT	ds_given_name_w,
					ds_component_name_1_w,
					ds_family_name_w
			from	person_name
			where	nr_sequencia = NEW.nr_seq_person_name
			and		ds_type	= 'main';
			
			NEW.nm_primeiro_nome := coalesce(ds_given_name_w,NEW.nm_primeiro_nome);
			NEW.nm_sobrenome_pai := coalesce(ds_family_name_w,NEW.nm_sobrenome_pai);
			NEW.nm_sobrenome_mae := coalesce(ds_component_name_1_w,NEW.nm_sobrenome_mae);
			end;
		end if;
		end;
	end if;

	ie_permite_pontuacao_rg_w	:= coalesce(Obter_Valor_Param_Usuario(0, 184, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento), 'N');
	ie_cad_completo_w := Obter_param_Usuario(5, 164, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_cad_completo_w);
	ie_cad_simplif_w := Obter_param_Usuario(32, 44, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_cad_simplif_w);
  NR_PARAM_277_W := coalesce(OBTER_SOMENTE_NUMERO(OBTER_VALOR_PARAM_USUARIO(5, 277, OBTER_PERFIL_ATIVO, NEW.NM_USUARIO, NEW.CD_ESTABELECIMENTO)), 0);

	select	coalesce(max(vl_parametro), max(vl_parametro_padrao))
	into STRICT	ie_prontuario_w
	from	funcao_parametro
	where	cd_funcao	= 5
	and	nr_sequencia	= 54;

	select  coalesce(max(IE_ATUAL_PAC_AGEINT), 'N'),
		coalesce(max(IE_ATUAL_PAC_AGECON_AGESERV), 'N')
	into STRICT	IE_ATUAL_PAC_AGEINT_w,
		IE_ATUAL_PAC_AGECON_AGESERV_w
	from 	PARAMETRO_AGENDA
	where 	cd_estabelecimento = NEW.cd_estabelecimento;


	if (NEW.nm_pessoa_fisica	<> OLD.nm_pessoa_fisica) or (NEW.nr_cpf <> OLD.nr_cpf) then
		BEGIN

		select	coalesce(max(vl_parametro), '0')
		into STRICT	ie_altera_cadastro_w
		from	funcao_param_usuario
		where	cd_funcao		= 0
		and	nr_sequencia		= 34
		and 	nm_usuario_param	= NEW.nm_usuario;

		if (ie_altera_cadastro_w = '0') then
			BEGIN

			select	coalesce(vl_parametro, vl_parametro_padrao)
			into STRICT	ie_altera_cadastro_w
			from	funcao_parametro
			where	cd_funcao	= 0
			and	nr_sequencia	= 34;

			end;
		end if;

		if (ie_altera_cadastro_w	= 'N') then
			BEGIN

			-- Voc??possui permiss?para alterar o nome e o CPF do paciente!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(192964);			
			end;
		end if;
		end;
	end if;

	IF (NEW.NM_PESSOA_FISICA <> OLD.NM_PESSOA_FISICA
  AND NR_PARAM_277_W > 0
  AND LENGTH(NEW.NM_PESSOA_FISICA) < NR_PARAM_277_W) THEN
		CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(1112273);		
	END IF;

	/* 	Rafael em 13/09/2006 -> gerava erro: "cannot update ("TASY","NM_PESSOA_FISICA") to null"
		criado novo campo NM_PESSOA_FISICA_SEM_ACENTO*/
	/*       Coelho 03/07/2008 OS95248 */
	

	nr_identidade_w		:= '';

	if (coalesce(ie_permite_pontuacao_rg_w,'N') = 'N') then
		if (NEW.NR_IDENTIDADE is not null) and (NEW.NR_IDENTIDADE <> coalesce(OLD.NR_IDENTIDADE,'X')) then
			NEW.NR_IDENTIDADE	:= upper(NEW.NR_IDENTIDADE);
			for	i in 1..length(NEW.NR_IDENTIDADE) loop		-- validar identidade, somente letras e n?meros
				if (position(substr(NEW.NR_IDENTIDADE, i, 1) in '0123456789ABCDEFGHIJKLMNOPQRSTUVXWYV') > 0) then
					nr_identidade_w		:= nr_identidade_w || substr(NEW.NR_IDENTIDADE, i, 1);
				end if;
			end loop;
			NEW.NR_IDENTIDADE	:= nr_identidade_w;
		end if;
	end if;

	if	(NEW.dt_nascimento is not null AND NEW.dt_nascimento <> OLD.dt_nascimento) or
		(OLD.dt_nascimento is null AND NEW.dt_nascimento is not null) then
		BEGIN
		qt_anos_w	:= obter_idade(NEW.dt_nascimento,LOCALTIMESTAMP,'A');
		update	agenda_paciente
		set	qt_idade_paciente	= qt_anos_w,
			dt_nascimento_pac	= NEW.dt_nascimento
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
		and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';		
		exception
		when others then		
		qt_anos_w	:= obter_idade(NEW.dt_nascimento,LOCALTIMESTAMP,'A');
		end;

		BEGIN
		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		if (ie_cad_completo_w = 'N') and (ie_cad_simplif_w = 'N') then			
			if (IE_ATUAL_PAC_AGECON_AGESERV_w = 'S') then
				update	agenda_consulta
				set	QT_IDADE_PAC	= qt_anos_w,
					DT_NASCIMENTO_PAC	= NEW.dt_nascimento
				where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
				and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';
			end if;
		end if;	
		if (IE_ATUAL_PAC_AGEINT_w = 'S') then
			update	agenda_integrada
			set	QT_IDADE_PAC	= qt_anos_w,
				DT_NASCIMENTO	= NEW.dt_nascimento
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
			and	DT_INICIO_AGENDAMENTO	> LOCALTIMESTAMP - interval '30 days';
		end if;
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');		
		exception
		when others then
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		qt_anos_w	:= obter_idade(NEW.dt_nascimento,LOCALTIMESTAMP,'A');
		end;
	end if;

	if (NEW.dt_nascimento is not null) and
		(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_nascimento) <> (NEW.dt_nascimento)) then
		NEW.dt_nascimento := ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_nascimento);
	end if;	

	if	(NEW.qt_altura_cm is not null AND NEW.qt_altura_cm <> OLD.qt_altura_cm) or
		(OLD.qt_altura_cm is null AND NEW.qt_altura_cm is not null) then
		update	agenda_paciente
		set	qt_altura_cm		= NEW.qt_altura_cm
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
		and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';

		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		if (ie_cad_completo_w = 'N') and (ie_cad_simplif_w = 'N') then

			if (IE_ATUAL_PAC_AGECON_AGESERV_w = 'S') then
				update	agenda_consulta
				set	QT_ALTURA_CM	 = NEW.qt_altura_cm
				where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
				and	dt_agenda	 > LOCALTIMESTAMP - interval '30 days';
			end if;
		end if;	
		if (IE_ATUAL_PAC_AGEINT_w = 'S') then
			update	agenda_integrada
			set	QT_ALTURA_CM	 = 	NEW.qt_altura_cm
			where	cd_pessoa_fisica = 	NEW.cd_pessoa_fisica
			and	DT_INICIO_AGENDAMENTO	> LOCALTIMESTAMP - interval '30 days';		
			CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		end if;
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');

	end if;

	if	(NEW.qt_peso is not null AND NEW.qt_peso <> OLD.qt_peso) or
		(OLD.qt_peso is null AND NEW.qt_peso is not null) then
		update	agenda_paciente
		set	qt_peso			= NEW.qt_peso
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
		and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';

		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		if (ie_cad_completo_w = 'N') and (ie_cad_simplif_w = 'N') then		
			if (IE_ATUAL_PAC_AGECON_AGESERV_w = 'S') then
				update	agenda_consulta
				set	qt_peso			= NEW.qt_peso
				where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
				and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';
			end if;
		end if;	
		if (IE_ATUAL_PAC_AGEINT_w = 'S') then
			update	agenda_integrada
			set	QT_PESO			= NEW.qt_peso
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
			and	DT_INICIO_AGENDAMENTO	> LOCALTIMESTAMP - interval '30 days';		
		end if;
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');

	end if;

	if (NEW.nr_telefone_celular is not null) and (coalesce(NEW.nr_telefone_celular,'X') <> coalesce(OLD.nr_telefone_celular,'X')) then
		BEGIN

		update	agenda_paciente
		set	nr_telefone		= NEW.nr_telefone_celular
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
		and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';

		CALL wheb_usuario_pck.set_ie_executar_trigger('N');		
		if (ie_cad_completo_w = 'N') and (ie_cad_simplif_w = 'N') then			
			if (IE_ATUAL_PAC_AGECON_AGESERV_w = 'S') then
				update	agenda_consulta
				set	NR_TELEFONE		= NEW.nr_telefone_celular
				where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
				and	dt_agenda		> LOCALTIMESTAMP - interval '30 days';		
			end if;
		end if;
		if (IE_ATUAL_PAC_AGEINT_w = 'S') then
			update	agenda_integrada
			set	NR_TELEFONE		= NEW.nr_telefone_celular
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
			and	DT_INICIO_AGENDAMENTO		> LOCALTIMESTAMP - interval '30 days';
		end if;					
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		end;		
	end if;

	if (OLD.nr_prontuario is not null) and (NEW.nr_prontuario is not null) and (OLD.nr_prontuario) <> (NEW.nr_prontuario) and (ie_prontuario_w	= 'S') then

		select	count(*)
		into STRICT	qt_solic_w
		from	same_cpi_solic
		where	nr_prontuario = OLD.nr_prontuario;

		select	count(*)
		into STRICT	qt_emp_W
		from	same_cpi_emp
		where	nr_prontuario = OLD.nr_prontuario;

		update	same_cpi_prontuario
		set	nr_prontuario = NEW.nr_prontuario
		where	nr_prontuario = OLD.nr_prontuario;

			-- Voc??pode alterar o n?mero do prontu?o, pois existem solicita?s ou empr?imos do mesmo.
			--Wheb_mensagem_pck.exibir_mensagem_abort(192966);						
		if (qt_emp_w > 0) then
			update	same_cpi_emp
			set	nr_prontuario = NEW.nr_prontuario
			where	nr_prontuario = OLD.nr_prontuario;
		end if;
		if (qt_solic_w > 0) then
			update	same_cpi_solic
			set	nr_prontuario = NEW.nr_prontuario
			where	nr_prontuario = OLD.nr_prontuario;		
		end	if;

		/* Rafael em 24/11/2007 OS74917 */

		BEGIN
		select	nextval('pessoa_fisica_duplic_seq')
		into STRICT	nr_seq_duplic_w
		;

		insert into pessoa_fisica_duplic(
							nr_sequencia,
							cd_pessoa_fisica,
							dt_atualizacao,
							nm_usuario,
							cd_cadastro,
							nm_paciente,
							nr_prontuario,
							qt_atendimento,
							qt_atend_interno,
							ie_acerto
							)
		values (
							nr_seq_duplic_w,
							NEW.cd_pessoa_fisica,
							LOCALTIMESTAMP,
							NEW.nm_usuario,
							NEW.cd_pessoa_fisica,
							NEW.nm_pessoa_fisica,
							OLD.nr_prontuario,
							null,
							null,
							'P'
							);
		exception
			when others then
			nr_seq_duplic_w := 0;
		end;

	elsif (NEW.nr_prontuario is not null) then

		/* Rafael em 13/06/2007 OS59807 */

		select	coalesce(NEW.cd_estabelecimento,min(cd_estabelecimento))
		into STRICT	cd_estabelecimento_w
		from	estabelecimento;

		/* Rafael em 13/06/2007 OS59807
		select	count(*)
		into	qt_existe_w
		from	same_cpi_prontuario
		where	cd_pessoa_fisica	= :new.cd_pessoa_fisica
		and	nr_prontuario		= :new.nr_prontuario;
		*/
		/* Rafael em 13/06/2007 OS59807 */

		select	count(*)
		into STRICT	qt_existe_w
		from	same_cpi_prontuario
		where	cd_estabelecimento	= cd_estabelecimento_w
		and	nr_prontuario		= NEW.nr_prontuario;

		if (qt_existe_w = 0) and (ie_prontuario_w = 'S') then

			/* Rafael em 13/06/2007 OS59807
			select	nvl(:new.cd_estabelecimento,min(cd_estabelecimento))
			into	cd_estabelecimento_w
			from	estabelecimento;
			*/
			select	nextval('same_cpi_prontuario_seq')
			into STRICT	nr_sequencia_w
			;

			insert into same_cpi_prontuario(
				nr_sequencia,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				nr_prontuario,
				cd_pessoa_fisica,
				qt_volume,
				ds_localizacao,
				dt_atualizacao_nrec,
				nm_usuario_nrec)
			values (	nr_sequencia_w,
				cd_estabelecimento_w,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				NEW.nr_prontuario,
				NEW.cd_pessoa_fisica,
				1,
				null,
				LOCALTIMESTAMP,
				NEW.nm_usuario);

			ie_emprestar_w := Obter_Param_Usuario(1007, 11, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_emprestar_w);
			if (ie_emprestar_w = 'S') then
				BEGIN
				select	coalesce(max(cd_setor_atendimento),0)
				into STRICT	cd_setor_atendimento_w
				from	usuario
				where	nm_usuario	= NEW.nm_usuario;

				if (cd_setor_atendimento_w > 0) then
					BEGIN
					select	nextval('same_cpi_emp_seq')
					into STRICT	nr_seq_emp_w
					;

					insert into same_cpi_emp(
						nr_sequencia,
						cd_estabelecimento,
						nr_prontuario,
						dt_atualizacao,
						nm_usuario,
						cd_setor_atendimento,
						dt_emprestimo,
						nm_usuario_empr,
						ie_operacao,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
					values (	nr_seq_emp_w,
						cd_estabelecimento_w,
						NEW.nr_prontuario,
						LOCALTIMESTAMP,
						NEW.nm_usuario,
						cd_setor_atendimento_w,
						LOCALTIMESTAMP,
						NEW.nm_usuario,
						'E',
						LOCALTIMESTAMP,
						NEW.nm_usuario);
					end;
				end if;
				end;
			end if;

		end if;

	end if;

	if (OLD.nr_prontuario is not null) and (NEW.nr_prontuario is null) then
		select	count(*)
		into STRICT	qt_solic_w
		from	same_cpi_solic
		where	nr_prontuario	= OLD.nr_prontuario;

		select	count(*)
		into STRICT	qt_emp_w
		from	same_cpi_emp
		where	nr_prontuario	= OLD.nr_prontuario;

		if (qt_solic_w = 0) and (qt_emp_w = 0) then
			delete	FROM same_cpi_prontuario
			where	nr_prontuario	= OLD.nr_prontuario;
		end if;
	end if;	

	/* Marcus em 04/12/06 OS445904 */

	if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'pt_BR') then
		if (NEW.ds_senha is null) then
			select	obter_senha_pf(NEW.dt_nascimento)
			into STRICT	NEW.ds_senha
			;
		end if;
	elsif (NEW.ds_senha is not null) then
		NEW.ds_senha := null;
	end if;

	/* Coelho em 02/01/07 	OS45273 */

	if ( (NEW.nm_pessoa_fisica	<> OLD.nm_pessoa_fisica) or (OLD.ds_fonetica is null )) then
		NEW.ds_fonetica := gera_fonetica(NEW.nm_pessoa_fisica,'N');
	end if;

	/* Oraci em 02/08/2007 OS63677 */

	if (OLD.nm_pessoa_fisica is not null) and (NEW.nm_pessoa_fisica <> OLD.nm_pessoa_fisica) then

		select	nextval('pessoa_fisica_historico_seq')
		into STRICT	nr_seq_pf_hist_w
		;

		insert into pessoa_fisica_historico(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nm_pessoa_fisica,
				cd_pessoa_fisica,
				dt_liberacao)
		values (nr_seq_pf_hist_w,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				OLD.nm_pessoa_fisica,
				OLD.cd_pessoa_fisica,
				LOCALTIMESTAMP);
	end if;

	/* Ivan em 10/08/2007 OS60862 */

	ie_setor_origem_w := Obter_Param_Usuario(32, 19, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_setor_origem_w);

	if (ie_setor_origem_w = 'S') then
		BEGIN

		select	count(*)
		into STRICT	qt_setor_prontuario_w
		from	pf_setor_prontuario
		where	cd_pessoa_fisica = OLD.cd_pessoa_fisica;

		select	coalesce(max(cd_setor_atendimento),0)
		into STRICT	cd_setor_atendimento_w
		from	usuario
		where	nm_usuario	= NEW.nm_usuario;

		if	(cd_setor_atendimento_w > 0 AND qt_setor_prontuario_w = 0) then
			BEGIN

			select	nextval('pf_setor_prontuario_seq')
			into STRICT	nr_seq_set_origem_w
			;

			insert into pf_setor_prontuario(
				nr_sequencia,
				dt_atualizacao,
				dt_atualizacao_nrec,
				nm_usuario,
				nm_usuario_nrec,
				cd_pessoa_fisica,
				cd_setor_atendimento,
				dt_inicio_cinculo)
			values (	
				nr_seq_set_origem_w,
				LOCALTIMESTAMP,
				LOCALTIMESTAMP,
				NEW.nm_usuario,
				NEW.nm_usuario,
				OLD.cd_pessoa_fisica,
				cd_setor_atendimento_w,
				LOCALTIMESTAMP
			);

			end;
		end if;

		end;
	end if;

	/* Oraci em 11/01/2008 OS78875*/

	if (NEW.nr_prontuario is not null) and (OLD.nr_prontuario is null) then

		if (NEW.dt_geracao_pront is null) then
			NEW.dt_geracao_pront :=  LOCALTIMESTAMP;
		end if;

		/*insert into logxxx_tasy(	DT_ATUALIZACAO,
					NM_USUARIO,
					CD_LOG,
					DS_LOG)
		values		(	sysdate,
					:new.nm_usuario,
					55777,
					'PF: ' || :new.cd_pessoa_fisica || chr(13) ||
					'Pessoa_Fisica_Atual'  || chr(13) ||
					':old.nr_prontuario=' || :old.nr_prontuario || chr(13) ||
					':new.nr_prontuario=' || :new.nr_prontuario || chr(13) ||
					':old.dt_geracao_pront=' || :old.dt_geracao_pront || chr(13) ||
					':new.dt_geracao_pront=' || :new.dt_geracao_pront);*/
	elsif (NEW.nr_prontuario is null) and (OLD.nr_prontuario is not null) then
		NEW.dt_geracao_pront :=  null;	

		/*insert into logxxx_tasy(	DT_ATUALIZACAO,
					NM_USUARIO,
					CD_LOG,
					DS_LOG)
		values		(	sysdate,
					:new.nm_usuario,
					55777,
					'PF: ' || :new.cd_pessoa_fisica || chr(13) ||
					'Pessoa_Fisica_Atual'  || chr(13) ||
					':old.nr_prontuario=' || :old.nr_prontuario || chr(13) ||
					':new.nr_prontuario=' || :new.nr_prontuario || chr(13) ||
					':old.dt_geracao_pront=' || :old.dt_geracao_pront || chr(13) ||
					':new.dt_geracao_pront=' || :new.dt_geracao_pront);*/
	else
		-- Edgar 27/05/2009, OS 138561, s?terar o dt_geracao_pront se alterar o nr_prontuario
		NEW.dt_geracao_pront	:= OLD.dt_geracao_pront;
	end if;

	/* Dalcastagne em 14/01/2008 OS 79144 */

	/* Rafael em 17/1/8 OS79667 */

	select	coalesce(max(obter_valor_param_usuario(5, 45, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento)), 'N')
	into STRICT	ie_orgao_emissor_w
	;

	if (ie_orgao_emissor_w = 'S') and (NEW.ds_orgao_emissor_ci is not null) and (consistir_orgao_emissor(NEW.ds_orgao_emissor_ci) = 'N') then
		-- O org?emissor do documento informado n?confere com os definidos no cadastro, favor verificar.
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192967);		
	end if;
	/* Fim Rafael em 17/1/8 OS79667 */

	/* Francisco em 11/03/2008  - OS 82683 - Se ?o plano e foi alterado, deve mudar o campo IE_REVISAR */

	/*aaschlote 27/12/2012 OS 524353*/

	ie_revisar_alt_w := Obter_Param_Usuario(0, 189, obter_perfil_ativo, NEW.nm_usuario, cd_estabelecimento_w, ie_revisar_alt_w);

	ie_revisar_alt_w	:= coalesce(ie_revisar_alt_w,'R');

	if (OLD.ie_revisar = NEW.ie_revisar) and (ie_revisar_alt_w <> 'M') then
		select	count(*)
		into STRICT	qt_registro_w
		from	pls_contrato
		where	cd_pf_estipulante	= NEW.cd_pessoa_fisica;

		if (qt_registro_w > 0) then
			NEW.ie_revisar	:= ie_revisar_alt_w;
		else
			select	count(*)
			into STRICT	qt_registro_w
			from	pls_contrato_pagador
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;

			if (qt_registro_w > 0) then
				NEW.ie_revisar	:= ie_revisar_alt_w;
			else
				select	count(*)
				into STRICT	qt_registro_w
				from	pls_segurado
				where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;

				if (qt_registro_w > 0) then
					NEW.ie_revisar	:= ie_revisar_alt_w;
				else
					select	count(*)
					into STRICT	qt_registro_w
					from	pls_prestador
					where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;

					if (qt_registro_w > 0) then
						NEW.ie_revisar	:= ie_revisar_alt_w;
					end if;			
				end if;
			end if;	
		end if;

	end if;

	ie_cancelar_trat_w := Obter_Param_Usuario(5, 90, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_cancelar_trat_w);

	if  ((ie_cancelar_trat_w = 'S') or (ie_cancelar_trat_w = 'I')) and
		((OLD.dt_obito <> NEW.dt_obito) or (NEW.dt_obito is not null AND OLD.dt_obito is null) or (NEW.dt_obito is not null)) then	
		CALL cancelar_trat_onc_pf_obito(NEW.cd_pessoa_fisica,NEW.nm_usuario);	
	end if;

	if (ie_cancelar_trat_w = 'I') and
		((OLD.dt_obito <> NEW.dt_obito) or (NEW.dt_obito is not null AND OLD.dt_obito is null) or (NEW.dt_obito is not null)) then	
		CALL inativar_protoc_onco_pf_obito(NEW.cd_pessoa_fisica,NEW.nm_usuario);	
	end if;

	ie_cancelar_agen_cons_obito_w := Obter_Param_Usuario(821, 461, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_cancelar_agen_cons_obito_w);
	ie_cancelar_agen_serv_obito_w := Obter_Param_Usuario(866, 319, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_cancelar_agen_serv_obito_w);

	if ((ie_cancelar_agen_cons_obito_w = 'S') or (ie_cancelar_agen_serv_obito_w = 'S')) and
		(NEW.dt_obito is not null AND OLD.dt_obito is null) then

		open C01;
		loop
		fetch C01 into
			cd_tipo_agenda_w,
			cd_agenda_w,
			nr_seq_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			BEGIN
			if (cd_agenda_w is not null) and (nr_seq_agenda_w is not null) then
				if (cd_tipo_agenda_w = 3 and ie_cancelar_agen_cons_obito_w = 'S') or (cd_tipo_agenda_w = 5 and ie_cancelar_agen_serv_obito_w = 'S') then
					select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', dt_Agenda)),0)+1
					into STRICT	qt_hor_cancel_w
					from	agenda_consulta
					where	cd_agenda = cd_agenda_w
					and	to_date(to_char(dt_agenda,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss')
					and	ie_status_agenda = 'C';

					update 	agenda_consulta
					set	ie_status_agenda = 'C',
						ds_motivo_status = wheb_mensagem_pck.get_texto(795084),
						nm_usuario = NEW.nm_usuario,
						dt_Agenda = dt_agenda + qt_hor_cancel_w / 86400
					where	cd_agenda = cd_agenda_w
					and	nr_sequencia = nr_seq_agenda_w; 		
				end if;
			end if;				
			end;
		end loop;
		close C01;

		if (ie_cancelar_agen_cons_obito_w = 'S') then
			update	agenda_lista_espera
			set	ie_status_espera = 'C',
				ds_observacao = wheb_mensagem_pck.get_texto(795084),
				nm_usuario = NEW.nm_usuario,
				dt_atualizacao = LOCALTIMESTAMP
			where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
			and	ie_status_espera = 'A'
			and (cd_tipo_agenda = 3
			or cd_tipo_agenda is null);
		end if;

		if (ie_cancelar_agen_serv_obito_w = 'S') then
			update	agenda_lista_espera
			set	ie_status_espera = 'C',
				ds_observacao = wheb_mensagem_pck.get_texto(795084),
				nm_usuario = NEW.nm_usuario,
				dt_atualizacao = LOCALTIMESTAMP
			where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
			and	ie_status_espera = 'A'
			and (cd_tipo_agenda = 5
			or cd_tipo_agenda is null);
		end if;
	end if;

	ie_cancelar_agen_exam_obito_w := Obter_Param_Usuario(820, 464, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_cancelar_agen_exam_obito_w);

	if (ie_cancelar_agen_exam_obito_w = 'S') and
		(NEW.dt_obito is not null AND OLD.dt_obito is null) then

		open C02;
		loop
		fetch C02 into
			cd_agenda_w,
			nr_seq_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			BEGIN
			if (cd_agenda_w is not null) and (nr_seq_agenda_w is not null) then			

				select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', hr_inicio)),0)+1
				into STRICT	qt_hor_cancel_w
				from	agenda_paciente
				where	cd_agenda = cd_agenda_w
				and	to_date(to_char(hr_inicio,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss') = to_date(to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') || ':00', 'dd/mm/yyyy hh24:mi:ss')
				and	ie_status_agenda = 'C';

				update 	agenda_paciente
				set	ie_status_agenda = 'C',
					ds_motivo_status = wheb_mensagem_pck.get_texto(795084),
					nm_usuario = NEW.nm_usuario,
					hr_inicio = hr_inicio + qt_hor_cancel_w / 86400
				where	cd_agenda = cd_agenda_w
				and	nr_sequencia = nr_seq_agenda_w; 		

			end if;				
			end;
		end loop;
		close C02;

		update	agenda_lista_espera
		set	ie_status_espera = 'C',
			ds_observacao = wheb_mensagem_pck.get_texto(795084),
			nm_usuario = NEW.nm_usuario,
			dt_atualizacao = LOCALTIMESTAMP
		where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
		and	ie_status_espera = 'A'
		and (cd_tipo_agenda = 2
		or cd_tipo_agenda is null);

	end if;

	ie_cancelar_agen_ciru_obito_w := Obter_Param_Usuario(871, 850, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_cancelar_agen_ciru_obito_w);

	if (ie_cancelar_agen_ciru_obito_w = 'S') and
		(NEW.dt_obito is not null AND OLD.dt_obito is null) then

		open C03;
		loop
		fetch C03 into
			cd_agenda_w,
			nr_seq_agenda_w,
			dt_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			BEGIN
			if (cd_agenda_w is not null) and (nr_seq_agenda_w is not null) then

				update 	agenda_paciente
				set	ie_status_agenda = 'C',
					ds_motivo_status = SUBSTR(ds_motivo_status_w, 1, 255),
					ds_observacao = CASE WHEN ds_observacao = NULL THEN SUBSTR(ds_motivo_status_w,1,1500)  ELSE SUBSTR(SUBSTR(ds_observacao,1,1500)||CHR(13) || CHR(10)||SUBSTR(ds_motivo_status_w, 1, 255),1,3000) END ,
					nm_usuario = NEW.nm_usuario,
					nm_usuario_cancel = NEW.nm_usuario,
					hr_inicio = hr_inicio + 1 / 86400,
					dt_cancelamento = LOCALTIMESTAMP,
					dt_atualizacao = LOCALTIMESTAMP
				where	cd_agenda = cd_agenda_w
				and	nr_sequencia = nr_seq_agenda_w;

				select coalesce(max(nr_cirurgia), 0)
				into STRICT nr_cirurgia_w
				from agenda_paciente
				where	nr_sequencia = nr_seq_agenda_w;

				if (nr_cirurgia_w > 0) then
					update cirurgia
					set	ie_status_cirurgia = 3,
						dt_cancelamento = LOCALTIMESTAMP
					where nr_cirurgia = nr_cirurgia_w;
				end if;

				update agenda_pac_equip
				set    dt_confirmacao  = NULL
				where  nr_seq_agenda  = nr_seq_agenda_w;

			end if;
			end;
		end loop;
		close C03;
	end if;

	ie_atualiza_fim_validade_w := Obter_Param_Usuario(5, 181, obter_perfil_ativo, NEW.nm_usuario, coalesce(NEW.cd_estabelecimento,0), ie_atualiza_fim_validade_w);
	if (ie_atualiza_fim_validade_w = 'S') and
		(NEW.dt_obito is not null AND OLD.dt_obito is null) then	

		update	PF_CARTAO_FIDELIDADE
		set 	DT_FIM_VALIDADE = NEW.dt_obito
		where	cd_pessoa_fisica = NEW.cd_pessoa_fisica;

	end if;

	/*if	(nvl(:new.ds_senha,'X') <> nvl(:old.ds_senha,'X')) then

		insert into logxxx_tasy	(			
				dt_atualizacao, 
				nm_usuario, 
				cd_log, 
				ds_log
				)
		values			(
				sysdate, 
				:new.nm_usuario, 
				41875, 
				'Pessoa fisica' || :new.cd_pessoa_fisica || ' Senha antiga ' || :old.ds_senha || ' Senha atual' || :new.ds_senha);
	end if;*/
	if (NEW.nr_cartao_nac_sus is not null) then
		BEGIN
		select	(NEW.nr_cartao_nac_sus)::numeric
		into STRICT	nr_cartao_nac_sus_w
		;
		exception when others then
			-- N??ermitido informar caracteres alfanum?cos no n?mero do cart?SUS.
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(192968);			
		end;
	end if;

	/* Fim Francisco em 11/03/2008 */

	if (TG_OP = 'INSERT') or (coalesce(NEW.NR_SEQ_PERFIL,0)	<> coalesce(OLD.NR_SEQ_PERFIL,0)) or (coalesce(NEW.NR_PRONTUARIO,0)	<> coalesce(OLD.NR_PRONTUARIO,0)) then
		nm_pessoa_retorno_w	:= Obter_Nome_Notorio_Pac(NEW.nm_pessoa_fisica,NEW.cd_pessoa_fisica,NEW.nr_prontuario,NEW.nr_seq_perfil,NEW.nm_usuario);

		if (nm_pessoa_retorno_w is not null) then
			nm_pessoa_fisica_w	:= NEW.nm_pessoa_fisica;
			nr_seq_person_name_w := NEW.nr_seq_person_name;

			select	count(*)
			into STRICT	qt_registro_w
			from	PESSOA_FISICA_OCULTA
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
			and	IE_NOME_REAL		= 'S';

			if (qt_registro_w	= 0) then
				insert into pessoa_fisica_oculta(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_pessoa_fisica,
					nm_oculto,
					cd_perfil,
					ie_nome_real,
					nr_seq_person_name)
				values (
					nextval('pessoa_fisica_oculta_seq'),
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					NEW.cd_pessoa_fisica,
					nm_pessoa_fisica_w,
					null,
					'S',
					nr_seq_person_name_w);
			end if;
			NEW.nm_pessoa_fisica	:= substr(nm_pessoa_retorno_w,1,60);
			if (nr_seq_person_name_w is not null) then
				BEGIN
				select	nextval('person_name_seq')
				into STRICT	nr_seq_person_name_w LIMIT 1;
				insert into person_name(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_type,
					ds_given_name)
				values (
					nr_seq_person_name_w,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					LOCALTIMESTAMP,
					NEW.nm_usuario,
					'main',
					NEW.nm_pessoa_fisica
				);
				NEW.nr_seq_person_name := nr_seq_person_name_w;
				end;
			end if;
		end if;
	end if;
end if;

if (NEW.nm_pessoa_fisica	<> OLD.nm_pessoa_fisica) or (NEW.nm_pessoa_pesquisa is null) then
	NEW.nm_pessoa_pesquisa	:= padronizar_nome(NEW.nm_pessoa_fisica);
end if;

/* Rafael em 07/09/06 OS40311 */

if (NEW.nm_pessoa_fisica_sem_acento is null) or (NEW.nm_pessoa_fisica <> OLD.nm_pessoa_fisica) or (NEW.nm_social <> OLD.nm_social) then
  BEGIN
       if (obter_se_nome_social <> 'N') then
		   NEW.nm_pessoa_fisica_sem_acento	:= coalesce(elimina_acentuacao(NEW.nm_social), elimina_acentuacao(NEW.nm_pessoa_fisica));
       else
           NEW.nm_pessoa_fisica_sem_acento	:= elimina_acentuacao(NEW.nm_pessoa_fisica);
      end if;
  end;	
end if;

/*aaschlote 03/10/2013 OS 652624*/

if (NEW.NM_ABREVIADO is null) or (NEW.nm_pessoa_fisica <> OLD.nm_pessoa_fisica) then
	NEW.nm_abreviado	:= pls_gerar_nome_abreviado(NEW.nm_pessoa_fisica);
end if;

/* dgstihler 14/08/18  OS 1734662*/

if (NEW.dt_nascimento <> OLD.dt_nascimento)
	and (NEW.dt_nascimento > LOCALTIMESTAMP) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(194547);
	/*Data de nascimento inv?da!*/

end	if;

/*Sandro Paulo 28/05/2015 OS 878225*/

if (OLD.dt_obito is null) and (NEW.dt_obito is not null) then
	cd_estabelecimento_w	:= obter_estabelecimento_ativo;
	CALL mprev_tratar_exclusao_part(	null,
					NEW.cd_pessoa_fisica,
					NEW.nm_pessoa_fisica,
					'S', -- (S) ?o
					null,
					NEW.dt_obito,
					'I',
					cd_estabelecimento_w,
					NEW.nm_usuario);
end if;

/*Jucimara 01/06/2015 OS 849879 */

if (coalesce(NEW.nm_pessoa_fisica,'X') <> coalesce(OLD.nm_pessoa_fisica,'X')) then
	select 	count(1)
	into STRICT	qt_parametro_w
	from 	pls_web_param_guia_medico;

	if (qt_parametro_w > 0) then
	BEGIN
		select 	nm_guerra
		into STRICT	nm_guerra_w
		from	medico
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica;
	exception
	when others then
		nm_guerra_w	:= null;
	end;				
		CALL pls_atualiza_nome_busca_guia(	NEW.cd_pessoa_fisica,	
						null,			
						null,		
						null,			
						NEW.nm_pessoa_fisica,		
						nm_guerra_w);	
	end if;						
end if;

BEGIN
open c_prestadores;
loop
fetch c_prestadores into
	nr_seq_prestador_w;
EXIT WHEN NOT FOUND; /* apply on c_prestadores */
	BEGIN

	/* Verifica se houve altera? em algum dos campos utilizados no E-Social */

	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NM_PESSOA_FISICA', OLD.nm_pessoa_fisica, NEW.nm_pessoa_fisica, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('DT_NASCIMENTO', OLD.dt_nascimento, NEW.dt_nascimento, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('DT_EMISSAO_CI', OLD.dt_emissao_ci, NEW.dt_emissao_ci, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('IE_ESTADO_CIVIL', OLD.ie_estado_civil, NEW.ie_estado_civil, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_CARTAO_NAC_SUS', OLD.nr_cartao_nac_sus, NEW.nr_cartao_nac_sus, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_CEP_CIDADE_NASC', OLD.nr_cep_cidade_nasc, NEW.nr_cep_cidade_nasc, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_CNH', OLD.nr_cnh, NEW.nr_cnh, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('CD_MUNICIPIO_IBGE', OLD.cd_municipio_ibge, NEW.cd_municipio_ibge, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_PIS_PASEP', OLD.nr_pis_pasep, NEW.nr_pis_pasep, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_SEQ_CONSELHO', OLD.nr_seq_conselho, NEW.nr_seq_conselho, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('NR_TITULO_ELEITOR', OLD.nr_titulo_eleitor, NEW.nr_titulo_eleitor, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('SG_EMISSORA_CI', OLD.sg_emissora_ci, NEW.sg_emissora_ci, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('CD_NACIONALIDADE', OLD.cd_nacionalidade, NEW.cd_nacionalidade, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('CD_PAIS', OLD.nr_seq_pais, NEW.nr_seq_pais, esocial_altera_cad_det_w);
	esocial_altera_cad_det_w := gerar_esocial_dados_pck.adicionar_alteracao_cad_det('DS_CODIGO_PROF', OLD.ds_profissao, NEW.ds_profissao, esocial_altera_cad_det_w);

	if (esocial_altera_cad_det_w.count > 0) then		
		esocial_altera_cad_det_w := gerar_esocial_dados_pck.gravar_alteracao_cad_det(nr_seq_prestador_w, NEW.nm_usuario, esocial_altera_cad_det_w);		
	end if;

	end;
end loop;
close c_prestadores;
exception
when others then
	nr_seq_prestador_w	:= null;
end;

if ('00/00/0000 00:00:00' = to_char(NEW.dt_obito,'dd/mm/yyyy hh24:mi:ss')) then
	NEW.dt_obito := null;
end if;

if (NEW.ie_sexo <> OLD.ie_sexo) or (NEW.dt_nascimento <> OLD.dt_nascimento) or (NEW.cd_nacionalidade <> OLD.cd_nacionalidade) or (NEW.ie_estado_civil <> OLD.ie_estado_civil) or (NEW.cd_religiao <> OLD.cd_religiao) or (NEW.nr_spss <> OLD.nr_spss) or (NEW.cd_rfc <> OLD.cd_rfc) or (NEW.cd_curp <> OLD.cd_curp) or (NEW.nm_pessoa_fisica <> OLD.nm_pessoa_fisica) or (NEW.nr_cpf <> OLD.nr_cpf) or (NEW.nr_identidade <> OLD.nr_identidade) or (NEW.nr_seq_conselho <> OLD.nr_seq_conselho) then
	BEGIN
	CALL send_physician_intpd(NEW.cd_pessoa_fisica, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, 'A');
	end;
end if;

if (upper(OLD.nm_pessoa_fisica) <> upper(NEW.nm_pessoa_fisica)) or (OLD.dt_nascimento <> NEW.dt_nascimento) or (OLD.cd_pessoa_mae <> NEW.cd_pessoa_mae) then
  CALL check_patient_deletion_hash( NEW.nm_pessoa_fisica, NEW.dt_nascimento, NEW.cd_pessoa_mae, NEW.nm_usuario);
end if;

if (
    (
        (coalesce(OLD.qt_altura_cm, -999) != coalesce(NEW.qt_altura_cm, -999)) or (coalesce(OLD.qt_peso, -999) != coalesce(NEW.qt_peso, -999)) or (coalesce(OLD.ie_sexo, 'NA') != coalesce(NEW.ie_sexo, 'NA')) or (coalesce(OLD.dt_nascimento, TO_DATE('01010001', 'ddmmyyyy')) != coalesce(NEW.dt_nascimento, TO_DATE('01010001', 'ddmmyyyy')))
    )
    AND OBTER_SE_INTEGRACAO_ATIVA(959, 245) = 'S'
) THEN

    FOR atendimento in c_atendimentos_bb LOOP

        bb_nr_atendimento := atendimento.nr_atendimento;
        bb_nr_seq_interno := atendimento.nr_seq_interno;

        IF (NEW.ie_sexo = 'M') THEN
            bb_genderID := '4408493246f84a72b83e523e1bcb60b4';

        ELSIF (NEW.ie_sexo = 'F') THEN
            bb_genderID := '32ea83413b314be698359feea4c65297';

        ELSIF (NEW.ie_sexo = 'A') THEN
            bb_genderID := '259a3c67bc20409b858729c96716e30c';

        ELSE
            bb_genderID := '597b391357864a4697eea517205a2cb4';
        END IF;

        json_demografia := philips_json();
        json_demografia.put('typeID', 'ADT');
        json_demografia.put('messageDateTime', TO_CHAR((CURRENT_TIMESTAMP AT TIME ZONE 'UTC'), 'YYYY-MM-DD HH24:MI:SS.SSSSS'));
        json_demografia.put('messageUsesUtcDateTimes', '1');
        json_demografia.put('patientHealthSystemStayID', LPAD(bb_nr_atendimento, 32, 0));
        json_demografia.put('mostRecentWardStayID', LPAD(bb_nr_seq_interno, 32, 0));
        json_demografia.put('dateOfBirth', TO_CHAR(f_extract_utc_bb(NEW.dt_nascimento), 'YYYY-MM-DD'));
        json_demografia.put('genderID', bb_genderID);
        json_demografia.put('admissionWeight', coalesce(TO_CHAR(NEW.qt_peso), ''));
        json_demografia.put('admissionHeight', coalesce(TO_CHAR(NEW.qt_altura_cm), ''));

        dbms_lob.createtemporary(envio_integracao_bb, TRUE);
        json_demografia.(envio_integracao_bb);

        SELECT BIFROST.SEND_INTEGRATION_CONTENT('Blackboard_Patient_Admission',envio_integracao_bb,wheb_usuario_pck.get_nm_usuario) into STRICT retorno_integracao_bb;

    END LOOP;

END IF;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pessoa_fisica_atual() FROM PUBLIC;

CREATE TRIGGER pessoa_fisica_atual
	BEFORE UPDATE ON pessoa_fisica FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pessoa_fisica_atual();

