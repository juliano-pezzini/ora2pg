-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_paciente_aftupdate ON atendimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_paciente_aftupdate() RETURNS trigger AS $BODY$
declare

ie_gerar_ccih_w			varchar(1);
ds_param_integ_hl7_w		varchar(255);
ie_operacao_w			varchar(2);
qt_registros_w			bigint;
dt_episodio_w			timestamp;
ds_event_w			varchar(255);
BEGIN
  BEGIN

if (NEW.cd_medico_resp <> OLD.cd_medico_resp) then
	BEGIN
	if (NEW.cd_medico_resp	<> Obter_Dados_Usuario_Opcao(NEW.nm_usuario,'C')) then
		CALL gerar_evento_alt_medico_resp(NEW.nr_atendimento,NEW.nm_usuario,NEW.cd_medico_resp);
	end if;
	exception
		when others then
		null;
	end;
end if;

BEGIN
if	((OLD.dt_inicio_atendimento	is null  and
	NEW.dt_inicio_atendimento is not null) or (OLD.dt_atend_medico is null and
	NEW.dt_atend_medico is not null)) then

	update	log_chamada_pa
	set	ie_chamado = 'S'
	where	nr_atendimento = NEW.nr_atendimento
	and	ie_chamado = 'N';
end if;	

exception
	when others then
	null;
end;

BEGIN
select	obter_valor_param_usuario(0,56,0,NEW.nm_usuario,NEW.cd_estabelecimento)
into STRICT	ie_gerar_ccih_w
;

if (NEW.ie_tipo_atendimento <> OLD.ie_tipo_atendimento) then
	if	((ie_gerar_ccih_w = 'S' AND NEW.ie_tipo_atendimento = 1) or
		((ie_gerar_ccih_w = 'E') and (NEW.ie_tipo_atendimento in (1,7))) or	
		 ((ie_gerar_ccih_w = 'A') and (NEW.ie_tipo_atendimento in (1,8))) or (ie_gerar_ccih_w = 'T')) then
		CALL ccih_gerar_ficha_ocorrencia(NEW.nr_atendimento,NEW.dt_entrada, NEW.cd_medico_resp, NEW.nm_usuario,'N',NEW.ie_clinica);
	end if;
end if;

exception
	when others then
	null;
end;

if (NEW.dt_atend_medico is not null) and (OLD.dt_atend_medico is null) then
	ds_param_integ_hl7_w := 'nr_atendimento=' || NEW.nr_atendimento || ';';
	CALL gravar_agend_integracao(376, ds_param_integ_hl7_w);
end if;


if (NEW.dt_fim_consulta is not null) and (OLD.dt_fim_consulta is null) then
	ds_param_integ_hl7_w := 'nr_atendimento=' || NEW.nr_atendimento || ';';
	CALL gravar_agend_integracao(375, ds_param_integ_hl7_w);
end if;


/*Quando cancela o atendimento, limpa as informacoes na tablela de prevenda*/



if (OLD.dt_cancelamento is null) and (NEW.dt_cancelamento is not null) then

	update	pre_venda_item
	set	nr_atendimento  = NULL,
		nr_prescricao  = NULL,
		nr_seq_interno  = NULL
	where	nr_atendimento = NEW.nr_atendimento;
end if;

select	count(*)
into STRICT	qt_registros_w
from	atend_paciente_unidade
where	nr_atendimento = NEW.nr_atendimento;


ie_operacao_w	:= '';

if (qt_registros_w > 0) then		
	BEGIN
	if (OLD.dt_alta is not null) and /*Nunca envia quando tem alta informada*/

		(NEW.dt_alta is not null) then
		ie_operacao_w := 'XX'; /*Nao envia*/


	elsif (OLD.dt_cancelamento is not null) and /*Nunca envia quando ja esta cancelado*/

		(NEW.dt_cancelamento is not null) then
		ie_operacao_w := 'XX'; /*Nao envia*/

	
	elsif (OLD.dt_alta is null) and /*Somente pode mandar o CLOSE uma vez para o sistema externo, por isso tem esse IF*/

		(NEW.dt_alta is not null) then
		ie_operacao_w := 'X'; /*CLOSE*/

	
	elsif (OLD.dt_alta is not null) and /*Quando desfaz a alta, tem que mandar UPDATE para o sistema externo.*/

		(NEW.dt_alta is null) then
		ie_operacao_w := 'A'; /*UPDATE*/

		
	elsif (OLD.dt_alta is null) and /*Quando nao tem alta informada, sempre manda para o sistema externo*/

		(NEW.dt_alta is null) then
		BEGIN
		ie_operacao_w := 'A'; /*UPDATE*/

		
		if (OLD.dt_cancelamento is null) and /*Quando cancelar, tem que mandar CANCEL para o sistema externo*/

			(NEW.dt_cancelamento is not null) then
			ie_operacao_w := 'C'; /*CANCEL*/

		elsif (OLD.dt_cancelamento is not null) and /*Quer dizer que o atendimento esta cancelado e nao esta fazendo o estorno do cancelamento*/

			(NEW.dt_cancelamento is not null) then
			ie_operacao_w := 'XX';
		end if;			
		end;
	end if;
	
	if (coalesce(ie_operacao_w,'XX') <> 'XX') then
		CALL intpd_enviar_atendimento(NEW.nr_atendimento, ie_operacao_w, '0', NEW.nm_usuario);
		/*O parametro ie_controle_tag_p e usado para controlar se foi uma movimentacao de paciente.
			0 - Nao foi uma movimentacao
			1 - Foi uma movimentacao
		Neste caso, nao e uma insercao na movimentacao do paciente, entao e 0 */

	end if;
	end;
end if;

if (OLD.dt_entrada is not null and NEW.dt_entrada <> OLD.dt_entrada) then
	CALL wl_update_epis_atend_fut(nr_atendimento_p	=> NEW.nr_atendimento,
							 dt_entrada_p		=> NEW.dt_entrada,
							 nr_seq_episodio_p	=> NEW.nr_seq_episodio,
							 nm_usuario_p		=> NEW.nm_usuario);
end if;

if  	(OLD.dt_cancelamento is null AND NEW.dt_cancelamento is null) and
	(OLD.dt_alta is null AND NEW.dt_alta is null)  then  
	CALL call_bifrost_content('patient.information.update','encounter_json_pck.get_encounter_message_clob('||NEW.nr_atendimento||')', NEW.nm_usuario);
end if;


if (qt_registros_w	> 0) and (NEW.ie_tipo_atendimento	<> OLD.ie_tipo_atendimento) and (NEW.dt_cancelamento is null) then
	if (NEW.ie_tipo_atendimento	= 1) then
		ds_event_w	:= 'patient.admission.toinpatient'; --ADT A06
	elsif (OLD.ie_tipo_atendimento	= 1) then
		ds_event_w	:= 'patient.admission.tooutpatient'; --ADT A07
	end if;
	
	if (ds_event_w is not null) then
		CALL call_bifrost_content(ds_event_w,'encounter_json_pck.get_encounter_message_clob('||NEW.nr_atendimento||')', NEW.nm_usuario);
	end if;
end if;

select	max(dt_episodio)
into STRICT	dt_episodio_w
from	episodio_paciente
where	nr_sequencia	= NEW.nr_seq_episodio;

if	((coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) and (is_first_encounter(NEW.nr_atendimento, NEW.nr_seq_episodio) = 'S') and (NEW.dt_entrada < dt_episodio_w)) then
	
	update	episodio_paciente
	set	dt_episodio	= NEW.dt_entrada
	where	nr_sequencia	= NEW.nr_seq_episodio;
end if;

if ((OLD.dt_previsto_alta is null AND NEW.dt_previsto_alta is not null) or
    (OLD.dt_previsto_alta is not null AND NEW.dt_previsto_alta is null) or 
    (OLD.dt_previsto_alta is not null AND OLD.dt_previsto_alta <> NEW.dt_previsto_alta) or
    (OLD.ie_probabilidade_alta is null AND NEW.ie_probabilidade_alta is not null) or 
    (OLD.ie_probabilidade_alta is not null AND NEW.ie_probabilidade_alta is null) or 
    (OLD.ie_probabilidade_alta is not null AND OLD.ie_probabilidade_alta <> NEW.ie_probabilidade_alta)) then
	insert into encounter_discharge_prob(
			NR_SEQUENCIA,
			DT_ATUALIZACAO,
			NM_USUARIO,
			DT_ATUALIZACAO_NREC,
			NM_USUARIO_NREC,
			DT_PROBABILIDADE_ALTA,
			IE_PROBABILIDADE_ALTA,
			NR_ATENDIMENTO)
		values (	nextval('encounter_discharge_prob_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.dt_previsto_alta,
			NEW.ie_probabilidade_alta,
			NEW.nr_atendimento
			);
end if;

if	((coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') and (OLD.cd_medico_referido is null) and (NEW.cd_medico_referido is not null)) then
		update encounter_ref_rec
		set cd_medico = NEW.cd_medico_referido
		where nr_seq_atend is not null
		and nr_atendimento = NEW.nr_atendimento;
end if;

if	((coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') and (OLD.cd_cgc_indicacao is null) and (NEW.cd_cgc_indicacao is not null)) then
		update encounter_ref_rec
		set cd_cgc = NEW.cd_cgc_indicacao
		where nr_seq_atend is not null
		and nr_atendimento = NEW.nr_atendimento;
end if;

if (NEW.CD_MEDICO_REFERIDO <> OLD.CD_MEDICO_REFERIDO) then

    insert into log_atendimento(
        dt_atualizacao,
        nm_usuario,
        cd_log,
        nr_atendimento,
        ds_log)
        values (LOCALTIMESTAMP,
        NEW.nm_usuario,
        2121,
        NEW.nr_atendimento,
        wheb_mensagem_pck.get_texto(1214157) || ': ' || NEW.CD_MEDICO_REFERIDO);

end if;

if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	null;
end if;

  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_paciente_aftupdate() FROM PUBLIC;

CREATE TRIGGER atendimento_paciente_aftupdate
	AFTER UPDATE ON atendimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_paciente_aftupdate();

