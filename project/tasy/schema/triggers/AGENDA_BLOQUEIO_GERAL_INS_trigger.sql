-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS agenda_bloqueio_geral_ins ON agenda_bloqueio_geral CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_agenda_bloqueio_geral_ins() RETURNS trigger AS $BODY$
declare

procedure limpar_controle_horario(cd_tipo_agenda_p bigint, cd_agenda_p bigint, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp) is
BEGIN
  BEGIN
	if (cd_agenda_p is not null) then
		delete	from agenda_controle_horario
		where	dt_agenda between trunc(coalesce(dt_inicio_vigencia_p,LOCALTIMESTAMP)) and trunc(coalesce(dt_fim_vigencia_p,LOCALTIMESTAMP + interval '3000 days'))+86399/86400
		and	cd_agenda	 = cd_agenda_p;
	elsif (cd_tipo_agenda_p is not null) then
		delete	from agenda_controle_horario a
		where	dt_agenda between trunc(coalesce(dt_inicio_vigencia_p,LOCALTIMESTAMP)) and trunc(coalesce(dt_fim_vigencia_p,LOCALTIMESTAMP + interval '3000 days'))+86399/86400
		and	exists (SELECT 1 from agenda x where x.cd_agenda = a.cd_agenda and x.cd_tipo_agenda = cd_tipo_agenda_p);
	else
		delete	from agenda_controle_horario a
		where	dt_agenda between trunc(coalesce(dt_inicio_vigencia_p,LOCALTIMESTAMP)) and trunc(coalesce(dt_fim_vigencia_p,LOCALTIMESTAMP + interval '3000 days'))+86399/86400;
	end if;
	end;

BEGIN
BEGIN
limpar_controle_horario(OLD.cd_tipo_agenda, OLD.cd_agenda, OLD.dt_inicio_vigencia, OLD.dt_fim_vigencia);
exception
	when others then
      	null;
end;
BEGIN
limpar_controle_horario(NEW.cd_tipo_agenda, NEW.cd_agenda, NEW.dt_inicio_vigencia, NEW.dt_fim_vigencia);
exception
	when others then
      	null;
end;
  END;
IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_agenda_bloqueio_geral_ins() FROM PUBLIC;

CREATE TRIGGER agenda_bloqueio_geral_ins
	AFTER INSERT OR UPDATE OR DELETE ON agenda_bloqueio_geral FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_agenda_bloqueio_geral_ins();

