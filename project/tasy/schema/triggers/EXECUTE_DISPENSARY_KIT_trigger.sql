-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS execute_dispensary_kit ON componente_kit CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_execute_dispensary_kit() RETURNS trigger AS $BODY$
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
    SUBTYPE one_char                        IS varchar(1);
    SUBTYPE two_char                        IS varchar(2);
    SUBTYPE seven_char                      IS varchar(7);
    SUBTYPE eleven_char                     IS varchar(11);
    SUBTYPE fifteen_char                    IS varchar(15);
    SUBTYPE twenty_two_char                 IS varchar(22);
    SUBTYPE fourty_char                     IS varchar(40);
    SUBTYPE four_thousand_char              IS varchar(4000);

  cd_kit_material_w kit_material.cd_kit_material%TYPE;
  ds_kit_material_w kit_material.ds_kit_material%TYPE;
  ie_tipo_local_w local_estoque.ie_tipo_local%TYPE;
  json_w four_thousand_char;

  char_eleven_c CONSTANT two_char := '11';
  char_S_c CONSTANT one_char := 'S';
  error_code_generic_c CONSTANT integer := -21977;
  error_message_generic_c CONSTANT fourty_char := 'Error executing execute_dispensary_kit.';
  json_closed_brace_c CONSTANT one_char := '}';
  json_closed_bracket_c CONSTANT one_char := ']';
  json_comma_c CONSTANT one_char := ',';
  json_open_brace_c CONSTANT one_char := '{';
  json_open_bracket_c CONSTANT one_char := '[';
  json_quantity CONSTANT eleven_char := '"quantity":';
  json_quotation_mark_c CONSTANT one_char := '"';
  json_name CONSTANT seven_char := '"name":';
  json_products CONSTANT eleven_char := '"products":';
  json_customer_code CONSTANT fifteen_char := '"customerCode":';
  json_product_customer_code CONSTANT twenty_two_char := '"productCustomerCode":';
  nr_integration_code_c CONSTANT integer := 1078;

  kit_items_cr CURSOR FOR
  SELECT
    cki.cd_material AS productCustomerCode,
    cki.qt_material AS quantity,
    COUNT(*) OVER (PARTITION BY NULL) AS totalRows,
    row_number() OVER () AS rowNumber
  FROM
    componente_kit cki
  WHERE cki.cd_material <> NEW.cd_material
    AND cki.cd_kit_material = NEW.cd_kit_material;
BEGIN
  BEGIN

  IF (wheb_usuario_pck.get_ie_executar_trigger = char_S_c)  THEN

    <<get_ie_tipo_local>>
    BEGIN
      SELECT
        les.ie_tipo_local 
      INTO STRICT
        ie_tipo_local_w
      FROM kit_material kma
      JOIN local_estoque les
        ON les.cd_local_estoque = kma.cd_local_exclusivo
      WHERE kma.cd_kit_material = NEW.cd_kit_material;
      EXCEPTION
          WHEN no_data_found THEN NULL;
          WHEN too_many_rows THEN RAISE;
    END;

    IF (ie_tipo_local_w = char_eleven_c) THEN
      BEGIN

        <<get_kit_material>>
        BEGIN
          SELECT
            kma.cd_kit_material AS customerCode,
            kma.ds_kit_material AS name
          INTO STRICT
            cd_kit_material_w,
            ds_kit_material_w
          FROM
            kit_material kma
          WHERE kma.cd_kit_material = NEW.cd_kit_material;
          EXCEPTION
              WHEN no_data_found THEN NULL;
              WHEN too_many_rows THEN RAISE;
        END;

        json_w := json_open_bracket_c || json_open_brace_c ||
                  json_customer_code || json_quotation_mark_c || cd_kit_material_w || json_quotation_mark_c || json_comma_c ||
                  json_name || json_quotation_mark_c || ds_kit_material_w || json_quotation_mark_c || json_comma_c ||
                  json_products || json_open_bracket_c ||
                  json_open_brace_c ||
                  json_product_customer_code || json_quotation_mark_c || NEW.cd_material || json_quotation_mark_c || json_comma_c ||
                  json_quantity || NEW.qt_material || 
                  json_closed_brace_c;

            <<get_items_on_kit>>
            BEGIN
              <<for_build_json_items_on_kit>>
              FOR reg_kit_items_cr IN kit_items_cr
              LOOP
                  json_w := json_w || json_comma_c ||
                  json_open_brace_c ||
                  json_product_customer_code || json_quotation_mark_c || reg_kit_items_cr.productCustomerCode || json_quotation_mark_c || json_comma_c ||
                  json_quantity || reg_kit_items_cr.quantity || 
                  json_closed_brace_c;
              END LOOP for_build_json_items_on_kit;
            END;

              json_w := json_w || json_closed_bracket_c || json_closed_brace_c || json_closed_bracket_c;

        CALL execute_bifrost_integration(nr_integration_code_c, json_w);

          EXCEPTION
          WHEN no_data_found THEN
              RAISE EXCEPTION '%', error_message_generic_c USING ERRCODE = error_code_generic_c;
      END;
    END IF;
  END IF;
  END;
RETURN NEW;
END;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_execute_dispensary_kit() FROM PUBLIC;

CREATE TRIGGER execute_dispensary_kit
	AFTER INSERT ON componente_kit FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_execute_dispensary_kit();

