-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS atendimento_paciente_update ON atendimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_atendimento_paciente_update() RETURNS trigger AS $BODY$
declare
nr_sequencia_w			bigint;
nr_seq_troca_w			bigint;
ie_mantem_status_alta_w		varchar(001);
cd_medico_w			bigint;
cd_pf_usuario_w			varchar(10);
ds_erro_w			varchar(500);
cd_convenio_w			integer;
ie_regra_w			varchar(1);
ie_regra_gerar_pac_vacina_w	varchar(1);
dt_entrada_unidade_w		timestamp;
ie_obito_w			varchar(1);
dt_final_w			timestamp;

nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
ie_status_agenda_w		varchar(2);
cd_tipo_agenda_w		bigint;
ie_se_cid_w			varchar(10);

ie_permissao_aten_w		varchar(1);
cd_setor_atendimento_w		integer;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
qt_registro_w			bigint;
ie_data_futura_w			varchar(01);
ie_trocar_medico_w			varchar(1);
ie_dt_entrada_unid_w		varchar(1);

qt_regra_medico_atend_w		bigint;
nr_nivel_atual_w			    bigint;
nr_nivel_anterior_w       bigint;
nr_sequencia_conta_hist_w  bigint;
qt_regra_medico_atend_assist_w	bigint;
ie_pf_credenciada_w		varchar(2);
ie_corpo_clinico_w			varchar(1);
ie_fim_consulta_w			varchar(1);
cd_plano_convenio_w		varchar(10);
cd_categoria_w			varchar(10);
nr_seq_evento_w			bigint;
nr_interno_conta_w			bigint;
ie_historico_conta_w		varchar(1);
nr_seq_protocolo_w		bigint;
qt_medico_w			bigint;
qt_reg_w				smallint;
nr_prontuario_w			bigint;
ie_gerar_w			varchar(1);
ie_prontuario_w			varchar(1);
nr_atend_pa_w			bigint;
ie_forma_usuario_intern_w		varchar(1);
nr_seq_evento_alta_com_pac_w	bigint;
nr_seq_evento_alta_sem_pac_w	bigint;
qt_servico_sem_pac_w		bigint;
qt_limpeza_urgente_w		bigint;
nr_seq_evento_limp_urg_w		bigint;
qt_aguardando_limp_w		bigint;
nr_seq_evento_aguard_limp_w	bigint;
cd_especialidade_w		integer;
qt_regra_medico_atend_categ_w	bigint;
qt_regra_medico_atend_categ_ww	bigint;
qt_idade_w			bigint;
ie_gera_prontuario_w		varchar(1);
ie_responsavel_nao_medico_w	varchar(2);
ie_permite_w			varchar(2);
qt_medico_ativo_w		integer;
nr_seq_evento_atendimento_w	bigint;
ie_permite_pessoa_resp_w		varchar(1);
ie_altera_tipo_atend_protoc_w	varchar(1);
qt_protocolo_atend_w		bigint;
ie_calcula_data_prev_w		varchar(1);
ie_saida_local_pa_internar_w	varchar(1);
ie_envia_alerta_w		varchar(1) := 'S';
ie_permite_pa_w			varchar(1);
ie_sexo_paciente_w		varchar(2);
ie_sexo_regra_w			varchar(2);
ie_perm_data_menor_nasc_w	varchar(1);
dt_nasc_paciente_w		timestamp;
qt_crm_atendimentos_w		bigint;
ie_integracao_dynamics_w	varchar(1);
ie_status_w			varchar(5);
ds_origem_w			varchar(1800);
ds_isolamento_log_w		varchar(4000);
nr_seq_alta_hist_w		bigint;
nm_medico_resp_w		varchar(255);
ie_vincular_senha_w		varchar(1);
ie_finaliza_precaucao_w		varchar(1);
nr_grupo_medico_novo_w		bigint;
nr_grupo_medico_velho_w		bigint;
ds_senha_internet_w		atend_senha_internet.ds_senha%type;
ds_senha_w			atend_senha_internet.ds_senha%type;
ds_texto_w			log_atendimento.ds_log%type;
nr_seq_unidade_w		unidade_atendimento.nr_seq_interno%type;
nr_seq_atend_w      atend_paciente_unidade.nr_seq_interno%type;
cd_funcao_ativa_w		bigint;
ATEND_PACIENTE_ADIC_W ATEND_PACIENTE_ADIC%ROWTYPE;
IE_MOTIVO_SEM_CPF_W   PESSOA_FISICA_AUX.IE_MOTIVO_SEM_CPF%TYPE;
IE_CONTROL_EXT_W      PESSOA_FISICA_AUX.IE_CONTROL_EXT%TYPE;
ie_existe_w varchar(2);
ie_trat_onc_w	varchar(1) := 'N';
nr_dias_retroativos_w bigint;
dt_entrada_w timestamp;
dt_final_tratamento_w 	timestamp;

ds_estab_atend_w		varchar(50);

reg_integracao_w		gerar_int_padrao.reg_integracao;
ds_sep_bv_w			varchar(100);
ds_param_integ_hl7_w		varchar(4000);
allow_future_date_w		funcao_param_usuario.vl_parametro%type;

ds_module_log_w conta_paciente_hist.ds_module%type;
ds_call_stack_w conta_paciente_hist.ds_call_stack%type;

c01 CURSOR FOR
	SELECT	distinct
		cd_convenio,
		cd_plano_convenio,
		cd_categoria
	from	atend_categoria_convenio
	where	nr_atendimento	= NEW.nr_atendimento;

c02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_status_agenda,
		b.cd_tipo_agenda
	from	agenda b,
		agenda_consulta a
	where	a.cd_agenda		= b.cd_agenda
	and	a.nr_atendimento	= NEW.nr_atendimento;
/*
Cursor C03 is
	select	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= :new.cd_estabelecimento
	and	a.ie_evento_disp	= 'AL';
*/
c04 CURSOR FOR
	SELECT	a.nr_interno_conta,
		a.cd_convenio_parametro,
		a.nr_seq_protocolo
	from	conta_paciente a
	where	a.nr_atendimento	= NEW.nr_atendimento;

c05 CURSOR FOR
	SELECT	'S'
	from	regra_prontuario
	where	cd_estabelecimento						= NEW.cd_estabelecimento
	and	coalesce(ie_clinica, coalesce(NEW.ie_clinica,0))				= coalesce(NEW.ie_clinica,0)
	and	coalesce(ie_tipo_atendimento, NEW.ie_tipo_atendimento)	= NEW.ie_tipo_atendimento
	and	ie_tipo_regra							= 1;


c06 CURSOR FOR
	SELECT	a.nr_seq_evento
	FROM regra_envio_sms a
LEFT OUTER JOIN regra_envio_sms_atend b ON (a.nr_sequencia = b.nr_seq_regra)
WHERE a.cd_estabelecimento	= NEW.cd_estabelecimento and a.ie_evento_disp	= 'ALT' and coalesce(cd_motivo_alta,coalesce(NEW.cd_motivo_alta,0))			= coalesce(NEW.cd_motivo_alta,0) and qt_idade_w between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,9999) and coalesce(b.ie_carater_inter_sus,coalesce(NEW.ie_carater_inter_sus,0)) 	= coalesce(NEW.ie_carater_inter_sus,'0') and coalesce(b.ie_tipo_atendimento,coalesce(NEW.ie_tipo_atendimento,0)) 	= coalesce(NEW.ie_tipo_atendimento,'0') and obter_se_convenio_rec_alerta(cd_convenio_w, a.nr_sequencia) = 'S' and obter_se_sms_setor_alerta(NEW.nr_atendimento,a.nr_sequencia) = 'S' and (obter_classif_regra(a.nr_sequencia,coalesce(obter_classificacao_pf(NEW.cd_pessoa_fisica),0)) = 'S') and coalesce(b.ie_clinica,coalesce(NEW.ie_clinica,0)) = coalesce(NEW.ie_clinica,'0') and coalesce(a.cd_medico,coalesce(NEW.cd_medico_resp,'0')) = coalesce(NEW.cd_medico_resp,'0') and coalesce(a.ie_situacao,'A') = 'A' and ((a.ie_sexo is null) or (a.ie_sexo = coalesce(obter_sexo_pf(NEW.cd_pessoa_fisica,'C'),'I')));	

/*CURSOR C06 IS
	SELECT	a.nr_seq_evento
	FROM	regra_envio_sms a
	WHERE	a.cd_estabelecimento	= :NEW.cd_estabelecimento
	AND	a.ie_evento_disp	= 'ALT'
	and	nvl(cd_motivo_alta,nvl(:new.cd_motivo_alta,0))	= nvl(:new.cd_motivo_alta,0)
	AND	qt_idade_w BETWEEN NVL(qt_idade_min,0)	AND NVL(qt_idade_max,9999)
	and	nvl(a.ie_situacao,'A') = 'A';*/
c07 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= NEW.cd_estabelecimento
	and	a.ie_evento_disp	= 'SLASP'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A';

c08 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= NEW.cd_estabelecimento
	and	a.ie_evento_disp	= 'SLLU'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A';

c09 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	regra_envio_sms a
	where	a.cd_estabelecimento	= NEW.cd_estabelecimento
	and	a.ie_evento_disp	= 'TCP'
	and	qt_idade_w between coalesce(qt_idade_min,0)	and coalesce(qt_idade_max,9999)
	and	coalesce(a.ie_situacao,'A') = 'A'
	order by a.nr_seq_evento desc;
BEGIN
  BEGIN

	nr_dias_retroativos_w := Obter_Valor_Param_Usuario(916, 1245, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo);	
	if (nr_dias_retroativos_w > 0) then
		dt_entrada_w := NEW.DT_ENTRADA + nr_dias_retroativos_w;
		if (dt_entrada_w < NEW.DT_ATUALIZACAO_NREC) then 		
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1205626);		
		end if;
	end if;	
	
if (wheb_usuario_pck.get_ie_executar_trigger	= 'N')  then
	goto final;
end if;

ds_sep_bv_w := obter_separador_bv;

ie_perm_data_menor_nasc_w := obter_param_usuario(916, 990, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_perm_data_menor_nasc_w);
dt_nasc_paciente_w := to_date(obter_dados_pf(NEW.cd_pessoa_fisica,'DN'),'dd/mm/yyyy hh24:mi:ss');

BEGIN

select	substr(coalesce(obter_nome_pf(NEW.cd_medico_resp),''),1,255)
into STRICT	nm_medico_resp_w
;

exception
when others then
	nm_medico_resp_w	 := '';
end;

select max(nr_seq_interno)
into STRICT	nr_seq_atend_w
from	atend_paciente_unidade
where	nr_atendimento = NEW.nr_atendimento;

if (coalesce(OLD.nr_seq_classif_esp, 0) <> coalesce(NEW.nr_seq_classif_esp, 0)) then
   CALL insert_atend_unid_classif_esp(OLD.nr_seq_classif_esp, NEW.nr_seq_classif_esp, NEW.nr_atendimento, null, NEW.nm_usuario);
end if;

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT'))then

	allow_future_date_w := Obter_Param_Usuario(916, 1206, obter_perfil_ativo, NEW.nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, allow_future_date_w);

	if (OLD.dt_chegada_paciente is not null and NEW.dt_chegada_paciente is null)then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083783);
	end if;
	
	if (coalesce(allow_future_date_w, 'N') = 'N' and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_chegada_paciente) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP))then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083786);
	end if;
	
	if (coalesce(allow_future_date_w, 'N') = 'N' and OLD.dt_chegada_paciente is not null and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(OLD.dt_entrada) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_entrada)) and ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(NEW.dt_entrada) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP)) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1083769);
	end if;
end if;

if (NEW.dt_entrada < dt_nasc_paciente_w) and (ie_perm_data_menor_nasc_w = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(215575);
	--'A data nao pode ser menor do que a data de nascimento do paciente!'
end if;

ie_altera_tipo_atend_protoc_w := obter_param_usuario(916, 939, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_altera_tipo_atend_protoc_w);
ie_saida_local_pa_internar_w := obter_param_usuario(916, 972, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_saida_local_pa_internar_w);
ie_permite_pa_w := obter_param_usuario(935, 196, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_permite_pa_w);

qt_idade_w	:= coalesce(obter_idade_pf(NEW.cd_pessoa_fisica,LOCALTIMESTAMP,'A'),0);

if (NEW.nr_seq_triagem_prioridade is not null) then

	BEGIN
		select 	coalesce(ie_sexo,'A')
		into STRICT	ie_sexo_regra_w
		from	triagem_classif_prioridade
		where	nr_sequencia = NEW.nr_seq_triagem_prioridade;
	exception
	when others then
		ie_sexo_regra_w := 'A';
	end;

	if (ie_sexo_regra_w <> 'A') then

		select	coalesce(obter_sexo_pf(NEW.cd_pessoa_fisica,'C'),'I')
		into STRICT	ie_sexo_paciente_w
		;

		if (ie_sexo_paciente_w <> ie_sexo_regra_w) and (ie_sexo_paciente_w <> 'I') then

			CALL wheb_mensagem_pck.exibir_mensagem_abort(212461);

		end if;

	end if;

end if;

select	coalesce(max(ie_forma_usuario_intern),'N')
into STRICT	ie_forma_usuario_intern_w
from	parametro_atendimento
where	cd_estabelecimento	= NEW.cd_estabelecimento;

if (ie_forma_usuario_intern_w = 'U') and (NEW.ie_tipo_atendimento = 1) and (NEW.ie_tipo_atendimento <> OLD.ie_tipo_atendimento) and (NEW.nm_usuario_intern is null) then
	BEGIN
	NEW.nm_usuario_intern	:= NEW.nm_usuario;
	NEW.dt_usuario_intern	:= LOCALTIMESTAMP;
	end;
end if;

if (NEW.ie_clinica	is not null) and (OLD.ie_clinica	is not null) and (NEW.ie_clinica	<> OLD.ie_clinica) and (OLD.ie_tipo_atendimento = 3)then
	NEW.ie_clinica_ant	:= OLD.ie_clinica;
end if;

if (NEW.cd_medico_resp <> OLD.cd_medico_resp) then

/*	SELECT	COUNT(*)
	INTO	qt_medico_w
	FROM	medico
	WHERE	cd_pessoa_fisica = :NEW.cd_medico_resp;

	IF	(qt_medico_w = 0) THEN
		(-20011,'O codigo de medico digitado nao esta cadastrado na tabela de medico #@#@');
	END IF;
*/
	select	coalesce(max(obter_valor_param_usuario(916, 789, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento)),'N')
	into STRICT	ie_responsavel_nao_medico_w
	;

	select	count(*)
	into STRICT	qt_medico_w
	from	medico
	where	cd_pessoa_fisica = NEW.cd_medico_resp;

	if (coalesce(ie_responsavel_nao_medico_w,'N') = 'S') and (qt_medico_w = 0) then
		BEGIN
		select	coalesce(max(obter_se_responsavel_atend(obter_perfil_ativo,NEW.cd_medico_resp,0,0)),0)
		into STRICT	ie_permite_w
		;

		if (ie_permite_w = 'N') then
			BEGIN
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186362);
			--'O conselho da pessoa digitada nao esta liberado para ser responsavel do atendimento
			end;
		end if;
		end;
	end if;


	if (qt_medico_w = 0) and (NEW.cd_medico_resp is not null) and
		((coalesce(ie_responsavel_nao_medico_w,'N') = 'N') or ((qt_medico_w = 0) and (coalesce(ie_responsavel_nao_medico_w,'N') = 'S') and (ie_permite_w = 'N'))) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186364);
		--'O codigo de medico digitado nao esta cadastrado na tabela de medico
	end if;


    update	autorizacao_convenio a
	set	a.cd_medico_solicitante  	= NEW.cd_medico_resp,
		a.dt_atualizacao	       	= LOCALTIMESTAMP,
		a.nm_usuario	       		= NEW.nm_usuario
	where	a.nr_atendimento	       	= NEW.nr_atendimento
	and	a.cd_medico_solicitante  	= OLD.cd_medico_resp
	and	not exists (	SELECT	1	
				from	estagio_autorizacao e
				where	e.nr_sequencia = a.nr_seq_estagio
				and	e.ie_interno in ('10','70','90'));


	CALL consistir_impedimento_pf(NEW.cd_medico_resp,'EUP',NEW.nm_usuario);
	CALL gerar_reconciliacao_paciente(NEW.nm_usuario, NEW.nr_atendimento, NEW.cd_perfil_ativo, 'M', 'N',null,'N');

end if;

if (NEW.cd_medico_resp <> OLD.cd_medico_resp) then

	select	coalesce(max(nr_seq_grupo),0)
	into STRICT	nr_grupo_medico_novo_w
	from	med_pac_grupo
	where	cd_pessoa_fisica = NEW.cd_medico_resp;

	select	coalesce(max(nr_seq_grupo),0)
	into STRICT	nr_grupo_medico_velho_w
	from	med_pac_grupo
	where	cd_pessoa_fisica = OLD.cd_medico_resp;

	if (nr_grupo_medico_novo_w <> nr_grupo_medico_velho_w) then
		BEGIN

		update	pac_grupo_atend
		set	dt_saida = LOCALTIMESTAMP,
			nm_usuario = NEW.nm_usuario
		where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
		and	dt_saida is null;


		if (nr_grupo_medico_novo_w <> 0) then
			BEGIN
			insert into pac_grupo_atend(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				nr_seq_grupo,
				nr_atendimento,
				ie_situacao,
				dt_entrada,
				cd_pessoa_fisica)
		SELECT	nextval('pac_grupo_atend_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			nr_grupo_medico_novo_w,
			NEW.nr_atendimento,
			'A',
			LOCALTIMESTAMP,
			NEW.cd_pessoa_fisica
		
		where	not exists (	SELECT	1
					from	pac_grupo_atend
					where	nr_atendimento 	= NEW.nr_atendimento
					and	nr_seq_grupo	= nr_grupo_medico_novo_w
					and	dt_saida is null
					
union

					select	1
					from	pac_grupo_atend
					where	cd_pessoa_fisica 	= NEW.cd_pessoa_fisica
						and	nr_seq_grupo		= nr_grupo_medico_novo_w
						and	dt_saida is null);
			end;

		end if;
		end;
	end if;
end if;

if (NEW.dt_entrada > LOCALTIMESTAMP) and (OLD.dt_entrada <> NEW.dt_entrada) then
	BEGIN

	ie_data_futura_w := obter_param_usuario(916, 52, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_data_futura_w);

	if (ie_data_futura_w = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186376,'DT_ENTRADA_P='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(NEW.dt_entrada, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)||';DT_ATUAL_P='||PKG_DATE_FORMATERS_TZ.TO_VARCHAR(LOCALTIMESTAMP, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone));
		-- 'A data de entrada nao pode ser maior que a data atual! Data de entrada: ' ||  TO_CHAR(:NEW.dt_entrada,'dd/mm/yyyy hh24:mi:ss') || '   Data atual: ' ||TO_CHAR(SYSDATE,'dd/mm/yyyy hh24:mi:ss')
	end if;
	end;
elsif (NEW.dt_entrada < LOCALTIMESTAMP - interval '50000 days') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186365);
	--'A data de entrada esta invalida!
end if;


open c01;
	loop
	fetch c01 into
		cd_convenio_w,
		cd_plano_convenio_w,
		cd_categoria_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	select

obter_convenio_regra_atend(NEW.cd_medico_resp,cd_convenio_w,NEW.ie_tipo_atendimento,NEW.cd_estabelecimento,'A',cd_categoria_w,cd_plano_convenio_w)
	into STRICT	ie_regra_w
	;
	if (ie_regra_w = 'N') and
		((obter_funcao_ativa	<> 935) or (ie_permite_pa_w = 'N')) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186367);
		--'O medico nao esta cadastrado para atender por esse convenio.
	end if;
end loop;
close c01;

if (NEW.cd_medico_atendimento is null) then
	NEW.cd_medico_atendimento	:= NEW.cd_medico_resp;
end if;

NEW.dt_alta_interno	:= coalesce(NEW.dt_alta, to_date('30/12/2999','dd/mm/yyyy'));

/* Marcus 03/01/2005 OS13817 - Se o usuario alterar a data de entrada, esta nao podera ser superior a data unidade */

ie_dt_entrada_unid_w := obter_param_usuario(916, 662, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_dt_entrada_unid_w);
if (NEW.dt_entrada <> OLD.dt_entrada) then
	select	min(dt_entrada_unidade)
	into STRICT	dt_entrada_unidade_w
	from	atend_paciente_unidade
	where	nr_atendimento	= NEW.nr_atendimento;
	if (dt_entrada_unidade_w is not null) and (dt_entrada_unidade_w < NEW.dt_entrada) and (ie_dt_entrada_unid_w = 'N')then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186368);
		--'A data de entrada da unidade nao pode ser menor que a entrada do atendimento');
	end if;
end if;

if 	(NEW.dt_alta is not null AND OLD.dt_alta is null) or (NEW.ie_status_atendimento = 'A') then
	BEGIN

/*	Rafael em 20/09/2006 OS 41208 -> Substitui esta rotina (comentada) pelo cursor (c02) abaixo.

	select	nvl(max(nr_sequencia),0)
	into	nr_sequencia_w
	from 	agenda_consulta
	where 	nr_atendimento = :new.nr_atendimento;

	if	(nr_sequencia_w > 0) then
		select	ie_status_agenda
		into	ie_status_agenda_w
		from	agenda_consulta
		where 	nr_sequencia = nr_sequencia_w;
	end if;

	if	(nr_sequencia_w > 0) then
		begin

		select	nvl(max(nvl(vl_parametro, vl_parametro_padrao)),'N')
		into 	ie_mantem_status_alta_w
		from 	funcao_parametro
		where 	cd_funcao 	= 898
		and 	nr_sequencia 	= 11;

		if	(ie_status_agenda_w = 'N') and
			(ie_mantem_status_alta_w = 'S') then
			update	agenda_consulta
			set		ie_status_agenda = 'A'
			where		nr_sequencia = nr_sequencia_w;
		elsif	(ie_status_agenda_w = 'O') or
			(:new.dt_alta is not null) then
			update	agenda_consulta
			set		ie_status_agenda = 'E'
			where		nr_sequencia = nr_sequencia_w;
		end if;
		end;
	end if;
*/
	/* --> Rafael em 14/4/8 OS89458

	select	nvl(max(nvl(vl_parametro, vl_parametro_padrao)),'N')
	into 	ie_mantem_status_alta_w
	from 	funcao_parametro
	where 	cd_funcao 	= 898
	and 	nr_sequencia 	= 11;*/
	/* Bruna, Jerusa - Colocado na procedure Gerar_Estornar_Alta em 20/06/2008 OS97687

	select	nvl(max(obter_valor_param_usuario(898, 11, obter_perfil_ativo, :new.nm_usuario, :new.cd_estabelecimento)), 'S')
	into	ie_mantem_status_alta_w
	from	dual;

	open c02;
	loop
	fetch c02 into	nr_seq_agenda_w,
			ie_status_agenda_w,
			cd_tipo_agenda_w;
		exit when c02%notfound;
		if	(ie_status_agenda_w = 'N') and --> Rafael em 14/4/8 OS89458
		if	(ie_status_agenda_w not in ('C','B','F','I','II','E','O')) and
			(ie_mantem_status_alta_w = 'S') and
			(cd_tipo_agenda_w = 3) then
			update	agenda_consulta
			set	ie_status_agenda	= 'A'
			where	nr_sequencia		= nr_seq_agenda_w;
		elsif	((ie_status_agenda_w = 'O') or
			(:new.dt_alta is not null) or
			(cd_tipo_agenda_w = 5)) and
			(ie_status_agenda_w not in ('C','B')) then /* Rafael em 11/06/2007 OS 41208 inclui o teste referente aos status 'C' e 'B'
			update	agenda_consulta
			set	ie_status_agenda	= 'E'
			where	nr_sequencia		= nr_seq_agenda_w;
		end if;
	end loop;
	close c02; */
	BEGIN
	update	atend_pac_cronico
	set	dt_fim = NEW.dt_alta
	where	nr_atendimento = NEW.nr_atendimento
	and	dt_fim is null;
	exception
		when others then
		nr_sequencia_w := nr_sequencia_w;
	end;
	end;
end if;

/* Alterado por Marcus em 7/1/2006 Estabelecimento */

ds_erro_w	:= '';
if (coalesce(NEW.ie_clinica, 0) <> coalesce(OLD.ie_clinica, 0)) and (coalesce(NEW.ie_clinica, 0) > 0) then

	/* Ivan em 24/08/2007 OS65991 - Incluido parametro do setor do usuario */

	ds_erro_w := consiste_clinica_tipo_atend(NEW.cd_estabelecimento, NEW.ie_clinica, NEW.ie_tipo_atendimento, NEW.nr_seq_regra_funcao, obter_setor_usuario(NEW.nm_usuario), ds_erro_w);
	if (ds_erro_w is not null) or (ds_erro_w <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186388,'DS_ERRO_P='||ds_erro_w);
	end if;
end if;

if (NEW.cd_medico_resp <> OLD.cd_medico_resp) then
	BEGIN
	select	count(*)
	into STRICT	qt_medico_w
	from	medico
	where	cd_pessoa_fisica = NEW.cd_medico_resp;

	select	count(*)
	into STRICT	qt_medico_ativo_w
	from	medico
	where	cd_pessoa_fisica = NEW.cd_medico_resp
	and	coalesce(ie_situacao,'A') = 'A';


	if (qt_medico_w > 0) and (qt_medico_ativo_w = 0) and (NEW.cd_medico_resp is not null) then

		ie_permite_pessoa_resp_w := obter_param_usuario(916, 789, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_permite_pessoa_resp_w);
		if (ie_permite_pessoa_resp_w <> 'S') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186383,'NR_ATENDIMENTO_P='||NEW.nr_atendimento);
			--'O medico responsavel pelo paciente informado no atendimento ''' ||  || ''' esta inativo!'); /* jcaraujo OS346272 */
		end if;
	end if;
	end;
end if;
/* Fernando - 24/10/2006 Para efetuar controle por periodo de isolamento do paciente */

if (coalesce(NEW.ie_paciente_isolado,'N') <> coalesce(OLD.ie_paciente_isolado,'N')) then

	if (NEW.ie_paciente_isolado = 'N') then

		update	atend_paciente_hist
		set	dt_final	= LOCALTIMESTAMP,
			nm_usuario	= NEW.nm_usuario,
			dt_atualizacao	= LOCALTIMESTAMP
		where	nr_sequencia = (SELECT	max(nr_sequencia)
					from	atend_paciente_hist
					where	nr_atendimento = NEW.nr_atendimento);
	else
		insert into atend_paciente_hist(nr_sequencia,
			nr_atendimento,
			cd_pessoa_fisica,
			dt_inicial,
			dt_final,
			ie_evento,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec)
		values (nextval('atend_paciente_hist_seq'),
			NEW.nr_atendimento,
			NEW.cd_pessoa_fisica,
			LOCALTIMESTAMP,
			null,
			'I',
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP);
	end	if;
end	if;


if	((coalesce(OLD.cd_medico_resp,'0') <> coalesce(NEW.cd_medico_resp,'0')) or (coalesce(OLD.nr_seq_classif_medico,0) <> coalesce(NEW.nr_seq_classif_medico,0))) then	


	select	count(*)
	into STRICT	qt_medico_w
	from	medico
	where	cd_pessoa_fisica = OLD.cd_medico_resp;
	if (qt_medico_w	> 0)then
		select	max(obter_setor_atendimento(NEW.nr_atendimento))
		into STRICT	cd_setor_atendimento_w
		;

		select	nextval('atendimento_troca_medico_seq')
		into STRICT	nr_seq_troca_w
		;

		if (NEW.cd_medico_resp = obter_pessoa_fisica_usuario(wheb_usuario_pck.get_nm_usuario,'C')) then
			cd_especialidade_w	:= wheb_usuario_pck.get_cd_especialidade;
		else
			cd_especialidade_w	:= obter_especialidade_medico(NEW.cd_medico_resp,'C');
		end if;

		insert into atendimento_troca_medico(
			nr_sequencia,
			nr_atendimento,
			dt_atualizacao,
			nm_usuario,
			dt_troca,
			cd_medico_anterior,
			cd_medico_atual,
			ie_forma_aviso,
			cd_setor_atendimento,
			ie_tipo_atendimento,
			nr_seq_classif_medico,
			cd_especialidade,
			nm_usuario_nrec,
			dt_atualizacao_nrec)
		values (
			nr_seq_troca_w,
			NEW.nr_atendimento,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			OLD.cd_medico_resp,
			NEW.cd_medico_resp,
			'T',
			cd_setor_atendimento_w,
			NEW.ie_tipo_atendimento,
			NEW.nr_seq_classif_medico,
			cd_especialidade_w,
			NEW.nm_usuario,
			LOCALTIMESTAMP);
		select	coalesce(max(cd_pessoa_fisica),'0')
		into STRICT	cd_pf_usuario_w
		from	usuario
		where	nm_usuario	= NEW.nm_usuario;
		if (cd_pf_usuario_w = NEW.cd_medico_resp) then
			update atendimento_troca_medico
			set	dt_ciente		= LOCALTIMESTAMP,
				nm_usuario_ciente	= NEW.nm_usuario,
				ie_forma_aviso	= 'P'
			where	nr_sequencia		= nr_seq_troca_w;
		end if;

	end if;
end if;
/*
IF	(:OLD.cd_medico_resp = :NEW.cd_medico_resp) AND
	((:NEW.nr_seq_classif_medico <> :OLD.nr_seq_classif_medico) OR
	((:NEW.nr_seq_classif_medico IS NULL) AND (:OLD.nr_seq_classif_medico IS NOT NULL)) OR
	((:OLD.nr_seq_classif_medico IS NULL) AND (:NEW.nr_seq_classif_medico IS NOT NULL))) THEN
	UPDATE	atendimento_troca_medico
	SET	nr_seq_classif_medico = :NEW.nr_seq_classif_medico
	WHERE	nr_sequencia = (SELECT MAX(nr_sequencia) FROM atendimento_troca_medico WHERE nr_atendimento = :NEW.nr_atendimento AND cd_medico_atual = :NEW.cd_medico_resp);
END IF;*/
/* Rafael em 31/1/8 OS81030, substitui esta rotina pela rotina abaixo na sequencia
if	(:new.cd_motivo_alta is not null)	and
	(:old.cd_motivo_alta is null)		then
	select	ie_obito
	into	ie_obito_w
	from	motivo_alta
	where	cd_motivo_alta = :new.cd_motivo_alta;

	if	(ie_obito_w = 'S') then
		update	pessoa_fisica
		set	dt_obito = :new.dt_alta
		where	cd_pessoa_fisica = :new.cd_pessoa_fisica;

	end if;
end	if;
*/
if (NEW.dt_alta is not null) and (OLD.dt_alta is null) then
	
	ds_origem_w := substr(dbms_utility.format_call_stack,1,1800);
	insert into log_mov(	DT_ATUALIZACAO,
				NM_USUARIO,
				CD_LOG,
				DS_LOG)
		values (	LOCALTIMESTAMP,
				NEW.nm_usuario,
				148998,
				substr(' '||SUBSTR(OBTER_DESC_EXPRESSAO(326147), 1, 1800)||' '||NEW.nr_atendimento||
				' '||SUBSTR(OBTER_DESC_EXPRESSAO(298822), 1, 1800)||': '|| ds_origem_w,1,1800)
				);

	if (NEW.dt_fim_consulta is null) then   /*Edilson em 06/05/2008 OS 91570*/
		select	coalesce(max(ie_fim_consulta),'N')
		into STRICT	ie_fim_consulta_w
		from	parametro_atendimento
		where	cd_estabelecimento	= NEW.cd_estabelecimento;

		if (ie_fim_consulta_w = 'S') then
			NEW.dt_fim_consulta	:= NEW.dt_alta;
		end if;
	end if;
	
	if (NEW.cd_motivo_alta is not null) and (obter_se_motivo_alta_obito(NEW.cd_motivo_alta) = 'S') then
		
		if (obter_funcao_ativa = 7009) and (obter_valor_param_usuario(7009, 291, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento) = 'S') then

			select max(p.dt_final_tratamento)
			into STRICT   dt_final_tratamento_w
			from   paciente_tratamento p
			inner join motivo_fim m on p.nr_seq_motivo_fim = m.nr_sequencia 
			where  p.cd_pessoa_fisica = NEW.cd_pessoa_fisica
			and    m.ie_tipo_tratamento = 'O';

			update	pessoa_fisica pf
			set	pf.dt_obito		    =  dt_final_tratamento_w,
				pf.nm_usuario		= NEW.nm_usuario,
				pf.dt_atualizacao	= LOCALTIMESTAMP
			where	pf.cd_pessoa_fisica	= NEW.cd_pessoa_fisica;

		else

			update	pessoa_fisica pf
			set	pf.dt_obito  		= NEW.dt_alta,
				pf.nm_usuario  		= NEW.nm_usuario,
				pf.dt_atualizacao  	= LOCALTIMESTAMP
			where	pf.cd_pessoa_fisica	= NEW.cd_pessoa_fisica;
		
		end if;	

	else

		/* rfcaldas OS 90708, incluido o if pois ao desfazer a alta de um atendimento mais antigo,
					alterava a data de obito para um paciente que jah tinha obito. */
		if (OLD.cd_motivo_alta is not null) and (obter_se_motivo_alta_obito(OLD.cd_motivo_alta) = 'S') then
			update	pessoa_fisica
			set	dt_obito		 = NULL,
				nm_usuario		= NEW.nm_usuario,
				dt_atualizacao		= LOCALTIMESTAMP
			where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
			and	dt_obito		is not null;
		end if;

	end if;

	CALL altera_clinica_regra(NEW.nr_atendimento,NEW.cd_pessoa_fisica );
	CALL gerar_reconciliacao_paciente(NEW.nm_usuario, NEW.nr_atendimento, NEW.cd_perfil_ativo, 'A', 'N',null,'N');

	if (coalesce((pkg_i18n.get_estab_locale), 'pt_BR') = 'es_MX') then
		CALL gerar_codificacao_atendimento(NEW.nr_atendimento, NEW.ie_clinica, NEW.nm_usuario, null, null, null, null, 'S', null);
	end if;

  if (OBTER_SE_INTEGRACAO_ATIVA(959, 245) = 'S') then
    CALL p_integrar_admissao_bb(bb_integracao              => 'D',
      nr_atendimento_p            => NEW.nr_atendimento,
      dt_entrada_unidade_p        => NEW.dt_alta,
      cd_motivo_alta_p            => NEW.cd_motivo_alta,
      nr_seq_interno_p            => nr_seq_atend_w);
  end if;

elsif (NEW.dt_alta is null) and (OLD.dt_alta is not null) then

	if (OLD.cd_motivo_alta is not null) and (obter_se_motivo_alta_obito(OLD.cd_motivo_alta) = 'S') then

		update	pessoa_fisica
		set	dt_obito		 = NULL,
			nm_usuario		= NEW.nm_usuario,
			dt_atualizacao		= LOCALTIMESTAMP
		where	cd_pessoa_fisica	= NEW.cd_pessoa_fisica
		and	dt_obito		is not null
		and	dt_obito		= OLD.dt_alta;
	end if;

  if (OBTER_SE_INTEGRACAO_ATIVA(959, 245) = 'S') then
    CALL p_integrar_admissao_bb(bb_integracao              => 'UD',
      nr_atendimento_p            => NEW.nr_atendimento,
      nr_seq_interno_anterior_p   => nr_seq_atend_w);
  end if;

end if;




if (NEW.nm_usuario_atend) <> (OLD.nm_usuario_atend) then

	BEGIN
	insert into log_atendimento(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		nr_atendimento,
		ds_log)
	values (LOCALTIMESTAMP,
		NEW.nm_usuario,
		3,
		NEW.nr_atendimento,
		'PESSOA OLD: ' || OLD.nm_usuario_atend || chr(13) ||
		'PESSOA NEW: ' || NEW.nm_usuario_atend || chr(13) ||
		'ATEND: ' || NEW.nr_atendimento || chr(13) ||
		'OBJ: ATENDIMENTO_PACIENTE_UPDATE ' || chr(13) ||
		wheb_mensagem_pck.get_texto(799970)||': ' || obter_perfil_ativo || chr(13) ||
		wheb_mensagem_pck.get_texto(799971)||': ' || NEW.cd_estabelecimento || chr(13) ||
		'CALLSTACK: ' || dbms_utility.format_call_stack || chr(13) ||
		'NM_USUARIO_ATEND alterado '  || chr(13));
	exception
	when others then
		null;
	end;

end if;



if (NEW.ie_carater_inter_sus is null) and (OLD.ie_carater_inter_sus is not null) then

	BEGIN
	insert into log_atendimento(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		nr_atendimento,
		ds_log)
	values (LOCALTIMESTAMP,
		NEW.nm_usuario,
		4,
		NEW.nr_atendimento,
		'PESSOA: ' || NEW.cd_pessoa_fisica || chr(13) ||
		'ATEND: ' || NEW.nr_atendimento || chr(13) ||
		'OBJ: ATENDIMENTO_PACIENTE_UPDATE ' || chr(13) ||
		wheb_mensagem_pck.get_texto(799970)||': ' || obter_perfil_ativo || chr(13) ||
		wheb_mensagem_pck.get_texto(799971)||': ' || NEW.cd_estabelecimento || chr(13) ||
		'IE_CARATER_INTER_SUS alterado '  || chr(13));
	exception
	when others then
		null;
	end;

end if;

/*Rafael em 12/07/2006 OS36992*/

if (NEW.nr_seq_local_pa is not null) and
	((OLD.nr_seq_local_pa <> NEW.nr_seq_local_pa) or (OLD.nr_seq_local_pa is null)) then

	update	historico_localizacao_pa
	set	dt_saida_local		= LOCALTIMESTAMP
	where	nr_seq_local_destino_pa	= OLD.nr_seq_local_pa
	and	dt_saida_local		is null
	--and	dt_entrada_local		< sysdate
	and	nr_atendimento		= NEW.nr_atendimento;

	select	nextval('historico_localizacao_pa_seq')
	into STRICT	nr_sequencia_w
	;

	select 	max(a.nr_atendimento)
	into STRICT	nr_atend_pa_w
	from	historico_localizacao_pa a,
		pa_local b,
		pa_grupo_local c
	where	a.nr_seq_local_destino_pa = b.nr_sequencia
	and	b.nr_seq_grupo_pa = c.nr_sequencia
	and	c.ie_controle = 'I'
	and	a.nr_seq_local_destino_pa = NEW.nr_seq_local_pa
	and	a.nr_atendimento <> NEW.nr_atendimento
	and	a.dt_saida_local is null;

	select	max(ie_status)
	into STRICT	ie_status_w
	from	pa_local
	where	nr_sequencia = NEW.nr_seq_local_pa;

	if (nr_atend_pa_w is not null) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186385,'NR_ATEND_PA_P='||nr_atend_pa_w);
		--'Existe um paciente neste local. Atendimento: '|| nr_atend_pa_w ||'#@#@');
	end if;

	if (ie_status_w = 'B') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(223753);
		--'Este local esta bloqueado.'
	end if;

	insert into historico_localizacao_pa(		nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_local_origem_pa,
							nr_seq_local_destino_pa,
							dt_entrada_local,
							nr_atendimento,
							dt_saida_prev_loc_pa,
							qt_min_prev_loc
							)
						values	(
							nr_sequencia_w,
							LOCALTIMESTAMP,
							NEW.nm_usuario,
							LOCALTIMESTAMP,
							NEW.nm_usuario,
							OLD.nr_seq_local_pa,
							NEW.nr_seq_local_pa,
							LOCALTIMESTAMP,
							NEW.nr_atendimento,
							NEW.dt_saida_prev_loc_pa,
							CASE WHEN NEW.dt_saida_prev_loc_pa IS NULL THEN null  ELSE ((NEW.dt_saida_prev_loc_pa-LOCALTIMESTAMP)*1440) END );
elsif (NEW.nr_seq_local_pa is null) then
	update	historico_localizacao_pa
	set	dt_saida_local		= LOCALTIMESTAMP
	where	nr_seq_local_destino_pa	= OLD.nr_seq_local_pa
	and	dt_saida_local		is null
	--and	dt_entrada_local		< sysdate
	and	nr_atendimento		= NEW.nr_atendimento;
end if;

if (ie_saida_local_pa_internar_w = 'S') and (OLD.ie_tipo_atendimento <> 1) and (NEW.ie_tipo_atendimento = 1) and (NEW.nr_seq_local_pa is not null) then

	NEW.nr_seq_local_pa := null;

	update	historico_localizacao_pa
	set	dt_saida_local		= LOCALTIMESTAMP
	where	dt_saida_local		is null
	and	dt_entrada_local	< LOCALTIMESTAMP
	and	nr_atendimento		= NEW.nr_atendimento;
end if;

if (OLD.dt_alta is null) and (NEW.dt_alta is not null) and (NEW.nr_seq_local_pa is not null) then

	update	historico_localizacao_pa
	set	dt_saida_local		= LOCALTIMESTAMP
	where	dt_saida_local		is null
	and	dt_entrada_local	< LOCALTIMESTAMP
	and	nr_atendimento		= NEW.nr_atendimento;
end if;

if (OLD.dt_alta is null) and (NEW.dt_alta is not null) then

	CALL gerar_higienizacao_leito(LOCALTIMESTAMP,NEW.nm_usuario,NEW.cd_estabelecimento,'AP',NEW.cd_motivo_alta,NEW.nr_atendimento);
	
	if (coalesce(NEW.ie_paciente_isolado,'N') = 'S') then
		CALL gerar_higienizacao_leito(LOCALTIMESTAMP,NEW.nm_usuario,NEW.cd_estabelecimento,'APPI',NEW.cd_motivo_alta,NEW.nr_atendimento);	
	elsif (coalesce(NEW.ie_paciente_isolado,'N') = 'N') then
		CALL gerar_higienizacao_leito(LOCALTIMESTAMP,NEW.nm_usuario,NEW.cd_estabelecimento,'APPNI',NEW.cd_motivo_alta,NEW.nr_atendimento);		
	end if;
	
	select  max(cd_convenio)
	into STRICT	cd_convenio_w
	from	atend_categoria_convenio
	where	nr_atendimento = NEW.nr_atendimento;

	select	nm_fantasia_estab
	into STRICT	ds_estab_atend_w
	from	estabelecimento
	where	cd_estabelecimento = NEW.cd_estabelecimento;

	open c06;
	loop
	fetch c06 into
		nr_seq_evento_alta_com_pac_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		BEGIN
		CALL gerar_evento_coord_escala(	nr_seq_evento_alta_com_pac_w,
						NEW.nr_atendimento,
						NEW.cd_pessoa_fisica,
						null,
						NEW.nm_usuario,
						null,
						obter_unidade_atendimento(NEW.nr_atendimento,'A','CS'),
						NEW.ds_obs_alta,
						NEW.nr_submotivo_alta,
						nm_medico_resp_w,
						NEW.ie_tipo_atendimento,
						NEW.cd_medico_atendimento,
						NEW.cd_medico_resp,
						NEW.cd_medico_referido,
						'S',
						NEW.cd_motivo_alta,
						obter_desc_procedencia(NEW.cd_procedencia),
						ds_estab_atend_w);
		end;
	end loop;
	close c06;

	select	count(*)
	into STRICT 	qt_limpeza_urgente_w
	from   	sl_unid_atend
	where  	nr_seq_unidade = obter_unidade_atendimento(NEW.nr_atendimento,'A','NR')
	and    	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prevista) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP)
	and    	ie_status_serv = 'P'
	and	ie_evento <> 'LL'
	and    	exists (SELECT	1
		        from	higienizacao_setor_regra
			where   cd_setor_atendimento = (obter_unidade_atendimento(NEW.nr_atendimento,'A','CS')));

	if (qt_limpeza_urgente_w > 0) then

		open c08;
		loop
		fetch c08 into
			nr_seq_evento_limp_urg_w;
		EXIT WHEN NOT FOUND; /* apply on c08 */
			BEGIN
			CALL gerar_evento_coord_escala(nr_seq_evento_limp_urg_w,NEW.nr_atendimento,null,null,NEW.nm_usuario,null,obter_unidade_atendimento(NEW.nr_atendimento,'A','CS'),NEW.ds_obs_alta, NEW.nr_submotivo_alta,nm_medico_resp_w,NEW.ie_tipo_atendimento);
			end;
		end loop;
		close c08;

	end if;

	select	coalesce(max(cd_setor_atendimento),0),
		coalesce(max(cd_unidade_basica),''),
		coalesce(max(cd_unidade_compl),'')
	into STRICT	cd_setor_atendimento_w,
		cd_unidade_basica_w,
		cd_unidade_compl_w
	from	unidade_atendimento
	where	nr_atendimento = NEW.nr_atendimento;

	select	count(*)
	into STRICT	qt_registro_w
	from	unidade_atend_prev;

	if (qt_registro_w > 0) then
		BEGIN
		if (OLD.ie_paciente_isolado = 'S') then
			CALL man_gerar_os_planej_evento(cd_setor_atendimento_w, cd_unidade_basica_w, cd_unidade_compl_w, 'A');
		else
			CALL man_gerar_os_planej_evento(cd_setor_atendimento_w, cd_unidade_basica_w, cd_unidade_compl_w, 'P');
		end if;
		end;
	end if;
end if;

/* Dalcastagne para verificar se medico tem permissao para assumir paciente OS 42570 - Sirio */

select	obter_se_assumir_paciente(NEW.cd_medico_resp, OLD.cd_estabelecimento)
into STRICT	ie_permissao_aten_w
;

if (ie_permissao_aten_w = 'N') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186370);
	--'Medico nao possui autorizacao para assumir o paciente!');
end if;

/* Oraci - OS49064 26/01/2007  Retirado por Dalcastagne em 14/06/2007 - Adicionado tratamento na procedure gerar_estornar_alta
if	(nvl(obter_valor_param_usuario(3111, 38, obter_perfil_ativo, :new.nm_usuario, :new.cd_estabelecimento),'S') = 'N') and
	(:old.dt_alta is null) and
	(:new.dt_alta is not null) then

	select	obter_cid_atendimento(:new.nr_atendimento,'P')
	into	ie_se_cid_w
	from	dual;

	if	(ie_se_cid_w is null) then
		 (-20011, 'Obrigatorio informar o CID. Nao sera realizada a alta do paciente. Parametro 38 - Movimentacao de Pacientes.');	end if;
end if;
*/
/* Dalcastagne em 18/05/2007 */

if (OLD.dt_saida_real is null) and (NEW.dt_saida_real is not null) then
	CALL gerar_higienizacao_leito(LOCALTIMESTAMP,NEW.nm_usuario,NEW.cd_estabelecimento,'AR',NEW.cd_motivo_alta,NEW.nr_atendimento);

	select	count(*)
	into STRICT 	qt_servico_sem_pac_w
	from   	sl_unid_atend
	where  	nr_seq_unidade = obter_unidade_atendimento(NEW.nr_atendimento,'A','NR')
	and    	ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prevista) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP)
	and    	ie_status_serv = 'P'
	and	ie_evento <> 'LL'
	and    	not exists (SELECT	1
		            from	higienizacao_setor_regra
			    where   	cd_setor_atendimento = (obter_unidade_atendimento(NEW.nr_atendimento,'A','CS')));

	if (qt_servico_sem_pac_w > 0) then
		open c07;
		loop
		fetch c07 into
			nr_seq_evento_alta_sem_pac_w;
		EXIT WHEN NOT FOUND; /* apply on c07 */
			BEGIN
			CALL gerar_evento_coord_escala(nr_seq_evento_alta_sem_pac_w,NEW.nr_atendimento,null,null,NEW.nm_usuario,null,obter_unidade_atendimento(NEW.nr_atendimento,'A','CS'),NEW.ds_obs_alta, NEW.nr_submotivo_alta,nm_medico_resp_w,NEW.ie_tipo_atendimento);
			end;
		end loop;
		close c07;
	end if;

	/* Almir em 18/02/2008 OS81352 */

	if (coalesce(obter_valor_param_usuario(-1009, 6, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento),'N') = 'S') then
		update	atendimento_visita
		set	dt_saida 	= LOCALTIMESTAMP,
			dt_atualizacao	= LOCALTIMESTAMP,
			nm_usuario	= NEW.nm_usuario
		where	nr_atendimento	= NEW.nr_atendimento
		and	dt_saida is null;
	end if;
	if (coalesce(obter_valor_param_usuario(3111, 139, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento),'N') = 'S') then
		CALL informatec_cinout_leitos('COUT',NEW.nr_atendimento);
	end if;
end if;

if (NEW.cd_medico_resp <> OLD.cd_medico_resp or NEW.ie_tipo_atendimento <> OLD.ie_tipo_atendimento) then
	/* Rafael em 3/3/8 OS82466 */

	ie_corpo_clinico_w := obter_se_corpo_clinico(NEW.cd_medico_resp);
	if (ie_corpo_clinico_w = 'N') and (NEW.ie_tipo_atendimento = 1) then
		ie_pf_credenciada_w := consistir_credenciamento_pf(coalesce(NEW.cd_estabelecimento,0), coalesce(obter_especialidade_medico(NEW.cd_medico_resp,'C'),0), NEW.cd_pessoa_fisica, coalesce(NEW.dt_alta,LOCALTIMESTAMP), NEW.cd_medico_resp, NEW.nr_atendimento, NEW.nr_atendimento_mae, ie_pf_credenciada_w);
		if (ie_pf_credenciada_w = 'N') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186386,'CD_MEDICO_RESP_P='||substr(obter_nome_pf(NEW.cd_medico_resp),1,60));
			-- 'O medico ' || SUBSTR(obter_nome_pf(:NEW.cd_medico_resp),1,60) || 'nao esta credenciado a realizar este atendimento.#@#@');
		end if;
	else
		ie_pf_credenciada_w	:= 'S';
		if (obter_valor_param_usuario(916, 265, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento) = 'S') then
			ie_pf_credenciada_w := consistir_credenciamento_pf(coalesce(NEW.cd_estabelecimento,0), coalesce(obter_especialidade_medico(NEW.cd_medico_resp,'C'),0), NEW.cd_pessoa_fisica, coalesce(NEW.dt_alta,LOCALTIMESTAMP), NEW.cd_medico_resp, NEW.nr_atendimento, NEW.nr_atendimento_mae, ie_pf_credenciada_w);
		/*	if	(ie_pf_credenciada_w = 'N') then
				 (-20011,'O medico ' || substr(obter_nome_pf(:new.cd_medico_resp),1,60) || ' nao esta credenciado a realizar este atendimento.#@#@');
			end if;*/
		end if;
	end if;
end if;

/* Fim Rafael em 3/3/8 OS82466 */

/* Oraci em 10/09/2007 OS68160 */

select	count(*)
into STRICT	qt_regra_medico_atend_w
from	regra_medico_atend
where	cd_estabelecimento	= NEW.cd_estabelecimento
and	ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	ie_corpo_clinico = 'S'
and	obter_se_corpo_clinico(NEW.cd_medico_resp) = 'N';

select	count(*)
into STRICT	qt_regra_medico_atend_assist_w
from	regra_medico_atend
where	cd_estabelecimento	= NEW.cd_estabelecimento
and	ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	ie_corpo_assistencial = 'S'
and	obter_se_corpo_assist(NEW.cd_medico_resp) = 'N';


select	count(*)
into STRICT	qt_regra_medico_atend_categ_w
from	regra_medico_atend a,
	regra_medico_atend_categ b
where	a.nr_sequencia	= b.nr_seq_regra
and	a.cd_estabelecimento	= NEW.cd_estabelecimento
and	a.ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	b.nr_seq_categoria	= obter_dados_medico(NEW.cd_medico_resp,'CAT');


select	count(*)
into STRICT	qt_regra_medico_atend_categ_ww
from	regra_medico_atend a,
	regra_medico_atend_categ b
where	a.nr_sequencia	= b.nr_seq_regra
and	a.cd_estabelecimento	= NEW.cd_estabelecimento
and	a.ie_tipo_atendimento	= NEW.ie_tipo_atendimento
and	b.nr_seq_categoria	= obter_dados_medico(NEW.cd_medico_resp,'CAT');

if	((qt_regra_medico_atend_w > 0) or (qt_regra_medico_atend_assist_w > 0) or (qt_regra_medico_atend_categ_ww	> 0) or (qt_regra_medico_atend_categ_w	> 0)) and (ie_pf_credenciada_w <> 'S') then /* Rafael em 3/3/8 OS77352 incluida esta linha */
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186387,'NR_ATEND_P='||NEW.nr_atendimento);
	--'Medico nao pode ser responsavel pelo atendimento. Verificar regra medico atendimento, Atend:' || :NEW.nr_atendimento || '. #@#@');
end if;

/* Ivan em 05/10/2007 OS67388 */

ie_trocar_medico_w := obter_param_usuario(916, 195, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_trocar_medico_w);

if	((ie_trocar_medico_w = 'S') and (OLD.cd_medico_atendimento <> NEW.cd_medico_atendimento) and (NEW.cd_medico_resp <> NEW.cd_medico_atendimento)) then
	NEW.cd_medico_resp	:= NEW.cd_medico_atendimento;
end if;

/* Dalcastagne em 18/02/2008 OS 83134 - Beckhauser em 13/07/2012 OS 462029*/

ie_calcula_data_prev_w := obter_param_usuario(916, 953, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_calcula_data_prev_w);

if (ie_calcula_data_prev_w = 'S') and (coalesce(NEW.qt_dias_prev_inter,0) > 0) and (coalesce(OLD.qt_dias_prev_inter,0) <> coalesce(NEW.qt_dias_prev_inter,0)) then
	NEW.dt_previsto_alta	:= NEW.dt_entrada + coalesce(NEW.qt_dias_prev_inter,0);
else
	NEW.dt_previsto_alta	:= NEW.dt_previsto_alta;
end if;

/*Atualizar o status do atendimento no PA */

if (NEW.dt_alta is not null) then
	NEW.ie_status_pa := 'AL';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'AL',NEW.nm_usuario);
end if;

if (NEW.dt_lib_medico is not null) and (OLD.dt_lib_medico is null) then
	NEW.ie_status_pa := 'LM';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'LM',NEW.nm_usuario);
elsif (NEW.dt_medicacao is not null) and (OLD.dt_medicacao is null) then
	NEW.ie_status_pa := 'PA';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'PA',NEW.nm_usuario);
elsif (NEW.dt_fim_consulta is not null) and (OLD.dt_fim_consulta is null) then
	NEW.ie_status_pa := 'FC';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'FC',NEW.nm_usuario);
elsif (NEW.dt_atend_medico is not null) and (OLD.dt_atend_medico is null) then
	NEW.ie_status_pa := 'IC';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'IC',NEW.nm_usuario);
elsif (NEW.dt_chamada_paciente is not null) and (OLD.dt_chamada_paciente is null) then
	NEW.ie_status_pa := 'CP';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'CP',NEW.nm_usuario);
elsif (NEW.dt_fim_triagem is not null) and (OLD.dt_fim_triagem is null) then
	NEW.ie_status_pa := 'FT';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'FT',NEW.nm_usuario);
elsif (NEW.dt_inicio_atendimento is not null) and (OLD.dt_inicio_atendimento is null) then
	NEW.ie_status_pa := 'TR';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'TR',NEW.nm_usuario);
elsif (NEW.dt_reavaliacao_medica is not null) and (OLD.dt_reavaliacao_medica is null) then
	NEW.ie_status_pa := 'RM';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'RM',NEW.nm_usuario);
elsif (NEW.dt_liberacao_enfermagem is not null) and (OLD.dt_liberacao_enfermagem is null) then
	NEW.ie_status_pa := 'LE';
	CALL gravar_atend_status_pa(NEW.nr_atendimento,'LE',NEW.nm_usuario);
end if;

if (NEW.ds_senha is null) and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'pt_BR') then /*Bruna OS104731*/
	NEW.ds_senha := gerar_senha_atendimento(NEW.ie_tipo_atendimento, NEW.nr_seq_regra_funcao, NEW.cd_pessoa_fisica, 'A');
end if;

if (obter_funcao_ativa = 916) and (NEW.ie_tipo_atendimento <> OLD.ie_tipo_atendimento) then

	select 	count(1)
	into STRICT	ds_senha_w
	from	atend_senha_internet
	where	nr_atendimento 	= NEW.nr_atendimento;

	if 	((ds_senha_w is not null) or (ds_senha_w  > 0 ))then
		if (NEW.ds_senha_internet is null)  then
			ds_senha_internet_w	:= gerar_senha_atendimento(NEW.ie_tipo_atendimento, NEW.nr_seq_regra_funcao, NEW.cd_pessoa_fisica, 'I');
			if (ds_senha_internet_w is not null) then
				CALL gerar_senha_internet(NEW.nr_atendimento, null, null, null, ds_senha_internet_w,'');
				NEW.ds_senha_internet	:= ds_senha_internet_w;
			end if;
		end if;
	end if;
end if;

if (NEW.dt_alta is not null) and (OLD.dt_alta is null) then
	/*
	open C03;
	loop
	fetch C03 into
		nr_seq_evento_w;
	exit when C03%notfound;
		begin
		gerar_evento_paciente_trigger(nr_seq_evento_w,:new.nr_atendimento,:new.cd_pessoa_fisica,null,:new.nm_usuario);
		end;
	end loop;
	close C03;
	*/
	CALL gravar_historico_alta(NEW.nr_atendimento,'A',LOCALTIMESTAMP,NEW.cd_motivo_alta,NEW.ds_obs_alta,NEW.nm_usuario,NEW.dt_alta);

elsif (NEW.dt_alta is null) and (OLD.dt_alta is not null) then
	CALL gravar_historico_alta(NEW.nr_atendimento,'E',LOCALTIMESTAMP,null,NEW.ds_obs_alta,NEW.nm_usuario);
end if;

select coalesce(max(ie_historico_conta),'N')
into STRICT	ie_historico_conta_w
from	parametro_faturamento
where	cd_estabelecimento	= NEW.cd_estabelecimento;

select	substr(max(module||' - ' || machine||' - ' || program|| ' - ' || osuser|| ' - ' || terminal),1,255)
into STRICT	ds_module_log_w
from	v$session
where	audsid = (SELECT userenv('sessionid') );

if (ie_historico_conta_w		= 'S') and
	((OLD.dt_fim_conta 	is null	and (NEW.dt_fim_conta 	is not null)) or (NEW.dt_fim_conta is null and OLD.dt_fim_conta is not null) or (NEW.dt_alta is not null) and (OLD.dt_alta is null))  then
	open c04;
	loop
	fetch c04 into
		nr_interno_conta_w,
		cd_convenio_w,
		nr_seq_protocolo_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		BEGIN

		nr_nivel_anterior_w := null;
		nr_nivel_atual_w := null;

		select	nextval('conta_paciente_hist_seq')
		into STRICT	nr_sequencia_w
		;

		select	max(h.nr_sequencia)
		into STRICT nr_sequencia_conta_hist_w
		from	conta_paciente_hist h,
		conta_paciente c
		where	c.nr_interno_conta = nr_interno_conta_w
		and c.nr_interno_conta = h.nr_interno_conta;
		
		if (nr_sequencia_conta_hist_w is not null) then
			select	nr_nivel_atual
			into STRICT	nr_nivel_atual_w
			from	conta_paciente_hist
			where	nr_sequencia = nr_sequencia_conta_hist_w;
		end if;
		
		if (nr_nivel_atual_w = 2) then
			nr_nivel_anterior_w := nr_nivel_atual_w;
			nr_nivel_atual_w := 4;
		else
			nr_nivel_anterior_w := nr_nivel_atual_w;
		end if;	
			ds_call_stack_w	:= substr(dbms_utility.format_call_stack,1,1800);
			
		if (NEW.dt_alta is not null and OLD.dt_alta is null) then

			if (nr_nivel_atual_w is null and OLD.dt_fim_conta is null) then
				nr_nivel_atual_w := 11;
			elsif (nr_nivel_atual_w is null and OLD.dt_fim_conta is not null) then
				nr_nivel_atual_w := 12;
			end if;

			if (nr_nivel_anterior_w is null and OLD.dt_fim_conta is null) then
				nr_nivel_anterior_w := 11;
			elsif (nr_nivel_anterior_w is null and OLD.dt_fim_conta is not null) then
				nr_nivel_anterior_w := 12;
			end if;

			insert into conta_paciente_hist(
				nr_sequencia, dt_atualizacao, nm_usuario,
				vl_conta, nr_seq_protocolo, nr_interno_conta,
				nr_nivel_anterior, nr_nivel_atual, dt_referencia,
				nr_atendimento, cd_convenio, dt_conta_protocolo,
				cd_funcao, ds_module, ds_call_stack, ds_observacao)
			values (
				nr_sequencia_w, LOCALTIMESTAMP, NEW.nm_usuario,
				obter_valor_conta(nr_interno_conta_w,0), nr_seq_protocolo_w, nr_interno_conta_w,
				nr_nivel_anterior_w, nr_nivel_atual_w , ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP),
				NEW.nr_atendimento, cd_convenio_w, null,
				obter_funcao_ativa, ds_module_log_w, ds_call_stack_w, obter_desc_expressao(612652));
		end if;
		
		if ((OLD.dt_fim_conta 	is null	and (NEW.dt_fim_conta 	is not null)) or (NEW.dt_fim_conta is null and OLD.dt_fim_conta is not null)) then
			select	nextval('conta_paciente_hist_seq')
			into STRICT	nr_sequencia_w
			;
			insert into conta_paciente_hist(
				nr_sequencia, dt_atualizacao, nm_usuario,
				vl_conta, nr_seq_protocolo, nr_interno_conta,
				nr_nivel_anterior, nr_nivel_atual, dt_referencia,
				nr_atendimento, cd_convenio, dt_conta_protocolo,
				cd_funcao, ds_module, ds_call_stack)
			values (
				nr_sequencia_w, LOCALTIMESTAMP, NEW.nm_usuario,
				obter_valor_conta(nr_interno_conta_w,0), nr_seq_protocolo_w, nr_interno_conta_w,
				CASE WHEN to_char(NEW.dt_fim_conta,'dd/mm/yyyy') IS NULL THEN 12  ELSE 11 END , CASE WHEN to_char(NEW.dt_fim_conta,'dd/mm/yyyy') IS NULL THEN 11  ELSE 12 END  , ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(LOCALTIMESTAMP),
				NEW.nr_atendimento, cd_convenio_w, null,
				obter_funcao_ativa, ds_module_log_w, ds_call_stack_w);
		end if;
		end;
		end loop;
		close c04;
end if;

if (coalesce(NEW.ie_probabilidade_alta,'XX') <> coalesce(OLD.ie_probabilidade_alta,'XX')) then

	update	atend_paciente_prob_alta
	set 	dt_fim_prev = LOCALTIMESTAMP
	where	nr_atendimento = NEW.nr_atendimento
	and	dt_fim_prev is null;

	if (NEW.ie_probabilidade_alta is not null) then

		insert into atend_paciente_prob_alta(	nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							ie_probabilidade_alta,
							dt_previsao_alta,
							dt_inicio_prev,
							nr_atendimento)
		values (					nextval('atend_paciente_prob_alta_seq'),
							LOCALTIMESTAMP,
							NEW.nm_usuario,
							LOCALTIMESTAMP,
							NEW.nm_usuario,
							NEW.ie_probabilidade_alta,
							NEW.dt_previsto_alta,
							LOCALTIMESTAMP,
							NEW.nr_atendimento);


	end if;

end if;

if (OLD.ie_tipo_atendimento <> NEW.ie_tipo_atendimento) then

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_regra_gerar_pac_vacina_w
	from	regra_gerar_pac_vacina
	where	ie_tipo_atendimento = NEW.ie_tipo_atendimento
	and	coalesce(cd_estabelecimento, NEW.cd_estabelecimento)	= NEW.cd_estabelecimento
	and	coalesce(ie_situacao,'A') = 'A';

	if (ie_regra_gerar_pac_vacina_w = 'S') then
		CALL inserir_pac_lista_espera_atend(NEW.nr_atendimento, NEW.cd_estabelecimento, NEW.cd_pessoa_fisica, NEW.nm_usuario);
	end if;

	/* Matheus OS 182242
	select 	nvl(max(nr_prontuario),0)
	into	nr_prontuario_w
	from	Pessoa_fisica
	where	cd_pessoa_fisica	= :new.cd_pessoa_fisica;*/
	nr_prontuario_w	:= coalesce(obter_prontuario_pf(NEW.cd_estabelecimento, NEW.cd_pessoa_fisica),0);

	if (nr_prontuario_w = 0) then

		ie_gerar_w		:= 'N';
		ie_gera_prontuario_w := obter_param_usuario(916, 533, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_gera_prontuario_w);

		if (ie_gera_prontuario_w = 'S') and (NEW.ie_tipo_atendimento = 1) then
			ie_gerar_w	:= 'S';
		elsif (ie_prontuario_w = 'N') then
			ie_gerar_w	:= 'S';
		elsif (ie_prontuario_w = 'R') then
			open c05;
			loop
			fetch c05 into ie_gerar_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */
			end loop;
			close c05;
		end if;
		if (ie_gerar_w = 'S') then
			/* Matheus OS 182242
			select	prontuario_seq.nextval
			into	nr_prontuario_w
			from	dual;

			update 	pessoa_fisica
			set	nr_prontuario		= nr_prontuario_w
			where	cd_pessoa_fisica	= :new.cd_pessoa_fisica;*/
			nr_prontuario_w := gerar_prontuario_pac(NEW.cd_estabelecimento, NEW.cd_pessoa_fisica, 'N', NEW.nm_usuario, nr_prontuario_w);
		end if;
	end if;

	CALL fleury_limpa_validacao_atend( NEW.nr_atendimento);

	ds_texto_w := 	substr(wheb_mensagem_pck.get_texto(301079) || ' ' || chr(13) || --Alteracao de tipo de atendimento:
			wheb_mensagem_pck.get_texto(301081) || ' ' || NEW.cd_pessoa_fisica || chr(13) || --Pessoa:
			wheb_mensagem_pck.get_texto(301082) || ' ' || NEW.nr_atendimento || chr(13) ||--Atend:
			'Obj: atendimento_paciente_UPDATE' || chr(13) ||
			'CALLSTACK: ' || dbms_utility.format_call_stack || chr(13) ||
			wheb_mensagem_pck.get_texto(301083) || ' ' || OLD.ie_tipo_atendimento || chr(13) ||--Tipo atend. ant.
			wheb_mensagem_pck.get_texto(301084) || ' ' || NEW.ie_tipo_atendimento,1,2000);--Tipo atend. novo.
	BEGIN
	insert into log_atendimento(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		nr_atendimento,
		ds_log)
	values (LOCALTIMESTAMP,
		NEW.nm_usuario,
		5,
		NEW.nr_atendimento,
		ds_texto_w);
	exception
	when others then
		null;
	end;

	if (OLD.ie_tipo_atendimento is not null) then
		CALL gerar_regra_prontuario_gestao(NEW.ie_tipo_atendimento, NEW.cd_estabelecimento, NEW.nr_atendimento, NEW.cd_pessoa_fisica, NEW.nm_usuario, null, null, null, NEW.ie_clinica, null, NEW.ie_tipo_atendimento, null);
	end if;


	/*ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || :new.cd_pessoa_fisica || ds_sep_bv_w ||
						'nr_atendimento='   || :new.nr_atendimento   || ds_sep_bv_w ||
						'nr_seq_interno='   || null  || ds_sep_bv_w ||
						'nr_prescricao='    || null || ds_sep_bv_w ||
						'nr_seq_presc='	    || null  || ds_sep_bv_w ;

	gravar_agend_integracao(693, ds_param_integ_hl7_w);   */
end if;

cd_funcao_ativa_w := obter_funcao_ativa;
if	((coalesce(cd_funcao_ativa_w, 0) <> 0) and
	obter_se_perm_pf_classif(cd_funcao_ativa_w,0,NEW.cd_pessoa_fisica,LOCALTIMESTAMP)	= 'N')  and (NEW.dt_alta is null) and (OLD.dt_alta is null) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186374);
	--'Esse paciente possui alguma classificacao nao permitida para essa funcao. #@#@'
end if;
BEGIN
if (NEW.nr_seq_triagem	<> OLD.nr_seq_triagem) and (NEW.nr_seq_triagem_old is null) and (obter_se_medico(obter_dados_usuario_opcao(wheb_usuario_pck.get_nm_usuario,'C'),'M')	= 'S') then
	NEW.nr_seq_triagem_old	:= OLD.nr_seq_triagem;
end if;
exception
when others then
	null;
end;
BEGIN
if (coalesce(NEW.nr_seq_triagem,0)	<> coalesce(OLD.nr_seq_triagem,0)) then
	BEGIN
	insert into log_prioridade_atend(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_atendimento,
						nr_seq_triagem,
						nr_seq_triagem_old,
						ds_observacao,
                        ds_stack)
		values (	nextval('log_prioridade_atend_seq'),
						LOCALTIMESTAMP,
						coalesce(wheb_usuario_pck.get_nm_usuario, NEW.nm_usuario),
						LOCALTIMESTAMP,
						coalesce(wheb_usuario_pck.get_nm_usuario, NEW.nm_usuario),
						NEW.nr_atendimento,
						NEW.nr_seq_triagem,
						OLD.nr_seq_triagem,
						substr(wheb_assist_pck.get_obs_log_urgencia_atend,1,255),
                        substr( wheb_mensagem_pck.get_texto(795196) || ': ' || obter_funcao_ativa || chr(10) || chr(13) ||
                                wheb_mensagem_pck.get_texto(795195) || ': ' || obter_perfil_ativo || chr(10) || chr(13) ||
                                dbms_utility.format_call_stack,1,2000)
                        );

	CALL wheb_assist_pck.set_obs_log_urgencia_atend(null);
	end;
end if;

exception
when others then
	null;
end;

if (coalesce(NEW.nr_seq_triagem,0)	<> coalesce(OLD.nr_seq_triagem,0)) then
	NEW.dt_classif_risco := LOCALTIMESTAMP;
end if;

BEGIN
if	(NEW.dt_alta is not null AND OLD.dt_alta is null) or
	(NEW.dt_alta_medico is not null AND OLD.dt_alta_medico is null) or
	(NEW.dt_previsto_alta is not null AND OLD.dt_previsto_alta is null) or
	(OLD.dt_alta is not null AND NEW.dt_alta is null) or
	(OLD.dt_alta_medico is not null AND NEW.dt_alta_medico is null) or
	(OLD.dt_previsto_alta is not null AND NEW.dt_previsto_alta is null) or (OLD.dt_alta <> NEW.dt_alta) or (OLD.dt_alta_medico <> NEW.dt_alta_medico) or (OLD.dt_previsto_alta <> NEW.dt_previsto_alta) then
	CALL eis_fechamento_part_alert_sign(NEW.nm_usuario);
end if;
exception
when others then
	null;
end;

if (ie_altera_tipo_atend_protoc_w = 'N') and (coalesce(NEW.ie_tipo_atendimento, 0) <> coalesce(OLD.ie_tipo_atendimento, 0)) then

	select	count(*)
	into STRICT	qt_protocolo_atend_w
	from	protocolo_documento a,
		protocolo_doc_item b
	where	b.nr_sequencia = a.nr_sequencia
	and	b.nr_documento = NEW.nr_atendimento
	and	a.ie_tipo_protocolo in (2, 5);

	if (qt_protocolo_atend_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(195752);
	end if;

end if;

BEGIN
if	((OLD.dt_inicio_atendimento	is null  and
	NEW.dt_inicio_atendimento is not null) or (OLD.dt_atend_medico is null and
	NEW.dt_atend_medico is not null)) and (NEW.ie_chamado = 'X')then
	NEW.ie_chamado	:= 'S';
end if;
exception
when others then
	null;
end;


BEGIN
if (OLD.dt_fim_triagem is null and
	NEW.dt_fim_triagem is not null) then
	NEW.dt_chamada_paciente	:= null;
end if;
exception
when others then
	null;
end;


select	coalesce(max(ie_integracao_dynamics),'N')
into STRICT	ie_integracao_dynamics_w
from	parametro_atendimento
where	cd_estabelecimento = NEW.cd_estabelecimento;

if (NEW.nr_submotivo_alta is not null) then
	select	max(nr_sequencia)
	into STRICT	nr_seq_alta_hist_w
	from	atend_alta_hist
	where	nr_atendimento = NEW.nr_atendimento
	and		'A' = ie_alta_estorno;

	if (coalesce(nr_seq_alta_hist_w,0) > 0) then

		update	atend_alta_hist
		set		nr_submotivo_alta = NEW.nr_submotivo_alta
		where	nr_sequencia = nr_seq_alta_hist_w;
	end if;
end if;

-- Atualiza tabela de integracao CRM_ATENDIMENTOS
if (ie_integracao_dynamics_w = 'S') then
	select	count(*)
	into STRICT	qt_crm_atendimentos_w
	from	crm_atendimentos
	where	nr_atendimento = NEW.nr_atendimento;

	if (qt_crm_atendimentos_w > 0) then
		if (OLD.ie_tipo_atendimento <> NEW.ie_tipo_atendimento) then
			update	crm_atendimentos
			set	ie_tipo_atendimento 	= NEW.ie_tipo_atendimento,
				ds_tipo_atendimento 	= substr(obter_nome_tipo_atend(NEW.ie_tipo_atendimento),1,255),
				ie_status		= 2,
				dt_atualizacao		= LOCALTIMESTAMP,
				nm_usuario		= NEW.nm_usuario
			where	nr_atendimento 		= NEW.nr_atendimento;
		end if;
		if (OLD.dt_entrada <> NEW.dt_entrada) then
			update	crm_atendimentos
			set	dt_entrada 	= to_char(NEW.dt_entrada,'yyyy-mm-dd hh24:mi:ss'),
				ie_status	= 2,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_atendimento	= NEW.nr_atendimento;
		end if;
		if (OLD.cd_medico_resp <> NEW.cd_medico_resp) then
			update	crm_atendimentos
			set	cd_medico_resp 	= NEW.cd_medico_resp,
				nm_medico_resp 	= substr(obter_nome_medico(NEW.cd_medico_resp,'N'),1,60),
				ie_status	= 2,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_atendimento 	= NEW.nr_atendimento;
		end if;
		if	(OLD.cd_motivo_alta is not null AND NEW.cd_motivo_alta is null) or
			(OLD.dt_alta is not null AND NEW.dt_alta is null) then
			update	crm_atendimentos
			set	dt_alta		= to_char(NEW.dt_alta,'yyyy-mm-dd hh24:mi:ss'),
				ds_motivo_alta	= substr(obter_desc_motivo_alta(NEW.cd_motivo_alta),1,60),
				cd_motivo_alta	= NEW.cd_motivo_alta,
				ie_status	= 2,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_atendimento 	= NEW.nr_atendimento;
		end if;
		if (OLD.dt_alta is null) and (NEW.dt_alta is not null) then
			update	crm_atendimentos
			set	dt_alta		= to_char(NEW.dt_alta,'yyyy-mm-dd hh24:mi:ss'),
				ds_motivo_alta	= substr(obter_desc_motivo_alta(NEW.cd_motivo_alta),1,60),
				cd_motivo_alta	= NEW.cd_motivo_alta,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_atendimento 	= NEW.nr_atendimento;
		end if;
		if	(OLD.dt_cancelamento is null AND NEW.dt_cancelamento is not null) or
			(OLD.dt_cancelamento is not null AND NEW.dt_cancelamento is null)	then
			update	crm_atendimentos
			set	ie_status	= CASE WHEN NEW.dt_cancelamento = NULL THEN 2  ELSE 3 END ,
				dt_atualizacao	= LOCALTIMESTAMP,
				nm_usuario	= NEW.nm_usuario
			where	nr_atendimento 	= NEW.nr_atendimento;
		end if;
	end if;
end if;

if	(OLD.dt_cancelamento is null AND NEW.dt_cancelamento is not null) then
	select 	coalesce(max('S'),'N')
	into STRICT 	ie_trat_onc_w
	from	paciente_atendimento a
	where 	a.nr_atendimento = NEW.nr_atendimento;

	if (ie_trat_onc_w = 'S') then
		update  paciente_atendimento
		set 	nr_atendimento  = NULL
		where 	nr_atendimento = NEW.nr_atendimento;
	end if;
end if;


if (coalesce(NEW.ie_paciente_isolado, 'N') <> coalesce(OLD.ie_paciente_isolado, 'N')) then

	ds_origem_w := substr(dbms_utility.format_call_stack,1,1800);
	ds_isolamento_log_w := substr(wheb_mensagem_pck.get_texto(301091)|| ' ' || chr(13) ||--Log de isolamento e liberacao de isolamento
					wheb_mensagem_pck.get_texto(301085,'DS_ORIGEM='|| ds_origem_w ||
								';NR_ATENDIMENTO='|| NEW.nr_atendimento ||
								';NM_USUARIO='|| NEW.nm_usuario ||
								';CD_FUNCAO='|| substr(obter_desc_funcao(obter_funcao_ativa),1,30)),1,2000);

	insert into log_atendimento(
		dt_atualizacao,
		nm_usuario,
		cd_log,
		nr_atendimento,
		ds_log)
		values (LOCALTIMESTAMP,
			 NEW.nm_usuario,
			 6,
			 NEW.nr_atendimento,
			 ds_isolamento_log_w);
end if;

if (coalesce(NEW.nr_seq_pac_senha_fila,0) <> coalesce(OLD.nr_seq_pac_senha_fila,0)) then

	ie_vincular_senha_w := obter_param_usuario(916, 1089, obter_perfil_ativo, NEW.nm_usuario, NEW.cd_estabelecimento, ie_vincular_senha_w);

	if (ie_vincular_senha_w = 'C') then

		insert into senhas_atendimento(
			nr_sequencia,
			nr_seq_pac_senha_fila,
			nr_atendimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec
		) values (	nextval('senhas_atendimento_seq'),
			NEW.nr_seq_pac_senha_fila,
			NEW.nr_atendimento,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario);
	end if;

end if;

if (NEW.ds_obs_alta is not null) and
	((coalesce(NEW.ds_obs_alta, 'N') <> coalesce(OLD.ds_obs_alta, 'N')) or (coalesce(NEW.nr_seq_tipo_obs_alta, 0) <> coalesce(OLD.nr_seq_tipo_obs_alta, 0))) then

	insert into obs_alta_hist(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_atendimento,
			ds_historico,
			dt_historico,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_tipo_obs_alta)
		values (nextval('obs_alta_hist_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.nr_atendimento,
			substr(NEW.ds_obs_alta,1,2000),
			LOCALTIMESTAMP,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.nr_seq_tipo_obs_alta);

end if;

if (OLD.ie_paciente_isolado = 'S') and (NEW.ie_paciente_isolado = 'N') then

	select max(nr_seq_interno)
	into STRICT	nr_seq_unidade_w
	from	unidade_atendimento
	where	nr_atendimento = NEW.nr_atendimento;
	CALL gerar_higienizacao_leito_unid(LOCALTIMESTAMP, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento,'LPI', nr_seq_unidade_w, null);
end if;

/*
if	(:new.dt_alta is not null) and
	(:old.dt_alta is null) then

	incluida na Procedure gerar_estornar_alta
	obter_param_usuario(281,1432,obter_perfil_ativo,:new.nm_usuario,:new.cd_estabelecimento,ie_finaliza_precaucao_w);

	if	(nvl(ie_finaliza_precaucao_w,'N') = 'S') then
		update	atendimento_precaucao
		set	dt_termino = sysdate,
			ds_just_fim_prec = 'Alta do paciente',
			nm_usuario_fim = :new.nm_usuario
		where	nr_atendimento = :new.nr_atendimento
		and	dt_termino is null;
	end if;
end if;  */
if ('00/00/0000 00:00:00' = to_char(NEW.dt_previsto_alta,'dd/mm/yyyy hh24:mi:ss')) then
	NEW.dt_previsto_alta := null;
end if;

if (NEW.dt_alta_medico is not null AND OLD.dt_alta_medico is null) then

    select	max(x.cd_setor_atendimento),
			max(x.cd_unidade_basica),
			max(x.cd_unidade_compl)
	into STRICT    cd_setor_atendimento_w,
            cd_unidade_basica_w,
            cd_unidade_compl_w
	from (SELECT	a.cd_setor_atendimento,
			 a.cd_unidade_basica,
			 a.cd_unidade_compl,
			 row_number() over (order by coalesce(a.dt_saida_unidade, a.dt_entrada_unidade + 9999) desc) nr_controle_linha
			 from 	atend_paciente_unidade a, setor_atendimento c
			 where	a.nr_atendimento 		= NEW.nr_atendimento
			 and	a.cd_setor_atendimento = c.cd_setor_atendimento
			 and	c.CD_CLASSIF_SETOR <> 2) x
	where	x.nr_controle_linha = 1;

    insert into integra_voice_hcs(NR_SEQUENCIA,
        DT_ATUALIZACAO,
        NM_USUARIO,
        DT_ATUALIZACAO_NREC,
        NM_USUARIO_NREC,
        NR_ATENDIMENTO,
        CD_SETOR_ATEND_ANT,
        CD_UNID_BASIC_ANT,
        CD_UNID_COMPL_ANT,
        CD_SETOR_ATENDIMENTO,
        CD_UNIDADE_BASICA,
        CD_UNIDADE_COMPL,
        IE_STATUS_UNIDADE,
        IE_EVENTO,
        DS_MENSAGEM,
        DT_ALTA_MEDICO)
    values (
        nextval('integra_voice_hcs_seq'),
        LOCALTIMESTAMP,
        NEW.nm_usuario,
        LOCALTIMESTAMP,
        NEW.nm_usuario,
        NEW.nr_atendimento,
        null,
        null,
        null,
        cd_setor_atendimento_w,
        cd_unidade_basica_w,
        cd_unidade_compl_w,
        null,
        'AM',
        null,
        NEW.dt_alta_medico);

end if;

if ((NEW.dt_alta_medico is null) and (OLD.dt_alta_medico is not null) and obter_regra_voice_hcs('ES') = 'S') then
	
	
	select	max(x.cd_setor_atendimento),
			max(x.cd_unidade_basica),
			max(x.cd_unidade_compl)
	into STRICT    cd_setor_atendimento_w,
            cd_unidade_basica_w,
            cd_unidade_compl_w
	from (SELECT	a.cd_setor_atendimento,
			 a.cd_unidade_basica,
			 a.cd_unidade_compl,
			 row_number() over (order by coalesce(a.dt_saida_unidade, a.dt_entrada_unidade + 9999) desc) nr_controle_linha
			 from 	atend_paciente_unidade a, setor_atendimento c
			 where	a.nr_atendimento 		= NEW.nr_atendimento
			 and	a.cd_setor_atendimento = c.cd_setor_atendimento
			 and	c.CD_CLASSIF_SETOR <> 2) x
	where	x.nr_controle_linha = 1;
	
	BEGIN
		select	coalesce('S','N')
		into STRICT ie_existe_w
		from integra_voice_hcs
		where nr_atendimento = NEW.nr_atendimento
		and cd_setor_atendimento = cd_setor_atendimento_w
		and cd_unidade_basica = cd_unidade_basica_w
		and cd_unidade_compl = cd_unidade_compl_w
		and DT_ATUALIZACAO = LOCALTIMESTAMP;	
		exception
		when others then
		ie_existe_w := 'N';
		end;			

	if (ie_existe_w = 'N') then

		insert into integra_voice_hcs(NR_SEQUENCIA,
			DT_ATUALIZACAO,
			NM_USUARIO,
			DT_ATUALIZACAO_NREC,
			NM_USUARIO_NREC,
			NR_ATENDIMENTO,
			CD_SETOR_ATEND_ANT,
			CD_UNID_BASIC_ANT,
			CD_UNID_COMPL_ANT,
			CD_SETOR_ATENDIMENTO,
			CD_UNIDADE_BASICA,
			CD_UNIDADE_COMPL,
			IE_STATUS_UNIDADE,
			IE_EVENTO,
			DS_MENSAGEM,
			DT_ALTA_MEDICO)
		values (
			nextval('integra_voice_hcs_seq'),
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			LOCALTIMESTAMP,
			NEW.nm_usuario,
			NEW.nr_atendimento,
			null,
			null,
			null,
			cd_setor_atendimento_w,
			cd_unidade_basica_w,
			cd_unidade_compl_w,
			'ES',
			'RS',
			null,
			null);
		
    end if;
end if;

if	((OLD.dt_alta <> NEW.dt_alta) or (OLD.dt_alta is null and NEW.dt_alta is not null) or (NEW.dt_alta is null and OLD.dt_alta is not null)) then
	 CALL consiste_tipo_visita_atend(nr_atendimento_p => NEW.nr_atendimento,
				     nr_seq_tipo_admissao_fat_p => NEW.nr_seq_tipo_admissao_fat,
				     cd_pessoa_fisica_p => NEW.cd_pessoa_fisica,
				     nr_seq_episodio_p => NEW.nr_seq_episodio,
				     dt_entrada_p => NEW.dt_entrada,
				     dt_alta_p => NEW.dt_alta,
				     ie_alteracao_p => 'D',
				     ie_alt_data_alta_p => 'S');
				
elsif	((OLD.dt_previsto_alta <> NEW.dt_previsto_alta) or (OLD.dt_previsto_alta is null and NEW.dt_previsto_alta is not null) or (NEW.dt_previsto_alta is null and OLD.dt_previsto_alta is not null)) then
	 CALL consiste_tipo_visita_atend(nr_atendimento_p => NEW.nr_atendimento,
				     nr_seq_tipo_admissao_fat_p => NEW.nr_seq_tipo_admissao_fat,
				     cd_pessoa_fisica_p => NEW.cd_pessoa_fisica,
				     nr_seq_episodio_p => NEW.nr_seq_episodio,
				     dt_entrada_p => NEW.dt_entrada,
				     dt_previsto_alta_p => NEW.dt_previsto_alta,
				     ie_alteracao_p => 'D',
				     ie_alt_data_prev_p	=> 'S');
elsif	((NEW.nr_seq_tipo_admissao_fat <> OLD.nr_seq_tipo_admissao_fat) or (NEW.nr_seq_tipo_admissao_fat is not null and OLD.nr_seq_tipo_admissao_fat is null) or
	 (NEW.dt_entrada <> OLD.dt_entrada AND NEW.nr_seq_tipo_admissao_fat is not null)) then
	 CALL consiste_tipo_visita_atend(nr_atendimento_p => NEW.nr_atendimento,
			   cd_pessoa_fisica_p => NEW.cd_pessoa_fisica,
			   nr_seq_tipo_admissao_fat_p => NEW.nr_seq_tipo_admissao_fat,
			   nr_seq_episodio_p => NEW.nr_seq_episodio,
			   dt_entrada_p => NEW.dt_entrada);
	
end if;

IF NEW.dt_cancelamento IS NOT NULL THEN
    UPDATE pessoa_fisica_aux SET nr_primeiro_atend  = NULL WHERE nr_primeiro_atend = NEW.nr_atendimento;
END IF;

BEGIN
  SELECT PFA.IE_MOTIVO_SEM_CPF,
         PFA.IE_CONTROL_EXT
    INTO STRICT IE_MOTIVO_SEM_CPF_W,
         IE_CONTROL_EXT_W
    FROM PESSOA_FISICA_AUX PFA
   WHERE PFA.CD_PESSOA_FISICA = NEW.CD_PESSOA_FISICA  LIMIT 1;

  BEGIN
    SELECT APA.*
      INTO STRICT ATEND_PACIENTE_ADIC_W
      FROM ATEND_PACIENTE_ADIC APA
     WHERE APA.NR_ATENDIMENTO = NEW.NR_ATENDIMENTO;
  EXCEPTION
    WHEN no_data_found THEN
         ATEND_PACIENTE_ADIC_W := NULL;
  END;

  ATEND_PACIENTE_ADIC_W.NR_ATENDIMENTO    := NEW.NR_ATENDIMENTO;
  ATEND_PACIENTE_ADIC_W.IE_MOTIVO_SEM_CPF := IE_MOTIVO_SEM_CPF_W;
  ATEND_PACIENTE_ADIC_W.IE_CONTROLE_EXT   := IE_CONTROL_EXT_W;
  ATEND_PACIENTE_ADIC_W.CD_PESSOA_FISICA  := NEW.CD_PESSOA_FISICA;
  ATEND_PACIENTE_ADIC_W.DT_ATUALIZACAO    := LOCALTIMESTAMP;
  ATEND_PACIENTE_ADIC_W.NM_USUARIO        := NEW.NM_USUARIO;

  IF (ATEND_PACIENTE_ADIC_W.NM_USUARIO_NREC IS NULL) THEN
     ATEND_PACIENTE_ADIC_W.NM_USUARIO_NREC := ATEND_PACIENTE_ADIC_W.NM_USUARIO;
  END IF;

  IF (ATEND_PACIENTE_ADIC_W.DT_ATUALIZACAO_NREC IS NULL) THEN
     ATEND_PACIENTE_ADIC_W.DT_ATUALIZACAO_NREC := ATEND_PACIENTE_ADIC_W.DT_ATUALIZACAO;
  END IF;

  IF (ATEND_PACIENTE_ADIC_W.NR_SEQUENCIA IS NULL) THEN
     SELECT nextval('atend_paciente_adic_seq')
       INTO STRICT ATEND_PACIENTE_ADIC_W.NR_SEQUENCIA
;

     INSERT INTO ATEND_PACIENTE_ADIC
     VALUES (ATEND_PACIENTE_ADIC_W.*);
  ELSE
     UPDATE ATEND_PACIENTE_ADIC APA
        SET ROW = ATEND_PACIENTE_ADIC_W
      WHERE APA.NR_SEQUENCIA = ATEND_PACIENTE_ADIC_W.NR_SEQUENCIA;
  END IF;
EXCEPTION
  WHEN no_data_found THEN
       NULL;
END;

if (NEW.nr_seq_tipo_admissao_fat is not null and NEW.ie_tipo_atendimento is null and coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')) then
	NEW.ie_tipo_atendimento := coalesce(obter_tipo_atend_admissao(NEW.nr_seq_tipo_admissao_fat), NEW.ie_tipo_atendimento);
end if;

if (OLD.ie_tipo_atendimento <> NEW.ie_tipo_atendimento and coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then

  CALL GENERATE_CPOE_SLIP_NUMBER(NEW.nr_atendimento,NEW.ie_tipo_atendimento,NEW.cd_pessoa_fisica,null,null,NEW.nm_usuario);

end if;

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'pt_BR') and (NEW.ds_senha is not null) then
	NEW.ds_senha := null;
end if;

<<final>>

qt_reg_w := 0;

  END;
RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_atendimento_paciente_update() FROM PUBLIC;

CREATE TRIGGER atendimento_paciente_update
	BEFORE UPDATE ON atendimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_atendimento_paciente_update();

