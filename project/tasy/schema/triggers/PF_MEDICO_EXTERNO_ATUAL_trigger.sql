-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pf_medico_externo_atual ON pf_medico_externo CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pf_medico_externo_atual() RETURNS trigger AS $BODY$
declare
qt_reg_w	bigint;
validate_date varchar(10);
dt_end_date_null timestamp;
dt_max_end_date timestamp;
is_both_dates_null varchar(10);
ie_medico_familia_w varchar(1);
ie_existe_medico_familia_w varchar(1);

pragma autonomous_transaction;
BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger	= 'S')  then

  validate_date := 'N';
  if	(((TG_OP = 'INSERT') or (TG_OP = 'UPDATE')) and
	coalesce(gerar_int_padrao.get_executando_recebimento,'N') = 'N') then

    select	count(nr_sequencia)
    into STRICT	qt_reg_w
    from	pf_medico_externo
    where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
    and   cd_medico = NEW.cd_medico
    and  ((dt_inicio_vigencia between NEW.dt_inicio_vigencia and NEW.dt_fim_vigencia)
        or (dt_fim_vigencia between NEW.dt_inicio_vigencia and NEW.dt_fim_vigencia)
        or (NEW.dt_inicio_vigencia between dt_inicio_vigencia and dt_fim_vigencia)
        or (NEW.dt_fim_vigencia between dt_inicio_vigencia and dt_fim_vigencia))
    and	nr_sequencia <> NEW.nr_sequencia;

    if (qt_reg_w = 0) then
      select	count(nr_sequencia)
      into STRICT	qt_reg_w
      from	pf_medico_externo
      where	cd_pessoa_fisica = NEW.cd_pessoa_fisica
      and   cd_medico = NEW.cd_medico
      and 
      ((dt_inicio_vigencia between NEW.dt_inicio_vigencia and NEW.dt_fim_vigencia)
            or (dt_fim_vigencia between NEW.dt_inicio_vigencia and NEW.dt_fim_vigencia)
          or (NEW.dt_inicio_vigencia between dt_inicio_vigencia and dt_fim_vigencia)
            or (NEW.dt_fim_vigencia between dt_inicio_vigencia and dt_fim_vigencia))
      and	nr_sequencia <> NEW.nr_sequencia;
    end if;

    if (qt_reg_w > 0) then
      BEGIN
      CALL wheb_mensagem_pck.exibir_mensagem_abort(1099887);
      end;
    end if;

    select max(dt_inicio_vigencia)
    into STRICT	dt_end_date_null
    from  PF_MEDICO_EXTERNO
    where cd_pessoa_fisica = NEW.cd_pessoa_fisica
    and   cd_medico = NEW.cd_medico
    and   nr_sequencia <> NEW.nr_sequencia
    and   dt_fim_vigencia is null;
    
    select coalesce(max('S'),'N')
    into STRICT	is_both_dates_null
    from  PF_MEDICO_EXTERNO
    where cd_pessoa_fisica = NEW.cd_pessoa_fisica
    and   cd_medico = NEW.cd_medico
    and   nr_sequencia <> NEW.nr_sequencia
    and   dt_fim_vigencia is null
    and   dt_inicio_vigencia is null;

    select max(dt_fim_vigencia)
    into STRICT	dt_max_end_date
    from  PF_MEDICO_EXTERNO
    where cd_pessoa_fisica = NEW.cd_pessoa_fisica
    and   cd_medico = NEW.cd_medico
    and   nr_sequencia <> NEW.nr_sequencia
    and   dt_fim_vigencia is not null
    and   dt_inicio_vigencia is not null;

    if (dt_end_date_null is not null) then
      if (NEW.dt_fim_vigencia is null) then
        BEGIN
          CALL wheb_mensagem_pck.exibir_mensagem_abort(1099887);
        end;
      elsif (dt_end_date_null < NEW.dt_inicio_vigencia) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(1099887);
      end if;
    end if;

    if (dt_end_date_null is not null and NEW.dt_fim_vigencia is null)
      or (dt_end_date_null < NEW.dt_inicio_vigencia) 
      or (NEW.dt_inicio_vigencia < dt_max_end_date and NEW.dt_fim_vigencia is null) 
      or (is_both_dates_null = 'S')then
        BEGIN
          CALL wheb_mensagem_pck.exibir_mensagem_abort(1099887);
        end;
    end if;

    if (NEW.dt_inicio_vigencia > NEW.dt_fim_vigencia) then
      validate_date	:=	'S';
    end if;

    if (validate_date = 'S') then
      BEGIN
      CALL wheb_mensagem_pck.exibir_mensagem_abort(307642);
      end;
    end if;

  end if;

  commit;

end if;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pf_medico_externo_atual() FROM PUBLIC;

CREATE TRIGGER pf_medico_externo_atual
	BEFORE INSERT OR UPDATE ON pf_medico_externo FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pf_medico_externo_atual();

