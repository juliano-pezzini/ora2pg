-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS nut_pac_update ON nut_pac CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_nut_pac_update() RETURNS trigger AS $BODY$
Declare
nr_seq_elemento_w	bigint;
ie_seg_fase_w		varchar(1);
ie_terc_fase_w		varchar(1);
ie_quar_fase_w		varchar(1);
nr_sequencia_w		bigint;
ds_log_w				varchar(4000);
ie_rastr_adep_w	varchar(1);

C01 CURSOR FOR
	SELECT	nr_sequencia,
		ie_seg_fase,
		ie_terc_fase,
		ie_quar_fase
	from 	Nut_Elemento
	where	ie_situacao	= 'A'
	and	ie_gerar_ped	= 'S'
	and	cd_unidade_medida is not null
	Order by nr_seq_apresent, ds_elemento;

BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'S')  then

  ie_rastr_adep_w := obter_rastreabilidade_adep(NEW.nr_prescricao, 'ADM');

  if (ie_rastr_adep_w = 'S') then
    if (coalesce(OLD.nr_prescricao,0) <> coalesce(NEW.nr_prescricao,0)) then
      ds_log_w := ds_log_w || ' nr_prescricao OLD/NEW(' ||coalesce(OLD.nr_prescricao, 0) || '/' || coalesce(NEW.nr_prescricao, 0) || ')';
    end if;
    if (coalesce(OLD.ie_npt_adulta, 'XPTO') <> coalesce(NEW.ie_npt_adulta, 'XPTO')) then
      ds_log_w := ds_log_w || ' ie_npt_adulta OLD/NEW(' ||coalesce(OLD.ie_npt_adulta, 'XPTO') || '/' || coalesce(NEW.ie_npt_adulta, 'XPTO') || ')';
    end if;
      if (coalesce(OLD.ie_status,'XPTO') <> coalesce(NEW.ie_status,'XPTO')) then
      ds_log_w := ds_log_w || ' ie_status OLD/NEW(' ||coalesce(OLD.ie_status, 'XPTO') || '/' || coalesce(NEW.ie_status, 'XPTO') || ')';
    end if;
      if (coalesce(OLD.dt_status, LOCALTIMESTAMP) <> coalesce(NEW.dt_status, LOCALTIMESTAMP)) then
      ds_log_w := ds_log_w || ' dt_status OLD/NEW(' ||to_char(coalesce(OLD.dt_status, LOCALTIMESTAMP), 'dd/MM/yyyy hh24:Mi') || '/' || to_char(coalesce(NEW.dt_status, LOCALTIMESTAMP), 'dd/MM/yyyy hh24:Mi') || ')';
    end if;
      if (coalesce(OLD.dt_suspensao, LOCALTIMESTAMP) <> coalesce(NEW.dt_suspensao, LOCALTIMESTAMP)) then
      ds_log_w := ds_log_w || ' dt_suspensao OLD/NEW(' ||to_char(coalesce(OLD.dt_suspensao, LOCALTIMESTAMP),  'dd/MM/yyyy hh24:Mi') || '/' || to_char(coalesce(NEW.dt_suspensao, LOCALTIMESTAMP),  'dd/MM/yyyy hh24:Mi') || ')';
    end if;
      if (coalesce(OLD.nr_sequencia,0) <> coalesce(NEW.nr_sequencia,0)) then
      ds_log_w := ds_log_w || ' nr_sequencia OLD/NEW(' ||coalesce(OLD.nr_sequencia, 0) || '/' || coalesce(NEW.nr_sequencia, 0) || ')';
    end if;
      if (coalesce(OLD.hr_prim_horario, 'XPTO') <> coalesce(NEW.hr_prim_horario, 'XPTO')) then
      ds_log_w := ds_log_w || ' hr_prim_horario OLD/NEW(' ||coalesce(OLD.hr_prim_horario, 'XPTO') || '/' || coalesce(NEW.hr_prim_horario, 'XPTO') || ')';
    end if;
      if (coalesce(OLD.nr_seq_npt_cpoe,0) <> coalesce(NEW.nr_seq_npt_cpoe,0)) then
      ds_log_w := ds_log_w || ' nr_seq_npt_cpoe OLD/NEW(' ||coalesce(OLD.nr_seq_npt_cpoe, 0) || '/' || coalesce(NEW.nr_seq_npt_cpoe, 0) || ')';
    end if;
      if (coalesce(OLD.nr_seq_protocolo,0) <> coalesce(NEW.nr_seq_protocolo,0)) then
      ds_log_w := ds_log_w || ' nr_seq_protocolo OLD/NEW(' ||coalesce(OLD.nr_seq_protocolo, 0) || '/' || coalesce(NEW.nr_seq_protocolo, 0) || ')';
    end if;
      if (coalesce(OLD.ie_forma, 'XPTO') <> coalesce(NEW.ie_forma, 'XPTO')) then
      ds_log_w := ds_log_w || ' ie_forma OLD/NEW(' ||coalesce(OLD.ie_forma, 'XPTO') || '/' || coalesce(NEW.ie_forma, 'XPTO') || ')';
    end if;
      if (coalesce(OLD.ie_acm, 'XPTO') <> coalesce(NEW.ie_acm, 'XPTO')) then
      ds_log_w := ds_log_w || ' ie_acm OLD/NEW(' ||coalesce(OLD.ie_acm, 'XPTO') || '/' || coalesce(NEW.ie_acm, 'XPTO') || ')';
    end if;

    if (ds_log_w is not null) then
      CALL adep_gerar_log_rastr(substr('NUT_PAC_UPDATE ' || ds_log_w, 1, 4000), 'N');
    end if;
  end if;

  if (NEW.qt_multiplicador is not null) and (NEW.qt_multiplicador <> OLD.qt_multiplicador) then
    BEGIN

    update	nut_pac_elem_mat
    set		qt_volume	= qt_volume * NEW.qt_multiplicador,
        qt_dose		= qt_dose * NEW.qt_multiplicador
    where	nr_seq_nut_pac	= NEW.nr_sequencia
    and		qt_volume is not null;

    end;
  end if;

  if (NEW.qt_fase_npt <> OLD.qt_fase_npt) and (NEW.ie_npt_adulta <> 'S') then
    BEGIN
    open C01;
    loop
    fetch C01 into
      nr_seq_elemento_w,
      ie_seg_fase_w,
      ie_terc_fase_w,
      ie_quar_fase_w;
    EXIT WHEN NOT FOUND; /* apply on C01 */
      BEGIN
      if (NEW.qt_fase_npt = 3) then
        ie_quar_fase_w	:= 'N';
      elsif (NEW.qt_fase_npt = 2) then
        ie_terc_fase_w	:= 'N';
        ie_quar_fase_w	:= 'N';			
      elsif (NEW.qt_fase_npt = 1) then
        ie_terc_fase_w	:= 'N';
        ie_seg_fase_w	:= 'N';
        ie_quar_fase_w	:= 'N';			
      end if;

      update	nut_pac_elemento
      set	ie_seg_fase	= ie_seg_fase_w,
        ie_terc_fase	= ie_terc_fase_w,
        ie_quar_fase	= ie_quar_fase_w
      where	nr_seq_nut_pac	= NEW.nr_sequencia
        and	nr_seq_elemento	= nr_seq_elemento_w;

      end;
    end Loop;
    close C01;
    end;
  end if;

  if (coalesce(NEW.ie_suspenso,'N') <> 'N') then
    CALL Suspender_Medic_Npt(NEW.nr_prescricao, NEW.nr_sequencia, 'NAN', wheb_usuario_pck.get_nm_usuario);

    update	nut_paciente_hor
    set		dt_suspensao		 = LOCALTIMESTAMP,
        nm_usuario_susp		 = NEW.nm_usuario,
        ie_status 			 = 'S'
    where	nr_seq_nut_protocolo = NEW.nr_sequencia			
    and		dt_suspensao   is null
    and		dt_fim_horario is null;
  end if;

  end if;

RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_nut_pac_update() FROM PUBLIC;

CREATE TRIGGER nut_pac_update
	BEFORE UPDATE ON nut_pac FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_nut_pac_update();

