-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS pls_cp_cta_combinada_atual ON pls_cp_cta_combinada CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_pls_cp_cta_combinada_atual() RETURNS trigger AS $BODY$
declare

qt_registro_w	integer;

c01 CURSOR(	nr_seq_cp_combinada_pc	pls_cp_cta_combinada.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_cp_cta_filtro
	where	nr_seq_cp_combinada = nr_seq_cp_combinada_pc;

BEGIN

-- previnir que seja gravada a hora junto na regra.
-- essa situação ocorre quando o usuário seleciona a data no campo via enter
if (NEW.dt_inicio_vigencia is not null) then
	NEW.dt_inicio_vigencia := trunc(NEW.dt_inicio_vigencia);
end if;
if (NEW.dt_fim_vigencia is not null) then
	NEW.dt_fim_vigencia := trunc(NEW.dt_fim_vigencia);
end if;

-- esta trigger foi criada para alimentar os campos de data referencia, isto por questões de performance
-- para que não seja necessário utilizar um or is null nas rotinas que utilizam esta tabela
-- o campo inicial ref é alimentado com o valor informado no campo inicial ou se este for nulo é alimentado
-- com a data zero do oracle 31/12/1899, já o campo fim ref é alimentado com o campo fim ou se o mesmo for nulo
-- é alimentado com a data 31/12/3000 desta forma podemos utilizar um between ou fazer uma comparação com estes campos
-- sem precisar se preocupar se o campo vai estar nulo
NEW.dt_inicio_vigencia_ref := pls_util_pck.obter_dt_vigencia_null( NEW.dt_inicio_vigencia, 'I');
NEW.dt_fim_vigencia_ref := pls_util_pck.obter_dt_vigencia_null( NEW.dt_fim_vigencia, 'F');


-- percorre todos os filtros filhos
for r_c01_w in c01(NEW.nr_sequencia) loop

	case(NEW.ie_tipo_regra)
		when 'P' then -- procedimento
			update 	pls_cp_cta_filtro set
				ie_filtro_participante = 'N',
				ie_filtro_servico = 'N',
				ie_filtro_material = 'N'
			where	nr_sequencia = r_c01_w.nr_sequencia;

		when 'PP' then -- participante do procedimento
			update 	pls_cp_cta_filtro set
				ie_filtro_servico = 'N',
				ie_filtro_material = 'N'
			where	nr_sequencia = r_c01_w.nr_sequencia;

		when 'S' then -- serviço
			update 	pls_cp_cta_filtro set
				ie_filtro_procedimento = 'N',
				ie_filtro_participante = 'N',
				ie_filtro_material = 'N'
			where	nr_sequencia = r_c01_w.nr_sequencia;

		when 'M' then -- material
			update 	pls_cp_cta_filtro set
				ie_filtro_procedimento = 'N',
				ie_filtro_participante = 'N',
				ie_filtro_servico = 'N'
			where	nr_sequencia = r_c01_w.nr_sequencia;
		else
			null;
	end case;
end loop;

RETURN NEW;
end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_pls_cp_cta_combinada_atual() FROM PUBLIC;

CREATE TRIGGER pls_cp_cta_combinada_atual
	BEFORE INSERT OR UPDATE ON pls_cp_cta_combinada FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_pls_cp_cta_combinada_atual();

