-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS procedimento_paciente_insert ON procedimento_paciente CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_procedimento_paciente_insert() RETURNS trigger AS $BODY$
declare

nr_sequencia_pac_medico_w	bigint;
ie_atepacu_ok_w			smallint;
ie_tasylab_w			varchar(1);
nr_doc_conv_w			varchar(20);
cd_estabelecimento_w		integer;
ie_tipo_atendimento_w		smallint;
ie_regra_w			varchar(1);
ds_convenio_w			varchar(255);

ie_tipo_convenio_w		smallint;
cd_setor_w			integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ds_erro_w			varchar(255);
nr_seq_proc_interno_w		bigint;
ie_conta_lab_ext_w		varchar(01);

ie_considera_regra_w 		varchar(1) := 'S';

ie_buscar_conv_cirurg_w		varchar(01)	:= 'N';
cd_conv_cirurgia_w		bigint	:= 0;
cd_setor_atendimento_w		bigint;
ie_gerar_itens_auditoria_w	varchar(01)	:= 'S';
qt_auditoria_periodo_w		bigint;
nm_usuario_audit_w		varchar(15);
ie_lab_patologia_w		varchar(01)	:= 'S';
cd_centro_custo_w		bigint;
ie_centro_custo_inativo_w	varchar(01);
ie_situacao_w			varchar(01);
cd_cbo_w			varchar(6);
cd_doenca_cid_w			varchar(10);
ie_proc_bpa_w			varchar(1);
ie_proc_sus_antigo_w		varchar(1);
ie_status_atend_w       	bigint;
ie_status_baixa_lab_w		bigint;
ie_bloqueia_medico_estab_w	varchar(10);
qt_registro_w			bigint;
nr_seq_regra_w			bigint;
ie_doc_executor_w		varchar(10);
cd_procedimento_tuss_w		bigint;
ie_origem_proc_tuss_w		bigint;
ie_tipo_financiamento_w		varchar(04);
ie_complexidade_w		varchar(2);
dt_entrada_w			timestamp;
cd_pessoa_atend_w		varchar(10);
ie_consiste_setor_audit_w	varchar(1);
ie_consiste_dt_conta_w		varchar(1);
ie_video_w			varchar(1);
ie_atualiza_cbo_medico_w	varchar(15);
qt_regra_tipo_fatura_w		bigint;
nr_seq_tipo_fatura_w		bigint;

cd_convenio_w			integer;
ie_convenio_conta_w		varchar(1);
ds_retorno_fpo_w		varchar(255) := 'X';
ie_consiste_fpo_w		varchar(15) := 'N';
dt_referencia_w			timestamp;
cd_empresa_w			smallint;
qt_erro_w			bigint;

cd_area_proced_w		bigint;
cd_espec_proced_w		bigint;
cd_grupo_proced_w		bigint;
qt_regra_proced_exec_lab_w	bigint;
cd_convenio_ww			integer;
nr_seq_proc_interno_aux_w	bigint;
cd_material_exame_w		varchar(20);
dt_geracao_resumo_w		timestamp;
ie_gerar_cid_regra_w		varchar(1);
qt_atendimento_fechado_w	bigint;
nr_seq_servico_w		bigint;
qt_reg_apac_w			bigint;
ds_call_stack_w			varchar(2000);
qt_proc_bpa_apac_w		bigint;
cd_plano_convenio_w		varchar(10);
ie_atual_cid_w			varchar(1) := 'N';
ie_ajusta_exec_consulta_bpa_w	varchar(15) := 'N';
cd_procedencia_w		integer;
cd_tipo_procedimento_w		smallint;
ds_module_log_w			varchar(255);
nr_seq_case_w			episodio_paciente.nr_sequencia%type;
ie_clinica_w			atendimento_paciente.ie_clinica%type;
cd_perfil_w			proc_pac_log.cd_perfil%type;
qt_exist_rule_w			bigint;
ie_trat_conta_rn_w		atendimento_paciente.ie_trat_conta_rn%type;
qt_atendimento_fechado_mae_w	bigint;
nr_atendimento_mae_w		atendimento_paciente.nr_atendimento%type;
nr_seq_complemento_w 	solicitacao_exame_compl.nr_sequencia%type;
nr_agenda_compl_w 		prescr_medica.nr_seq_agenda%type;
ie_charge_coseguro_w prescr_procedimento_compl.ie_charge_coseguro%TYPE;
BEGIN
  BEGIN

if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
	goto final;
end if;

if (NEW.ie_origem_proced in ('11','15')) then --Somente 11-OPS, 15-DRG interfere na DRG
	CALL INATIVAR_DRG_EPISODIO_PACIENTE(NEW.nr_atendimento, NEW.cd_procedimento, 'PROCEDIMENTO_PACIENTE', NEW.nm_usuario, 'TPP');
end if;

select	max(cd_estabelecimento),
	max(ie_tipo_atendimento),
	max(dt_entrada),
	max(cd_pessoa_fisica),
	max(obter_plano_conv_atend(nr_atendimento)),
	max(coalesce(cd_procedencia,0)),
	max(coalesce(ie_clinica, 0)),
	max(ie_trat_conta_rn),
	max(nr_atendimento_mae)
into STRICT	cd_estabelecimento_w,
	ie_tipo_atendimento_w,
	dt_entrada_w,
	cd_pessoa_atend_w,
	cd_plano_convenio_w,
	cd_procedencia_w,
	ie_clinica_w,
	ie_trat_conta_rn_w,
	nr_atendimento_mae_w
from	atendimento_paciente
where	nr_atendimento	= NEW.nr_atendimento;

if (NEW.cd_funcao = 942) then
	BEGIN
	ie_considera_regra_w := coalesce(obter_valor_param_usuario(942, 405, obter_perfil_ativo, NEW.nm_usuario, 0),'S');
	exception
	when others then
	ie_considera_regra_w	:= 'S';
	end;
end if;

select	coalesce(max(ie_centro_custo_inativo),'N'),
	coalesce(max(ie_proc_sus_antigo),'N'),
	coalesce(max(ie_consiste_fpo_execucao),'N')
into STRICT	ie_centro_custo_inativo_w,
	ie_proc_sus_antigo_w,
	ie_consiste_fpo_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_proc_sus_antigo_w = 'S') and (NEW.ie_origem_proced in (2,3)) then
	BEGIN
	CALL wheb_mensagem_pck.exibir_mensagem_abort(180535);
	end;
end if;

ie_buscar_conv_cirurg_w	:= 'N';

BEGIN
ie_convenio_conta_w := coalesce(obter_valor_param_usuario(67, 464, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
exception
when others then
	ie_convenio_conta_w	:= 'N';
end;

If (NEW.nr_atendimento is not null) then
	if (ie_trat_conta_rn_w is not null) then
		select	count(*)
		into STRICT	qt_atendimento_fechado_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento
		and	dt_fim_conta is not null;
		
		If (qt_atendimento_fechado_w > 0) then
			
			select	count(*)
			into STRICT	qt_atendimento_fechado_mae_w
			from	atendimento_paciente
			where	nr_atendimento = nr_atendimento_mae_w
			and	dt_fim_conta is not null;

			If (qt_atendimento_fechado_mae_w > 0) then
				--Nao e possivel executar procedimentos para um atendimento fechado!

				CALL Wheb_mensagem_pck.exibir_mensagem_abort(205010, 'NR_ATENDIMENTO='||NEW.nr_atendimento);
			End if;
		end if;	
	else
		select	count(*)
		into STRICT	qt_atendimento_fechado_w
		from	atendimento_paciente
		where	nr_atendimento = NEW.nr_atendimento
		and	dt_fim_conta is not null;

		If (qt_atendimento_fechado_w > 0) then
			--Nao e possivel executar procedimentos para um atendimento fechado!

			CALL Wheb_mensagem_pck.exibir_mensagem_abort(205010, 'NR_ATENDIMENTO='||NEW.nr_atendimento);
		End if;	
	end if;	
End if;

BEGIN
select	coalesce(max(cd_convenio),0)
into STRICT	cd_conv_cirurgia_w
from	cirurgia
where	nr_cirurgia		= NEW.nr_cirurgia
and	ie_buscar_conv_cirurg_w	= 'S';
exception
when others then
	cd_conv_cirurgia_w	:= 0;
end;

select	max(cd_setor_atendimento)
into STRICT	cd_setor_atendimento_w
from	atend_paciente_unidade
where	nr_seq_interno	= NEW.nr_seq_atepacu;
/*Corrigir o problema de estar com o Setor de uma passagme diferente*/


if (cd_setor_atendimento_w	is not null) and (cd_setor_atendimento_w		<> NEW.cd_setor_atendimento) then
	NEW.cd_setor_atendimento	:= cd_setor_atendimento_w;
end if;

BEGIN
ie_gerar_itens_auditoria_w := coalesce(obter_valor_param_usuario(67, 139, obter_perfil_ativo, NEW.nm_usuario, 0),'S');
exception
when others then
	ie_gerar_itens_auditoria_w	:= 'S';
end;

BEGIN
ie_consiste_setor_audit_w := coalesce(obter_valor_param_usuario(67, 365, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
exception
when others then
	ie_consiste_setor_audit_w	:= 'N';
end;

BEGIN
ie_consiste_dt_conta_w := coalesce(obter_valor_param_usuario(67, 460, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
exception
when others then
	ie_consiste_dt_conta_w	:= 'N';
end;

if (ie_gerar_itens_auditoria_w	<> 'S') then
	BEGIN

	if (ie_gerar_itens_auditoria_w = 'N') then

		--Nao permite incluir no periodo Auditado (Somente p/ auditoria liberada)

		select	/*+ INDEX (A AUDCOPA_ATEPACI_FK_I) */
			count(*),
			coalesce(max(a.nm_usuario), NEW.nm_usuario)
		into STRICT	qt_auditoria_periodo_w,
			nm_usuario_audit_w
		from	auditoria_conta_paciente a,
			conta_paciente b
		where	a.nr_interno_conta	= b.nr_interno_conta
		and	a.nr_atendimento	= NEW.nr_atendimento
		and	coalesce(NEW.nr_seq_proc_est,0) = 0
		and 	dt_liberacao is not null
		and	b.ie_status_acerto	= 1
		and 	(((coalesce(a.cd_setor_atendimento, coalesce(NEW.cd_setor_atendimento,0)) = coalesce(NEW.cd_setor_atendimento,0)) and (ie_consiste_setor_audit_w = 'S')) or (ie_consiste_setor_audit_w = 'N'))
		and 	ie_gerar_itens_auditoria_w = 'N'
		and	(((NEW.dt_procedimento between a.dt_periodo_inicial and a.dt_periodo_final) and (coalesce(ie_consiste_dt_conta_w,'N') = 'N')) or
			 (((NEW.dt_procedimento between a.dt_periodo_inicial and a.dt_periodo_final) or (NEW.dt_conta between a.dt_periodo_inicial and a.dt_periodo_final)) and (coalesce(ie_consiste_dt_conta_w,'N') = 'S')));

	elsif (ie_gerar_itens_auditoria_w = 'E') then

		--Nao permite incluir nos periodos Auditado e "Em auditoria" (Auditoria liberada e nao liberada)

		select	/*+ INDEX (A AUDCOPA_ATEPACI_FK_I) */
			count(*),
			coalesce(max(a.nm_usuario), NEW.nm_usuario)
		into STRICT	qt_auditoria_periodo_w,
			nm_usuario_audit_w
		from	auditoria_conta_paciente a,
			conta_paciente b
		where	a.nr_interno_conta	= b.nr_interno_conta
		and	a.nr_atendimento	= NEW.nr_atendimento
		and	coalesce(NEW.nr_seq_proc_est,0) = 0
		and	b.ie_status_acerto	= 1
		and 	(((coalesce(a.cd_setor_atendimento, coalesce(NEW.cd_setor_atendimento,0)) = coalesce(NEW.cd_setor_atendimento,0)) and (ie_consiste_setor_audit_w = 'S')) or (ie_consiste_setor_audit_w = 'N'))
		and 	ie_gerar_itens_auditoria_w = 'E'
		and	(((NEW.dt_procedimento between a.dt_periodo_inicial and a.dt_periodo_final) and (coalesce(ie_consiste_dt_conta_w,'N') = 'N')) or
			 (((NEW.dt_procedimento between a.dt_periodo_inicial and a.dt_periodo_final) or (NEW.dt_conta between a.dt_periodo_inicial and a.dt_periodo_final)) and (coalesce(ie_consiste_dt_conta_w,'N') = 'S')));

	end if;

	if (qt_auditoria_periodo_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180545,'CD_PROCEDIMENTO_P='||NEW.cd_procedimento||';NR_ATENDIMENTO_P='||NEW.nr_atendimento);
	elsif (nm_usuario_audit_w <> NEW.nm_usuario) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180550);
	end if;

	end;
end if;

if (cd_conv_cirurgia_w <> 0) and (ie_buscar_conv_cirurg_w = 'S') then
	NEW.cd_convenio	:= cd_conv_cirurgia_w;
end if;

select	coalesce(max(ie_conta_lab_ext),'N')
into STRICT	ie_conta_lab_ext_w
from	lab_parametro
where	cd_estabelecimento	= cd_estabelecimento_w;

if (NEW.cd_medico_executor is not null) and (NEW.cd_convenio is not null) then

	/* Inicio alteracao OS 251278 21/09/2010 */


	cd_convenio_w:=  NEW.cd_convenio;

	if (ie_convenio_conta_w = 'S') and (obter_funcao_ativa = 67) and (NEW.nr_interno_conta is not null) then
		BEGIN
		select 	coalesce(max(cd_convenio_parametro), NEW.cd_convenio)
		into STRICT	cd_convenio_w
		from 	conta_paciente
		where 	nr_interno_conta = NEW.nr_interno_conta;
		exception
			when others then
			cd_convenio_w:= NEW.cd_convenio;
		end;
	end if;
	/* Fim alteracao OS 251278 21/09/2010 */



	select	coalesce(max(obter_convenio_regra_atend(NEW.cd_medico_executor, cd_convenio_w, ie_tipo_atendimento_w,cd_estabelecimento_w,'E',null,null)), 'S')
	into STRICT	ie_regra_w
	;
	if (ie_regra_w = 'N') then
		select	max(substr(obter_nome_convenio(cd_convenio_w),1,40))
		into STRICT	ds_convenio_w
		;
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180558,'DS_CONVENIO_P='||substr(ds_convenio_w,1,255));
	end if;
end if;

if (ie_centro_custo_inativo_w	= 'S') then
	select	coalesce(max(cd_centro_custo), 0)
	into STRICT	cd_centro_custo_w
	from	setor_atendimento
	where	cd_setor_atendimento	= NEW.cd_setor_atendimento;

	select	coalesce(max(ie_situacao), 'A')
	into STRICT	ie_situacao_w
	from	centro_custo
	where	cd_centro_custo	= cd_centro_custo_w;

	if (ie_situacao_w = 'I') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180622);
	end if;
end if;

if (NEW.nr_seq_atepacu is not null) then
	select count(*)
	into STRICT	ie_atepacu_ok_w
	from	atend_paciente_unidade
	where	nr_seq_interno = NEW.nr_seq_atepacu;
	if (ie_atepacu_ok_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180625,'NR_SEQ_ATEPACU_P='||NEW.nr_seq_atepacu);
	end if;
end if;

if (NEW.ie_video is null) then
	NEW.ie_video := 'N';
end if;

if (NEW.ie_dispersao is null) then
	NEW.ie_dispersao := 'N';
end if;

if (NEW.cd_acao = 9) then
	NEW.cd_acao		:= 1;
elsif (coalesce(NEW.cd_acao,1) = 1) then
	BEGIN

	select max(coalesce(CASE WHEN vl_parametro IS NULL THEN  vl_parametro_padrao  ELSE vl_parametro END ,'N'))
	into STRICT ie_tasylab_w
	from funcao_parametro
	where cd_funcao    = 0
	  and nr_sequencia = 26;

	if (NEW.nr_prescricao is not null) and (NEW.nr_sequencia_prescricao is not null) then

		select 	coalesce(max(ie_anatomia_patologica),'N')
		into STRICT	ie_lab_patologia_w
		from 	exame_laboratorio
		where 	nr_seq_exame = NEW.nr_seq_exame;

		/*Feltrin OS119258 - Mutante*/


		select 	obter_status_atend_seq_prescr(NEW.nr_prescricao,NEW.nr_sequencia_prescricao)
		into STRICT	ie_status_atend_w
		;

		select 	coalesce(max(ie_status_baixa),35)
		into STRICT	ie_status_baixa_lab_w
		from 	lab_parametro
		where cd_estabelecimento = cd_estabelecimento_w;

		if	((ie_tasylab_w = 'N') or (ie_lab_patologia_w = 'S') or (NEW.nr_seq_exame is null) or (ie_status_atend_w  >= ie_status_baixa_lab_w)) then

			select	coalesce(max(cd_grupo_proc),0),
				coalesce(max(cd_especialidade),0),
				coalesce(max(cd_area_procedimento),0)
			into STRICT	cd_grupo_proced_w,
				cd_espec_proced_w,
				cd_area_proced_w
			from	estrutura_procedimento_v
			where	cd_procedimento = NEW.cd_procedimento
			and	ie_origem_proced = NEW.ie_origem_proced;

			select	Obter_Convenio_Atendimento(NEW.nr_atendimento)
			into STRICT	cd_convenio_ww
			;

			select	count(*)
			into STRICT	qt_regra_proced_exec_lab_w
			from	regra_proced_exec_lab
			where	coalesce(cd_procedimento, NEW.cd_procedimento) = NEW.cd_procedimento
			and	((cd_procedimento is null) or (coalesce(ie_origem_proced, NEW.ie_origem_proced)	= NEW.ie_origem_proced))
			and	((coalesce(cd_grupo_proc,cd_grupo_proced_w) = cd_grupo_proced_w) or (cd_grupo_proc is null))
			and	((coalesce(cd_area_procedimento,cd_area_proced_w) = cd_area_proced_w) or (cd_area_procedimento is null))
			and	((coalesce(cd_especialidade,cd_espec_proced_w) = cd_espec_proced_w) or (cd_especialidade is null))
			and	((coalesce(cd_convenio,cd_convenio_ww) = cd_convenio_ww) or (cd_convenio is null))
			and	((ie_tipo_atendimento	= ie_tipo_atendimento_w) or (ie_tipo_atendimento is null))
			and	((coalesce(cd_setor_atendimento,NEW.cd_setor_atendimento) = NEW.cd_setor_atendimento) or (cd_setor_atendimento is null))
			and	((cd_tipo_procedimento = obter_tipo_procedimento(NEW.cd_procedimento,NEW.ie_origem_proced,'C')) or (cd_tipo_procedimento is null))
            and ((ie_clinica = ie_clinica_w) or (ie_clinica is null));

			SELECT
                coalesce(MAX(a.ie_charge_coseguro), 'N')
            INTO STRICT ie_charge_coseguro_w 
            FROM prescr_procedimento_compl a 
            INNER JOIN prescr_procedimento b ON
                b.NR_SEQ_PROC_COMPL = a.NR_SEQUENCIA
            WHERE
                b.nr_prescricao  	= NEW.nr_prescricao and 	
                b.nr_sequencia   	= NEW.nr_sequencia_prescricao;

			if	((qt_regra_proced_exec_lab_w = 0 or (ie_considera_regra_w = 'N')) and ie_charge_coseguro_w <> 'Y') then

				update prescr_procedimento a
				set 	a.dt_baixa 		= LOCALTIMESTAMP,
					a.cd_motivo_baixa = 1,
					a.dt_atualizacao	= LOCALTIMESTAMP,
					a.nm_usuario	= NEW.nm_usuario,
					a.ie_status_execucao = '20'
				where 	a.nr_prescricao  	= NEW.nr_prescricao
				and 	a.nr_sequencia   	= NEW.nr_sequencia_prescricao
				and 	coalesce(a.cd_motivo_baixa,0)	= 0
				and 	((ie_tasylab_w = 'N') or (ie_lab_patologia_w = 'S') or (a.nr_seq_exame is null) or
					(a.ie_status_atend >= (SELECT coalesce(max(ie_status_baixa),35)
							from lab_parametro
							where cd_estabelecimento = cd_estabelecimento_w)));
			end if;

            SELECT
            	nr_seq_agenda
            INTO STRICT nr_agenda_compl_w
            FROM
				prescr_medica
			WHERE
				nr_prescricao = NEW.nr_prescricao;
			IF ( nr_agenda_compl_w IS NOT NULL ) THEN
			BEGIN	
				BEGIN
					SELECT
						nr_seq_solic_compl
					INTO STRICT nr_seq_complemento_w
					FROM
						agenda_integrada_item
					WHERE
						nr_seq_agenda_exame = nr_agenda_compl_w  LIMIT 1;
						
				EXCEPTION
					when no_data_found then nr_seq_complemento_w := null;
					when too_many_rows then raise;
				END;
					IF ( nr_seq_complemento_w IS NOT NULL ) THEN
						UPDATE solicitacao_exame_compl
						SET
							cd_status = 40,
							nm_usuario = NEW.nm_usuario,
							dt_atualizacao = LOCALTIMESTAMP
						WHERE
							nr_sequencia = nr_seq_complemento_w;
					END IF;
			END;	
			END IF;


			if (NEW.nr_prescricao is not null) and		-- Atualizar registro da recepcao sequencial (MultiMED Diagnosticos)
				(NEW.nr_sequencia_prescricao is not null) then

			BEGIN

			update	recep_ficha_pre
			set	dt_primeiro_atend = LOCALTIMESTAMP,
				ie_status	  = 3,
				ie_pac_recepcao   = 'N'
			where	nr_atendimento 	  = NEW.nr_atendimento
			and	ie_status <> 3
			and	ie_pac_recepcao = 'S';

			exception
			when others then
				null;
			end;

			end if;


		end if;
	end if;
	end;
end if;

if (NEW.nr_seq_exame is not null) then
	select	max(ie_tipo_convenio)
	into STRICT	ie_tipo_convenio_w
	from convenio
	where cd_convenio = NEW.cd_convenio;

	cd_setor_w	:= NEW.cd_setor_atendimento;

	if (NEW.nr_seq_material is not null) then
		select	max(cd_material_exame)
		into STRICT	cd_material_exame_w
		from	material_exame_lab
		where	nr_sequencia = NEW.nr_seq_material;
	end if;

	SELECT * FROM obter_exame_lab_convenio(NEW.nr_seq_exame, NEW.cd_convenio, NEW.cd_categoria, ie_tipo_atendimento_w, cd_estabelecimento_w, ie_tipo_convenio_w, NEW.nr_seq_proc_interno, cd_material_exame_w, cd_plano_convenio_w, cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w, NEW.dt_procedimento) INTO STRICT cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

	if (nr_seq_proc_interno_aux_w > 0) then
		NEW.nr_seq_proc_interno := nr_seq_proc_interno_aux_w;
	end if;
	if (coalesce(cd_procedimento_w,0) > 0) then
		NEW.cd_procedimento	:= cd_procedimento_w;
		NEW.ie_origem_proced	:= ie_origem_proced_w;
	end if;
end if;

if (NEW.ie_origem_proced = 2) and (NEW.ie_tipo_ato_sus is null or NEW.ie_tipo_servico_sus is null) then
	SELECT * FROM definir_tipo_ato_servico(cd_estabelecimento_w, NEW.cd_procedimento, NEW.cd_convenio, NEW.cd_medico_executor, NEW.cd_cgc_prestador, NEW.ie_tipo_ato_sus, NEW.ie_tipo_servico_sus) INTO STRICT NEW.ie_tipo_ato_sus, NEW.ie_tipo_servico_sus;
end if;

/* Rafael em 31/10/2006 OS41064 */


/* Felipe em 02/03/2007 OS51442, inseri no select a function Obter_Setor_Atend_Data_Ent*/


if (NEW.cd_setor_paciente is null) then
	select	coalesce(obter_setor_atend_data_ent(NEW.nr_atendimento, NEW.dt_procedimento),0)
	into STRICT	cd_setor_atendimento_w
	;

	if (cd_setor_atendimento_w = 0) then
		select	somente_numero(obter_unidade_atendimento(NEW.nr_atendimento,'A','CS'))
		into STRICT	cd_setor_atendimento_w
		;
	end if;

	NEW.cd_setor_paciente	:= cd_setor_atendimento_w;
end if;

/*if	(:new.ie_valor_informado	= 'S') then
	gravar_log_valor_informado(1, :new.nr_sequencia, :new.nr_atendimento, :new.nr_interno_conta, :new.nm_usuario);
end if;*/


if (NEW.cd_cbo is null) and (NEW.ie_origem_proced = 7) and
	((NEW.cd_medico_executor is not null) or (NEW.cd_pessoa_fisica is not null)) and
	(((ie_tipo_atendimento_w = 1) and (coalesce(sus_obter_se_detalhe_proc(NEW.cd_procedimento,NEW.ie_origem_proced,'10039',NEW.dt_procedimento),0) = 0)) or /*PROCEDIMENTO QUE NAO PERMITE O PREENCHIMENTO DE CPF E CBO*/

	(ie_tipo_atendimento_w <> 1)) then
	BEGIN

	cd_cbo_w	:= sus_obter_cbo_medico(coalesce(NEW.cd_medico_executor, NEW.cd_pessoa_fisica), NEW.cd_procedimento, NEW.dt_procedimento, null);

	if (cd_cbo_w is not null) then
		BEGIN
		NEW.cd_cbo	:= cd_cbo_w;
		end;
	end if;
	end;
end if;

if (NEW.cd_doenca_cid is null) and (NEW.ie_origem_proced = 7) then
        BEGIN
	ie_proc_bpa_w	:= sus_obter_se_proc_bpa(null, NEW.cd_procedimento);

	if (ie_proc_bpa_w = 'S') then
		BEGIN
		select  coalesce(max(cd_doenca_cid),'0')
	        into STRICT    cd_doenca_cid_w
	        from    procedimento
	        where   cd_procedimento         = NEW.cd_procedimento
	        and     ie_origem_proced        = NEW.ie_origem_proced;

	        if (cd_doenca_cid_w <> '0') then
	                BEGIN
	                NEW.cd_doenca_cid := cd_doenca_cid_w;
	                end;
		else
			BEGIN

			ie_atual_cid_w := coalesce(obter_valor_param_usuario(1125, 18, obter_perfil_ativo, NEW.nm_usuario, 0), 'N');

			if (ie_atual_cid_w = 'S') then
				BEGIN
				
				select  coalesce(max(c.cd_doenca), '0')
				into STRICT	cd_doenca_cid_w
				from    diagnostico_doenca c
				where   c.nr_atendimento = NEW.nr_atendimento
				and     c.dt_diagnostico = 	(SELECT	max(a.dt_diagnostico)
								from	diagnostico_doenca	b,
									diagnostico_medico	a
								where	a.nr_atendimento	= b.nr_atendimento
								and	a.dt_diagnostico	= b.dt_diagnostico
								and	b.ie_classificacao_doenca = 'P'
								and	a.cd_medico		= NEW.cd_medico_executor
								and	a.nr_atendimento	= NEW.nr_atendimento);
				
				if (cd_doenca_cid_w = '0') then
				
					select  coalesce(max(c.cd_doenca), '0')
					into STRICT	cd_doenca_cid_w
					from    diagnostico_doenca c
					where   c.nr_atendimento = NEW.nr_atendimento
					and     c.dt_diagnostico = 	(SELECT	max(a.dt_diagnostico)
									from	diagnostico_doenca	b,
										diagnostico_medico	a
									where	a.nr_atendimento	= b.nr_atendimento
									and	a.dt_diagnostico	= b.dt_diagnostico
									and	b.ie_classificacao_doenca = 'P'
									and	a.nr_atendimento	= NEW.nr_atendimento);
				
				end if;
				
				if (cd_doenca_cid_w <> '0') then
					BEGIN
					NEW.cd_doenca_cid := cd_doenca_cid_w;
					end;
				else

					select	coalesce(max(b.cd_doenca),'0')
					into STRICT	cd_doenca_cid_w
					from	diagnostico_doenca	b,
						diagnostico_medico	a
					where	a.nr_atendimento	= b.nr_atendimento
					and	a.dt_diagnostico	= b.dt_diagnostico
					and	a.cd_medico		= NEW.cd_medico_executor
					and	a.nr_atendimento	= NEW.nr_atendimento;

					if (cd_doenca_cid_w <> '0') then
						BEGIN
						NEW.cd_doenca_cid := cd_doenca_cid_w;
						end;

					else

						select	coalesce(max(b.cd_doenca),'0')
						into STRICT	cd_doenca_cid_w
						from	diagnostico_doenca	b,
							diagnostico_medico	a
						where	a.nr_atendimento	= b.nr_atendimento
						and	a.dt_diagnostico	= b.dt_diagnostico
						and	a.nr_atendimento	= NEW.nr_atendimento;

							if (cd_doenca_cid_w <> '0') then
								BEGIN
								NEW.cd_doenca_cid := cd_doenca_cid_w;
								end;
							end if;

					end if;
				end if;
				
				end;
			end if;

			end;
	        end if;
		end;
	end if;
        end;
end if;

if (NEW.ie_origem_proced = 7) then
	BEGIN
	if (ie_tipo_atendimento_w = 1) then
		BEGIN
		if (sus_obter_tiporeg_proc(NEW.cd_procedimento,NEW.ie_origem_proced,'C',2) in (3,4)) then
			BEGIN
			if (NEW.nr_seq_servico is null) then
				BEGIN
				nr_seq_servico_w := sus_obter_servico_proc(NEW.cd_procedimento,NEW.ie_origem_proced,cd_estabelecimento_w,ie_tipo_atendimento_w,NEW.dt_procedimento);
				exception
				when others then
					nr_seq_servico_w := null;
				end;

				NEW.nr_seq_servico := nr_seq_servico_w;
			else
				nr_seq_servico_w	:= NEW.nr_seq_servico;
			end if;
			if (NEW.nr_seq_servico_classif is null) and (nr_seq_servico_w is not null) then
				BEGIN
				NEW.nr_seq_servico_classif := sus_obter_classif_proc(NEW.cd_procedimento,NEW.ie_origem_proced,nr_seq_servico_w,cd_estabelecimento_w,NEW.dt_procedimento);
				exception
				when others then
					NEW.nr_seq_servico_classif := null;
				end;
			end if;
			end;
		else
			NEW.nr_seq_servico := null;
			NEW.nr_seq_servico_classif := null;
		end if;
		end;
	elsif (ie_tipo_atendimento_w <> 1) then
		BEGIN
		if (sus_obter_tiporeg_proc(NEW.cd_procedimento,NEW.ie_origem_proced,'C',1) = 1) then
			BEGIN

			BEGIN
			select	count(*)
			into STRICT	qt_proc_bpa_apac_w
			from	sus_procedimento a
			where	a.cd_procedimento = NEW.cd_procedimento
			and	a.ie_origem_proced = NEW.ie_origem_proced
			and	exists (SELECT  1
					from    sus_procedimento_registro x
					where   x.cd_procedimento =  a.cd_procedimento
					and     x.ie_origem_proced = a.ie_origem_proced
					and     x.cd_registro in (6,7));
			exception
			when others then
				qt_proc_bpa_apac_w := 0;
			end;

			if (qt_proc_bpa_apac_w > 0) then
				BEGIN

				BEGIN
				select	count(*)
				into STRICT	qt_reg_apac_w
				from	sus_apac_unif
				where	nr_interno_conta = coalesce(NEW.nr_interno_conta,0);
				exception
				when others then
					qt_reg_apac_w := 0;
				end;
				if (qt_reg_apac_w = 0) then
					qt_reg_apac_w := coalesce(sus_obter_se_laudo_apac_pragma(NEW.nr_atendimento),0);
				end if;

				if (qt_reg_apac_w > 0) then
					BEGIN
					if (NEW.nr_seq_servico is null) then
						BEGIN
						nr_seq_servico_w := sus_obter_servico_proc(NEW.cd_procedimento,NEW.ie_origem_proced,cd_estabelecimento_w,ie_tipo_atendimento_w,NEW.dt_procedimento);
						exception
						when others then
							nr_seq_servico_w := null;
						end;

						NEW.nr_seq_servico := nr_seq_servico_w;
					else
						nr_seq_servico_w	:= NEW.nr_seq_servico;
					end if;
					if (NEW.nr_seq_servico_classif is null) and (nr_seq_servico_w is not null) then
						BEGIN
						NEW.nr_seq_servico_classif := sus_obter_classif_proc(NEW.cd_procedimento,NEW.ie_origem_proced,nr_seq_servico_w,cd_estabelecimento_w,NEW.dt_procedimento);
						exception
						when others then
							NEW.nr_seq_servico_classif := null;
						end;
					end if;
					end;
				end if;

				end;
			else
				NEW.nr_seq_servico := null;
				NEW.nr_seq_servico_classif := null;
			end if;
			end;
		else
			BEGIN
			if (NEW.nr_seq_servico is null) then
				BEGIN
				nr_seq_servico_w := sus_obter_servico_proc(NEW.cd_procedimento,NEW.ie_origem_proced,cd_estabelecimento_w,ie_tipo_atendimento_w,NEW.dt_procedimento);
				exception
				when others then
					nr_seq_servico_w := null;
				end;

				NEW.nr_seq_servico 	:= nr_seq_servico_w;
			else
				nr_seq_servico_w	:= NEW.nr_seq_servico;
			end if;

			if (NEW.nr_seq_servico_classif is null) and (nr_seq_servico_w is not null) then
				BEGIN
				NEW.nr_seq_servico_classif := sus_obter_classif_proc(NEW.cd_procedimento,NEW.ie_origem_proced,nr_seq_servico_w,cd_estabelecimento_w,NEW.dt_procedimento);
				exception
				when others then
					NEW.nr_seq_servico_classif := null;
				end;
			end if;
			end;
		end if;
		end;
	end if;
	end;
end if;

ie_bloqueia_medico_estab_w	:= coalesce(obter_valor_param_usuario(67,285,obter_perfil_ativo,NEW.nm_usuario,0),'N');
if (ie_bloqueia_medico_estab_w	= 'S') and (NEW.cd_medico_executor	is not null) then

	select	coalesce(max(cd_empresa),0)
	into STRICT	cd_empresa_w
	from	estabelecimento
	where	cd_estabelecimento = cd_estabelecimento_w;

	select	count(*)
	into STRICT	qt_registro_w
	from	medico_estabelecimento
	where	cd_pessoa_fisica				= NEW.cd_medico_executor
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w)	= cd_estabelecimento_w
	and	coalesce(cd_empresa, cd_empresa_w)			= cd_empresa_w;

	if (qt_registro_w		= 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180641);
	end if;
end if;

CALL gerar_regra_prontuario(NEW.nr_atendimento, NEW.cd_setor_atendimento, NEW.cd_procedimento, NEW.ie_origem_proced, NEW.nm_usuario);

CALL gerar_regra_prontuario_gestao(ie_tipo_atendimento_w, cd_estabelecimento_w, NEW.nr_atendimento, cd_pessoa_atend_w, NEW.nm_usuario, null, NEW.cd_procedimento, NEW.ie_origem_proced, null, null, null, null);

if (NEW.ie_origem_proced	= 7) and (NEW.ie_doc_executor	is null) then
	SELECT * FROM sus_atualiza_doc_exec(	NEW.cd_procedimento, 7, NEW.cd_medico_executor, NEW.cd_pessoa_fisica, NEW.cd_cgc_prestador, cd_estabelecimento_w, NEW.cd_convenio, NEW.ie_responsavel_credito, NEW.ie_funcao_medico, NEW.cd_cbo, ie_doc_executor_w, nr_seq_regra_w) INTO STRICT ie_doc_executor_w, nr_seq_regra_w;
	NEW.ie_doc_executor		:= ie_doc_executor_w;

end if;

if (NEW.nr_seq_proc_interno is not null) then

	select 	coalesce(max(cd_procedimento_tuss),0),
		coalesce(max(ie_origem_proc_tuss),0),
		coalesce(max(ie_video),'N')
	into STRICT	cd_procedimento_tuss_w,
		ie_origem_proc_tuss_w,
		ie_video_w
	from 	proc_interno
	where 	nr_sequencia = NEW.nr_seq_proc_interno;

	if (ie_origem_proc_tuss_w = 8) then
		NEW.cd_procedimento_tuss:= cd_procedimento_tuss_w;
	end if;

	if (coalesce(NEW.ie_auditoria,'N') = 'N') then
		NEW.ie_video	:= ie_video_w;
	end if;

end if;

if (NEW.nr_seq_exame is not null) then

	cd_procedimento_tuss_w := define_proc_tuss_exame(NEW.nr_seq_exame,NEW.cd_convenio, NEW.cd_categoria, NEW.nr_seq_material, NEW.cd_edicao_amb);

	if (coalesce(cd_procedimento_tuss_w,0) > 0) then
		NEW.cd_procedimento_tuss := cd_procedimento_tuss_w;
	end if;

end if;

if (NEW.ie_origem_proced		= 7) then
	select	max(ie_tipo_financiamento),
		max(ie_complexidade),
		max(ie_atualiza_cbo_medico)
	into STRICT	ie_tipo_financiamento_w,
		ie_complexidade_w,
		ie_atualiza_cbo_medico_w
	from	sus_procedimento
	where	cd_procedimento			= NEW.cd_procedimento
	and	ie_origem_proced			= 7;

	NEW.ie_tipo_financiamento			:= ie_tipo_financiamento_w;
	NEW.ie_complexidade			:= ie_complexidade_w;

	if (coalesce(ie_atualiza_cbo_medico_w,'N') = 'S') and (ie_tipo_atendimento_w = 1) then
		NEW.cd_medico_executor 		:= null;
		NEW.cd_pessoa_fisica		:= null;
		NEW.cd_cbo			:= null;
		NEW.ds_observacao		:= substr(NEW.ds_observacao||'ie_atualiza_cbo_medico',1,255);
	end if;
end if;

if (NEW.ie_proc_princ_atend = 'S') then
	BEGIN
	select	count(*)
	into STRICT	qt_regra_tipo_fatura_w
	from	fatur_tipo_fatura
	where	cd_estabelecimento	= cd_estabelecimento_w;

	if (qt_regra_tipo_fatura_w > 0) then
		select	substr(obter_tipo_fatura_procedimento(NEW.cd_procedimento, NEW.ie_origem_proced, cd_estabelecimento_w, 'S', ie_tipo_atendimento_w,NEW.cd_setor_atendimento),1,10)
		into STRICT	nr_seq_tipo_fatura_w
		;

		if (nr_seq_tipo_fatura_w > 0) then
			update	conta_paciente
			set	nr_seq_tipo_fatura 	= nr_seq_tipo_fatura_w
			where	nr_interno_conta 	= NEW.nr_interno_conta;
		end if;
	end if;
	end;
end if;

if (ie_consiste_fpo_w 	<> 'N') and (NEW.ie_origem_proced	= 7) then
	BEGIN

	BEGIN
	select	coalesce(dt_mesano_referencia,LOCALTIMESTAMP)
	into STRICT	dt_referencia_w
	from	conta_paciente
	where	nr_interno_conta 	= NEW.nr_interno_conta;
	exception
	when others then
		dt_referencia_w := LOCALTIMESTAMP;
	end;

	ds_retorno_fpo_w := sus_consiste_fpo_unif(dt_referencia_w, NEW.cd_procedimento, NEW.ie_origem_proced, NEW.qt_procedimento, NEW.nr_atendimento, cd_estabelecimento_w, ie_tipo_atendimento_w, NEW.cd_cbo, ie_consiste_fpo_w, ds_retorno_fpo_w, NEW.cd_setor_atendimento, coalesce(cd_procedencia_w,0), NEW.nm_usuario);
	if (coalesce(ds_retorno_fpo_w,'X') <> 'X') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180642,'DS_RETORNO_FPO_P='||ds_retorno_fpo_w);
	end if;
	end;
end if;

select	substr(max(module||' - ' || machine||' - ' || program|| ' - ' || osuser|| ' - ' || terminal),1,255)
into STRICT	ds_module_log_w
from	v$session
where	audsid = (SELECT userenv('sessionid') );

ds_call_stack_w	:= substr(dbms_utility.format_call_stack,1,1800);

cd_perfil_w := obter_perfil_ativo;

if (cd_perfil_w = 0) then
	cd_perfil_w := null;
end if;

BEGIN
insert into proc_pac_log(	cd_funcao,
				cd_perfil,
				cd_setor_atendimento,
				dt_atualizacao,
				dt_atualizacao_nrec,
				dt_entrada_unidade,
				ie_acao,
				ie_valor_informado,
				nm_usuario,
				nm_usuario_nrec,
				nr_atendimento,
				nr_cirurgia,
				nr_prescricao,
				nr_seq_atepacu,
				nr_seq_propaci,
				nr_sequencia,
				qt_procedimento,
				tx_procedimento,
				vl_custo_operacional,
				vl_medico,
				vl_procedimento,
				cd_procedimento,
				ie_origem_proced,
				ds_call_stack,
				ds_module)
values (	coalesce(obter_funcao_ativa, NEW.cd_funcao),		
	coalesce(cd_perfil_w, NEW.cd_perfil),
        NEW.cd_setor_atendimento,
        LOCALTIMESTAMP,
        LOCALTIMESTAMP,
        NEW.dt_entrada_unidade,
        'I',
        NEW.ie_valor_informado,
        NEW.nm_usuario,
        NEW.nm_usuario,
        NEW.nr_atendimento,
        NEW.nr_cirurgia,
        NEW.nr_prescricao,
        NEW.nr_seq_atepacu,
        NEW.nr_sequencia,
        nextval('proc_pac_log_seq'),
        NEW.qt_procedimento,
        NEW.tx_procedimento,
        NEW.vl_custo_operacional,
        NEW.vl_medico,
        NEW.vl_procedimento,
	NEW.cd_procedimento,
	NEW.ie_origem_proced,
	ds_call_stack_w,
	ds_module_log_w);
exception
when others then
	qt_erro_w:=1;
end;

NEW.cd_funcao:= obter_funcao_ativa;
NEW.cd_perfil:= obter_perfil_ativo;

-- OS 465559

if (NEW.nr_interno_conta is not null) then

	select	max(dt_geracao_resumo)
	into STRICT	dt_geracao_resumo_w
	from 	conta_paciente
	where 	nr_interno_conta = NEW.nr_interno_conta;

	if (dt_geracao_resumo_w is not null) then

		update	conta_paciente
		set 	dt_geracao_resumo  = NULL
		where 	nr_interno_conta = NEW.nr_interno_conta;

	end if;

end if;

select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
into STRICT	ie_gerar_cid_regra_w
from	regra_tipo_atend_cid
where	((nr_seq_proc_interno = NEW.nr_seq_proc_interno)
or 	(cd_procedimento = NEW.cd_procedimento AND ie_origem_proced = NEW.ie_origem_proced));

if (ie_gerar_cid_regra_w = 'S') then
	CALL gerar_cid_regra_tipo_atend(NEW.nr_seq_proc_interno,NEW.cd_procedimento,NEW.ie_origem_proced,NEW.cd_medico,NEW.nr_atendimento, NEW.nm_usuario);
end if;

BEGIN
ie_ajusta_exec_consulta_bpa_w := coalesce(obter_valor_param_usuario(1125, 149, obter_perfil_ativo, NEW.nm_usuario, 0),'N');
exception
when others then
	ie_ajusta_exec_consulta_bpa_w	:= 'N';
end;

if (ie_ajusta_exec_consulta_bpa_w = 'S') and (ie_tipo_atendimento_w <> 1) and (NEW.cd_procedimento = 301010048) and (NEW.cd_medico_executor is null) and (NEW.cd_pessoa_fisica is not null) then
	BEGIN
	NEW.cd_medico_executor := NEW.cd_pessoa_fisica;
	NEW.cd_pessoa_fisica := '';
	end;
end if;

if (NEW.ie_origem_proced = 20) then
	CALL insert_procedimento_pac_medico(
		NEW.cd_procedimento,
		NEW.ie_origem_proced,
		cd_setor_atendimento_w,
		NEW.dt_procedimento,
		NEW.nr_atendimento,
		NEW.qt_procedimento,
		NEW.nm_usuario
	);
end if;

select	count(*)
into STRICT	qt_exist_rule_w
from	patient_class_category
where	coalesce(ie_situacao,'A') = 'A';

if (qt_exist_rule_w > 0) then
	CALL verify_current_pat_category(NEW.nr_atendimento,
								NEW.cd_procedimento,
								NEW.ie_origem_proced,
								NEW.nm_usuario,
								NEW.dt_procedimento);
end if;

if (NEW.nr_seq_proc_interno is not null) and (NEW.ie_origem_proced is not null) and (NEW.cd_procedimento is null) then
	SELECT * FROM obter_proc_tab_interno(NEW.nr_seq_proc_interno, null, NEW.nr_atendimento, 0, NEW.cd_procedimento, NEW.ie_origem_proced, null, NEW.dt_procedimento, null) INTO STRICT NEW.cd_procedimento, NEW.ie_origem_proced;
end if;

<<final>>
qt_erro_w	:= 0;
  END;
RETURN NEW;
end;
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_procedimento_paciente_insert() FROM PUBLIC;

CREATE TRIGGER procedimento_paciente_insert
	BEFORE INSERT ON procedimento_paciente FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_procedimento_paciente_insert();

