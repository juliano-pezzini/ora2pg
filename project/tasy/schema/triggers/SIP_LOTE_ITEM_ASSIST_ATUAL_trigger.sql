-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

DROP TRIGGER IF EXISTS sip_lote_item_assist_atual ON sip_lote_item_assistencial CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_sip_lote_item_assist_atual() RETURNS trigger AS $BODY$
declare
ie_grava_log	varchar(1);

BEGIN

ie_grava_log := 'N';

-- se for ação de delete ou se algum valor dos campos pertinentes a alteração for modificado
if (TG_OP = 'DELETE') then
	ie_grava_log := 'S';

elsif	((coalesce(NEW.cd_classificacao_sip, 'A') != coalesce(OLD.cd_classificacao_sip, 'A')) or (coalesce(NEW.dt_ocorrencia, LOCALTIMESTAMP) != coalesce(OLD.dt_ocorrencia, LOCALTIMESTAMP)) or (coalesce(NEW.ie_benef_carencia, 'A') != coalesce(OLD.ie_benef_carencia, 'A')) or (coalesce(NEW.ie_despesa, 'A') != coalesce(OLD.ie_despesa, 'A')) or (coalesce(NEW.ie_evento, 'A') != coalesce(OLD.ie_evento, 'A')) or (coalesce(NEW.ie_segmentacao_sip, 0) != coalesce(OLD.ie_segmentacao_sip, 0)) or (coalesce(NEW.ie_tipo_contratacao, 'A') != coalesce(OLD.ie_tipo_contratacao, 'A')) or (coalesce(NEW.nr_seq_apres, 0) != coalesce(OLD.nr_seq_apres, 0)) or (coalesce(NEW.nr_seq_item_sip, 0) != coalesce(OLD.nr_seq_item_sip, 0)) or (coalesce(NEW.nr_seq_lote, 0) != coalesce(OLD.nr_seq_lote, 0)) or (coalesce(NEW.nr_seq_superior, 0) != coalesce(OLD.nr_seq_superior, 0)) or (coalesce(NEW.qt_beneficiario, 0) != coalesce(OLD.qt_beneficiario, 0)) or (coalesce(NEW.qt_evento, 0) != coalesce(OLD.qt_evento, 0)) or (coalesce(NEW.sg_uf, 'A') != coalesce(OLD.sg_uf, 'A')) or (coalesce(NEW.vl_despesa, 0) != coalesce(OLD.vl_despesa, 0))) then
	ie_grava_log := 'S';
end if;

-- grava o log
if (ie_grava_log = 'S') then

	insert into sip_lote_item_assist_log( 	nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_classificacao_sip, dt_atualizacao_log, dt_ocorrencia,
			ie_benef_carencia, ie_despesa, ie_evento,
			ie_segmentacao_sip, ie_tipo_contratacao, nm_usuario_log,
			nr_seq_apres, nr_seq_item_sip, nr_seq_lote,
			nr_seq_superior, nr_sequencia_log, qt_beneficiario,
			qt_evento, sg_uf, vl_despesa)
	values ( 	nextval('sip_lote_item_assist_log_seq'), LOCALTIMESTAMP, substr(coalesce(wheb_usuario_pck.get_nm_usuario,'Usuário não identificado'),1,14),
			OLD.cd_classificacao_sip, OLD.dt_atualizacao, OLD.dt_ocorrencia,
			OLD.ie_benef_carencia, OLD.ie_despesa, OLD.ie_evento,
			OLD.ie_segmentacao_sip, OLD.ie_tipo_contratacao, OLD.nm_usuario,
			OLD.nr_seq_apres, OLD.nr_seq_item_sip, OLD.nr_seq_lote,
			OLD.nr_seq_superior, OLD.nr_sequencia, OLD.qt_beneficiario,
			OLD.qt_evento, OLD.sg_uf, OLD.vl_despesa);
end if;

IF TG_OP = 'DELETE' THEN
	RETURN OLD;
ELSE
	RETURN NEW;
END IF;

end
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION trigger_fct_sip_lote_item_assist_atual() FROM PUBLIC;

CREATE TRIGGER sip_lote_item_assist_atual
	BEFORE UPDATE OR DELETE ON sip_lote_item_assistencial FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_sip_lote_item_assist_atual();

