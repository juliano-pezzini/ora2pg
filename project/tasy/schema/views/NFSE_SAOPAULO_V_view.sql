-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

CREATE OR REPLACE VIEW nfse_saopaulo_v (assinatura, nr_seq_nota, inscricaoprestador, serierps, numerorps, tiporps, dataemissao, statusrps, tributacaorps, valorservicos, valordeducoes, valorpis, valorcofins, valorinss, valorir, valorcsll, codigoservico, aliquotaservicos, issretido, cpfcnpjtomador, cpf, cnpj, inscricaomunicipaltomador, inscricaoestadualtomador, razaosocialtomador, tipologradouro, logradouro, numeroendereco, complementoendereco, bairro, cidade, uf, cep, emailtomador, discriminacao) AS select	lower(a.cd_assinatura_rps) Assinatura,
	a.nr_sequencia nr_seq_nota, -- verificar este campo 
	coalesce(substr(lpad(obter_dados_pf_pj('', a.cd_cgc_emitente, 'IM'), 8, '0'), 1, 30), '0000000') InscricaoPrestador, -- 1º dos campos chave RPS 
	a.cd_serie_nf SerieRPS, -- 2º campo da ChaveRPS   -- verificar se cd_serie_nf ou cd_serie_RPS 
	a.nr_nota_fiscal NumeroRPS, -- 3º e ultimo campo da chaveRPS. 
	'RPS' TipoRPS, 
	to_char(a.dt_emissao, 'yyyy-mm-dd') DataEmissao, 
	CASE WHEN a.ie_situacao=1 THEN  'N' WHEN a.ie_situacao=2 THEN  'C' WHEN a.ie_situacao=3 THEN  'C'  ELSE 'N' END  StatusRPS, -- somente colocamos notas Normais e canceladas, verificar se deve colocar extraviada... 
	CASE WHEN obter_dados_parametro_compras(a.cd_estabelecimento, 14)='1' THEN  'T' WHEN obter_dados_parametro_compras(a.cd_estabelecimento, 14)='2' THEN  'F' WHEN obter_dados_parametro_compras(a.cd_estabelecimento, 14)='3' THEN  'I' WHEN obter_dados_parametro_compras(a.cd_estabelecimento, 14)='5' THEN  'J'  ELSE 'I' END  TributacaoRPS, -- Tributacao sera Isento nos casos 3, 4 e 6. 
	campo_mascara(a.vl_mercadoria, 2) ValorServicos, -- valor dos serviços pelo valor da mercadoria 
	campo_mascara(a.vl_descontos, 2) ValorDeducoes, -- valor dos descontos pelo descontos da função nota fiscal 
	campo_mascara(CASE WHEN cd_cgc='' THEN  0  ELSE obter_valor_tipo_tributo_nota(a.nr_sequencia, 'V', 'PIS') END , 2) ValorPIS, 
	campo_mascara(CASE WHEN cd_cgc='' THEN  0  ELSE obter_valor_tipo_tributo_nota(a.nr_sequencia, 'V', 'COFINS') END , 2) ValorCOFINS, 
	campo_mascara(CASE WHEN cd_cgc='' THEN  0  ELSE obter_valor_tipo_tributo_nota(a.nr_sequencia, 'V', 'INSS') END , 2) ValorINSS, 
	campo_mascara(CASE WHEN cd_cgc='' THEN  0  ELSE obter_valor_tipo_tributo_nota(a.nr_sequencia, 'V', 'IR') END , 2) ValorIR, 
	campo_mascara(CASE WHEN cd_cgc='' THEN  0  ELSE obter_valor_tipo_tributo_nota(a.nr_sequencia, 'V', 'CSLL') END , 2) ValorCSLL, 
	substr(obter_dados_pf_pj_estab(a.cd_estabelecimento, null, a.cd_cgc_emitente, 'ATIV'), 1, 5) CodigoServico, -- codigo da Atividade cadastrado na pessoa juridica 
	'2.00' AliquotaServicos, -- Aliquota Fixa conforme layout de São Paulo 
	CASE WHEN substr(obter_se_nf_retem_iss(a.nr_sequencia),1,1)='S' THEN 'true'  ELSE 'false' END  ISSRetido, -- Se tiver retenção True, senao é false 
	CASE WHEN cd_cgc='' THEN  coalesce(substr(obter_dados_pf(cd_pessoa_fisica, 'CPF'), 1, 11), '00000000000')  ELSE cd_cgc END  CPFCNPJTomador, -- CPF ou CNPJ de quem recebe o serviço 
	substr(obter_dados_pf(cd_pessoa_fisica, 'CPF'), 1, 11) CPF, 
	cd_cgc CNPJ, 
	substr(CASE WHEN cd_cgc='' THEN  obter_dados_pf(cd_pessoa_fisica, 'ISS')  ELSE obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'IM') END , 1, 30) InscricaoMunicipalTomador, -- inscricao municipal de quem recebe o serviço caso for uma empresa. 
	substr(obter_dados_pf_pj( null, cd_cgc, 'IE'), 1, 19) InscricaoEstadualTomador, -- inscricao estadual IE 
	substr(tiss_eliminar_caractere(elimina_acentuacao(obter_nome_pf_pj(cd_pessoa_fisica, cd_cgc))), 1, 255) RazaoSocialTomador, -- nome/razao social 
	'Rua' TipoLogradouro, -- tipo de logradouro do tomador 
	coalesce(substr(tiss_eliminar_caractere(elimina_acentuacao(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'EN'))), 1, 255), 'Endereco') Logradouro, -- endereco do tomador 
	coalesce(substr(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'NR'), 1, 25), '00') NumeroEndereco, -- tomador 
	coalesce(substr(tiss_eliminar_caractere(elimina_acentuacao(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'CO'))), 1, 255), 'Complemento') ComplementoEndereco, -- tomador 
	coalesce(substr(tiss_eliminar_caractere(elimina_acentuacao(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'B'))), 1, 255), 'Bairro') Bairro, -- tomador 
	obter_siafi_municipio_ibge( 
		CASE WHEN  			obter_municipio_ibge(elimina_caracteres_especiais(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'CEP')))=0 THEN  			obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'CDM')  ELSE obter_municipio_ibge(elimina_caracteres_especiais(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'CEP'))) END  
	) Cidade, -- cidade tomador 
	substr(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'UF'), 1, 2) UF, -- tomador 
	lpad(somente_numero(substr(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'CEP'), 1, 15)), 8, '0') CEP, -- tomador 
	substr(tiss_eliminar_caractere(elimina_acentuacao(obter_dados_pf_pj(cd_pessoa_fisica, cd_cgc, 'M'))), 1, 80) EmailTomador, -- email 
	coalesce(substr(obter_descricao_rps(a.cd_estabelecimento, a.nr_sequencia, 'DS_SERVICOS'), 1, 1000), 'Servicos') Discriminacao 
FROM 	w_nota_fiscal w, 
	nota_fiscal a 
where 	w.nr_seq_nota_fiscal = a.nr_sequencia 
order by 
	a.nr_nota_fiscal;

