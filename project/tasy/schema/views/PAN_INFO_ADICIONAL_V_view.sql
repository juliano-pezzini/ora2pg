-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

CREATE OR REPLACE VIEW pan_info_adicional_v (nr_seq_interno, cd_unidade_basica, cd_unidade_compl, nr_idade, dt_nascimento, ie_sexo, ds_convenio, ds_plano_convenio, ds_clinica, nr_dias_internado, ds_vaga, ds_escalas, nr_seq_episodio, nr_atendimento, protolo_gererenciado_qtd, ds_nivel_complexidade, cd_pessoa_fisica, ds_diagnostico, nm_colab_resp, qt_pontos, ds_gradacao1, ds_gradacao2, ds_gradacao3, ds_gradacao4, qt_ponto_nut, qt_ponto_nut2, ds_escalas_panorama, ds_score_flex, ds_score_flex_ii, ds_anotacao, dt_cirurgia, ds_tipo_isolamento_cih, dt_escala_dor, qt_escala_dor, ds_escala_dor, nm_nutricionista, qt_dias_prev_inter, nm_aval_nut, nm_medico_resp, nm_psicologo_resp, nm_farmaceutico_resp, nm_fisioterapeuta_resp, nm_assistente_resp, nm_enf_resp, dt_alta, dt_obito, ie_tipo_sangue, ie_fator_rh, dt_entrada, dt_entrada_unidade, dt_internacao, ds_nutricional, dt_diag_nutricional, ds_dieta_liberada, ds_cirurgia, ds_sae, ds_classif_esp_pac, qt_dia_perman_unid, ds_tipo_vaga, ds_prox_leito_desej, ds_classif_setor_solic, ds_lista_exame_agendado, dt_previsto_alta, ds_tipo_episodio, qt_dia_unidade) AS select  temp.NR_SEQ_INTERNO,temp.CD_UNIDADE_BASICA,temp.CD_UNIDADE_COMPL,temp.NR_IDADE,temp.DT_NASCIMENTO,temp.IE_SEXO,temp.DS_CONVENIO,temp.DS_PLANO_CONVENIO,temp.DS_CLINICA,temp.NR_DIAS_INTERNADO,temp.DS_VAGA,temp.DS_ESCALAS,temp.NR_SEQ_EPISODIO,temp.NR_ATENDIMENTO,temp.PROTOLO_GERERENCIADO_QTD,temp.DS_NIVEL_COMPLEXIDADE,temp.CD_PESSOA_FISICA,temp.DS_DIAGNOSTICO,temp.NM_COLAB_RESP,temp.QT_PONTOS,temp.DS_GRADACAO1,temp.DS_GRADACAO2,temp.DS_GRADACAO3,temp.DS_GRADACAO4,temp.QT_PONTO_NUT,temp.QT_PONTO_NUT2,temp.DS_ESCALAS_PANORAMA,temp.DS_SCORE_FLEX,temp.DS_SCORE_FLEX_II,temp.DS_ANOTACAO,temp.DT_CIRURGIA,temp.DS_TIPO_ISOLAMENTO_CIH,temp.DT_ESCALA_DOR,temp.QT_ESCALA_DOR,temp.DS_ESCALA_DOR,temp.NM_NUTRICIONISTA,temp.QT_DIAS_PREV_INTER,temp.NM_AVAL_NUT,temp.NM_MEDICO_RESP,temp.NM_PSICOLOGO_RESP,temp.NM_FARMACEUTICO_RESP,temp.NM_FISIOTERAPEUTA_RESP,temp.NM_ASSISTENTE_RESP,temp.NM_ENF_RESP,temp.DT_ALTA,temp.DT_OBITO,temp.IE_TIPO_SANGUE,temp.IE_FATOR_RH,temp.DT_ENTRADA,temp.DT_ENTRADA_UNIDADE,temp.DT_INTERNACAO,temp.DS_NUTRICIONAL,temp.DT_DIAG_NUTRICIONAL,temp.DS_DIETA_LIBERADA,temp.DS_CIRURGIA,temp.DS_SAE,temp.DS_CLASSIF_ESP_PAC,temp.QT_DIA_PERMAN_UNID,temp.DS_TIPO_VAGA,temp.DS_PROX_LEITO_DESEJ,temp.DS_CLASSIF_SETOR_SOLIC,temp.DS_LISTA_EXAME_AGENDADO,temp.DT_PREVISTO_ALTA,temp.DS_TIPO_EPISODIO,
                ROUND((coalesce(temp.dt_alta, LOCALTIMESTAMP) - temp.dt_entrada_unidade),0) qt_dia_unidade
        FROM (select    distinct u.nr_seq_interno,
                        u.cd_unidade_basica,
                        u.cd_unidade_compl,
                        obter_idade_pf(a.cd_pessoa_fisica, LOCALTIMESTAMP, 'A') nr_idade,
			 obter_dados_pf(a.cd_pessoa_fisica, 'DT') as dt_nascimento,
                        ('Z_' || obter_sexo_pf(a.cd_pessoa_fisica, 'C')) ie_sexo,
                        substr(obter_nome_convenio(obter_convenio_atendimento(a.nr_atendimento)),1,40) ds_convenio,
                        Obter_Plano_Convenio_Atend(a.nr_atendimento,'D') ds_plano_convenio,
                        obter_valor_dominio(17, a.ie_clinica) ds_clinica,
                        trunc(coalesce(trunc(a.dt_alta), trunc(LOCALTIMESTAMP)) - trunc(b.dt_entrada_unidade)) + 1 nr_dias_internado,
                        obter_dados_vaga_mapa(a.nr_atendimento) ds_vaga,
                        obter_escala_mapa_setor(u.cd_setor_atendimento, u.nr_seq_interno) ds_escalas,
                        a.nr_seq_episodio,
                        a.nr_atendimento,
                        gqa_obter_quantidade_prot(a.cd_pessoa_fisica, a.nr_atendimento, 'T') protolo_gererenciado_qtd,
                        obter_presc_ultimo_sae(a.nr_atendimento,'NC') ds_nivel_complexidade,
                        a.cd_pessoa_fisica,
                        substr(obter_desc_cid(obter_cid_atendimento(a.nr_atendimento,'P')),1,240) ds_diagnostico,
                        substr(Obter_enfermeiro_resp(a.nr_atendimento,'D'),1,100) nm_colab_resp,
                        somente_numero(substr(obter_complexidade_assist(a.nr_atendimento, s.cd_setor_atendimento, 'P','1'),1,10)) qt_pontos,
			obter_escala_complex_setor(u.cd_setor_atendimento, u.nr_seq_interno,1) ds_gradacao1,
			obter_escala_complex_setor(u.cd_setor_atendimento, u.nr_seq_interno,2) ds_gradacao2,
			obter_escala_complex_setor(u.cd_setor_atendimento, u.nr_seq_interno,3) ds_gradacao3,
			obter_escala_complex_setor(u.cd_setor_atendimento, u.nr_seq_interno,4) ds_gradacao4,
                        substr(obter_complexidade_nut(a.nr_atendimento,s.cd_setor_atendimento,'PC'),1,100) qt_ponto_nut,
			substr(obter_complexidade_nut(a.nr_atendimento,s.cd_setor_atendimento,'PC', 2),1,100) qt_ponto_nut2,
			substr(obter_escalas_panorama(s.cd_setor_atendimento, a.nr_atendimento, 'E'),1,4000) ds_escalas_panorama,
						substr(obter_score_flex_I_panorama(s.cd_setor_atendimento, a.nr_atendimento, 'E'),1,4000) ds_score_flex,
						substr(obter_score_flex_II_panorama(s.cd_setor_atendimento, a.nr_atendimento, 'E'),1,4000) ds_score_flex_II,
                        substr(obter_anotacao_pendente(a.nr_atendimento),1,255) ds_anotacao,
                        obter_data_cirurgia(a.cd_pessoa_fisica) dt_cirurgia,
                        substr(obter_tipos_isolamentos_cih(a.nr_atendimento,'D'),1,255) ds_tipo_isolamento_cih,
                        obter_data_escala_dor_atend(a.nr_atendimento) dt_escala_dor,
                        CASE WHEN obter_desc_escala_dor_inapto(a.nr_atendimento,'DS') IS NULL THEN substr(obter_sinal_vital(a.nr_atendimento,'ESCDOR'),1,100)  ELSE 0 END  qt_escala_dor,
                        coalesce(SUBSTR(obter_desc_escala_dor_inapto(a.nr_atendimento,'DS'),1,255),SUBSTR(obter_desc_result_dor(obter_sinal_vital(a.nr_atendimento,'REDOR'),'D'),1,100)) ds_escala_dor,
                        substr(obter_nome_pf(obter_profissional_resp(a.nr_atendimento,'N')),1,100) nm_nutricionista,
                        a.qt_dias_prev_inter,
                        substr(obter_result_aval_subj_global(a.nr_atendimento,'NM'),1,255) nm_aval_nut,
                        substr(obter_profissional_atend(a.nr_atendimento,'M','N'),1,60) nm_medico_resp,
                        substr(obter_profissional_atend(a.nr_atendimento,'P','N'),1,60) nm_psicologo_resp,
                        substr(obter_profissional_atend(a.nr_atendimento,'F','N'),1,60) nm_farmaceutico_resp,
                        substr(obter_profissional_atend(a.nr_atendimento,'FI','N'),1,60) nm_fisioterapeuta_resp,
                        substr(obter_profissional_atend(a.nr_atendimento,'A','N'),1,60) nm_assistente_resp,
                        substr(obter_profissional_atend(a.nr_atendimento,'E','N'),1,60) nm_enf_resp,
                        a.dt_alta,
           obter_dados_pf(a.cd_pessoa_fisica, 'DO') as dt_obito,
           obter_dados_pf(a.cd_pessoa_fisica, 'TS') as ie_tipo_sangue,
           obter_dados_pf(a.cd_pessoa_fisica, 'RH') as ie_fator_rh,
                        a.dt_entrada,
                        u.dt_entrada_unidade,
                        CASE WHEN obter_classif_setor_min(b.nr_atendimento)=1 THEN                             CASE WHEN a.ie_tipo_atendimento=1 THEN  Obter_Unidade_Atendimento(b.nr_atendimento,'PI','DT')  ELSE to_char(a.dt_entrada, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_nm_usuario))) END   ELSE to_char(a.dt_entrada, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_nm_usuario))) END  dt_internacao,
                        obter_dados_aval_nutric(a.nr_atendimento, 'DN') ds_nutricional,
                        (select max(a.dt_avaliacao)
                         from   aval_nutricao a
                         where  a.nr_atendimento = a.nr_atendimento
                         and    a.dt_liberacao is not null
                         and    a.dt_avaliacao = (select max(b.dt_avaliacao)
                                                  from   aval_nutricao b
                                                  where  b.nr_atendimento = a.nr_atendimento
                                                  and    b.dt_liberacao is not null)) dt_diag_nutricional,
                        obter_dieta_lib_atend(a.nr_atendimento) ds_dieta_liberada,
                        obter_cirurgia_paciente(a.nr_atendimento, 'P') ds_cirurgia,
                        CASE WHEN substr(Obter_Se_atend_sae(a.nr_atendimento),1,1)='S' THEN  obter_desc_expressao(285693) END  ds_sae,
				obter_classif_esp_pac(a.nr_atendimento) ds_classif_esp_pac,
				coalesce((obter_tempo_p_ult_setor(a.nr_atendimento, 'QT',b.nr_seq_interno))::numeric , 0) qt_dia_perman_unid,
				(	select max(substr(obter_valor_dominio(1410,x.IE_TIPO_VAGA),1,100))
					from	gestao_vaga x
					where	x.nr_atendimento = a.nr_atendimento
					) ds_tipo_vaga,
				substr(panorama_proximo_leito_desej(a.nr_atendimento),1,255) ds_prox_leito_desej,
				substr(obter_classif_setor_solic_vaga(a.nr_atendimento),1,255) ds_classif_setor_solic,
				substr(panorama_obter_exame_agendado(a.nr_atendimento),1,255) ds_lista_exame_agendado,
				a.dt_previsto_alta,
                (select obter_nome_tipo_episodio(epipac.nr_seq_tipo_episodio) nr_seq_tipo_episodio
                 from episodio_paciente epipac
                 where nr_sequencia = a.nr_seq_episodio) ds_tipo_episodio
                from	unidade_atendimento u,
                        atendimento_paciente a,
                        setor_atendimento s,
                        atend_paciente_unidade b
                where	a.nr_atendimento = u.nr_atendimento
                and	s.cd_setor_atendimento = u.cd_setor_atendimento
                and 	a.nr_atendimento = b.nr_atendimento
                and     b.cd_setor_atendimento = u.cd_setor_atendimento
                and     b.cd_unidade_basica = u.cd_unidade_basica
                and     b.cd_unidade_compl = u.cd_unidade_compl
                and	u.ie_situacao = 'A'
				and	b.dt_saida_unidade is null
        
union

	select  distinct
		null nr_seq_interno,
		substr(obter_unidade_atendimento(a.nr_atendimento, 'A','UB'),1,30) cd_unidade_basica,
		substr(obter_unidade_atendimento(a.nr_atendimento, 'A','UC'),1,30) cd_unidade_compl,
		substr(obter_idade_pf(a.cd_pessoa_fisica, LOCALTIMESTAMP, 'A'),1,3) nr_idade,
		obter_dados_pf(a.cd_pessoa_fisica, 'DT') as dt_nascimento,
		substr(('Z_' || obter_sexo_pf(a.cd_pessoa_fisica, 'C')),1,30) ie_sexo,
		substr(obter_nome_convenio(obter_convenio_atendimento(a.nr_atendimento)),1,40) ds_convenio,
		substr(obter_plano_convenio_atend(a.nr_atendimento,'D'),1,50) ds_plano_convenio,
		substr(obter_valor_dominio(17, a.ie_clinica),1,50) ds_clinica,
		null nr_dias_internado,
		substr(obter_dados_vaga_mapa(a.nr_atendimento),1,50) ds_vaga,
		obter_escala_mapa_setor(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), obter_unidade_atendimento(a.nr_atendimento, 'A','NR')) ds_escalas,
		a.nr_seq_episodio,
		a.nr_atendimento,
    gqa_obter_quantidade_prot(a.cd_pessoa_fisica, a.nr_atendimento, 'T') protolo_gererenciado_qtd,
		obter_presc_ultimo_sae(a.nr_atendimento,'NC') ds_nivel_complexidade,
		a.cd_pessoa_fisica,
		substr(obter_desc_cid(obter_cid_atendimento(a.nr_atendimento,'P')),1,240) ds_diagnostico,
		substr(Obter_enfermeiro_resp(a.nr_atendimento,'D'),1,100) nm_colab_resp,
		somente_numero(substr(obter_complexidade_assist(a.nr_atendimento, obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), 'P','1'),1,10)) qt_pontos,
		obter_escala_complex_setor(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), obter_unidade_atendimento(a.nr_atendimento, 'A','NR'),1) ds_gradacao1,
		obter_escala_complex_setor(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), obter_unidade_atendimento(a.nr_atendimento, 'A','NR'),2) ds_gradacao2,
		obter_escala_complex_setor(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), obter_unidade_atendimento(a.nr_atendimento, 'A','NR'),3) ds_gradacao3,
		obter_escala_complex_setor(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), obter_unidade_atendimento(a.nr_atendimento, 'A','NR'),4) ds_gradacao4,
		substr(obter_complexidade_nut(a.nr_atendimento,obter_unidade_atendimento(a.nr_atendimento, 'A','CS'),'PC'),1,100) qt_ponto_nut,
		substr(obter_complexidade_nut(a.nr_atendimento,obter_unidade_atendimento(a.nr_atendimento, 'A','CS'),'PC', 2),1,100) qt_ponto_nut2,
		substr(obter_escalas_panorama(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), a.nr_atendimento, 'E'),1,4000) ds_escalas_panorama,
		substr(obter_score_flex_I_panorama(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), a.nr_atendimento, 'E'),1,4000) ds_score_flex,
		substr(obter_score_flex_II_panorama(obter_unidade_atendimento(a.nr_atendimento, 'A','CS'), a.nr_atendimento, 'E'),1,4000) ds_score_flex_II,
		substr(obter_anotacao_pendente(a.nr_atendimento),1,255) ds_anotacao,
		obter_data_cirurgia(a.cd_pessoa_fisica) dt_cirurgia,
		substr(obter_tipos_isolamentos_cih(a.nr_atendimento,'D'),1,255) ds_tipo_isolamento_cih,
		obter_data_escala_dor_atend(a.nr_atendimento) dt_escala_dor,
		CASE WHEN obter_desc_escala_dor_inapto(a.nr_atendimento,'DS') IS NULL THEN substr(obter_sinal_vital(a.nr_atendimento,'ESCDOR'),1,100)  ELSE 0 END  qt_escala_dor,
		coalesce(SUBSTR(obter_desc_escala_dor_inapto(a.nr_atendimento,'DS'),1,255),SUBSTR(obter_desc_result_dor(obter_sinal_vital(a.nr_atendimento,'REDOR'),'D'),1,100)) ds_escala_dor,
		substr(obter_nome_pf(obter_profissional_resp(a.nr_atendimento,'N')),1,100) nm_nutricionista,
		a.qt_dias_prev_inter,
		substr(obter_result_aval_subj_global(a.nr_atendimento,'NM'),1,255) nm_aval_nut,
		substr(obter_profissional_atend(a.nr_atendimento,'M','N'),1,60) nm_medico_resp,
		substr(obter_profissional_atend(a.nr_atendimento,'P','N'),1,60) nm_psicologo_resp,
		substr(obter_profissional_atend(a.nr_atendimento,'F','N'),1,60) nm_farmaceutico_resp,
		substr(obter_profissional_atend(a.nr_atendimento,'FI','N'),1,60) nm_fisioterapeuta_resp,
		substr(obter_profissional_atend(a.nr_atendimento,'A','N'),1,60) nm_assistente_resp,
		substr(obter_profissional_atend(a.nr_atendimento,'E','N'),1,60) nm_enf_resp,
		a.dt_alta,
    obter_dados_pf(a.cd_pessoa_fisica, 'DO') as dt_obito,
    obter_dados_pf(a.cd_pessoa_fisica, 'TS') as ie_tipo_sangue,
    obter_dados_pf(a.cd_pessoa_fisica, 'RH') as ie_fator_rh,
		a.dt_entrada,
		null dt_entrada_unidade,
		CASE WHEN obter_classif_setor_min(a.nr_atendimento)=1 THEN 		CASE WHEN a.ie_tipo_atendimento=1 THEN Obter_Unidade_Atendimento(a.nr_atendimento,'PI','DT')  ELSE to_char(a.dt_entrada, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_nm_usuario))) END   ELSE to_char(a.dt_entrada, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_nm_usuario))) END  dt_internacao,
		obter_dados_aval_nutric(a.nr_atendimento, 'DN') ds_nutricional,
		(select max(a.dt_avaliacao)
		 from   aval_nutricao a
		 where  a.nr_atendimento = a.nr_atendimento
		 and    a.dt_liberacao is not null
		 and    a.dt_avaliacao = (select max(b.dt_avaliacao)
					  from   aval_nutricao b
					  where  b.nr_atendimento = a.nr_atendimento
					  and    b.dt_liberacao is not null)) dt_diag_nutricional,
		obter_dieta_lib_atend(a.nr_atendimento) ds_dieta_liberada,
		obter_cirurgia_paciente(a.nr_atendimento, 'P') ds_cirurgia,
		CASE WHEN substr(Obter_Se_atend_sae(a.nr_atendimento),1,1)='S' THEN  obter_desc_expressao(285693) END  ds_sae,
		obter_classif_esp_pac(a.nr_atendimento) ds_classif_esp_pac,
		coalesce((obter_tempo_p_ult_setor(a.nr_atendimento, 'QT',obter_unidade_atendimento(a.nr_atendimento, 'A','NR')))::numeric , 0) qt_dia_perman_unid,
		(select max(substr(obter_valor_dominio(1410,x.IE_TIPO_VAGA),1,100))
			from	gestao_vaga x
			where	x.nr_atendimento = a.nr_atendimento) ds_tipo_vaga,
		substr(panorama_proximo_leito_desej(a.nr_atendimento),1,255) ds_prox_leito_desej,
		substr(obter_classif_setor_solic_vaga(a.nr_atendimento),1,255) ds_classif_setor_solic,
		substr(panorama_obter_exame_agendado(a.nr_atendimento),1,255) ds_lista_exame_agendado,
		a.dt_previsto_alta,
		(select obter_nome_tipo_episodio(epipac.nr_seq_tipo_episodio) nr_seq_tipo_episodio
		 from episodio_paciente epipac
		 where nr_sequencia = a.nr_seq_episodio) ds_tipo_episodio
	from    atendimento_paciente a,
		nascimento nasc		
	where   a.nr_atendimento 	= nasc.nr_atend_rn
  and     nasc.nr_atend_rn 	is not null
	and     a.nr_atendimento_mae	is not null
	and	nasc.dt_inativacao is null
	and	nasc.dt_liberacao is not null
    and	substr(obter_se_ult_setor_rn(a.nr_atendimento, obter_unidade_atendimento(a.nr_atendimento, 'A','CS'),
														   obter_unidade_atendimento(a.nr_atendimento, 'A','UB'),
										                   obter_unidade_atendimento(a.nr_atendimento, 'A','UC')),1,1) = 'S'
	and     a.nr_atendimento_mae 	in (select n.nr_atendimento  
										  from unidade_atendimento n)
	) temp;

