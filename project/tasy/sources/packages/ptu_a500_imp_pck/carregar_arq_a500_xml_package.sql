-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Carregar o arquivo A500 de XML

CREATE TYPE reg_cabecalho AS (		nr_vertra_ptu_cab		varchar(2),	-- <nr_VerTra_PTU>	ptu_fatura.nr_versao_transacao		-
					cd_uni_destino_cab		varchar(4),	-- <cd_Uni_Destino>	ptu_fatura.cd_unimed_destino		-
					cd_uni_origem_cab		varchar(4),	-- <cd_Uni_Origem>	ptu_fatura.cd_unimed_origem		-
					dt_geracao_cab			varchar(8),	-- <dt_Geracao>		ptu_fatura.dt_geracao			-
					nr_competencia_cab		varchar(4),	-- <nr_Competencia>	ptu_fatura.nr_competencia		-
					tp_cobranca_cab			varchar(1),	-- <tp_Cobranca>	ptu_fatura.ie_classif_cobranca		-
					tp_documento1_cab		varchar(1),	-- <tp_Documento>	ptu_fatura.tp_documento_1		-
					nr_documento1_cab		varchar(255),	-- <nr_Documento>	ptu_fatura.nr_fatura			-
					dt_vencimento_doc1_cab		varchar(8),	-- <dt_VencimentoDoc>	ptu_fatura.dt_vencimento_fatura		-
					dt_emissao_doc1_cab		varchar(8),	-- <dt_EmissaoDoc>	ptu_fatura.dt_emissao_fatura		-
					vl_total_doc1_cab		varchar(12),	-- <vl_TotalDoc>	ptu_fatura.vl_total_fatura		-
					doc_fiscal1_cab			varchar(255),	-- <doc_Fiscal>		ptu_fatura.doc_fiscal_1		-
					nr_nota_fiscal_doc1_cab		varchar(255),	-- <nr_NotaFiscalDoc>	-				ptu_nota_fiscal.nr_nota_fiscal
					link_nfe_doc1_cab		varchar(255),	-- <link_NFeDoc>	-				ptu_nota_fiscal.ds_link_nfe
					vl_ir1_cab			varchar(12),	-- <VL_IR>		ptu_fatura.vl_ir			-
					tp_documento2_cab		varchar(1),	-- <tp_Documento>	ptu_fatura.tp_documento_2		-
					nr_documento2_cab		varchar(255),	-- <nr_Documento>	ptu_fatura.nr_nota_credito_debito		-
					dt_vencimento_doc2_cab		varchar(8),	-- <dt_VencimentoDoc>	ptu_fatura.dt_vencimento_ndc		-
					dt_emissao_doc2_cab		varchar(8),	-- <dt_EmissaoDoc>	ptu_fatura.dt_emissao_ndc		-
					vl_total_doc2_cab		varchar(12),	-- <vl_TotalDoc>	ptu_fatura.vl_total_ndc			-
					doc_fiscal2_cab			varchar(255),	-- <doc_Fiscal>	ptu_fatura.doc_fiscal_2		-
					nr_nota_fiscal_doc2_cab		varchar(255),	-- <nr_NotaFiscalDoc>	-				ptu_nota_fiscal.nr_nota_fiscal_doc2
					link_nfe_doc2_cab		varchar(255),	-- <link_NFeDoc>	-				ptu_nota_fiscal.ds_link_nfe_doc2
					hash				varchar(255),	-- HASH
					dt_postagem			varchar(255),	-- DATA POSTAGEM CARIMBO CMB
					nr_protocolo			varchar(10));
CREATE TYPE reg_guia_consulta AS (		id					varchar(255),
						cd_unimed_dad_ben			varchar(4),
						id_benef_dad_ben			varchar(13),
						nm_benef_dad_ben			varchar(25),
						id_rn_dad_ben				varchar(1),
						tp_paciente_dad_ben			varchar(1),
						nm_prest_cont_exec			varchar(70),
						CNES_cont_exec				varchar(7),
						cd_uni_prest_cont_exec			varchar(4),
						cd_prest_cont_exec			varchar(8),
						cd_cpf_cont_exec			varchar(11),
						cd_cnpj_cont_exec			varchar(14),
						cd_municipio_cont_exe			varchar(7),
						tp_rede_min_cont_exe			varchar(1),
						tp_prestador_cont_exe			varchar(2),
						id_rec_proprio_cont_exe			varchar(1),
						cd_cpf_prof_exec			varchar(14),
						cbo_prof_exec				varchar(6),
						cd_uni_prest_prof_exec			varchar(4),
						cd_prest_prof_exec			varchar(8),
						nm_prest_prof_exec			varchar(70),
						nr_ver_tiss_dad_gui			varchar(7),
						tp_consulta_dad_gui			varchar(1),
						nr_lote_prestador_dad_gui		varchar(12),
						dt_protocolo_dad_gui			varchar(8),
						dt_conhecimento_dad_gui			varchar(8),
						tp_ind_acidente_dad_gui			varchar(1),
						ie_cobertura_especial_dad_gui		varchar(2),
						ie_regime_atendimento_dad_gui		varchar(2),
						ie_saude_ocupacional_dad_gui		varchar(2),
						dt_atendimento_dad_gui			varchar(21),
						id_liminar_dad_gui			varchar(1),
						id_continuado_dad_gui			varchar(1),
						id_aviso_dad_gui			varchar(1),
						id_glosa_total_dad_gui			varchar(1),
						cd_excecao_dad_gui			varchar(1),
						nr_guia_tiss_prestador_dad_gui		varchar(20),
						nr_guia_tiss_operadora_dad_gui		varchar(20),
						nr_doc1_glosado_rea_glo			varchar(30),
						nr_doc2_glosado_rea_glo			varchar(30),
						nr_lote_prestador_gl_rea_glo		varchar(30),
						nr_guia_glosada_rea_glo			varchar(30),
						sg_conselho_prof_exec			varchar(12),
						nr_conselho_prof_exec			varchar(15),
						uf_prof_exec				varchar(2),
						nr_lote_rea_glo_txt			varchar(8),
						nr_nota_rea_glo_txt			varchar(20),
						nr_lote_prestador_xml_rea_glo		varchar(12),
						nr_guia_glosada_xml_rea_glo		varchar(20),
						nr_guia_tiss_oper_glo_rea_glo		varchar(20));
CREATE TYPE reg_proc_exec_dad_gui_cons AS (	id				varchar(255),
						seq_item_proc			varchar(4),
						tp_tabela_proc			varchar(2),
						cd_servico_proc			varchar(10),
						vl_servico_cobr_proc		varchar(255),
						tx_adm_servico_proc		varchar(255),
						cd_ato_proc			varchar(1),
						dt_pago_prestador_pag_pre	varchar(8),
					        vl_pago_prestador_pag_pre	varchar(255),
						dt_solicitacao_dad_aut		varchar(255),
						nr_autorizacao_dad_aut		varchar(10),
					        cd_uni_autori_dad_aut		varchar(10),
					        dt_autorizacao_dad_aut		varchar(255),
					        tp_autorizacao_dad_aut		varchar(1),
						id_item_unico_proc		varchar(28),
						id_avisado_item_proc		varchar(1));
CREATE TYPE reg_complemento_dad_gui_cons AS (	id_complemento			varchar(255),
						tp_complemento			varchar(1),
						nm_complemento			ptu_nota_complemento.ds_complemento%type);
CREATE TYPE reg_guia_internacao AS (		id				varchar(255),
						cd_unimed_dad_ben		varchar(4),
						id_benef_dad_ben		varchar(13),
						nm_benef_dad_ben		varchar(25),
						id_rn_dad_ben			varchar(1),
						tp_paciente_dad_ben		varchar(1),
						cd_cpf_dad_sol			varchar(11),
						cd_cnpj_dad_sol			varchar(14),
						cd_uni_prest_dad_sol		varchar(4),
						cd_prest_dad_sol		varchar(8),
						nome_dad_sol			varchar(40),
						cbo_dad_sol			varchar(6),
						nm_profissional_pro		varchar(60),
						sg_conselho_dad_con_pro		varchar(12),
						nr_conselho_dad_con_pro		varchar(15),
						uf_dad_con_pro			varchar(2),
						nome_prestador_dad_exe		varchar(255),
						CNES_prestador_dad_exe		varchar(7),
						cd_uni_prest_dad_exe		varchar(4),
						cd_prest_dad_exe		varchar(8),
						cd_cpf_dad_exe			varchar(11),
						cd_cnpj_dad_exe			varchar(14),
						cd_municipio_cont_dad_exe	varchar(7),
						tp_rede_min_dad_exe		varchar(1),
						tp_prestador_dad_exe		varchar(2),
						id_rec_proprio_dad_exe		varchar(5),
						tp_acomodacao_dad_int		varchar(2),
						ft_multiplicador_amb_dad_int	varchar(255),
						tp_internacao_dad_int		smallint,
						rg_internacao_dad_int		smallint,
						tp_indicador_acidente_dad_int	varchar(1),
						carater_atendimento_dad_int	varchar(1),
						motivo_encerramento_dad_int	varchar(2),
						dt_ultima_aut_dad_int		varchar(10),
						tp_fat_dad_int			smallint,
						dt_inicio_fat_dad_int		varchar(21),
						dt_fim_fat_dad_int		varchar(21),
						nr_ver_tiss_dad_gui		varchar(7),
						nr_lote_prestador_dad_gui	varchar(12),
						dt_protocolo_dad_gui		varchar(8),
						dt_conhecimento_dad_gui		varchar(10),
						nr_guia_tiss_prestador_dad_gui	varchar(20),
						nr_guia_tiss_operadora_dad_gui	varchar(20),
						nr_guia_tiss_principal_dad_gui	varchar(20),
						dt_atendimento_dad_gui		varchar(21),
						id_liminar_dad_gui		varchar(1),
						id_continuado_dad_gui		varchar(1),
						id_aviso_dad_gui		varchar(1),
						id_glosa_total_dad_gui		varchar(1),
						cd_excecao_dad_gui		varchar(1),
						dt_ultima_autorizacao_dad_gui	varchar(12),
						nr_doc1_glosado_rea_glo		varchar(30),
						nr_doc2_glosado_rea_glo		varchar(30),
						nr_lote_rea_glo_txt		varchar(8),
						nr_nota_rea_glo_txt		varchar(20),
						nr_lote_prestador_xml_rea_glo	varchar(12),
						nr_guia_glosada_xml_rea_glo	varchar(20),
						nr_guia_tiss_oper_glo_rea_glo	varchar(20),
						nm_medico_auditor_dad_aud	varchar(40),
						nr_crm_auditor_dad_aud		varchar(15),
						cd_uf_crm_dad_aud		varchar(2),
						nm_enfer_auditor_dad_aud	varchar(40),
						nr_coren_auditor_dad_aud	varchar(15),
						cd_uf_coren_dad_aud		varchar(2),
						CID_dad_int			varchar(6),
						CID_dad_int_2			varchar(6),
						CID_dad_int_3			varchar(6),
						CID_dad_int_4			varchar(6));
CREATE TYPE reg_proc_exec_dad_gui_int AS (	id				varchar(255),
						dt_execucao_pro			varchar(8),
						hr_inicial_pro			varchar(8),
						hr_final_pro			varchar(8),
						seq_item_pro			varchar(4),
						tp_tabela_pro			varchar(2),
						cd_servico_pro			varchar(10),
						ds_servico_pro			varchar(80),
						qt_cobrada_pro			varchar(255),
						via_acesso_pro			varchar(2),
						tc_utilizada_pro		varchar(1),
						id_acrescimo_pro		varchar(1),
						vl_serv_cobrado_val		varchar(255),
						vl_filme_cobrado_val		varchar(255),
						vl_co_cobrado_val		varchar(255),
						tx_adm_servico_tax		varchar(255),
						tx_adm_filme_tax		varchar(255),
						tx_adm_co_tax			varchar(255),
						un_medida_pro			varchar(3),
						ft_multiplicador_servico_pro	varchar(255),
						id_avisado_pro			varchar(1),
						id_pacote_pro			varchar(1),
						cd_pacote_pro			varchar(8),
						cd_porte_anestesico_pro		varchar(1),
						cd_cpf_for			varchar(11),
						cd_cnpj_for			varchar(14),
						nm_fornecedor_materi_opm_gen	varchar(60),
						det_registro_anvisa_opm_gen	varchar(50),
						nr_registro_anvisa_opm_gen	varchar(15),
						cd_referenci_mat_fab_opm_gen	varchar(60),
						nr_nota_fiscal_forne_opm_gen	varchar(20),
						id_pago_forne_opm_gen		varchar(1),
						dt_pago_prestador_pag_pre	varchar(8),
						vl_pago_prestador_pag_pre	varchar(255),
						cd_ato_equ_pro			varchar(1),
						dt_solicitacao_dad_aut		varchar(8),
						nr_autorizacao_dad_aut		varchar(10),
						dt_autorizacao_dad_aut		varchar(8),
						cd_uni_autorizadora_dad_aut	varchar(4),
						tp_autorizacao_dad_aut		varchar(1),
						id_item_unico_proc		varchar(28),
						id_avisado_item_proc		varchar(1));
CREATE TYPE reg_complemento_dad_gui_int AS (	id_complemento			varchar(255),
						tp_reg_cpl_dad_gui_com		varchar(1),
						nm_desc_compleme_dad_gui_com	ptu_nota_complemento.ds_complemento%type);
CREATE TYPE reg_complemento_hosp AS (	id                    	varchar(255),
					ds_declaracao_nascido 	varchar(11),
					cd_cid_obito          	varchar(4),
					ds_declaracao_obito   	varchar(11),
					ie_recem_nascido      	varchar(1));
CREATE TYPE reg_guia_sadt AS (			id				varchar(255),
						cd_unimed_dad_ben		varchar(4),
						id_benef_dad_ben		varchar(13),
						nm_benef_dad_ben		varchar(25),
						id_rn_dad_ben			varchar(1),
						tp_paciente_dad_ben		varchar(1),
						cd_cpf_dad_sol			varchar(11),
						cd_cnpj_dad_sol			varchar(14),
						cd_uni_prest_dad_sol		varchar(4),
						cd_prest_dad_sol		varchar(8),
						nome_dad_sol			varchar(40),
						cbo_dad_sol			varchar(6),
						nm_profissional_pro		varchar(60),
						sg_conselho_dad_con_pro		varchar(12),
						nr_conselho_dad_con_pro		varchar(15),
						uf_dad_con_pro			varchar(2),
						cd_uni_prest_dad_exe		varchar(4),
						cd_prest_dad_exe		varchar(8),
						nome_dad_exe			varchar(60),
						cd_cpf_dad_exe			varchar(11),
						cd_cnpj_dad_exe			varchar(14),
						cnes_dad_exe			varchar(7),
						cd_municipio_cont_dad_exe	varchar(7),
						tp_rede_min_dad_exe		varchar(1),
						tp_prestador_dad_exe		varchar(2),
						id_rec_proprio_dad_exe		varchar(1),
						tp_atendimento_dad_ate		varchar(2),
						tp_indacidente_dad_ate		varchar(1),
						tp_consulta_dad_ate		varchar(1),
						carater_atendimento_dad_ate	varchar(1),
						mv_encerramento_dad_ate		varchar(2),
						ie_cobertura_especial_dad_ate	varchar(2),
						ie_regime_atendimento_dad_ate	varchar(2),
						ie_saude_ocupacional_dad_ate	varchar(2),
						nr_ver_tiss_dad_gui		varchar(7),
						nr_lote_prestador_dad_gui	varchar(12),
						dt_protocolo_dad_gui		varchar(8),
						dt_conhecimento_dad_gui		varchar(8),
						nr_guia_tiss_prestador_dad_gui	varchar(20),
						nr_guia_tiss_operadora_dad_gui	varchar(20),
						nr_guia_tiss_principal_dad_gui	varchar(20),
						dt_atendimento_dad_gui		varchar(21),
						id_liminar_dad_gui		varchar(1),
						id_continuado_dad_gui		varchar(1),
						id_aviso_dad_gui		varchar(1),
						id_glosa_total_dad_gui		varchar(1),
						cd_excecao_dad_gui		varchar(1),
						dt_ultima_autorizacao_dad_gui	varchar(8),
						id_guia_principal_dad_gui	varchar(1),
						nr_doc1_glosado_rea_glo		varchar(30),
						nr_doc2_glosado_rea_glo		varchar(30),
						nr_lote_rea_glo_txt		varchar(8),
						nr_nota_rea_glo_txt		varchar(20),
						nr_lote_prestador_xml_rea_glo	varchar(12),
						nr_guia_glosada_xml_rea_glo	varchar(20),
						nr_guia_tiss_oper_glo_rea_glo	varchar(20));
CREATE TYPE reg_procediment_exec_dad_gui AS (	id				varchar(255),
						dt_execucao_pro			varchar(8),
						hr_inicial_pro			varchar(8),
						hr_final_pro			varchar(8),
						seq_item_pro			varchar(4),
						tp_tabela_pro			varchar(2),
						cd_servico_pro			varchar(10),
						ds_servico_pro			varchar(80),
						qt_cobrada_pro			varchar(255),
						via_acesso_pro			varchar(2),
						tc_utilizada_pro		varchar(1),
						id_acrescimo_pro		varchar(1),
						vl_serv_cobrado_val		varchar(255),
						vl_filme_cobrado_val		varchar(255),
						vl_co_cobrado_val		varchar(255),
						tx_adm_servico_tax		varchar(255),
						tx_adm_filme_tax		varchar(255),
						tx_adm_co_tax			varchar(255),
						un_medida_pro			varchar(3),
						ft_multiplicador_servico_pro	varchar(255),
						id_avisado_pro			varchar(1),
						id_pacote_pro			varchar(1),
						cd_pacote_pro			varchar(8),
						cd_ato_pro			varchar(1),
						cd_porte_anestesico_pro		varchar(1),
						cd_cpf_for			varchar(11),
						cd_cnpj_for			varchar(14),
						nm_fornecedor_materi_opm_gen	varchar(60),
						det_registro_anvisa_opm_gen	varchar(50),
						nr_registro_anvisa_opm_gen	varchar(15),
						cd_referenci_mat_fab_opm_gen	varchar(60),
						nr_nota_fiscal_forne_opm_gen	varchar(20),
						id_pago_forne_opm_gen		varchar(1),
						dt_pago_prestador_pag_pre	varchar(8),
						vl_pago_prestador_pag_pre	varchar(255),
						dt_solicitacao_dad_aut		varchar(8),
						nr_autorizacao_dad_aut		varchar(10),
						dt_autorizacao_dad_aut		varchar(8),
						cd_uni_autorizadora_dad_aut	varchar(4),
						tp_autorizacao_dad_aut		varchar(1),
						id_item_unico_proc		varchar(28),
						id_avisado_item_proc		varchar(1));
CREATE TYPE reg_complemento_dad_gui AS (	id_complemento			varchar(255),
						tp_reg_cpl_dad_gui_com		varchar(1),
						nm_desc_compleme_dad_gui_com	ptu_nota_complemento.ds_complemento%type);
CREATE TYPE reg_guia_honorarios AS (	id					varchar(255),
					cd_unimed_dad_ben			varchar(4),
                                        id_benef_dad_ben			varchar(13),
                                        nm_benef_dad_ben			varchar(25),
                                        id_rn_dad_ben				varchar(1),
                                        tp_paciente_dad_ben			varchar(1),
					nome_prestador_dad_exe			varchar(255),
					CNES_prestador_dad_exe			varchar(7),
					cd_uni_prest_dad_exe			varchar(4),
					cd_prest_dad_exe			varchar(8),
					cd_cpf_dad_exe				varchar(11),
					cd_cnpj_dad_exe				varchar(14),
					cd_municipio_cont_dad_exe		varchar(7),
					tp_rede_min_dad_exe			varchar(1),
					tp_prestador_dad_exe			varchar(2),
					id_rec_proprio_dad_exe			varchar(1),
					nr_ver_tiss_dad_gui			varchar(7),
					nr_lote_prestador_dad_gui		varchar(12),
					dt_protocolo_dad_gui			varchar(8),
					dt_conhecimento_dad_gui			varchar(8),
					dt_atendimento_dad_gui			varchar(21),
					id_liminar_dad_gui			varchar(1),
					id_continuado_dad_gui			varchar(1),
					id_aviso_dad_gui			varchar(1),
					id_glosa_total_dad_gui			varchar(1),
					cd_excecao_dad_gui			varchar(1),
					dt_ultima_autorizacao_dad_gui		varchar(8),
					dt_interncao_dad_gui			varchar(28),
                                        dt_alta_dad_gui				varchar(28),
					nr_guia_tiss_prestador_dad_gui		varchar(20),
					nr_guia_tiss_operadora_dad_gui		varchar(20),
					nr_guia_tiss_principal_dad_gui		varchar(20),
					nr_doc1_glosado_rea_glo			varchar(30),
					nr_doc2_glosado_rea_glo			varchar(30),
					nr_lote_rea_glo_txt			varchar(8),
					nr_nota_rea_glo_txt			varchar(20),
					nr_lote_prestador_xml_rea_glo		varchar(12),
					nr_guia_glosada_xml_rea_glo		varchar(20),
					nr_guia_tiss_oper_glo_rea_glo		varchar(20));
CREATE TYPE reg_dados_hosp_hon AS (	id					varchar(255),
					cd_unimed_hospital			varchar(4),
					cd_hospital				varchar(8),
					cnpj_hospital				varchar(14),
					nm_hospital				varchar(70),
					CNES_hospital				varchar(7));
CREATE TYPE reg_proc_exec_dad_gui_hon AS (	id				varchar(255),
						dt_execucao_pro			varchar(8),
                                                hr_inicial_pro			varchar(8),
                                                hr_final_pro			varchar(8),
						via_acesso_pro			varchar(2),
						tc_utilizada_pro		varchar(1),
						id_acrescimo_pro		varchar(1),
						un_medida_pro			varchar(3),
						ft_multiplicador_servico_pro	varchar(255),
						id_avisado_pro			varchar(1),
						id_pacote_pro			varchar(1),
						cd_pacote_pro			varchar(8),
						cd_porte_anestesico_pro		varchar(1),
						cd_ato_pro			varchar(1),
						seq_item_pro			varchar(4),
						tp_tabela_pro			varchar(2),
						cd_servico_pro			varchar(10),
						ds_servico_pro			varchar(80),
						qt_cobrada_pro			varchar(255),
						vl_serv_cobrado_pro		varchar(255),
						tx_adm_servico_pro		varchar(255),
						nm_fornecedor_materi_opm_gen	varchar(60),
						det_registro_anvisa_opm_gen	varchar(50),
						nr_registro_anvisa_opm_gen	varchar(15),
						cd_referenci_mat_fab_opm_gen	varchar(60),
						nr_nota_fiscal_forne_opm_gen	varchar(20),
						id_pago_forne_opm_gen		varchar(1),
						cd_cpf_for			varchar(11),
						cd_cnpj_for			varchar(14),
						vl_pago_prestador_pag_pre	varchar(255),
						dt_solicitacao_dad_aut		varchar(8),
						nr_autorizacao_dad_aut		varchar(10),
						cd_uni_autorizadora_dad_aut	varchar(4),
						dt_autorizacao_dad_aut		varchar(8),
						tp_autorizacao_dad_aut		varchar(1),
						id_item_unico_proc		varchar(28),
						id_avisado_item_proc		varchar(1));
CREATE TYPE reg_complemento_dad_gui_hon AS (	id_complemento			varchar(255),
						tp_reg_cpl_dad_gui_com		varchar(1),
						nm_desc_compleme_dad_gui_com	ptu_nota_complemento.ds_complemento%type);
CREATE TYPE reg_guia_nota_fiscal_for AS (	id				varchar(255),
						cd_unimed_dad_ben		varchar(4),
						id_benef_dad_ben		varchar(13),
						nr_guia_tiss_principal		varchar(20),
						dt_procedimento			varchar(8),
						nr_autorizacao			varchar(10),
						id_liminar			varchar(5),
						vl_procedimento			varchar(255),
						vl_adic_procedimento		varchar(255),
						nr_nota_fiscal_forn		varchar(20),
						nr_doc1_glosado_rea_glo		varchar(30),
						nr_doc2_glosado_rea_glo		varchar(30),
						nr_guia_glosada_rea_glo		varchar(30),
						cnpj_fornecedor			varchar(14),
						nm_fornecedor_material_nf	varchar(60),
						nr_nf_fornecedor_nf		varchar(20),
						dt_exec_info_opme		varchar(8),
						det_reg_anvisa_info_opme	varchar(50),
						nr_reg_anvisa_info_opme		varchar(15),
						cd_ref_mat_fab_info_opme	varchar(60));
CREATE TYPE reg_proc_dad_gui_nf AS (		id				varchar(255),
						seq_item_pro_info_opme		varchar(4),
						id_item_unico_pro_info_opme	varchar(28),
						tp_tabela_pro_info_opme		varchar(2),
						cd_servico_pro_info_opme	varchar(15),
						ds_servico_pro_info_opme	varchar(80),
						qt_cobrada_pro_info_opme	varchar(255));
CREATE TYPE reg_vlr_dad_gui_nf AS (		vl_procedimento			varchar(255),
						vl_adic_procedimento		varchar(255));
CREATE TYPE reg_cobr_reembolso AS (		id			varchar(255),
						cd_unimed_dad_ben	varchar(4),
						id_benef_dad_ben	varchar(13),
						nm_benef_dad_ben	varchar(25),
						dt_nasc_dad_ben		varchar(8),
						tp_sexo_dad_ben		varchar(1),
						id_rn_dad_ben		varchar(1),
						carater_atendimento	varchar(1),
						dt_reembolso		varchar(8),
						id_reem_par_int		varchar(5),
						cd_cnes			varchar(7),
						nm_prestador		varchar(70),
						cd_cpf_prest		varchar(11),
						cd_cnpj_prest		varchar(14),
						id_reembolso		varchar(20));
CREATE TYPE reg_cobr_reembolso_proc AS (	id			varchar(255),
						dt_exec_proc		varchar(8),
						tp_tabela_proc		varchar(2),
						cd_servico_proc		varchar(15),
						ds_servico_proc		varchar(80),
						qt_cobrada_proc		varchar(255),
						nm_prof_equ_reemb	varchar(70),
						tp_paticip_equ_reemb	varchar(1),
						sg_conselho_equ_reemb	varchar(12),
						nr_conselho_equ_reemb	varchar(15),
						uf_equ_reemb		varchar(2),
						nr_autorizacao_proc	varchar(10),
						vl_restituir_proc	varchar(255),
						vl_reem_benef_proc	varchar(255),
						vl_pago_benef_proc	varchar(255),
						seq_item_proc		varchar(4),
						id_item_unico_proc	varchar(28));
CREATE TYPE reg_ressarcimento_sus AS (		id			varchar(255),
						cd_unimed_dad_ben	varchar(4),
						id_benef_dad_ben	varchar(13),
						nm_benef_dad_ben	varchar(25),
						dt_nasc_dad_ben		varchar(8),
						tp_sexo_dad_ben		varchar(1),
						id_rn_dad_ben		varchar(1),
						carater_atendimento	varchar(1),					
						nm_prestador		varchar(70),
						cd_cpf_prest		varchar(11),
						cd_cnpj_prest		varchar(14),
						cd_cnes_proc		varchar(7));
CREATE TYPE reg_ressarcimento_sus_proc AS (	id			varchar(255),
						dt_exec_proc		varchar(8),
						cd_servico_proc		varchar(15),
						ds_servico_proc		varchar(80),
						qt_cobrada_proc		varchar(255),
						vl_reem_benef_proc	varchar(255),
						vl_pago_sus_proc	varchar(255),
						id_item_unico_proc	varchar(28));
CREATE TYPE reg_equipe_profissional AS ( 	id			varchar(255),
						tp_participacao		varchar(2),
						cd_uni_prest		varchar(4),
						cd_prest		varchar(8),
						nm_prest		varchar(60),
						cd_cpf          	varchar(11),
						sg_conselho     	varchar(12),
						nr_conselho       	varchar(15),
						uf_conselho      	varchar(2),
						nr_cbo          	varchar(6));


CREATE OR REPLACE PROCEDURE ptu_a500_imp_pck.carregar_arq_a500_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_fatura_p INOUT bigint) AS $body$
DECLARE

					
-- CABECALHO										         Tag		        PTU_FATURA	     	   PTU_NOTA_FISCAL
	-- NUMERO PROTOCOLO CARIMBO CMB
					
--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS GUIA DE CONSULTA ++++++++++++++++++++++++++++++++++++++++++++++


--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS GUIA DE INTERNACAO ++++++++++++++++++++++++++++++++++++++++++++++


						
--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS GUIA DE SP/SADT ++++++++++++++++++++++++++++++++++++++++++++++

-- GUIA SPSADT						


-- GUIA SPSADT - PROCEDIMENTOS EXECUTADOS



--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS GUIA DE HONORARIO ++++++++++++++++++++++++++++++++++++++++++++++

-- GUIA HONORARIO


-- GUIA HONORARIOS- PROCEDIMENTOS EXECUTADOS


-- GUIA HONORARIOS- PROCEDIMENTOS EXECUTADOS


--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS GUIA DE NOTA FISCAL DO FORNECEDOR ++++++++++++++++++++++++++++++++++++++++++++++
	

--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS REEMBOLSO ++++++++++++++++++++++++++++++++++++++++++++++


--  +++++++++++++++++++++++++++++++++++++++++++++++ DADOS RESSARCIMENTO SUS ++++++++++++++++++++++++++++++++++++++++++++++



-- Cabecalho

type tab_cabecalho is table of reg_cabecalho index by integer;

-- GUIA DE CONSULTA

type tab_guia_consulta is table of reg_guia_consulta index by integer;
type tab_guia_cons_proc_exec is table of reg_proc_exec_dad_gui_cons index by integer;
type tab_guia_cons_complemento is table of reg_complemento_dad_gui_cons index by integer;

-- GUIA INTERNACAO

type tab_guia_interncao is table of reg_guia_internacao index by integer;
type tab_guia_int_proc_exec is table of reg_proc_exec_dad_gui_int index by integer;
type tab_guia_int_complemento is table of reg_complemento_dad_gui_int index by integer;
type tab_guia_int_proc_eqp is table of reg_equipe_profissional index by integer;
type tab_guia_complemento_hosp is table of reg_complemento_hosp index by integer;

-- GUIA SP/SADT

type tab_guia_sadt is table of reg_guia_sadt index by integer;
type tab_guia_sadt_proc_exec is table of reg_procediment_exec_dad_gui index by integer;
type tab_guia_sadt_proc_eqp is table of reg_equipe_profissional index by integer;
type tab_guia_sadt_complemento is table of reg_complemento_dad_gui index by integer;

-- GUIA HONORARIOS

type tab_guia_honorario is table of reg_guia_honorarios index by integer;
type tab_guia_hon_proc_exec is table of reg_proc_exec_dad_gui_hon index by integer;
type tab_guia_hon_complemento is table of reg_complemento_dad_gui_hon index by integer;
type tab_guia_hon_proc_eqp is table of reg_equipe_profissional index by integer;
type tab_guia_hon_hospital is table of reg_dados_hosp_hon index by integer;

-- GUIA NOTA FISCAL FORNECEDOR

type tab_guia_nota_fiscal is table of reg_guia_nota_fiscal_for index by integer;
type tab_guia_nota_fiscal_proc is table of reg_proc_dad_gui_nf index by integer;
type tab_guia_nota_fiscal_vlr is table of reg_vlr_dad_gui_nf index by integer;

-- REEMBOLSO

type tab_cobr_reembolso is table of reg_cobr_reembolso index by integer;
type tab_cobr_reembolso_proc is table of reg_cobr_reembolso_proc index by integer;

-- RESSARCIMENTO SUS

type tab_ressarcimento_sus is table of reg_ressarcimento_sus index by integer;
type tab_ressarcimento_sus_proc is table of reg_ressarcimento_sus_proc index by integer;

-- VARIAVEIS CABECALHO

vet_tab_cabecalho_w		tab_cabecalho;
ica				integer;

-- VARIAVEIS GUIA DE CONSULTA

vet_tab_guia_consulta_w			tab_guia_consulta;
vet_tab_guia_cons_proc_exec_w		tab_guia_cons_proc_exec;
vet_tab_guia_cons_comp_w		tab_guia_cons_complemento;
igc					integer;
igcpe					integer;
igccp					integer;
hr_inicio_final_w			varchar(8);

-- VARIAVEIS GUIA DE INTERNACAO

vet_tab_guia_int_w			tab_guia_interncao;
vet_tab_guia_int_proc_exec_w		tab_guia_int_proc_exec;
ver_tab_guia_int_complemento_w		tab_guia_hon_complemento;
ver_tab_guia_compl_hosp_w  		tab_guia_complemento_hosp;
vet_tab_guia_int_proc_eqp_w		tab_guia_int_proc_eqp;
igi					integer;
igipe					integer;
igicp					integer;
igich         				integer;
igipp         				integer;

ie_tipo_pessoa_prestador_w		ptu_nota_servico.ie_tipo_pessoa_prestador%type;

-- VARIAVEIS GUIA SP/SADT

vet_tab_guia_sadt_w			tab_guia_sadt;
vet_tab_guia_sadt_proc_exec_w		tab_guia_sadt_proc_exec;
vet_tab_guia_sadt_proc_eqp_w		tab_guia_sadt_proc_eqp;
vet_tab_guia_sadt_comp_w		tab_guia_sadt_complemento;
igs					integer;
igspe					integer;
igscp					integer;
igspp         				integer;
nr_seq_ptu_fatura_w			ptu_fatura.nr_sequencia%type;
nr_seq_nota_cobr_w			ptu_nota_cobranca.nr_sequencia%type;
nr_seq_nota_serv_w			ptu_nota_servico.nr_sequencia%type;
nr_seq_nota_hosp_w      		ptu_nota_hospitalar.nr_sequencia%type;

-- VARIAVEIS GUIA HONORARIOS

vet_tab_guia_honorario_w		tab_guia_honorario;
vet_tab_guia_hon_proc_exec_w            tab_guia_hon_proc_exec;
vet_tab_guia_hon_complemento_w          tab_guia_hon_complemento;
vet_tab_guia_hon_hospital_w 		tab_guia_hon_hospital;
vet_tab_guia_hon_proc_eqp_w     	tab_guia_hon_proc_eqp;
igh					integer;
ighdh					integer;
ighpe					integer;
ighcp					integer;
ighpp         				integer;

-- VARIAVEIS GUIA DE NOTA FISCAL FORNECEDOR

vet_tab_guia_nota_fiscal_w		tab_guia_nota_fiscal;
vet_tab_guia_nf_proc_w			tab_guia_nota_fiscal_proc;
vet_tab_guia_nf_vlr_w			tab_guia_nota_fiscal_vlr;
ignf					integer;
ignfp					integer;

-- VARIAVEIS REEMBOLSO

vet_tab_cobr_reembolso_w		tab_cobr_reembolso;
vet_tab_cobr_reembolso_proc_w		tab_cobr_reembolso_proc;
icr					integer;
icrp					integer;
tp_pessoa_w				ptu_nota_cobranca_rrs.tp_pessoa%type;
nr_seq_nota_cobr_rrs_w			ptu_nota_cobranca_rrs.nr_sequencia%type;

-- VARIAVEIS RESSARCIMENTO SUS

vet_tab_ressarcimento_sus_w		tab_ressarcimento_sus;
vet_tab_res_sus_proc_w			tab_ressarcimento_sus_proc;
icrs					integer;
icrsp					integer;

-- VARIAVEIS PARA VALIDACOES

nr_seq_fatura_exist_w			ptu_fatura.nr_sequencia%type;
dt_recebimento_w			ptu_fatura.dt_recebimento_fatura%type;
cd_unimed_operadora_w			pls_congenere.cd_cooperativa%type;
vl_parametro_32_w			funcao_param_usuario.vl_parametro%type;
nr_seq_fatura_dev_w			ptu_fatura.nr_sequencia%type;
dt_devolucao_w				ptu_fatura.dt_devolucao%type;
vl_parametro_w				funcao_param_usuario.vl_parametro%type;
dt_mes_competencia_w			ptu_fatura.dt_mes_competencia%type;
ie_parametro_21_w			funcao_param_usuario.vl_parametro%type;
ie_parametro_33_w			funcao_param_usuario.vl_parametro%type;

-- VARIAVEIS CONVERSOES

ie_material_intercambio_w		pls_parametros.ie_material_intercambio%type;
ie_origem_proc_valido_w			pls_parametros.ie_origem_proc_valido%type;
ie_situacao_material_w			pls_parametros.ie_situacao_material%type;
ie_data_conv_mat_unimed_w		pls_parametros.ie_data_conv_mat_unimed%type;
nr_seq_material_w			ptu_nota_servico.nr_seq_material%type;
dt_ref_conv_mat_unimed_w		timestamp;
qt_proced_origem_w			bigint;
qt_regra_w				bigint := 0;
nr_seq_contrato_w			pls_segurado.nr_seq_contrato%type;
nr_seq_intercambio_w			pls_segurado.nr_seq_intercambio%type;
cd_mat_number_inter_w			numeric(30) := null;
ie_tipo_intercambio_w			pls_conversao_proc.ie_tipo_intercambio%type;
nr_seq_congenere_w			pls_congenere.nr_sequencia%type;
sg_estado_w				pessoa_juridica.sg_estado%type;
sg_estado_int_w				pessoa_juridica.sg_estado%type;
cd_proc_conversao_w			bigint;
ie_origem_proced_conv_w			bigint;
nr_seq_regra_conv_w			bigint;
ie_somente_codigo_w			pls_regra_conv_mat_interc.ie_somente_codigo%type;
qt_material_w				bigint;
cd_servico_mat_w			varchar(50);
ie_origem_proced_padrao_w		procedimento.ie_origem_proced%type;
qt_proc_valido_w			bigint;
nr_seq_aviso_material_w			ptu_aviso_material.nr_sequencia%type;
nr_seq_aviso_procedimento_w		ptu_aviso_procedimento.nr_sequencia%type;
cd_unimed_destino_w			ptu_fatura.cd_unimed_destino%type;
nr_carteira_benef_w			ptu_aviso_conta.nr_carteira_benef%type;
nr_seq_aviso_conta_w			ptu_aviso_conta.nr_sequencia%type;
id_aviso_item_w				ptu_nota_servico.id_aviso_item%type;
nr_seq_prest_inter_w			ptu_nota_cobranca.nr_seq_prest_inter%type;
cd_cgc_prestador_w			varchar(14);
nr_cpf_prestador_w			varchar(11);
nm_prestador_w				ptu_nota_cobranca.nm_prest_exec%type;
nr_seq_prestador_w   			pls_prestador.nr_sequencia%type;
ds_servico_w				ptu_nota_servico.ds_servico%type;
dt_emissao_fatura_w			ptu_fatura.dt_emissao_fatura%type;
ie_tipo_cobranca_fatura_w		ptu_fatura.ie_tipo_cobranca_fatura%type;
dt_alta_int_w				ptu_nota_cobranca.dt_alta%type;
dt_internacao_int_w			ptu_nota_cobranca.dt_internacao%type;
ie_novo_imp_a500_w			pls_visible_false.ie_novo_imp_a500%type;
cd_servico_w				ptu_nota_servico.cd_servico%type;
ie_tipo_tabela_w			ptu_nota_servico.ie_tipo_tabela%type;
ie_tipo_participacao_w			ptu_nota_servico.ie_tipo_participacao%type;
ie_origem_proc_pacote_w			procedimento.ie_origem_proced%type;

ie_pacote_intercambio_w 		pls_conversao_proc.ie_pacote_intercambio%type := 'N';
ie_priorizar_conv_pct_int_w		pls_parametros.ie_priorizar_conv_pct_int%type;
motivo_encerram_w			ptu_nota_cobranca.motivo_encerram%type;
nm_arquivo_w				ptu_fatura.nm_arquivo%type;
uf_conselho_w       			varchar(2);

-- CURSORES

--  +++++++++++++++++++++++++++++++++++++++++++++++ CABECALHO ++++++++++++++++++++++++++++++++++++++++++++++

-- CABECALHO

C01 CURSOR( nr_seq_arq_xml_pc	ptu_aviso_arq_xml.nr_sequencia%type ) FOR
	SELECT	xml.createxml(ds_arquivo) ds_arq_xml
	from	ptu_aviso_arq_xml
	where	nr_sequencia = nr_seq_arq_xml_pc;
	
c_cabecalho CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA500/cabecalho' passing ds_arq_xml_pc columns
		nr_vertra_ptu_cab			varchar(2)	path	'nrVerTra_PTU',
		unimed_cab				xml		path	'unimed',
		dados_aviso_cobranca			xml		path	'dadosAvisoCobranca');
			
	c_cabecalho_unimed CURSOR( unimed_pc		xml ) FOR
		SELECT	*
		from	xmltable('/unimed' passing unimed_pc columns
			cd_uni_destino_cab			varchar(4)	path	'cd_Uni_Destino',
			cd_uni_origem_cab			varchar(4)	path	'cd_Uni_Origem');
			
	c_cabecalho_dados_aviso_cobr CURSOR( dados_aviso_cobranca_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosAvisoCobranca' passing dados_aviso_cobranca_pc columns
			aviso_cab			xml		path	'Aviso',
			cobranca_cab			xml		path	'Cobranca');
		
		c_cabecalho_dados_aviso CURSOR( dados_aviso_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Aviso' passing dados_aviso_pc columns
				dt_geracao_cab				varchar(8)	path	'dt_Geracao',
				nr_competencia_cab			varchar(4)	path	'nr_Competencia');
		
		c_cabecalho_dados_cobranca CURSOR( dados_cobranca_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Cobranca' passing dados_cobranca_pc columns
				dt_geracao_cab				varchar(8)	path	'dt_Geracao',
				nr_competencia_cab			varchar(4)	path	'nr_Competencia',
				tp_cobranca_cab				varchar(1)	path	'tp_Cobranca',
				documento1_cab				xml		path	'documento1',
				documento2_cab				xml		path	'documento2');
		
		c_cabecalho_documento1 CURSOR( documento1_pc		xml ) FOR
			SELECT	*
			from	xmltable('/documento1' passing documento1_pc columns
				tp_documento_cab			varchar(1)	path	'tp_Documento',
				nr_documento_cab			varchar(255)	path	'nr_Documento',
				dt_vencimento_doc_cab			varchar(8)	path	'dt_VencimentoDoc',
				dt_emissao_doc_cab			varchar(8)	path	'dt_EmissaoDoc',
				vl_total_doc_cab			varchar(12)	path	'vl_TotalDoc',
				doc_fiscal_cab				varchar(255)	path	'doc_Fiscal',
				nfe_cab					xml		path	'NFE',
				vl_ir_cab				varchar(12)	path	'VL_IR');
				
			c_cabecalho_documento1_nfe CURSOR( nfe_pc		xml ) FOR
				SELECT	*
				from	xmltable('/NFE' passing nfe_pc columns
					nr_notafiscal_doc_cab			varchar(255)	path	'nr_NotaFiscalDoc',
					link_nfe_doc_cab			varchar(255)	path	'link_NFeDoc');
				
		c_cabecalho_documento2 CURSOR( documento2_pc		xml ) FOR
			SELECT	*
			from	xmltable('/documento2' passing documento2_pc columns
				tp_documento_cab			varchar(1)	path	'tp_Documento',
				nr_documento_cab			varchar(255)	path	'nr_Documento',
				dt_vencimento_doc_cab			varchar(8)	path	'dt_VencimentoDoc',
				dt_emissao_doc_cab			varchar(8)	path	'dt_EmissaoDoc',
				vl_total_doc_cab			varchar(12)	path	'vl_TotalDoc',
				doc_fiscal_cab				varchar(255)	path	'doc_Fiscal',
				nfe_cab					xml		path	'NFE');
				
			c_cabecalho_documento2_nfe CURSOR( nfe_pc		xml ) FOR
				SELECT	*
				from	xmltable('/NFE' passing nfe_pc columns
					nr_notafiscal_doc_cab			varchar(255)	path	'nr_NotaFiscalDoc',
					link_nfe_doc_cab			varchar(255)	path	'link_NFeDoc');
		
c_arquivo_a500 CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA500/arquivoA500' passing ds_arq_xml_pc columns
		tipo_guia				xml		path	'Tipoguia',
		cobranca_reembolso			xml		path	'CobrancaReembolso');
		
c_arquivo_a500_tipo_guia CURSOR( tipo_guia_pc		xml ) FOR
	SELECT	*
	from	xmltable('/Tipoguia' passing tipo_guia_pc columns
		guia_consulta				xml		path	'guiaConsulta',
		guia_sadt				xml		path	'guiaSADT',
		guia_internacao				xml		path	'guiaInternacao',
		guia_honorarios				xml		path	'guiaHonorarios',
		guia_nota_fiscal			xml		path	'notaFiscal_Fornecedor');

c_hash CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA500/hash' passing ds_arq_xml_pc columns
		hash					varchar(255)	path	'hash');

c_carimbo_cmb CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA500/carimboCMB' passing ds_arq_xml_pc columns
		dt_postagem				varchar(21)	path	'dt_postagem',
		nr_protocolo				varchar(10)	path	'nr_protocolo');
		
		
--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE CONSULTA ++++++++++++++++++++++++++++++++++++++++++++++

c_tipo_guia_consulta CURSOR( guia_consulta_pc		xml ) FOR
	SELECT	*
	from	xmltable('/guiaConsulta' passing guia_consulta_pc columns
		dados_beneficiario			xml		path	'dadosBeneficiario',
		contrato_executante			xml		path	'contratadoExecutante',
		profissional_executante			xml		path	'profissionalExecutante',
		dados_guia				xml		path	'dadosGuia',
		reapresentacao_glosado			xml		path	'reapresentacaoGlosado');

	-- <guiaConsulta> <dadosBeneficiario>

	c_dados_beneficiario_cons CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben			varchar(4)	path	'cd_Unimed',
			id_benef_dad_ben			varchar(13)	path	'id_Benef',
			nm_benef_dad_ben			varchar(25)	path	'nm_Benef',
			id_rn_dad_ben				varchar(1)	path	'id_RN',
			tp_paciente_dad_ben			varchar(1)	path	'tp_Paciente');

	-- <guiaConsulta> <contratadoExecutante>

	c_contrato_executante CURSOR( contrato_executante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/contratadoExecutante' passing contrato_executante_pc columns
			unimed_prestador_cont_exec	xml		path	'UnimedPrestador',
			nm_prest_cont_exec		varchar(70)	path	'nome',
			cpf_cnpj_cont_exec		xml		path	'CPF_CNPJ',
			CNES_cont_exec			varchar(7)	path	'CNES',
			prestador_cont_exec		xml		path	'prestador');

		-- <guiaConsulta> <contratadoExecutante> <UnimedPrestador>

		c_unimed_prestador_cont_exec CURSOR( unimed_prestador_cont_exec_pc		xml ) FOR
			SELECT	*
			from	xmltable('/UnimedPrestador' passing unimed_prestador_cont_exec_pc columns
				cd_uni_prest_cont_exec			varchar(4)	path	'cd_Uni_Prest',
				cd_prest_cont_exec			varchar(8)	path	'cd_Prest');

		-- <guiaConsulta> <contratadoExecutante> <CPF_CNPJ>

		c_cpf_cnpj_cont_exec CURSOR( cpf_cnpj_cont_execl_pc		xml ) FOR
			SELECT	*
			from	xmltable('/CPF_CNPJ' passing cpf_cnpj_cont_execl_pc columns
				cd_cpf_cont_exec			varchar(11)	path	'cd_cpf',
				cd_cnpj_cont_exec			varchar(14)	path	'cd_cnpj');

		-- <guiaConsulta> <contratadoExecutante> <prestador>

		c_prestador_cont_exec CURSOR( prestador_cont_exec_pc		xml ) FOR
			SELECT	*
			from	xmltable('/prestador' passing prestador_cont_exec_pc columns
				cd_municipio_cont_exe			varchar(7)	path	'cd_MunicipioCont',
				tp_rede_min_cont_exe			varchar(1)	path	'tp_RedeMin',
				tp_prestador_cont_exe			varchar(2)	path	'tp_Prestador',
				id_rec_proprio_cont_exe			varchar(1)	path	'id_RecProprio');

	-- <guiaConsulta> <profissionalExecutante>

	c_profissional_executante CURSOR( profissional_executante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/profissionalExecutante' passing profissional_executante_pc columns
			unimed_prof_exec			xml		path	'UnimedPrestador',
			nm_prest_prof_exec			varchar(70)	path	'nome',
			--cd_cpf_prof_exec			varchar2(14)	path	'cd_cpf',

			dados_conselho_prof_exec		xml		path	'dadosConselho',
			cbo_prof_exec				varchar(6)	path	'CBO');

		-- <guiaConsulta> <profissionalExecutante> <unimedPrestador>

		c_unimed_prestador_prof_exec CURSOR( unimed_prestador_prof_exec_pc		xml ) FOR
			SELECT	*
			from	xmltable('/UnimedPrestador' passing unimed_prestador_prof_exec_pc columns
				cd_uni_prest_prof_exec			varchar(4)	path	'cd_Uni_Prest',
				cd_prest_prof_exec			varchar(8)	path	'cd_Prest');

		-- <guiaConsulta> <profissionalExecutante> <dadosConselho>

		c_dados_conselho_prof_exec CURSOR( dados_conselho_prof_exec_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosConselho' passing dados_conselho_prof_exec_pc columns
				sg_conselho_prof_exec			varchar(12)	path	'sg_Conselho',
				nr_conselho_prof_exec			varchar(15)	path	'nr_Conselho',
				uf_prof_exec				varchar(2)	path	'UF');

	-- <guiaConsulta> <dadosGuia>

	c_dados_guia_consulta CURSOR( dados_guia_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosGuia' passing dados_guia_pc columns
			nr_ver_tiss_dad_gui			varchar(7)	path	'nr_Ver_TISS',
			tp_consulta_dad_gui			varchar(1)	path	'tp_Consulta',
			nr_lote_prestador_dad_gui		varchar(12)	path	'nr_LotePrestador',
			dt_protocolo_dad_gui			varchar(8)	path	'dt_Protocolo',
			dt_conhecimento_dad_gui			varchar(8)	path	'dt_Conhecimento',
			nr_guias_dad_gui			xml		path	'nr_Guias',
			tp_ind_acidente_dad_gui			varchar(1)	path	'tp_IndAcidente',
			ie_cobertura_especial_dad_gui		varchar(2)	path	'coberturaEspecial',
			ie_regime_atendimento_dad_gui		varchar(2)	path	'regimeAtendimento',
			ie_saude_ocupacional_dad_gui		varchar(2)	path	'saudeOcupacional',
			dt_atendimento_dad_gui			varchar(21)	path	'dt_Atendimento',
			id_liminar_dad_gui			varchar(1)	path	'id_Liminar',
			id_continuado_dad_gui			varchar(1)	path	'id_Continuado',
			id_aviso_dad_gui			varchar(1)	path	'id_Avisado',
			id_glosa_total_dad_gui			varchar(1)	path	'id_GlosaTotal',
			cd_excecao_dad_gui			varchar(1)	path	'cd_Excecao',
			procedimentos_dad_gui			xml		path	'procedimentos',
			dados_autorizacao_dad_gui		xml		path	'dadosAutorizacao',
			compleme_dad_gui_com			xml		path	'complemento');

		-- <guiaConsulta> <dadosGuia> <nr_Guias>

		c_nr_guias_dad_gui_cons CURSOR( nr_guias_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_Guias' passing nr_guias_dad_gui_pc columns
				nr_guia_tiss_prestador_dad_gui		varchar(20)	path	'nr_GuiaTissPrestador',
				nr_guia_tiss_operadora_dad_gui		varchar(20)	path	'nr_GuiaTissOperadora');

		-- <guiaConsulta> <dadosGuia> <procedimentos>

		c_procedimentos_cons CURSOR( procedimentos_pc		xml ) FOR
			SELECT	*
			from	xmltable('/procedimentos' passing procedimentos_pc columns
				seq_item_proc				varchar(4)	path	'seq_item',
				tp_tabela_proc				varchar(2)	path	'tp_Tabela',
				cd_servico_proc				varchar(10)	path	'cd_Servico',
				vl_servico_cobr_proc			varchar(255)	path	'vl_ServCobrado',
				tx_adm_servico_proc			varchar(255)	path	'tx_AdmServico',
				cd_ato_proc				varchar(1)	path	'cd_Ato',
				id_item_unico_proc			varchar(28)	path	'id_itemUnico',
				id_avisado_item_proc			varchar(1)	path	'id_AvisadoItem');
		
		-- <guiaConsulta> <dadosGuia> <dadosAutorizacao>

		c_dados_autorizacao_cons CURSOR( dados_autorizacao_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosAutorizacao' passing dados_autorizacao_pc columns
				dt_solicitacao_dad_aut					varchar(255)	path	'dt_Solicitacao',
				nr_autorizacao_dad_aut					varchar(10)	path	'nr_Autorizacao',
				cd_uni_autori_dad_aut					varchar(10)	path	'cd_UniAutorizadora',
				dt_autorizacao_dad_aut					varchar(255)	path	'dt_Autorizacao',
				tp_autorizacao_dad_aut					varchar(1)	path	'tp_Autorizacao');

		-- <guiaConsulta> <dadosGuia> <complemento>

		c_complemento_cons CURSOR( complemento_pc		xml ) FOR
			SELECT	*
			from	xmltable('/complemento' passing complemento_pc columns
				tp_complemento						varchar(1)	path	'tp_RegCPL',
				nm_complemento						varchar(500)	path	'nm_DescComplemento');
				
		-- <guiaConsulta> <reapresentacaoGlosado>

		c_rea_glo_rea_glo_cons CURSOR( reapresentacao_glo_rea_glo_pc		xml ) FOR
			SELECT	*
			from	xmltable('/reapresentacaoGlosado' passing reapresentacao_glo_rea_glo_pc columns
				nr_doc1_glosado_rea_glo			varchar(30)	path	'nr_DOC1Glosado',
				nr_doc2_glosado_rea_glo			varchar(30)	path	'nr_DOC2Glosado',
				dados_lote_guia				xml		path	'DadosLoteGuia');
				
			-- <guiaConsulta> <reapresentacaoGlosado> <DadosLoteGuia>

			c_dados_lote_guia_cons CURSOR( dados_lote_guia_pc		xml ) FOR
				SELECT	*
				from	xmltable('/DadosLoteGuia' passing dados_lote_guia_pc columns
					txt				xml		path	'TXT',
					xml				xml		path	'XML');
				
				-- <guiaConsulta> <reapresentacaoGlosado> <DadosLoteGuia> <TXT>

				c_dados_guia_txt_cons CURSOR( dados_guia_txt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/TXT' passing dados_guia_txt_pc columns
						nr_lote_rea_glo_txt			varchar(8)	path	'nr_Lote',
						nr_nota_rea_glo_txt			varchar(20)	path	'nr_Nota');
					
				-- <guiaConsulta> <reapresentacaoGlosado> <DadosLoteGuia> <XML>

				c_dados_guia_xml_cons CURSOR( dados_guia_xml_pc		xml ) FOR
					SELECT	*
					from	xmltable('/XML' passing dados_guia_xml_pc columns
						nr_lote_prestador_xml_rea_glo		varchar(12)	path	'nr_LotePrestador',
						nr_guia_glosada_xml_rea_glo		varchar(20)	path	'nr_GuiaTissPrestador',
						nr_guia_tiss_oper_glo_rea_glo		varchar(20)	path	'nr_GuiaTissOperadora');
				
--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE SP/SADT ++++++++++++++++++++++++++++++++++++++++++++++

c_guia_sadt CURSOR( guia_sadt_pc		xml ) FOR
	SELECT	*
	from	xmltable('/guiaSADT' passing guia_sadt_pc columns
		dados_beneficiario			xml		path	'dadosBeneficiario',
		dados_solicitante			xml		path	'dadosSolicitante',
		dados_executante			xml		path	'dadosExecutante',
		dados_atendimento			xml		path	'dadosAtendimento',
		dados_guia				xml		path	'dadosGuia',
		reapresentacao_glosado			xml		path	'reapresentacaoGlosado');
		
	-- <guiaSADT> <dadosBeneficiario>

	c_dados_beneficiario CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben			varchar(4)	path	'cd_Unimed',
			id_benef_dad_ben			varchar(13)	path	'id_Benef',
			nm_benef_dad_ben			varchar(25)	path	'nm_Benef',
			id_rn_dad_ben				varchar(1)	path	'id_RN',
			tp_paciente_dad_ben			varchar(1)	path	'tp_Paciente');
			
	-- <guiaSADT> <dadosSolicitante>

	c_dados_solicitante CURSOR( dados_solicitante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosSolicitante' passing dados_solicitante_pc columns
			contratado_solicitante_dad_sol		xml		path	'contratadoSolicitante',
			profissional_dad_sol			xml		path	'profissional');
			
		-- <guiaSADT> <dadosSolicitante> <contratadoSolicitante>

		c_contratado_solicitante CURSOR( contratado_solicitante_pc		xml ) FOR
			SELECT	*
			from	xmltable('/contratadoSolicitante' passing contratado_solicitante_pc columns
				cpf_cnpj_dad_sol			xml		path	'cpf_cnpj',
				unimed_prestador_dad_sol		xml		path	'UnimedPrestador',
				nome_dad_sol				varchar(40)	path	'nome');
				
			-- <guiaSADT> <dadosSolicitante> <contratadoSolicitante> <cpf_cnpj>

			c_cpf_cnpj_dad_sol CURSOR( cpf_cnpj_dad_sol_pc		xml ) FOR
				SELECT	*
				from	xmltable('/cpf_cnpj' passing cpf_cnpj_dad_sol_pc columns
					cd_cpf_dad_sol				varchar(11)	path	'cd_cpf',
					cd_cnpj_dad_sol				varchar(14)	path	'cd_cnpj');
					
			-- <guiaSADT> <dadosSolicitante> <contratadoSolicitante> <UnimedPrestador>

			c_unimed_prestador_dad_sol CURSOR( unimed_prestador_dad_sol_pc		xml ) FOR
				SELECT	*
				from	xmltable('/UnimedPrestador' passing unimed_prestador_dad_sol_pc columns
					cd_uni_prest_dad_sol			varchar(4)	path	'cd_Uni_Prest',
					cd_prest_dad_sol			varchar(8)	path	'cd_Prest');
					
		-- <guiaSADT> <dadosSolicitante> <profissional>

		c_profissional CURSOR( profissional_pc		xml ) FOR
			SELECT	*
			from	xmltable('/profissional' passing profissional_pc columns
				nm_profissional_pro			varchar(60)	path	'nm_Profissional',
				dados_conselho_pro			xml		path	'dadosConselho',
				cbo_dad_sol				varchar(6)	path	'CBO');
				
			-- <guiaSADT> <dadosSolicitante> <profissional> <dadosConselho>

			c_dados_conselho_pro CURSOR( dados_conselho_pro_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosConselho' passing dados_conselho_pro_pc columns
					sg_conselho_dad_con_pro			varchar(12)	path	'sg_Conselho',
					nr_conselho_dad_con_pro			varchar(15)	path	'nr_Conselho',
					uf_dad_con_pro				varchar(2)	path	'UF');
					
	-- <guiaSADT> <dadosExecutante>

	c_dados_executante CURSOR( dados_executante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosExecutante' passing dados_executante_pc columns
			unimed_prestador_dad_exe		xml		path	'UnimedPrestador',
			nome_dad_exe				varchar(60)	path	'nome',
			cpf_cnpj_dad_exe			xml		path	'CPF_CNPJ',
			cnes_dad_exe				varchar(7)	path	'CNES',
			prestador_dad_exe			xml		path	'prestador');
			
		-- <guiaSADT> <dadosExecutante> <UnimedPrestador>

		c_unimed_prestador_dad_exe CURSOR( unimed_prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/UnimedPrestador' passing unimed_prestador_dad_exe_pc columns
				cd_uni_prest_dad_exe			varchar(4)	path	'cd_Uni_Prest',
				cd_prest_dad_exe			varchar(8)	path	'cd_Prest');
				
		-- <guiaSADT> <dadosExecutante> <CPF_CNPJ>

		c_cpf_cnpj_dad_exe CURSOR( cpf_cnpj_pc		xml ) FOR
			SELECT	*
			from	xmltable('/CPF_CNPJ' passing cpf_cnpj_pc columns
				cd_cpf_dad_exe				varchar(11)	path	'cd_cpf',
				cd_cnpj_dad_exe				varchar(14)	path	'cd_cnpj');
				
		-- <guiaSADT> <dadosExecutante> <prestador>

		c_prestador_dad_exe CURSOR( prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/prestador' passing prestador_dad_exe_pc columns
				cd_municipio_cont_dad_exe		varchar(7)	path	'cd_MunicipioCont',
				tp_rede_min_dad_exe			varchar(1)	path	'tp_RedeMin',
				tp_prestador_dad_exe			varchar(2)	path	'tp_Prestador',
				id_rec_proprio_dad_exe			varchar(1)	path	'id_RecProprio');
				
	-- <guiaSADT> <dadosAtendimento>

	c_dados_atendimento_dad_ate CURSOR( dados_atendimento_dad_ate_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosAtendimento' passing dados_atendimento_dad_ate_pc columns
			tp_atendimento_dad_ate			varchar(2)	path	'tp_Atendimento',
			tp_indacidente_dad_ate			varchar(1)	path	'tp_IndAcidente',
			tp_consulta_dad_ate			varchar(1)	path	'tp_Consulta',
			carater_atendimento_dad_ate		varchar(1)	path	'caraterAtendimento',
			mv_encerramento_dad_ate			varchar(2)	path	'mv_Encerramento',
			ie_cobertura_especial_dad_ate		varchar(2)	path	'coberturaEspecial',
			ie_regime_atendimento_dad_ate		varchar(2)	path	'regimeAtendimento',
			ie_saude_ocupacional_dad_ate		varchar(2)	path	'saudeOcupacional');
			
	-- <guiaSADT> <dadosGuia>

	c_dados_guia_dad_gui CURSOR( dados_guia_dad_gui_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosGuia' passing dados_guia_dad_gui_pc columns
			nr_ver_tiss_dad_gui			varchar(7)	path	'nr_Ver_TISS',
			nr_lote_prestador_dad_gui		varchar(12)	path	'nr_LotePrestador',
			dt_protocolo_dad_gui			varchar(8)	path	'dt_Protocolo',
			dt_conhecimento_dad_gui			varchar(8)	path	'dt_Conhecimento',
			nr_guias_dad_gui			xml		path	'nr_Guias',
			dt_atendimento_dad_gui			varchar(21)	path	'dt_Atendimento',
			id_liminar_dad_gui			varchar(1)	path	'id_Liminar',
			id_continuado_dad_gui			varchar(1)	path	'id_Continuado',
			id_aviso_dad_gui			varchar(1)	path	'id_Avisado',
			cd_excecao_dad_gui			varchar(1)	path	'cd_Excecao',
			id_glosa_total_dad_gui			varchar(1)	path	'id_GlosaTotal',
			procedimentos_exec_dad_gui		xml		path	'procedimentosExecutados',
			dt_ultima_autorizacao_dad_gui		varchar(8)	path	'dt_UltimaAutorizacao',
			compleme_dad_gui_com			xml		path	'complemento',
			id_guia_principal_dad_gui		varchar(1)	path	'id_GuiaPrincipal');
			
		-- <guiaSADT> <dadosGuia> <nr_Guias>

		c_nr_guias_dad_gui CURSOR( nr_guias_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_Guias' passing nr_guias_dad_gui_pc columns
				nr_guia_tiss_prestador_dad_gui		varchar(20)	path	'nr_GuiaTissPrestador',
				nr_guia_tiss_operadora_dad_gui		varchar(20)	path	'nr_GuiaTissOperadora',
				nr_guia_tiss_principal_dad_gui		varchar(20)	path	'nr_GuiaTissPrincipal');
				
		-- <guiaSADT> <dadosGuia> <procedimentosExecutados>

		c_procediment_exec_dad_gui CURSOR( procediment_exec_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/procedimentosExecutados' passing procediment_exec_dad_gui_pc columns
				dt_execucao_pro				varchar(8)	path	'dt_Execucao',
				hr_inicial_pro				varchar(8)	path	'hr_Inicial',
				hr_final_pro				varchar(8)	path	'hr_Final',
				procedimentos_pro			xml		path	'procedimentos',
				via_acesso_pro				varchar(2)	path	'via_Acesso',
				tc_utilizada_pro			varchar(1)	path	'tc_Utilizada',
				id_acrescimo_pro			varchar(1)	path	'id_Acrescimo',
				valores_pro				xml		path	'valores',
				taxas_pro				xml		path	'taxas',
				un_medida_pro				varchar(3)	path	'un_Medida',
				ft_multiplicador_servico_pro		varchar(255)	path	'ft_MultiplicadorServico',
				id_avisado_item_proc			varchar(1)	path	'id_AvisadoItem',
				id_avisado_pro				varchar(1)	path	'id_Avisado',
				id_pacote_pro				varchar(1)	path	'id_Pacote',
				cd_pacote_pro				varchar(8)	path	'cd_Pacote',
				cd_porte_anestesico_pro			varchar(1)	path	'cd_PorteAnestesico',
				dados_opme_generico_pro			xml		path	'dadosOPME',
				equipe_profissional_pro			xml		path	'equipe_Profissional',
				cd_ato_pro				varchar(1)	path	'cd_Ato',
				dados_autorizacao_pro			xml		path	'dadosAutorizacao');
				
			-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <procedimentos>

			c_procedimentos CURSOR( procedimentos_pc		xml ) FOR
				SELECT	*
				from	xmltable('/procedimentos' passing procedimentos_pc columns
					seq_item_pro				varchar(4)	path	'seq_item',
					id_item_unico_proc			varchar(28)	path	'id_itemUnico',
					tp_tabela_pro				varchar(2)	path	'tp_Tabela',
					cd_servico_pro				varchar(10)	path	'cd_Servico',
					ds_servico_pro				varchar(80)	path	'ds_Servico',
					qt_cobrada_pro				varchar(255)	path	'qt_Cobrada');
					
			-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <valores>

			c_valores CURSOR( valores_pc		xml ) FOR
				SELECT	*
				from	xmltable('/valores' passing valores_pc columns
					vl_serv_cobrado_val			varchar(255)	path	'vl_ServCobrado',
					vl_filme_cobrado_val			varchar(255)	path	'vl_FilmeCobrado',
					vl_co_cobrado_val			varchar(255)	path	'vl_CO_Cobrado');
					
			-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <taxas>

			c_taxas CURSOR( taxas_pc		xml ) FOR
				SELECT	*
				from	xmltable('/taxas' passing taxas_pc columns
					tx_adm_servico_tax				varchar(255)	path	'tx_AdmServico',
					tx_adm_filme_tax				varchar(255)	path	'tx_AdmFilme',
					tx_adm_co_tax					varchar(255)	path	'tx_AdmCO');
					
			-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <dadosOPME>

			c_dados_opme_generico CURSOR( dados_opme_generico_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosOPME' passing dados_opme_generico_pc columns
					pago_fornecedor_opm_SADT		xml		path	'Pago_Fornecedor',
					det_registro_anvisa_opm_gen		varchar(50)	path	'det_RegistroAnvisa',
					nr_registro_anvisa_opm_gen		varchar(15)	path	'nr_RegistroAnvisa',
					cd_referenci_mat_fab_opm_gen		varchar(60)	path	'cd_ReferenciaMat_Fab');
					
				-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <dadosOPME> <Pago_Fornecedor>

				c_pago_fornecedor_SADT CURSOR( pago_fornecedor_sadt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Pago_Fornecedor' passing pago_fornecedor_sadt_pc columns
						cd_cnpj_for				varchar(14)	path	'CNPJ_Fornecedor',
						nm_fornecedor_materi_opm_gen		varchar(60)	path	'nm_FornecedorMaterial',
						nr_nota_fiscal_forne_opm_gen		varchar(20)	path	'nr_NotaFiscalFornecedor');
				
			-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <equipe_Profissional>

			c_equipe_profissional CURSOR( equipe_profissional_pc		xml ) FOR
				SELECT	*
				from	xmltable('/equipe_Profissional' passing equipe_profissional_pc columns
					tp_participacao_equ_pro				varchar(2)	path	'tp_Participacao',
					prestador_equ_pro				xml		path	'Prestador',
					nm_profissional_equ_pro				varchar(60)	path	'nm_Profissional',
					cd_cpf_equ_pro					varchar(11)	path	'cd_cpf',
					dados_conselho_equ_pro				xml		path	'dadosConselho',
					cbo_equ_pro					varchar(6)	path	'CBO');
					
				-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <Prestador>

				c_prestador_equ_pre CURSOR( prestador_equ_pre_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Prestador' passing prestador_equ_pre_pc columns
						cd_uni_prest_pro_equ_pro			varchar(4)	path	'cd_Uni_Prest',
						cd_prest_pro_equ_pro				varchar(8)	path	'cd_Prest');
						
				-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <dadosConselho>

				c_dados_conselho_equ_pro CURSOR( dados_conselho_equ_pro_pc		xml ) FOR
					SELECT	*
					from	xmltable('/dadosConselho' passing dados_conselho_equ_pro_pc columns
						sg_conselho_dad_con_equ_pro			varchar(12)	path	'sg_Conselho',
						nr_conselho_dad_con_equ_pro			varchar(15)	path	'nr_Conselho',
						uf_dad_con_equ_pro				varchar(2)	path	'UF');
						
			-- <guiaSADT> <nr_Guias> <procedimentosExecutados> <dadosAutorizacao>

			c_dados_autorizacao CURSOR( dados_autorizacao_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosAutorizacao' passing dados_autorizacao_pc columns
					dt_solicitacao_dad_aut			varchar(8)	path	'dt_Solicitacao',
					nr_autorizacao_dad_aut			varchar(10)	path	'nr_Autorizacao',
					cd_uni_autorizadora_dad_aut		varchar(4)	path	'cd_UniAutorizadora',
					dt_autorizacao_dad_aut			varchar(8)	path	'dt_Autorizacao',
					tp_autorizacao_dad_aut			varchar(1)	path	'tp_Autorizacao');
					
		-- <guiaSADT> <dadosGuia> <complemento>

		c_compleme_dad_gui_com CURSOR( compleme_dad_gui_com_pc		xml ) FOR
			SELECT	*
			from	xmltable('/complemento' passing compleme_dad_gui_com_pc columns
				tp_reg_cpl_dad_gui_com			varchar(1)	path	'tp_RegCPL',
				nm_desc_compleme_dad_gui_com		varchar(500)	path	'nm_DescComplemento');
			
	-- <guiaSADT> <reapresentacaoGlosado>

	c_reapresentacao_glo_rea_glo CURSOR( reapresentacao_glo_rea_glo_pc		xml ) FOR
		SELECT	*
		from	xmltable('/reapresentacaoGlosado' passing reapresentacao_glo_rea_glo_pc columns
			nr_doc1_glosado_rea_glo			varchar(30)	path	'nr_DOC1Glosado',
			nr_doc2_glosado_rea_glo			varchar(30)	path	'nr_DOC2Glosado',
			dados_lote_guia				xml		path	'DadosLoteGuia');
			
			-- <guiaSADT> <reapresentacaoGlosado> <DadosLoteGuia>

			c_dados_lote_guia_SADT CURSOR( dados_lote_guia_pc		xml ) FOR
				SELECT	*
				from	xmltable('/DadosLoteGuia' passing dados_lote_guia_pc columns
					txt				xml		path	'TXT',
					xml				xml		path	'XML');
				
				-- <guiaSADT> <reapresentacaoGlosado> <DadosLoteGuia> <TXT>

				c_dados_guia_txt_SADT CURSOR( dados_guia_txt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/TXT' passing dados_guia_txt_pc columns
						nr_lote_rea_glo_txt			varchar(8)	path	'nr_Lote',
						nr_nota_rea_glo_txt			varchar(20)	path	'nr_Nota');
					
				-- <guiaSADT> <reapresentacaoGlosado> <DadosLoteGuia> <XML>

				c_dados_guia_xml_SADT CURSOR( dados_guia_xml_pc		xml ) FOR
					SELECT	*
					from	xmltable('/XML' passing dados_guia_xml_pc columns
						nr_lote_prestador_xml_rea_glo		varchar(12)	path	'nr_LotePrestador',
						nr_guia_glosada_xml_rea_glo		varchar(20)	path	'nr_GuiaTissPrestador',
						nr_guia_tiss_oper_glo_rea_glo		varchar(20)	path	'nr_GuiaTissOperadora');

--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE INTERNACAO ++++++++++++++++++++++++++++++++++++++++++++++

c_tipo_guia_internacao CURSOR( guia_internacao_pc		xml ) FOR
	SELECT	*
	from	xmltable('/guiaInternacao' passing guia_internacao_pc columns
		dados_beneficiario			xml		path	'dadosBeneficiario',
		dados_solicitante			xml		path	'dadosSolicitante',
		dados_executante			xml		path	'dadosExecutante',
		dados_internacao			xml		path	'dadosInternacao',
		dados_saida_internacao			xml		path	'dadosSaidaInternacao',
		dados_auditoria				xml		path	'dadosAuditoria',
		dados_guia				xml		path	'dadosGuia',
		reapresentacao_glosado			xml		path	'reapresentacaoGlosado');

	-- <guiainternacao> <dadosBeneficiario>

	c_dados_beneficiario_int CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben			varchar(4)	path	'cd_Unimed',
			id_benef_dad_ben			varchar(13)	path	'id_Benef',
			nm_benef_dad_ben			varchar(25)	path	'nm_Benef',
			id_rn_dad_ben				varchar(1)	path	'id_RN',
			tp_paciente_dad_ben			varchar(1)	path	'tp_Paciente');
			
	-- <guiainternacao> <dadosSolicitante>

	c_dados_solicitante_int CURSOR( dados_solicitante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosSolicitante' passing dados_solicitante_pc columns
			contratado_solicitante_dad_sol		xml		path	'contratadoSolicitante',
			profissional_dad_sol			xml		path	'profissional');
			
		-- <guiainternacao> <dadosSolicitante> <contratadoSolicitante>

		c_contratado_solicitante_int CURSOR( contratado_solicitante_pc		xml ) FOR
			SELECT	*
			from	xmltable('/contratadoSolicitante' passing contratado_solicitante_pc columns
				cpf_cnpj_dad_sol			xml		path	'cpf_cnpj',
				unimed_prestador_dad_sol		xml		path	'UnimedPrestador',
				nome_dad_sol				varchar(40)	path	'nome');
				
			-- <guiainternacao> <dadosSolicitante> <contratadoSolicitante> <cpf_cnpj>

			c_cpf_cnpj_dad_sol_int CURSOR( cpf_cnpj_dad_sol_pc		xml ) FOR
				SELECT	*
				from	xmltable('/cpf_cnpj' passing cpf_cnpj_dad_sol_pc columns
					cd_cpf_dad_sol				varchar(11)	path	'cd_cpf',
					cd_cnpj_dad_sol				varchar(14)	path	'cd_cnpj');
					
			-- <guiainternacao> <dadosSolicitante> <contratadoSolicitante> <UnimedPrestador>

			c_unimed_prestador_dad_sol_int CURSOR( unimed_prestador_dad_sol_pc		xml ) FOR
				SELECT	*
				from	xmltable('/UnimedPrestador' passing unimed_prestador_dad_sol_pc columns
					cd_uni_prest_dad_sol			varchar(4)	path	'cd_Uni_Prest',
					cd_prest_dad_sol			varchar(8)	path	'cd_Prest');
		-- <guiainternacao> <dadosSolicitante> <profissional>

		c_profissional_int CURSOR( profissional_pc		xml ) FOR
			SELECT	*
			from	xmltable('/profissional' passing profissional_pc columns
				nm_profissional_pro			varchar(60)	path	'nm_Profissional',
				dados_conselho_pro			xml		path	'dadosConselho',
				cbo_dad_sol				varchar(6)	path	'CBO');
				
			-- <guiainternacao> <dadosSolicitante> <profissional> <dadosConselho>

			c_dados_conselho_pro_int CURSOR( dados_conselho_pro_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosConselho' passing dados_conselho_pro_pc columns
					sg_conselho_dad_con_pro			varchar(12)	path	'sg_Conselho',
					nr_conselho_dad_con_pro			varchar(15)	path	'nr_Conselho',
					uf_dad_con_pro				varchar(2)	path	'UF');

	-- <guiainternacao> <dadosExecutante>

	c_dados_executante_int CURSOR( dados_executante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosExecutante' passing dados_executante_pc columns
			unimed_prestador_dad_exe		xml		path	'UnimedPrestador',
			nome_prestador_dad_exe			varchar(255)	path	'nome',
			cd_cnpj_dad_exe				varchar(14)	path	'CNPJ',
			CNES_prestador_dad_exe			varchar(7)	path	'CNES',
			prestador_dad_exe			xml		path	'prestador');
			
		-- <guiainternacao> <dadosExecutante> <UnimedPrestador>

		c_unimed_prestador_dad_exe_int CURSOR( unimed_prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/UnimedPrestador' passing unimed_prestador_dad_exe_pc columns
				cd_uni_prest_dad_exe			varchar(4)	path	'cd_Uni_Prest',
				cd_prest_dad_exe			varchar(8)	path	'cd_Prest');
				
		-- <guiainternacao> <dadosExecutante> <prestador>

		c_prestador_dad_exe_int CURSOR( prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/prestador' passing prestador_dad_exe_pc columns
				cd_municipio_cont_dad_exe		varchar(7)	path	'cd_MunicipioCont',
				tp_rede_min_dad_exe			varchar(1)	path	'tp_RedeMin',
				tp_prestador_dad_exe			varchar(2)	path	'tp_Prestador',
				id_rec_proprio_dad_exe			varchar(5)	path	'id_RecProprio');

	-- <guiainternacao> <dadosInternacao>

	c_dados_internacao CURSOR( dados_internacao_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosInternacao' passing dados_internacao_pc columns
			tp_acomodacao_dad_int				varchar(2)	path	'tp_Acomodacao',
			ft_multiplicador_amb_dad_int			varchar(255)	path	'ft_Multiplicador_AMB',
			tp_internacao_dad_int				varchar(1)	path	'tp_Internacao',
			rg_internacao_dad_int				varchar(1)	path	'rg_Internacao',
			carater_atendimento_dad_int			varchar(1)	path	'caraterAtendimento',
			dados_faturamento_dad_int			xml		path	'dadosFaturamento',
			dados_declaracoes_dad_int			xml		path	'dadosDeclaracoes');
	
		-- <guiainternacao> <dadosInternacao> <dadosFaturamento>

		c_dados_faturamento_dad_int CURSOR( dados_faturamento_dad_int_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosFaturamento' passing dados_faturamento_dad_int_pc columns
				tp_fat_dad_int				varchar(1)	path	'tp_Faturamento',
				dt_inicio_fat_dad_int			varchar(21)	path	'dt_IniFaturamento',
				dt_fim_fat_dad_int			varchar(21)	path	'dt_FimFaturamento');
		
		-- <guiainternacao> <dadosInternacao> <dadosDeclaracoes>

		c_dados_declaracoes_dad_int CURSOR( dados_declaracoes_dad_int_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosDeclaracoes' passing dados_declaracoes_dad_int_pc columns
				ds_declaracao_nascido			varchar(11)	path	'declaracao_Nascido',
				cd_cid_obito			        varchar(4)	path	'CID_Obito',
				ds_declaracao_obito			varchar(11)	path	'declaracao_Obito',
				ie_recem_nascido			varchar(1)	path	'indicadorDO_RN');
				
				
	-- <guiainternacao> <dadosInternacao>

	c_dados_saida_internacao CURSOR( dados_saida_internacao_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosSaidaInternacao' passing dados_saida_internacao_pc columns
			tp_indicador_acidente_dad_int			varchar(1)	path	'tp_IndAcidente',
			motivo_encerramento_dad_int			varchar(2)	path	'mv_Encerramento',
			CID_dad_int					varchar(6)	path	'CID[1]',
			CID_dad_int_2					varchar(6)	path	'CID[2]',
			CID_dad_int_3					varchar(6)	path	'CID[3]',
			CID_dad_int_4					varchar(6)	path	'CID[4]');
	
	-- <guiainternacao> <dadosAuditoria>

	c_dados_auditoria_int CURSOR( dados_auditoria_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosAuditoria' passing dados_auditoria_pc columns
			nm_medico_auditor_dad_aud			varchar(40)	path	'nm_MedicoAuditor',
			nr_crm_auditor_dad_aud				varchar(15)	path	'nr_CrmAuditor',
			cd_uf_crm_dad_aud				varchar(2)	path	'cd_UFCRM',
			nm_enfer_auditor_dad_aud			varchar(40)	path	'nm_EnfAuditor',
			nr_coren_auditor_dad_aud			varchar(15)	path	'nr_CorenAuditor',
			cd_uf_coren_dad_aud				varchar(2)	path	'cd_UFCoren');
			
	-- <guiainternacao> <dadosGuia>

	c_dados_guia_int CURSOR( dados_guia_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosGuia' passing dados_guia_pc columns
			nr_ver_tiss_dad_gui			varchar(7)	path	'nr_Ver_TISS',
			nr_lote_prestador_dad_gui		varchar(12)	path	'nr_LotePrestador',
			dt_protocolo_dad_gui			varchar(8)	path	'dt_Protocolo',
			dt_conhecimento_dad_gui			varchar(8)	path	'dt_Conhecimento',
			nr_guias_dad_gui			xml		path	'nr_Guias',
			dt_atendimento_dad_gui			varchar(21)	path	'dt_Atendimento',
			id_liminar_dad_gui			varchar(1)	path	'id_Liminar',
			id_continuado_dad_gui			varchar(1)	path	'id_Continuado',
			id_aviso_dad_gui			varchar(1)	path	'id_Avisado',
			cd_excecao_dad_gui			varchar(1)	path	'cd_Excecao',
			id_glosa_total_dad_gui			varchar(1)	path	'id_GlosaTotal',
			procedimentos_exec_dad_gui		xml		path	'procedimentosExecutados',
			dt_ultima_autorizacao_dad_gui		varchar(12)	path	'dt_UltimaAutorizacao',
			compleme_dad_gui_com			xml		path	'complemento');
			
		-- <guiainternacao> <dadosGuia> <nr_Guias>

		c_nr_guias_dad_gui_int CURSOR( nr_guias_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_Guias' passing nr_guias_dad_gui_pc columns
				nr_guia_tiss_prestador_dad_gui		varchar(20)	path	'nr_GuiaTissPrestador',
				nr_guia_tiss_operadora_dad_gui		varchar(20)	path	'nr_GuiaTissOperadora',
				nr_guia_tiss_principal_dad_gui		varchar(20)	path	'nr_GuiaTissPrincipal');
				
		-- <guiainternacao> <dadosGuia> <procedimentosExecutados>

		c_procediment_exec_dad_gui_int CURSOR( procediment_exec_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/procedimentosExecutados' passing procediment_exec_dad_gui_pc columns
				dt_execucao_pro				varchar(8)	path	'dt_Execucao',
				hr_inicial_pro				varchar(8)	path	'hr_Inicial',
				hr_final_pro				varchar(8)	path	'hr_Final',
				procedimentos_pro			xml		path	'procedimentos',
				via_acesso_pro				varchar(2)	path	'via_Acesso',
				tc_utilizada_pro			varchar(1)	path	'tc_Utilizada',
				id_acrescimo_pro			varchar(1)	path	'id_Acrescimo',
				valores_pro				xml		path	'valores',
				taxas_pro				xml		path	'taxas',
				un_medida_pro				varchar(3)	path	'un_Medida',
				ft_multiplicador_servico_pro		varchar(255)	path	'ft_MultiplicadorServico',
				id_avisado_item_proc			varchar(1)	path	'id_AvisadoItem',
				id_avisado_pro				varchar(1)	path	'id_Avisado',
				id_pacote_pro				varchar(1)	path	'id_Pacote',
				cd_pacote_pro				varchar(8)	path	'cd_Pacote',
				cd_porte_anestesico_pro			varchar(1)	path	'cd_PorteAnestesico',
				dados_opme_generico_pro			xml		path	'dadosOPME',
				equipe_profissional_pro			xml		path	'equipe_Profissional',
				cd_ato_equ_pro				varchar(1)	path	'cd_Ato',
				dados_autorizacao_pro			xml		path	'dadosAutorizacao');
				
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <procedimentos>

			c_procedimentos_int CURSOR( procedimentos_pc		xml ) FOR
				SELECT	*
				from	xmltable('/procedimentos' passing procedimentos_pc columns
					seq_item_pro				varchar(4)	path	'seq_item',
					id_item_unico_proc			varchar(28)	path	'id_itemUnico',
					tp_tabela_pro				varchar(2)	path	'tp_Tabela',
					cd_servico_pro				varchar(10)	path	'cd_Servico',
					ds_servico_pro				varchar(80)	path	'ds_Servico',
					qt_cobrada_pro				varchar(255)	path	'qt_Cobrada');
					
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <valores>

			c_valores_int CURSOR( valores_pc		xml ) FOR
				SELECT	*
				from	xmltable('/valores' passing valores_pc columns
					vl_serv_cobrado_val			varchar(255)	path	'vl_ServCobrado',
					vl_filme_cobrado_val			varchar(255)	path	'vl_FilmeCobrado',
					vl_co_cobrado_val			varchar(255)	path	'vl_CO_Cobrado');
					
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <taxas>

			c_taxas_int CURSOR( taxas_pc		xml ) FOR
				SELECT	*
				from	xmltable('/taxas' passing taxas_pc columns
					tx_adm_servico_tax				varchar(255)	path	'tx_AdmServico',
					tx_adm_filme_tax				varchar(255)	path	'tx_AdmFilme',
					tx_adm_co_tax					varchar(255)	path	'tx_AdmCO');
					
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <dadosOPME>

			c_dados_opme_generico_int CURSOR( dados_opme_generico_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosOPME' passing dados_opme_generico_pc columns
					pago_fornecedor_opm_int			xml		path	'Pago_Fornecedor',
					det_registro_anvisa_opm_gen		varchar(50)	path	'det_RegistroAnvisa',
					nr_registro_anvisa_opm_gen		varchar(15)	path	'nr_RegistroAnvisa',
					cd_referenci_mat_fab_opm_gen		varchar(60)	path	'cd_ReferenciaMat_Fab');
					
				-- <guiaSADT> <dadosGuia> <procedimentosExecutados> <dadosOPME> <Pago_Fornecedor>

				c_pago_fornecedor_int CURSOR( pago_fornecedor_int_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Pago_Fornecedor' passing pago_fornecedor_int_pc columns
						cd_cnpj_for				varchar(14)	path	'CNPJ_Fornecedor',
						nm_fornecedor_materi_opm_gen		varchar(60)	path	'nm_FornecedorMaterial',
						nr_nota_fiscal_forne_opm_gen		varchar(20)	path	'nr_NotaFiscalFornecedor');
	
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <equipe_Profissional>

			c_equipe_profissional_int CURSOR( equipe_profissional_pc		xml ) FOR
				SELECT	*
				from	xmltable('/equipe_Profissional' passing equipe_profissional_pc columns
					tp_participacao_equ_pro				varchar(2)	path	'tp_Participacao',
					prestador_equ_pro				xml		path	'Prestador',
					nm_profissional_equ_pro				varchar(60)	path	'nm_Profissional',
					cd_cpf_equ_pro					varchar(11)	path	'cd_cpf',
					dados_conselho_equ_pro				xml		path	'dadosConselho',
					cbo_equ_pro					varchar(6)	path	'CBO');
					
				-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <Prestador>

				c_prestador_equ_pre_int CURSOR( prestador_equ_pre_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Prestador' passing prestador_equ_pre_pc columns
						cd_uni_prest_pro_equ_pro			varchar(4)	path	'cd_Uni_Prest',
						cd_prest_pro_equ_pro				varchar(8)	path	'cd_Prest');
						
				-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <dadosConselho>

				c_dados_conselho_equ_pro_int CURSOR( dados_conselho_equ_pro_pc		xml ) FOR
					SELECT	*
					from	xmltable('/dadosConselho' passing dados_conselho_equ_pro_pc columns
						sg_conselho_dad_con_equ_pro			varchar(12)	path	'sg_Conselho',
						nr_conselho_dad_con_equ_pro			varchar(15)	path	'nr_Conselho',
						uf_dad_con_equ_pro				varchar(2)	path	'UF');
						
			-- <guiainternacao> <dadosGuia> <procedimentosExecutados> <dadosAutorizacao>

			c_dados_autorizacao_int CURSOR( dados_autorizacao_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosAutorizacao' passing dados_autorizacao_pc columns
					dt_solicitacao_dad_aut			varchar(8)	path	'dt_Solicitacao',
					nr_autorizacao_dad_aut			varchar(10)	path	'nr_Autorizacao',
					cd_uni_autorizadora_dad_aut		varchar(4)	path	'cd_UniAutorizadora',
					dt_autorizacao_dad_aut			varchar(8)	path	'dt_Autorizacao',
					tp_autorizacao_dad_aut			varchar(1)	path	'tp_Autorizacao');
					
		-- <guiainternacao> <dadosGuia> <complemento>

		c_compleme_dad_gui_com_int CURSOR( compleme_dad_gui_com_pc		xml ) FOR
			SELECT	*
			from	xmltable('/complemento' passing compleme_dad_gui_com_pc columns
				tp_reg_cpl_dad_gui_com			varchar(1)	path	'tp_RegCPL',
				nm_desc_compleme_dad_gui_com		varchar(500)	path	'nm_DescComplemento');

	-- <guiainternacao> <reapresentacaoGlosado>

	c_rea_glo_rea_glo_int CURSOR( reapresentacao_glo_rea_glo_pc		xml ) FOR
		SELECT	*
		from	xmltable('/reapresentacaoGlosado' passing reapresentacao_glo_rea_glo_pc columns
			nr_doc1_glosado_rea_glo			varchar(30)	path	'nr_DOC1Glosado',
			nr_doc2_glosado_rea_glo			varchar(30)	path	'nr_DOC2Glosado',
			dados_lote_guia				xml		path	'DadosLoteGuia');

			-- <guiaInternacao> <reapresentacaoGlosado> <DadosLoteGuia>

			c_dados_lote_guia_int CURSOR( dados_lote_guia_pc		xml ) FOR
				SELECT	*
				from	xmltable('/DadosLoteGuia' passing dados_lote_guia_pc columns
					txt				xml		path	'TXT',
					xml				xml		path	'XML');

				-- <guiaInternacao> <reapresentacaoGlosado> <DadosLoteGuia> <TXT>

				c_dados_guia_txt_int CURSOR( dados_guia_txt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/TXT' passing dados_guia_txt_pc columns
						nr_lote_rea_glo_txt			varchar(8)	path	'nr_Lote',
						nr_nota_rea_glo_txt			varchar(20)	path	'nr_Nota');

				-- <guiaInternacao> <reapresentacaoGlosado> <DadosLoteGuia> <XML>

				c_dados_guia_xml_int CURSOR( dados_guia_xml_pc		xml ) FOR
					SELECT	*
					from	xmltable('/XML' passing dados_guia_xml_pc columns
						nr_lote_prestador_xml_rea_glo		varchar(12)	path	'nr_LotePrestador',
						nr_guia_glosada_xml_rea_glo		varchar(20)	path	'nr_GuiaTissPrestador',
						nr_guia_tiss_oper_glo_rea_glo		varchar(20)	path	'nr_GuiaTissOperadora');

--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE HONORARIOS ++++++++++++++++++++++++++++++++++++++++++++++

c_tipo_guia_honorarios CURSOR( guia_honorarios_pc		xml ) FOR
	SELECT	*
	from	xmltable('/guiaHonorarios' passing guia_honorarios_pc columns
		dados_beneficiario			xml		path	'dadosBeneficiario',
		dados_hospital				xml		path	'dadosHospital',
		dados_executante			xml		path	'dadosExecutante',
		data_faturamento			xml		path	'dataFaturamento',
		dados_guia				xml		path	'dadosGuia',
		reapresentacao_glosado			xml		path	'reapresentacaoGlosado');

	-- <guiaHonorarios> <dadosBeneficiario>

	c_dados_beneficiario_hon CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben			varchar(4)	path	'cd_Unimed',
			id_benef_dad_ben			varchar(13)	path	'id_Benef',
			nm_benef_dad_ben			varchar(25)	path	'nm_Benef',
			id_rn_dad_ben				varchar(1)	path	'id_RN',
			tp_paciente_dad_ben			varchar(1)	path	'tp_Paciente');

	-- <guiaHonorarios> <dadosHospital>

	c_dados_hospital_hon CURSOR( dados_hospital_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosHospital' passing dados_hospital_pc columns
			cd_unimed_hospital			varchar(4)	path	'cd_uniHospitalar',
			cd_hospital				varchar(8)	path	'cd_Hospitalar',
			cnpj_hospital				varchar(14)	path	'CNPJHospital',
			nm_hospital				varchar(70)	path	'nm_Hospital',
			CNES_hospital				varchar(7)	path	'CNES');

	-- <guiaHonorarios> <dadosExecutante>

	c_dados_executante_hon CURSOR( dados_executante_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosExecutante' passing dados_executante_pc columns
			unimed_prestador_dad_exe		xml		path	'UnimedPrestador',
			nome_prestador_dad_exe			varchar(255)	path	'nome',
			cpf_cnpj_dad_exe			xml		path	'CPF_CNPJ',
			CNES_prestador_dad_exe			varchar(7)	path	'CNES',
			prestador_dad_exe			xml		path	'prestador');

		-- <guiaHonorarios> <dadosExecutante> <UnimedPrestador>

		c_unimed_prestador_dad_exe_hon CURSOR( unimed_prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/UnimedPrestador' passing unimed_prestador_dad_exe_pc columns
				cd_uni_prest_dad_exe			varchar(4)	path	'cd_Uni_Prest',
				cd_prest_dad_exe			varchar(8)	path	'cd_Prest');
				
		-- <guiaHonorarios> <dadosExecutante> <CPF_CNPJ>

		c_cpf_cnpj_dad_exe_hon CURSOR( cpf_cnpj_pc		xml ) FOR
			SELECT	*
			from	xmltable('/CPF_CNPJ' passing cpf_cnpj_pc columns
				cd_cpf_dad_exe				varchar(11)	path	'cd_cpf',
				cd_cnpj_dad_exe				varchar(14)	path	'cd_cnpj');
				
		-- <guiaHonorarios> <dadosExecutante> <prestador>

		c_prestador_dad_exe_hon CURSOR( prestador_dad_exe_pc		xml ) FOR
			SELECT	*
			from	xmltable('/prestador' passing prestador_dad_exe_pc columns
				cd_municipio_cont_dad_exe		varchar(7)	path	'cd_MunicipioCont',
				tp_rede_min_dad_exe			varchar(1)	path	'tp_RedeMin',
				tp_prestador_dad_exe			varchar(2)	path	'tp_Prestador',
				id_rec_proprio_dad_exe			varchar(1)	path	'id_RecProprio');

	-- <guiaHonorarios> <dataFaturamento>

	c_data_faturamento_guia_hon CURSOR( data_faturamento_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dataFaturamento' passing data_faturamento_pc columns
			dt_interncao_dad_gui			varchar(28)	path	'dt_IniFaturamento',
			dt_alta_dad_gui				varchar(28)	path	'dt_FimFaturamento');

	-- <guiaHonorarios> <dadosGuia>

	c_dados_guia_hon CURSOR( dados_guia_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosGuia' passing dados_guia_pc columns
			nr_ver_tiss_dad_gui			varchar(7)	path	'nr_Ver_TISS',
			nr_lote_prestador_dad_gui		varchar(12)	path	'nr_LotePrestador',
			dt_protocolo_dad_gui			varchar(8)	path	'dt_Protocolo',
			dt_conhecimento_dad_gui			varchar(8)	path	'dt_Conhecimento',
			nr_guias_dad_gui			xml		path	'nr_Guias',
			dt_atendimento_dad_gui			varchar(21)	path	'dt_Atendimento',
			id_liminar_dad_gui			varchar(1)	path	'id_Liminar',
			id_continuado_dad_gui			varchar(1)	path	'id_Continuado',
			id_aviso_dad_gui			varchar(1)	path	'id_Avisado',
			cd_excecao_dad_gui			varchar(1)	path	'cd_Excecao',
			id_glosa_total_dad_gui			varchar(1)	path	'id_GlosaTotal',
			procedimentos_exec_dad_gui		xml		path	'procedimentosExecutados',
			dt_ultima_autorizacao_dad_gui		varchar(8)	path	'dt_UltimaAutorizacao',
			compleme_dad_gui_com			xml		path	'complemento');
			
		-- <guiaHonorarios> <dadosGuia> <nr_Guias>

		c_nr_guias_dad_gui_hon CURSOR( nr_guias_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_Guias' passing nr_guias_dad_gui_pc columns
				nr_guia_tiss_prestador_dad_gui		varchar(20)	path	'nr_GuiaTissPrestador',
				nr_guia_tiss_operadora_dad_gui		varchar(20)	path	'nr_GuiaTissOperadora',
				nr_guia_tiss_principal_dad_gui		varchar(20)	path	'nr_GuiaTissPrincipal');

		-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados>

		c_procediment_exec_dad_gui_hon CURSOR( procediment_exec_dad_gui_pc		xml ) FOR
			SELECT	*
			from	xmltable('/procedimentosExecutados' passing procediment_exec_dad_gui_pc columns
				dt_execucao_pro				varchar(8)	path	'dt_Execucao',
				hr_inicial_pro				varchar(8)	path	'hr_Inicial',
				hr_final_pro				varchar(8)	path	'hr_Final',
				procedimentos_pro			xml		path	'procedimentos',
				via_acesso_pro				varchar(2)	path	'via_Acesso',
				tc_utilizada_pro			varchar(1)	path	'tc_Utilizada',
				id_acrescimo_pro			varchar(1)	path	'id_Acrescimo',
				vl_serv_cobrado_pro			varchar(255)	path	'vl_ServCobrado',
				tx_adm_servico_pro			varchar(255)	path	'tx_AdmServico',
				ft_multiplicador_servico_pro		varchar(255)	path	'ft_MultiplicadorServico',
				id_avisado_item_proc			varchar(1)	path	'id_AvisadoItem',
				id_avisado_pro				varchar(1)	path	'id_Avisado',
				id_pacote_pro				varchar(1)	path	'id_Pacote',
				cd_pacote_pro				varchar(8)	path	'cd_Pacote',
				cd_porte_anestesico_pro			varchar(1)	path	'cd_PorteAnestesico',
				equipe_profissional_pro			xml		path	'equipe_Profissional',
				cd_ato_pro				varchar(1)	path	'cd_Ato',
				dados_autorizacao_pro			xml		path	'dadosAutorizacao');

			-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados> <procedimentos>

			c_procedimentos_hon CURSOR( procedimentos_pc		xml ) FOR
				SELECT	*
				from	xmltable('/procedimentos' passing procedimentos_pc columns
					seq_item_pro				varchar(4)	path	'seq_item',
					id_item_unico_proc			varchar(28)	path	'id_itemUnico',
					tp_tabela_pro				varchar(2)	path	'tp_Tabela',
					cd_servico_pro				varchar(10)	path	'cd_Servico',
					ds_servico_pro				varchar(80)	path	'ds_Servico',
					qt_cobrada_pro				varchar(255)	path	'qt_Cobrada');
					
			-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados> <equipe_Profissional>

			c_equipe_profissional_hon CURSOR( equipe_profissional_pc		xml ) FOR
				SELECT	*
				from	xmltable('/equipe_Profissional' passing equipe_profissional_pc columns
					tp_participacao_equ_pro				varchar(2)	path	'tp_Participacao',
					prestador_equ_pro				xml		path	'Prestador',
					nm_profissional_equ_pro				varchar(60)	path	'nm_Profissional',
					cd_cpf_equ_pro					varchar(11)	path	'cd_cpf',
					dados_conselho_equ_pro				xml		path	'dadosConselho',
					cbo_equ_pro					varchar(6)	path	'CBO');
					
				-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <Prestador>

				c_prestador_equ_pre_hon CURSOR( prestador_equ_pre_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Prestador' passing prestador_equ_pre_pc columns
						cd_uni_prest_pro_equ_pro			varchar(4)	path	'cd_Uni_Prest',
						cd_prest_pro_equ_pro				varchar(8)	path	'cd_Prest');
						
				-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados> <equipe_Profissional> <dadosConselho>

				c_dados_conselho_equ_pro_hon CURSOR( dados_conselho_equ_pro_pc		xml ) FOR
					SELECT	*
					from	xmltable('/dadosConselho' passing dados_conselho_equ_pro_pc columns
						sg_conselho_dad_con_equ_pro			varchar(12)	path	'sg_Conselho',
						nr_conselho_dad_con_equ_pro			varchar(15)	path	'nr_Conselho',
						uf_dad_con_equ_pro				varchar(2)	path	'UF');
						
			-- <guiaHonorarios> <dadosGuia> <procedimentosExecutados> <dadosAutorizacao>

			c_dados_autorizacao_hon CURSOR( dados_autorizacao_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosAutorizacao' passing dados_autorizacao_pc columns
					dt_solicitacao_dad_aut			varchar(8)	path	'dt_Solicitacao',
					nr_autorizacao_dad_aut			varchar(10)	path	'nr_Autorizacao',
					cd_uni_autorizadora_dad_aut		varchar(4)	path	'cd_UniAutorizadora',
					dt_autorizacao_dad_aut			varchar(8)	path	'dt_Autorizacao',
					tp_autorizacao_dad_aut			varchar(1)	path	'tp_Autorizacao');

		-- <guiaHonorarios> <dadosGuia> <complemento>

		c_compleme_dad_gui_com_hon CURSOR( compleme_dad_gui_com_pc		xml ) FOR
			SELECT	*
			from	xmltable('/complemento' passing compleme_dad_gui_com_pc columns
				tp_reg_cpl_dad_gui_com			varchar(1)	path	'tp_RegCPL',
				nm_desc_compleme_dad_gui_com		varchar(500)	path	'nm_DescComplemento');
			
	-- <guiaHonorarios> <reapresentacaoGlosado>

	c_rea_glo_rea_glo_hon CURSOR( reapresentacao_glo_rea_glo_pc		xml ) FOR
		SELECT	*
		from	xmltable('/reapresentacaoGlosado' passing reapresentacao_glo_rea_glo_pc columns
			nr_doc1_glosado_rea_glo			varchar(30)	path	'nr_DOC1Glosado',
			nr_doc2_glosado_rea_glo			varchar(30)	path	'nr_DOC2Glosado',
			dados_lote_guia				xml		path	'DadosLoteGuia');

			-- <guiaHonorarios> <reapresentacaoGlosado> <DadosLoteGuia>

			c_dados_lote_guia_hon CURSOR( dados_lote_guia_pc		xml ) FOR
				SELECT	*
				from	xmltable('/DadosLoteGuia' passing dados_lote_guia_pc columns
					txt				xml		path	'TXT',
					xml				xml		path	'XML');

				-- <guiaHonorarios> <reapresentacaoGlosado> <DadosLoteGuia> <TXT>

				c_dados_guia_txt_hon CURSOR( dados_guia_txt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/TXT' passing dados_guia_txt_pc columns
						nr_lote_rea_glo_txt			varchar(8)	path	'nr_Lote',
						nr_nota_rea_glo_txt			varchar(20)	path	'nr_Nota');

				-- <guiaHonorarios> <reapresentacaoGlosado> <DadosLoteGuia> <XML>

				c_dados_guia_xml_hon CURSOR( dados_guia_xml_pc		xml ) FOR
					SELECT	*
					from	xmltable('/XML' passing dados_guia_xml_pc columns
						nr_lote_prestador_xml_rea_glo		varchar(12)	path	'nr_LotePrestador',
						nr_guia_glosada_xml_rea_glo		varchar(20)	path	'nr_GuiaTissPrestador',
						nr_guia_tiss_oper_glo_rea_glo		varchar(20)	path	'nr_GuiaTissOperadora');

--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE NOTA FISCAL FORNECEDOR ++++++++++++++++++++++++++++++++++++++++++++++

c_tipo_guia_nota_fiscal CURSOR( guia_nota_fiscal_pc		xml ) FOR
	SELECT	*
	from	xmltable('/notaFiscal_Fornecedor' passing guia_nota_fiscal_pc columns
		dados_beneficiario			xml		path	'dadosBeneficiario',
		nr_guia_tiss_principal			varchar(20)	path	'nr_GuiaTissPrincipal',
		id_liminar				varchar(5)	path	'id_Liminar',
		pago_fornecedor				xml		path	'Pago_Fornecedor',
		infor_opme_nf				xml		path	'Infor_OPME',
		nr_autorizacao				varchar(10)	path	'nr_Autorizacao',
		reapresentacao_glosado			xml		path	'reapresentacaoGlosado');

		-- <guianotafiscal> <dadosBeneficiario>

		c_dados_beneficiario_nf CURSOR( dados_beneficiario_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
				cd_unimed_dad_ben			varchar(4)	path	'cd_Unimed',
				id_benef_dad_ben			varchar(13)	path	'id_Benef');
				
		-- <guianotafiscal> <PagoFornecedor>

		c_pago_fornecedor_nf CURSOR( pago_fornecedor_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Pago_Fornecedor' passing pago_fornecedor_pc columns
				cnpj_fornecedor				varchar(14)	path	'CNPJ_Fornecedor',
				nm_fornecedor_material_nf		varchar(60)	path	'nm_FornecedorMaterial',
				nr_nf_fornecedor_nf			varchar(20)	path	'nr_NotaFiscalFornecedor');

		-- <guianotafiscal> <InforOPME>

		c_info_opme_nf CURSOR( info_opme_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Infor_OPME' passing info_opme_pc columns
				dt_exec_info_opme			varchar(8)	path	'dt_Execucao',
				procedimento_info_opme			xml		path	'Procedimentos',
				valores_fornecedor_info_opme		xml		path	'valores_fornecedor',
				det_reg_anvisa_info_opme		varchar(50)	path	'det_RegistroAnvisa',
				nr_reg_anvisa_info_opme			varchar(15)	path	'nr_RegistroAnvisa',
				cd_ref_mat_fab_info_opme		varchar(60)	path	'cd_ReferenciaMat_Fab');

			-- <guianotafiscal> <InforOPME> <procedimentos>

			c_procedimentos_nf CURSOR( procedimentos_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Procedimentos' passing procedimentos_pc columns
					seq_item_pro_info_opme			varchar(4)	path	'seq_item',
					id_item_unico_pro_info_opme		varchar(28)	path	'id_itemUnico',
					tp_tabela_pro_info_opme			varchar(2)	path	'tp_Tabela',
					cd_servico_pro_info_opme		varchar(15)	path	'cd_Servico',
					ds_servico_pro_info_opme		varchar(80)	path	'ds_Servico',
					qt_cobrada_pro_info_opme		varchar(255)	path	'qt_Cobrada');

			-- <guianotafiscal> <valores_fornecedor>

			c_valores_fornecedor_nf CURSOR( valores_fornecedor_pc		xml ) FOR
				SELECT	*
				from	xmltable('/valores_fornecedor' passing valores_fornecedor_pc columns
					vl_procedimento				varchar(255)	path	'vl_ServCobrado',
					vl_adic_procedimento			varchar(255)	path	'tx_AdmServico');

		-- <guianotafiscal> <reapresentacaoGlosado>

		c_rea_glo_rea_glo_nf CURSOR( reapresentacao_glo_rea_glo_pc		xml ) FOR
			SELECT	*
			from	xmltable('/reapresentacaoGlosado' passing reapresentacao_glo_rea_glo_pc columns
				nr_doc1_glosado_rea_glo			varchar(30)	path	'nr_DOC1Glosado',
				nr_doc2_glosado_rea_glo			varchar(30)	path	'nr_DOC2Glosado',
				nr_guia_glosada_rea_glo			varchar(30)	path	'nr_NotaFiscalFornecedor');

--  +++++++++++++++++++++++++++++++++++++++++++++++ COBRANCA REEMBOLSO ++++++++++++++++++++++++++++++++++++++++++++++

c_cobranca_reembolso CURSOR( cobr_reembolso_pc		xml ) FOR
	SELECT	*
	from	xmltable('/CobrancaReembolso' passing cobr_reembolso_pc columns
		reembolso			xml		path	'reembolso',
		ressarcimento_sus		xml		path	'RessarcimentoSus');
		
--  +++++++++++++++++++++++++++++++++++++++++++++++ REEMBOLSO ++++++++++++++++++++++++++++++++++++++++++++++

c_reembolso CURSOR( reembolso_pc		xml ) FOR
SELECT	*
from	xmltable('/reembolso' passing reembolso_pc columns
	dados_beneficiario			xml		path	'dadosBeneficiario',
	dados_reembolso				xml		path	'dadosReembolso',
	prestador				xml		path	'Prestador',
	procedimentos				xml		path	'dadosProcedimentos');

	-- <cobrancareembolso> <dadosBeneficiario>

	c_dados_beneficiario_reemb CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben		varchar(4)	path	'cd_Unimed',
		        id_benef_dad_ben		varchar(13)	path	'id_Benef',
		        nm_benef_dad_ben		varchar(25)	path	'nm_Benef',
		        dt_nasc_dad_ben			varchar(8)	path	'dt_Nasc',
		        tp_sexo_dad_ben			varchar(1)	path	'tp_Sexo',
		        id_rn_dad_ben			varchar(1)	path	'id_RN');

	-- <cobrancareembolso> <dadosReembolso>

	c_dados_reembolso CURSOR( dados_reembolso_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosReembolso' passing dados_reembolso_pc columns
			id_reembolso			varchar(20)	path	'idReembolso',
			carater_atendimento		varchar(1)	path	'caraterAtendimento',
		        dt_reembolso			varchar(8)	path	'dt_Reembolso',
		        id_reem_par_int			varchar(5)	path	'id_ReemParInt',
		        cd_cnes				varchar(7)	path	'cd_cnes');

	-- <cobrancareembolso> <Prestador>

	c_dados_prestador CURSOR( dados_prestador_pc		xml ) FOR
		SELECT	*
		from	xmltable('/Prestador' passing dados_prestador_pc columns
			nm_prestador			varchar(70)	path	'nomePrestador',
			nr_cnpj_cpf			xml		path	'nr_CNPJouCPF');

		-- <cobrancareembolso> <Prestador> <nr_CNPJouCPF>

		c_nr_cnpj_cpf CURSOR( nr_cnpj_cpf_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_CNPJouCPF' passing nr_cnpj_cpf_pc columns
				cd_cpf_prest			varchar(11)	path	'cd_cpf',
				cd_cnpj_prest			varchar(14)	path	'cd_cnpj');

	-- <cobrancareembolso> <procedimentos>

	c_procedimentos_reembolso CURSOR( procedimentos_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosProcedimentos' passing procedimentos_pc columns
			procedimentos_proc		xml		path	'procedimentos',
			nr_autorizacao_proc		varchar(10)	path	'nr_Autorizacao',
			vl_restituir_proc		varchar(255)	path	'vl_a_restituir',
			vl_reem_benef_proc		varchar(255)	path	'vl_reemb_benef',
			vl_pago_benef_proc		varchar(255)	path	'vl_pago_benef');

		-- <cobrancareembolso> <procedimentos> <procedimentos>

		c_procedimentos_proc CURSOR( procedimentos_proc_pc		xml ) FOR
			SELECT	*
			from	xmltable('/procedimentos' passing procedimentos_proc_pc columns
				dt_exec_proc			varchar(8)	path	'dt_Execucao',
				seq_item_proc			varchar(4)	path	'seq_item',
				id_item_unico_proc		varchar(28)	path	'id_itemUnico',
				tp_tabela_proc			varchar(2)	path	'tp_Tabela',
				cd_servico_proc			varchar(15)	path	'cd_Servico',
				ds_servico_proc			varchar(80)	path	'ds_Servico',
				qt_cobrada_proc			varchar(255)	path	'qt_Cobrada',
				equipe_reembolso		xml		path	'equipe_reembolso');

		-- <cobrancareembolso> <procedimentos> <procedimentos> <equipe_reembolso>

		c_equipe_reembolso_proc CURSOR( equipe_reembolso_proc_pc		xml ) FOR
			SELECT	*
			from	xmltable('/equipe_reembolso' passing equipe_reembolso_proc_pc columns
				nm_prof_equ_reemb			varchar(70)	path	'nm_Profissional',
				tp_paticip_equ_reemb			varchar(1)	path	'tp_Particip_Reem',
				dados_conselho				xml		path	'dadosConselho');

			-- <cobrancareembolso> <procedimentos> <procedimentos> <equipe_reembolso> <dadosConselho>

			c_dados_conselho_proc CURSOR( dados_conselho_proc_pc		xml ) FOR
				SELECT	*
				from	xmltable('/dadosConselho' passing dados_conselho_proc_pc columns
					sg_conselho_equ_reemb			varchar(12)	path	'sg_Conselho',
                                        nr_conselho_equ_reemb			varchar(15)	path	'nr_Conselho',
					uf_equ_reemb				varchar(2)	path	'UF');

--  +++++++++++++++++++++++++++++++++++++++++++++++ RESSARCIMENTO SUS ++++++++++++++++++++++++++++++++++++++++++++++

c_ressarcimento_sus CURSOR( ressarcimento_sus_pc		xml ) FOR
SELECT	*
from	xmltable('/RessarcimentoSus' passing ressarcimento_sus_pc columns
	dados_beneficiario			xml		path	'dadosBeneficiario',
	carater_atendimento			varchar(1)	path	'caraterAtendimento',
	prestador				xml		path	'Prestador',
	procedimentos				xml		path	'dadosProcedimentos',
	cd_cnes_proc				varchar(7)	path	'cd_cnes');

	-- <ressarcimentosus> <dadosBeneficiario>

	c_dados_beneficiario_res_sus CURSOR( dados_beneficiario_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosBeneficiario' passing dados_beneficiario_pc columns
			cd_unimed_dad_ben		varchar(4)	path	'cd_Unimed',
		        id_benef_dad_ben		varchar(13)	path	'id_Benef',
		        nm_benef_dad_ben		varchar(25)	path	'nm_Benef',
		        dt_nasc_dad_ben			varchar(8)	path	'dt_Nasc',
		        tp_sexo_dad_ben			varchar(1)	path	'tp_Sexo',
		        id_rn_dad_ben			varchar(1)	path	'id_RN');
			
	-- <ressarcimentosus> <Prestador>

	c_dados_prestador_res_sus CURSOR( dados_prestador_pc		xml ) FOR
		SELECT	*
		from	xmltable('/Prestador' passing dados_prestador_pc columns
			nm_prestador			varchar(70)	path	'nomePrestador',
			nr_cnpj_cpf			xml		path	'nr_CNPJouCPF');

		-- <ressarcimentosus> <Prestador> <nr_CNPJouCPF>

		c_nr_cnpj_cpf_res_sus CURSOR( nr_cnpj_cpf_pc		xml ) FOR
			SELECT	*
			from	xmltable('/nr_CNPJouCPF' passing nr_cnpj_cpf_pc columns
				cd_cpf_prest			varchar(11)	path	'cd_cpf',
				cd_cnpj_prest			varchar(14)	path	'cd_cnpj');

	-- <ressarcimentosus> <procedimentos>

	c_procedimentos_proc_res_sus CURSOR( procedimentos_proc_pc		xml ) FOR
		SELECT	*
		from	xmltable('/dadosProcedimentos' passing procedimentos_proc_pc columns
			id_item_unico_proc		varchar(28)	path	'id_itemUnico',
			dt_exec_proc			varchar(8)	path	'dt_Execucao',
			cd_servico_proc			varchar(15)	path	'cd_Servico',
			ds_servico_proc			varchar(80)	path	'ds_Servico',
			qt_cobrada_proc			varchar(255)	path	'qt_Cobrada',
			vl_pago_sus_proc		varchar(255)	path	'vl_pagoSUS');

BEGIN

begin
	select 	coalesce(max(ie_material_intercambio),'S'),
		coalesce(max(ie_origem_proc_valido),'N'),
		coalesce(max(ie_situacao_material),'N'),
		coalesce(max(ie_data_conv_mat_unimed),'DA'),
		coalesce(max(ie_priorizar_conv_pct_int),'N')
	into STRICT	ie_material_intercambio_w,
		ie_origem_proc_valido_w,
		ie_situacao_material_w,
		ie_data_conv_mat_unimed_w,
		ie_priorizar_conv_pct_int_w
	from 	pls_parametros
	where 	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(182468);  -- O parametro, Material intercambio, deve ser cadastrado. Favor cadastrar o mesmo, em OPS - Gestao de Operadoras ->  Parametros da OPS -> Intercambio.
end;

CALL ptu_a550_imp_pck.prepara_arquivo(nr_seq_arq_xml_p);

select 	coalesce(max(ie_novo_imp_a500),'N')
into STRICT	ie_novo_imp_a500_w
from 	pls_visible_false
where 	cd_estabelecimento  = cd_estabelecimento_p;

-- ARQUIVO XML

for r_c01_w in c01( nr_seq_arq_xml_p ) loop

	-- /PTUA500/CABECALHO

	for r_cabecalho_w in c_cabecalho( r_c01_w.ds_arq_xml ) loop
		
		ica := vet_tab_cabecalho_w.count + 1;
		
		vet_tab_cabecalho_w[ica].nr_vertra_ptu_cab			:= r_cabecalho_w.nr_vertra_ptu_cab + 40;
		
		-- /PTUA500/CABECALHO/UNIMED

		for r_cabecalho_unimed_w in c_cabecalho_unimed( r_cabecalho_w.unimed_cab ) loop
			vet_tab_cabecalho_w[ica].cd_uni_destino_cab			:= trim(both r_cabecalho_unimed_w.cd_uni_destino_cab);
			vet_tab_cabecalho_w[ica].cd_uni_origem_cab			:= trim(both r_cabecalho_unimed_w.cd_uni_origem_cab);
		end loop;
		
		-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA

		for r_cabecalho_dados_aviso_cobr_w in c_cabecalho_dados_aviso_cobr(r_cabecalho_w.dados_aviso_cobranca) loop
			
			ie_tipo_cobranca_fatura_w	:= null;
			
			-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/AVISO

			for r_cabecalho_dados_aviso_w in c_cabecalho_dados_aviso(r_cabecalho_dados_aviso_cobr_w.aviso_cab) loop
				vet_tab_cabecalho_w[ica].dt_geracao_cab				:= trim(both r_cabecalho_dados_aviso_w.dt_geracao_cab);
				vet_tab_cabecalho_w[ica].nr_competencia_cab			:= trim(both r_cabecalho_dados_aviso_w.nr_competencia_cab);
				
				ie_tipo_cobranca_fatura_w	:= 'A';
			end loop;

			-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/COBRANCA

			for r_cabecalho_dados_cobranca_w in c_cabecalho_dados_cobranca(r_cabecalho_dados_aviso_cobr_w.cobranca_cab) loop
				vet_tab_cabecalho_w[ica].dt_geracao_cab				:= trim(both r_cabecalho_dados_cobranca_w.dt_geracao_cab);
				vet_tab_cabecalho_w[ica].nr_competencia_cab			:= trim(both r_cabecalho_dados_cobranca_w.nr_competencia_cab);
				vet_tab_cabecalho_w[ica].tp_cobranca_cab			:= trim(both r_cabecalho_dados_cobranca_w.tp_cobranca_cab);
				
				-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/COBRANCA/DOCUMENTO1

				for r_cabecalho_documento1_w in c_cabecalho_documento1( r_cabecalho_dados_cobranca_w.documento1_cab ) loop
					vet_tab_cabecalho_w[ica].tp_documento1_cab			:= trim(both r_cabecalho_documento1_w.tp_documento_cab);
					vet_tab_cabecalho_w[ica].nr_documento1_cab			:= trim(both r_cabecalho_documento1_w.nr_documento_cab);
					vet_tab_cabecalho_w[ica].dt_vencimento_doc1_cab			:= trim(both r_cabecalho_documento1_w.dt_vencimento_doc_cab);
					vet_tab_cabecalho_w[ica].dt_emissao_doc1_cab			:= trim(both r_cabecalho_documento1_w.dt_emissao_doc_cab);
					vet_tab_cabecalho_w[ica].vl_total_doc1_cab			:= trim(both r_cabecalho_documento1_w.vl_total_doc_cab);
					vet_tab_cabecalho_w[ica].doc_fiscal1_cab			:= trim(both r_cabecalho_documento1_w.doc_fiscal_cab);
					
					-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/COBRANCA/DOCUMENTO1/NFE

					for r_cabecalho_documento1_nfe_w in c_cabecalho_documento1_nfe( r_cabecalho_documento1_w.nfe_cab ) loop
						vet_tab_cabecalho_w[ica].nr_nota_fiscal_doc1_cab		:= trim(both r_cabecalho_documento1_nfe_w.nr_notafiscal_doc_cab);
						vet_tab_cabecalho_w[ica].link_nfe_doc1_cab			:= trim(both r_cabecalho_documento1_nfe_w.link_nfe_doc_cab);
					end loop;
				
					vet_tab_cabecalho_w[ica].vl_ir1_cab				:= trim(both r_cabecalho_documento1_w.vl_ir_cab);			
		
				end loop;
				
				-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/COBRANCA/DOCUMENTO2

				for r_cabecalho_documento2_w in c_cabecalho_documento2( r_cabecalho_dados_cobranca_w.documento2_cab) loop
					vet_tab_cabecalho_w[ica].tp_documento2_cab			:= trim(both r_cabecalho_documento2_w.tp_documento_cab);
					vet_tab_cabecalho_w[ica].nr_documento2_cab			:= trim(both r_cabecalho_documento2_w.nr_documento_cab);
					vet_tab_cabecalho_w[ica].dt_vencimento_doc2_cab			:= trim(both r_cabecalho_documento2_w.dt_vencimento_doc_cab);
					vet_tab_cabecalho_w[ica].dt_emissao_doc2_cab			:= trim(both r_cabecalho_documento2_w.dt_emissao_doc_cab);
					vet_tab_cabecalho_w[ica].vl_total_doc2_cab			:= trim(both r_cabecalho_documento2_w.vl_total_doc_cab);
					vet_tab_cabecalho_w[ica].doc_fiscal2_cab			:= trim(both r_cabecalho_documento2_w.doc_fiscal_cab);
					
					-- /PTUA500/CABECALHO/DADOSAVISOCOBRANCA/COBRANCA/DOCUMENTO2/NFE

					for r_cabecalho_documento2_nfe_w in c_cabecalho_documento2_nfe( r_cabecalho_documento2_w.nfe_cab ) loop
						vet_tab_cabecalho_w[ica].nr_nota_fiscal_doc2_cab		:= trim(both r_cabecalho_documento2_nfe_w.nr_notafiscal_doc_cab);
						vet_tab_cabecalho_w[ica].link_nfe_doc2_cab			:= trim(both r_cabecalho_documento2_nfe_w.link_nfe_doc_cab);
					end loop;
				end loop;
				
				ie_tipo_cobranca_fatura_w	:= 'C';
			end loop;
			
		end loop;
		
		if (vet_tab_cabecalho_w[ica].tp_cobranca_cab = 1) and (vet_tab_cabecalho_w[ica].vl_total_doc1_cab <= 0) then
			vet_tab_cabecalho_w[ica].vl_total_doc1_cab	:= 0;
		end if;
		
		if (vet_tab_cabecalho_w[ica].tp_cobranca_cab = 2) and (vet_tab_cabecalho_w[ica].vl_total_doc2_cab <= 0) then
			vet_tab_cabecalho_w[ica].vl_total_doc2_cab	:= 0;
		end if;
		
		-- Obter congenere

		begin
		select	nr_sequencia
		into STRICT	nr_seq_congenere_w
		from	pls_congenere
		where	cd_cooperativa_number	= vet_tab_cabecalho_w[ica].cd_uni_origem_cab;
		exception
		when others then
			nr_seq_congenere_w	:= null;
		end;
		
		ie_tipo_intercambio_w	:= 'A';
		
		if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
			-- Obter a UF da operadora  - Tasy

			select	coalesce(max(sg_estado),'X')
			into STRICT	sg_estado_w
			from	pessoa_juridica
			where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
						from	pls_outorgante
						where	cd_estabelecimento	= cd_estabelecimento_p);
			
			-- Obter a UF da operadora do beneficiario eventual ou que enviou o protocolo

			select	coalesce(max(a.sg_estado),'X')
			into STRICT	sg_estado_int_w
			from	pessoa_juridica	a,
				pls_congenere	b
			where	a.cd_cgc	= b.cd_cgc
			and	b.nr_sequencia	= nr_seq_congenere_w;
			
			if (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
				if (sg_estado_w	= sg_estado_int_w) then
					ie_tipo_intercambio_w	:= 'E';
				else	
					ie_tipo_intercambio_w	:= 'N';
				end if;
			else
				ie_tipo_intercambio_w	:= 'A';
			end if;
		end if;	

		-- VERIFICA SE A FATURA ESTA EM DUPLICIDADE

		select	max(pf.nr_sequencia)
		into STRICT	nr_seq_fatura_exist_w
		from	ptu_fatura pf
		where	somente_numero(pf.nr_fatura)		= somente_numero(vet_tab_cabecalho_w[ica].nr_documento1_cab)
		and	somente_numero(pf.cd_unimed_origem)	= somente_numero(vet_tab_cabecalho_w[ica].cd_uni_origem_cab)
		and 	coalesce(pf.ie_tipo_cobranca_fatura,'C') 	= 'C'
		and	pf.ie_operacao		= 'R'
		and	pf.ie_status		not in ('CA','I')
		and	coalesce(pf.dt_devolucao::text, '') = '';
		
		if (coalesce(nr_seq_fatura_exist_w::text, '') = '') and (somente_numero(vet_tab_cabecalho_w[ica].nr_documento2_cab) > 0) then
			select	max(pf.nr_sequencia)
			into STRICT	nr_seq_fatura_exist_w
			from	ptu_fatura pf
			where	somente_numero(pf.nr_nota_credito_debito)	= somente_numero(vet_tab_cabecalho_w[ica].nr_documento2_cab)
			and	somente_numero(pf.cd_unimed_origem)		= somente_numero(vet_tab_cabecalho_w[ica].cd_uni_origem_cab)
			and 	coalesce(pf.ie_tipo_cobranca_fatura,'C') 		= 'C'
			and	pf.ie_operacao		= 'R'
			and	pf.ie_status		not in ('CA','I')
			and	coalesce(pf.dt_devolucao::text, '') = '';
		end if;
		
		-- Se o A500 importado for de aviso, nao tem o nr_documento e precisa verificar pela data e competencia

		if (coalesce(nr_seq_fatura_exist_w::text, '') = '') and (coalesce(ie_tipo_cobranca_fatura_w,'C') = 'A') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_fatura_exist_w
			from	ptu_fatura
			where	nr_competencia				= vet_tab_cabecalho_w[ica].nr_competencia_cab
			and	somente_numero(cd_unimed_origem)	= somente_numero(vet_tab_cabecalho_w[ica].cd_uni_origem_cab)
			and	dt_geracao				= ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[ica].dt_geracao_cab)
			and	ie_operacao				= 'R'
			and	ie_status				not in ('CA','I')
			and	coalesce(ie_tipo_cobranca_fatura,'C')	= 'A'
			and	coalesce(dt_devolucao::text, '') = '';
		end if;

		if (nr_seq_fatura_exist_w IS NOT NULL AND nr_seq_fatura_exist_w::text <> '') then
			-- Mostrar data de rececimento

			select	max(dt_recebimento_fatura)
			into STRICT	dt_recebimento_w
			from	ptu_fatura
			where	nr_sequencia	= nr_seq_fatura_exist_w;
			
			CALL wheb_mensagem_pck.exibir_mensagem_abort(182470,	'DT_RECEBIMENTO=' || to_char(dt_recebimento_w,'DD/MM/YYYY') || ';' ||
									'NR_SEQ_FATURA_EXIST=' || nr_seq_fatura_exist_w);
		end if;
		
		-- Verificar se o arquivo e da mesma unimed

		cd_unimed_operadora_w	:= lpad(pls_obter_unimed_estab(cd_estabelecimento_p),4,'0');
		vet_tab_cabecalho_w[ica].cd_uni_destino_cab	:= lpad(vet_tab_cabecalho_w[ica].cd_uni_destino_cab,4,'0');
		
		if ((vet_tab_cabecalho_w[ica].cd_uni_destino_cab)::numeric  <> (cd_unimed_operadora_w)::numeric ) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(182469); -- O sistema nao permite importar arquivo de outra unimed.
		end if;
		
		-- Obter o valor do parametro

		Obter_Param_Usuario(1293, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, vl_parametro_32_w);
		
		-- parametro [32] - Permite importar faturas devolvidas - OS 473542

		if (vl_parametro_32_w = 'N') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_fatura_dev_w
			from	ptu_fatura
			where	somente_numero(nr_fatura)		= somente_numero(vet_tab_cabecalho_w[ica].nr_documento1_cab)
			and	somente_numero(cd_unimed_origem)	= somente_numero(vet_tab_cabecalho_w[ica].cd_uni_origem_cab)
			and	ie_operacao		= 'R'
			and	ie_status		= 'R';
			
			if (coalesce(nr_seq_fatura_dev_w::text, '') = '') and (somente_numero(vet_tab_cabecalho_w[ica].nr_documento2_cab) > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_fatura_dev_w
				from	ptu_fatura
				where	somente_numero(nr_nota_credito_debito)	= somente_numero(vet_tab_cabecalho_w[ica].nr_documento2_cab)
				and	somente_numero(cd_unimed_origem)	= somente_numero(vet_tab_cabecalho_w[ica].cd_uni_origem_cab)
				and	ie_operacao		= 'R'
				and	ie_status		= 'R';
			end if;

			if (nr_seq_fatura_dev_w IS NOT NULL AND nr_seq_fatura_dev_w::text <> '') then
				select	max(dt_devolucao)
				into STRICT	dt_devolucao_w
				from	ptu_fatura
				where	nr_sequencia	= nr_seq_fatura_dev_w;

				CALL wheb_mensagem_pck.exibir_mensagem_abort(198155,	'DT_DEVOLUCAO=' || to_char(dt_devolucao_w,'DD/MM/YYYY') || ';' ||
										'NR_SEQ_FATURA_DEV=' || nr_seq_fatura_dev_w);
			end if;
		end if;
		
		Obter_Param_Usuario(1293, 17, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, vl_parametro_w);
		
		if (vl_parametro_w = 'S') then
			select	CASE WHEN  vl_parametro_w='S' THEN  dt_recebimento_w  ELSE to_date(vet_tab_cabecalho_w[ica].nr_competencia_cab, 'yymm') END
			into STRICT	dt_mes_competencia_w
			;
		elsif (vl_parametro_w = 'N') then
			dt_mes_competencia_w	:= to_date(vet_tab_cabecalho_w[ica].nr_competencia_cab, 'yymm');
		end if;
		
		-- HASH

		for r_hash_w in c_hash( r_c01_w.ds_arq_xml ) loop
		
			vet_tab_cabecalho_w[ica].hash		:= trim(both r_hash_w.hash);
		end loop;
		
		-- CARIMBO CMB

		for r_carimbo_cmb in c_carimbo_cmb( r_c01_w.ds_arq_xml ) loop
			vet_tab_cabecalho_w[ica].dt_postagem		:= trim(both r_carimbo_cmb.dt_postagem);
			vet_tab_cabecalho_w[ica].nr_protocolo		:= trim(both r_carimbo_cmb.nr_protocolo);
		end loop;
		
		ie_parametro_21_w	:= 'N';
		ie_parametro_33_w	:= 'N';
		
		if (vet_tab_cabecalho_w[ica](.dt_postagem IS NOT NULL AND .dt_postagem::text <> '')) then
			
			-- CONVERTER A TAG DA DATA, ESSA TAG VEM NO FORMATO YYYY/MM/DDHH:MI:SS

			vet_tab_cabecalho_w[ica].dt_postagem :=  to_char(to_date(substr(vet_tab_cabecalho_w[ica].dt_postagem,1,18), 'yyyy/mm/ddhh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
			
			-- parametro [21] - Ao importar o arquivo, gravar na data de emissao, a mesma data do recebimento

			obter_param_usuario(1293,21, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_21_w);
			
			-- parametro [33] - Gerar data de recebimento do A500 conforme a data de postagem do mesmo

			obter_param_usuario(1293,33, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_33_w);
		end if;
		
		-- INCREMENTO CABECALHO

		ica	:= ica + 1;
	
	end loop;
	
	-- /PTUA500/ARQUIVOA500

	for r_arquivo_a500_w in c_arquivo_a500( r_c01_w.ds_arq_xml ) loop
		
		-- /PTUA500/ARQUIVOA500/TIPOGUIA

		for r_arquivo_a500_tipo_guia_w in c_arquivo_a500_tipo_guia( r_arquivo_a500_w.tipo_guia ) loop
		
			--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE CONSULTA ++++++++++++++++++++++++++++++++++++++++++++++

			-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA

			for r_guia_consulta_w in c_tipo_guia_consulta( r_arquivo_a500_tipo_guia_w.guia_consulta ) loop
				
				igc := vet_tab_guia_consulta_w.count +1;

				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSBENEFICIARIO

				for r_dados_beneficiario_w in c_dados_beneficiario_cons( r_guia_consulta_w.dados_beneficiario ) loop
					vet_tab_guia_consulta_w[igc].id								:= igc;
					vet_tab_guia_consulta_w[igc].cd_unimed_dad_ben						:= trim(both r_dados_beneficiario_w.cd_unimed_dad_ben);
					vet_tab_guia_consulta_w[igc].id_benef_dad_ben						:= trim(both r_dados_beneficiario_w.id_benef_dad_ben);
					vet_tab_guia_consulta_w[igc].nm_benef_dad_ben						:= substr(trim(both r_dados_beneficiario_w.nm_benef_dad_ben),1,25);
					vet_tab_guia_consulta_w[igc].id_rn_dad_ben						:= trim(both r_dados_beneficiario_w.id_rn_dad_ben);
					vet_tab_guia_consulta_w[igc].tp_paciente_dad_ben					:= trim(both r_dados_beneficiario_w.tp_paciente_dad_ben);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/CONTRATOEXECUTANTE

				for r_contrato_executante_w in c_contrato_executante( r_guia_consulta_w.contrato_executante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/CONTRATOEXECUTANTE/UNIMEDPRESTADOR

					for r_unimed_prestador_w in c_unimed_prestador_cont_exec( r_contrato_executante_w.unimed_prestador_cont_exec ) loop
						vet_tab_guia_consulta_w[igc].cd_uni_prest_cont_exec					:= trim(both r_unimed_prestador_w.cd_uni_prest_cont_exec);
						vet_tab_guia_consulta_w[igc].cd_prest_cont_exec						:= trim(both r_unimed_prestador_w.cd_prest_cont_exec);
					end loop;
					
					vet_tab_guia_consulta_w[igc].nm_prest_cont_exec						:= trim(both r_contrato_executante_w.nm_prest_cont_exec);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/CONTRATOEXECUTANTE/CPF_CNPJ

					for r_cpf_cnpj_cont_exec_w in c_cpf_cnpj_cont_exec( r_contrato_executante_w.cpf_cnpj_cont_exec ) loop
						vet_tab_guia_consulta_w[igc].cd_cpf_cont_exec						:= trim(both r_cpf_cnpj_cont_exec_w.cd_cpf_cont_exec);
						vet_tab_guia_consulta_w[igc].cd_cnpj_cont_exec						:= trim(both r_cpf_cnpj_cont_exec_w.cd_cnpj_cont_exec);
					end loop;
					
					vet_tab_guia_consulta_w[igc].CNES_cont_exec						:= trim(both r_contrato_executante_w.CNES_cont_exec);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/CONTRATOEXECUTANTE/PRESTADOR

					for r_prestador_cont_exec_w in c_prestador_cont_exec( r_contrato_executante_w.prestador_cont_exec ) loop
						vet_tab_guia_consulta_w[igc].cd_municipio_cont_exe					:= trim(both r_prestador_cont_exec_w.cd_municipio_cont_exe);
						vet_tab_guia_consulta_w[igc].tp_rede_min_cont_exe					:= trim(both r_prestador_cont_exec_w.tp_rede_min_cont_exe);
						vet_tab_guia_consulta_w[igc].tp_prestador_cont_exe					:= trim(both r_prestador_cont_exec_w.tp_prestador_cont_exe);
						vet_tab_guia_consulta_w[igc].id_rec_proprio_cont_exe					:= trim(both r_prestador_cont_exec_w.id_rec_proprio_cont_exe);
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/PROFISSIONALEXECUTANTE

				for r_profissional_executante_w in c_profissional_executante( r_guia_consulta_w.profissional_executante ) loop
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/PROFISSIONALEXECUTANTE/UNIMEDPRESTADOR

					for r_unimed_prestador_prof_exec_w in c_unimed_prestador_prof_exec( r_profissional_executante_w.unimed_prof_exec ) loop
						vet_tab_guia_consulta_w[igc].cd_uni_prest_prof_exec					:= trim(both r_unimed_prestador_prof_exec_w.cd_uni_prest_prof_exec);
						vet_tab_guia_consulta_w[igc].cd_prest_prof_exec						:= trim(both r_unimed_prestador_prof_exec_w.cd_prest_prof_exec);
					end loop;
					
					vet_tab_guia_consulta_w[igc].nm_prest_prof_exec						:= trim(both r_profissional_executante_w.nm_prest_prof_exec);
					
					--vet_tab_guia_consulta_w(igc).cd_cpf_prof_exec						:= trim(r_profissional_executante_w.cd_cpf_prof_exec;

					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/PROFISSIONALEXECUTANTE/DADOSCONSELHO

					for r_dados_conselho_prof_exec_w in c_dados_conselho_prof_exec( r_profissional_executante_w.dados_conselho_prof_exec ) loop
						vet_tab_guia_consulta_w[igc].sg_conselho_prof_exec					:= trim(both r_dados_conselho_prof_exec_w.sg_conselho_prof_exec);
						vet_tab_guia_consulta_w[igc].nr_conselho_prof_exec					:= trim(both r_dados_conselho_prof_exec_w.nr_conselho_prof_exec);
						vet_tab_guia_consulta_w[igc].uf_prof_exec						:= trim(both r_dados_conselho_prof_exec_w.uf_prof_exec);
						
					end loop;
					
					vet_tab_guia_consulta_w[igc].cbo_prof_exec						:= trim(both r_profissional_executante_w.cbo_prof_exec);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSGUIA

				for r_dados_guia_consulta_w in c_dados_guia_consulta( r_guia_consulta_w.dados_guia ) loop
					vet_tab_guia_consulta_w[igc].nr_ver_tiss_dad_gui					:= trim(both r_dados_guia_consulta_w.nr_ver_tiss_dad_gui);
					vet_tab_guia_consulta_w[igc].tp_consulta_dad_gui					:= trim(both r_dados_guia_consulta_w.tp_consulta_dad_gui);
					vet_tab_guia_consulta_w[igc].nr_lote_prestador_dad_gui					:= trim(both r_dados_guia_consulta_w.nr_lote_prestador_dad_gui);
					vet_tab_guia_consulta_w[igc].dt_protocolo_dad_gui					:= trim(both r_dados_guia_consulta_w.dt_protocolo_dad_gui);
					vet_tab_guia_consulta_w[igc].dt_conhecimento_dad_gui					:= trim(both r_dados_guia_consulta_w.dt_conhecimento_dad_gui);

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSGUIA/NRGUIA

					for r_nr_guias_dad_gui_cons_w in c_nr_guias_dad_gui_cons( r_dados_guia_consulta_w.nr_guias_dad_gui ) loop
						vet_tab_guia_consulta_w[igc].nr_guia_tiss_prestador_dad_gui				:= trim(both r_nr_guias_dad_gui_cons_w.nr_guia_tiss_prestador_dad_gui);
						vet_tab_guia_consulta_w[igc].nr_guia_tiss_operadora_dad_gui				:= trim(both r_nr_guias_dad_gui_cons_w.nr_guia_tiss_operadora_dad_gui);
					end loop;
				
					vet_tab_guia_consulta_w[igc].tp_ind_acidente_dad_gui					:= trim(both r_dados_guia_consulta_w.tp_ind_acidente_dad_gui);
					vet_tab_guia_consulta_w[igc].ie_cobertura_especial_dad_gui				:= trim(both r_dados_guia_consulta_w.ie_cobertura_especial_dad_gui);
					vet_tab_guia_consulta_w[igc].ie_regime_atendimento_dad_gui				:= trim(both r_dados_guia_consulta_w.ie_regime_atendimento_dad_gui);	
					vet_tab_guia_consulta_w[igc].ie_saude_ocupacional_dad_gui				:= trim(both r_dados_guia_consulta_w.ie_saude_ocupacional_dad_gui);	
					vet_tab_guia_consulta_w[igc].dt_atendimento_dad_gui                                     := trim(both r_dados_guia_consulta_w.dt_atendimento_dad_gui);
					vet_tab_guia_consulta_w[igc].id_liminar_dad_gui                                         := trim(both r_dados_guia_consulta_w.id_liminar_dad_gui);
					vet_tab_guia_consulta_w[igc].id_continuado_dad_gui                                      := trim(both r_dados_guia_consulta_w.id_continuado_dad_gui);
					vet_tab_guia_consulta_w[igc].id_aviso_dad_gui                                           := trim(both r_dados_guia_consulta_w.id_aviso_dad_gui);
				        vet_tab_guia_consulta_w[igc].cd_excecao_dad_gui						:= trim(both r_dados_guia_consulta_w.cd_excecao_dad_gui);
					vet_tab_guia_consulta_w[igc].id_glosa_total_dad_gui					:= trim(both r_dados_guia_consulta_w.id_glosa_total_dad_gui);
					
					-- INCREMENTO PROCEDIMENTOS

					igcpe	:= vet_tab_guia_cons_proc_exec_w.count + 1;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSGUIA/PROCEDIMENTOS

					for r_procedimentos_cons_w in c_procedimentos_cons( r_dados_guia_consulta_w.procedimentos_dad_gui ) loop
						vet_tab_guia_cons_proc_exec_w[igcpe].id							:= igc;
						vet_tab_guia_cons_proc_exec_w[igcpe].seq_item_proc					:= trim(both r_procedimentos_cons_w.seq_item_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].tp_tabela_proc					:= trim(both r_procedimentos_cons_w.tp_tabela_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].cd_servico_proc					:= trim(both r_procedimentos_cons_w.cd_servico_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].vl_servico_cobr_proc				:= trim(both r_procedimentos_cons_w.vl_servico_cobr_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].tx_adm_servico_proc				:= trim(both r_procedimentos_cons_w.tx_adm_servico_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].id_item_unico_proc					:= trim(both r_procedimentos_cons_w.id_item_unico_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].id_avisado_item_proc				:= trim(both r_procedimentos_cons_w.id_avisado_item_proc);
						vet_tab_guia_cons_proc_exec_w[igcpe].cd_ato_proc					:= trim(both r_procedimentos_cons_w.cd_ato_proc);
												
						if (vet_tab_guia_cons_proc_exec_w[igcpe].tp_tabela_proc = 4) then
							ie_pacote_intercambio_w := 'S';
						else
							ie_pacote_intercambio_w := 'N';
						end if;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSGUIA/DADOSAUTORIZACAO

						for r_dados_autorizacao_cons_w in c_dados_autorizacao_cons( r_dados_guia_consulta_w.dados_autorizacao_dad_gui ) loop
							vet_tab_guia_cons_proc_exec_w[igcpe].dt_solicitacao_dad_aut			:= trim(both r_dados_autorizacao_cons_w.dt_solicitacao_dad_aut);
							vet_tab_guia_cons_proc_exec_w[igcpe].nr_autorizacao_dad_aut			:= trim(both r_dados_autorizacao_cons_w.nr_autorizacao_dad_aut);
							vet_tab_guia_cons_proc_exec_w[igcpe].cd_uni_autori_dad_aut			:= trim(both r_dados_autorizacao_cons_w.cd_uni_autori_dad_aut);
							vet_tab_guia_cons_proc_exec_w[igcpe].dt_autorizacao_dad_aut			:= trim(both r_dados_autorizacao_cons_w.dt_autorizacao_dad_aut);
							vet_tab_guia_cons_proc_exec_w[igcpe].tp_autorizacao_dad_aut			:= trim(both r_dados_autorizacao_cons_w.tp_autorizacao_dad_aut);
						end loop;
						
						-- INCREMENTO PROCEDIMENTO

						igcpe	:= igcpe + 1;
					end loop;
					
					igccp	:= vet_tab_guia_cons_comp_w.count + 1;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/DADOSGUIA/COMPLEMENTO

					for r_complemento_cons_w in c_complemento_cons( r_dados_guia_consulta_w.compleme_dad_gui_com ) loop
						vet_tab_guia_cons_comp_w[igccp].id_complemento					:= igc;
						vet_tab_guia_cons_comp_w[igccp].tp_complemento					:= trim(both r_complemento_cons_w.tp_complemento);
						vet_tab_guia_cons_comp_w[igccp].nm_complemento					:= trim(both r_complemento_cons_w.nm_complemento);
						
						-- INCREMENTO COMPLEMENTO

						igccp	:= igccp + 1;
					end loop;
				end loop;
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIACONSULTA/REAPRESENTACAOGLOSADO

				for r_rea_glo_rea_glo_cons_w in c_rea_glo_rea_glo_cons( r_guia_consulta_w.reapresentacao_glosado ) loop
					vet_tab_guia_consulta_w[igc].nr_doc1_glosado_rea_glo					:= trim(both r_rea_glo_rea_glo_cons_w.nr_doc1_glosado_rea_glo);
					vet_tab_guia_consulta_w[igc].nr_doc2_glosado_rea_glo					:= trim(both r_rea_glo_rea_glo_cons_w.nr_doc2_glosado_rea_glo);
					
					for r_dados_lote_guia_cons in c_dados_lote_guia_cons( r_rea_glo_rea_glo_cons_w.dados_lote_guia ) loop
						
						-- TXT

						for r_dados_guia_txt_cons in c_dados_guia_txt_cons( r_dados_lote_guia_cons.txt ) loop
							vet_tab_guia_consulta_w[igc].nr_lote_rea_glo_txt				:= trim(both r_dados_guia_txt_cons.nr_lote_rea_glo_txt);
							vet_tab_guia_consulta_w[igc].nr_nota_rea_glo_txt				:= trim(both r_dados_guia_txt_cons.nr_nota_rea_glo_txt);
						end loop;
						
						-- XML

						for r_dados_guia_xml_cons in c_dados_guia_xml_cons( r_dados_lote_guia_cons.xml ) loop
							vet_tab_guia_consulta_w[igc].nr_lote_prestador_xml_rea_glo			:= trim(both r_dados_guia_xml_cons.nr_lote_prestador_xml_rea_glo);
							vet_tab_guia_consulta_w[igc].nr_guia_glosada_xml_rea_glo			:= trim(both r_dados_guia_xml_cons.nr_guia_glosada_xml_rea_glo);
							vet_tab_guia_consulta_w[igc].nr_guia_tiss_oper_glo_rea_glo			:= trim(both r_dados_guia_xml_cons.nr_guia_tiss_oper_glo_rea_glo);
						end loop;
					end loop;
				end loop;
				
				-- INCREMENTO GUIA DE CONSULTA

				igc	:= igc + 1;
			end loop;
			
			--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE SP/SADT ++++++++++++++++++++++++++++++++++++++++++++++

			-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT

			for r_guia_sadt_w in c_guia_sadt( r_arquivo_a500_tipo_guia_w.guia_sadt ) loop
			
				igs := vet_tab_guia_sadt_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSBENEFICIARIO

				for r_dados_beneficiario_w in c_dados_beneficiario( r_guia_sadt_w.dados_beneficiario ) loop
					vet_tab_guia_sadt_w[igs].id								:= igs;
					vet_tab_guia_sadt_w[igs].cd_unimed_dad_ben						:= trim(both r_dados_beneficiario_w.cd_unimed_dad_ben);
					vet_tab_guia_sadt_w[igs].id_benef_dad_ben						:= trim(both r_dados_beneficiario_w.id_benef_dad_ben);
					vet_tab_guia_sadt_w[igs].nm_benef_dad_ben						:= substr(trim(both r_dados_beneficiario_w.nm_benef_dad_ben),1,25);
					vet_tab_guia_sadt_w[igs].id_rn_dad_ben							:= trim(both r_dados_beneficiario_w.id_rn_dad_ben);
					vet_tab_guia_sadt_w[igs].tp_paciente_dad_ben						:= trim(both r_dados_beneficiario_w.tp_paciente_dad_ben);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE

				for r_dados_solicitante_w in c_dados_solicitante( r_guia_sadt_w.dados_solicitante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE/CONTRATADOSOLICITANTE

					for r_contratado_solicitante_w in c_contratado_solicitante( r_dados_solicitante_w.contratado_solicitante_dad_sol ) loop
					
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE/CONTRATADOSOLICITANTE/CPF_CNPJ

						for r_cpf_cnpj_dad_sol_w in c_cpf_cnpj_dad_sol( r_contratado_solicitante_w.cpf_cnpj_dad_sol ) loop
							vet_tab_guia_sadt_w[igs].cd_cpf_dad_sol							:= trim(both r_cpf_cnpj_dad_sol_w.cd_cpf_dad_sol);
							vet_tab_guia_sadt_w[igs].cd_cnpj_dad_sol						:= trim(both r_cpf_cnpj_dad_sol_w.cd_cnpj_dad_sol);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE/CONTRATADOSOLICITANTE/UNIMEDPRESTADOR

						for r_unimed_prestador_w in c_unimed_prestador_dad_sol( r_contratado_solicitante_w.unimed_prestador_dad_sol ) loop
							vet_tab_guia_sadt_w[igs].cd_uni_prest_dad_sol						:= trim(both r_unimed_prestador_w.cd_uni_prest_dad_sol);
							vet_tab_guia_sadt_w[igs].cd_prest_dad_sol						:= trim(both r_unimed_prestador_w.cd_prest_dad_sol);
						end loop;
						
						vet_tab_guia_sadt_w[igs].nome_dad_sol							:= trim(both r_contratado_solicitante_w.nome_dad_sol);
					end loop;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE/PROFISSIONAL

					for r_profissional_w in c_profissional( r_dados_solicitante_w.profissional_dad_sol ) loop
						vet_tab_guia_sadt_w[igs].nm_profissional_pro						:= trim(both r_profissional_w.nm_profissional_pro);
						vet_tab_guia_sadt_w[igs].cbo_dad_sol							:= trim(both r_profissional_w.cbo_dad_sol);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSSOLICITANTE/PROFISSIONAL/DADOSCONSELHO

						for r_dados_conselho_pro_w in c_dados_conselho_pro( r_profissional_w.dados_conselho_pro ) loop
							vet_tab_guia_sadt_w[igs].sg_conselho_dad_con_pro					:= trim(both r_dados_conselho_pro_w.sg_conselho_dad_con_pro);
							vet_tab_guia_sadt_w[igs].nr_conselho_dad_con_pro					:= trim(both r_dados_conselho_pro_w.nr_conselho_dad_con_pro);
							vet_tab_guia_sadt_w[igs].uf_dad_con_pro							:= trim(both r_dados_conselho_pro_w.uf_dad_con_pro);
						end loop;
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSEXECUTANTE

				for r_dados_executante_w in c_dados_executante( r_guia_sadt_w.dados_executante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSEXECUTANTE/UNIMEDPRESTADOR

					for r_unimed_prestador_dad_exe_w in c_unimed_prestador_dad_exe( r_dados_executante_w.unimed_prestador_dad_exe ) loop
						vet_tab_guia_sadt_w[igs].cd_uni_prest_dad_exe						:= trim(both r_unimed_prestador_dad_exe_w.cd_uni_prest_dad_exe);
						vet_tab_guia_sadt_w[igs].cd_prest_dad_exe						:= trim(both r_unimed_prestador_dad_exe_w.cd_prest_dad_exe);
					end loop;
					
					vet_tab_guia_sadt_w[igs].nome_dad_exe							:= trim(both r_dados_executante_w.nome_dad_exe);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSEXECUTANTE/CPF_CNPJ

					for r_cpf_cnpj_dad_exe_w in c_cpf_cnpj_dad_exe( r_dados_executante_w.cpf_cnpj_dad_exe ) loop
						vet_tab_guia_sadt_w[igs].cd_cpf_dad_exe							:= trim(both r_cpf_cnpj_dad_exe_w.cd_cpf_dad_exe);
						vet_tab_guia_sadt_w[igs].cd_cnpj_dad_exe						:= trim(both r_cpf_cnpj_dad_exe_w.cd_cnpj_dad_exe);
					end loop;
					
					vet_tab_guia_sadt_w[igs].cnes_dad_exe							:= trim(both r_dados_executante_w.cnes_dad_exe);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSEXECUTANTE/PRESTADOR

					for r_prestador_dad_exe_w in c_prestador_dad_exe( r_dados_executante_w.prestador_dad_exe ) loop
						vet_tab_guia_sadt_w[igs].cd_municipio_cont_dad_exe					:= trim(both r_prestador_dad_exe_w.cd_municipio_cont_dad_exe);
						vet_tab_guia_sadt_w[igs].tp_rede_min_dad_exe						:= trim(both r_prestador_dad_exe_w.tp_rede_min_dad_exe);
						vet_tab_guia_sadt_w[igs].tp_prestador_dad_exe						:= trim(both r_prestador_dad_exe_w.tp_prestador_dad_exe);
						vet_tab_guia_sadt_w[igs].id_rec_proprio_dad_exe						:= trim(both r_prestador_dad_exe_w.id_rec_proprio_dad_exe);
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSATENDIMENTO

				for r_dados_atendimento_dad_ate_w in c_dados_atendimento_dad_ate( r_guia_sadt_w.dados_atendimento ) loop
					vet_tab_guia_sadt_w[igs].tp_atendimento_dad_ate						:= trim(both r_dados_atendimento_dad_ate_w.tp_atendimento_dad_ate);
					vet_tab_guia_sadt_w[igs].tp_indacidente_dad_ate						:= trim(both r_dados_atendimento_dad_ate_w.tp_indacidente_dad_ate);
					vet_tab_guia_sadt_w[igs].tp_consulta_dad_ate						:= trim(both r_dados_atendimento_dad_ate_w.tp_consulta_dad_ate);
					vet_tab_guia_sadt_w[igs].carater_atendimento_dad_ate					:= trim(both r_dados_atendimento_dad_ate_w.carater_atendimento_dad_ate);
					vet_tab_guia_sadt_w[igs].mv_encerramento_dad_ate					:= trim(both r_dados_atendimento_dad_ate_w.mv_encerramento_dad_ate);
					vet_tab_guia_sadt_w[igs].ie_cobertura_especial_dad_ate					:= trim(both r_dados_atendimento_dad_ate_w.ie_cobertura_especial_dad_ate);
					vet_tab_guia_sadt_w[igs].ie_regime_atendimento_dad_ate					:= trim(both r_dados_atendimento_dad_ate_w.ie_regime_atendimento_dad_ate);
					vet_tab_guia_sadt_w[igs].ie_saude_ocupacional_dad_ate					:= trim(both r_dados_atendimento_dad_ate_w.ie_saude_ocupacional_dad_ate);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA

				for r_dados_guia_dad_gui_w in c_dados_guia_dad_gui( r_guia_sadt_w.dados_guia ) loop
					vet_tab_guia_sadt_w[igs].nr_ver_tiss_dad_gui						:= trim(both r_dados_guia_dad_gui_w.nr_ver_tiss_dad_gui);
					vet_tab_guia_sadt_w[igs].nr_lote_prestador_dad_gui					:= trim(both r_dados_guia_dad_gui_w.nr_lote_prestador_dad_gui);
					vet_tab_guia_sadt_w[igs].dt_protocolo_dad_gui						:= trim(both r_dados_guia_dad_gui_w.dt_protocolo_dad_gui);
					vet_tab_guia_sadt_w[igs].dt_conhecimento_dad_gui					:= trim(both r_dados_guia_dad_gui_w.dt_conhecimento_dad_gui);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/NR_GUIAS

					for r_nr_guias_dad_gui_w in c_nr_guias_dad_gui( r_dados_guia_dad_gui_w.nr_guias_dad_gui ) loop
						vet_tab_guia_sadt_w[igs].nr_guia_tiss_prestador_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_prestador_dad_gui);
						vet_tab_guia_sadt_w[igs].nr_guia_tiss_operadora_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_operadora_dad_gui);
						vet_tab_guia_sadt_w[igs].nr_guia_tiss_principal_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_principal_dad_gui);
					end loop;
					
					vet_tab_guia_sadt_w[igs].dt_atendimento_dad_gui						:= trim(both r_dados_guia_dad_gui_w.dt_atendimento_dad_gui);
					vet_tab_guia_sadt_w[igs].id_liminar_dad_gui						:= trim(both r_dados_guia_dad_gui_w.id_liminar_dad_gui);
					vet_tab_guia_sadt_w[igs].id_continuado_dad_gui						:= trim(both r_dados_guia_dad_gui_w.id_continuado_dad_gui);
					vet_tab_guia_sadt_w[igs].id_aviso_dad_gui						:= trim(both r_dados_guia_dad_gui_w.id_aviso_dad_gui);
					vet_tab_guia_sadt_w[igs].cd_excecao_dad_gui						:= trim(both r_dados_guia_dad_gui_w.cd_excecao_dad_gui);
					vet_tab_guia_sadt_w[igs].id_glosa_total_dad_gui						:= trim(both r_dados_guia_dad_gui_w.id_glosa_total_dad_gui);
					
					igspe	:= vet_tab_guia_sadt_proc_exec_w.count + 1;

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS

					for r_procediment_exec_dad_gui_w in c_procediment_exec_dad_gui( r_dados_guia_dad_gui_w.procedimentos_exec_dad_gui ) loop
					
						vet_tab_guia_sadt_proc_exec_w[igspe].id				:= igs;
						vet_tab_guia_sadt_proc_exec_w[igspe].dt_execucao_pro		:= trim(both r_procediment_exec_dad_gui_w.dt_execucao_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].hr_inicial_pro		:= trim(both r_procediment_exec_dad_gui_w.hr_inicial_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].hr_final_pro		:= trim(both r_procediment_exec_dad_gui_w.hr_final_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/PROCEDIMENTOS

						for r_procedimentos_w in c_procedimentos( r_procediment_exec_dad_gui_w.procedimentos_pro ) loop
							vet_tab_guia_sadt_proc_exec_w[igspe].seq_item_pro			:= trim(both r_procedimentos_w.seq_item_pro);
							vet_tab_guia_sadt_proc_exec_w[igspe].tp_tabela_pro			:= trim(both r_procedimentos_w.tp_tabela_pro);
							vet_tab_guia_sadt_proc_exec_w[igspe].cd_servico_pro			:= trim(both r_procedimentos_w.cd_servico_pro);
							vet_tab_guia_sadt_proc_exec_w[igspe].ds_servico_pro			:= trim(both r_procedimentos_w.ds_servico_pro);
							vet_tab_guia_sadt_proc_exec_w[igspe].qt_cobrada_pro			:= trim(both r_procedimentos_w.qt_cobrada_pro);
							vet_tab_guia_sadt_proc_exec_w[igspe].id_item_unico_proc			:= trim(both r_procedimentos_w.id_item_unico_proc);
						end loop;
						
						vet_tab_guia_sadt_proc_exec_w[igspe].via_acesso_pro			:= trim(both r_procediment_exec_dad_gui_w.via_acesso_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].tc_utilizada_pro			:= trim(both r_procediment_exec_dad_gui_w.tc_utilizada_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].id_acrescimo_pro			:= trim(both r_procediment_exec_dad_gui_w.id_acrescimo_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/VALORES

						for r_valores_w in c_valores( r_procediment_exec_dad_gui_w.valores_pro ) loop
							vet_tab_guia_sadt_proc_exec_w[igspe].vl_serv_cobrado_val		:= trim(both r_valores_w.vl_serv_cobrado_val);
							vet_tab_guia_sadt_proc_exec_w[igspe].vl_filme_cobrado_val		:= trim(both r_valores_w.vl_filme_cobrado_val);
							vet_tab_guia_sadt_proc_exec_w[igspe].vl_co_cobrado_val			:= trim(both r_valores_w.vl_co_cobrado_val);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/TAXAS

						for r_taxas_w in c_taxas( r_procediment_exec_dad_gui_w.taxas_pro ) loop
							vet_tab_guia_sadt_proc_exec_w[igspe].tx_adm_servico_tax			:= trim(both r_taxas_w.tx_adm_servico_tax);
							vet_tab_guia_sadt_proc_exec_w[igspe].tx_adm_filme_tax			:= trim(both r_taxas_w.tx_adm_filme_tax);
							vet_tab_guia_sadt_proc_exec_w[igspe].tx_adm_co_tax			:= trim(both r_taxas_w.tx_adm_co_tax);
						end loop;
						
						vet_tab_guia_sadt_proc_exec_w[igspe].un_medida_pro			:= trim(both r_procediment_exec_dad_gui_w.un_medida_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].ft_multiplicador_servico_pro	:= trim(both r_procediment_exec_dad_gui_w.ft_multiplicador_servico_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].id_avisado_item_proc               := trim(both r_procediment_exec_dad_gui_w.id_avisado_item_proc);
						vet_tab_guia_sadt_proc_exec_w[igspe].id_avisado_pro			:= trim(both r_procediment_exec_dad_gui_w.id_avisado_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].id_pacote_pro			:= trim(both r_procediment_exec_dad_gui_w.id_pacote_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].cd_pacote_pro			:= trim(both r_procediment_exec_dad_gui_w.cd_pacote_pro);
						vet_tab_guia_sadt_proc_exec_w[igspe].cd_porte_anestesico_pro		:= trim(both r_procediment_exec_dad_gui_w.cd_porte_anestesico_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSOPME

						for r_dados_opme_generico_w in c_dados_opme_generico( r_procediment_exec_dad_gui_w.dados_opme_generico_pro ) loop
						
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSOPME/PAGOFORNECEDOR

							for r_pago_fornecedor_SADT in c_pago_fornecedor_SADT( r_dados_opme_generico_w.pago_fornecedor_opm_SADT ) loop
								vet_tab_guia_sadt_proc_exec_w[igspe].cd_cnpj_for			:= trim(both r_pago_fornecedor_SADT.cd_cnpj_for);
								vet_tab_guia_sadt_proc_exec_w[igspe].nm_fornecedor_materi_opm_gen	:= trim(both r_pago_fornecedor_SADT.nm_fornecedor_materi_opm_gen);
								vet_tab_guia_sadt_proc_exec_w[igspe].nr_nota_fiscal_forne_opm_gen	:= trim(both r_pago_fornecedor_SADT.nr_nota_fiscal_forne_opm_gen);
							end loop;
							
							vet_tab_guia_sadt_proc_exec_w[igspe].det_registro_anvisa_opm_gen	:= trim(both r_dados_opme_generico_w.det_registro_anvisa_opm_gen);
							vet_tab_guia_sadt_proc_exec_w[igspe].nr_registro_anvisa_opm_gen		:= trim(both r_dados_opme_generico_w.nr_registro_anvisa_opm_gen);
							vet_tab_guia_sadt_proc_exec_w[igspe].cd_referenci_mat_fab_opm_gen	:= trim(both r_dados_opme_generico_w.cd_referenci_mat_fab_opm_gen);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL

						for r_equipe_profissional_w in c_equipe_profissional( r_procediment_exec_dad_gui_w.equipe_profissional_pro ) loop
							
							igspp := vet_tab_guia_sadt_proc_eqp_w.count + 1;

							vet_tab_guia_sadt_proc_eqp_w[igspp].id 			:= vet_tab_guia_sadt_proc_exec_w[igspe].id_item_unico_proc || vet_tab_guia_sadt_proc_exec_w[igspe].id;
							vet_tab_guia_sadt_proc_eqp_w[igspp].tp_participacao	:= trim(both r_equipe_profissional_w.tp_participacao_equ_pro);
							
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/PRESTADOR

							for r_prestador_equ_pre_w in c_prestador_equ_pre( r_equipe_profissional_w.prestador_equ_pro ) loop
								vet_tab_guia_sadt_proc_eqp_w[igspp].cd_uni_prest	:= trim(both r_prestador_equ_pre_w.cd_uni_prest_pro_equ_pro);
								vet_tab_guia_sadt_proc_eqp_w[igspp].cd_prest		:= trim(both r_prestador_equ_pre_w.cd_prest_pro_equ_pro);
							end loop;
							
							vet_tab_guia_sadt_proc_eqp_w[igspp].nm_prest		:= trim(both r_equipe_profissional_w.nm_profissional_equ_pro);
							vet_tab_guia_sadt_proc_eqp_w[igspp].cd_cpf		:= trim(both r_equipe_profissional_w.cd_cpf_equ_pro);
							
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/DADOSCONSELHO

							for r_dados_conselho_equ_pro_w in c_dados_conselho_equ_pro( r_equipe_profissional_w.dados_conselho_equ_pro ) loop
								vet_tab_guia_sadt_proc_eqp_w[igspp].sg_conselho	:= trim(both r_dados_conselho_equ_pro_w.sg_conselho_dad_con_equ_pro);
								vet_tab_guia_sadt_proc_eqp_w[igspp].nr_conselho	:= trim(both r_dados_conselho_equ_pro_w.nr_conselho_dad_con_equ_pro);
								vet_tab_guia_sadt_proc_eqp_w[igspp].uf_conselho	:= trim(both r_dados_conselho_equ_pro_w.uf_dad_con_equ_pro);
							end loop;
							
							vet_tab_guia_sadt_proc_eqp_w[igspp].nr_cbo	:= trim(both r_equipe_profissional_w.cbo_equ_pro);

						end loop;
						
						vet_tab_guia_sadt_proc_exec_w[igspe].cd_ato_pro		:= trim(both r_procediment_exec_dad_gui_w.cd_ato_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSAUTORIZACAO

						for r_dados_autorizacao_w in c_dados_autorizacao( r_procediment_exec_dad_gui_w.dados_autorizacao_pro ) loop
							vet_tab_guia_sadt_proc_exec_w[igspe].dt_solicitacao_dad_aut		:= trim(both r_dados_autorizacao_w.dt_solicitacao_dad_aut);
							vet_tab_guia_sadt_proc_exec_w[igspe].nr_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.nr_autorizacao_dad_aut);
							vet_tab_guia_sadt_proc_exec_w[igspe].dt_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.dt_autorizacao_dad_aut);
							vet_tab_guia_sadt_proc_exec_w[igspe].cd_uni_autorizadora_dad_aut	:= trim(both r_dados_autorizacao_w.cd_uni_autorizadora_dad_aut);
							vet_tab_guia_sadt_proc_exec_w[igspe].tp_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.tp_autorizacao_dad_aut);
						end loop;
						
						-- INCREMENTO PROCEDIMENTO

						igspe := igspe + 1;
					end loop;
					
					vet_tab_guia_sadt_w[igs].dt_ultima_autorizacao_dad_gui	:= trim(both r_dados_guia_dad_gui_w.dt_ultima_autorizacao_dad_gui);
					
					igscp	:= vet_tab_guia_sadt_comp_w.count + 1;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/DADOSGUIA/COMPLEMENTO

					for r_compleme_dad_gui_com_w in c_compleme_dad_gui_com( r_dados_guia_dad_gui_w.compleme_dad_gui_com ) loop
					
						vet_tab_guia_sadt_comp_w[igscp].id_complemento			:= igs;
						vet_tab_guia_sadt_comp_w[igscp].tp_reg_cpl_dad_gui_com		:= trim(both r_compleme_dad_gui_com_w.tp_reg_cpl_dad_gui_com);
						vet_tab_guia_sadt_comp_w[igscp].nm_desc_compleme_dad_gui_com	:= substr(trim(both r_compleme_dad_gui_com_w.nm_desc_compleme_dad_gui_com),1,500);
						
						-- INCREMENTO COMPLEMENTO

						igscp := igscp + 1;
					end loop;

					vet_tab_guia_sadt_w[igs].id_guia_principal_dad_gui	:= trim(both r_dados_guia_dad_gui_w.id_guia_principal_dad_gui);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/REAPRESENTACAOGLOSADO

				for r_reapresentacao_glo_rea_glo_w in c_reapresentacao_glo_rea_glo( r_guia_sadt_w.reapresentacao_glosado ) loop
					vet_tab_guia_sadt_w[igs].nr_doc1_glosado_rea_glo					:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc1_glosado_rea_glo);
					vet_tab_guia_sadt_w[igs].nr_doc2_glosado_rea_glo					:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc2_glosado_rea_glo);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA

					for r_dados_lote_guia_SADT in c_dados_lote_guia_SADT( r_reapresentacao_glo_rea_glo_w.dados_lote_guia ) loop
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/TXT

						for r_dados_guia_txt_SADT in c_dados_guia_txt_SADT( r_dados_lote_guia_SADT.txt ) loop
							vet_tab_guia_sadt_w[igs].nr_lote_rea_glo_txt					:= trim(both r_dados_guia_txt_SADT.nr_lote_rea_glo_txt);
							vet_tab_guia_sadt_w[igs].nr_nota_rea_glo_txt					:= trim(both r_dados_guia_txt_SADT.nr_nota_rea_glo_txt);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASADT/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/XML

						for r_dados_guia_xml_SADT in c_dados_guia_xml_SADT( r_dados_lote_guia_SADT.xml ) loop
							vet_tab_guia_sadt_w[igs].nr_lote_prestador_xml_rea_glo				:= trim(both r_dados_guia_xml_SADT.nr_lote_prestador_xml_rea_glo);
							vet_tab_guia_sadt_w[igs].nr_guia_glosada_xml_rea_glo				:= trim(both r_dados_guia_xml_SADT.nr_guia_glosada_xml_rea_glo);
							vet_tab_guia_sadt_w[igs].nr_guia_tiss_oper_glo_rea_glo				:= trim(both r_dados_guia_xml_SADT.nr_guia_tiss_oper_glo_rea_glo);
						end loop;
					end loop;
				end loop;
				
				-- INCREMENTO NOTA COBRANCA

				igs	:= igs + 1;
			end loop;
			
			--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE INTERNACAO ++++++++++++++++++++++++++++++++++++++++++++++

			-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO

			for r_guia_internacao_w in c_tipo_guia_internacao( r_arquivo_a500_tipo_guia_w.guia_internacao ) loop
			
				igi	:= vet_tab_guia_int_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSBENEFICIARIO

				for r_dados_beneficiario_int_w in c_dados_beneficiario_int( r_guia_internacao_w.dados_beneficiario ) loop
					vet_tab_guia_int_w[igi].id							:= igi;
					vet_tab_guia_int_w[igi].cd_unimed_dad_ben					:= trim(both r_dados_beneficiario_int_w.cd_unimed_dad_ben);
					vet_tab_guia_int_w[igi].id_benef_dad_ben					:= trim(both r_dados_beneficiario_int_w.id_benef_dad_ben);
					vet_tab_guia_int_w[igi].nm_benef_dad_ben					:= substr(trim(both r_dados_beneficiario_int_w.nm_benef_dad_ben),1,25);
					vet_tab_guia_int_w[igi].id_rn_dad_ben						:= trim(both r_dados_beneficiario_int_w.id_rn_dad_ben);
					vet_tab_guia_int_w[igi].tp_paciente_dad_ben					:= trim(both r_dados_beneficiario_int_w.tp_paciente_dad_ben);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE

				for r_dados_solicitante_int_w in c_dados_solicitante_int( r_guia_internacao_w.dados_solicitante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE/CONTRATADOSOLICITANTE

					for r_contratado_solicitante_int_w in c_contratado_solicitante_int( r_dados_solicitante_int_w.contratado_solicitante_dad_sol ) loop
					
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE/CONTRATADOSOLICITANTE/CPF_CNPJ

						for r_cpf_cnpj_dad_sol_int_w in c_cpf_cnpj_dad_sol_int( r_contratado_solicitante_int_w.cpf_cnpj_dad_sol ) loop
							vet_tab_guia_int_w[igi].cd_cpf_dad_sol					:= trim(both r_cpf_cnpj_dad_sol_int_w.cd_cpf_dad_sol);
							vet_tab_guia_int_w[igi].cd_cnpj_dad_sol					:= trim(both r_cpf_cnpj_dad_sol_int_w.cd_cnpj_dad_sol);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE/CONTRATADOSOLICITANTE/UNIMEDPRESTADOR

						for r_unimed_prestador_int_w in c_unimed_prestador_dad_sol_int( r_contratado_solicitante_int_w.unimed_prestador_dad_sol ) loop
							vet_tab_guia_int_w[igi].cd_uni_prest_dad_sol				:= trim(both r_unimed_prestador_int_w.cd_uni_prest_dad_sol);
							vet_tab_guia_int_w[igi].cd_prest_dad_sol				:= trim(both r_unimed_prestador_int_w.cd_prest_dad_sol);
						end loop;
						
						vet_tab_guia_int_w[igi].nome_dad_sol						:= trim(both r_contratado_solicitante_int_w.nome_dad_sol);
					end loop;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE/PROFISSIONAL

					for r_profissional_int_w in c_profissional_int( r_dados_solicitante_int_w.profissional_dad_sol ) loop
						vet_tab_guia_int_w[igi].nm_profissional_pro					:= trim(both r_profissional_int_w.nm_profissional_pro);
						vet_tab_guia_int_w[igi].cbo_dad_sol						:= trim(both r_profissional_int_w.cbo_dad_sol);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSSOLICITANTE/PROFISSIONAL/DADOSCONSELHO

						for r_dados_conselho_pro_int_w in c_dados_conselho_pro_int( r_profissional_int_w.dados_conselho_pro ) loop
							vet_tab_guia_int_w[igi].sg_conselho_dad_con_pro				:= trim(both r_dados_conselho_pro_int_w.sg_conselho_dad_con_pro);
							vet_tab_guia_int_w[igi].nr_conselho_dad_con_pro				:= trim(both r_dados_conselho_pro_int_w.nr_conselho_dad_con_pro);
							vet_tab_guia_int_w[igi].uf_dad_con_pro					:= trim(both r_dados_conselho_pro_int_w.uf_dad_con_pro);
						end loop;
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSEXECUTANTE

				for r_dados_executante_int_w in c_dados_executante_int( r_guia_internacao_w.dados_executante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSEXECUTANTE/UNIMEDPRESTADOR

					for r_unimed_prest_dad_exe_int_w in c_unimed_prestador_dad_exe_int( r_dados_executante_int_w.unimed_prestador_dad_exe ) loop
						vet_tab_guia_int_w[igi].cd_uni_prest_dad_exe					:= trim(both r_unimed_prest_dad_exe_int_w.cd_uni_prest_dad_exe);
						vet_tab_guia_int_w[igi].cd_prest_dad_exe					:= trim(both r_unimed_prest_dad_exe_int_w.cd_prest_dad_exe);
					end loop;
					
					vet_tab_guia_int_w[igi].nome_prestador_dad_exe					:= trim(both r_dados_executante_int_w.nome_prestador_dad_exe);
					vet_tab_guia_int_w[igi].cd_cnpj_dad_exe						:= trim(both r_dados_executante_int_w.cd_cnpj_dad_exe);
					vet_tab_guia_int_w[igi].CNES_prestador_dad_exe					:= trim(both r_dados_executante_int_w.CNES_prestador_dad_exe);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSEXECUTANTE/PRESTADOR

					for r_prestador_dad_exe_int_w in c_prestador_dad_exe_int( r_dados_executante_int_w.prestador_dad_exe ) loop
						vet_tab_guia_int_w[igi].cd_municipio_cont_dad_exe				:= trim(both r_prestador_dad_exe_int_w.cd_municipio_cont_dad_exe);
						vet_tab_guia_int_w[igi].tp_rede_min_dad_exe					:= trim(both r_prestador_dad_exe_int_w.tp_rede_min_dad_exe);
						vet_tab_guia_int_w[igi].tp_prestador_dad_exe					:= trim(both r_prestador_dad_exe_int_w.tp_prestador_dad_exe);
						vet_tab_guia_int_w[igi].id_rec_proprio_dad_exe					:= trim(both r_prestador_dad_exe_int_w.id_rec_proprio_dad_exe);
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSINTERNACAO

				for r_dados_internacao_w in c_dados_internacao( r_guia_internacao_w.dados_internacao ) loop
					vet_tab_guia_int_w[igi].tp_acomodacao_dad_int					:= trim(both r_dados_internacao_w.tp_acomodacao_dad_int);
					vet_tab_guia_int_w[igi].ft_multiplicador_amb_dad_int				:= trim(both r_dados_internacao_w.ft_multiplicador_amb_dad_int);
					vet_tab_guia_int_w[igi].tp_internacao_dad_int					:= trim(both r_dados_internacao_w.tp_internacao_dad_int);
					vet_tab_guia_int_w[igi].rg_internacao_dad_int					:= trim(both r_dados_internacao_w.rg_internacao_dad_int);
					vet_tab_guia_int_w[igi].carater_atendimento_dad_int				:= trim(both r_dados_internacao_w.carater_atendimento_dad_int);
					
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSINTERNACAO/DADOOSFATURAMENTO

					for r_dados_faturamento_int_w in c_dados_faturamento_dad_int( r_dados_internacao_w.dados_faturamento_dad_int ) loop
						vet_tab_guia_int_w[igi].tp_fat_dad_int						:= trim(both r_dados_faturamento_int_w.tp_fat_dad_int);
						vet_tab_guia_int_w[igi].dt_inicio_fat_dad_int					:= trim(both r_dados_faturamento_int_w.dt_inicio_fat_dad_int);
						vet_tab_guia_int_w[igi].dt_fim_fat_dad_int					:= trim(both r_dados_faturamento_int_w.dt_fim_fat_dad_int);
						
					end loop;
					
					igich	:= ver_tab_guia_compl_hosp_w.count + 1;

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSINTERNACAO/DADOOSDECLARACOES

					for r_dados_declaracoes_int_w in c_dados_declaracoes_dad_int( r_dados_internacao_w.dados_declaracoes_dad_int ) loop
						ver_tab_guia_compl_hosp_w[igich].id					:= igi;
						ver_tab_guia_compl_hosp_w[igich].ds_declaracao_nascido			:= trim(both r_dados_declaracoes_int_w.ds_declaracao_nascido);
						ver_tab_guia_compl_hosp_w[igich].cd_cid_obito				:= trim(both r_dados_declaracoes_int_w.cd_cid_obito);
						ver_tab_guia_compl_hosp_w[igich].ds_declaracao_obito			:= trim(both r_dados_declaracoes_int_w.ds_declaracao_obito);
						ver_tab_guia_compl_hosp_w[igich].ie_recem_nascido			:= trim(both r_dados_declaracoes_int_w.ie_recem_nascido);
						igich := igich + 1;
					end loop;
				end loop;
				
				for r_dados_saida_internacao in c_dados_saida_internacao( r_guia_internacao_w.dados_saida_internacao ) loop
					vet_tab_guia_int_w[igi].motivo_encerramento_dad_int				:= trim(both r_dados_saida_internacao.motivo_encerramento_dad_int);
					vet_tab_guia_int_w[igi].tp_indicador_acidente_dad_int				:= trim(both r_dados_saida_internacao.tp_indicador_acidente_dad_int);
					vet_tab_guia_int_w[igi].CID_dad_int						:= trim(both r_dados_saida_internacao.CID_dad_int);
					vet_tab_guia_int_w[igi].CID_dad_int_2						:= trim(both r_dados_saida_internacao.CID_dad_int_2);
					vet_tab_guia_int_w[igi].CID_dad_int_3						:= trim(both r_dados_saida_internacao.CID_dad_int_3);
					vet_tab_guia_int_w[igi].CID_dad_int_4						:= trim(both r_dados_saida_internacao.CID_dad_int_4);
				end loop;

				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSAUDITORIA

				for r_dados_auditoria_int_w in c_dados_auditoria_int( r_guia_internacao_w.dados_auditoria ) loop
					vet_tab_guia_int_w[igi].nm_medico_auditor_dad_aud				:= trim(both r_dados_auditoria_int_w.nm_medico_auditor_dad_aud);
					vet_tab_guia_int_w[igi].nr_crm_auditor_dad_aud					:= trim(both r_dados_auditoria_int_w.nr_crm_auditor_dad_aud);
					vet_tab_guia_int_w[igi].cd_uf_crm_dad_aud					:= trim(both r_dados_auditoria_int_w.cd_uf_crm_dad_aud);
					vet_tab_guia_int_w[igi].nm_enfer_auditor_dad_aud				:= trim(both r_dados_auditoria_int_w.nm_enfer_auditor_dad_aud);
					vet_tab_guia_int_w[igi].nr_coren_auditor_dad_aud				:= trim(both r_dados_auditoria_int_w.nr_coren_auditor_dad_aud);
					vet_tab_guia_int_w[igi].cd_uf_coren_dad_aud					:= trim(both r_dados_auditoria_int_w.cd_uf_coren_dad_aud);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA

				for r_dados_guia_int_w in c_dados_guia_int( r_guia_internacao_w.dados_guia ) loop
					vet_tab_guia_int_w[igi].nr_ver_tiss_dad_gui					:= trim(both r_dados_guia_int_w.nr_ver_tiss_dad_gui);
					vet_tab_guia_int_w[igi].nr_lote_prestador_dad_gui				:= trim(both r_dados_guia_int_w.nr_lote_prestador_dad_gui);
					vet_tab_guia_int_w[igi].dt_protocolo_dad_gui					:= trim(both r_dados_guia_int_w.dt_protocolo_dad_gui);
					vet_tab_guia_int_w[igi].dt_conhecimento_dad_gui					:= trim(both r_dados_guia_int_w.dt_conhecimento_dad_gui);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/NR_GUIAS

					for r_nr_guias_dad_gui_int_w in c_nr_guias_dad_gui_int( r_dados_guia_int_w.nr_guias_dad_gui ) loop
						vet_tab_guia_int_w[igi].nr_guia_tiss_prestador_dad_gui				:= trim(both r_nr_guias_dad_gui_int_w.nr_guia_tiss_prestador_dad_gui);
						vet_tab_guia_int_w[igi].nr_guia_tiss_operadora_dad_gui				:= trim(both r_nr_guias_dad_gui_int_w.nr_guia_tiss_operadora_dad_gui);
						vet_tab_guia_int_w[igi].nr_guia_tiss_principal_dad_gui				:= trim(both r_nr_guias_dad_gui_int_w.nr_guia_tiss_principal_dad_gui);
					end loop;
					
					vet_tab_guia_int_w[igi].dt_atendimento_dad_gui					:= trim(both r_dados_guia_int_w.dt_atendimento_dad_gui);
					vet_tab_guia_int_w[igi].id_liminar_dad_gui					:= trim(both r_dados_guia_int_w.id_liminar_dad_gui);
					vet_tab_guia_int_w[igi].id_continuado_dad_gui					:= trim(both r_dados_guia_int_w.id_continuado_dad_gui);
					vet_tab_guia_int_w[igi].id_aviso_dad_gui					:= trim(both r_dados_guia_int_w.id_aviso_dad_gui);
					vet_tab_guia_int_w[igi].id_glosa_total_dad_gui					:= trim(both r_dados_guia_int_w.id_glosa_total_dad_gui);
					vet_tab_guia_int_w[igi].cd_excecao_dad_gui					:= trim(both r_dados_guia_int_w.cd_excecao_dad_gui);
					
					igipe	:= vet_tab_guia_int_proc_exec_w.count + 1;

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS

					for r_proc_exec_dad_gui_int_w in c_procediment_exec_dad_gui_int( r_dados_guia_int_w.procedimentos_exec_dad_gui ) loop
						vet_tab_guia_int_proc_exec_w[igipe].id						:= igi;
						vet_tab_guia_int_proc_exec_w[igipe].dt_execucao_pro				:= trim(both r_proc_exec_dad_gui_int_w.dt_execucao_pro);
						vet_tab_guia_int_proc_exec_w[igipe].hr_inicial_pro				:= trim(both r_proc_exec_dad_gui_int_w.hr_inicial_pro);
						vet_tab_guia_int_proc_exec_w[igipe].hr_final_pro				:= trim(both r_proc_exec_dad_gui_int_w.hr_final_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/PROCEDIMENTOS

						for r_procedimentos_int_w in c_procedimentos_int( r_proc_exec_dad_gui_int_w.procedimentos_pro ) loop
							vet_tab_guia_int_proc_exec_w[igipe].seq_item_pro				:= trim(both r_procedimentos_int_w.seq_item_pro);
							vet_tab_guia_int_proc_exec_w[igipe].tp_tabela_pro				:= trim(both r_procedimentos_int_w.tp_tabela_pro);
							vet_tab_guia_int_proc_exec_w[igipe].cd_servico_pro				:= trim(both r_procedimentos_int_w.cd_servico_pro);
							vet_tab_guia_int_proc_exec_w[igipe].ds_servico_pro				:= trim(both r_procedimentos_int_w.ds_servico_pro);
							vet_tab_guia_int_proc_exec_w[igipe].qt_cobrada_pro				:= trim(both r_procedimentos_int_w.qt_cobrada_pro);
							vet_tab_guia_int_proc_exec_w[igipe].id_item_unico_proc				:= trim(both r_procedimentos_int_w.id_item_unico_proc);
						end loop;
						
						vet_tab_guia_int_proc_exec_w[igipe].via_acesso_pro				:= trim(both r_proc_exec_dad_gui_int_w.via_acesso_pro);
						vet_tab_guia_int_proc_exec_w[igipe].tc_utilizada_pro				:= trim(both r_proc_exec_dad_gui_int_w.tc_utilizada_pro);
						vet_tab_guia_int_proc_exec_w[igipe].id_acrescimo_pro				:= trim(both r_proc_exec_dad_gui_int_w.id_acrescimo_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/VALORES

						for r_valores_int_w in c_valores_int( r_proc_exec_dad_gui_int_w.valores_pro ) loop
							vet_tab_guia_int_proc_exec_w[igipe].vl_serv_cobrado_val				:= trim(both r_valores_int_w.vl_serv_cobrado_val);
							vet_tab_guia_int_proc_exec_w[igipe].vl_filme_cobrado_val			:= trim(both r_valores_int_w.vl_filme_cobrado_val);
							vet_tab_guia_int_proc_exec_w[igipe].vl_co_cobrado_val				:= trim(both r_valores_int_w.vl_co_cobrado_val);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/TAXAS

						for r_taxas_int_w in c_taxas_int( r_proc_exec_dad_gui_int_w.taxas_pro ) loop
							vet_tab_guia_int_proc_exec_w[igipe].tx_adm_servico_tax				:= trim(both r_taxas_int_w.tx_adm_servico_tax);
							vet_tab_guia_int_proc_exec_w[igipe].tx_adm_filme_tax				:= trim(both r_taxas_int_w.tx_adm_filme_tax);
							vet_tab_guia_int_proc_exec_w[igipe].tx_adm_co_tax				:= trim(both r_taxas_int_w.tx_adm_co_tax);
						end loop;
						
						vet_tab_guia_int_proc_exec_w[igipe].un_medida_pro				:= trim(both r_proc_exec_dad_gui_int_w.un_medida_pro);
						vet_tab_guia_int_proc_exec_w[igipe].ft_multiplicador_servico_pro		:= trim(both r_proc_exec_dad_gui_int_w.ft_multiplicador_servico_pro);
						vet_tab_guia_int_proc_exec_w[igipe].id_avisado_item_proc			:= trim(both r_proc_exec_dad_gui_int_w.id_avisado_item_proc);
						vet_tab_guia_int_proc_exec_w[igipe].id_avisado_pro				:= trim(both r_proc_exec_dad_gui_int_w.id_avisado_pro);
						vet_tab_guia_int_proc_exec_w[igipe].id_pacote_pro				:= trim(both r_proc_exec_dad_gui_int_w.id_pacote_pro);
						vet_tab_guia_int_proc_exec_w[igipe].cd_pacote_pro				:= trim(both r_proc_exec_dad_gui_int_w.cd_pacote_pro);
						vet_tab_guia_int_proc_exec_w[igipe].cd_porte_anestesico_pro			:= trim(both r_proc_exec_dad_gui_int_w.cd_porte_anestesico_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSOPME

						for r_dados_opme_generico_int_w in c_dados_opme_generico_int( r_proc_exec_dad_gui_int_w.dados_opme_generico_pro ) loop
						
							for r_pago_fornecedor_int in c_pago_fornecedor_int( r_dados_opme_generico_int_w.pago_fornecedor_opm_int ) loop
								vet_tab_guia_int_proc_exec_w[igipe].cd_cnpj_for				:= trim(both r_pago_fornecedor_int.cd_cnpj_for);
								vet_tab_guia_int_proc_exec_w[igipe].nm_fornecedor_materi_opm_gen	:= trim(both r_pago_fornecedor_int.nm_fornecedor_materi_opm_gen);
								vet_tab_guia_int_proc_exec_w[igipe].nr_nota_fiscal_forne_opm_gen	:= trim(both r_pago_fornecedor_int.nr_nota_fiscal_forne_opm_gen);
							end loop;
						
							vet_tab_guia_int_proc_exec_w[igipe].det_registro_anvisa_opm_gen		:= trim(both r_dados_opme_generico_int_w.det_registro_anvisa_opm_gen);
							vet_tab_guia_int_proc_exec_w[igipe].nr_registro_anvisa_opm_gen		:= trim(both r_dados_opme_generico_int_w.nr_registro_anvisa_opm_gen);
							vet_tab_guia_int_proc_exec_w[igipe].cd_referenci_mat_fab_opm_gen	:= trim(both r_dados_opme_generico_int_w.cd_referenci_mat_fab_opm_gen);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL

						for r_equipe_profissional_int_w in c_equipe_profissional_int( r_proc_exec_dad_gui_int_w.equipe_profissional_pro ) loop

							igipp := vet_tab_guia_int_proc_eqp_w.count + 1;

							vet_tab_guia_int_proc_eqp_w[igipp].id 			:= vet_tab_guia_int_proc_exec_w[igipe].id_item_unico_proc || vet_tab_guia_int_proc_exec_w[igipe].id;
							vet_tab_guia_int_proc_eqp_w[igipp].tp_participacao	:= trim(both r_equipe_profissional_int_w.tp_participacao_equ_pro);
							
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/PRESTADOR

							for r_prestador_equ_pre_int_w in c_prestador_equ_pre_int( r_equipe_profissional_int_w.prestador_equ_pro ) loop
								vet_tab_guia_int_proc_eqp_w[igipp].cd_uni_prest		:= trim(both r_prestador_equ_pre_int_w.cd_uni_prest_pro_equ_pro);
								vet_tab_guia_int_proc_eqp_w[igipp].cd_prest		:= trim(both r_prestador_equ_pre_int_w.cd_prest_pro_equ_pro);
							end loop;

							vet_tab_guia_int_proc_eqp_w[igipp].nm_prest		:= trim(both r_equipe_profissional_int_w.nm_profissional_equ_pro);
							vet_tab_guia_int_proc_eqp_w[igipp].cd_cpf		:= trim(both r_equipe_profissional_int_w.cd_cpf_equ_pro);

							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/DADOSCONSELHO

							for r_dados_conselho_equ_pro_int_w in c_dados_conselho_equ_pro_int( r_equipe_profissional_int_w.dados_conselho_equ_pro ) loop
								vet_tab_guia_int_proc_eqp_w[igipp].sg_conselho		:= trim(both r_dados_conselho_equ_pro_int_w.sg_conselho_dad_con_equ_pro);
								vet_tab_guia_int_proc_eqp_w[igipp].nr_conselho		:= trim(both r_dados_conselho_equ_pro_int_w.nr_conselho_dad_con_equ_pro);
								vet_tab_guia_int_proc_eqp_w[igipp].uf_conselho		:= trim(both r_dados_conselho_equ_pro_int_w.uf_dad_con_equ_pro);
							end loop;

							vet_tab_guia_int_proc_eqp_w[igipp].nr_cbo	:= trim(both r_equipe_profissional_int_w.cbo_equ_pro);

						end loop;

						vet_tab_guia_int_proc_exec_w[igipe].cd_ato_equ_pro	:= trim(both r_proc_exec_dad_gui_int_w.cd_ato_equ_pro);

						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSAUTORIZACAO

						for r_dados_autorizacao_int_w in c_dados_autorizacao_int( r_proc_exec_dad_gui_int_w.dados_autorizacao_pro ) loop
							vet_tab_guia_int_proc_exec_w[igipe].dt_solicitacao_dad_aut		:= trim(both r_dados_autorizacao_int_w.dt_solicitacao_dad_aut);
							vet_tab_guia_int_proc_exec_w[igipe].nr_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_int_w.nr_autorizacao_dad_aut);
							vet_tab_guia_int_proc_exec_w[igipe].dt_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_int_w.dt_autorizacao_dad_aut);
							vet_tab_guia_int_proc_exec_w[igipe].cd_uni_autorizadora_dad_aut		:= trim(both r_dados_autorizacao_int_w.cd_uni_autorizadora_dad_aut);
							vet_tab_guia_int_proc_exec_w[igipe].tp_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_int_w.tp_autorizacao_dad_aut);
						end loop;
						
						-- INCREMENTO PROCEDIMENTO

						igipe := igipe + 1;
					end loop;

					vet_tab_guia_int_w[igi].dt_ultima_autorizacao_dad_gui			:= trim(both r_dados_guia_int_w.dt_ultima_autorizacao_dad_gui);

					igicp	:= ver_tab_guia_int_complemento_w.count + 1;

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/DADOSGUIA/COMPLEMENTO

					for r_compleme_dad_gui_com_int_w in c_compleme_dad_gui_com_int( r_dados_guia_int_w.compleme_dad_gui_com ) loop
						ver_tab_guia_int_complemento_w[igicp].id_complemento			:= igi;
						ver_tab_guia_int_complemento_w[igicp].tp_reg_cpl_dad_gui_com		:= trim(both r_compleme_dad_gui_com_int_w.tp_reg_cpl_dad_gui_com);
						ver_tab_guia_int_complemento_w[igicp].nm_desc_compleme_dad_gui_com	:= substr(trim(both r_compleme_dad_gui_com_int_w.nm_desc_compleme_dad_gui_com),1,500);
						
						-- INCREMENTO COMPLEMENTO

						igicp := igicp + 1;
					end loop;
				end loop;

				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIASINTERNACAO/REAPRESENTACAOGLOSADO

				for r_rea_glo_rea_glo_int_w in c_rea_glo_rea_glo_int( r_guia_internacao_w.reapresentacao_glosado ) loop
					vet_tab_guia_int_w[igi].nr_doc1_glosado_rea_glo					:= trim(both r_rea_glo_rea_glo_int_w.nr_doc1_glosado_rea_glo);
					vet_tab_guia_int_w[igi].nr_doc2_glosado_rea_glo					:= trim(both r_rea_glo_rea_glo_int_w.nr_doc2_glosado_rea_glo);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAITERNACAO/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA

					for r_dados_lote_guia_int in c_dados_lote_guia_int( r_rea_glo_rea_glo_int_w.dados_lote_guia ) loop
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAINTERNACAO/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/TXT

						for r_dados_guia_txt_int in c_dados_guia_txt_int( r_dados_lote_guia_int.txt ) loop
							vet_tab_guia_int_w[igi].nr_lote_rea_glo_txt					:= trim(both r_dados_guia_txt_int.nr_lote_rea_glo_txt);
							vet_tab_guia_int_w[igi].nr_nota_rea_glo_txt					:= trim(both r_dados_guia_txt_int.nr_nota_rea_glo_txt);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAINTERNACAO/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/XML

						for r_dados_guia_xml_int in c_dados_guia_xml_int( r_dados_lote_guia_int.xml ) loop
							vet_tab_guia_int_w[igi].nr_lote_prestador_xml_rea_glo				:= trim(both r_dados_guia_xml_int.nr_lote_prestador_xml_rea_glo);
							vet_tab_guia_int_w[igi].nr_guia_glosada_xml_rea_glo				:= trim(both r_dados_guia_xml_int.nr_guia_glosada_xml_rea_glo);
							vet_tab_guia_int_w[igi].nr_guia_tiss_oper_glo_rea_glo				:= trim(both r_dados_guia_xml_int.nr_guia_tiss_oper_glo_rea_glo);							
						end loop;
					end loop;
				end loop;

				-- INCREMENTO NOTA COBRANCA

				igi	:= igi + 1;

			end loop;
			
			--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE HONORARIOS ++++++++++++++++++++++++++++++++++++++++++++++

			-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS

			for r_guia_honorarios_w in c_tipo_guia_honorarios( r_arquivo_a500_tipo_guia_w.guia_honorarios ) loop
				
				igh := vet_tab_guia_honorario_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSBENEFICIARIO

				for r_dados_beneficiario_w in c_dados_beneficiario_cons( r_guia_honorarios_w.dados_beneficiario ) loop
					vet_tab_guia_honorario_w[igh].id							:= igh;
					vet_tab_guia_honorario_w[igh].cd_unimed_dad_ben						:= trim(both r_dados_beneficiario_w.cd_unimed_dad_ben);
					vet_tab_guia_honorario_w[igh].id_benef_dad_ben						:= trim(both r_dados_beneficiario_w.id_benef_dad_ben);
					vet_tab_guia_honorario_w[igh].nm_benef_dad_ben						:= substr(trim(both r_dados_beneficiario_w.nm_benef_dad_ben),1,25);
					vet_tab_guia_honorario_w[igh].id_rn_dad_ben						:= trim(both r_dados_beneficiario_w.id_rn_dad_ben);
					vet_tab_guia_honorario_w[igh].tp_paciente_dad_ben					:= trim(both r_dados_beneficiario_w.tp_paciente_dad_ben);
				end loop;
				
				ighdh	:= vet_tab_guia_hon_hospital_w.count + 1;
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSHOSPITAL

				for r_dados_hospital_w in c_dados_hospital_hon( r_guia_honorarios_w.dados_hospital ) loop
				
					vet_tab_guia_hon_hospital_w[ighdh].id							:= igh;
					vet_tab_guia_hon_hospital_w[ighdh].cd_unimed_hospital					:= trim(both r_dados_hospital_w.cd_unimed_hospital);
					vet_tab_guia_hon_hospital_w[ighdh].cd_hospital						:= trim(both r_dados_hospital_w.cd_hospital);
					vet_tab_guia_hon_hospital_w[ighdh].cnpj_hospital					:= trim(both r_dados_hospital_w.cnpj_hospital);
					vet_tab_guia_hon_hospital_w[ighdh].nm_hospital						:= trim(both r_dados_hospital_w.nm_hospital);
					vet_tab_guia_hon_hospital_w[ighdh].CNES_hospital					:= trim(both r_dados_hospital_w.CNES_hospital);
					
					ighdh	:= ighdh + 1;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSEXECUTANTE

				for r_dados_executante_w in c_dados_executante_hon( r_guia_honorarios_w.dados_executante ) loop
				
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSEXECUTANTE/UNIMEDPRESTADOR

					for r_unimed_prestador_dad_exe_w in c_unimed_prestador_dad_exe_hon( r_dados_executante_w.unimed_prestador_dad_exe ) loop
						vet_tab_guia_honorario_w[igh].cd_uni_prest_dad_exe					:= trim(both r_unimed_prestador_dad_exe_w.cd_uni_prest_dad_exe);
						vet_tab_guia_honorario_w[igh].cd_prest_dad_exe						:= trim(both r_unimed_prestador_dad_exe_w.cd_prest_dad_exe);
					end loop;
					
					vet_tab_guia_honorario_w[igh].nome_prestador_dad_exe					:= trim(both r_dados_executante_w.nome_prestador_dad_exe);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSEXECUTANTE/CPF_CNPJ

					for r_cpf_cnpj_dad_exe_w in c_cpf_cnpj_dad_exe_hon( r_dados_executante_w.cpf_cnpj_dad_exe ) loop
						vet_tab_guia_honorario_w[igh].cd_cpf_dad_exe						:= trim(both r_cpf_cnpj_dad_exe_w.cd_cpf_dad_exe);
						vet_tab_guia_honorario_w[igh].cd_cnpj_dad_exe						:= trim(both r_cpf_cnpj_dad_exe_w.cd_cnpj_dad_exe);
					end loop;
						
					vet_tab_guia_honorario_w[igh].CNES_prestador_dad_exe					:= trim(both r_dados_executante_w.CNES_prestador_dad_exe);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSEXECUTANTE/PRESTADOR

					for r_prestador_dad_exe_w in c_prestador_dad_exe_hon( r_dados_executante_w.prestador_dad_exe ) loop
						vet_tab_guia_honorario_w[igh].cd_municipio_cont_dad_exe					:= trim(both r_prestador_dad_exe_w.cd_municipio_cont_dad_exe);
						vet_tab_guia_honorario_w[igh].tp_rede_min_dad_exe					:= trim(both r_prestador_dad_exe_w.tp_rede_min_dad_exe);
						vet_tab_guia_honorario_w[igh].tp_prestador_dad_exe					:= trim(both r_prestador_dad_exe_w.tp_prestador_dad_exe);
						vet_tab_guia_honorario_w[igh].id_rec_proprio_dad_exe					:= trim(both r_prestador_dad_exe_w.id_rec_proprio_dad_exe);
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DATAFATURAMENTO

				for r_data_faturamento_guia_hon in c_data_faturamento_guia_hon( r_guia_honorarios_w.data_faturamento ) loop
					vet_tab_guia_honorario_w[igh].dt_interncao_dad_gui					:= trim(both r_data_faturamento_guia_hon.dt_interncao_dad_gui);
					vet_tab_guia_honorario_w[igh].dt_alta_dad_gui						:= trim(both r_data_faturamento_guia_hon.dt_alta_dad_gui);
				
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA

				for r_dados_guia_dad_gui_w in c_dados_guia_hon( r_guia_honorarios_w.dados_guia ) loop
					vet_tab_guia_honorario_w[igh].nr_ver_tiss_dad_gui					:= trim(both r_dados_guia_dad_gui_w.nr_ver_tiss_dad_gui);
					vet_tab_guia_honorario_w[igh].nr_lote_prestador_dad_gui					:= trim(both r_dados_guia_dad_gui_w.nr_lote_prestador_dad_gui);
					vet_tab_guia_honorario_w[igh].dt_protocolo_dad_gui					:= trim(both r_dados_guia_dad_gui_w.dt_protocolo_dad_gui);
					vet_tab_guia_honorario_w[igh].dt_conhecimento_dad_gui					:= trim(both r_dados_guia_dad_gui_w.dt_conhecimento_dad_gui);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/NR_GUIAS

					for r_nr_guias_dad_gui_w in c_nr_guias_dad_gui_hon( r_dados_guia_dad_gui_w.nr_guias_dad_gui ) loop
						vet_tab_guia_honorario_w[igh].nr_guia_tiss_prestador_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_prestador_dad_gui);
						vet_tab_guia_honorario_w[igh].nr_guia_tiss_operadora_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_operadora_dad_gui);
						vet_tab_guia_honorario_w[igh].nr_guia_tiss_principal_dad_gui					:= trim(both r_nr_guias_dad_gui_w.nr_guia_tiss_principal_dad_gui);
					end loop;
					
					vet_tab_guia_honorario_w[igh].dt_atendimento_dad_gui					:= trim(both r_dados_guia_dad_gui_w.dt_atendimento_dad_gui);
					vet_tab_guia_honorario_w[igh].id_liminar_dad_gui					:= trim(both r_dados_guia_dad_gui_w.id_liminar_dad_gui);
					vet_tab_guia_honorario_w[igh].id_continuado_dad_gui					:= trim(both r_dados_guia_dad_gui_w.id_continuado_dad_gui);
					vet_tab_guia_honorario_w[igh].id_aviso_dad_gui						:= trim(both r_dados_guia_dad_gui_w.id_aviso_dad_gui);
					vet_tab_guia_honorario_w[igh].id_glosa_total_dad_gui					:= trim(both r_dados_guia_dad_gui_w.id_glosa_total_dad_gui);
					vet_tab_guia_honorario_w[igh].cd_excecao_dad_gui					:= trim(both r_dados_guia_dad_gui_w.cd_excecao_dad_gui);
					
					ighpe	:= vet_tab_guia_hon_proc_exec_w.count + 1;

					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS

					for r_procediment_exec_dad_gui_w in c_procediment_exec_dad_gui_hon( r_dados_guia_dad_gui_w.procedimentos_exec_dad_gui ) loop
						vet_tab_guia_hon_proc_exec_w[ighpe].id				:= igh;
						vet_tab_guia_hon_proc_exec_w[ighpe].dt_execucao_pro		:= trim(both r_procediment_exec_dad_gui_w.dt_execucao_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].hr_inicial_pro		:= trim(both r_procediment_exec_dad_gui_w.hr_inicial_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].hr_final_pro		:= trim(both r_procediment_exec_dad_gui_w.hr_final_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/PROCEDIMENTOS

						for r_procedimentos_w in c_procedimentos_hon( r_procediment_exec_dad_gui_w.procedimentos_pro ) loop
							vet_tab_guia_hon_proc_exec_w[ighpe].seq_item_pro			:= trim(both r_procedimentos_w.seq_item_pro);
							vet_tab_guia_hon_proc_exec_w[ighpe].tp_tabela_pro			:= trim(both r_procedimentos_w.tp_tabela_pro);
							vet_tab_guia_hon_proc_exec_w[ighpe].cd_servico_pro			:= trim(both r_procedimentos_w.cd_servico_pro);
							vet_tab_guia_hon_proc_exec_w[ighpe].ds_servico_pro			:= trim(both r_procedimentos_w.ds_servico_pro);
							vet_tab_guia_hon_proc_exec_w[ighpe].qt_cobrada_pro			:= trim(both r_procedimentos_w.qt_cobrada_pro);
							vet_tab_guia_hon_proc_exec_w[ighpe].id_item_unico_proc			:= trim(both r_procedimentos_w.id_item_unico_proc);
						end loop;
						
						vet_tab_guia_hon_proc_exec_w[ighpe].via_acesso_pro			:= trim(both r_procediment_exec_dad_gui_w.via_acesso_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].tc_utilizada_pro			:= trim(both r_procediment_exec_dad_gui_w.tc_utilizada_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].id_acrescimo_pro			:= trim(both r_procediment_exec_dad_gui_w.id_acrescimo_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].vl_serv_cobrado_pro			:= trim(both r_procediment_exec_dad_gui_w.vl_serv_cobrado_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].tx_adm_servico_pro			:= trim(both r_procediment_exec_dad_gui_w.tx_adm_servico_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].ft_multiplicador_servico_pro	:= trim(both r_procediment_exec_dad_gui_w.ft_multiplicador_servico_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].id_avisado_item_proc		:= trim(both r_procediment_exec_dad_gui_w.id_avisado_item_proc);
						vet_tab_guia_hon_proc_exec_w[ighpe].id_avisado_pro			:= trim(both r_procediment_exec_dad_gui_w.id_avisado_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].id_pacote_pro			:= trim(both r_procediment_exec_dad_gui_w.id_pacote_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].cd_pacote_pro			:= trim(both r_procediment_exec_dad_gui_w.cd_pacote_pro);
						vet_tab_guia_hon_proc_exec_w[ighpe].cd_porte_anestesico_pro		:= trim(both r_procediment_exec_dad_gui_w.cd_porte_anestesico_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL

						for r_equipe_profissional_w in c_equipe_profissional_hon( r_procediment_exec_dad_gui_w.equipe_profissional_pro ) loop

							ighpp := vet_tab_guia_hon_proc_eqp_w.count + 1;

							vet_tab_guia_hon_proc_eqp_w[ighpp].id 			:= vet_tab_guia_hon_proc_exec_w[ighpe].id_item_unico_proc || vet_tab_guia_hon_proc_exec_w[ighpe].id;

							vet_tab_guia_hon_proc_eqp_w[ighpp].tp_participacao	:= trim(both r_equipe_profissional_w.tp_participacao_equ_pro);
							
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/PRESTADOR

							for r_prestador_equ_pre_w in c_prestador_equ_pre_hon( r_equipe_profissional_w.prestador_equ_pro ) loop
								vet_tab_guia_hon_proc_eqp_w[ighpp].cd_uni_prest	:= trim(both r_prestador_equ_pre_w.cd_uni_prest_pro_equ_pro);
								vet_tab_guia_hon_proc_eqp_w[ighpp].cd_prest	:= trim(both r_prestador_equ_pre_w.cd_prest_pro_equ_pro);
							end loop;
							
							vet_tab_guia_hon_proc_eqp_w[ighpp].nm_prest		:= trim(both r_equipe_profissional_w.nm_profissional_equ_pro);
							vet_tab_guia_hon_proc_eqp_w[ighpp].cd_cpf		:= trim(both r_equipe_profissional_w.cd_cpf_equ_pro);
							
							-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/EQUIPE_PROFISSIONAL/DADOSCONSELHO

							for r_dados_conselho_equ_pro_w in c_dados_conselho_equ_pro_hon( r_equipe_profissional_w.dados_conselho_equ_pro ) loop
								vet_tab_guia_hon_proc_eqp_w[ighpp].sg_conselho		:= trim(both r_dados_conselho_equ_pro_w.sg_conselho_dad_con_equ_pro);
								vet_tab_guia_hon_proc_eqp_w[ighpp].nr_conselho		:= trim(both r_dados_conselho_equ_pro_w.nr_conselho_dad_con_equ_pro);
								vet_tab_guia_hon_proc_eqp_w[ighpp].uf_conselho		:= trim(both r_dados_conselho_equ_pro_w.uf_dad_con_equ_pro);
							end loop;
							
							vet_tab_guia_hon_proc_eqp_w[ighpp].nr_cbo	:= trim(both r_equipe_profissional_w.cbo_equ_pro);

						end loop;
						
						vet_tab_guia_hon_proc_exec_w[ighpe].cd_ato_pro		:= trim(both r_procediment_exec_dad_gui_w.cd_ato_pro);
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/PROCEDIMENTOSEXECUTADOS/DADOSAUTORIZACAO

						for r_dados_autorizacao_w in c_dados_autorizacao_hon( r_procediment_exec_dad_gui_w.dados_autorizacao_pro ) loop
							vet_tab_guia_hon_proc_exec_w[ighpe].dt_solicitacao_dad_aut		:= trim(both r_dados_autorizacao_w.dt_solicitacao_dad_aut);
							vet_tab_guia_hon_proc_exec_w[ighpe].nr_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.nr_autorizacao_dad_aut);
							vet_tab_guia_hon_proc_exec_w[ighpe].dt_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.dt_autorizacao_dad_aut);
							vet_tab_guia_hon_proc_exec_w[ighpe].cd_uni_autorizadora_dad_aut		:= trim(both r_dados_autorizacao_w.cd_uni_autorizadora_dad_aut);
							vet_tab_guia_hon_proc_exec_w[ighpe].tp_autorizacao_dad_aut		:= trim(both r_dados_autorizacao_w.tp_autorizacao_dad_aut);
						end loop;
						
						-- INCREMENTO PROCEDIMENTO

						ighpe := ighpe + 1;
					end loop;
					
					vet_tab_guia_honorario_w[igh].dt_ultima_autorizacao_dad_gui	:= trim(both r_dados_guia_dad_gui_w.dt_ultima_autorizacao_dad_gui);
					
					ighcp	:= vet_tab_guia_hon_complemento_w.count + 1;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/DADOSGUIA/COMPLEMENTO

					for r_compleme_dad_gui_com_w in c_compleme_dad_gui_com( r_dados_guia_dad_gui_w.compleme_dad_gui_com ) loop
					
						vet_tab_guia_hon_complemento_w[ighcp].id_complemento			:= igh;
						vet_tab_guia_hon_complemento_w[ighcp].tp_reg_cpl_dad_gui_com		:= trim(both r_compleme_dad_gui_com_w.tp_reg_cpl_dad_gui_com);
						vet_tab_guia_hon_complemento_w[ighcp].nm_desc_compleme_dad_gui_com	:= substr(trim(both r_compleme_dad_gui_com_w.nm_desc_compleme_dad_gui_com),1,500);
						
						-- INCREMENTO COMPLEMENTO

						ighcp := ighcp + 1;
					end loop;
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/REAPRESENTACAOGLOSADO

				for r_reapresentacao_glo_rea_glo_w in c_rea_glo_rea_glo_hon( r_guia_honorarios_w.reapresentacao_glosado ) loop
					vet_tab_guia_honorario_w[igh].nr_doc1_glosado_rea_glo					:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc1_glosado_rea_glo);
					vet_tab_guia_honorario_w[igh].nr_doc2_glosado_rea_glo					:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc2_glosado_rea_glo);
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA

					for r_dados_lote_guia_hon in c_dados_lote_guia_hon( r_reapresentacao_glo_rea_glo_w.dados_lote_guia ) loop
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/TXT

						for r_dados_guia_txt_hon in c_dados_guia_txt_hon( r_dados_lote_guia_hon.txt ) loop
							vet_tab_guia_honorario_w[igh].nr_lote_rea_glo_txt					:= trim(both r_dados_guia_txt_hon.nr_lote_rea_glo_txt);
							vet_tab_guia_honorario_w[igh].nr_nota_rea_glo_txt					:= trim(both r_dados_guia_txt_hon.nr_nota_rea_glo_txt);
						end loop;
						
						-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIAHONORARIOS/REAPRESENTACAOGLOSADO/DADOSLOTEGUIA/XML

						for r_dados_guia_xml_hon in c_dados_guia_xml_hon( r_dados_lote_guia_hon.xml ) loop
							vet_tab_guia_honorario_w[igh].nr_lote_prestador_xml_rea_glo				:= trim(both r_dados_guia_xml_hon.nr_lote_prestador_xml_rea_glo);
							vet_tab_guia_honorario_w[igh].nr_guia_glosada_xml_rea_glo				:= trim(both r_dados_guia_xml_hon.nr_guia_glosada_xml_rea_glo);
							vet_tab_guia_honorario_w[igh].nr_guia_tiss_oper_glo_rea_glo				:= trim(both r_dados_guia_xml_hon.nr_guia_tiss_oper_glo_rea_glo);
						end loop;
					end loop;
				end loop;
				
				-- INCREMENTO NOTA COBRANCA

				igh	:= igh + 1;
				
			end loop;
			
			--  +++++++++++++++++++++++++++++++++++++++++++++++ GUIA DE NOTA FISCAL DO FORNECEDOR ++++++++++++++++++++++++++++++++++++++++++++++

			for r_guia_nf_w in c_tipo_guia_nota_fiscal( r_arquivo_a500_tipo_guia_w.guia_nota_fiscal ) loop
				
				ignf	:= vet_tab_guia_nota_fiscal_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/DADOSBENEFICIARIO

				for r_dados_beneficiario_w in c_dados_beneficiario_nf( r_guia_nf_w.dados_beneficiario ) loop
					vet_tab_guia_nota_fiscal_w[ignf].id							:= ignf;
					vet_tab_guia_nota_fiscal_w[ignf].cd_unimed_dad_ben					:= trim(both r_dados_beneficiario_w.cd_unimed_dad_ben);
					vet_tab_guia_nota_fiscal_w[ignf].id_benef_dad_ben					:= trim(both r_dados_beneficiario_w.id_benef_dad_ben);
				end loop;
				
				vet_tab_guia_nota_fiscal_w[ignf].nr_guia_tiss_principal					:= trim(both r_guia_nf_w.nr_guia_tiss_principal);
				vet_tab_guia_nota_fiscal_w[ignf].id_liminar						:= trim(both r_guia_nf_w.id_liminar);
				
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/PAGOFORNECEDOR

				for r_pago_fornecedor_nf_w in c_pago_fornecedor_nf( r_guia_nf_w.pago_fornecedor) loop
					vet_tab_guia_nota_fiscal_w[ignf].cnpj_fornecedor					:= trim(both r_pago_fornecedor_nf_w.cnpj_fornecedor);
					vet_tab_guia_nota_fiscal_w[ignf].nm_fornecedor_material_nf				:= trim(both r_pago_fornecedor_nf_w.nm_fornecedor_material_nf);
					vet_tab_guia_nota_fiscal_w[ignf].nr_nf_fornecedor_nf					:= trim(both r_pago_fornecedor_nf_w.nr_nf_fornecedor_nf);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/INFOROPME

				for r_info_opme_nf_w in c_info_opme_nf( r_guia_nf_w.infor_opme_nf ) loop
					vet_tab_guia_nota_fiscal_w[ignf].dt_exec_info_opme					:= trim(both r_info_opme_nf_w.dt_exec_info_opme);
					
					ignfp	:= vet_tab_guia_nf_proc_w.count + 1;
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/INFOROPME/PROCEDIMENTOS

					for r_procedimentos_nf_w in c_procedimentos_nf( r_info_opme_nf_w.procedimento_info_opme ) loop
						vet_tab_guia_nf_proc_w[ignfp].id							:= ignf;
						vet_tab_guia_nf_proc_w[ignfp].seq_item_pro_info_opme					:= trim(both r_procedimentos_nf_w.seq_item_pro_info_opme);
						vet_tab_guia_nf_proc_w[ignfp].id_item_unico_pro_info_opme				:= trim(both r_procedimentos_nf_w.id_item_unico_pro_info_opme);
						vet_tab_guia_nf_proc_w[ignfp].tp_tabela_pro_info_opme					:= trim(both r_procedimentos_nf_w.tp_tabela_pro_info_opme);
						vet_tab_guia_nf_proc_w[ignfp].cd_servico_pro_info_opme					:= trim(both r_procedimentos_nf_w.cd_servico_pro_info_opme);
						vet_tab_guia_nf_proc_w[ignfp].ds_servico_pro_info_opme					:= trim(both r_procedimentos_nf_w.ds_servico_pro_info_opme);
						vet_tab_guia_nf_proc_w[ignfp].qt_cobrada_pro_info_opme					:= trim(both r_procedimentos_nf_w.qt_cobrada_pro_info_opme);
					end loop;
					
					-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/INFOROPME/VALORFORNECEDOR

					for r_valores_fornecedor_nf_w in c_valores_fornecedor_nf( r_info_opme_nf_w.valores_fornecedor_info_opme ) loop
						vet_tab_guia_nf_vlr_w[ignfp].vl_procedimento						:= trim(both r_valores_fornecedor_nf_w.vl_procedimento);
						vet_tab_guia_nf_vlr_w[ignfp].vl_adic_procedimento					:= trim(both r_valores_fornecedor_nf_w.vl_adic_procedimento);
					end loop;
					
					vet_tab_guia_nota_fiscal_w[ignf].det_reg_anvisa_info_opme				:= trim(both r_info_opme_nf_w.det_reg_anvisa_info_opme);
					vet_tab_guia_nota_fiscal_w[ignf].nr_reg_anvisa_info_opme				:= trim(both r_info_opme_nf_w.nr_reg_anvisa_info_opme);
					vet_tab_guia_nota_fiscal_w[ignf].cd_ref_mat_fab_info_opme				:= trim(both r_info_opme_nf_w.cd_ref_mat_fab_info_opme);
				end loop;
				
				vet_tab_guia_nota_fiscal_w[ignf].nr_autorizacao						:= trim(both r_guia_nf_w.nr_autorizacao);
				
				-- /PTUA500/ARQUIVOA500/TIPOGUIA/GUIANOTAFISCALFORNECEDOR/REAPRESENTACAOGLOSADO

				for r_reapresentacao_glo_rea_glo_w in c_rea_glo_rea_glo_nf( r_guia_nf_w.reapresentacao_glosado ) loop
					vet_tab_guia_nota_fiscal_w[ignf].nr_doc1_glosado_rea_glo				:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc1_glosado_rea_glo);
					vet_tab_guia_nota_fiscal_w[ignf].nr_doc2_glosado_rea_glo				:= trim(both r_reapresentacao_glo_rea_glo_w.nr_doc2_glosado_rea_glo);
					vet_tab_guia_nota_fiscal_w[ignf].nr_guia_glosada_rea_glo				:= trim(both r_reapresentacao_glo_rea_glo_w.nr_guia_glosada_rea_glo);
				end loop;
				
				-- INCREMENTO NOTA COBRANCA

				ignf	:= ignf + 1;
			end loop;
			
		end loop;
		
		-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO

		for r_cobranca_reembolso_w in c_cobranca_reembolso( r_arquivo_a500_w.cobranca_reembolso ) loop
		
			-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO

			for r_reembolso_w in c_reembolso( r_cobranca_reembolso_w.reembolso ) loop

				icr	:= vet_tab_cobr_reembolso_w.count + 1;

				vet_tab_cobr_reembolso_w[icr].id				:= icr;

				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/DADOSBENEFICIARIO

				for r_dados_beneficiario_reemb_w in c_dados_beneficiario_reemb( r_reembolso_w.dados_beneficiario ) loop
					vet_tab_cobr_reembolso_w[icr].cd_unimed_dad_ben			:= trim(both r_dados_beneficiario_reemb_w.cd_unimed_dad_ben);
					vet_tab_cobr_reembolso_w[icr].id_benef_dad_ben			:= trim(both r_dados_beneficiario_reemb_w.id_benef_dad_ben);
					vet_tab_cobr_reembolso_w[icr].nm_benef_dad_ben			:= substr(trim(both r_dados_beneficiario_reemb_w.nm_benef_dad_ben),1,25);
					vet_tab_cobr_reembolso_w[icr].dt_nasc_dad_ben			:= trim(both r_dados_beneficiario_reemb_w.dt_nasc_dad_ben);
					vet_tab_cobr_reembolso_w[icr].tp_sexo_dad_ben			:= trim(both r_dados_beneficiario_reemb_w.tp_sexo_dad_ben);
					vet_tab_cobr_reembolso_w[icr].id_rn_dad_ben			:= trim(both r_dados_beneficiario_reemb_w.id_rn_dad_ben);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/DADOSREEMBOLSO

				for r_dados_reembolso_w in c_dados_reembolso( r_reembolso_w.dados_reembolso ) loop
					vet_tab_cobr_reembolso_w[icr].carater_atendimento		:= trim(both r_dados_reembolso_w.carater_atendimento);
					vet_tab_cobr_reembolso_w[icr].dt_reembolso                      := trim(both r_dados_reembolso_w.dt_reembolso);
					vet_tab_cobr_reembolso_w[icr].id_reem_par_int                   := trim(both r_dados_reembolso_w.id_reem_par_int);
					vet_tab_cobr_reembolso_w[icr].cd_cnes                           := trim(both r_dados_reembolso_w.cd_cnes);
					
					vet_tab_cobr_reembolso_w[icr].id_reembolso			:= trim(both r_dados_reembolso_w.id_reembolso);
				end loop;
				
				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/DADOSPRESTADOR

				for r_dados_prestador_w in c_dados_prestador( r_reembolso_w.prestador ) loop

					vet_tab_cobr_reembolso_w[icr].nm_prestador			:= trim(both r_dados_prestador_w.nm_prestador);
					
					-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/DADOSPRESTADOR/CNPJCPF

					for r_nr_cnpj_cpf_w in c_nr_cnpj_cpf( r_dados_prestador_w.nr_cnpj_cpf ) loop
						vet_tab_cobr_reembolso_w[icr].cd_cpf_prest			:= trim(both r_nr_cnpj_cpf_w.cd_cpf_prest);
						vet_tab_cobr_reembolso_w[icr].cd_cnpj_prest			:= trim(both r_nr_cnpj_cpf_w.cd_cnpj_prest);
					end loop;
				end loop;
				
				-- INCREMENTE PROCEDIMENTO

				icrp	:= vet_tab_cobr_reembolso_proc_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/PROCEDIMENTOS

				for r_procedimentos_reembolso_w in c_procedimentos_reembolso( r_reembolso_w.procedimentos ) loop
					
					vet_tab_cobr_reembolso_proc_w[icrp].id				:= icr;
					
					-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/PROCEDIMENTOS

					for r_procedimentos_proc_w in c_procedimentos_proc( r_procedimentos_reembolso_w.procedimentos_proc ) loop
						vet_tab_cobr_reembolso_proc_w[icrp].dt_exec_proc		:= trim(both r_procedimentos_proc_w.dt_exec_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].seq_item_proc		:= trim(both r_procedimentos_proc_w.seq_item_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].id_item_unico_proc		:= trim(both r_procedimentos_proc_w.id_item_unico_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].tp_tabela_proc		:= trim(both r_procedimentos_proc_w.tp_tabela_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].cd_servico_proc		:= trim(both r_procedimentos_proc_w.cd_servico_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].ds_servico_proc		:= trim(both r_procedimentos_proc_w.ds_servico_proc);
						vet_tab_cobr_reembolso_proc_w[icrp].qt_cobrada_proc		:= trim(both r_procedimentos_proc_w.qt_cobrada_proc);
						
						-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/PROCEDIMENTOS/EQUIPEREEMBOLSO

						for r_equipe_reembolso_proc_w in c_equipe_reembolso_proc( r_procedimentos_proc_w.equipe_reembolso ) loop
							vet_tab_cobr_reembolso_proc_w[icrp].nm_prof_equ_reemb		:= trim(both r_equipe_reembolso_proc_w.nm_prof_equ_reemb);
							vet_tab_cobr_reembolso_proc_w[icrp].tp_paticip_equ_reemb	:= trim(both r_equipe_reembolso_proc_w.tp_paticip_equ_reemb);
							
							-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/REEMBOLSO/PROCEDIMENTOS/EQUIPEREEMBOLSO/DADOSCONSELHO

							for r_dados_conselho_proc_w in c_dados_conselho_proc( r_equipe_reembolso_proc_w.dados_conselho ) loop
								vet_tab_cobr_reembolso_proc_w[icrp].sg_conselho_equ_reemb	:= trim(both r_dados_conselho_proc_w.sg_conselho_equ_reemb);
								vet_tab_cobr_reembolso_proc_w[icrp].nr_conselho_equ_reemb	:= trim(both r_dados_conselho_proc_w.nr_conselho_equ_reemb);
								vet_tab_cobr_reembolso_proc_w[icrp].uf_equ_reemb		:= trim(both r_dados_conselho_proc_w.uf_equ_reemb);
							end loop;
						end loop;
					end loop;
					
					vet_tab_cobr_reembolso_proc_w[icrp].nr_autorizacao_proc		:= trim(both r_procedimentos_reembolso_w.nr_autorizacao_proc);
					vet_tab_cobr_reembolso_proc_w[icrp].vl_restituir_proc		:= trim(both r_procedimentos_reembolso_w.vl_restituir_proc);
					vet_tab_cobr_reembolso_proc_w[icrp].vl_reem_benef_proc		:= trim(both r_procedimentos_reembolso_w.vl_reem_benef_proc);
					vet_tab_cobr_reembolso_proc_w[icrp].vl_pago_benef_proc		:= trim(both r_procedimentos_reembolso_w.vl_pago_benef_proc);
					
					-- INCREMENTO NOTA SERVICO RRS

					icrp	:= icrp + 1;
				end loop;

				-- INCREMENTO NOTA COBRANCA RRS

				icr	:= icr + 1;
			end loop;
		
			-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/RESSARCIMENTOSUS

			for r_ressarcimento_sus_w in c_ressarcimento_sus( r_cobranca_reembolso_w.ressarcimento_sus ) loop

				icrs	:= vet_tab_ressarcimento_sus_w.count + 1;

				vet_tab_ressarcimento_sus_w[icrs].id				:= icrs;

				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/RESSARCIMENTOSUS/DADOSBENEFICIARIO

				for r_dados_beneficiario_res_sus_w in c_dados_beneficiario_res_sus( r_ressarcimento_sus_w.dados_beneficiario ) loop
					vet_tab_ressarcimento_sus_w[icrs].cd_unimed_dad_ben		:= trim(both r_dados_beneficiario_res_sus_w.cd_unimed_dad_ben);
					vet_tab_ressarcimento_sus_w[icrs].id_benef_dad_ben		:= trim(both r_dados_beneficiario_res_sus_w.id_benef_dad_ben);
					vet_tab_ressarcimento_sus_w[icrs].nm_benef_dad_ben		:= substr(trim(both r_dados_beneficiario_res_sus_w.nm_benef_dad_ben),1,25);
					vet_tab_ressarcimento_sus_w[icrs].dt_nasc_dad_ben		:= trim(both r_dados_beneficiario_res_sus_w.dt_nasc_dad_ben);
					vet_tab_ressarcimento_sus_w[icrs].tp_sexo_dad_ben		:= trim(both r_dados_beneficiario_res_sus_w.tp_sexo_dad_ben);
					vet_tab_ressarcimento_sus_w[icrs].id_rn_dad_ben			:= trim(both r_dados_beneficiario_res_sus_w.id_rn_dad_ben);
				end loop;
				
				vet_tab_ressarcimento_sus_w[icrs].carater_atendimento		:= trim(both r_ressarcimento_sus_w.carater_atendimento);
				
				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/RESSARCIMENTOSUS/DADOSPRESTADOR

				for r_dados_prestador_res_sus_w in c_dados_prestador_res_sus( r_ressarcimento_sus_w.prestador ) loop

					vet_tab_ressarcimento_sus_w[icrs].nm_prestador			:= trim(both r_dados_prestador_res_sus_w.nm_prestador);
					
					-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/RESSARCIMENTOSUS/DADOSPRESTADOR/CNPJCPF

					for r_nr_cnpj_cpf_res_sus_w in c_nr_cnpj_cpf_res_sus( r_dados_prestador_res_sus_w.nr_cnpj_cpf ) loop
						vet_tab_ressarcimento_sus_w[icrs].cd_cpf_prest			:= trim(both r_nr_cnpj_cpf_res_sus_w.cd_cpf_prest);
						vet_tab_ressarcimento_sus_w[icrs].cd_cnpj_prest			:= trim(both r_nr_cnpj_cpf_res_sus_w.cd_cnpj_prest);
					end loop;
				end loop;

				-- Pegar o tipo de pessoa

				if (vet_tab_ressarcimento_sus_w[icrs](.cd_cpf_prest IS NOT NULL AND .cd_cpf_prest::text <> '')) then
					tp_pessoa_w	:= 'F';
				elsif (vet_tab_ressarcimento_sus_w[icrs](.cd_cnpj_prest IS NOT NULL AND .cd_cnpj_prest::text <> '')) then
					tp_pessoa_w	:= 'J';
				end if;
						
				-- INCREMENTE PROCEDIMENTO

				icrsp	:= vet_tab_res_sus_proc_w.count + 1;
				
				-- /PTUA500/ARQUIVOA500/COBRANCAREEMBOLSO/RESSARCIMENTOSUS/PROCEDIMENTOS

				for r_procedimentos_proc_res_sus_w in c_procedimentos_proc_res_sus( r_ressarcimento_sus_w.procedimentos ) loop
					vet_tab_res_sus_proc_w[icrsp].id			:= icrs;
					vet_tab_res_sus_proc_w[icrsp].id_item_unico_proc	:= trim(both r_procedimentos_proc_res_sus_w.id_item_unico_proc);
					vet_tab_res_sus_proc_w[icrsp].dt_exec_proc		:= trim(both r_procedimentos_proc_res_sus_w.dt_exec_proc);
					vet_tab_res_sus_proc_w[icrsp].cd_servico_proc		:= trim(both r_procedimentos_proc_res_sus_w.cd_servico_proc);
					vet_tab_res_sus_proc_w[icrsp].ds_servico_proc		:= trim(both r_procedimentos_proc_res_sus_w.ds_servico_proc);
					vet_tab_res_sus_proc_w[icrsp].qt_cobrada_proc		:= trim(both r_procedimentos_proc_res_sus_w.qt_cobrada_proc);
					vet_tab_res_sus_proc_w[icrsp].vl_pago_sus_proc		:= trim(both r_procedimentos_proc_res_sus_w.vl_pago_sus_proc);
					
					-- INCREMENTO NOTA SERVICO RRS

					icrsp	:= icrsp + 1;
				end loop;
				
				vet_tab_ressarcimento_sus_w[icrs].cd_cnes_proc			:= trim(both r_ressarcimento_sus_w.cd_cnes_proc);

				-- INCREMENTO NOTA COBRANCA RRS

				icrs	:= icrs + 1;
			end loop;
			
		end loop;
	end loop;

end loop;


select	trim(both max(nm_arquivo))
into STRICT 	nm_arquivo_w
from	ptu_aviso_arq_xml
where	nr_sequencia = nr_seq_arq_xml_p;


for i in 1..vet_tab_cabecalho_w.count loop

	cd_unimed_destino_w				:= coalesce(vet_tab_cabecalho_w[i].cd_uni_destino_cab,cd_unimed_destino_w);
	vet_tab_cabecalho_w[i].vl_ir1_cab 		:= to_number(replace(vet_tab_cabecalho_w[i].vl_ir1_cab, ',','.'), '999999999999.99');
	vet_tab_cabecalho_w[i].vl_total_doc1_cab	:= to_number(replace(vet_tab_cabecalho_w[i].vl_total_doc1_cab, ',','.'), '999999999999.99');
	vet_tab_cabecalho_w[i].vl_total_doc2_cab 	:= to_number(replace(vet_tab_cabecalho_w[i].vl_total_doc2_cab, ',','.'), '999999999999.99');

	insert into ptu_fatura(	nr_sequencia,								cd_estabelecimento,										cd_unimed_destino,
					cd_unimed_origem,							doc_fiscal_1,											doc_fiscal_2,
					ds_hash,								ds_justificativa,										ds_observacao_inf,
					ds_serial_processo,							ds_sid_processo,										dt_aceite,
					dt_atualizacao,								dt_atualizacao_nrec,										dt_devolucao,
					dt_emissao_fatura,							dt_emissao_ndc,											dt_geracao,
					dt_geracao_conta,							dt_geracao_titulo,										dt_geracao_titulo_ndc,
					dt_mes_competencia,							dt_postagem,											dt_receb_doc_fisico,
					dt_recebimento_fatura,							dt_venc_fatura_original,									dt_vencimento_fatura,
					dt_vencimento_ndc,							ie_classif_cobranca,										ie_doc_fisica_conferida,
					ie_envia_conta,								ie_fatura_fisica,										ie_lib_import,
					ie_necessita_doc_fisico,						ie_operacao,											ie_origem,
					ie_pcmso,								ie_status,											ie_tipo_arquivo_cob,
					ie_tipo_fatura,								ie_tit_fat_ndc,											nm_id_job,
					nm_usuario,								nm_usuario_devolucao,										nm_usuario_doc_fisico,
					nm_usuario_nrec,							nr_competencia,											nr_fatura,
					nr_linha,								nr_nota_credito_debito,										nr_seq_cong_resp_financ,
					nr_seq_fatura_origem,							nr_seq_geracao,											nr_seq_lote,
					nr_seq_mot_cancel,							nr_seq_mot_devolucao,										nr_seq_periodo,
					nr_seq_pls_fatura,							nr_seq_protocolo,										nr_titulo,
					nr_titulo_ndc,								nr_versao_transacao,										pr_taxa,
					tp_documento_1,								tp_documento_2,											vl_glosa,
					vl_glosa_ndc,								vl_ir,												vl_liberado_ndc,
					vl_pendente,								vl_total,											vl_total_digitado,
					vl_total_fatura,							vl_total_ndc,											vl_total_taxa,
					ie_tipo_exportacao,							ie_tipo_cobranca_fatura, 									nm_arquivo)
			values (	nextval('ptu_fatura_seq'),							cd_estabelecimento_p,										cd_unimed_destino_w,
					vet_tab_cabecalho_w[i].cd_uni_origem_cab,				vet_tab_cabecalho_w[i].doc_fiscal1_cab,								vet_tab_cabecalho_w[i].doc_fiscal2_cab,
					vet_tab_cabecalho_w[i].hash,						null,												null,
					null,									null,												null,
					clock_timestamp(),								clock_timestamp(),											null,
					ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_emissao_doc1_cab),		ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_emissao_doc2_cab),					ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_geracao_cab),
					null,									null,												null,
					dt_mes_competencia_w,							null,												null,
					clock_timestamp(),								ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_vencimento_doc1_cab),					ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_vencimento_doc1_cab),
					ptu_a500_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_vencimento_doc2_cab),		vet_tab_cabecalho_w[i].tp_cobranca_cab,								null,
					null,									'N',												null,
					null,									'R',												'I',
					null,									CASE WHEN coalesce(ie_tipo_cobranca_fatura_w,'C')='A' THEN 'E'  ELSE CASE WHEN ie_novo_imp_a500_w='S' THEN  'EI'  ELSE 'V' END  END ,	null,
					null,									null,												null,
					nm_usuario_p,								null,												null,
					nm_usuario_p,								vet_tab_cabecalho_w[i].nr_competencia_cab,							vet_tab_cabecalho_w[i].nr_documento1_cab,
					null,									vet_tab_cabecalho_w[i].nr_documento2_cab,							null,
					null,									null,												null,
					null,									null,												null,
					null,									null,												null,
					null,									vet_tab_cabecalho_w[i].nr_vertra_ptu_cab,							null,
					vet_tab_cabecalho_w[i].tp_documento1_cab,				vet_tab_cabecalho_w[i].tp_documento2_cab,							0,
					0,									vet_tab_cabecalho_w[i].vl_ir1_cab,								0,
					vet_tab_cabecalho_w[i].vl_total_doc1_cab,				0,												0,
					vet_tab_cabecalho_w[i].vl_total_doc1_cab,				coalesce(vet_tab_cabecalho_w[i].vl_total_doc2_cab,0)	,						0,					
					'XML',									ie_tipo_cobranca_fatura_w, 									nm_arquivo_w) returning nr_sequencia into nr_seq_ptu_fatura_w;
	
	--Caso nao tenha nenhuma fatura, retornar erro

	if (coalesce(nr_seq_ptu_fatura_w::text, '') = '')  then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(190912); -- Nao ha registro do tipo 501 no arquivo.
	end if;

	nr_seq_fatura_p	:= nr_seq_ptu_fatura_w;

	update  ptu_fatura
	set  	dt_postagem    		= to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss'),
		dt_emissao_fatura  	= CASE WHEN coalesce(ie_parametro_21_w,'N')='S' THEN  to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss')  ELSE dt_emissao_fatura END ,
		dt_recebimento_fatura  	= CASE WHEN coalesce(ie_parametro_33_w,'N')='S' THEN  to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss')  ELSE dt_recebimento_fatura END ,
		dt_mes_competencia 	= CASE WHEN  vl_parametro_w='S' THEN  CASE WHEN coalesce(ie_parametro_33_w,'N')='S' THEN  to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss')  ELSE dt_recebimento_fatura END   ELSE to_date(vet_tab_cabecalho_w[i].nr_competencia_cab, 'yymm') END
	where  nr_sequencia    		= nr_seq_ptu_fatura_w;

	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INSERT DA GUIA DE CONSULTA  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	for i in 1..vet_tab_guia_consulta_w.count loop
		
		hr_inicio_final_w	:= substr(vet_tab_guia_consulta_w[i].dt_atendimento_dad_gui,11,3) || substr(vet_tab_guia_consulta_w[i].dt_atendimento_dad_gui,14,3) || substr(vet_tab_guia_consulta_w[i].dt_atendimento_dad_gui,17,2);

		-- CONVERTER UF

		vet_tab_guia_consulta_w[i].uf_prof_exec		:= pls_obter_cd_unidade_ibge(null, vet_tab_guia_consulta_w[i].uf_prof_exec);
		
		-- OBTER O TP_PESSOA

		if ( vet_tab_guia_consulta_w[i](.cd_cpf_cont_exec IS NOT NULL AND .cd_cpf_cont_exec::text <> '')) then
			tp_pessoa_w	:= 'F';
		elsif ( vet_tab_guia_consulta_w[i](.cd_cnpj_cont_exec IS NOT NULL AND .cd_cnpj_cont_exec::text <> '')) then
			tp_pessoa_w	:= 'J';
		end if;
	
		-- TENTA REALIZAR O VINCULO COM A GUIA DO A520, CASO EXISTIR

		if (vet_tab_guia_consulta_w[i](.dt_conhecimento_dad_gui IS NOT NULL AND .dt_conhecimento_dad_gui::text <> '')) then
			select	max(cd_unimed_destino)
			into STRICT	cd_unimed_destino_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_ptu_fatura_w;
		
			-- MONTAR A CARTEIRINHA DO BENEFICIARIO

			nr_carteira_benef_w := cd_unimed_destino_w || vet_tab_guia_consulta_w[i].id_benef_dad_ben;
			
			begin
			
				select	max(x.nr_sequencia)
				into STRICT	nr_seq_aviso_conta_w
				from (	-- BUSCA POR PESSOA JURIDICA
					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_consulta_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cnpj_executante	= vet_tab_guia_consulta_w[i].cd_cnpj_cont_exec
					and	tp_pessoa_w		= 'J'
					and	aa.nr_lote		= vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w
					
union all

					-- BUSCA POR PESSOA FISICA

					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_consulta_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cpf_executante	= vet_tab_guia_consulta_w[i].cd_cpf_cont_exec
					and	tp_pessoa_w		= 'F'
					and	aa.nr_lote		= vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w) x;
			exception
			when others then
				nr_seq_aviso_conta_w := null;
			end;
		end if;
		
		if (vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui <> '9') then
			if (vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui = '0') then
				vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui	:= '1';
			elsif (vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui = '1') then
				vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui	:= '2';
			elsif (vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui = '2') then
				vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui	:= '3';
			else
				vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui	:= '9';
			end if;
		end if;
		
		--INSERT PTU_NOTA_COBRANCA

		insert into ptu_nota_cobranca(	nr_sequencia,													cd_cid,													cd_cid_obito,
						cd_cnes_cont_exec,												cd_excecao,												cd_munic_cont_exec,
						cd_prestador_exec,												cd_prestador_req,											cd_unimed,
						cd_unimed_prest_exec,												cd_unimed_prest_req,											cd_usuario_plano,
						dt_alta,													dt_atendimento,												dt_atualizacao,
						dt_atualizacao_nrec,												dt_conferencia_doc,											dt_conhecimento,
						dt_fim_consist_conta,												dt_fim_geracao_conta,											dt_inicio_consist_conta,
						dt_inicio_geracao_conta,											dt_internacao,												dt_protocolo,
						dt_ultima_autoriz,												id_aviso,												id_continuado,
						id_liminar,													id_nota_principal,											id_rec_proprio,
						id_rn,														ie_carater_atendimento,											ie_consistente,
						ie_doc_fisico_conf,												ie_envia_conta,												ie_necessita_doc_fisico,
						ie_paciente,													ie_pcmso,												ie_tipo_atendimento,
						ie_tipo_saida_spdat,												motivo_encerram,											nm_beneficiario,
						nm_prest_exec,													nm_prest_req,												nm_usuario,
						nm_usuario_doc_fisico,												nm_usuario_nrec,											nr_cbo_req,
						nr_cnpj_cpf,													nr_cnpj_cpf_req,											nr_cons_prof_req,
						nr_fatura_glosada,												nr_guia_principal,											nr_guia_principal_numerico,
						nr_guia_tiss_operadora,												nr_guia_tiss_prestador,											nr_guia_tiss_principal,
						nr_linha,													nr_lote,												nr_lote_glosado,
						nr_lote_prest,													nr_ndr_glosada,												nr_nota,
						nr_nota_glosada,												nr_nota_numerico,											nr_seq_aviso_conta,
						nr_seq_conta,													nr_seq_fatura,												nr_seq_prest_inter,
						nr_seq_serv_pre_pagto,												nr_ver_tiss,												pr_taxa,
						sg_cons_prof_req,												sg_uf_cons_req,												tipo_rede_min,
						tp_consulta,													tp_ind_acidente,											tp_nota,
						tp_pessoa,													tp_prest_exec,												ie_glosa_total,
						nr_guia_glosada,												nr_guia_oper_glosada,											ie_cobertura_especial,
						ie_regime_atendimento,												ie_saude_ocupacional)		
					values (	nextval('ptu_nota_cobranca_seq'),											null,													null,
						vet_tab_guia_consulta_w[i].CNES_cont_exec,									vet_tab_guia_consulta_w[i].cd_excecao_dad_gui,								vet_tab_guia_consulta_w[i].cd_municipio_cont_exe,
						coalesce(vet_tab_guia_consulta_w[i].cd_prest_cont_exec,vet_tab_guia_consulta_w[i].cd_prest_prof_exec),		null,													vet_tab_guia_consulta_w[i].cd_unimed_dad_ben,
						coalesce(vet_tab_guia_consulta_w[i].cd_uni_prest_cont_exec,vet_tab_guia_consulta_w[i].cd_uni_prest_prof_exec),	null,													vet_tab_guia_consulta_w[i].id_benef_dad_ben,
						null,														to_date(substr(vet_tab_guia_consulta_w[i].dt_atendimento_dad_gui,1,18), 'yyyy/mm/ddhh24:mi:ss'),	clock_timestamp(),
						clock_timestamp(),													null,													ptu_a500_imp_pck.converte_data(vet_tab_guia_consulta_w[i].dt_conhecimento_dad_gui),
						null,														null,													null,
						null,														null,													ptu_a500_imp_pck.converte_data(vet_tab_guia_consulta_w[i].dt_protocolo_dad_gui),
						null,														vet_tab_guia_consulta_w[i].id_aviso_dad_gui,								vet_tab_guia_consulta_w[i].id_continuado_dad_gui,
						vet_tab_guia_consulta_w[i].id_liminar_dad_gui,									null,													vet_tab_guia_consulta_w[i].id_rec_proprio_cont_exe,
						vet_tab_guia_consulta_w[i].id_rn_dad_ben,									null,													null,
						null,														null,													null,
						vet_tab_guia_consulta_w[i].tp_paciente_dad_ben,									null,													null,
						null,														null,													vet_tab_guia_consulta_w[i].nm_benef_dad_ben,
						coalesce(vet_tab_guia_consulta_w[i].nm_prest_cont_exec,vet_tab_guia_consulta_w[i].nm_prest_prof_exec),		coalesce(vet_tab_guia_consulta_w[i].nm_prest_cont_exec,vet_tab_guia_consulta_w[i].nm_prest_prof_exec),	nm_usuario_p,
						null,														nm_usuario_p,												vet_tab_guia_consulta_w[i].cbo_prof_exec,
						coalesce(vet_tab_guia_consulta_w[i].cd_cpf_cont_exec, vet_tab_guia_consulta_w[i].cd_cnpj_cont_exec),			coalesce(vet_tab_guia_consulta_w[i].cd_cpf_cont_exec, vet_tab_guia_consulta_w[i].cd_cnpj_cont_exec),		vet_tab_guia_consulta_w[i].nr_conselho_prof_exec,
						vet_tab_guia_consulta_w[i].nr_doc1_glosado_rea_glo,								null,													null,
						vet_tab_guia_consulta_w[i].nr_guia_tiss_operadora_dad_gui,							vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui,						null,
						null,														somente_numero(vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui),					somente_numero(coalesce(vet_tab_guia_consulta_w[i].nr_lote_rea_glo_txt,vet_tab_guia_consulta_w[i].nr_lote_prestador_xml_rea_glo)),
						vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui,								vet_tab_guia_consulta_w[i].nr_doc2_glosado_rea_glo,							vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui,
						coalesce(vet_tab_guia_consulta_w[i].nr_nota_rea_glo_txt,vet_tab_guia_consulta_w[i].nr_guia_glosada_xml_rea_glo),	somente_numero(vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui),				nr_seq_aviso_conta_w,
						null,														nr_seq_ptu_fatura_w,											null,
						null,														vet_tab_guia_consulta_w[i].nr_ver_tiss_dad_gui,								null,
						vet_tab_guia_consulta_w[i].sg_conselho_prof_exec,								vet_tab_guia_consulta_w[i].uf_prof_exec,								vet_tab_guia_consulta_w[i].tp_rede_min_cont_exe,
						vet_tab_guia_consulta_w[i].tp_consulta_dad_gui,									vet_tab_guia_consulta_w[i].tp_ind_acidente_dad_gui,							1,
						tp_pessoa_w,													vet_tab_guia_consulta_w[i].tp_prestador_cont_exe,							vet_tab_guia_consulta_w[i].id_glosa_total_dad_gui,
						vet_tab_guia_consulta_w[i].nr_guia_glosada_xml_rea_glo,								vet_tab_guia_consulta_w[i].nr_guia_tiss_oper_glo_rea_glo,						vet_tab_guia_consulta_w[i].ie_cobertura_especial_dad_gui,							
						vet_tab_guia_consulta_w[i].ie_regime_atendimento_dad_gui,							vet_tab_guia_consulta_w[i].ie_saude_ocupacional_dad_gui) returning nr_sequencia into nr_seq_nota_cobr_w;
		
		-- SERVICO

		for j in 1..vet_tab_guia_cons_proc_exec_w.count loop
			-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_cons_proc_exec_w[j].id = vet_tab_guia_consulta_w[i].id) then
			
				
				nr_seq_aviso_material_w		:= null;
				nr_seq_aviso_procedimento_w	:= null;
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;
				
				vet_tab_guia_cons_proc_exec_w[j].vl_servico_cobr_proc	:= to_number(replace(vet_tab_guia_cons_proc_exec_w[j].vl_servico_cobr_proc, ',','.'), '999999999999.99');
				vet_tab_guia_cons_proc_exec_w[j].tx_adm_servico_proc	:= to_number(replace(vet_tab_guia_cons_proc_exec_w[j].tx_adm_servico_proc, ',','.'), '999999999999.99');
				
				--OBTER TP_TABELA E CD_SERVICO

				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_guia_cons_proc_exec_w[j].tp_tabela_proc, vet_tab_guia_cons_proc_exec_w[j].cd_servico_proc, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_guia_cons_proc_exec_w[j].tp_tabela_proc, vet_tab_guia_cons_proc_exec_w[j].cd_servico_proc, null);
		
				if (ie_tipo_tabela_w = 4) then
					ie_pacote_intercambio_w := 'S';
				else
					ie_pacote_intercambio_w := 'N';
				end if;
				
				if (vet_tab_guia_consulta_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_guia_consulta_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_guia_consulta_w[i].id_benef_dad_ben;
				end if;
		
				-- OBTER O PROC CONVERSAO

				if ( ie_tipo_tabela_w in (2,3,5,6)) then
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then		
						nr_seq_material_w := cd_servico_w;

					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						
						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_servico_w, 'O', ie_situacao_material_w, vet_tab_guia_consulta_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
						
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then			
						nr_seq_material_w := null;
						
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := null;
						end if;
						
						pls_obter_mat_a900_vigente( nr_seq_material_w, dt_ref_conv_mat_unimed_w, cd_servico_w, vet_tab_guia_consulta_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;

					-- VERIFICAR SE TEM REGRA DE CONVERSAO

					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
					
						pls_obter_proced_conversao(	null, null, null,
										cd_estabelecimento_p, 1, null,
										3, 'R', nr_seq_contrato_w,
										nr_seq_intercambio_w, null, cd_mat_number_inter_w,
										ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
										nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
										null, null, null, 'N', ie_priorizar_conv_pct_int_w);
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										null, 
										'R', 
										'A', 
										null, 
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;		

					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;

					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						-- A900

						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', vet_tab_guia_consulta_w[igc].nr_ver_tiss_dad_gui);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', vet_tab_guia_consulta_w[igc].nr_ver_tiss_dad_gui);
						end if;	
					end if;
										
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;
					
				else
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;

					--A ORIGEM DO PROCEDIMENTO E BUSCADO POR REGRA EXISTENTE NO CADASTRO DE REGRAS / PROCEDIMENTOS/ REGRA ORIGEM.

					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null,
									cd_estabelecimento_p, 1, null,
									3, 'R', nr_seq_contrato_w,
									nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
									nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
									null, null, null, ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);
					
					
					-- OBTER A ORIGEM PADRAO PARA OS ITENS CONFORME A REGRA.

					ie_origem_proced_padrao_w := pls_obter_origem_proced(cd_estabelecimento_p, null, 'R', null, null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						--JJUNG OS 483853 - 02/10/2012 - ADICIONADO RESTRICAO PARA DATA DE VIGENCIA DAS REGRAS CADASTRADAS.

						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					--CRIADO TRATAMENTO PARA ATENDER AS OS 575917 QUE SOLICITA QUE SEJA BUSCADO A ULTIMA ORIGEM VALIDA E A OS 644869 ONDE INDICA QUE DEVE SER RESPEITADA A ORIGEM PADRAO DO SISTEMA	

					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento 	= cd_proc_conversao_w
						and	ie_origem_proced 	= ie_origem_proced_conv_w
						and	ie_situacao = 'A';
						
						-- SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_situacao 	= 'A';	
							
							-- SE NAO ENCONTRAR A ORIGEM EM PROCEDIMENTOS ATIVOS, BUSCA EM PROCEDIMENTOS QUE NAO ESTIVEREM ATIVOS.

							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;	
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						--OS667827

						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED OS 644869 CONFORME SOLICITADO FOI REALIZADO TRATAMENTO PARA CASO NAO 

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w );	
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento	= cd_proc_conversao_w
					and	ie_origem_proced = ie_origem_proced_conv_w;
					
					-- TEM QUE DEIXAR O ITEM COMO NAO ENCONTRADO

					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w := null;
						ie_origem_proced_conv_w := null;
					end if;
				end if;
				
				if (coalesce(nr_seq_material_w::text, '') = '') then
					ds_servico_w	:= substr(obter_descricao_procedimento(cd_servico_w,ie_origem_proced_padrao_w),1,80);
				else
					select	max(ds_material)
					into STRICT	ds_servico_w
					from	pls_material
					where	nr_sequencia = nr_seq_material_w;
				end if;
					
				-- OBTER VINCULO COM O A520

				if (nr_seq_aviso_conta_w IS NOT NULL AND nr_seq_aviso_conta_w::text <> '') and (vet_tab_guia_consulta_w[i].id_aviso_dad_gui = 'S') then
					-- OS 1882669

					if ( ie_tipo_tabela_w not in (0,1,4)) then
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_material_w
						from    ptu_aviso_material
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_mat_envio            = cd_servico_w;
					else
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_procedimento_w
						from    ptu_aviso_procedimento
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_proc_envio           = cd_servico_w;
					end if;                	
				end if;
				
				-- FAZER INSERT NA PTU_NOTA_SERVICO - CONTAS DE INTERCAMBIO

				-- REVISAR OS CAMPOS QUE ESTAO COMO NULL	

				insert into ptu_nota_servico(	nr_sequencia,								cd_ato,														cd_cnes_prest,
								cd_especialidade,							cd_munic,													cd_pacote,
								cd_porte_anestesico,							cd_prestador,													cd_prestador_req,
								cd_procedimento,							cd_rec_prestador,												cd_ref_material_fab,
								cd_ref_material_fab_opme,						cd_servico,													cd_unimed_autorizadora,
								cd_unimed_pre_req,							cd_unimed_prestador,												det_reg_anvisa,
								ds_hora_procedimento,							ds_servico,													ds_servico_aux,
								dt_atualizacao,								dt_atualizacao_nrec,												dt_autoriz,
								dt_pgto_prestador,							dt_procedimento,												dt_solicitacao,
								hr_final,								hr_servico,													id_acres_urg_emer,
								id_aviso_item,								id_pag_forn,													ie_alto_custo,
								ie_consistente,								ie_origem_proced,												ie_pacote,
								ie_rede_propria,							ie_reembolso,													ie_tipo_data_regra,
								ie_tipo_participacao_tiss,						ie_tipo_pessoa_prestador,											ie_tipo_prestador,
								ie_tipo_tabela_tiss,							ie_via_acesso,													nm_fornecedor,
								nm_prestador,								nm_prestador_requisitante,											nm_profissional_prestador,
								nm_usuario,								nm_usuario_nrec,												nr_autorizacao,
								nr_cbo_exec,								nr_cgc_cpf,													nr_cgc_cpf_req,
								nr_cnpj_fornecedor,							nr_cons_prof_prest,												nr_cons_prof_req,
								nr_guia_tiss,								nr_linha,													nr_lote,
								nr_nota,								nr_nota_fiscal_forn,												nr_nota_numerico,
								nr_reg_anvisa,								nr_seq_agrup_item_ptu,												nr_seq_aviso_material,
								nr_seq_aviso_procedimento,						nr_seq_a500,													nr_seq_composicao,
								nr_seq_conta_mat,							nr_seq_conta_proc,												nr_seq_material,
								nr_seq_nota,								nr_seq_nota_cobr,												nr_seq_pacote,
								nr_seq_pacote_agrup,							nr_seq_pacote_mat,												nr_seq_pacote_proc,
								nr_seq_proc_partic,							nr_seq_registro,												qt_procedimento,
								sg_cons_prof_prest,							sg_cons_prof_req,												sg_uf_cons_prest,
								sg_uf_cons_req,								tec_utilizada,													tipo_rede_min,
								tp_autoriz,								tx_procedimento,												unidade_medida,
								vl_adic_co,								vl_adic_filme,													vl_adic_procedimento,
								vl_custo_operacional,							vl_filme,													vl_pago_prest,
								vl_procedimento,							cd_item_unico,													nr_seq_item,
								ie_tipo_participacao,							ie_tipo_tabela,													cd_servico_tiss,
								cd_servico_xml)		
							values (	nextval('ptu_nota_servico_seq'),						vet_tab_guia_cons_proc_exec_w[j].cd_ato_proc,									null,
								null,									null,														null,
								null,									null,														null,
								cd_proc_conversao_w,							null,														null,
								null,									cd_servico_w,													coalesce(vet_tab_guia_cons_proc_exec_w[j].cd_uni_autori_dad_aut,cd_unimed_destino_w),
								null,									coalesce(vet_tab_guia_consulta_w[i].cd_uni_prest_cont_exec,vet_tab_guia_consulta_w[i].cd_uni_prest_prof_exec),	null,
								hr_inicio_final_w,							ds_servico_w,													null,
								clock_timestamp(),								clock_timestamp(),													ptu_a500_imp_pck.converte_data(vet_tab_guia_cons_proc_exec_w[j].dt_autorizacao_dad_aut),
								null,									to_date(substr(vet_tab_guia_consulta_w[i].dt_atendimento_dad_gui,1,18), 'yyyy/mm/ddhh24:mi:ss'),		ptu_a500_imp_pck.converte_data(vet_tab_guia_cons_proc_exec_w[j].dt_solicitacao_dad_aut),
								hr_inicio_final_w,							null,														null,
								vet_tab_guia_cons_proc_exec_w[j].id_avisado_item_proc,			null,														null,
								null,									ie_origem_proced_conv_w,											null,
								null,									null,														null,
								null,									tp_pessoa_w,													vet_tab_guia_consulta_w[i].tp_prestador_cont_exe,
								vet_tab_guia_cons_proc_exec_w[j].tp_tabela_proc,			null,														null,
								vet_tab_guia_consulta_w[i].nm_prest_cont_exec,				null,														coalesce(vet_tab_guia_consulta_w[i].nm_prest_prof_exec,vet_tab_guia_consulta_w[i].nm_prest_cont_exec),
								nm_usuario_p,								nm_usuario_p,													vet_tab_guia_cons_proc_exec_w[j].nr_autorizacao_dad_aut,
								vet_tab_guia_consulta_w[i].cbo_prof_exec,				coalesce(vet_tab_guia_consulta_w[i].cd_cpf_cont_exec, vet_tab_guia_consulta_w[i].cd_cnpj_cont_exec),			null,
								null,									vet_tab_guia_consulta_w[i].nr_conselho_prof_exec,								null,
								null,									null,														somente_numero(vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui),
								vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui,		null,														somente_numero(vet_tab_guia_consulta_w[i].nr_guia_tiss_prestador_dad_gui),
								null,									null,														nr_seq_aviso_material_w,
								nr_seq_aviso_procedimento_w,						null,														null,
								null,									null,														nr_seq_material_w,
								null,									nr_seq_nota_cobr_w,												null,
								null,									null,														null,
								null,									null,														1,
								vet_tab_guia_consulta_w[i].sg_conselho_prof_exec,			null,														vet_tab_guia_consulta_w[i].uf_prof_exec,
								null,									null,														vet_tab_guia_consulta_w[i].tp_rede_min_cont_exe,
								vet_tab_guia_cons_proc_exec_w[j].tp_autorizacao_dad_aut,		0,														null,
								0,									0,														coalesce(vet_tab_guia_cons_proc_exec_w[j].tx_adm_servico_proc,0),
								0,									0,														0,
								coalesce(vet_tab_guia_cons_proc_exec_w[j].vl_servico_cobr_proc,0),		vet_tab_guia_cons_proc_exec_w[j].id_item_unico_proc,								vet_tab_guia_cons_proc_exec_w[j].seq_item_proc,
								'0',									ie_tipo_tabela_w,												vet_tab_guia_cons_proc_exec_w[j].cd_servico_proc, 
								vet_tab_guia_cons_proc_exec_w[j].cd_servico_proc);
								
				select	max(nr_seq_prest_inter)
				into STRICT	nr_seq_prest_inter_w
				from	ptu_nota_cobranca
				where	nr_sequencia		= nr_seq_nota_cobr_w;
				
				if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
					if (tp_pessoa_w = 'J') then
						cd_cgc_prestador_w		:= vet_tab_guia_consulta_w[i].cd_cnpj_cont_exec;
						nr_cpf_prestador_w		:= null;
					elsif (tp_pessoa_w = 'F') then
						cd_cgc_prestador_w		:= null;
						nr_cpf_prestador_w		:= vet_tab_guia_consulta_w[i].cd_cpf_cont_exec;
					end if;
					
					nm_prestador_w	:= coalesce(vet_tab_guia_consulta_w[i].nm_prest_cont_exec,vet_tab_guia_consulta_w[i].nm_prest_prof_exec);
					
					pls_gerar_prest_intercambio(	nr_cpf_prestador_w,				cd_cgc_prestador_w,					nm_prestador_w,
									vet_tab_guia_consulta_w[i].CNES_cont_exec,	vet_tab_guia_consulta_w[i].cd_municipio_cont_exe,	nm_usuario_p,
									null, 						vet_tab_guia_consulta_w[i].cbo_prof_exec,		nr_seq_prest_inter_w,
									nr_seq_prestador_w);

					if (nr_seq_prest_inter_w IS NOT NULL AND nr_seq_prest_inter_w::text <> '') then
						update	ptu_nota_cobranca
						set	nr_seq_prest_inter	= nr_seq_prest_inter_w
						where	nr_sequencia		= nr_seq_nota_cobr_w;
					end if;
				end if;
			end if;
		end loop;
		
		-- COMPLEMENTO

		for l in 1..vet_tab_guia_cons_comp_w.count loop
			-- SO IRA FAZER O INSERT NA PTU_NOTA_COMPLEMENTO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_consulta_w[i].id = vet_tab_guia_cons_comp_w[l].id_complemento)  then
				-- FAZER INSERT NA PTU_NOTA_COMPLEMENTO - CONTAS DE INTERCAMBIO	

				insert into ptu_nota_complemento(nr_sequencia,						dt_atualizacao,							dt_atualizacao_nrec,
								nm_usuario,						nm_usuario_nrec,						ds_complemento,
								especif_material,					ie_tipo_complemento,						nr_linha,
								nr_lote,						nr_nota,							nr_seq_nota_cobr)
						values (	nextval('ptu_nota_complemento_seq'),			clock_timestamp(),							clock_timestamp(),
								nm_usuario_p,						nm_usuario_p,							substr(vet_tab_guia_cons_comp_w[l].nm_complemento,1,500),
								null,							vet_tab_guia_cons_comp_w[l].tp_complemento,			null,
								somente_numero(vet_tab_guia_consulta_w[i].nr_lote_prestador_dad_gui),	null,								nr_seq_nota_cobr_w);
			end if;
		end loop;
		
		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '502'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;
	end loop;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INSERT DA GUIA DE SP/SADT  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	for i in 1..vet_tab_guia_sadt_w.count loop
	
		-- CONVERTER UF

		vet_tab_guia_sadt_w[i].uf_dad_con_pro		:= pls_obter_cd_unidade_ibge(null, vet_tab_guia_sadt_w[i].uf_dad_con_pro);
		vet_tab_guia_sadt_w[i].tp_atendimento_dad_ate	:= pls_elimina_carac_espec_zero(vet_tab_guia_sadt_w[i].tp_atendimento_dad_ate);
		
		-- OBTER O TP_PESSOA

		if ( vet_tab_guia_sadt_w[i](.cd_cpf_dad_exe IS NOT NULL AND .cd_cpf_dad_exe::text <> '')) then
			tp_pessoa_w	:= 'F';
		elsif ( vet_tab_guia_sadt_w[i](.cd_cnpj_dad_exe IS NOT NULL AND .cd_cnpj_dad_exe::text <> '')) then
			tp_pessoa_w	:= 'J';
		end if;
		
		-- TENTA REALIZAR O VINCULO COM A GUIA DO A520, CASO EXISTIR

		if (vet_tab_guia_sadt_w[i](.dt_conhecimento_dad_gui IS NOT NULL AND .dt_conhecimento_dad_gui::text <> '')) then
			select	max(cd_unimed_destino)
			into STRICT	cd_unimed_destino_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_ptu_fatura_w;
		
			-- MONTAR A CARTEIRINHA DO BENEFICIARIO

			nr_carteira_benef_w := cd_unimed_destino_w || vet_tab_guia_sadt_w[i].id_benef_dad_ben;
		
			begin
				select	max(x.nr_sequencia)
				into STRICT	nr_seq_aviso_conta_w
				from (	-- BUSCA POR PESSOA JURIDICA
					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cnpj_executante	= vet_tab_guia_sadt_w[i].cd_cnpj_dad_exe
					and	tp_pessoa_w		= 'J'
					and	aa.nr_lote		= vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w
					
union all

					-- BUSCA POR PESSOA FISICA

					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cpf_executante	= vet_tab_guia_sadt_w[i].cd_cpf_dad_exe
					and	tp_pessoa_w		= 'F'
					and	aa.nr_lote		= vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w) x;
			exception
			when others then
				nr_seq_aviso_conta_w := null;
			end;
		end if;
		
		if (vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate <> '9') then
			if (vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate = '0') then
				vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate	:= '1';
			elsif (vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate = '1') then
				vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate	:= '2';
			elsif (vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate = '2') then
				vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate	:= '3';
			else
				vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate	:= '9';
			end if;
		end if;
		
		motivo_encerram_w		:= null;
		
		-- se tiver motivo de encerramento

		if (vet_tab_guia_sadt_w[i](.mv_encerramento_dad_ate IS NOT NULL AND .mv_encerramento_dad_ate::text <> '')) then
			select	lpad(trim(both max(cd_ptu)),2,'0')
			into STRICT	motivo_encerram_w
			from	pls_motivo_saida
			where	lpad(trim(both cd_tiss),2,'0') = lpad(trim(both vet_tab_guia_sadt_w[i].mv_encerramento_dad_ate),2,'0');
		end if;

		-- FAZER INSERT NA PTU_NOTA_COBRANCA - CONTAS DE INTERCAMBIO

		insert into ptu_nota_cobranca(	nr_sequencia,												cd_cid,											cd_cid_obito,
						cd_cnes_cont_exec,											cd_excecao,										cd_munic_cont_exec,
						cd_prestador_exec,											cd_prestador_req,									cd_unimed,
						cd_unimed_prest_exec,											cd_unimed_prest_req,									cd_usuario_plano,
						dt_alta,												dt_atendimento,										dt_atualizacao,
						dt_atualizacao_nrec,											dt_conferencia_doc,									dt_conhecimento,
						dt_fim_consist_conta,											dt_fim_geracao_conta,									dt_inicio_consist_conta,
						dt_inicio_geracao_conta,										dt_internacao,										dt_protocolo,
						dt_ultima_autoriz,											id_aviso,										id_continuado,
						id_liminar,												id_nota_principal,									id_rec_proprio,
						id_rn,													ie_carater_atendimento,									ie_consistente,
						ie_doc_fisico_conf,											ie_envia_conta,										ie_necessita_doc_fisico,
						ie_paciente,												ie_pcmso,										ie_tipo_atendimento,
						ie_tipo_saida_spdat,											motivo_encerram,									nm_beneficiario,
						nm_prest_exec,												nm_prest_req,										nm_usuario,
						nm_usuario_doc_fisico,											nm_usuario_nrec,									nr_cbo_req,
						nr_cnpj_cpf,												nr_cnpj_cpf_req,									nr_cons_prof_req,
						nr_fatura_glosada,											nr_guia_principal,									nr_guia_principal_numerico,
						nr_guia_tiss_operadora,											nr_guia_tiss_prestador,									nr_guia_tiss_principal,
						nr_linha,												nr_lote,										nr_lote_glosado,
						nr_lote_prest,												nr_ndr_glosada,										nr_nota,
						nr_nota_glosada,											nr_nota_numerico,									nr_seq_aviso_conta,
						nr_seq_conta,												nr_seq_fatura,										nr_seq_prest_inter,
						nr_seq_serv_pre_pagto,											nr_ver_tiss,										pr_taxa,
						sg_cons_prof_req,											sg_uf_cons_req,										tipo_rede_min,
						tp_consulta,												tp_ind_acidente,									tp_nota,
						tp_pessoa,												tp_prest_exec,										ie_glosa_total,
						nr_guia_glosada,											cd_motivo_encerramento_tiss,								nr_guia_oper_glosada,
						ie_cobertura_especial,											ie_regime_atendimento,									ie_saude_ocupacional)
					values (	nextval('ptu_nota_cobranca_seq'),										null,											null,
						vet_tab_guia_sadt_w[i].cnes_dad_exe,									vet_tab_guia_sadt_w[i].cd_excecao_dad_gui,						vet_tab_guia_sadt_w[i].cd_municipio_cont_dad_exe,
						vet_tab_guia_sadt_w[i].cd_prest_dad_exe,								vet_tab_guia_sadt_w[i].cd_prest_dad_sol,						vet_tab_guia_sadt_w[i].cd_unimed_dad_ben,
						vet_tab_guia_sadt_w[i].cd_uni_prest_dad_exe,								vet_tab_guia_sadt_w[i].cd_uni_prest_dad_sol,						vet_tab_guia_sadt_w[i].id_benef_dad_ben,
						null,													to_date(substr(vet_tab_guia_sadt_w[i].dt_atendimento_dad_gui,1,18), 'yyyy/mm/ddhh24:mi:ss'),			clock_timestamp(),
						clock_timestamp(),												null,											ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_w[i].dt_conhecimento_dad_gui),
						null,													null,											null,
						null,													null,											ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_w[i].dt_protocolo_dad_gui),
						ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_w[i].dt_ultima_autorizacao_dad_gui),					vet_tab_guia_sadt_w[i].id_aviso_dad_gui,						vet_tab_guia_sadt_w[i].id_continuado_dad_gui,
						vet_tab_guia_sadt_w[i].id_liminar_dad_gui,								vet_tab_guia_sadt_w[i].id_guia_principal_dad_gui,					vet_tab_guia_sadt_w[i].id_rec_proprio_dad_exe,
						vet_tab_guia_sadt_w[i].id_rn_dad_ben,									vet_tab_guia_sadt_w[i].carater_atendimento_dad_ate,					null,
						null,													null,											null,
						vet_tab_guia_sadt_w[i].tp_paciente_dad_ben,								null,											vet_tab_guia_sadt_w[i].tp_atendimento_dad_ate,
						null,													motivo_encerram_w,									vet_tab_guia_sadt_w[i].nm_benef_dad_ben,
						vet_tab_guia_sadt_w[i].nome_dad_exe,									vet_tab_guia_sadt_w[i].nome_dad_sol,							nm_usuario_p,
						null,													nm_usuario_p,										vet_tab_guia_sadt_w[i].cbo_dad_sol,
						coalesce(vet_tab_guia_sadt_w[i].cd_cnpj_dad_exe, vet_tab_guia_sadt_w[i].cd_cpf_dad_exe),			coalesce(vet_tab_guia_sadt_w[i].cd_cnpj_dad_sol, vet_tab_guia_sadt_w[i].cd_cpf_dad_sol),	vet_tab_guia_sadt_w[i].nr_conselho_dad_con_pro,
						vet_tab_guia_sadt_w[i].nr_doc1_glosado_rea_glo,								vet_tab_guia_sadt_w[i].nr_guia_tiss_principal_dad_gui,					somente_numero(vet_tab_guia_sadt_w[i].nr_guia_tiss_principal_dad_gui),
						vet_tab_guia_sadt_w[i].nr_guia_tiss_operadora_dad_gui,							vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui,					vet_tab_guia_sadt_w[i].nr_guia_tiss_principal_dad_gui,
						null,													somente_numero(vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui),			somente_numero(coalesce(vet_tab_guia_sadt_w[i].nr_lote_rea_glo_txt,vet_tab_guia_sadt_w[i].nr_lote_prestador_xml_rea_glo)),
						vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui,							vet_tab_guia_sadt_w[i].nr_doc2_glosado_rea_glo,						vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui,
						coalesce(vet_tab_guia_sadt_w[i].nr_nota_rea_glo_txt,vet_tab_guia_sadt_w[i].nr_guia_glosada_xml_rea_glo),	somente_numero(vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui),			nr_seq_aviso_conta_w,
						null,													nr_seq_ptu_fatura_w,									null,
						null,													vet_tab_guia_sadt_w[i].nr_ver_tiss_dad_gui,						null,
						vet_tab_guia_sadt_w[i].sg_conselho_dad_con_pro,								vet_tab_guia_sadt_w[i].uf_dad_con_pro,							vet_tab_guia_sadt_w[i].tp_rede_min_dad_exe,
						vet_tab_guia_sadt_w[i].tp_consulta_dad_ate,								vet_tab_guia_sadt_w[i].tp_indacidente_dad_ate,						2,
						tp_pessoa_w,												vet_tab_guia_sadt_w[i].tp_prestador_dad_exe,						vet_tab_guia_sadt_w[i].id_glosa_total_dad_gui,
						vet_tab_guia_sadt_w[i].nr_guia_glosada_xml_rea_glo,							vet_tab_guia_sadt_w[i].mv_encerramento_dad_ate,						vet_tab_guia_sadt_w[i].nr_guia_tiss_oper_glo_rea_glo,
						vet_tab_guia_sadt_w[i].ie_cobertura_especial_dad_ate,							vet_tab_guia_sadt_w[i].ie_regime_atendimento_dad_ate,					vet_tab_guia_sadt_w[i].ie_saude_ocupacional_dad_ate) returning nr_sequencia into nr_seq_nota_cobr_w;

		for j in 1..vet_tab_guia_sadt_proc_exec_w.count loop
			-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_sadt_proc_exec_w[j].id = vet_tab_guia_sadt_w[i].id) then
			
				nr_seq_aviso_material_w		:= null;
				nr_seq_aviso_procedimento_w	:= null;
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				ie_tipo_participacao_w		:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;
				
				-- CONVERSOES

				vet_tab_guia_sadt_proc_exec_w[j].qt_cobrada_pro			:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].qt_cobrada_pro, ',','.'), '99999.9999');
				vet_tab_guia_sadt_proc_exec_w[j].tx_adm_co_tax			:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_co_tax, ',','.'), '999999999999.99');
				vet_tab_guia_sadt_proc_exec_w[j].ft_multiplicador_servico_pro	:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].ft_multiplicador_servico_pro, ',','.'), '99.99');
				vet_tab_guia_sadt_proc_exec_w[j].tx_adm_filme_tax		:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_filme_tax, ',','.'), '999999999999.99');
				vet_tab_guia_sadt_proc_exec_w[j].tx_adm_servico_tax		:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_servico_tax, ',','.'), '999999999999.99');
				vet_tab_guia_sadt_proc_exec_w[j].vl_co_cobrado_val		:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].vl_co_cobrado_val, ',','.'), '999999999999.99');
				vet_tab_guia_sadt_proc_exec_w[j].vl_filme_cobrado_val		:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].vl_filme_cobrado_val, ',','.'), '999999999999.99');
				vet_tab_guia_sadt_proc_exec_w[j].vl_serv_cobrado_val		:= to_number(replace(vet_tab_guia_sadt_proc_exec_w[j].vl_serv_cobrado_val, ',','.'), '999999999999.99');
				
				--OBTER TP_TABELA E CD_SERVICO

				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_guia_sadt_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_sadt_proc_exec_w[j].cd_servico_pro, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_guia_sadt_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_sadt_proc_exec_w[j].cd_servico_pro, null);
				
				if (ie_tipo_tabela_w = 4) then
					ie_pacote_intercambio_w := 'S';
				else
					ie_pacote_intercambio_w := 'N';
				end if;
				
				if (vet_tab_guia_sadt_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_guia_sadt_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_guia_sadt_w[i].id_benef_dad_ben;
				end if;
				
				-- OBTER O PROC CONVERSAO

				if ( ie_tipo_tabela_w in (2,3,5,6)) then
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then		
						nr_seq_material_w := cd_servico_w;

					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						
						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_servico_w, 'O', ie_situacao_material_w, vet_tab_guia_sadt_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
						
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then			
						nr_seq_material_w := null;
						
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_execucao_pro);
						end if;
						
						pls_obter_mat_a900_vigente( nr_seq_material_w, dt_ref_conv_mat_unimed_w, cd_servico_w, vet_tab_guia_sadt_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;
									
					-- VERIFICAR SE TEM REGRA DE CONVERSAO

					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						pls_obter_proced_conversao(	null, null, null,
										cd_estabelecimento_p, 1, null,
										3, 'R', nr_seq_contrato_w,
										nr_seq_intercambio_w, null, cd_mat_number_inter_w,
										ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
										nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
										null, null, null, 'N', ie_priorizar_conv_pct_int_w);
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_execucao_pro), 
										'R', 
										'A', 
										null, 
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;		

					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;

					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						-- A900

						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', vet_tab_guia_sadt_w[i].nr_ver_tiss_dad_gui);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', vet_tab_guia_sadt_w[i].nr_ver_tiss_dad_gui);
						end if;	
					end if;
										
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;
				else
					
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;
					
					--A ORIGEM DO PROCEDIMENTO E BUSCADO POR REGRA EXISTENTE NO CADASTRO DE REGRAS / PROCEDIMENTOS/ REGRA ORIGEM.

					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null,
									cd_estabelecimento_p, 1, null,
									3, 'R', nr_seq_contrato_w,
									nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
									nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
									null, null, null, ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);

									-- OBTER A ORIGEM PADRAO PARA OS ITENS CONFORME A REGRA.					

					ie_origem_proced_padrao_w := pls_obter_origem_proced(cd_estabelecimento_p, null, 'R', ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_execucao_pro), null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						--JJUNG OS 483853 - 02/10/2012 - ADICIONADO RESTRICAO PARA DATA DE VIGENCIA DAS REGRAS CADASTRADAS.

						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					--CRIADO TRATAMENTO PARA ATENDER AS OS 575917 QUE SOLICITA QUE SEJA BUSCADO A ULTIMA ORIGEM VALIDA E A OS 644869 ONDE INDICA QUE DEVE SER RESPEITADA A ORIGEM PADRAO DO SISTEMA	

					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w
						and	ie_situacao = 'A';
						
						-- SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_situacao = 'A';	
							
							-- SE NAO ENCONTRAR A ORIGEM EM PROCEDIMENTOS ATIVOS, BUSCA EM PROCEDIMENTOS QUE NAO ESTIVEREM ATIVOS.

							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;	
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						--OS667827

						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						--OS 644869 CONFORME SOLICITADO FOI REALIZADO TRATAMENTO PARA CASO NAO 

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w );	
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento	= cd_proc_conversao_w
					and	ie_origem_proced = ie_origem_proced_conv_w;
					
					-- TEM QUE DEIXAR O ITEM COMO NAO ENCONTRADO

					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w := null;
						ie_origem_proced_conv_w := null;
					end if;
				end if;
				
				-- OBTER VINCULO COM O A520

				if (nr_seq_aviso_conta_w IS NOT NULL AND nr_seq_aviso_conta_w::text <> '') and (vet_tab_guia_sadt_proc_exec_w[j].id_avisado_pro = 'S') then
					-- OS 1882669

					if ( ie_tipo_tabela_w not in (0,1,4)) then
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_material_w
						from    ptu_aviso_material
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_mat_envio            = cd_servico_w;
					else
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_procedimento_w
						from    ptu_aviso_procedimento
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_proc_envio           = cd_servico_w;
					end if;                	
				end if;
				
				-- OBTER O IE_TIPO_PESSOA_PRESTADOR da PTU_NOTA_SERVICO

				if (vet_tab_guia_sadt_w[i](.cd_cpf_dad_exe IS NOT NULL AND .cd_cpf_dad_exe::text <> '')) then
					ie_tipo_pessoa_prestador_w	:= 'F';
				elsif (vet_tab_guia_sadt_w[i](.cd_cnpj_dad_exe IS NOT NULL AND .cd_cnpj_dad_exe::text <> '')) then
					ie_tipo_pessoa_prestador_w	:= 'J';
				end if;
				
				-- FAZER INSERT NA PTU_NOTA_SERVICO - CONTAS DE INTERCAMBIO

				insert into ptu_nota_servico(	nr_sequencia,								cd_ato,												cd_cnes_prest,
								cd_especialidade,							cd_munic,											cd_pacote,
								cd_porte_anestesico,							cd_prestador,											cd_prestador_req,
								cd_procedimento,							cd_rec_prestador,										cd_ref_material_fab,
								cd_ref_material_fab_opme,						cd_servico,											cd_unimed_autorizadora,
								cd_unimed_pre_req,							cd_unimed_prestador,										det_reg_anvisa,
								ds_hora_procedimento,							ds_servico,											ds_servico_aux,
								dt_atualizacao,								dt_atualizacao_nrec,										dt_autoriz,
								dt_pgto_prestador,							dt_procedimento,										dt_solicitacao,
								hr_final,								hr_servico,											id_acres_urg_emer,
								id_aviso_item,								id_pag_forn,											ie_alto_custo,
								ie_consistente,								ie_origem_proced,										ie_pacote,
								ie_rede_propria,							ie_reembolso,											ie_tipo_data_regra,
								ie_tipo_participacao_tiss,						ie_tipo_pessoa_prestador,									ie_tipo_prestador,
								ie_tipo_tabela_tiss,							ie_via_acesso,											nm_fornecedor,
								nm_prestador,								nm_prestador_requisitante,									nm_profissional_prestador,
								nm_usuario,								nm_usuario_nrec,										nr_autorizacao,
								nr_cbo_exec,								nr_cgc_cpf,											nr_cgc_cpf_req,
								nr_cnpj_fornecedor,							nr_cons_prof_prest,										nr_cons_prof_req,
								nr_guia_tiss,								nr_linha,											nr_lote,
								nr_nota,								nr_nota_fiscal_forn,										nr_nota_numerico,
								nr_reg_anvisa,								nr_seq_agrup_item_ptu,										nr_seq_aviso_material,
								nr_seq_aviso_procedimento,						nr_seq_a500,											nr_seq_composicao,
								nr_seq_conta_mat,							nr_seq_conta_proc,										nr_seq_material,
								nr_seq_nota,								nr_seq_nota_cobr,										nr_seq_pacote,
								nr_seq_pacote_agrup,							nr_seq_pacote_mat,										nr_seq_pacote_proc,
								nr_seq_proc_partic,							nr_seq_registro,										qt_procedimento,
								sg_cons_prof_prest,							sg_cons_prof_req,										sg_uf_cons_prest,
								sg_uf_cons_req,								tec_utilizada,											tipo_rede_min,
								tp_autoriz,								tx_procedimento,										unidade_medida,
								vl_adic_co,								vl_adic_filme,											vl_adic_procedimento,
								vl_custo_operacional,							vl_filme,											vl_pago_prest,
								vl_procedimento,							nr_seq_item,											cd_item_unico,
								ie_tipo_tabela,								cd_servico_tiss,										ie_tipo_participacao,
								cd_servico_xml)		
							values (	nextval('ptu_nota_servico_seq'),						vet_tab_guia_sadt_proc_exec_w[j].cd_ato_pro,							null,
								null,									null,												vet_tab_guia_sadt_proc_exec_w[j].cd_pacote_pro,
								vet_tab_guia_sadt_proc_exec_w[j].cd_porte_anestesico_pro,		vet_tab_guia_sadt_w[i].cd_prest_dad_exe,							vet_tab_guia_sadt_w[i].cd_prest_dad_sol,
								cd_proc_conversao_w,							null,												null,
								null,									cd_servico_w,											vet_tab_guia_sadt_proc_exec_w[j].cd_uni_autorizadora_dad_aut,
								vet_tab_guia_sadt_w[i].cd_uni_prest_dad_sol,				vet_tab_guia_sadt_w[i].cd_uni_prest_dad_exe,							vet_tab_guia_sadt_proc_exec_w[j].det_registro_anvisa_opm_gen,
								vet_tab_guia_sadt_proc_exec_w[j].hr_inicial_pro,			vet_tab_guia_sadt_proc_exec_w[j].ds_servico_pro,						null,
								clock_timestamp(),								clock_timestamp(),											ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_autorizacao_dad_aut),
								null,									ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_execucao_pro),				ptu_a500_imp_pck.converte_data(vet_tab_guia_sadt_proc_exec_w[j].dt_solicitacao_dad_aut),
								vet_tab_guia_sadt_proc_exec_w[j].hr_final_pro,				null,												vet_tab_guia_sadt_proc_exec_w[J].id_acrescimo_pro,
								vet_tab_guia_sadt_proc_exec_w[j].id_avisado_item_proc,			null,												null,
								null,									ie_origem_proced_conv_w,									vet_tab_guia_sadt_proc_exec_w[j].id_pacote_pro,
								null,									null,												null,
								null,									ie_tipo_pessoa_prestador_w,									vet_tab_guia_sadt_w[i].tp_prestador_dad_exe,
								vet_tab_guia_sadt_proc_exec_w[j].tp_tabela_pro,				vet_tab_guia_sadt_proc_exec_w[j].via_acesso_pro,						vet_tab_guia_sadt_proc_exec_w[j].nm_fornecedor_materi_opm_gen,
								vet_tab_guia_sadt_w[i].nome_dad_exe,					vet_tab_guia_sadt_w[i].nome_dad_sol,								null,
								nm_usuario_p,								nm_usuario_p,											vet_tab_guia_sadt_proc_exec_w[j].nr_autorizacao_dad_aut,
								null,									coalesce(vet_tab_guia_sadt_w[i].cd_cpf_dad_exe, vet_tab_guia_sadt_w[i].cd_cnpj_dad_exe),		coalesce(vet_tab_guia_sadt_w[i].cd_cpf_dad_sol,vet_tab_guia_sadt_w[i].cd_cnpj_dad_sol),
								vet_tab_guia_sadt_proc_exec_w[j].cd_cnpj_for,				null,												vet_tab_guia_sadt_w[i].nr_conselho_dad_con_pro,
								null,									null,												somente_numero(vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui),
								vet_tab_guia_sadt_proc_exec_w[j].tp_autorizacao_dad_aut,		vet_tab_guia_sadt_proc_exec_w[j].nr_nota_fiscal_forne_opm_gen,					somente_numero(vet_tab_guia_sadt_w[i].nr_guia_tiss_prestador_dad_gui),
								vet_tab_guia_sadt_proc_exec_w[j].nr_registro_anvisa_opm_gen,		null,												nr_seq_aviso_material_w,
								nr_seq_aviso_procedimento_w,						null,												null,
								null,									null,												nr_seq_material_w,
								null,									nr_seq_nota_cobr_w,										null,
								null,									null,												null,
								null,									null,												vet_tab_guia_sadt_proc_exec_w[j].qt_cobrada_pro,	
								null,									vet_tab_guia_sadt_w[i].sg_conselho_dad_con_pro,							null,
								vet_tab_guia_sadt_w[i].uf_dad_con_pro,					vet_tab_guia_sadt_proc_exec_w[j].tc_utilizada_pro,						vet_tab_guia_sadt_w[i].tp_rede_min_dad_exe,
								vet_tab_guia_sadt_proc_exec_w[j].tp_autorizacao_dad_aut,		coalesce(vet_tab_guia_sadt_proc_exec_w[j].ft_multiplicador_servico_pro,0),				null,
								coalesce(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_co_tax,0),			coalesce(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_filme_tax,0),					coalesce(vet_tab_guia_sadt_proc_exec_w[j].tx_adm_servico_tax,0),
								coalesce(vet_tab_guia_sadt_proc_exec_w[j].vl_co_cobrado_val,0),		coalesce(vet_tab_guia_sadt_proc_exec_w[j].vl_filme_cobrado_val,0),					0,
								coalesce(vet_tab_guia_sadt_proc_exec_w[j].vl_serv_cobrado_val,0),		vet_tab_guia_sadt_proc_exec_w[j].seq_item_pro,							vet_tab_guia_sadt_proc_exec_w[j].id_item_unico_proc,
								ie_tipo_tabela_w,							vet_tab_guia_sadt_proc_exec_w[j].cd_servico_pro,						null,
								vet_tab_guia_sadt_proc_exec_w[j].cd_servico_pro)  returning nr_sequencia into nr_seq_nota_serv_w;


				select	max(nr_seq_prest_inter)
				into STRICT	nr_seq_prest_inter_w
				from	ptu_nota_cobranca
				where	nr_sequencia	= nr_seq_nota_cobr_w;

				if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
					if (ie_tipo_pessoa_prestador_w = 'J') then
						cd_cgc_prestador_w		:= vet_tab_guia_sadt_w[i].cd_cnpj_dad_exe;
						nr_cpf_prestador_w		:= null;
					elsif (ie_tipo_pessoa_prestador_w = 'F') then
						cd_cgc_prestador_w		:= null;
						nr_cpf_prestador_w		:= vet_tab_guia_sadt_w[i].cd_cpf_dad_exe;
					end if;

					nm_prestador_w	:= vet_tab_guia_sadt_w[i].nome_dad_exe;

					pls_gerar_prest_intercambio(	nr_cpf_prestador_w,			cd_cgc_prestador_w,					nm_prestador_w,
									vet_tab_guia_sadt_w[i].cnes_dad_exe,	vet_tab_guia_sadt_w[i].cd_municipio_cont_dad_exe,	nm_usuario_p,
									null, 					null,							nr_seq_prest_inter_w,
									nr_seq_prestador_w);

					if (nr_seq_prest_inter_w IS NOT NULL AND nr_seq_prest_inter_w::text <> '') then
						update	ptu_nota_cobranca
						set	nr_seq_prest_inter	= nr_seq_prest_inter_w
						where	nr_sequencia		= nr_seq_nota_cobr_w;
					end if;
				end if;
				for l in 1..vet_tab_guia_sadt_proc_eqp_w.count loop
					
					-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA SERVIcO 

					if (vet_tab_guia_sadt_proc_eqp_w[l].id = vet_tab_guia_sadt_proc_exec_w[j].id_item_unico_proc || vet_tab_guia_sadt_proc_exec_w[j].id) then
	
						ie_tipo_participacao_w	:= null;
						
						if (vet_tab_guia_sadt_proc_eqp_w[l](.tp_participacao IS NOT NULL AND .tp_participacao::text <> '')) then

							select	max(cd_ptu)
							into STRICT	ie_tipo_participacao_w
							from	pls_grau_participacao
							where	cd_tiss	= vet_tab_guia_sadt_proc_eqp_w[l].tp_participacao;
						end if;

						-- CONVERTER UF

						uf_conselho_w := null;
						uf_conselho_w := pls_obter_cd_unidade_ibge(null, vet_tab_guia_sadt_proc_eqp_w[l].uf_conselho);

						insert into ptu_nota_servico_equipe(	nr_sequencia,						nr_seq_nota_servico,						ie_tipo_participacao,
											ie_tipo_participacao_tiss,				cd_unimed_prestador,						cd_prestador,
											nm_prestador,						cd_cpf,								nr_conselho,
											sg_conselho,						uf_conselho, 							nr_cbo,
											dt_atualizacao,						nm_usuario,							dt_atualizacao_nrec,
											nm_usuario_nrec) values (
											nextval('ptu_nota_servico_equipe_seq'),			nr_seq_nota_serv_w,						ie_tipo_participacao_w,
											vet_tab_guia_sadt_proc_eqp_w[l].tp_participacao,	vet_tab_guia_sadt_proc_eqp_w[l].cd_uni_prest, 			vet_tab_guia_sadt_proc_eqp_w[l].cd_prest,
											vet_tab_guia_sadt_proc_eqp_w[l].nm_prest,		vet_tab_guia_sadt_proc_eqp_w[l].cd_cpf, 			vet_tab_guia_sadt_proc_eqp_w[l].nr_conselho,
											vet_tab_guia_sadt_proc_eqp_w[l].sg_conselho,    	uf_conselho_w,      						vet_tab_guia_sadt_proc_eqp_w[l].nr_cbo,
											clock_timestamp(),						nm_usuario_p,							clock_timestamp(),
											nm_usuario_p);

					end if;
				end loop;
			end if;
		end loop;
		
		for l in 1..vet_tab_guia_sadt_comp_w.count loop
			
			-- SO IRA FAZER O INSERT NA PTU_NOTA_COMPLEMENTO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_sadt_w[i].id = vet_tab_guia_sadt_comp_w[l].id_complemento)  then
				-- FAZER INSERT NA PTU_NOTA_COMPLEMENTO - CONTAS DE INTERCAMBIO	

				insert into ptu_nota_complemento(nr_sequencia,								dt_atualizacao,							dt_atualizacao_nrec,
								nm_usuario,								nm_usuario_nrec,						ds_complemento,
								especif_material,							ie_tipo_complemento,						nr_linha,
								nr_lote,								nr_nota,							nr_seq_nota_cobr)
						values (	nextval('ptu_nota_complemento_seq'),					clock_timestamp(),							clock_timestamp(),
								nm_usuario_p,								nm_usuario_p,							substr(vet_tab_guia_sadt_comp_w[l].nm_desc_compleme_dad_gui_com,1,500),
								null,									vet_tab_guia_sadt_comp_w[l].tp_reg_cpl_dad_gui_com,		null,
								somente_numero(vet_tab_guia_sadt_w[i].nr_lote_prestador_dad_gui),	null,								nr_seq_nota_cobr_w);
			end if;
		end loop;
	
		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '502'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;
	end loop;

	--  +++++++++++++++++++++++++++++++++++++++++++++++ INSERT DA GUIA DE INTERNACAO  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	for i in 1..vet_tab_guia_int_w.count loop
	
		-- CONVERTER DATA DO INSERT PTU_NOTA_COBRANCA	

		dt_alta_int_w						:= to_date(substr(vet_tab_guia_int_w[i].dt_fim_fat_dad_int,1,18), 'yyyy/mm/ddhh24:mi:ss');
		dt_internacao_int_w					:= to_date(substr(vet_tab_guia_int_w[i].dt_inicio_fat_dad_int,1,18), 'yyyy/mm/ddhh24:mi:ss');
		
		-- CONVERTER UF

		vet_tab_guia_int_w[i].uf_dad_con_pro			:= pls_obter_cd_unidade_ibge(null, vet_tab_guia_int_w[i].uf_dad_con_pro);
		
		-- OBTER O TP_PESSOA

		if ( vet_tab_guia_int_w[i](.cd_cnpj_dad_exe IS NOT NULL AND .cd_cnpj_dad_exe::text <> '')) then
			tp_pessoa_w	:= 'J';
		end if;
		
		-- TENTA REALIZAR O VINCULO COM A GUIA DO A520, CASO EXISTIR

		if (vet_tab_guia_int_w[i](.dt_conhecimento_dad_gui IS NOT NULL AND .dt_conhecimento_dad_gui::text <> '')) then
			select	max(cd_unimed_destino)
			into STRICT	cd_unimed_destino_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_ptu_fatura_w;
		
			-- MONTAR A CARTEIRINHA DO BENEFICIARIO

			nr_carteira_benef_w := cd_unimed_destino_w || vet_tab_guia_int_w[i].id_benef_dad_ben;

			begin
				select	max(x.nr_sequencia)
				into STRICT	nr_seq_aviso_conta_w
				from (	-- BUSCA POR PESSOA JURIDICA
					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_int_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cnpj_executante	= vet_tab_guia_int_w[i].cd_cnpj_dad_exe
					and	tp_pessoa_w		= 'J'
					and	aa.nr_lote		= vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w
					
union all

					-- BUSCA POR PESSOA FISICA

					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_int_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cpf_executante	= vet_tab_guia_int_w[i].cd_cpf_dad_exe
					and	tp_pessoa_w		= 'F'
					and	aa.nr_lote		= vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w) x;
			exception
			when others then
				nr_seq_aviso_conta_w := null;
			end;
		end if;
		
		if (vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int <> '9') then
			if (vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int = '0') then
				vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int	:= '1';
			elsif (vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int = '1') then
				vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int	:= '2';
			elsif (vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int = '2') then
				vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int	:= '3';
			else
				vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int	:= '9';
			end if;
		end if;
		
		motivo_encerram_w		:= null;
		
		-- se tiver motivo de encerramento

		if (vet_tab_guia_int_w[i](.motivo_encerramento_dad_int IS NOT NULL AND .motivo_encerramento_dad_int::text <> '')) then
			select	lpad(trim(both max(cd_ptu)),2,'0')
			into STRICT	motivo_encerram_w
			from	pls_motivo_saida
			where	lpad(trim(both cd_tiss),2,'0') = lpad(trim(both vet_tab_guia_int_w[i].motivo_encerramento_dad_int),2,'0');
		end if;

		-- FAZER INSERT NA PTU_NOTA_COBRANCA - CONTAS DE INTERCAMBIO

		insert into ptu_nota_cobranca(	nr_sequencia,												cd_cid,												cd_cid_obito,
						cd_cnes_cont_exec,											cd_excecao,											cd_munic_cont_exec,
						cd_prestador_exec,											cd_prestador_req,										cd_unimed,
						cd_unimed_prest_exec,											cd_unimed_prest_req,										cd_usuario_plano,
						dt_alta,												dt_atendimento,											dt_atualizacao,
						dt_atualizacao_nrec,											dt_conferencia_doc,										dt_conhecimento,
						dt_fim_consist_conta,											dt_fim_geracao_conta,										dt_inicio_consist_conta,
						dt_inicio_geracao_conta,										dt_internacao,											dt_protocolo,
						dt_ultima_autoriz,											id_aviso,											id_continuado,
						id_liminar,												id_nota_principal,										id_rec_proprio,
						id_rn,													ie_carater_atendimento,										ie_consistente,
						ie_doc_fisico_conf,											ie_envia_conta,											ie_necessita_doc_fisico,
						ie_paciente,												ie_pcmso,											ie_tipo_atendimento,
						ie_tipo_saida_spdat,											motivo_encerram,										nm_beneficiario,
						nm_prest_exec,												nm_prest_req,											nm_usuario,
						nm_usuario_doc_fisico,											nm_usuario_nrec,										nr_cbo_req,
						nr_cnpj_cpf,												nr_cnpj_cpf_req,										nr_cons_prof_req,
						nr_fatura_glosada,											nr_guia_principal,										nr_guia_principal_numerico,
						nr_guia_tiss_operadora,											nr_guia_tiss_prestador,										nr_guia_tiss_principal,
						nr_linha,												nr_lote,											nr_lote_glosado,
						nr_lote_prest,												nr_ndr_glosada,											nr_nota,
						nr_nota_glosada,											nr_nota_numerico,										nr_seq_aviso_conta,
						nr_seq_conta,												nr_seq_fatura,											nr_seq_prest_inter,
						nr_seq_serv_pre_pagto,											nr_ver_tiss,											pr_taxa,
						sg_cons_prof_req,											sg_uf_cons_req,											tipo_rede_min,
						tp_consulta,												tp_ind_acidente,										tp_nota,
						tp_pessoa,												tp_prest_exec,											ie_glosa_total,
						nr_guia_glosada,											cd_cid_2,
						cd_cid_3,												cd_cid_4, 											cd_motivo_encerramento_tiss,
						nr_guia_oper_glosada)					
					values (	nextval('ptu_nota_cobranca_seq'),										vet_tab_guia_int_w[i].CID_dad_int,								null,
						vet_tab_guia_int_w[i].CNES_prestador_dad_exe,								vet_tab_guia_int_w[i].cd_excecao_dad_gui,							vet_tab_guia_int_w[i].cd_municipio_cont_dad_exe,
						vet_tab_guia_int_w[i].cd_prest_dad_exe,									vet_tab_guia_int_w[i].cd_prest_dad_sol,								vet_tab_guia_int_w[i].cd_unimed_dad_ben,
						vet_tab_guia_int_w[i].cd_uni_prest_dad_exe,								vet_tab_guia_int_w[i].cd_uni_prest_dad_sol,							vet_tab_guia_int_w[i].id_benef_dad_ben,
						dt_alta_int_w,												to_date(substr(vet_tab_guia_int_w[i].dt_atendimento_dad_gui,1,18), 'yyyy/mm/ddhh24:mi:ss'),	clock_timestamp(),
						clock_timestamp(),												null,												ptu_a500_imp_pck.converte_data(vet_tab_guia_int_w[i].dt_conhecimento_dad_gui),
						null,													null,												null,
						null,													dt_internacao_int_w,										ptu_a500_imp_pck.converte_data(vet_tab_guia_int_w[i].dt_protocolo_dad_gui),
						ptu_a500_imp_pck.converte_data(vet_tab_guia_int_w[i].dt_ultima_autorizacao_dad_gui),					vet_tab_guia_int_w[i].id_aviso_dad_gui,								vet_tab_guia_int_w[i].id_continuado_dad_gui,
						vet_tab_guia_int_w[i].id_liminar_dad_gui,								null,												vet_tab_guia_int_w[i].id_rec_proprio_dad_exe,
						vet_tab_guia_int_w[i].id_rn_dad_ben,									vet_tab_guia_int_w[i].carater_atendimento_dad_int,						null,
						null,													null,												null,
						vet_tab_guia_int_w[i].tp_paciente_dad_ben,								null,												null,
						null,													motivo_encerram_w,										vet_tab_guia_int_w[i].nm_benef_dad_ben,
						vet_tab_guia_int_w[i].nome_prestador_dad_exe,								vet_tab_guia_int_w[i].nome_dad_sol,								nm_usuario_p,
						null,													nm_usuario_p,											vet_tab_guia_int_w[i].cbo_dad_sol,
						vet_tab_guia_int_w[i].cd_cnpj_dad_exe,									coalesce(vet_tab_guia_int_w[i].cd_cnpj_dad_sol, vet_tab_guia_int_w[i].cd_cpf_dad_sol),		vet_tab_guia_int_w[i].nr_conselho_dad_con_pro,
						vet_tab_guia_int_w[i].nr_doc1_glosado_rea_glo,								vet_tab_guia_int_w[i].nr_guia_tiss_principal_dad_gui,						somente_numero(vet_tab_guia_int_w[i].nr_guia_tiss_principal_dad_gui),
						vet_tab_guia_int_w[i].nr_guia_tiss_operadora_dad_gui,							vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui,						vet_tab_guia_int_w[i].nr_guia_tiss_principal_dad_gui,
						null,													somente_numero(vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui),				somente_numero(coalesce(vet_tab_guia_int_w[i].nr_lote_rea_glo_txt,vet_tab_guia_int_w[i].nr_lote_prestador_xml_rea_glo)),
						vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui,							vet_tab_guia_int_w[i].nr_doc2_glosado_rea_glo,							vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui,
						coalesce(vet_tab_guia_int_w[i].nr_nota_rea_glo_txt,vet_tab_guia_int_w[i].nr_guia_glosada_xml_rea_glo),	somente_numero(vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui),				nr_seq_aviso_conta_w,
						null,													nr_seq_ptu_fatura_w,										null,
						null,													vet_tab_guia_int_w[i].nr_ver_tiss_dad_gui,							null,
						vet_tab_guia_int_w[i].sg_conselho_dad_con_pro,								vet_tab_guia_int_w[i].uf_dad_con_pro,								vet_tab_guia_int_w[i].tp_rede_min_dad_exe,
						null,													vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int,						3,
						tp_pessoa_w,												vet_tab_guia_int_w[i].tp_prestador_dad_exe,							vet_tab_guia_int_w[i].id_glosa_total_dad_gui,
						vet_tab_guia_int_w[i].nr_guia_glosada_xml_rea_glo,							vet_tab_guia_int_w[i].CID_dad_int_2,
						vet_tab_guia_int_w[i].CID_dad_int_3,									vet_tab_guia_int_w[i].CID_dad_int_4, 								vet_tab_guia_int_w[i].motivo_encerramento_dad_int,
						vet_tab_guia_int_w[i].nr_guia_tiss_oper_glo_rea_glo) returning nr_sequencia into nr_seq_nota_cobr_w;

		-- PTU_NOTA_SERVICO - INTERNACAO

		for j in 1..vet_tab_guia_int_proc_exec_w.count loop
			-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_int_proc_exec_w[j].id = vet_tab_guia_int_w[i].id) then
			
				nr_seq_aviso_material_w		:= null;
				nr_seq_aviso_procedimento_w	:= null;
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				ie_tipo_participacao_w		:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;

				-- CONVERSOES

				vet_tab_guia_int_proc_exec_w[j].qt_cobrada_pro			:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].qt_cobrada_pro, ',','.'), '99999.9999');
				vet_tab_guia_int_proc_exec_w[j].ft_multiplicador_servico_pro	:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].ft_multiplicador_servico_pro, ',','.'), '99.99');
				vet_tab_guia_int_proc_exec_w[j].tx_adm_servico_tax		:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].tx_adm_servico_tax, ',','.'), '999999999999.99');
				vet_tab_guia_int_proc_exec_w[j].vl_co_cobrado_val		:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].vl_co_cobrado_val, ',','.'), '999999999999.99');
				vet_tab_guia_int_proc_exec_w[j].vl_filme_cobrado_val		:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].vl_filme_cobrado_val, ',','.'), '999999999999.99');
				vet_tab_guia_int_proc_exec_w[j].vl_serv_cobrado_val		:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].vl_serv_cobrado_val, ',','.'), '999999999999.99');
				vet_tab_guia_int_proc_exec_w[j].tx_adm_co_tax			:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].tx_adm_co_tax, ',','.'), '999999999999.99');
				vet_tab_guia_int_proc_exec_w[j].tx_adm_filme_tax		:= to_number(replace(vet_tab_guia_int_proc_exec_w[j].tx_adm_filme_tax, ',','.'), '999999999999.99');
				
				--CONVERTER TABELA E CD_SERVICO

				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_guia_int_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_int_proc_exec_w[j].cd_servico_pro, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_guia_int_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_int_proc_exec_w[j].cd_servico_pro, null);
				
				if (ie_tipo_tabela_w = 4) then
					ie_pacote_intercambio_w := 'S';
				else
					ie_pacote_intercambio_w := 'N';
				end if;
				
				if (vet_tab_guia_int_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_guia_int_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_guia_int_w[i].id_benef_dad_ben;
				end if;
				
				-- PEGAR O PROC CONVERSAO

				if (ie_tipo_tabela_w in (2,3,5,6)) then
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then		
						nr_seq_material_w := cd_servico_w;

					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						
						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_servico_w, 'O', ie_situacao_material_w, vet_tab_guia_int_w[i].nr_ver_tiss_dad_gui );
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
						
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then			
						nr_seq_material_w := null;
						
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_execucao_pro);
						end if;
						
						pls_obter_mat_a900_vigente( nr_seq_material_w, dt_ref_conv_mat_unimed_w, cd_servico_w, vet_tab_guia_int_w[i].nr_ver_tiss_dad_gui );
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;
					
					-- VERIFICAR SE TEM REGRA DE CONVERSAO

					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
					
						pls_obter_proced_conversao(	null,			null,			null,
										cd_estabelecimento_p,	1,			null,
										3,			'R',			nr_seq_contrato_w,
										nr_seq_intercambio_w,	null,			cd_mat_number_inter_w,
										ie_tipo_intercambio_w,	cd_proc_conversao_w,	ie_origem_proced_conv_w,
										nr_seq_regra_conv_w,	ie_somente_codigo_w,	clock_timestamp(),
										null,			null,			null, 
										'N', ie_priorizar_conv_pct_int_w);
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_execucao_pro), 
										'R', 
										'A', 
										null, 
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;		

					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;

					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						-- A900

						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', vet_tab_guia_int_w[i].nr_ver_tiss_dad_gui);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', vet_tab_guia_int_w[i].nr_ver_tiss_dad_gui);
						end if;	
					end if;
										
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;
				else
					
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;
					
					--A ORIGEM DO PROCEDIMENTO E BUSCADO POR REGRA EXISTENTE NO CADASTRO DE REGRAS / PROCEDIMENTOS/ REGRA ORIGEM.

					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null,
									cd_estabelecimento_p, 1, null,
									3, 'R', nr_seq_contrato_w,
									nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
									nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
									null, null, null, 
									ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);

					
					-- OBTER A ORIGEM PADRAO PARA OS ITENS CONFORME A REGRA.

					ie_origem_proced_padrao_w := pls_obter_origem_proced(cd_estabelecimento_p, null, 'R', ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_execucao_pro), null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						--JJUNG OS 483853 - 02/10/2012 - ADICIONADO RESTRICAO PARA DATA DE VIGENCIA DAS REGRAS CADASTRADAS.

						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					
					--CRIADO TRATAMENTO PARA ATENDER AS OS 575917 QUE SOLICITA QUE SEJA BUSCADO A ULTIMA ORIGEM VALIDA E A OS 644869 ONDE INDICA QUE DEVE SER RESPEITADA A ORIGEM PADRAO DO SISTEMA	

					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w
						and	ie_situacao = 'A';
						
						-- SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_situacao = 'A';	
							
							-- SE NAO ENCONTRAR A ORIGEM EM PROCEDIMENTOS ATIVOS, BUSCA EM PROCEDIMENTOS QUE NAO ESTIVEREM ATIVOS.

							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;	
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						--OS667827

						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED OS 644869 CONFORME SOLICITADO FOI REALIZADO TRATAMENTO PARA CASO NAO 

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w );	
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento		= cd_proc_conversao_w
					and	ie_origem_proced	= ie_origem_proced_conv_w;
					
					-- TEM QUE DEIXAR O ITEM COMO NAO ENCONTRADO

					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w := null;
						ie_origem_proced_conv_w := null;
					end if;
				end if;
					
				-- OBTER VINCULO COM O A520

				if (nr_seq_aviso_conta_w IS NOT NULL AND nr_seq_aviso_conta_w::text <> '') and (vet_tab_guia_int_proc_exec_w[j].id_avisado_pro = 'S') then
					-- OS 1882669

					if (ie_tipo_tabela_w not in (0,1,4)) then
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_material_w
						from    ptu_aviso_material
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_mat_envio            = cd_servico_w;
					else
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_procedimento_w
						from    ptu_aviso_procedimento
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_proc_envio           = cd_servico_w;
					end if;                	
				end if;

				-- OBTER O IE_TIPO_PESSOA_PRESTADOR DA PTU_NOTA_SERVICO

				if (vet_tab_guia_int_w[i](.cd_cpf_dad_exe IS NOT NULL AND .cd_cpf_dad_exe::text <> '')) then
					ie_tipo_pessoa_prestador_w	:= 'F';
				elsif (vet_tab_guia_int_w[i](.cd_cnpj_dad_exe IS NOT NULL AND .cd_cnpj_dad_exe::text <> '')) then
					ie_tipo_pessoa_prestador_w	:= 'J';
				end if;
				
				
				-- FAZER INSERT NA PTU_NOTA_SERVICO - CONTAS DE INTERCAMBIO

				insert into ptu_nota_servico(	nr_sequencia,									cd_ato,											cd_cnes_prest,
								cd_especialidade,								cd_munic,										cd_pacote,
								cd_porte_anestesico,								cd_prestador,										cd_prestador_req,
								cd_procedimento,								cd_rec_prestador,									cd_ref_material_fab,
								cd_ref_material_fab_opme,							cd_servico,										cd_unimed_autorizadora,
								cd_unimed_pre_req,								cd_unimed_prestador,									det_reg_anvisa,
								ds_hora_procedimento,								ds_servico,										ds_servico_aux,
								dt_atualizacao,									dt_atualizacao_nrec,									dt_autoriz,
								dt_pgto_prestador,								dt_procedimento,									dt_solicitacao,
								hr_final,									hr_servico,										id_acres_urg_emer,
								id_aviso_item,									id_pag_forn,										ie_alto_custo,
								ie_consistente,									ie_origem_proced,									ie_pacote,
								ie_rede_propria,								ie_reembolso,										ie_tipo_data_regra,
								ie_tipo_participacao_tiss,							ie_tipo_pessoa_prestador,								ie_tipo_prestador,
								ie_tipo_tabela_tiss,								ie_via_acesso,										nm_fornecedor,
								nm_prestador,									nm_prestador_requisitante,								nm_profissional_prestador,
								nm_usuario,									nm_usuario_nrec,									nr_autorizacao,
								nr_cbo_exec,									nr_cgc_cpf,										nr_cgc_cpf_req,
								nr_cnpj_fornecedor,								nr_cons_prof_prest,									nr_cons_prof_req,
								nr_guia_tiss,									nr_linha,										nr_lote,
								nr_nota,									nr_nota_fiscal_forn,									nr_nota_numerico,
								nr_reg_anvisa,									nr_seq_agrup_item_ptu,									nr_seq_aviso_material,
								nr_seq_aviso_procedimento,							nr_seq_a500,										nr_seq_composicao,
								nr_seq_conta_mat,								nr_seq_conta_proc,									nr_seq_material,
								nr_seq_nota,									nr_seq_nota_cobr,									nr_seq_pacote,
								nr_seq_pacote_agrup,								nr_seq_pacote_mat,									nr_seq_pacote_proc,
								nr_seq_proc_partic,								nr_seq_registro,									qt_procedimento,
								sg_cons_prof_prest,								sg_cons_prof_req,									sg_uf_cons_prest,
								sg_uf_cons_req,									tec_utilizada,										tipo_rede_min,
								tp_autoriz,									tx_procedimento,									unidade_medida,
								vl_adic_co,									vl_adic_filme,										vl_adic_procedimento,
								vl_custo_operacional,								vl_filme,										vl_pago_prest,
								vl_procedimento,								nr_seq_item,										cd_item_unico,
								ie_tipo_tabela,									cd_servico_tiss,									ie_tipo_participacao,
								cd_servico_xml)
							values (	nextval('ptu_nota_servico_seq'),							vet_tab_guia_int_proc_exec_w[j].cd_ato_equ_pro,						vet_tab_guia_int_w[i].CNES_prestador_dad_exe,
								null,										null,											vet_tab_guia_int_proc_exec_w[j].cd_pacote_pro,
								vet_tab_guia_int_proc_exec_w[j].cd_porte_anestesico_pro,			vet_tab_guia_int_w[i].cd_prest_dad_exe,							vet_tab_guia_int_w[i].cd_prest_dad_sol,
								cd_proc_conversao_w,								null,											null,
								null,										cd_servico_w,										vet_tab_guia_int_proc_exec_w[j].cd_uni_autorizadora_dad_aut,
								vet_tab_guia_int_w[i].cd_uni_prest_dad_sol,					vet_tab_guia_int_w[i].cd_uni_prest_dad_exe,						vet_tab_guia_int_proc_exec_w[j].det_registro_anvisa_opm_gen,
								vet_tab_guia_int_proc_exec_w[j].hr_inicial_pro,					vet_tab_guia_int_proc_exec_w[j].ds_servico_pro,						null,
								clock_timestamp(),									clock_timestamp(),										ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_autorizacao_dad_aut),
								ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_pago_prestador_pag_pre),	ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_execucao_pro),				ptu_a500_imp_pck.converte_data(vet_tab_guia_int_proc_exec_w[j].dt_solicitacao_dad_aut),
								vet_tab_guia_int_proc_exec_w[j].hr_final_pro,					null,											vet_tab_guia_int_proc_exec_w[J].id_acrescimo_pro,
								vet_tab_guia_int_proc_exec_w[j].id_avisado_item_proc,				vet_tab_guia_int_proc_exec_w[j].id_pago_forne_opm_gen,					null,
								null,										ie_origem_proced_conv_w,								vet_tab_guia_int_proc_exec_w[j].id_pacote_pro,
								null,										null,											null,
								null,										ie_tipo_pessoa_prestador_w,								vet_tab_guia_int_w[i].tp_prestador_dad_exe,
								vet_tab_guia_int_proc_exec_w[j].tp_tabela_pro,					vet_tab_guia_int_proc_exec_w[j].via_acesso_pro,						vet_tab_guia_int_proc_exec_w[j].nm_fornecedor_materi_opm_gen,
								vet_tab_guia_int_w[i].nome_prestador_dad_exe,					vet_tab_guia_int_w[i].nome_dad_sol,							null,
								nm_usuario_p,									nm_usuario_p,										vet_tab_guia_int_proc_exec_w[j].nr_autorizacao_dad_aut,
								null,										coalesce(vet_tab_guia_int_w[i].cd_cpf_dad_exe,vet_tab_guia_int_w[i].cd_cnpj_dad_exe),	coalesce(vet_tab_guia_int_w[i].cd_cpf_dad_sol, vet_tab_guia_int_w[i].cd_cnpj_dad_sol),
								vet_tab_guia_int_proc_exec_w[j].cd_cnpj_for,		 			null,											vet_tab_guia_int_w[i].nr_conselho_dad_con_pro,
								null,										null,											somente_numero(vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui),
								vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui,				vet_tab_guia_int_proc_exec_w[j].nr_nota_fiscal_forne_opm_gen,				somente_numero(vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui),
								vet_tab_guia_int_proc_exec_w[j].nr_registro_anvisa_opm_gen,			null,											nr_seq_aviso_material_w,
								nr_seq_aviso_procedimento_w,							null,											null,
								null,										null,											nr_seq_material_w,
								null,										nr_seq_nota_cobr_w,									null,
								null,										null,											null,
								null,										null,											vet_tab_guia_int_proc_exec_w[j].qt_cobrada_pro,
								null,										vet_tab_guia_int_w[i].sg_conselho_dad_con_pro,						null,
								vet_tab_guia_int_w[i].uf_dad_con_pro,						vet_tab_guia_int_proc_exec_w[j].tc_utilizada_pro,					vet_tab_guia_int_w[i].tp_rede_min_dad_exe,
								vet_tab_guia_int_proc_exec_w[j].tp_autorizacao_dad_aut,				coalesce(vet_tab_guia_int_proc_exec_w[j].ft_multiplicador_servico_pro,0),			null,
								coalesce(vet_tab_guia_int_proc_exec_w[j].tx_adm_co_tax,0),				coalesce(vet_tab_guia_int_proc_exec_w[j].tx_adm_filme_tax,0),				coalesce(vet_tab_guia_int_proc_exec_w[j].tx_adm_servico_tax,0),
								coalesce(vet_tab_guia_int_proc_exec_w[j].vl_co_cobrado_val,0),			coalesce(vet_tab_guia_int_proc_exec_w[j].vl_filme_cobrado_val,0),				0,
								coalesce(vet_tab_guia_int_proc_exec_w[j].vl_serv_cobrado_val,0),			vet_tab_guia_int_proc_exec_w[j].seq_item_pro,						vet_tab_guia_int_proc_exec_w[j].id_item_unico_proc,
								ie_tipo_tabela_w,								vet_tab_guia_int_proc_exec_w[j].cd_servico_pro,						null, 
								vet_tab_guia_int_proc_exec_w[j].cd_servico_pro) returning nr_sequencia into nr_seq_nota_serv_w;
								
				select	max(nr_seq_prest_inter)
				into STRICT	nr_seq_prest_inter_w
				from	ptu_nota_cobranca
				where	nr_sequencia		= nr_seq_nota_cobr_w;
				
				if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
					if (ie_tipo_pessoa_prestador_w = 'J') then
						cd_cgc_prestador_w		:= vet_tab_guia_int_w[i].cd_cnpj_dad_exe;
						nr_cpf_prestador_w		:= null;
					elsif (ie_tipo_pessoa_prestador_w = 'F') then
						cd_cgc_prestador_w		:= null;
						nr_cpf_prestador_w		:= vet_tab_guia_int_w[i].cd_cpf_dad_exe;
					end if;
					
					nm_prestador_w	:= vet_tab_guia_int_w[i].nome_prestador_dad_exe;
					
					pls_gerar_prest_intercambio(	nr_cpf_prestador_w,				cd_cgc_prestador_w,					nm_prestador_w,
									vet_tab_guia_int_w[i].CNES_prestador_dad_exe,	vet_tab_guia_int_w[i].cd_municipio_cont_dad_exe,	nm_usuario_p,
									null, 						null,							nr_seq_prest_inter_w,
									nr_seq_prestador_w);

					if (nr_seq_prest_inter_w IS NOT NULL AND nr_seq_prest_inter_w::text <> '') then
						update	ptu_nota_cobranca
						set	nr_seq_prest_inter	= nr_seq_prest_inter_w
						where	nr_sequencia		= nr_seq_nota_cobr_w;
					end if;
				end if;

				for l in 1..vet_tab_guia_int_proc_eqp_w.count loop

				-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA SERVIcO 

					if (vet_tab_guia_int_proc_eqp_w[l].id = vet_tab_guia_int_proc_exec_w[j].id_item_unico_proc || vet_tab_guia_int_proc_exec_w[j].id) then

						ie_tipo_participacao_w	:= null;
						
						if (vet_tab_guia_int_proc_eqp_w[l](.tp_participacao IS NOT NULL AND .tp_participacao::text <> '')) then
							select	max(cd_ptu)
							into STRICT	ie_tipo_participacao_w
							from	pls_grau_participacao
							where	cd_tiss	= vet_tab_guia_int_proc_eqp_w[l].tp_participacao;
						end if;

					-- CONVERTER UF

						uf_conselho_w := null;
						uf_conselho_w  := pls_obter_cd_unidade_ibge(null, vet_tab_guia_int_proc_eqp_w[l].uf_conselho);

						insert into ptu_nota_servico_equipe(	nr_sequencia,						nr_seq_nota_servico,				ie_tipo_participacao,
											ie_tipo_participacao_tiss,				cd_unimed_prestador,				cd_prestador,
											nm_prestador,						cd_cpf,						nr_conselho,
											sg_conselho,						uf_conselho, 					nr_cbo,
											dt_atualizacao,						nm_usuario,					dt_atualizacao_nrec,
											nm_usuario_nrec) values (	nextval('ptu_nota_servico_equipe_seq'),			nr_seq_nota_serv_w,				ie_tipo_participacao_w,
											vet_tab_guia_int_proc_eqp_w[l].tp_participacao, 	vet_tab_guia_int_proc_eqp_w[l].cd_uni_prest, 	vet_tab_guia_int_proc_eqp_w[l].cd_prest,
											vet_tab_guia_int_proc_eqp_w[l].nm_prest,		vet_tab_guia_int_proc_eqp_w[l].cd_cpf, 		vet_tab_guia_int_proc_eqp_w[l].nr_conselho,
											vet_tab_guia_int_proc_eqp_w[l].sg_conselho,     	uf_conselho_w,   				vet_tab_guia_int_proc_eqp_w[l].nr_cbo,
											clock_timestamp(),						nm_usuario_p,					clock_timestamp(),
											nm_usuario_p);
					end if;
				end loop;

			end if;
		end loop;

		-- PTU_NOTA_COMPLEMENTO  - INTERNACAO

		for l in 1..ver_tab_guia_int_complemento_w.count loop

			-- SO IRA FAZER O INSERT NA PTU_NOTA_COMPLEMENTO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_int_w[i].id = ver_tab_guia_int_complemento_w[l].id_complemento)  then
			
				-- FAZER INSERT NA PTU_NOTA_COMPLEMENTO - CONTAS DE INTERCAMBIO	

				insert into ptu_nota_complemento(nr_sequencia,								dt_atualizacao,							dt_atualizacao_nrec,
								nm_usuario,								nm_usuario_nrec,						ds_complemento,
								especif_material,							ie_tipo_complemento,						nr_linha,
								nr_lote,								nr_nota,							nr_seq_nota_cobr)
						values (	nextval('ptu_nota_complemento_seq'),					clock_timestamp(),							clock_timestamp(),
								nm_usuario_p,								nm_usuario_p,							substr(ver_tab_guia_int_complemento_w[l].nm_desc_compleme_dad_gui_com,1,500),
								null,									ver_tab_guia_int_complemento_w[l].tp_reg_cpl_dad_gui_com,	null,
								somente_numero(vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui),	null,								nr_seq_nota_cobr_w);
			end if;
		end loop;
		
		-- CONVERSOES

		vet_tab_guia_int_w[i].ft_multiplicador_amb_dad_int	:= to_number(replace(vet_tab_guia_int_w[i].ft_multiplicador_amb_dad_int, ',','.'), '9999.99');
		
		-- CONVERTER UF

		vet_tab_guia_int_w[i].cd_uf_coren_dad_aud		:= pls_obter_cd_unidade_ibge(null, vet_tab_guia_int_w[i].cd_uf_coren_dad_aud);
		vet_tab_guia_int_w[i].cd_uf_crm_dad_aud			:= pls_obter_cd_unidade_ibge(null, vet_tab_guia_int_w[i].cd_uf_crm_dad_aud);
		
		-- CONVERTER DATAS

		vet_tab_guia_int_w[i].dt_inicio_fat_dad_int		:= to_char(to_date(substr(vet_tab_guia_int_w[i].dt_inicio_fat_dad_int,1,18), 'yyyy/mm/ddhh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
		vet_tab_guia_int_w[i].dt_fim_fat_dad_int		:= to_char(to_date(substr(vet_tab_guia_int_w[i].dt_fim_fat_dad_int,1,18), 'yyyy/mm/ddhh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
		
		-- FAZER INSERT NA PTU_NOTA_HOSPITALAR - CONTAS DE INTERCAMBIO

		-- REVISAR OS CAMPOS QUE ESTAO COMO NULL	

		insert into ptu_nota_hospitalar(	nr_sequencia,						cd_cgc_hospital,					cd_cid_obito,
							cd_hospital,						cd_motivo_saida,					cd_uf_coren,
							cd_uf_crm,						cd_unimed_hospital,					dt_alta,
							dt_atualizacao,						dt_atualizacao_nrec,					dt_internacao,
							ie_faturamento,						ie_ind_acidente,					ie_int_aborto,
							ie_int_baixo_peso,					ie_int_gestacao,					ie_int_neonatal,
							ie_int_parto_cesarea,					ie_int_parto_normal,					ie_int_puerperio,
							ie_int_recem_nascido,					ie_int_transtorno,					ie_obito_mulher,
							ie_tipo_acomodacao,					ie_tipo_internacao,					nm_enfer_auditor,
							nm_hospital,						nm_medico_auditor,					nm_usuario,
							nm_usuario_nrec,					nr_coren_auditor,					nr_crm_auditor,
							nr_declara_obito,					nr_linha,						nr_lote,
							nr_nota,						nr_seq_apres,						nr_seq_nota_cobr,
							cd_cnes,						qt_nasc_mortos,						qt_nasc_vivos,
							qt_nasc_vivos_pre,					qt_obito_precoce,					qt_obito_tardio,
							reg_internacao,						tx_mult_amb)			
					values (	nextval('ptu_nota_hospitalar_seq'),			null,							null,
							null,							null,							vet_tab_guia_int_w[i].cd_uf_coren_dad_aud,
							vet_tab_guia_int_w[i].cd_uf_crm_dad_aud,		null,							to_date(vet_tab_guia_int_w[i].dt_fim_fat_dad_int,'dd/mm/yyyyhh24:mi:ss'),
							clock_timestamp(),						clock_timestamp(),						to_date(vet_tab_guia_int_w[i].dt_inicio_fat_dad_int,'dd/mm/yyyyhh24:mi:ss'),
							vet_tab_guia_int_w[i].tp_fat_dad_int,			vet_tab_guia_int_w[i].tp_indicador_acidente_dad_int,	null,
							null,							null,							null,
							null,							null,							null,
							null,							null,							null,
							vet_tab_guia_int_w[i].tp_acomodacao_dad_int,		vet_tab_guia_int_w[i].tp_internacao_dad_int,		vet_tab_guia_int_w[i].nm_enfer_auditor_dad_aud,
							null,							vet_tab_guia_int_w[i].nm_medico_auditor_dad_aud,	nm_usuario_p,
							nm_usuario_p,						vet_tab_guia_int_w[i].nr_coren_auditor_dad_aud,		vet_tab_guia_int_w[i].nr_crm_auditor_dad_aud,
							null,							null,							somente_numero(vet_tab_guia_int_w[i].nr_lote_prestador_dad_gui),
							vet_tab_guia_int_w[i].nr_guia_tiss_prestador_dad_gui,	null,							nr_seq_nota_cobr_w,
							null,							null,							null,
							null,							null,							null,
							vet_tab_guia_int_w[i].rg_internacao_dad_int,		vet_tab_guia_int_w[i].ft_multiplicador_amb_dad_int)  returning nr_sequencia into nr_seq_nota_hosp_w;
							
		

			-- PTU_NOTA_HOSPITALAR / DECLARACOES

			for l in 1..ver_tab_guia_compl_hosp_w.count loop

				-- SO IRA FAZER O INSERT NA PTU_NOTA_HOSP_COMPL SE FOR DA MESMA NOTA COBRANCA 

				if (vet_tab_guia_int_w[i].id = ver_tab_guia_compl_hosp_w[l].id)  then

					-- FAZER INSERT NA PTU_NOTA_COMPLEMENTO - CONTAS DE INTERCAMBIO	

					insert into ptu_nota_hosp_compl(	nr_sequencia,						nr_seq_nota_hosp,	dt_atualizacao,		nm_usuario,
										dt_atualizacao_nrec,					nm_usuario_nrec,	nr_declara_vivo,	cd_cid_obito,
										nr_declara_obito,					nr_linha,		ie_recem_nascido) 
					values (				nextval('ptu_nota_hosp_compl_seq'),			nr_seq_nota_hosp_w,	clock_timestamp(),						nm_usuario_p,
										clock_timestamp(),						nm_usuario_p,		ver_tab_guia_compl_hosp_w[l].ds_declaracao_nascido, 	ver_tab_guia_compl_hosp_w[l].cd_cid_obito,
										ver_tab_guia_compl_hosp_w[l].ds_declaracao_obito,l,	ver_tab_guia_compl_hosp_w[l].ie_recem_nascido);

				end if;
			end loop;


		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '502'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;	
	end loop;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INSERT DA GUIA DE HONORARIOS  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	for i in 1..vet_tab_guia_honorario_w.count loop

		-- OBTER O TP_PESSOA

		if (vet_tab_guia_honorario_w[i](.cd_cpf_dad_exe IS NOT NULL AND .cd_cpf_dad_exe::text <> '')) then
			tp_pessoa_w	:= 'F';
		elsif (vet_tab_guia_honorario_w[i](.cd_cnpj_dad_exe IS NOT NULL AND .cd_cnpj_dad_exe::text <> '')) then
			tp_pessoa_w	:= 'J';
		end if;
		
		-- TENTA REALIZAR O VINCULO COM A GUIA DO A520, CASO EXISTIR

		if ( vet_tab_guia_honorario_w[i](.dt_conhecimento_dad_gui IS NOT NULL AND .dt_conhecimento_dad_gui::text <> '')) then
			select	max(cd_unimed_destino)
			into STRICT	cd_unimed_destino_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_ptu_fatura_w;
		
			-- MONTAR A CARTEIRINHA DO BENEFICIARIO

			nr_carteira_benef_w := cd_unimed_destino_w || vet_tab_guia_honorario_w[i].id_benef_dad_ben;
		
			begin
				select	max(x.nr_sequencia)
				into STRICT	nr_seq_aviso_conta_w
				from (	-- BUSCA POR PESSOA JURIDICA
					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_honorario_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cnpj_executante	= vet_tab_guia_honorario_w[i].cd_cnpj_dad_exe
					and	tp_pessoa_w		= 'J'
					and	aa.nr_lote		= vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w
					
union all

					-- BUSCA POR PESSOA FISICA

					SELECT	ac.nr_sequencia
					from	ptu_aviso_arquivo	aa,
						ptu_aviso_protocolo	ap,
						ptu_aviso_conta		ac
					where	aa.nr_sequencia		= ap.nr_seq_arquivo
					and	ap.nr_sequencia		= ac.nr_seq_aviso_protocolo
					and	aa.cd_unimed_origem	= vet_tab_cabecalho_w[i].cd_uni_origem_cab
					and	aa.dt_transacao		= ptu_a500_imp_pck.converte_data(vet_tab_guia_honorario_w[i].dt_conhecimento_dad_gui)
					and	ac.cd_cpf_executante	= vet_tab_guia_honorario_w[i].cd_cpf_dad_exe
					and	tp_pessoa_w		= 'F'
					and	aa.nr_lote		= vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui
					and	ac.nr_guia_prestador	= vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui
					and	ac.nr_carteira_benef	= nr_carteira_benef_w) x;
			exception
			when others then
				nr_seq_aviso_conta_w := null;
			end;				
		end if;

		-- FAZER INSERT NA PTU_NOTA_COBRANCA - CONTAS DE INTERCAMBIO

		insert into ptu_nota_cobranca(	nr_sequencia,													cd_cid,										cd_cid_obito,
						cd_cnes_cont_exec,												cd_excecao,									cd_munic_cont_exec,
						cd_prestador_exec,												cd_prestador_req,								cd_unimed,
						cd_unimed_prest_exec,												cd_unimed_prest_req,								cd_usuario_plano,
						dt_alta,													dt_atendimento,									dt_atualizacao,
						dt_atualizacao_nrec,												dt_conferencia_doc,								dt_conhecimento,
						dt_fim_consist_conta,												dt_fim_geracao_conta,								dt_inicio_consist_conta,
						dt_inicio_geracao_conta,											dt_internacao,									dt_protocolo,
						dt_ultima_autoriz,												id_aviso,									id_continuado,
						id_liminar,													id_nota_principal,								id_rec_proprio,
						id_rn,														ie_carater_atendimento,								ie_consistente,
						ie_doc_fisico_conf,												ie_envia_conta,									ie_necessita_doc_fisico,
						ie_paciente,													ie_pcmso,									ie_tipo_atendimento,
						ie_tipo_saida_spdat,												motivo_encerram,								nm_beneficiario,
						nm_prest_exec,													nm_prest_req,									nm_usuario,
						nm_usuario_doc_fisico,												nm_usuario_nrec,								nr_cbo_req,
						nr_cnpj_cpf,													nr_cnpj_cpf_req,								nr_cons_prof_req,
						nr_fatura_glosada,												nr_guia_principal,								nr_guia_principal_numerico,
						nr_guia_tiss_operadora,												nr_guia_tiss_prestador,								nr_guia_tiss_principal,
						nr_linha,													nr_lote,									nr_lote_glosado,
						nr_lote_prest,													nr_ndr_glosada,									nr_nota,
						nr_nota_glosada,												nr_nota_numerico,								nr_seq_aviso_conta,
						nr_seq_conta,													nr_seq_fatura,									nr_seq_prest_inter,
						nr_seq_serv_pre_pagto,												nr_ver_tiss,									pr_taxa,
						sg_cons_prof_req,												sg_uf_cons_req,									tipo_rede_min,
						tp_consulta,													tp_ind_acidente,								tp_nota,
						tp_pessoa,													tp_prest_exec,									ie_glosa_total,
						nr_guia_glosada,												nr_guia_oper_glosada)
					values (	nextval('ptu_nota_cobranca_seq'),											null,										null,
						vet_tab_guia_honorario_w[i].CNES_prestador_dad_exe,								null,										vet_tab_guia_honorario_w[i].cd_municipio_cont_dad_exe,
						vet_tab_guia_honorario_w[i].cd_prest_dad_exe,									null,										vet_tab_guia_honorario_w[i].cd_unimed_dad_ben,
						vet_tab_guia_honorario_w[i].cd_uni_prest_dad_exe,								null,										vet_tab_guia_honorario_w[i].id_benef_dad_ben,
						null,														to_date(substr(vet_tab_guia_honorario_w[i].dt_atendimento_dad_gui,1,18), 'yyyy/mm/ddhh24:mi:ss'),	clock_timestamp(),
						clock_timestamp(),													null,										ptu_a500_imp_pck.converte_data(vet_tab_guia_honorario_w[i].dt_conhecimento_dad_gui),
						null,														null,										null,
						null,														null,										ptu_a500_imp_pck.converte_data(vet_tab_guia_honorario_w[i].dt_protocolo_dad_gui),
						ptu_a500_imp_pck.converte_data(vet_tab_guia_honorario_w[i].dt_ultima_autorizacao_dad_gui),					vet_tab_guia_honorario_w[i].id_aviso_dad_gui,					vet_tab_guia_honorario_w[i].id_continuado_dad_gui,
						vet_tab_guia_honorario_w[i].id_liminar_dad_gui,									null,										vet_tab_guia_honorario_w[i].id_rec_proprio_dad_exe,
						vet_tab_guia_honorario_w[i].id_rn_dad_ben,									null,										null,
						null,														null,										null,
						vet_tab_guia_honorario_w[i].tp_paciente_dad_ben,								null,										null,
						null,														null,										vet_tab_guia_honorario_w[i].nm_benef_dad_ben,
						vet_tab_guia_honorario_w[i].nome_prestador_dad_exe,								null,										nm_usuario_p,
						null,														nm_usuario_p,									null,
						coalesce(vet_tab_guia_honorario_w[i].cd_cnpj_dad_exe, vet_tab_guia_honorario_w[i].cd_cpf_dad_exe),			null,										null,
						vet_tab_guia_honorario_w[i].nr_doc1_glosado_rea_glo,								vet_tab_guia_honorario_w[i].nr_guia_tiss_principal_dad_gui,			somente_numero(vet_tab_guia_honorario_w[i].nr_guia_tiss_principal_dad_gui),
						vet_tab_guia_honorario_w[i].nr_guia_tiss_operadora_dad_gui,							vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui,			vet_tab_guia_honorario_w[i].nr_guia_tiss_principal_dad_gui,
						null,														somente_numero(vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui),		somente_numero(coalesce(vet_tab_guia_honorario_w[i].nr_lote_rea_glo_txt,vet_tab_guia_honorario_w[i].nr_lote_prestador_xml_rea_glo)),
						vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui,								vet_tab_guia_honorario_w[i].nr_doc2_glosado_rea_glo,				vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui,
						coalesce(vet_tab_guia_honorario_w[i].nr_nota_rea_glo_txt,vet_tab_guia_honorario_w[i].nr_guia_glosada_xml_rea_glo),	somente_numero(vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui),	nr_seq_aviso_conta_w,
						null,														nr_seq_ptu_fatura_w,								null,
						null,														vet_tab_guia_honorario_w[i].nr_ver_tiss_dad_gui,				null,
						null,														null,										vet_tab_guia_honorario_w[i].tp_rede_min_dad_exe,
						null,														null,										4,
						tp_pessoa_w,													vet_tab_guia_honorario_w[i].tp_prestador_dad_exe,				vet_tab_guia_honorario_w[i].id_glosa_total_dad_gui,
						vet_tab_guia_honorario_w[i].nr_guia_glosada_xml_rea_glo,							vet_tab_guia_honorario_w[i].nr_guia_tiss_oper_glo_rea_glo) returning nr_sequencia into nr_seq_nota_cobr_w;
				
		for j in 1..vet_tab_guia_hon_proc_exec_w.count loop
			-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_hon_proc_exec_w[j].id = vet_tab_guia_honorario_w[i].id) then
			
				nr_seq_aviso_material_w		:= null;
				nr_seq_aviso_procedimento_w	:= null;
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				ie_tipo_participacao_w		:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;

				-- CONVERSOES

				vet_tab_guia_hon_proc_exec_w[j].ft_multiplicador_servico_pro	:= to_number(replace(vet_tab_guia_hon_proc_exec_w[j].ft_multiplicador_servico_pro, ',','.'), '99.99');
				vet_tab_guia_hon_proc_exec_w[j].tx_adm_servico_pro		:= to_number(replace(vet_tab_guia_hon_proc_exec_w[j].tx_adm_servico_pro, ',','.'), '999999999999.99');
				vet_tab_guia_hon_proc_exec_w[j].vl_serv_cobrado_pro		:= to_number(replace(vet_tab_guia_hon_proc_exec_w[j].vl_serv_cobrado_pro, ',','.'), '999999999999.99');
				vet_tab_guia_hon_proc_exec_w[j].qt_cobrada_pro			:= to_number(replace(vet_tab_guia_hon_proc_exec_w[j].qt_cobrada_pro, ',','.'), '99999.9999');
				vet_tab_guia_hon_proc_exec_w[j].seq_item_pro			:= somente_numero(vet_tab_guia_hon_proc_exec_w[j].seq_item_pro);
				
				--OBTER TABELA E CD_SERVICO

				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_guia_hon_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_hon_proc_exec_w[j].cd_servico_pro, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_guia_hon_proc_exec_w[j].tp_tabela_pro, vet_tab_guia_hon_proc_exec_w[j].cd_servico_pro, null);
				
				if (ie_tipo_tabela_w = 4) then
					ie_pacote_intercambio_w := 'S';
				else
					ie_pacote_intercambio_w := 'N';
				end if;
				
				if (vet_tab_guia_honorario_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_guia_honorario_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_guia_honorario_w[i].id_benef_dad_ben;
				end if;
				
				if (ie_tipo_tabela_w in (2,3,5,6)) then
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then		
						nr_seq_material_w := cd_servico_w;

					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						
						pls_obter_mat_tiss_vigente(nr_seq_material_w, clock_timestamp(), cd_servico_w, 'O', ie_situacao_material_w, vet_tab_guia_honorario_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
						
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then			
						nr_seq_material_w := null;
						
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_execucao_pro);
						end if;
						
						pls_obter_mat_a900_vigente(nr_seq_material_w, dt_ref_conv_mat_unimed_w, cd_servico_w, vet_tab_guia_honorario_w[i].nr_ver_tiss_dad_gui);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;							
					
					-- VERIFICAR SE TEM REGRA DE CONVERSAO

					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
					
						pls_obter_proced_conversao(	null,			null,			null,
										cd_estabelecimento_p,	1,			null,
										3,			'R',			nr_seq_contrato_w,
										nr_seq_intercambio_w,	null,			cd_mat_number_inter_w,
										ie_tipo_intercambio_w,	cd_proc_conversao_w,	ie_origem_proced_conv_w,
										nr_seq_regra_conv_w,	ie_somente_codigo_w,	clock_timestamp(),
										null,			null,			null,
										'N', ie_priorizar_conv_pct_int_w);
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_execucao_pro), 
										'R', 
										'A', 
										null, 
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;		

					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;

					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						-- A900

						pls_obter_mat_tiss_vigente(nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', vet_tab_guia_honorario_w[i].nr_ver_tiss_dad_gui);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente(nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', vet_tab_guia_honorario_w[i].nr_ver_tiss_dad_gui);
						end if;	
					end if;
										
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;
				else
					
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;
					
					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null,
									cd_estabelecimento_p, 1, null,
									3, 'R', nr_seq_contrato_w,
									nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
									nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
									null, null, null, 
									ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);
					
					-- OBTER A ORIGEM PADRAO PARA OS ITENS CONFORME A REGRA.

					ie_origem_proced_padrao_w := pls_obter_origem_proced(cd_estabelecimento_p, null, 'R', ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_execucao_pro), null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						--JJUNG OS 483853 - 02/10/2012 - ADICIONADO RESTRICAO PARA DATA DE VIGENCIA DAS REGRAS CADASTRADAS.

						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					
					--CRIADO TRATAMENTO PARA ATENDER AS OS 575917 QUE SOLICITA QUE SEJA BUSCADO A ULTIMA ORIGEM VALIDA E A OS 644869 ONDE INDICA QUE DEVE SER RESPEITADA A ORIGEM PADRAO DO SISTEMA	

					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w
						and	ie_situacao = 'A';
						
						-- SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_situacao = 'A';	
							
							-- SE NAO ENCONTRAR A ORIGEM EM PROCEDIMENTOS ATIVOS, BUSCA EM PROCEDIMENTOS QUE NAO ESTIVEREM ATIVOS.

							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;	
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						--OS667827

						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED OS 644869 CONFORME SOLICITADO FOI REALIZADO TRATAMENTO PARA CASO NAO 

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w);	
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento	= cd_proc_conversao_w
					and	ie_origem_proced = ie_origem_proced_conv_w;
					
					-- TEM QUE DEIXAR O ITEM COMO NAO ENCONTRADO

					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w := null;
						ie_origem_proced_conv_w := null;
					end if;
				end if;
				
				-- OBTER VINCULO COM O A520

				if (nr_seq_aviso_conta_w IS NOT NULL AND nr_seq_aviso_conta_w::text <> '') and (vet_tab_guia_hon_proc_exec_w[j].id_avisado_pro = 'S') then
					-- OS 1882669

					if (ie_tipo_tabela_w not in (0,1,4)) then
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_material_w
						from    ptu_aviso_material
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_mat_envio            = cd_servico_w;
					else
						select  max(nr_sequencia)
						into STRICT    nr_seq_aviso_procedimento_w
						from    ptu_aviso_procedimento
						where   nr_seq_aviso_conta      = nr_seq_aviso_conta_w
						and     cd_proc_envio           = cd_servico_w;
					end if;                	
				end if;
				
				-- FAZER INSERT NA PTU_NOTA_SERVICO - CONTAS DE INTERCAMBIO

				insert into ptu_nota_servico(	nr_sequencia,								cd_ato,									cd_cnes_prest,
								cd_especialidade,							cd_munic,								cd_pacote,
								cd_porte_anestesico,							cd_prestador,								cd_prestador_req,
								cd_procedimento,							cd_rec_prestador,							cd_ref_material_fab,
								cd_ref_material_fab_opme,						cd_servico,								cd_unimed_autorizadora,
								cd_unimed_pre_req,							cd_unimed_prestador,							det_reg_anvisa,
								ds_hora_procedimento,							ds_servico,								ds_servico_aux,
								dt_atualizacao,								dt_atualizacao_nrec,							dt_autoriz,
								dt_pgto_prestador,							dt_procedimento,							dt_solicitacao,
								hr_final,								hr_servico,								id_acres_urg_emer,
								id_aviso_item,								id_pag_forn,								ie_alto_custo,
								ie_consistente,								ie_origem_proced,							ie_pacote,
								ie_rede_propria,							ie_reembolso,								ie_tipo_data_regra,
								ie_tipo_participacao_tiss,						ie_tipo_pessoa_prestador,						ie_tipo_prestador,
								ie_tipo_tabela_tiss,							ie_via_acesso,								nm_fornecedor,
								nm_prestador,								nm_prestador_requisitante,						nm_profissional_prestador,
								nm_usuario,								nm_usuario_nrec,							nr_autorizacao,
								nr_cbo_exec,								nr_cgc_cpf,								nr_cgc_cpf_req,
								nr_cnpj_fornecedor,							nr_cons_prof_prest,							nr_cons_prof_req,
								nr_guia_tiss,								nr_linha,								nr_lote,
								nr_nota,								nr_nota_fiscal_forn,							nr_nota_numerico,
								nr_reg_anvisa,								nr_seq_agrup_item_ptu,							nr_seq_aviso_material,
								nr_seq_aviso_procedimento,						nr_seq_a500,								nr_seq_composicao,
								nr_seq_conta_mat,							nr_seq_conta_proc,							nr_seq_material,
								nr_seq_nota,								nr_seq_nota_cobr,							nr_seq_pacote,
								nr_seq_pacote_agrup,							nr_seq_pacote_mat,							nr_seq_pacote_proc,
								nr_seq_proc_partic,							nr_seq_registro,							qt_procedimento,
								sg_cons_prof_prest,							sg_cons_prof_req,							sg_uf_cons_prest,
								sg_uf_cons_req,								tec_utilizada,								tipo_rede_min,
								tp_autoriz,								tx_procedimento,							unidade_medida,
								vl_adic_co,								vl_adic_filme,								vl_adic_procedimento,
								vl_custo_operacional,							vl_filme,								vl_pago_prest,
								vl_procedimento,							nr_seq_item,								cd_item_unico,
								ie_tipo_tabela,								cd_servico_tiss,							ie_tipo_participacao,
								cd_servico_xml)		
							values (	nextval('ptu_nota_servico_seq'),						vet_tab_guia_hon_proc_exec_w[j].cd_ato_pro,				null,
								null,									null,									vet_tab_guia_hon_proc_exec_w[j].cd_pacote_pro,
								vet_tab_guia_hon_proc_exec_w[j].cd_porte_anestesico_pro,		vet_tab_guia_honorario_w[i].cd_prest_dad_exe,				null,
								cd_proc_conversao_w,							null,									null,
								null,									cd_servico_w,								vet_tab_guia_hon_proc_exec_w[j].cd_uni_autorizadora_dad_aut,
								null,									vet_tab_guia_honorario_w[i].cd_uni_prest_dad_exe,			null,
								vet_tab_guia_hon_proc_exec_w[j].hr_inicial_pro,				vet_tab_guia_hon_proc_exec_w[j].ds_servico_pro,				null,
								clock_timestamp(),								clock_timestamp(),								ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_autorizacao_dad_aut),
								null,									ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_execucao_pro),		ptu_a500_imp_pck.converte_data(vet_tab_guia_hon_proc_exec_w[j].dt_solicitacao_dad_aut),
								vet_tab_guia_hon_proc_exec_w[j].hr_final_pro,				null,									vet_tab_guia_hon_proc_exec_w[J].id_acrescimo_pro,
								vet_tab_guia_hon_proc_exec_w[j].id_avisado_item_proc,			null,									null,
								null,									ie_origem_proced_conv_w,						vet_tab_guia_hon_proc_exec_w[j].id_pacote_pro,
								null,									null,									null,
								null,									null,									vet_tab_guia_honorario_w[i].tp_prestador_dad_exe,
								vet_tab_guia_hon_proc_exec_w[j].tp_tabela_pro,				vet_tab_guia_hon_proc_exec_w[j].via_acesso_pro,				null,
								vet_tab_guia_honorario_w[i].nome_prestador_dad_exe,			null,									null,
								nm_usuario_p,								nm_usuario_p,								vet_tab_guia_hon_proc_exec_w[j].nr_autorizacao_dad_aut,
								null,									null,									null,
								null,									null,									null,
								null,									null,									somente_numero(vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui),
								vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui,		null,									somente_numero(vet_tab_guia_honorario_w[i].nr_guia_tiss_prestador_dad_gui),
								null,									null,									nr_seq_aviso_material_w,
								nr_seq_aviso_procedimento_w,						null,									null,
								null,									null,									nr_seq_material_w,
								null,									nr_seq_nota_cobr_w,							null,
								null,									null,									null,
								null,									null,									vet_tab_guia_hon_proc_exec_w[j].qt_cobrada_pro,
								null,									null,									null,
								null,									vet_tab_guia_hon_proc_exec_w[j].tc_utilizada_pro,			vet_tab_guia_honorario_w[i].tp_rede_min_dad_exe,
								vet_tab_guia_hon_proc_exec_w[j].tp_autorizacao_dad_aut,			coalesce(vet_tab_guia_hon_proc_exec_w[j].ft_multiplicador_servico_pro,0),	null,
								0,									0,									coalesce(vet_tab_guia_hon_proc_exec_w[j].tx_adm_servico_pro,0),
								0,									0,									0,
								coalesce(vet_tab_guia_hon_proc_exec_w[j].vl_serv_cobrado_pro,0),		vet_tab_guia_hon_proc_exec_w[j].seq_item_pro,				vet_tab_guia_hon_proc_exec_w[j].id_item_unico_proc,
								ie_tipo_tabela_w,							vet_tab_guia_hon_proc_exec_w[j].cd_servico_pro,				null, 
								vet_tab_guia_hon_proc_exec_w[j].cd_servico_pro) returning nr_sequencia into nr_seq_nota_serv_w;

                
				select	max(nr_seq_prest_inter)
				into STRICT	nr_seq_prest_inter_w
				from	ptu_nota_cobranca
				where	nr_sequencia		= nr_seq_nota_cobr_w;

				if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
					if (tp_pessoa_w = 'J') then
						cd_cgc_prestador_w		:= vet_tab_guia_honorario_w[i].cd_cnpj_dad_exe;
						nr_cpf_prestador_w		:= null;
					elsif (tp_pessoa_w = 'F') then
						cd_cgc_prestador_w		:= null;
						nr_cpf_prestador_w		:= vet_tab_guia_honorario_w[i].cd_cpf_dad_exe;
					end if;

					nm_prestador_w	:= vet_tab_guia_honorario_w[i].nome_prestador_dad_exe;

					pls_gerar_prest_intercambio(	nr_cpf_prestador_w,					cd_cgc_prestador_w,					nm_prestador_w,
									vet_tab_guia_honorario_w[i].CNES_prestador_dad_exe,	vet_tab_guia_honorario_w[i].cd_municipio_cont_dad_exe,	nm_usuario_p,
									null, 							null,							nr_seq_prest_inter_w,
									nr_seq_prestador_w);

					if (nr_seq_prest_inter_w IS NOT NULL AND nr_seq_prest_inter_w::text <> '') then
						update	ptu_nota_cobranca
						set	nr_seq_prest_inter	= nr_seq_prest_inter_w
						where	nr_sequencia		= nr_seq_nota_cobr_w;
					end if;
				end if;
				
				
				for l in 1..vet_tab_guia_hon_proc_eqp_w.count loop

				-- SO IRA FAZER O INSERT NA PTU_NOTA_SERVICO SE FOR DA MESMA NOTA SERVIcO 

					if (vet_tab_guia_hon_proc_eqp_w[l].id = vet_tab_guia_hon_proc_exec_w[j].id_item_unico_proc || vet_tab_guia_hon_proc_exec_w[j].id) then

						ie_tipo_participacao_w	:= null;
						
						if (vet_tab_guia_hon_proc_eqp_w[l](.tp_participacao IS NOT NULL AND .tp_participacao::text <> '')) then
							select	max(cd_ptu)
							into STRICT	ie_tipo_participacao_w
							from	pls_grau_participacao
							where	cd_tiss	= vet_tab_guia_hon_proc_eqp_w[l].tp_participacao;

						end if;
						
						-- CONVERSAO DE UF

						uf_conselho_w := null;
						uf_conselho_w  := pls_obter_cd_unidade_ibge(null, vet_tab_guia_hon_proc_eqp_w[l].uf_conselho);
						
						insert into ptu_nota_servico_equipe(	nr_sequencia,						nr_seq_nota_servico,					ie_tipo_participacao,
											ie_tipo_participacao_tiss,				cd_unimed_prestador,					cd_prestador,
											nm_prestador,						cd_cpf,							nr_conselho,
											sg_conselho,						uf_conselho, 						nr_cbo,
											dt_atualizacao,						nm_usuario,						dt_atualizacao_nrec,
											nm_usuario_nrec) values (
											nextval('ptu_nota_servico_equipe_seq'),			nr_seq_nota_serv_w,					ie_tipo_participacao_w,
											vet_tab_guia_hon_proc_eqp_w[l].tp_participacao, 	vet_tab_guia_hon_proc_eqp_w[l].cd_uni_prest, 		vet_tab_guia_hon_proc_eqp_w[l].cd_prest,
											vet_tab_guia_hon_proc_eqp_w[l].nm_prest,		vet_tab_guia_hon_proc_eqp_w[l].cd_cpf, 			vet_tab_guia_hon_proc_eqp_w[l].nr_conselho,
											vet_tab_guia_hon_proc_eqp_w[l].sg_conselho,     	uf_conselho_w,     					vet_tab_guia_hon_proc_eqp_w[l].nr_cbo,
											clock_timestamp(),						nm_usuario_p,						clock_timestamp(),
											nm_usuario_p);

					end if;
				end loop;
				

			end if;
		end loop;

		for l in 1..vet_tab_guia_hon_complemento_w.count loop
			
			-- SO IRA FAZER O INSERT NA PTU_NOTA_COMPLEMENTO SE FOR DA MESMA NOTA COBRANCA 

			if (vet_tab_guia_honorario_w[i].id = vet_tab_guia_hon_complemento_w[l].id_complemento)  then
				-- FAZER INSERT NA PTU_NOTA_COMPLEMENTO - CONTAS DE INTERCAMBIO	

				insert into ptu_nota_complemento(nr_sequencia,								dt_atualizacao,							dt_atualizacao_nrec,
								nm_usuario,								nm_usuario_nrec,						ds_complemento,
								especif_material,							ie_tipo_complemento,						nr_linha,
								nr_lote,								nr_nota,							nr_seq_nota_cobr)
						values (	nextval('ptu_nota_complemento_seq'),					clock_timestamp(),							clock_timestamp(),
								nm_usuario_p,								nm_usuario_p,							substr(vet_tab_guia_hon_complemento_w[l].nm_desc_compleme_dad_gui_com,1,500),
								null,									vet_tab_guia_hon_complemento_w[l].tp_reg_cpl_dad_gui_com,	null,
								somente_numero(vet_tab_guia_honorario_w[i].nr_lote_prestador_dad_gui),	null,								nr_seq_nota_cobr_w);
			end if;
		end loop;
	
		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '502'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;
	end loop;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ NOTA FISCAL DO FORNECEDOR +++++++++++++++++++++++++++++++++++++++++++++++


	for i in 1..vet_tab_guia_nota_fiscal_w.count loop
		insert into ptu_nota_cobranca(	nr_sequencia,						dt_atualizacao,						dt_atualizacao_nrec,
						nm_usuario,						nm_usuario_nrec,					cd_unimed,
						cd_usuario_plano,					nr_guia_tiss_principal,					id_liminar,
						nr_fatura_glosada,					nr_nota_glosada,					nr_seq_fatura,
						tp_nota,						nr_nota,						nr_guia_principal)
					values (	nextval('ptu_nota_cobranca_seq'),				clock_timestamp(),						clock_timestamp(),
						nm_usuario_p,						nm_usuario_p,						vet_tab_guia_nota_fiscal_w[i].cd_unimed_dad_ben,
						vet_tab_guia_nota_fiscal_w[i].id_benef_dad_ben,		vet_tab_guia_nota_fiscal_w[i].nr_guia_tiss_principal,	vet_tab_guia_nota_fiscal_w[i].id_liminar,
						vet_tab_guia_nota_fiscal_w[i].nr_doc1_glosado_rea_glo,	vet_tab_guia_nota_fiscal_w[i].nr_guia_glosada_rea_glo,	nr_seq_ptu_fatura_w,
						5,							vet_tab_guia_nota_fiscal_w[i].nr_guia_tiss_principal,	vet_tab_guia_nota_fiscal_w[i].nr_guia_tiss_principal) returning nr_sequencia into nr_seq_nota_cobr_w;
		
		for j in 1..vet_tab_guia_nf_proc_w.count loop
			
			if (vet_tab_guia_nf_proc_w[j].id = vet_tab_guia_nota_fiscal_w[i].id) then
				nr_seq_aviso_material_w		:= null;
				nr_seq_aviso_procedimento_w	:= null;
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				ie_tipo_participacao_w		:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;
				
				vet_tab_guia_nf_proc_w[j].qt_cobrada_pro_info_opme			:= to_number(replace(vet_tab_guia_nf_proc_w[j].qt_cobrada_pro_info_opme, ',','.'), '99999.9999');
				vet_tab_guia_nf_vlr_w[j].vl_procedimento				:= to_number(replace(vet_tab_guia_nf_vlr_w[j].vl_procedimento, ',','.'), '999999999999.99');
				vet_tab_guia_nf_vlr_w[j].vl_adic_procedimento				:= to_number(replace(vet_tab_guia_nf_vlr_w[j].vl_adic_procedimento, ',','.'), '999999999999.99');
				
				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_guia_nf_proc_w[j].tp_tabela_pro_info_opme, vet_tab_guia_nf_proc_w[j].cd_servico_pro_info_opme, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_guia_nf_proc_w[j].tp_tabela_pro_info_opme, vet_tab_guia_nf_proc_w[j].cd_servico_pro_info_opme, null);
				
				if (ie_tipo_tabela_w = 4) then
					ie_pacote_intercambio_w := 'S';
				else
					ie_pacote_intercambio_w := 'N';
				end if;
				
				if (vet_tab_guia_nota_fiscal_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_guia_nota_fiscal_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_guia_nota_fiscal_w[i].id_benef_dad_ben;
				end if;
				
				if (ie_tipo_tabela_w in (2,3,5,6)) then
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then
						nr_seq_material_w := cd_servico_w;
					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then
						nr_seq_material_w := null;
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := ptu_a500_imp_pck.converte_data(vet_tab_guia_nota_fiscal_w[i].dt_exec_info_opme);
						end if;
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
						
						pls_obter_proced_conversao(	null,			null,			null,
										cd_estabelecimento_p,	1,			null,
										3,			'R',			nr_seq_contrato_w,
										nr_seq_intercambio_w,	null,			cd_mat_number_inter_w,
										ie_tipo_intercambio_w,	cd_proc_conversao_w,	ie_origem_proced_conv_w,
										nr_seq_regra_conv_w,	ie_somente_codigo_w,	clock_timestamp(),
										null,			null,			null,
										'N', ie_priorizar_conv_pct_int_w);
					
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										ptu_a500_imp_pck.converte_data(vet_tab_guia_nota_fiscal_w[i].dt_exec_info_opme),
										'R',
										'A',
										null,
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;
					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;

					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);

						-- A900

						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', null);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', null);
						end if;	
					end if;

                                        
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;
				else
					
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;
					
					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null,
									cd_estabelecimento_p, 1, null,
									3, 'R', nr_seq_contrato_w,
									nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w,
									nr_seq_regra_conv_w, ie_somente_codigo_w, clock_timestamp(),
									null, null, null,
									ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);
					ie_origem_proced_padrao_w := pls_obter_origem_proced(cd_estabelecimento_p, null, 'R', ptu_a500_imp_pck.converte_data(vet_tab_guia_nota_fiscal_w[i].dt_exec_info_opme), null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					
					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w
						and	ie_situacao = 'A';
						if (qt_proced_origem_w = 0) then
							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_situacao = 'A';
							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						
						if (qt_proced_origem_w = 0) then
							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w);
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento	= cd_proc_conversao_w
					and	ie_origem_proced = ie_origem_proced_conv_w;
					
					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w := null;
						ie_origem_proced_conv_w := null;
					end if;
				end if;
				
				insert into ptu_nota_servico(	nr_sequencia,							dt_atualizacao,							dt_atualizacao_nrec,
								nm_usuario,							nm_usuario_nrec,						nr_seq_nota_cobr,
								cd_procedimento,						cd_servico,							nr_seq_item,
								cd_item_unico,							ie_tipo_tabela_tiss,						ie_tipo_tabela,
								ds_servico,							qt_procedimento,						vl_procedimento,
								vl_adic_procedimento,						det_reg_anvisa,							nr_reg_anvisa,
								cd_ref_material_fab,						nr_autorizacao,							nr_cnpj_fornecedor,
								nm_fornecedor,							nr_nota_fiscal_forn,						dt_procedimento,
								cd_servico_tiss,						nr_seq_material,						ie_origem_proced)
							values (	nextval('ptu_nota_servico_seq'),					clock_timestamp(),							clock_timestamp(),
								nm_usuario_p,							nm_usuario_p,							nr_seq_nota_cobr_w,
								cd_proc_conversao_w,						cd_servico_w,							vet_tab_guia_nf_proc_w[j].seq_item_pro_info_opme,
								vet_tab_guia_nf_proc_w[j].id_item_unico_pro_info_opme,		vet_tab_guia_nf_proc_w[j].tp_tabela_pro_info_opme,		ie_tipo_tabela_w,
								vet_tab_guia_nf_proc_w[j].ds_servico_pro_info_opme,		vet_tab_guia_nf_proc_w[j].qt_cobrada_pro_info_opme,		vet_tab_guia_nf_vlr_w[j].vl_procedimento,
								vet_tab_guia_nf_vlr_w[j].vl_adic_procedimento,			vet_tab_guia_nota_fiscal_w[i].det_reg_anvisa_info_opme,		vet_tab_guia_nota_fiscal_w[i].nr_reg_anvisa_info_opme,
								vet_tab_guia_nota_fiscal_w[i].cd_ref_mat_fab_info_opme,		vet_tab_guia_nota_fiscal_w[i].nr_autorizacao,			vet_tab_guia_nota_fiscal_w[i].cnpj_fornecedor,
								vet_tab_guia_nota_fiscal_w[i].nm_fornecedor_material_nf,	vet_tab_guia_nota_fiscal_w[i].nr_nf_fornecedor_nf,		ptu_a500_imp_pck.converte_data(vet_tab_guia_nota_fiscal_w[i].dt_exec_info_opme),
								vet_tab_guia_nf_proc_w[j].cd_servico_pro_info_opme,		nr_seq_material_w,						ie_origem_proced_conv_w);
			end if;
		end loop;
		
		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '502'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;
	end loop;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ INSERT NA PTU_NOTA_FISCAL DE TODAS AS GUIAS +++++++++++++++++++++++++++++++++++++++++++++++


	-- FAZER INSERT NA PTU_NOTA_FISCAL - CONTAS DE INTERCAMBIO 

	if (vet_tab_cabecalho_w[i](.nr_nota_fiscal_doc1_cab IS NOT NULL AND .nr_nota_fiscal_doc1_cab::text <> '')) or (vet_tab_cabecalho_w[i](.nr_nota_fiscal_doc2_cab IS NOT NULL AND .nr_nota_fiscal_doc2_cab::text <> '')) then
		insert into ptu_nota_fiscal(	nr_sequencia,						ds_link_nfe,						ds_link_nfe_doc2,
						dt_atualizacao,						dt_atualizacao_nrec,					nm_usuario,
						nm_usuario_nrec,					nr_linha,						nr_nota_fiscal,
						nr_nota_fiscal_doc2,					nr_seq_fatura,						nr_seq_nota_cobr)
					values (	nextval('ptu_nota_fiscal_seq'),				vet_tab_cabecalho_w[i].link_nfe_doc1_cab,		vet_tab_cabecalho_w[i].link_nfe_doc2_cab,
						clock_timestamp(),						clock_timestamp(),						nm_usuario_p,
						nm_usuario_p,						null,							vet_tab_cabecalho_w[i].nr_nota_fiscal_doc1_cab,
						vet_tab_cabecalho_w[i].nr_nota_fiscal_doc2_cab,		nr_seq_ptu_fatura_w,					nr_seq_nota_cobr_w);
	end if;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ REEMBOLSO +++++++++++++++++++++++++++++++++++++++++++++++

	
	for i in 1..vet_tab_cobr_reembolso_w.count loop
	
		-- PEGAR O TIPO DE PESSOA

		if (vet_tab_cobr_reembolso_w[i](.cd_cpf_prest IS NOT NULL AND .cd_cpf_prest::text <> '')) then
			tp_pessoa_w		:= 'F';
			cd_cgc_prestador_w	:= null;
			nr_cpf_prestador_w	:= vet_tab_cobr_reembolso_w[i].cd_cpf_prest;
		elsif (vet_tab_cobr_reembolso_w[i](.cd_cnpj_prest IS NOT NULL AND .cd_cnpj_prest::text <> '')) then
			tp_pessoa_w		:= 'J';
			cd_cgc_prestador_w	:= vet_tab_cobr_reembolso_w[i].cd_cnpj_prest;
			nr_cpf_prestador_w	:= null;
		end if;

		pls_gerar_prest_intercambio(	nr_cpf_prestador_w, 			cd_cgc_prestador_w, 	vet_tab_cobr_reembolso_w[i].nm_prestador,
						vet_tab_cobr_reembolso_w[i].cd_cnes, 	null, 			nm_usuario_p,
						null, 					null, 			nr_seq_prest_inter_w,
						nr_seq_prestador_w);

		-- INSERT NA PTU_NOTA_COBRANCA_RRS - REEMBOLSO

		insert into ptu_nota_cobranca_rrs(	nr_sequencia,											cd_cnes,						cd_unimed,
							dt_atualizacao,											dt_atualizacao_nrec,					dt_nasc,
							dt_reembolso,											id_benef,						id_reembolso_sus,
							id_reem_par_int,										id_rn,							nm_beneficiario,
							nm_prestador,											nm_usuario,						nm_usuario_nrec,
							nr_cnpj_cpf,											nr_lote,						nr_nota,
							nr_nota_numerico,										nr_seq_conta,						nr_seq_fatura,
							nr_seq_prest_inter,										tp_carater_atend,					tp_pessoa,
							tp_sexo,											id_reembolso)							
						values (	nextval('ptu_nota_cobranca_rrs_seq'),								vet_tab_cobr_reembolso_w[i].cd_cnes,			vet_tab_cobr_reembolso_w[i].cd_unimed_dad_ben,
							clock_timestamp(),											clock_timestamp(),						ptu_a500_imp_pck.converte_data(vet_tab_cobr_reembolso_w[i].dt_nasc_dad_ben),
							null,												vet_tab_cobr_reembolso_w[i].id_benef_dad_ben,		1,
							vet_tab_cobr_reembolso_w[i].id_reem_par_int,							vet_tab_cobr_reembolso_w[i].id_rn_dad_ben,		vet_tab_cobr_reembolso_w[i].nm_benef_dad_ben,
							vet_tab_cobr_reembolso_w[i].nm_prestador,							nm_usuario_p,						nm_usuario_p,
							coalesce(vet_tab_cobr_reembolso_w[i].cd_cpf_prest,vet_tab_cobr_reembolso_w[i].cd_cnpj_prest),	null,							null,
							null,												null,							nr_seq_ptu_fatura_w,
							nr_seq_prest_inter_w,										vet_tab_cobr_reembolso_w[i].carater_atendimento,	tp_pessoa_w,
							vet_tab_cobr_reembolso_w[i].tp_sexo_dad_ben,							vet_tab_cobr_reembolso_w[i].id_reembolso) returning nr_sequencia into nr_seq_nota_cobr_rrs_w;

		for j in 1..vet_tab_cobr_reembolso_proc_w.count loop
		
			if (vet_tab_cobr_reembolso_proc_w[j].id = vet_tab_cobr_reembolso_w[i].id) then
			
				ie_tipo_tabela_w		:= null;
				cd_servico_w			:= null;
				cd_proc_conversao_w		:= null;
				nr_seq_material_w		:= null;
				cd_servico_mat_w		:= null;
				ie_somente_codigo_w		:= null;
				
				-- CONVERTER

				vet_tab_cobr_reembolso_proc_w[j].vl_restituir_proc		:= to_number(replace(vet_tab_cobr_reembolso_proc_w[j].vl_restituir_proc, ',','.'), '999999999999.99');
				vet_tab_cobr_reembolso_proc_w[j].vl_pago_benef_proc		:= to_number(replace(vet_tab_cobr_reembolso_proc_w[j].vl_pago_benef_proc, ',','.'), '999999999999.99');
				vet_tab_cobr_reembolso_proc_w[j].vl_reem_benef_proc		:= to_number(replace(vet_tab_cobr_reembolso_proc_w[j].vl_reem_benef_proc, ',','.'), '999999999999.99');
				vet_tab_cobr_reembolso_proc_w[j].qt_cobrada_proc		:= to_number(replace(vet_tab_cobr_reembolso_proc_w[j].qt_cobrada_proc, ',','.'), '99999.9999');

				-- CONVERTER UF

				vet_tab_cobr_reembolso_proc_w[j].uf_equ_reemb	:= pls_obter_cd_unidade_ibge(null, vet_tab_cobr_reembolso_proc_w[j].uf_equ_reemb);
				
				--OBTER TABELA E CD_SERVICO

				ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(vet_tab_cobr_reembolso_proc_w[j].tp_tabela_proc, vet_tab_cobr_reembolso_proc_w[j].cd_servico_proc, 'R', null);
				cd_servico_w		:= ptu_conversao_item_tabela(vet_tab_cobr_reembolso_proc_w[j].tp_tabela_proc, vet_tab_cobr_reembolso_proc_w[j].cd_servico_proc, null);
			
				if (vet_tab_cobr_reembolso_w[i](.id_benef_dad_ben IS NOT NULL AND .id_benef_dad_ben::text <> '')) then
					nr_seq_contrato_w	:= null;
					nr_seq_intercambio_w	:= null;
					
					--Verifica qual o contrato/intercambio do benef pra mandar pra regra de conversao

					select	max(a.nr_seq_contrato),
						max(a.nr_seq_intercambio)
					into STRICT	nr_seq_contrato_w,
						nr_seq_intercambio_w
					from 	pls_segurado 		a,
						pls_segurado_carteira 	b
					where	a.nr_sequencia		= b.nr_seq_segurado
					and	coalesce(a.dt_cancelamento::text, '') = ''
					and	b.cd_usuario_plano	= lpad(to_char(vet_tab_cobr_reembolso_w[i].cd_unimed_dad_ben), 4, '0')||vet_tab_cobr_reembolso_w[i].id_benef_dad_ben;
				end if;
				
				
				if (ie_tipo_tabela_w not in (2,3,5,6)) then
					ie_origem_proced_padrao_w	:= null;
					ie_origem_proced_conv_w		:= null;
					
					-- se for pacote, ira procurar por origem propria na conversao

					if ie_tipo_tabela_w = 4 then
						ie_origem_proc_pacote_w := 4;
					else
						ie_origem_proc_pacote_w := null;
					end if;

					--A ORIGEM DO PROCEDIMENTO E BUSCADO POR REGRA EXISTENTE NO CADASTRO DE REGRAS / PROCEDIMENTOS/ REGRA ORIGEM.

					pls_obter_proced_conversao(	cd_servico_w, ie_origem_proc_pacote_w, null, cd_estabelecimento_p, 1, null, 3, 'R', nr_seq_contrato_w, nr_seq_intercambio_w, null, null,
									ie_tipo_intercambio_w, cd_proc_conversao_w, ie_origem_proced_conv_w, nr_seq_regra_conv_w,
									ie_somente_codigo_w, clock_timestamp(), null, null, null, ie_pacote_intercambio_w, ie_priorizar_conv_pct_int_w);
					
					
					
					-- OBTER A ORIGEM PADRAO PARA OS ITENS CONFORME A REGRA.

					ie_origem_proced_padrao_w := pls_obter_origem_proced( cd_estabelecimento_p, null, 'R', ptu_a500_imp_pck.converte_data(vet_tab_cobr_reembolso_proc_w[j].dt_exec_proc), null);
					
					if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
						--JJUNG OS 483853 - 02/10/2012 - ADICIONADO RESTRICAO PARA DATA DE VIGENCIA DAS REGRAS CADASTRADAS.

						ie_origem_proced_conv_w := ie_origem_proced_padrao_w;
					end if;
					
					--CRIADO TRATAMENTO PARA ATENDER AS OS 575917 QUE SOLICITA QUE SEJA BUSCADO A ULTIMA ORIGEM VALIDA E A OS 644869 ONDE INDICA QUE DEVE SER RESPEITADA A ORIGEM PADRAO DO SISTEMA	

					if (ie_origem_proc_valido_w	= 'S') then
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento		= cd_proc_conversao_w
						and	ie_origem_proced	= ie_origem_proced_conv_w
						and	ie_situacao 		= 'A';
						
						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	max(ie_origem_proced)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento	= cd_proc_conversao_w
							and	ie_situacao	= 'A';	
							
							-- SE NAO ENCONTRAR A ORIGEM EM PROCEDIMENTOS ATIVOS, BUSCA EM PROCEDIMENTOS QUE NAO ESTIVEREM ATIVOS.

							if (coalesce(ie_origem_proced_conv_w::text, '') = '') then
								select	max(ie_origem_proced)
								into STRICT	ie_origem_proced_conv_w
								from	procedimento
								where	cd_procedimento = cd_proc_conversao_w;	
							end if;
						end if;
					else
						select	count(1)
						into STRICT	qt_proced_origem_w
						from	procedimento
						where	cd_procedimento = cd_proc_conversao_w
						and	ie_origem_proced = ie_origem_proced_conv_w;
						--OS667827

						--SE ESTE PROCEDIMENTO NAO EXISTIR NA ORIGEM PADRAO E SELECIONADO O MAX ORIGEM PROCED

						-- OS 644869 CONFORME SOLICITADO FOI REALIZADO TRATAMENTO PARA CASO NAO 

						if (qt_proced_origem_w = 0) then	
							-- BUSCAR A ORIGEM DO PROCEDIMENTO ATIVO

							select	coalesce(max(ie_origem_proced),ie_origem_proced_conv_w)
							into STRICT	ie_origem_proced_conv_w
							from	procedimento
							where	cd_procedimento = cd_proc_conversao_w
							and	ie_origem_proced in (	SELECT	ie_origem_proced
											from	pls_regra_origem_proced
											where	ie_origem_proced != ie_origem_proced_conv_w);	
						end if;
					end if;
					
					select	count(1)
					into STRICT	qt_proc_valido_w
					from	procedimento
					where	cd_procedimento		= cd_proc_conversao_w
					and	ie_origem_proced	= ie_origem_proced_conv_w;
					
					-- TEM QUE DEIXAR O ITEM COMO NAO ENCONTRADO

					if (qt_proc_valido_w = 0) then
						cd_proc_conversao_w	:= null;
						ie_origem_proced_conv_w := null;
					end if;
				
				elsif (ie_tipo_tabela_w in (2,3,5,6)) then
					
					if (coalesce(ie_material_intercambio_w,'S') = 'S') then		
						nr_seq_material_w := cd_servico_w;

					elsif (coalesce(ie_material_intercambio_w,'S') = 'C') then
						nr_seq_material_w := null;
						
						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_servico_w, 'O', ie_situacao_material_w, null);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
						
					elsif (coalesce(ie_material_intercambio_w,'S') = 'CI') then			
						nr_seq_material_w := null;
						
						dt_ref_conv_mat_unimed_w := clock_timestamp();
						if (ie_data_conv_mat_unimed_w = 'DI') then
							dt_ref_conv_mat_unimed_w := ptu_a500_imp_pck.converte_data(vet_tab_cobr_reembolso_proc_w[j].dt_exec_proc);
						end if;
						
						pls_obter_mat_a900_vigente(nr_seq_material_w, dt_ref_conv_mat_unimed_w, cd_servico_w, null);
						
						if (coalesce(nr_seq_material_w::text, '') = '') then
							nr_seq_material_w := 0;
						end if;
					end if;						
							
					-- VERIFICAR SE TEM REGRA DE CONVERSAO

					select	count(1)
					into STRICT	qt_regra_w
					from	pls_conversao_proc
					where	(cd_material_imp IS NOT NULL AND cd_material_imp::text <> '')
					and	ie_situacao = 'A'
					and	ie_ptu = 'S';
					
					if (qt_regra_w > 0) then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
					
						pls_obter_proced_conversao(	null,			null,			null,
										cd_estabelecimento_p,	1,			null,
										3,			'R',			nr_seq_contrato_w,
										nr_seq_intercambio_w,	null,			cd_mat_number_inter_w,
										ie_tipo_intercambio_w,	cd_proc_conversao_w,	ie_origem_proced_conv_w,
										nr_seq_regra_conv_w,	ie_somente_codigo_w,	clock_timestamp(),
										null,			null,			null
										, 'N' , ie_priorizar_conv_pct_int_w);
					end if;
					
					if	((coalesce(nr_seq_material_w,0)) <> 0) then
						select	count(nr_sequencia)
						into STRICT	qt_material_w
						from	pls_material
						where	nr_sequencia	= nr_seq_material_w;
					end if;
					
					if (coalesce(qt_material_w,0) = 0) then
						ptu_obter_material_conversao(	somente_numero(cd_servico_w),
										ie_tipo_tabela_w,
										ptu_a500_imp_pck.converte_data(vet_tab_cobr_reembolso_proc_w[j].dt_exec_proc), 
										'R', 
										'A', 
										null, 
										ie_tipo_intercambio_w,
										nr_seq_material_w,
										cd_servico_mat_w,
										ie_somente_codigo_w);
					end if;			

					if (coalesce(nr_seq_material_w,0) = 0) then
						nr_seq_material_w	:= null;
					end if;
					
					if (coalesce(nr_seq_material_w::text, '') = '') then
						cd_mat_number_inter_w := somente_numero(cd_servico_w);
						
						-- A900

						pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'A', 'N', null);
						
						-- FEDERACAO

						if (coalesce(nr_seq_material_w::text, '') = '') then
							pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), cd_mat_number_inter_w, 'F', 'N', null);
						end if;	
					end if;
										
					if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') then
						nr_seq_material_w := null;
					end if;	
				end if;
				
				-- INSERT NA PTU_NOTA_SERVICO_RRS - REEMBOLSO

				insert into ptu_nota_servico_rrs(	nr_sequencia,									cd_procedimento,					cd_servico,
									ds_servico,									dt_atualizacao,						dt_atualizacao_nrec,
									dt_servico,									ie_origem_proced,					nm_profissional,
									nm_usuario,									nm_usuario_nrec,					nr_autoriz,
									nr_cons_prof,									nr_lote,						nr_nota,
									nr_nota_numerico,								nr_seq_a500,						nr_seq_conta_mat,
									nr_seq_conta_proc,								nr_seq_material,					nr_seq_nota_cobr_rrs,
									nr_seq_proc_partic,								qt_cobrada,						sg_cons_prof,
									sg_uf_cons_prof,								tp_particip,						ie_tipo_tabela_tiss,
									vl_dif_vl_inter,								vl_pago_benef,						vl_serv_cob,
									nr_seq_item,									cd_item_unico,						tp_tabela,
									cd_servico_tiss)
								values (	nextval('ptu_nota_servico_rrs_seq'),						cd_proc_conversao_w,					cd_servico_w,
									vet_tab_cobr_reembolso_proc_w[j].ds_servico_proc,				clock_timestamp(),						clock_timestamp(),
									ptu_a500_imp_pck.converte_data(vet_tab_cobr_reembolso_proc_w[j].dt_exec_proc),			ie_origem_proced_conv_w,				vet_tab_cobr_reembolso_proc_w[j].nm_prof_equ_reemb,
									nm_usuario_p,									nm_usuario_p,						vet_tab_cobr_reembolso_proc_w[j].nr_autorizacao_proc,
									vet_tab_cobr_reembolso_proc_w[j].nr_conselho_equ_reemb,				null,							null,
									null,										null,							null,
									null,										nr_seq_material_w,					nr_seq_nota_cobr_rrs_w,
									null,										vet_tab_cobr_reembolso_proc_w[j].qt_cobrada_proc,	vet_tab_cobr_reembolso_proc_w[j].sg_conselho_equ_reemb,
									vet_tab_cobr_reembolso_proc_w[j].uf_equ_reemb,					vet_tab_cobr_reembolso_proc_w[j].tp_paticip_equ_reemb,	vet_tab_cobr_reembolso_proc_w[j].tp_tabela_proc,
									vet_tab_cobr_reembolso_proc_w[j].vl_restituir_proc,				vet_tab_cobr_reembolso_proc_w[j].vl_pago_benef_proc,	vet_tab_cobr_reembolso_proc_w[j].vl_reem_benef_proc,
									vet_tab_cobr_reembolso_proc_w[j].seq_item_proc,					vet_tab_cobr_reembolso_proc_w[j].id_item_unico_proc,	ie_tipo_tabela_w,
									vet_tab_cobr_reembolso_proc_w[j].cd_servico_proc);
			end if;
		end loop;

		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '507'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;

	end loop;
	
	--  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ RESSARCIMENTO SUS +++++++++++++++++++++++++++++++++++++++++++++++

	for i in 1..vet_tab_ressarcimento_sus_w.count loop
	
		-- INSERT NA PTU_NOTA_COBRANCA_RRS - RESSARCIMENTO SUS

		insert into ptu_nota_cobranca_rrs(	nr_sequencia,											cd_cnes,						cd_unimed,
							dt_atualizacao,											dt_atualizacao_nrec,					dt_nasc,
							dt_reembolso,											id_benef,						id_reembolso_sus,
							id_reem_par_int,										id_rn,							nm_beneficiario,
							nm_prestador,											nm_usuario,						nm_usuario_nrec,
							nr_cnpj_cpf,											nr_lote,						nr_nota,
							nr_nota_numerico,										nr_seq_conta,						nr_seq_fatura,
							nr_seq_prest_inter,										tp_carater_atend,					tp_pessoa,
							tp_sexo)							
						values (	nextval('ptu_nota_cobranca_rrs_seq'),								vet_tab_ressarcimento_sus_w[i].cd_cnes_proc,		vet_tab_ressarcimento_sus_w[i].cd_unimed_dad_ben,
							clock_timestamp(),											clock_timestamp(),						ptu_a500_imp_pck.converte_data(vet_tab_ressarcimento_sus_w[i].dt_nasc_dad_ben),
							null,												vet_tab_ressarcimento_sus_w[i].id_benef_dad_ben,	2,
							null,												vet_tab_ressarcimento_sus_w[i].id_rn_dad_ben,		vet_tab_ressarcimento_sus_w[i].nm_benef_dad_ben,
							vet_tab_ressarcimento_sus_w[i].nm_prestador,							nm_usuario_p,						nm_usuario_p,
							coalesce(vet_tab_ressarcimento_sus_w[i].cd_cpf_prest,vet_tab_ressarcimento_sus_w[i].cd_cnpj_prest),	null,							null,
							null,												null,							nr_seq_ptu_fatura_w,
							null,												vet_tab_ressarcimento_sus_w[i].carater_atendimento,	tp_pessoa_w,
							vet_tab_ressarcimento_sus_w[i].tp_sexo_dad_ben) returning nr_sequencia into nr_seq_nota_cobr_rrs_w;

		for j in 1..vet_tab_res_sus_proc_w.count loop
			if (vet_tab_res_sus_proc_w[j].id = vet_tab_ressarcimento_sus_w[i].id) then
				
				vet_tab_res_sus_proc_w[j].vl_pago_sus_proc	:= to_number(replace(vet_tab_res_sus_proc_w[j].vl_pago_sus_proc, ',','.'), '999999999999.99');
				vet_tab_res_sus_proc_w[j].qt_cobrada_proc	:= to_number(replace(vet_tab_res_sus_proc_w[j].qt_cobrada_proc, ',','.'), '99999.9999');
				
				if (length(vet_tab_res_sus_proc_w[j].cd_servico_proc) = 10) then
					
					ie_tipo_tabela_w	:= substr(vet_tab_res_sus_proc_w[j].cd_servico_proc,1,2);
				
					ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(ie_tipo_tabela_w, vet_tab_res_sus_proc_w[j].cd_servico_proc, 'R', null);
					cd_servico_w		:= ptu_conversao_item_tabela(ie_tipo_tabela_w, vet_tab_res_sus_proc_w[j].cd_servico_proc, null);
				else
					cd_servico_w		:= vet_tab_res_sus_proc_w[j].cd_servico_proc;
				end if;
				
				-- INSERT NA PTU_NOTA_SERVICO_RRS - RESSARCIMENTO SUS

				insert into ptu_nota_servico_rrs(	nr_sequencia,							cd_procedimento,					cd_servico,
									ds_servico,							dt_atualizacao,						dt_atualizacao_nrec,
									dt_servico,							ie_origem_proced,					nm_profissional,
									nm_usuario,							nm_usuario_nrec,					nr_autoriz,
									nr_cons_prof,							nr_lote,						nr_nota,
									nr_nota_numerico,						nr_seq_a500,						nr_seq_conta_mat,
									nr_seq_conta_proc,						nr_seq_material,					nr_seq_nota_cobr_rrs,
									nr_seq_proc_partic,						qt_cobrada,						sg_cons_prof,
									sg_uf_cons_prof,						tp_particip,						ie_tipo_tabela_tiss,
									vl_dif_vl_inter,						vl_pago_benef,						vl_serv_cob,
									cd_item_unico,							cd_servico_tiss)			
								values (	nextval('ptu_nota_servico_rrs_seq'),				cd_servico_w,						cd_servico_w,
									vet_tab_res_sus_proc_w[j].ds_servico_proc,			clock_timestamp(),						clock_timestamp(),
									ptu_a500_imp_pck.converte_data(vet_tab_res_sus_proc_w[j].dt_exec_proc),		null,							null,
									nm_usuario_p,							nm_usuario_p,						null,
									null,								null,							null,
									null,								null,							null,
									null,								null,							nr_seq_nota_cobr_rrs_w,
									null,								vet_tab_res_sus_proc_w[j].qt_cobrada_proc,		null,
									null,								null,							null,
									0,								0,							vet_tab_res_sus_proc_w[j].vl_pago_sus_proc,
									vet_tab_res_sus_proc_w[j].id_item_unico_proc,			vet_tab_res_sus_proc_w[j].cd_servico_proc);
			end if;
		end loop;
		
		update	ptu_fatura
		set	ie_tipo_arquivo_cob	= '507'
		where	nr_sequencia		= nr_seq_ptu_fatura_w;
	end loop;
end loop;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a500_imp_pck.carregar_arq_a500_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_fatura_p INOUT bigint) FROM PUBLIC;
