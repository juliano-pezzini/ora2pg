-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE execucao_prescricao_pck.procedimento_pac_after_post ( nr_atendimento_p INOUT bigint, nr_prescricao_p INOUT bigint, nr_sequencia_prescricao_p INOUT bigint, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint, ie_acao_executada_p INOUT bigint, dt_procedimento_p INOUT timestamp, dt_entrada_unidade_p INOUT timestamp, nr_seq_atepacu_p INOUT bigint, qt_procedimento_p INOUT bigint, nr_seq_proc_princ_p INOUT bigint, nr_sequencia_p INOUT bigint, cd_medico_executor_p INOUT text, nr_interno_conta_p INOUT bigint, cd_pessoa_fisica_p INOUT text, nr_seq_proc_interno_p INOUT bigint, cd_setor_atendimento_p INOUT bigint, cd_convenio_p INOUT bigint, cd_categoria_p INOUT text, nr_doc_convenio_p INOUT text, ie_tipo_atendimento_p INOUT bigint, cd_local_estoque_p INOUT bigint, nr_seq_cor_exec_p bigint, nr_cirurgia_p bigint, nr_seq_audit_chamada_p bigint, nr_seq_motivo_audit_p bigint, ie_tipo_convenio_p bigint, ie_barras_p text, ie_erro_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


	
	current_setting('execucao_prescricao_pck.ie_classificacao_w')::procedimento.ie_classificacao%type		procedimento.ie_classificacao%type;
	cd_tipo_procedimento_w	procedimento.cd_tipo_procedimento%type;
	nr_seq_agenda_w		agenda_paciente.nr_sequencia%type;
	nr_seq_proc_pric_w	bigint;
	
	
BEGIN
	
	obter_param_usuario(24, 232, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.ie_parametro_232_w')::varchar(1));
	obter_param_usuario(24, 279, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.ie_parametro_279_w')::varchar(1));
	obter_param_usuario(24, 87, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.ie_parametro_87_w')::varchar(1));
	obter_param_usuario(24, 44, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.qt_parametro_44_w')::bigint);
	obter_param_usuario(24, 126, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.ie_parametro_126_w')::varchar(1));
	obter_param_usuario(24, 220, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, current_setting('execucao_prescricao_pck.ie_parametro_220_w')::varchar(1));
	
	current_setting('execucao_prescricao_pck.ds_erro_w')::varchar(2000) := execucao_prescricao_pck.valida_procedimento(nr_atendimento_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_proc_interno_p, cd_pessoa_fisica_p, 0, nm_usuario_p, current_setting('execucao_prescricao_pck.ds_erro_w')::varchar(2000));
	
	if (current_setting('execucao_prescricao_pck.ds_erro_w')::(varchar(2000) IS NOT NULL AND (varchar(2000))::text <> '')) then
		CALL execucao_prescricao_pck.gerar_w_execucao_proc_mat(nr_atendimento_p, current_setting('execucao_prescricao_pck.ds_erro_w')::varchar(2000), null, 'N', cd_procedimento_p, null, ie_origem_proced_p, nm_usuario_p);
		if (ie_acao_executada_p = 1) and (nr_seq_cor_exec_p = 0) then
			update	procedimento_paciente
			set	nr_seq_cor_exec = 95
			where	nr_sequencia = nr_sequencia_p;
		end if;
	end if;

	select	max(ie_classificacao),
		max(cd_tipo_procedimento)
	into STRICT	current_setting('execucao_prescricao_pck.ie_classificacao_w')::procedimento.ie_classificacao%type,
		cd_tipo_procedimento_w
	from procedimento
	where	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p;
	
	if (current_setting('execucao_prescricao_pck.ie_classificacao_w')::procedimento.ie_classificacao%type in (1,8)) then
		CALL atualiza_preco_procedimento(nr_sequencia_p, cd_convenio_p, nm_usuario_p);
		if (ie_acao_executada_p = 1) and (current_setting('execucao_prescricao_pck.ie_parametro_232_w')::varchar(1) <> 'S') then
			PERFORM set_config('execucao_prescricao_pck.qt_existe_w', 1, false);
		else
			CALL gerar_taxa_sala_porte(
					nr_atendimento_p,
					dt_entrada_unidade_p,
					dt_procedimento_p,
					cd_procedimento_p,
					nr_sequencia_p,
					nm_usuario_p);
		end if;
	else
		CALL atualiza_preco_procedimento(nr_sequencia_p, cd_convenio_p, nm_usuario_p);
	end if;
	
	if (current_setting('execucao_prescricao_pck.ie_parametro_279_w')::varchar(1) = 'S') then
		CALL atualizar_agenda_propaci(nr_sequencia_p);
	end if;
	
	if (ie_tipo_atendimento_p = 1) and (ie_tipo_convenio_p = 3) and (ie_origem_proced_p = 2) and (current_setting('execucao_prescricao_pck.ie_parametro_87_w')::varchar(1) = 'S') then
		CALL gerar_laudo_sus_aih(nr_sequencia_p);
	end if;
	
	if (ie_acao_executada_p = 1) then
		CALL gerar_gatilho_pacote(
					nr_sequencia_p,
					cd_convenio_p,
					'S',
					nm_usuario_p);
	end if;
	
	nr_seq_agenda_w := null;
	
	if (nr_cirurgia_p IS NOT NULL AND nr_cirurgia_p::text <> '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_agenda_w
		from	agenda_paciente
		where nr_cirurgia = nr_cirurgia_p;
	end if;
	
	begin
	CALL gerar_autor_regra(
				nr_atendimento_p,
				null,
				nr_sequencia_p,
				null,
				null,
				null,
				'EP',
				nm_usuario_p,
				nr_seq_agenda_w,
				nr_seq_proc_interno_p,
				null,
				null,
				null,
				null,
				null,
				null,
				null);
	exception
	when others then
		null;
	end;
	
	/*
	
	Rever:
	
			if (Procedimento_Paciente_q.FieldByName('ie_auditoria').AsString = 'S') then
				Selecao_Motivo_Auditoria_Modal(UVar.VarFormAtual, Procedimento_Paciente_q.FieldByName('nr_sequencia').AsInteger);
	
	
	*/

	if (ie_barras_p = 'S') then
		CALL atualizar_lista_itens_audit(
					nr_interno_conta_p,
					nr_sequencia_p,
					2,
					qt_procedimento_p,
					nm_usuario_p,
					nr_seq_motivo_audit_p,
					nr_seq_audit_chamada_p,
					'N');
	end if;
	

	if (ie_acao_executada_p = 1) and (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
		if (current_setting('execucao_prescricao_pck.qt_parametro_44_w')::bigint = 0) then
			if (nr_seq_audit_chamada_p <> 0) then
				CALL gerar_lanc_automatico_audit(
					nr_atendimento_p,
					null,
					34,
					nm_usuario_p,
					nr_sequencia_p,
					nr_seq_audit_chamada_p,
					null,
					null,
					null,
					null,
					nr_interno_conta_p);
			else
				CALL gerar_lancamento_automatico(
					nr_atendimento_p,
					null,
					34,
					nm_usuario_p,
					nr_sequencia_p,
					null,
					null,
					null,
					null,
					nr_interno_conta_p);				
			end if;
		elsif (current_setting('execucao_prescricao_pck.qt_parametro_44_w')::bigint = 1) then
			PERFORM set_config('execucao_prescricao_pck.qt_existe_w', 0, false);
			/*
			      1 : begin
				  Selecao_Lancto_Automatico(Screen.ActiveForm, DataSet.FieldByName('nr_sequencia').AsInteger);
				  nr_sequencia_proc_p := Procedimento_Paciente_q.FieldByName('nr_sequencia').AsInteger;
				  if (DataSet.FieldByName('nr_seq_cor_exec').asInteger <> 96) then
					begin
					Ativa_Query(Procedimento_Paciente_q, True);
					Procedimento_Paciente_q.Last;
					Abort;
					end;
				  end;*/

		end if;
	end if;
	
	if (ie_acao_executada_p = 1) and (current_setting('execucao_prescricao_pck.ie_parametro_126_w')::varchar(1) = 'S') then
		obter_kit_procedimento(
				nr_atendimento_p,
				get_estabelecimento,
				cd_procedimento_p,
				ie_origem_proced_p,
				nr_seq_proc_interno_p,
				cd_setor_atendimento_p,
				cd_medico_executor_p,
				current_setting('execucao_prescricao_pck.cd_kit_material_w')::kit_material.cd_kit_material%type);
		gerar_kit_material_exec(
				current_setting('execucao_prescricao_pck.cd_kit_material_w')::kit_material.cd_kit_material%type,
				dt_procedimento_p,
				nr_prescricao_p,
				'N',
				cd_local_estoque_p,
				nr_seq_proc_princ_p,
				nr_seq_atepacu_p,
				current_setting('execucao_prescricao_pck.ie_parametro_13_w')::varchar(1),
				nm_usuario_p,
				1,
				current_setting('execucao_prescricao_pck.ds_erro_w')::varchar(2000),
				nr_doc_convenio_p,
				null);

		if (current_setting('execucao_prescricao_pck.ds_erro_w')::(varchar(2000) IS NOT NULL AND (varchar(2000))::text <> '')) then
			CALL execucao_prescricao_pck.gerar_w_execucao_proc_mat(nr_atendimento_p, current_setting('execucao_prescricao_pck.ds_erro_w')::varchar(2000), null, 'N', cd_procedimento_p, null, ie_origem_proced_p, nm_usuario_p);
		end if;
		
	end if;
	
	if (current_setting('execucao_prescricao_pck.ie_parametro_220_w')::varchar(1) = 'S') then
		select	max(sus_validar_regra(9,cd_procedimento_real,ie_origem_proc_real,dt_inicial))
		into STRICT	current_setting('execucao_prescricao_pck.qt_existe_w')::bigint
		from	sus_aih_unif
		where	nr_interno_conta = nr_interno_conta_p;
		
		if (current_setting('execucao_prescricao_pck.qt_existe_w')::bigint = 0) then
			select	max(sus_validar_regra(10,cd_procedimento_real,ie_origem_proc_real,dt_inicial))
			into STRICT	current_setting('execucao_prescricao_pck.qt_existe_w')::bigint
			from	sus_aih_unif
			where	nr_interno_conta = nr_interno_conta_p;
			if (current_setting('execucao_prescricao_pck.qt_existe_w')::bigint = 0) then
				select	sus_validar_regra(4,cd_procedimento,ie_origem_proced,dt_procedimento)
				into STRICT	current_setting('execucao_prescricao_pck.qt_existe_w')::bigint
				from	procedimento_paciente
				where	nr_sequencia = nr_sequencia_p;
				if (current_setting('execucao_prescricao_pck.qt_existe_w')::bigint <> 0) then
					 select	max(nr_sequencia)
					 into STRICT	nr_seq_proc_pric_w
					 from	procedimento_paciente
					 where	nr_interno_conta = nr_interno_conta_p
					 and	coalesce(cd_motivo_exc_conta::text, '') = ''
					 and	((somente_numero(Sus_Obter_Proced_Aih_Unif(nr_interno_conta,2,'C')) = cd_procedimento and Sus_Obter_se_Proc_Compativel(cd_procedimento_p,7,cd_procedimento) = 'S') or
							Sus_Obter_se_Proc_Compativel(cd_procedimento_p,7,cd_procedimento) = 'S');
					if (nr_seq_proc_pric_w IS NOT NULL AND nr_seq_proc_pric_w::text <> '') then
						update	procedimento_paciente
						set	nr_seq_proc_princ = nr_seq_proc_pric_w
						where	nr_sequencia = nr_sequencia_p;
					end if;
				end if;
			end if;
		end if;
	end if;
	
	end;
	

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE execucao_prescricao_pck.procedimento_pac_after_post ( nr_atendimento_p INOUT bigint, nr_prescricao_p INOUT bigint, nr_sequencia_prescricao_p INOUT bigint, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint, ie_acao_executada_p INOUT bigint, dt_procedimento_p INOUT timestamp, dt_entrada_unidade_p INOUT timestamp, nr_seq_atepacu_p INOUT bigint, qt_procedimento_p INOUT bigint, nr_seq_proc_princ_p INOUT bigint, nr_sequencia_p INOUT bigint, cd_medico_executor_p INOUT text, nr_interno_conta_p INOUT bigint, cd_pessoa_fisica_p INOUT text, nr_seq_proc_interno_p INOUT bigint, cd_setor_atendimento_p INOUT bigint, cd_convenio_p INOUT bigint, cd_categoria_p INOUT text, nr_doc_convenio_p INOUT text, ie_tipo_atendimento_p INOUT bigint, cd_local_estoque_p INOUT bigint, nr_seq_cor_exec_p bigint, nr_cirurgia_p bigint, nr_seq_audit_chamada_p bigint, nr_seq_motivo_audit_p bigint, ie_tipo_convenio_p bigint, ie_barras_p text, ie_erro_p INOUT text, nm_usuario_p text) FROM PUBLIC;
