-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_visita_tecnica_prest_pck.registrar_acao_inconsistencia ( nr_seq_inconsistencia_p pls_visita_tecnica_inco.nr_sequencia%type, ds_acao_prestador_p pls_visita_tecnica_inco.ds_acao_prestador%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text) AS $body$
DECLARE

nr_seq_visita_w			pls_visita_tecnica_inco.nr_seq_visita%type;
ie_status_w			pls_visita_tecnica_inco.ie_status%type;
qt_inconsistencia_pendente_w	integer;
qt_alteracao_prazo_pendente_w	integer;

BEGIN

begin
select	nr_seq_visita,
	ie_status
into STRICT	nr_seq_visita_w,
	ie_status_w
from	pls_visita_tecnica_inco
where	nr_sequencia		= nr_seq_inconsistencia_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1207549); --Registro invalido
end;

if (ie_status_w <> 2) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1211083); --A acao para a inconsistencia so pode ser registrada quando o status for Aguardando retorno
end if;

update	pls_visita_tecnica_inco
set	ie_status		= 3,
	ds_acao_prestador	= ds_acao_prestador_p,
	dt_liberacao		= clock_timestamp(),
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p
where	nr_sequencia		= nr_seq_inconsistencia_p;

select	max(nr_sequencia)
into STRICT	qt_alteracao_prazo_pendente_w
from	pls_visita_tecnica_hist
where	nr_seq_inconsistencia		= nr_seq_inconsistencia_p
and	ie_status_prazo_inconsistencia	= 1;

if (qt_alteracao_prazo_pendente_w > 0) then
	update	pls_visita_tecnica_hist
	set	ie_status_prazo_inconsistencia	= 4,
		dt_atualizacao			= clock_timestamp(),
		nm_usuario			= nm_usuario_p
	where	nr_seq_inconsistencia		= nr_seq_inconsistencia_p
	and	ie_status_prazo_inconsistencia	= 1;
end if;

select	count(1)
into STRICT	qt_inconsistencia_pendente_w
from	pls_visita_tecnica_inco
where	nr_seq_visita	= nr_seq_visita_w
and	ie_status	= 2;

if (qt_inconsistencia_pendente_w = 0) then
	update	pls_visita_tecnica
	set	ie_status	= 7,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia	= nr_seq_visita_w;
	
	CALL CALL pls_visita_tecnica_prest_pck.gravar_log_sistema(	nr_seq_visita_p	=> nr_seq_visita_w,
				ie_tipo_log_p	=> 13,
				ds_log_p	=> wheb_mensagem_pck.get_texto(1211087),
				nm_usuario_p	=> nm_usuario_p,
				ie_commit_p	=> 'N');
	
	CALL CALL pls_visita_tecnica_prest_pck.gerar_alerta_evento(	nr_seq_visita_p		=> nr_seq_visita_w,
				ie_tipo_processo_p	=> 12,
				nm_usuario_p		=> nm_usuario_p,
				ie_commit_p		=> 'N');
end if;

if (ie_commit_p = 'S') then
	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_visita_tecnica_prest_pck.registrar_acao_inconsistencia ( nr_seq_inconsistencia_p pls_visita_tecnica_inco.nr_sequencia%type, ds_acao_prestador_p pls_visita_tecnica_inco.ds_acao_prestador%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text) FROM PUBLIC;
