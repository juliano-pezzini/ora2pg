-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_canc_pgto_prest_pck.cancelar_ie_tipo_item_8 ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_pp_prest_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


tb_cd_classif_cred_w		pls_util_cta_pck.t_varchar2_table_50;
tb_cd_classif_cred_apres_w	pls_util_cta_pck.t_varchar2_table_50;
tb_cd_classif_cred_pag_w	pls_util_cta_pck.t_varchar2_table_50;
tb_cd_classif_deb_w		pls_util_cta_pck.t_varchar2_table_50;
tb_cd_classif_deb_apres_w	pls_util_cta_pck.t_varchar2_table_50;
tb_cd_classif_deb_pag_w		pls_util_cta_pck.t_varchar2_table_50;
tb_cd_conta_cred_w		pls_util_cta_pck.t_varchar2_table_20;
tb_cd_conta_cred_apres_w	pls_util_cta_pck.t_varchar2_table_20;
tb_cd_conta_cred_pag_w		pls_util_cta_pck.t_varchar2_table_20;
tb_cd_conta_deb_w		pls_util_cta_pck.t_varchar2_table_20;
tb_cd_conta_deb_apres_w		pls_util_cta_pck.t_varchar2_table_20;
tb_cd_conta_deb_pag_w		pls_util_cta_pck.t_varchar2_table_20;
tb_cd_historico_w		pls_util_cta_pck.t_number_table;
tb_cd_historico_apres_w		pls_util_cta_pck.t_number_table;
tb_cd_historico_pag_w		pls_util_cta_pck.t_number_table;
tb_dt_competencia_pgto_w	pls_util_cta_pck.t_date_table;
tb_ie_ato_cooperado_w		pls_util_cta_pck.t_varchar2_table_1;
tb_nr_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_rec_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_esquema_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_esquema_apres_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_esquema_pag_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_grupo_ans_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_mat_rec_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_pag_item_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_pp_evento_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_pp_lote_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_exec_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_pgto_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_proc_partic_rec_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_proc_rec_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_regra_cooperado_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_segurado_w		pls_util_cta_pck.t_number_table;
tb_vl_glosa_w			pls_util_cta_pck.t_number_table;
tb_vl_liberado_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_resumo_rec_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_res_rec_est_w		pls_util_cta_pck.t_number_table;

c01 CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type,
		nr_seq_pp_prest_pc	pls_pp_prestador.nr_sequencia%type) FOR
	SELECT	d.cd_classif_cred, d.cd_classif_cred_apres, d.cd_classif_cred_pag,
		d.cd_classif_deb, d.cd_classif_deb_apres, d.cd_classif_deb_pag,
		d.cd_conta_cred, d.cd_conta_cred_apres, d.cd_conta_cred_pag,
		d.cd_conta_deb, d.cd_conta_deb_apres, d.cd_conta_deb_pag,
		d.cd_historico, d.cd_historico_apres, d.cd_historico_pag,
		d.dt_competencia_pgto, d.ie_ato_cooperado, d.nr_seq_conta,
		d.nr_seq_conta_rec, d.nr_seq_esquema, d.nr_seq_esquema_apres,
		d.nr_seq_esquema_pag, d.nr_seq_grupo_ans, d.nr_seq_mat_rec,
		d.nr_seq_pp_evento, d.nr_seq_pp_lote, d.nr_seq_prestador_exec,
		d.nr_seq_prestador_pgto, d.nr_seq_proc_partic_rec, d.nr_seq_proc_rec, 
		d.nr_seq_regra_cooperado, d.nr_seq_segurado, d.vl_glosa, 
		d.vl_liberado, d.nr_sequencia
	from	pls_pp_prest_event_prest a,
		pls_pp_it_prest_event_val b,
		pls_pp_item_lote c,
		pls_conta_rec_resumo_item d
	where	a.nr_seq_pp_prest = nr_seq_pp_prest_pc
	and	b.nr_seq_prest_even_val = a.nr_seq_pp_prest_even_val
	and	c.nr_seq_lote = nr_seq_lote_pc
	and	c.nr_sequencia = b.nr_seq_item_lote
	and	c.ie_tipo_item = '8'
	and	d.nr_sequencia = c.nr_seq_resumo_rec;


BEGIN
-- retorna todos os registros de recurso de glosa vinculados ao pagamento que esta sendo cancelado

open c01(nr_seq_lote_p, nr_seq_pp_prest_p);
loop
	fetch c01 bulk collect into 	tb_cd_classif_cred_w, tb_cd_classif_cred_apres_w, tb_cd_classif_cred_pag_w,
					tb_cd_classif_deb_w, tb_cd_classif_deb_apres_w, tb_cd_classif_deb_pag_w,
					tb_cd_conta_cred_w, tb_cd_conta_cred_apres_w, tb_cd_conta_cred_pag_w,
					tb_cd_conta_deb_w, tb_cd_conta_deb_apres_w, tb_cd_conta_deb_pag_w,
					tb_cd_historico_w, tb_cd_historico_apres_w, tb_cd_historico_pag_w,
					tb_dt_competencia_pgto_w, tb_ie_ato_cooperado_w, tb_nr_seq_conta_w,
					tb_nr_seq_conta_rec_w, tb_nr_seq_esquema_w, tb_nr_seq_esquema_apres_w,
					tb_nr_seq_esquema_pag_w, tb_nr_seq_grupo_ans_w, tb_nr_seq_mat_rec_w,
					tb_nr_seq_pp_evento_w, tb_nr_seq_pp_lote_w, tb_nr_seq_prestador_exec_w,
					tb_nr_seq_prestador_pgto_w, tb_nr_seq_proc_partic_rec_w, tb_nr_seq_proc_rec_w, 
					tb_nr_seq_regra_cooperado_w, tb_nr_seq_segurado_w, tb_vl_glosa_w, 
					tb_vl_liberado_w, tb_nr_seq_resumo_rec_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_resumo_rec_w.count = 0;

	-- inativa o registro na tabela de resumo

	forall i in tb_nr_seq_resumo_rec_w.first..tb_nr_seq_resumo_rec_w.last
		update	pls_conta_rec_resumo_item
		set	ie_situacao = 'I'
		where	nr_sequencia = tb_nr_seq_resumo_rec_w(i);
	commit;

	-- insere um registro de estorno

	forall i in tb_vl_liberado_w.first..tb_vl_liberado_w.last
		insert into pls_conta_rec_resumo_item(
			cd_classif_cred, cd_classif_cred_apres, cd_classif_cred_pag,
			cd_classif_deb, cd_classif_deb_apres, cd_classif_deb_pag,
			cd_conta_cred, cd_conta_cred_apres, cd_conta_cred_pag,
			cd_conta_deb, cd_conta_deb_apres, cd_conta_deb_pag,
			cd_historico, cd_historico_apres, cd_historico_pag,
			dt_atualizacao, dt_atualizacao_nrec, dt_competencia_pgto,
			ie_ato_cooperado, ie_situacao, nm_usuario,
			nm_usuario_nrec, nr_lote_contabil, nr_lote_contabil_apres,
			nr_lote_contabil_pag, nr_seq_conta, nr_seq_conta_rec,
			nr_seq_esquema, nr_seq_esquema_apres, nr_seq_esquema_pag,
			nr_seq_grupo_ans, nr_seq_mat_rec, nr_seq_pp_evento,
			nr_seq_pp_lote, nr_seq_prestador_exec, nr_seq_prestador_pgto, 
			nr_seq_proc_partic_rec, nr_seq_proc_rec, nr_seq_regra_cooperado, 
			nr_seq_segurado, nr_sequencia, vl_glosa, 
			vl_liberado
		) values (
			tb_cd_classif_cred_w(i), tb_cd_classif_cred_apres_w(i), tb_cd_classif_cred_pag_w(i),
			tb_cd_classif_deb_w(i), tb_cd_classif_deb_apres_w(i), tb_cd_classif_deb_pag_w(i),
			tb_cd_conta_cred_w(i), tb_cd_conta_cred_apres_w(i), tb_cd_conta_cred_pag_w(i),
			tb_cd_conta_deb_w(i), tb_cd_conta_deb_apres_w(i), tb_cd_conta_deb_pag_w(i),
			tb_cd_historico_w(i), tb_cd_historico_apres_w(i), tb_cd_historico_pag_w(i),
			clock_timestamp(), clock_timestamp(), tb_dt_competencia_pgto_w(i),
			tb_ie_ato_cooperado_w(i), 'I', nm_usuario_p,
			nm_usuario_p, 0, 0,
			0, tb_nr_seq_conta_w(i), tb_nr_seq_conta_rec_w(i), 
			tb_nr_seq_esquema_w(i), tb_nr_seq_esquema_apres_w(i), tb_nr_seq_esquema_pag_w(i), 
			tb_nr_seq_grupo_ans_w(i), tb_nr_seq_mat_rec_w(i), tb_nr_seq_pp_evento_w(i), 
			tb_nr_seq_pp_lote_w(i), tb_nr_seq_prestador_exec_w(i), tb_nr_seq_prestador_pgto_w(i), 
			tb_nr_seq_proc_partic_rec_w(i), tb_nr_seq_proc_rec_w(i), tb_nr_seq_regra_cooperado_w(i), 
			tb_nr_seq_segurado_w(i), nextval('pls_conta_rec_resumo_item_seq'), tb_vl_glosa_w(i) * -1, 
			tb_vl_liberado_w(i) * -1
		) returning nr_sequencia bulk collect into tb_nr_seq_res_rec_est_w;
	commit;

	-- vincula o registro de estorno na resumo do recurso com o registro de estorno na pls_pp_item_lote

	forall i in tb_nr_seq_res_rec_est_w.first..tb_nr_seq_res_rec_est_w.last
		update	pls_pp_item_lote
		set	nr_seq_resumo_rec = tb_nr_seq_res_rec_est_w(i)
		where	nr_seq_origem_estorno = tb_nr_seq_resumo_rec_w(i);
	commit;
	
	-- insere um novo registro pendente de pagamento

	forall i in tb_vl_liberado_w.first..tb_vl_liberado_w.last
		insert into pls_conta_rec_resumo_item(
			cd_classif_cred, cd_classif_cred_apres, cd_classif_cred_pag,
			cd_classif_deb, cd_classif_deb_apres, cd_classif_deb_pag,
			cd_conta_cred, cd_conta_cred_apres, cd_conta_cred_pag,
			cd_conta_deb, cd_conta_deb_apres, cd_conta_deb_pag,
			cd_historico, cd_historico_apres, cd_historico_pag,
			dt_atualizacao, dt_atualizacao_nrec, dt_competencia_pgto,
			ie_ato_cooperado, ie_situacao, nm_usuario,
			nm_usuario_nrec, nr_lote_contabil, nr_lote_contabil_apres,
			nr_lote_contabil_pag, nr_seq_conta, nr_seq_conta_rec,
			nr_seq_esquema, nr_seq_esquema_apres, nr_seq_esquema_pag,
			nr_seq_grupo_ans, nr_seq_mat_rec, nr_seq_pp_evento,
			nr_seq_pp_lote, nr_seq_prestador_exec, nr_seq_prestador_pgto, 
			nr_seq_proc_partic_rec, nr_seq_proc_rec, nr_seq_regra_cooperado, 
			nr_seq_segurado, nr_sequencia, vl_glosa, 
			vl_liberado
		) values (
			tb_cd_classif_cred_w(i), tb_cd_classif_cred_apres_w(i), tb_cd_classif_cred_pag_w(i),
			tb_cd_classif_deb_w(i), tb_cd_classif_deb_apres_w(i), tb_cd_classif_deb_pag_w(i),
			tb_cd_conta_cred_w(i), tb_cd_conta_cred_apres_w(i), tb_cd_conta_cred_pag_w(i),
			tb_cd_conta_deb_w(i), tb_cd_conta_deb_apres_w(i), tb_cd_conta_deb_pag_w(i),
			tb_cd_historico_w(i), tb_cd_historico_apres_w(i), tb_cd_historico_pag_w(i),
			clock_timestamp(), clock_timestamp(), tb_dt_competencia_pgto_w(i),
			tb_ie_ato_cooperado_w(i), 'A', nm_usuario_p,
			nm_usuario_p, 0, 0,
			0, tb_nr_seq_conta_w(i), tb_nr_seq_conta_rec_w(i), 
			tb_nr_seq_esquema_w(i), tb_nr_seq_esquema_apres_w(i), tb_nr_seq_esquema_pag_w(i), 
			tb_nr_seq_grupo_ans_w(i), tb_nr_seq_mat_rec_w(i), tb_nr_seq_pp_evento_w(i), 
			null, tb_nr_seq_prestador_exec_w(i), tb_nr_seq_prestador_pgto_w(i), 
			tb_nr_seq_proc_partic_rec_w(i), tb_nr_seq_proc_rec_w(i), tb_nr_seq_regra_cooperado_w(i), 
			tb_nr_seq_segurado_w(i), nextval('pls_conta_rec_resumo_item_seq'), tb_vl_glosa_w(i), 
			tb_vl_liberado_w(i)
		);
	commit;
end loop;
close c01;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_canc_pgto_prest_pck.cancelar_ie_tipo_item_8 ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_pp_prest_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
