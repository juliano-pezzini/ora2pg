-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_canc_pgto_prest_pck.estornar_item_lote_prest ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prest_estor_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


tb_nr_pr_ev_val_est_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_it_lote_w	pls_util_cta_pck.t_number_table;
tb_dt_item_w		pls_util_cta_pck.t_date_table;
tb_ie_tipo_contrat_w	pls_util_cta_pck.t_varchar2_table_5;
tb_ie_tipo_item_w	pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_evento_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_orig_w	pls_util_cta_pck.t_number_table;
tb_vl_acao_negativo_w	pls_util_cta_pck.t_number_table;
tb_vl_desc_tributo_w	pls_util_cta_pck.t_number_table;
tb_vl_glosa_w		pls_util_cta_pck.t_number_table;
tb_vl_item_w		pls_util_cta_pck.t_number_table;
tb_vl_liquido_w		pls_util_cta_pck.t_number_table;
tb_nr_item_lote_est_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_lanc_prog_w	pls_util_cta_pck.t_number_table;
tb_nr_lanc_prog_regra_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_it_aprop_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_disc_evento_w	pls_util_cta_pck.t_number_table;

c01 CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type,
		nr_seq_prest_estor_pc	pls_pp_prestador.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia nr_seq_pr_ev_val_est,
		d.nr_sequencia nr_seq_it_lote,
		d.dt_item,
		d.ie_tipo_contratacao,
		d.ie_tipo_item,
		d.nr_seq_evento,
		d.nr_seq_prestador,
		d.nr_seq_prestador_origem,
		d.vl_acao_negativo * -1,
		d.vl_desconto_tributo * -1,
		d.vl_glosa * -1,
		d.vl_item * -1,
		d.vl_liquido * -1,
		d.nr_seq_lanc_prog,
		d.nr_seq_lanc_prog_regra,
		d.nr_seq_pp_it_aprop,
		d.nr_seq_disc_evento
	from	pls_pp_prest_event_prest a,
		pls_pp_prest_evento_valor b,
		pls_pp_it_prest_event_val c,
		pls_pp_item_lote d
	where	a.nr_seq_pp_prest = nr_seq_prest_estor_pc
	and	b.nr_sequencia = a.nr_seq_pp_prest_even_val
	and	c.nr_seq_prest_even_val = b.nr_seq_origem_estorno
	and	d.nr_seq_lote = nr_seq_lote_pc
	and	d.nr_sequencia = c.nr_seq_item_lote;


BEGIN
-- busca os registros de estorno que ja foram gerados ate aqui, quando chega na tabela prest evento valor acessa o registro original

-- e com ele busca os registros vinculados a este da item lote

-- OBS.: os campos que identificam a regra de lancamento programado sao alimentados para que no proximo lote de pagamento

-- sejam entendido que e um estorno da regra que havia sido lancada

open c01(nr_seq_lote_p, nr_seq_prest_estor_p);
loop
	fetch c01 bulk collect into	tb_nr_pr_ev_val_est_w, tb_nr_seq_it_lote_w, tb_dt_item_w,
					tb_ie_tipo_contrat_w, tb_ie_tipo_item_w, tb_nr_seq_evento_w, 
					tb_nr_seq_prest_w, tb_nr_seq_prest_orig_w, tb_vl_acao_negativo_w, 
					tb_vl_desc_tributo_w, tb_vl_glosa_w, tb_vl_item_w, 
					tb_vl_liquido_w, tb_nr_seq_lanc_prog_w, tb_nr_lanc_prog_regra_w,
					tb_nr_seq_it_aprop_w, tb_nr_seq_disc_evento_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_it_lote_w.count = 0;

	-- insere os itens de estorno e retornar a sequencia dos itens inseridos, na tb_nr_pr_ev_val_est_w esta salvo a

	-- sequencia da tabela pls_pp_prest_evento_valor de estorno

	forall i in tb_nr_seq_it_lote_w.first..tb_nr_seq_it_lote_w.last
		insert into pls_pp_item_lote(
			nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
			dt_item, ie_acao_negativo, ie_cancelado,
			ie_tipo_contratacao, ie_tipo_item, nm_usuario,
			nm_usuario_nrec, nr_seq_evento, nr_seq_lote,
			nr_seq_origem_estorno, nr_seq_prestador, nr_seq_prestador_origem,
			vl_acao_negativo, vl_desconto_tributo, vl_glosa, 
			vl_item, vl_liquido, nr_seq_lanc_prog,
			nr_seq_lanc_prog_regra, nr_seq_pp_it_aprop, nr_seq_disc_evento
		) values (
			nextval('pls_pp_item_lote_seq'), clock_timestamp(), clock_timestamp(),
			tb_dt_item_w(i), 'N', 'S',
			tb_ie_tipo_contrat_w(i), tb_ie_tipo_item_w(i), nm_usuario_p,
			nm_usuario_p, tb_nr_seq_evento_w(i), nr_seq_lote_p,
			tb_nr_seq_it_lote_w(i), tb_nr_seq_prest_w(i), tb_nr_seq_prest_orig_w(i),
			tb_vl_acao_negativo_w(i), tb_vl_desc_tributo_w(i), tb_vl_glosa_w(i),
			tb_vl_item_w(i), tb_vl_liquido_w(i), tb_nr_seq_lanc_prog_w(i),
			tb_nr_lanc_prog_regra_w(i), tb_nr_seq_it_aprop_w(i), tb_nr_seq_disc_evento_w(i)
		) returning nr_sequencia bulk collect into tb_nr_item_lote_est_w;
	commit;

	-- pra cada registro inserido faz o vinculo com a tabela pls_pp_prest_evento_valor estorno

	forall i in tb_nr_item_lote_est_w.first..tb_nr_item_lote_est_w.last
		insert into pls_pp_it_prest_event_val(
			nr_sequencia, nr_seq_item_lote, nr_seq_prest_even_val
		) values (
			nextval('pls_pp_it_prest_event_val_seq'), tb_nr_item_lote_est_w(i), tb_nr_pr_ev_val_est_w(i)
		);
	commit;
end loop;
close c01;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_canc_pgto_prest_pck.estornar_item_lote_prest ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prest_estor_p pls_pp_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
