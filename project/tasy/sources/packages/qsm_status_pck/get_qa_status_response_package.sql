-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



----------------     GET_QA_STATUS_RESPONSE
CREATE OR REPLACE PROCEDURE qsm_status_pck.get_qa_status_response ( nr_sequencia_p bigint) AS $body$
DECLARE


ora2pg_rowcount int;
nm_usuario_w			intpd_fila_transmissao.nm_usuario%type;
nr_seq_regra_w			intpd_eventos_sistema.nr_seq_regra_conv%type;

nr_seq_doc_w 			episodio_pac_document.nr_sequencia%type;
nr_seq_regra_tl_w 		wl_worklist.nr_seq_regra%type;
cd_pessoa_fisica_w		episodio_paciente.cd_pessoa_fisica%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;

ds_case_w			varchar(32);
ds_client_w			varchar(32);
ds_id_w				varchar(32);
ds_usage_w			varchar(32);
ds_role_w			varchar(32);
ds_status_w			varchar(32);

xml_w				xml;
ds_xml_w			text;
ds_erro_w			varchar(4000);

C01 CURSOR(ds_xml_pc xml) FOR
	SELECT	qaStatus
	from	xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed/status' as "stat",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
			'soapenv:Envelope/soapenv:Body/stat:getQAStatusResponse' passing ds_xml_pc columns
			qaStatus	xml		path	'stat:qaStatus');

C10 CURSOR(ds_xml_pc xml) FOR
	SELECT	z.messages
	from	xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed/status' as "stat",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
			'soapenv:Envelope/soapenv:Body' passing ds_xml_pc columns
			getQAStatusResponse	xml		path	'stat:getQAStatusResponse') x,
		xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed/status' as "stat"),
			'stat:getQAStatusResponse' passing x.getQAStatusResponse columns
			messages 	xml		path	'stat:messages') z;

C02 CURSOR(xml_cp xml) FOR
	SELECT	ds_module
	from	xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed/status' as "stat",
			'http://www.mmm.com/his/qsmed' as "qai"),
			'stat:qaStatus' passing xml_cp columns
			ds_module	xml		path	'qai:module');

C03 CURSOR(xml_cp xml) FOR
	SELECT	ds_role,
		ds_status
	from	xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed' as "qai"),
			'qai:module' passing xml_cp columns
			status		xml		path	'qai:status') x,
		xmltable(
			xmlnamespaces(
			'http://www.mmm.com/his/qsmed' as "qai"),
			'qai:status' passing x.status columns
			ds_role		varchar(32)	path	'@role',
			ds_status	varchar(32)	path	'@status') z;
		
conversao_c CURSOR(nr_seq_regra_cp intpd_eventos_sistema.nr_seq_regra_conv%type, ds_role_cp text) FOR		
	SELECT	cd_interno
	from	conversao_meio_externo
	where	nm_tabela	= 'PERFIL'
	and	nm_atributo	= 'CD_PERFIL'
	and	cd_externo	= ds_role_cp
	and	nr_seq_regra = nr_seq_regra_cp
	group by cd_interno;
BEGIN
select	ds_xml_retorno,
		b.nr_seq_regra_conv,
		a.nm_usuario
into STRICT	ds_xml_w,
	nr_seq_regra_w,
	nm_usuario_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia		= nr_sequencia_p;

xml_w 	:= xmlparse(DOCUMENT, convert_from(, 'utf-8'));

for r_C01_w in C01(xml_w) loop
	begin

	begin
		select	ds_case,
			ds_client
		into STRICT	ds_case_w,
			ds_client_w
		from	xmltable(xmlnamespaces(
					'http://www.mmm.com/his/qsmed/status' as "stat"),
					'stat:qaStatus' passing r_C01_w.qaStatus columns
					ds_case		varchar2(32)	path	'@case',
					ds_client	varchar2(32)	path	'@client');
	exception
	when others then
		ds_case_w	:= null;
		ds_client_w	:= null;
	end;

	for r_C02_w in C02(r_C01_w.qaStatus) loop
		begin

		begin
			select	ds_id,
				ds_usage
			into STRICT	ds_id_w,
				ds_usage_w
			from	xmltable(xmlnamespaces(
						'http://www.mmm.com/his/qsmed/status' as "stat",
						'http://www.mmm.com/his/qsmed' as "qai"),
						'qai:module' passing r_C02_w.ds_module columns
						ds_id		varchar2(32)	path	'@id',
						ds_usage	varchar2(32)	path	'@usage');
		exception
		when others then
			ds_id_w		:= null;
			ds_usage_w	:= null;
		end;

		select	a.nr_sequencia,
				nr_seq_regra
		into STRICT	nr_seq_doc_w,
				nr_seq_regra_tl_w
		from	episodio_pac_document a,
				wl_worklist b,
				wl_item c
		where	a.nr_seq_episodio = b.nr_seq_episodio
		and		b.nr_seq_item = c.nr_sequencia
		and		a.nr_sequencia = b.nr_seq_document
		and	  	c.cd_categoria = 'QA'
		and   	coalesce(b.dt_final_real::text, '') = ''
		and		ds_client_id	= ds_client_w
		and		a.nr_seq_episodio	= ds_case_w
		and		ds_module_id	= ds_id_w;

		for r_C03_w in C03(r_C02_w.ds_module) loop
			begin

			if (nr_seq_doc_w IS NOT NULL AND nr_seq_doc_w::text <> '') then
				update	episodio_pac_doc_status
				set	nm_usuario	= nm_usuario_w,
					dt_atualizacao	= clock_timestamp(),
					ie_status	= r_C03_w.ds_status
				where	nr_seq_document	= nr_seq_doc_w
				and	ds_role		= r_C03_w.ds_role;
				
				GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;

				
				if ( ora2pg_rowcount < 1) then
					for r_conversao_w in conversao_c(nr_seq_regra_w, r_C03_w.ds_role) loop
						begin
						insert into episodio_pac_doc_status(
							nr_sequencia, nm_usuario, dt_atualizacao,
							nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_document,
							ie_status, ds_role, cd_perfil)
						values (
							nextval('episodio_pac_doc_status_seq'), nm_usuario_w, clock_timestamp(),
							nm_usuario_w, clock_timestamp(), nr_seq_doc_w,
							r_C03_w.ds_status, r_C03_w.ds_role, r_conversao_w.cd_interno);
						end;
					end loop;
				end if;
				
				select	cd_pessoa_fisica
				into STRICT	cd_pessoa_fisica_w
				from	episodio_paciente
				where	nr_sequencia	= ds_case_w;

				select	max(nr_atendimento)
				into STRICT	nr_atendimento_w
				from	atendimento_paciente
				where	nr_seq_episodio	= ds_case_w;

				if ((ds_role_w = 'ADM') and ((ds_status_w = 'RELEASED') or (ds_status_w = 'CANCELLED'))) then
					CALL wl_gerar_finalizar_tarefa('QA', 'F', nr_atendimento_w, cd_pessoa_fisica_w, nm_usuario_w, null, 'S', null, null, nr_seq_doc_w,
											  null, null, null, null, null, null, nr_seq_regra_tl_w);
				end if;
			end if;
			end;
		end loop;
		end;
	end loop;
	end;
end loop;

for r_C10_w in C10(xml_w) loop
	begin
	CALL qsm_messages_pck.qsm_process_message( nr_sequencia_p, r_C10_w.messages, 'S' );
	end;
end loop;

update	intpd_fila_transmissao
set	ie_status		= 'S',
	ie_response_procedure	= 'S',
	dt_atualizacao		= clock_timestamp()
where	nr_sequencia		= nr_sequencia_p;
commit;
exception
when others then
	ds_erro_w	:= substr(sqlerrm,1,4000);
	rollback;

	update	intpd_fila_transmissao
	set	ie_status		= 'E',
		ie_response_procedure	= 'S',
		ds_log			= ds_erro_w,
		dt_atualizacao		= clock_timestamp()
	where	nr_sequencia		= nr_sequencia_p;

	commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE qsm_status_pck.get_qa_status_response ( nr_sequencia_p bigint) FROM PUBLIC;
