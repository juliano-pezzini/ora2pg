-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION telematic_json_pck.get_muster_cancelation ( nr_sequencia_p EAU_ISSUE_DATA.NR_SEQUENCIA%type ) RETURNS PHILIPS_JSON AS $body$
DECLARE


nr_seq_atestado_paciente_w	EAU_ISSUE_DATA.NR_SEQ_ATESTADO_PACIENTE%type;
ds_eau_id_w					EAU_ISSUE_DATA.DS_EAU_ID%type;

json_w						PHILIPS_JSON;
json_bundle_w				PHILIPS_JSON;
json_composition_w 			PHILIPS_JSON;
json_practitioner_w			PHILIPS_JSON;
json_organization_w			PHILIPS_JSON;
json_item_w					PHILIPS_JSON;
json_bundleList_w			PHILIPS_JSON;
vl_url_w					varchar(255);


BEGIN
	<<BV_PR_EAU_Storno>>
	json_w					:= PHILIPS_JSON();
	json_bundle_w			:= PHILIPS_JSON();
	json_composition_w		:= PHILIPS_JSON();
	json_practitioner_w		:= PHILIPS_JSON();
	json_organization_w		:= PHILIPS_JSON();
	json_bundleList_w		:= PHILIPS_JSON();

	SELECT 	NR_SEQ_ATESTADO_PACIENTE,
			DS_EAU_ID
	INTO STRICT	nr_seq_atestado_paciente_w,
			ds_eau_id_w
	FROM 	EAU_ISSUE_DATA
	WHERE	NR_SEQUENCIA = nr_sequencia_p;

	CALL telematic_json_pck.carregar_dados_atestado(nr_seq_atestado_paciente_w);

	BEGIN
		<<BV_PR_EAU_Storno_Bundle>>
		json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'bundleId', GENERATE_UID);
		json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'lastUpdated', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].BUNDLELASTUPDATED, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));
		json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'timestamp', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_REFERENCIA, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));

		<<BV_PR_EAU_Storno_Composition>>
		json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'compositionId', GENERATE_UID);
		json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'codingType', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].IE_TIPO_ATESTADO);
		json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'date', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_REFERENCIA, current_setting('telematic_json_pck.dt_format')::varchar(10)));

		<<BV_PR_EAU_Storno_Practitioner>>
		json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'practitionerId', GENERATE_UID);
		json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'givenName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PRACTITIONERGIVENNAME);
		json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'lastName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PRACTITIONERLASTNAME);
		json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'qualification', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_ESP_MEDICO);
		json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'crm', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].NR_CRM);

		<<BV_PR_EAU_Storno_Organization>>
		json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'organizationId', GENERATE_UID);
		json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'name', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_RAZAO_SOCIAL);
		json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'telecom', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].NR_TELEFONE);
        json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'asv', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].CD_ESTAB);

		<<BV_PR_EAU_Storno_List>>
		json_bundleList_w := telematic_json_pck.add_json_value(json_bundleList_w, 'listId', GENERATE_UID);
		json_bundleList_w := telematic_json_pck.add_json_value(json_bundleList_w, 'bundleId', ds_eau_id_w);

		<<BV_PR_EAU_Storno_JSON_BUILD>>
		OBTER_PARAM_USUARIO(9041, 11, OBTER_PERFIL_ATIVO, OBTER_USUARIO_ATIVO, OBTER_ESTABELECIMENTO_ATIVO, vl_url_w);

	    json_w.PUT('urlParameter', vl_url_w);
	    json_w.PUT('bundle', json_bundle_w.TO_JSON_VALUE());
	    json_w.PUT('composition', json_composition_w.TO_JSON_VALUE());
	    json_w.PUT('practitioner', json_practitioner_w.TO_JSON_VALUE());
		json_w.PUT('organization', json_organization_w.TO_JSON_VALUE());
	    json_w.PUT('bundleList', json_bundleList_w.TO_JSON_VALUE());
    END;

	RETURN json_w;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION telematic_json_pck.get_muster_cancelation ( nr_sequencia_p EAU_ISSUE_DATA.NR_SEQUENCIA%type ) FROM PUBLIC;
