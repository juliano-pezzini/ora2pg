-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION telematic_json_pck.get_muster_information ( nr_sequencia_p ATESTADO_PACIENTE.NR_SEQUENCIA%type ) RETURNS PHILIPS_JSON AS $body$
DECLARE


json_w						PHILIPS_JSON;
json_coverage_w				PHILIPS_JSON;
json_patient_w				PHILIPS_JSON;
json_condition_w			PHILIPS_JSON;
json_practitioner_w 		PHILIPS_JSON;
json_practitioner_role_w	PHILIPS_JSON;
json_composition_w 			PHILIPS_JSON;
json_service_request_w 		PHILIPS_JSON;
json_organization_w			PHILIPS_JSON;
json_bundle_w				PHILIPS_JSON;
json_icdList_w				PHILIPS_JSON_LIST;
json_item_w 				PHILIPS_JSON;
vl_url_w					varchar(255);

legalbasis_w			ATESTADO_PACIENTE.NR_ATENDIMENTO%type;
ds_obs_diagnostico_w	ATESTADO_PACIENTE.DS_OBS_DIAGNOSTICO%type;
outro_acidente_w		ATESTADO_PACIENTE.IE_OUTRO_ACIDENTE%type;
acidente_militar_w		ATESTADO_PACIENTE.IE_ACIDENTE_MILITAR%type;
reabilitacao_w			varchar(4);
reintegracao_w			varchar(19);
outros_w				varchar(8);
tipo_final1_w			varchar(8);
tipo_final2_w			varchar(9);
insuredtype_w			ATEND_CATEGORIA_CONVENIO.IE_TIPO_CONVENIADO%type;
specialpeoplegroup_w	PESSOA_FISICA_EGK.BESONDERE_PERSONENGRUPPE%type;
extensionwop_w			PESSOA_FISICA_EGK.ZUSATZINFOS_WOP%type;
dmpindicator_w			PESSOA_FISICA_EGK.DMP_KENNZEICHNUNG%type;

c01 CURSOR FOR
	SELECT 	b.CD_DOENCA 														CD_CID,
			MAX(TO_CHAR(c.DT_VERSAO, 'YYYY')) 										CID_VERSION,
			SUBSTR(d.DS_DOENCA_CID, 1, INSTR(d.DS_DOENCA_CID, ' ', 1, 1) - 1) 	CID
	FROM	ATESTADO_PACIENTE 		a,
			CID_ATESTADO_PACIENTE 	b,
			CID_DOENCA_VERSAO 		c,
			CID_DOENCA 				d
	WHERE 	b.NR_SEQ_ATESTADO_PACIENTE 	= a.NR_SEQUENCIA
			AND c.CD_DOENCA_CID 		= b.CD_DOENCA
			AND d.CD_DOENCA_CID 		= c.CD_DOENCA_CID
			AND a.DT_DIAGNOSTICADO BETWEEN c.DT_VIGENCIA_INICIAL AND coalesce(c.DT_VIGENCIA_FINAL, clock_timestamp())
			AND a.NR_SEQUENCIA 			= nr_sequencia_p
    GROUP BY  b.CD_DOENCA , SUBSTR(d.DS_DOENCA_CID, 1, INSTR(d.DS_DOENCA_CID, ' ', 1, 1) - 1)
	ORDER BY 1;

BEGIN

	json_w						:= PHILIPS_JSON();
	json_bundle_w				:= PHILIPS_JSON();
	json_composition_w			:= PHILIPS_JSON();
	json_patient_w				:= PHILIPS_JSON();
	json_practitioner_w			:= PHILIPS_JSON();
	json_organization_w			:= PHILIPS_JSON();
	json_condition_w			:= PHILIPS_JSON();
	json_icdList_w				:= PHILIPS_JSON_LIST();
	json_coverage_w				:= PHILIPS_JSON();
	json_service_request_w		:= PHILIPS_JSON();

	BEGIN
	CALL telematic_json_pck.carregar_dados_atestado(nr_sequencia_p);

	SELECT 	MAX(DS_OBS_DIAGNOSTICO)
	INTO STRICT 	ds_obs_diagnostico_w
	FROM   	ATESTADO_PACIENTE
	WHERE  	NR_SEQUENCIA = nr_sequencia_p;

	SELECT 	CASE WHEN MAX(a.IE_OUTRO_ACIDENTE)='S' THEN  '1'  ELSE ' ' END  						OUTRO_ACIDENTE,
			CASE WHEN MAX(a.IE_ACIDENTE_MILITAR)='S' THEN  '3'  ELSE ' ' END  						ACIDENTE_MILITAR,
			CASE WHEN MAX(a.IE_REABILITACAO_MEDICA)='S' THEN  'reha'  ELSE ' ' END  				REABILITACAO,
			CASE WHEN MAX(a.IE_PASSOS_REINTEGRACAO)='S' THEN  'wiedereingliederung'  ELSE ' ' END  	REINTEGRACAO,
			CASE WHEN MAX(a.IE_OUTROS)='S' THEN  'sonstige'  ELSE ' ' END  							OUTROS,
			CASE WHEN MAX(a.IE_TIPO_FINAL)='A' THEN  'true' END                    			TIPO_FINAL1,
			CASE WHEN MAX(a.IE_TIPO_FINAL)='A' THEN  'ERST_END' WHEN MAX(a.IE_TIPO_FINAL)='E' THEN  'FOLGE_END' END 			TIPO_FINAL2
	INTO STRICT	outro_acidente_w,
			acidente_militar_w,
			reabilitacao_w,
			reintegracao_w,
			outros_w,
			tipo_final1_w,
			tipo_final2_w
	FROM 	ATESTADO_PACIENTE 	a,
			PESSOA_FISICA 		b
	WHERE 	a.CD_PESSOA_FISICA 	= b.CD_PESSOA_FISICA
	AND 	a.NR_SEQUENCIA 		= nr_sequencia_p;

	SELECT 	coalesce(MAX(a.ZUSATZINFOS_WOP), '03')								EXTENSIONWOP,
			CASE WHEN MAX(c.IE_TIPO_CONVENIADO)=1 THEN  '1' WHEN MAX(c.IE_TIPO_CONVENIADO)=2 THEN  '3' WHEN MAX(c.IE_TIPO_CONVENIADO)=5 THEN  '5'  ELSE '1' END  	INSUREDTYPE,
			LPAD(coalesce(MAX(a.BESONDERE_PERSONENGRUPPE), 0), 2, 0) 			SPECIALPEOPLEGROUP,
			LPAD(coalesce(MAX(a.DMP_KENNZEICHNUNG), 0), 2, 0) 					DMPINDICATOR,
			CASE WHEN OBTER_ASV_TEAM(MAX(b.NR_ATENDIMENTO)) IS NULL THEN  CASE WHEN MAX(d.IE_TIPO_CONSENTIMENTO)='E' THEN  '04'  ELSE '00' END   ELSE LPAD('01', 2, 0) END  LEGALBASIS
	INTO STRICT	extensionwop_w,
			insuredtype_w,
			specialpeoplegroup_w,
			dmpindicator_w,
			legalbasis_w
	FROM atestado_paciente e, atend_categoria_convenio c, atendimento_paciente b
LEFT OUTER JOIN pessoa_fisica_egk a ON (b.CD_PESSOA_FISICA = a.CD_PESSOA_FISICA)
LEFT OUTER JOIN pep_pac_ci d ON (b.NR_ATENDIMENTO = d.NR_ATENDIMENTO)
WHERE b.NR_ATENDIMENTO 		= c.NR_ATENDIMENTO AND c.NR_SEQ_INTERNO 		= (SELECT 	MAX(t.NR_SEQ_INTERNO)
									   FROM 	ATEND_CATEGORIA_CONVENIO t,
								   				CONVENIO x 
									   WHERE 	t.NR_ATENDIMENTO 	= c.NR_ATENDIMENTO 
									   AND 		t.CD_CONVENIO 		= x.CD_CONVENIO 
									   AND 		x.IE_TIPO_CONVENIO 	= 11)  AND e.NR_ATENDIMENTO 		= b.NR_ATENDIMENTO AND e.NR_SEQUENCIA 			= nr_sequencia_p ORDER BY a.DT_ATUALIZACAO DESC;

	<<BV_PR_EAU_Bundle>>
	json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'bundleId', GENERATE_UID);
	json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'lastUpdated', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].BUNDLELASTUPDATED, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));
	json_bundle_w := telematic_json_pck.add_json_value(json_bundle_w, 'timestamp', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_REFERENCIA, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));

	<<BV_PR_EAU_Composition>>
	json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'compositionId', GENERATE_UID);
	json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'legalBasis', legalbasis_w);
	json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'codingType', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].IE_TIPO_ATESTADO);
	json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'date', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_REFERENCIA, current_setting('telematic_json_pck.dt_format')::varchar(10)));
    json_composition_w := telematic_json_pck.add_json_value(json_composition_w, 'finalCertificate', tipo_final2_w);


	<<BV_PR_EAU_Patient>>
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'patientId', GENERATE_UID);
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'insuredNumber', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].CD_USUARIO_CONV);
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'familyName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].FAMILY_NAME);
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'patientName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PATIENT_NAME);
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'birthDate', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_NASCIMENTO, current_setting('telematic_json_pck.dt_format')::varchar(10)));
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'address', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PATIENTSTREETNAME || ' ' || current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PATIENTNUMBER);
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'city', telematic_json_pck.obter_valor_split(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PATIENT_CITY, 'L'));
	json_patient_w := telematic_json_pck.add_json_value(json_patient_w, 'postalCode', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PATIENTPOSTALCODE);

	<<BV_PR_EAU_Practitioner>>
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'practitionerId', GENERATE_UID);
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'givenName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PRACTITIONERGIVENNAME);
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'lastName', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PRACTITIONERLASTNAME);
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'title', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].PRACTITIONERTITLE);
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'crm', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].NR_CRM);
	json_practitioner_w := telematic_json_pck.add_json_value(json_practitioner_w, 'qualification', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_ESP_MEDICO);

	<<BV_PR_EAU_Organization>>
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'organizationId', GENERATE_UID);
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'companyId', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].CD_ESTAB);
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'name', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_RAZAO_SOCIAL);
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'telecom', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].NR_TELEFONE);
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'address', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_ENDE_EMPR);
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'houseNumber', telematic_json_pck.obter_valor_split(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_ENDE_EMPR, 'L'));
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'streetName', telematic_json_pck.obter_valor_split(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_ENDE_EMPR));
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'city', telematic_json_pck.obter_valor_split(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_MUNC_EMPR, 'L'));
	json_organization_w := telematic_json_pck.add_json_value(json_organization_w, 'postalCode', telematic_json_pck.obter_valor_split(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_MUNC_EMPR));

	<<BV_PR_EAU_Condition_AU>>
	json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'conditionAuId', GENERATE_UID);
	json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'startDate', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_ATESTADO, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));
	json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'endDate', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_AUSENCIA, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));
	json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'assertedDate', TO_CHAR(current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DT_DIAGNOSTICADO, current_setting('telematic_json_pck.dt_iso_timezone_format')::varchar(26)));
    json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'sevenWeeks', tipo_final1_w);
    json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'accidentSequel', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].IE_SEQUELA);
    json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'otherAccident', outro_acidente_w);
    json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'accidentMilitary', acidente_militar_w);

    <<BV_PR_EAU_Condition_Text>>
    json_condition_w := telematic_json_pck.add_json_value(json_condition_w, 'diagnosisDescription', ds_obs_diagnostico_w);

    

	<<BV_PR_EAU_Condition_ICD>>
	FOR r_c01 IN c01 LOOP
		BEGIN
		json_item_w := PHILIPS_JSON();
		json_item_w := telematic_json_pck.add_json_value(json_item_w, 'icdId', GENERATE_UID);
		json_item_w := telematic_json_pck.add_json_value(json_item_w, 'icdVersion', r_c01.CID_VERSION);
		json_item_w := telematic_json_pck.add_json_value(json_item_w, 'icd', r_c01.CD_CID);
		json_icdList_w.APPEND(json_item_w.TO_JSON_VALUE());
		END;
	END LOOP;

	<<BV_PR_EAU_Coverage>>
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'coverageId', GENERATE_UID);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'payorAlternativeId', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].CD_CNES);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'payorDisplay', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_CONVENIO);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'specialPeopleGroup', specialpeoplegroup_w);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'DMPIndicator', dmpindicator_w);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'extensionWOP', extensionwop_w);
	json_coverage_w := telematic_json_pck.add_json_value(json_coverage_w, 'insuredType', insuredtype_w);

	<<BV_PR_EAU_ServiceRequest>>
	json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'serviceRequestId', GENERATE_UID);
	json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'code', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].IE_ACIDENTE);
    json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'reha', reabilitacao_w);
    json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'reintegration', reintegracao_w);
    json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'others', outros_w);
    json_service_request_w := telematic_json_pck.add_json_value(json_service_request_w, 'otherMedicalCert', current_setting('telematic_json_pck.tb_atestados_w')::tp_atestados[1].DS_OTHER_MEDICAL_CERT);


	END;

	OBTER_PARAM_USUARIO(9041, 11, OBTER_PERFIL_ATIVO, OBTER_USUARIO_ATIVO, OBTER_ESTABELECIMENTO_ATIVO, vl_url_w);

    json_w.PUT('urlParameter', vl_url_w);
	json_w.PUT('bundle', json_bundle_w.TO_JSON_VALUE());
	json_w.PUT('composition', json_composition_w.TO_JSON_VALUE());
	json_w.PUT('patient', json_patient_w.TO_JSON_VALUE());
	json_w.PUT('practitioner', json_practitioner_w.TO_JSON_VALUE());
	json_w.PUT('organization', json_organization_w.TO_JSON_VALUE());
	json_w.PUT('condition', json_condition_w.TO_JSON_VALUE());
	json_w.PUT('icdList', json_icdList_w.TO_JSON_VALUE());
	json_w.PUT('coverage', json_coverage_w.TO_JSON_VALUE());
	json_w.PUT('serviceRequest', json_service_request_w.TO_JSON_VALUE());

	RETURN json_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION telematic_json_pck.get_muster_information ( nr_sequencia_p ATESTADO_PACIENTE.NR_SEQUENCIA%type ) FROM PUBLIC;
