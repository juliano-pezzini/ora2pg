-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sib_geracao_pck.consistir_sib (nr_seq_lote_p pls_sib_movimento.nr_seq_lote%type, nr_seq_movimento_p pls_sib_movimento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

qt_registro_w	integer;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_movimento,
		a.cd_cco,
		a.nr_seq_segurado,
		a.cd_beneficiario,
		a.nm_beneficiario,
		a.dt_nascimento,
		a.cd_sexo,
		a.nr_cpf,
		a.nr_pis_pasep,
		a.nm_mae,
		a.nr_dn,
		a.cd_beneficiario_titular,
		a.nr_cns,
		a.nr_plano_ans,
		a.nr_plano_operadora,
		CASE WHEN coalesce(a.cd_beneficiario_titular::text, '') = '' THEN  1  ELSE 2 END  ie_titular,
		obter_idade( a.dt_nascimento,clock_timestamp(),'A') qt_idade,
		a.cd_motivo_cancelamento,
		a.cd_relacao_dependencia,
		a.cd_cep,
		a.ds_logradouro,
		a.nr_logradouro,
		a.ds_bairro,
		a.cd_municipio_ibge,
		a.cd_municipio_ibge_resid,
		a.ie_tipo_endereco,
		a.dt_reativacao,
		a.cd_caepf,
		a.ie_retificacao_null,
        obter_se_cpf_valido(a.nr_cpf) ie_cpf_valido
	from	pls_sib_movimento a
	where	a.nr_seq_lote = nr_seq_lote_p
	and (coalesce(nr_seq_movimento_p::text, '') = ''
	or	a.nr_sequencia = nr_seq_movimento_p);

C02 CURSOR FOR
	SELECT	nr_seq_movimento,
		nr_seq_consistencia_conf
	from	table(pls_sib_valida_conferencia_pck.validar(nr_seq_lote_p, nr_seq_movimento_p, cd_estabelecimento_p));
	
BEGIN
CALL pls_sib_geracao_pck.limpar_vetor_inconsistencia();

for r_C01_w in C01 loop
	begin
	if (coalesce(r_C01_w.cd_cco::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 1, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,1);
	end if;

	if (coalesce(r_C01_w.cd_beneficiario::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 2, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,2);
	end if;

	if (coalesce(r_C01_w.nm_beneficiario::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 3, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,3);
	end if;

	if (coalesce(r_C01_w.dt_nascimento::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 4, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,4);
	end if;

	if (coalesce(r_C01_w.cd_sexo::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 5, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,5);
	end if;

	if (coalesce(r_C01_w.nr_cpf::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 6, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,6);
	end if;

	if (coalesce(r_C01_w.nr_pis_pasep::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 7, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,7);
	end if;

	if (coalesce(r_C01_w.nm_mae::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 8, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,8);
	end if;

	if (coalesce(r_C01_w.nr_dn::text, '') = '') and (r_C01_w.dt_nascimento IS NOT NULL AND r_C01_w.dt_nascimento::text <> '') and (r_C01_w.dt_nascimento >= to_date('01/01/2010', 'dd/mm/rrrr')) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 9, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,9);
	end if;

	if (coalesce(r_C01_w.cd_beneficiario_titular::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 10, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,10);
	end if;

	if (coalesce(r_C01_w.nm_mae::text, '') = '') and (coalesce(r_C01_w.nr_pis_pasep::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 11, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,11);
	end if;

	if (coalesce(r_C01_w.nr_cns::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 12, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,12);
	end if;

	if (pls_consistir_letra_unica_pf(r_C01_w.nm_beneficiario) = 'S') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 13, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,13);
	end if;

	if (pls_consistir_letra_unica_pf(r_C01_w.nm_mae) = 'S') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 14, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,14);
	end if;

	if (coalesce(r_C01_w.nr_plano_ans::text, '') = '') and (coalesce(r_C01_w.nr_plano_operadora::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 15, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,15);
	end if;

	if (coalesce(r_C01_w.cd_motivo_cancelamento::text, '') = '') and (r_C01_w.ie_tipo_movimento = '4') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 16, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,16);
	end if;

	if (coalesce(r_C01_w.cd_relacao_dependencia::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 17, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,17);
	end if;

	if (length(r_C01_w.nr_cns) <> 15) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 18, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,18);
	end if;

	if (coalesce(r_C01_w.cd_cep::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 19, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,19);
	end if;

	if (coalesce(r_C01_w.ds_logradouro::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 20, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,20);
	end if;

	if (coalesce(r_C01_w.nr_logradouro::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 21, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,21);
	end if;

	if (coalesce(r_C01_w.ds_bairro::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 22, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,22);
	end if;

	if (coalesce(r_C01_w.cd_municipio_ibge::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 23, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,23);
	end if;

	if (coalesce(r_C01_w.cd_municipio_ibge_resid::text, '') = '' and r_C01_w.ie_tipo_endereco = 1) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 24, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,24);
	end if;

	if (coalesce(r_c01_w.dt_reativacao::text, '') = '') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 25, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,25);
	end if;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_sib_movimento
	where	nr_seq_lote	= nr_seq_lote_p
	and	nr_seq_segurado	= r_c01_w.nr_seq_segurado
	and	ie_tipo_movimento = r_C01_w.ie_tipo_movimento
	and	nr_sequencia	<> r_c01_w.nr_sequencia;
	
	if (qt_registro_w > 0) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 26, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,26);
	end if;
	
	if (length(r_C01_w.cd_caepf) <> 14) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 27, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,27);
	end if;

	if (r_c01_w.ie_retificacao_null = 'S') and (r_c01_w.ie_tipo_movimento = 2) then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 28, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,28);
	end if;

    if ((r_c01_w.nr_cpf IS NOT NULL AND r_c01_w.nr_cpf::text <> '') and r_c01_w.ie_cpf_valido = 'N') then
		CALL CALL CALL pls_sib_geracao_pck.gravar_inconsistencia(r_C01_w.nr_sequencia, 29, r_C01_w.ie_tipo_movimento, r_C01_w.ie_titular, r_C01_w.qt_idade, nr_seq_movimento_p, nm_usuario_p);
	elsif (nr_seq_movimento_p IS NOT NULL AND nr_seq_movimento_p::text <> '') then
		CALL pls_sib_geracao_pck.remover_inconsistencia(r_C01_w.nr_sequencia,29);
	end if;
	end;
end loop;

for r_c02_w in c02 loop
	begin
	current_setting('pls_sib_geracao_pck.tb_nr_seq_movimento_w')::pls_util_cta_pck.t_number_table(current_setting('pls_sib_geracao_pck.indice_w')::bigint)		:= r_c02_w.nr_seq_movimento;
	current_setting('pls_sib_geracao_pck.tb_nr_seq_consistencia_conf_w')::pls_util_cta_pck.t_number_table(current_setting('pls_sib_geracao_pck.indice_w')::bigint) := r_c02_w.nr_seq_consistencia_conf;
	current_setting('pls_sib_geracao_pck.tb_nr_seq_consistencia_w')::pls_util_cta_pck.t_number_table(current_setting('pls_sib_geracao_pck.indice_w')::bigint)	:= null;
	
	CALL CALL CALL pls_sib_geracao_pck.inserir_inconsistencia('N', nm_usuario_p);
	end;
end loop;

CALL CALL CALL pls_sib_geracao_pck.inserir_inconsistencia('S', nm_usuario_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sib_geracao_pck.consistir_sib (nr_seq_lote_p pls_sib_movimento.nr_seq_lote%type, nr_seq_movimento_p pls_sib_movimento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
