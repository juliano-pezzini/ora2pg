-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sib_geracao_pck.gerar_movimentacao ( nr_seq_lote_p pls_sib_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


ie_gerou_inclusao_w		varchar(1);
ie_gerou_mudanca_contratual_w	varchar(1);
ie_gerou_cancelamento_w		varchar(1);
ie_gerou_reinclusao_w		varchar(1);
nr_seq_segurado_status_w	pls_segurado_status.nr_sequencia%type;
dt_final_w			pls_segurado_status.dt_final%type;
nr_seq_motivo_cancelamento_w	pls_segurado_status.nr_seq_motivo_cancelamento%type;
dt_inicial_w			pls_segurado_status.dt_inicial%type;
nr_seq_movimento_w		pls_sib_movimento.nr_sequencia%type;
cd_motivo_cancelamento_w	pls_sib_segurado.cd_motivo_cancelamento%type;
ie_alteracao_w			varchar(1);
nr_seq_seg_status_reinc_w	pls_segurado_status.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_seq_segurado
	from	pls_sib_selecao_temp	a
	group by a.nr_seq_segurado;

C02 CURSOR(	nr_seq_segurado_pc	pls_segurado.nr_sequencia%type,
		dt_inicial_pc		pls_sib_lote.dt_inicio_mov%type,
		dt_final_pc		pls_sib_lote.dt_fim_mov%type) FOR
	SELECT	a.nr_sequencia,
		a.ie_envio_sib,
		a.dt_inicial,
		a.nr_seq_plano
	from	pls_segurado_status a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	(a.ie_envio_sib IS NOT NULL AND a.ie_envio_sib::text <> '')
	and	a.dt_inicial between dt_inicial_pc and dt_final_pc
	and	not exists (	SELECT	1
				from	pls_sib_movimento x
				where	x.nr_seq_status_inclusao = a.nr_sequencia)
	order by a.ie_envio_sib;

C03 CURSOR(	nr_seq_segurado_pc	pls_segurado.nr_sequencia%type,
		dt_inicial_pc		pls_sib_lote.dt_inicio_mov%type,
		dt_final_pc		pls_sib_lote.dt_fim_mov%type) FOR
	SELECT	a.nr_sequencia,
		a.dt_final dt_rescisao,
		a.nr_seq_motivo_cancelamento
	from	pls_segurado_status a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.ie_exclusao_sib	= 4
	and	a.dt_final between dt_inicial_pc and dt_final_pc
	and	not exists (	SELECT	1
				from	pls_sib_movimento x
				where	x.nr_seq_status_exclusao = a.nr_sequencia);

C05 CURSOR(	cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
		ie_tipo_movimento_pc	pls_sib_lote.ie_tipo_movimento%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_segurado,
		a.ie_tipo_movimento
	from	pls_sib_reenvio a
	where	a.cd_estabelecimento = cd_estabelecimento_pc
	and (a.ie_tipo_movimento = ie_tipo_movimento_pc or coalesce(ie_tipo_movimento_pc::text, '') = '')
	and	(a.ie_tipo_movimento IS NOT NULL AND a.ie_tipo_movimento::text <> '')
	and	coalesce(a.nr_seq_lote_sib::text, '') = ''
	and	(a.nr_seq_segurado IS NOT NULL AND a.nr_seq_segurado::text <> '');

C06 CURSOR(	cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
		ie_tipo_movimento_pc	pls_sib_lote.ie_tipo_movimento%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_motivo_cancel,
		a.dt_cancelamento,
		b.nr_cco,
		b.nm_beneficiario
	from	pls_sib_reenvio a,
		pls_sib_conferencia b
	where	b.nr_sequencia		= a.nr_seq_conferencia
	and	a.cd_estabelecimento	= cd_estabelecimento_pc
	and (a.ie_tipo_movimento = ie_tipo_movimento_pc or coalesce(ie_tipo_movimento_pc::text, '') = '')
	and	(a.ie_tipo_movimento IS NOT NULL AND a.ie_tipo_movimento::text <> '')
	and	coalesce(a.nr_seq_lote_sib::text, '') = ''
	and	a.ie_tipo_movimento = 4;

BEGIN
PERFORM set_config('pls_sib_geracao_pck.nm_usuario_w', nm_usuario_p, false);
CALL CALL CALL CALL pls_sib_geracao_pck.limpar_vetor();

select	*
into STRICT	current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype
from	pls_sib_lote
where	nr_sequencia	= nr_seq_lote_p;
current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_inicio_mov	:= trunc(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_inicio_mov,'dd');
current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_fim_mov	:= fim_dia(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_fim_mov);

if (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_lote <> 'C') then
	for r_c01_w in C01 loop
		begin
		CALL gravar_processo_longo(obter_expressao_dic_objeto(1105997),'PLS_SIB_GERACAO_PCK',-1);
		ie_gerou_inclusao_w		:= 'N';
		ie_gerou_mudanca_contratual_w	:= 'N';
		ie_gerou_cancelamento_w		:= 'N';
		ie_gerou_reinclusao_w		:= 'N';
		CALL pls_sib_dados_benef_pck.carregar_dados(r_c01_w.nr_seq_segurado, cd_estabelecimento_p);

		if (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_lote = 'I') then --Inclusao de todos beneficiarios ativos
			ie_gerou_inclusao_w := pls_sib_geracao_pck.gerar_inclusao(r_c01_w.nr_seq_segurado, null, null, null, ie_gerou_inclusao_w);
		elsif (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_lote = 'E') then --Exclusao de todos beneficiarios ativos
			gerar_cancelamento(r_c01_w.nr_seq_segurado, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_referencia, 7, null, null);
		else
			if (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento = 1) or (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento = 3) or (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento = 5) or (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%coalesce(rowtype.ie_tipo_movimento::text, '') = '') then
				for r_c02_w in C02(r_c01_w.nr_seq_segurado, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_inicio_mov, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_fim_mov) loop
					begin
					if (r_c02_w.ie_envio_sib = 1) and (coalesce(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento,1) = 1) then --Inclusao
						CALL pls_sib_dados_benef_pck.atualizar_dados_produto(r_c02_w.nr_seq_plano);
						ie_gerou_inclusao_w := pls_sib_geracao_pck.gerar_inclusao(r_c01_w.nr_seq_segurado, r_c02_w.dt_inicial, null, r_c02_w.nr_sequencia, ie_gerou_inclusao_w);
					elsif (r_c02_w.ie_envio_sib = 3) and (coalesce(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento,3) = 3) and (ie_gerou_inclusao_w = 'N') then --Mudanca contratual
						CALL pls_sib_dados_benef_pck.atualizar_dados_produto(r_c02_w.nr_seq_plano);
						CALL pls_sib_geracao_pck.gerar_mudanca_contratual(r_c01_w.nr_seq_segurado, r_c02_w.dt_inicial, null, r_c02_w.nr_sequencia);
						ie_gerou_mudanca_contratual_w	:= 'S';
					elsif (r_c02_w.ie_envio_sib = 5) and (coalesce(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento,5) = 5) and (ie_gerou_inclusao_w = 'N') then --Reinclusao
						CALL pls_sib_geracao_pck.gerar_reinclusao(r_c01_w.nr_seq_segurado, r_c02_w.dt_inicial, null, r_c02_w.nr_sequencia);
						ie_gerou_reinclusao_w	:= 'S';
					end if;
					end;
				end loop; --C02
			end if;

			if (coalesce(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento,4) = 4) and (ie_gerou_inclusao_w = 'N') then --Cancelamento
				for r_c03_w in C03(r_c01_w.nr_seq_segurado, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_inicio_mov, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.dt_fim_mov) loop
					begin
					gerar_cancelamento(r_c01_w.nr_seq_segurado, r_c03_w.dt_rescisao, r_c03_w.nr_seq_motivo_cancelamento, null, r_c03_w.nr_sequencia);
					ie_gerou_cancelamento_w	:= 'S';
					end;
				end loop; --C03
			end if;

			if (coalesce(current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento,2) = 2) and (ie_gerou_inclusao_w = 'N') then --Retificacao
				gerar_retificacao(r_c01_w.nr_seq_segurado, ie_gerou_mudanca_contratual_w, ie_gerou_cancelamento_w, ie_gerou_reinclusao_w, null);
			end if;
		end if;
		end;
	end loop; --C01

	--Necessario inserir todas as movimentacoes para nao duplicar quando for gerar as correcoes no mesmo lote

	CALL pls_sib_geracao_pck.inserir_movimentacao('S');
end if;

if (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_lote = 'C') or (current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_lote = 'M' and current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_gerar_correcao = 'S') then

	--Re-envio CONFERENCIA, DEVOLUCAO e LOG DE EXCLUSAO

	for r_c05_w in C05(cd_estabelecimento_p, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento) loop
		CALL gravar_processo_longo(obter_expressao_dic_objeto(1105996),'PLS_SIB_GERACAO_PCK',-1);

		--Verifica se o movimento ja foi gerado como movimentacao, se sim, somente atualiza o reenvio para nao gerar novamente

		select	max(nr_sequencia)
		into STRICT	nr_seq_movimento_w
		from	pls_sib_movimento
		where	nr_seq_lote	= nr_seq_lote_p
		and	nr_seq_segurado	= r_c05_w.nr_seq_segurado
		and	ie_tipo_movimento = r_c05_w.ie_tipo_movimento;

		if (nr_seq_movimento_w IS NOT NULL AND nr_seq_movimento_w::text <> '') then
			update	pls_sib_movimento
			set	nr_seq_reenvio	= r_c05_w.nr_sequencia
			where	nr_sequencia	= nr_seq_movimento_w;
		else
			CALL pls_sib_dados_benef_pck.carregar_dados(r_c05_w.nr_seq_segurado, cd_estabelecimento_p);

			if (r_c05_w.ie_tipo_movimento = 1) then
				ie_gerou_inclusao_w := pls_sib_geracao_pck.gerar_inclusao(r_c05_w.nr_seq_segurado, null, r_c05_w.nr_sequencia, null, ie_gerou_inclusao_w);
			elsif (r_c05_w.ie_tipo_movimento = 2) then
				gerar_retificacao(r_c05_w.nr_seq_segurado, 'N', 'N', 'N', r_c05_w.nr_sequencia);
			elsif (r_c05_w.ie_tipo_movimento = 3) then
				CALL pls_sib_geracao_pck.gerar_mudanca_contratual(r_c05_w.nr_seq_segurado, pls_sib_dados_benef_pck.dt_contratacao , r_c05_w.nr_sequencia, null);
			elsif (r_c05_w.ie_tipo_movimento = 4) then
				
				select	max(dt_cancelamento),
					max(nr_seq_motivo_cancelamento)
				into STRICT	dt_final_w,
					nr_seq_motivo_cancelamento_w
				from	pls_sib_reenvio_atrib
				where	nr_seq_reenvio	= r_c05_w.nr_sequencia;
				
				if (coalesce(dt_final_w::text, '') = '') and (coalesce(nr_seq_motivo_cancelamento_w::text, '') = '') then
					begin
					select	dt_final,
						nr_seq_motivo_cancelamento
					into STRICT	dt_final_w,
						nr_seq_motivo_cancelamento_w
					from (SELECT dt_final,
							nr_seq_motivo_cancelamento
						from	pls_segurado_status
						where	(dt_final IS NOT NULL AND dt_final::text <> '')
						and	nr_seq_segurado = r_c05_w.nr_seq_segurado
						and	ie_exclusao_sib = 4
						order by 1 desc) alias5 LIMIT 1;
					exception
					when others then
						dt_final_w	:= null;
						nr_seq_motivo_cancelamento_w	:= null;
					end;
					
					if (coalesce(dt_final_w::text, '') = '') and (coalesce(nr_seq_motivo_cancelamento_w::text, '') = '') then
						dt_final_w			:= pls_sib_dados_benef_pck.dt_rescisao;
						nr_seq_motivo_cancelamento_w	:= pls_sib_dados_benef_pck.nr_seq_motivo_cancel;
					end if;
				end if;
				
				gerar_cancelamento(r_c05_w.nr_seq_segurado, dt_final_w, nr_seq_motivo_cancelamento_w, r_c05_w.nr_sequencia, null);
			elsif (r_c05_w.ie_tipo_movimento = 5) then
				
				select	max(dt_reativacao)
				into STRICT	dt_inicial_w
				from	pls_sib_reenvio_atrib
				where	nr_seq_reenvio	= r_c05_w.nr_sequencia;
				
				if (coalesce(dt_inicial_w::text, '') = '') then
					dt_inicial_w	:= pls_sib_dados_benef_pck.dt_reativacao;
					
					if (coalesce(dt_inicial_w::text, '') = '') then
						begin
						select	max(nr_sequencia)
						into STRICT	nr_seq_seg_status_reinc_w
						from	pls_segurado_status
						where	nr_seq_segurado	= r_c05_w.nr_seq_segurado
						and	ie_envio_sib = 5;
						
						select	max(dt_inicial)
						into STRICT	dt_inicial_w
						from	pls_segurado_status
						where	nr_sequencia = nr_seq_seg_status_reinc_w;
						exception
						when others then
							dt_inicial_w	:= null;
						end;
					end if;
				end if;
				
				CALL pls_sib_geracao_pck.gerar_reinclusao(r_c05_w.nr_seq_segurado, dt_inicial_w, r_c05_w.nr_sequencia, null);
			end if;
		end if;

		update	pls_sib_reenvio
		set	nr_seq_lote_sib = nr_seq_lote_p
		where	nr_sequencia = r_c05_w.nr_sequencia;
	end loop; --C05
	
	-- Cancelamentos de beneficiarios que nao existem no Tasy e estao ATIVOS na ANS

	for r_c06_w in C06(cd_estabelecimento_p, current_setting('pls_sib_geracao_pck.pls_sib_lote_w')::pls_sib_lote%rowtype.ie_tipo_movimento) loop
		begin
		CALL gravar_processo_longo(obter_expressao_dic_objeto(1105996),'PLS_SIB_GERACAO_PCK',-1);
		
		CALL pls_sib_geracao_pck.inicia_registro();
		CALL pls_sib_geracao_pck.set_ie_tipo_movimento(4);
		if (r_c06_w.nr_seq_motivo_cancel IS NOT NULL AND r_c06_w.nr_seq_motivo_cancel::text <> '') then
			begin
			select	cd_motivo_cancelamento
			into STRICT	cd_motivo_cancelamento_w
			from	pls_motivo_cancelamento
			where	nr_sequencia	= r_c06_w.nr_seq_motivo_cancel;
			exception
			when others then
				cd_motivo_cancelamento_w	:= null;
			end;
		else
			cd_motivo_cancelamento_w	:= null;
		end if;
		
		ie_alteracao_w := pls_sib_geracao_pck.set_cd_motivo_cancelamento(r_c06_w.nr_seq_motivo_cancel, cd_motivo_cancelamento_w, null, ie_alteracao_w);
		CALL pls_sib_geracao_pck.set_cd_cco(r_c06_w.nr_cco);
		ie_alteracao_w := pls_sib_geracao_pck.set_nm_beneficiario(r_c06_w.nm_beneficiario, null, ie_alteracao_w);
		ie_alteracao_w := pls_sib_geracao_pck.set_dt_rescisao(r_c06_w.dt_cancelamento, null, ie_alteracao_w);
		CALL pls_sib_geracao_pck.set_nr_seq_reenvio(r_c06_w.nr_sequencia);
		CALL pls_sib_geracao_pck.inserir_movimentacao('N');
		
		update	pls_sib_reenvio
		set	nr_seq_lote_sib = nr_seq_lote_p
		where	nr_sequencia = r_c06_w.nr_sequencia;
		end;
	end loop; --C06
end if;

CALL pls_sib_geracao_pck.inserir_movimentacao('S');
CALL pls_sib_geracao_pck.consistir_sib(nr_seq_lote_p, null, nm_usuario_p, cd_estabelecimento_p);
CALL pls_sib_geracao_pck.gerar_ordenacao(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);
CALL CALL CALL pls_sib_geracao_pck.gerar_arquivo(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sib_geracao_pck.gerar_movimentacao ( nr_seq_lote_p pls_sib_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
