-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/




CREATE OR REPLACE PROCEDURE pls_gerar_contas_a700_pck.definir_contas_a_gerar_a700 ( nr_seq_servico_p ptu_servico_pre_pagto.nr_sequencia%type, nr_seq_protocolo_p pls_conta.nr_seq_protocolo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) AS $body$
DECLARE
	
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Rotina responsavel por obter os dados que serao inseridos nas contas a serem geradas atraves da procedure PROCESSAR_CONTAS_A700.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 				

-- Variaveis de notas hospitalares

nr_seq_nota_hosp_w		ptu_nota_hospitalar.nr_sequencia%type;
dt_internacao_w			ptu_nota_hospitalar.dt_internacao%type;
dt_alta_w			ptu_nota_hospitalar.dt_alta%type;
ie_tipo_internacao_w		ptu_nota_hospitalar.ie_tipo_internacao%type;
cd_motivo_saida_w		ptu_nota_hospitalar.cd_motivo_saida%type;
ie_ind_acidente_w		ptu_nota_hospitalar.ie_ind_acidente%type;
ie_tipo_acomodacao_w		ptu_nota_hospitalar.ie_tipo_acomodacao%type;
qt_nasc_vivos_w			ptu_nota_hospitalar.qt_nasc_vivos%type;
qt_nasc_mortos_w		ptu_nota_hospitalar.qt_nasc_mortos%type;
qt_nasc_vivos_pre_w		ptu_nota_hospitalar.qt_nasc_vivos_pre%type;
qt_obito_precoce_w		ptu_nota_hospitalar.qt_obito_precoce%type;
qt_obito_tardio_w		ptu_nota_hospitalar.qt_obito_tardio%type;
ie_obito_mulher_w		ptu_nota_hospitalar.ie_obito_mulher%type;
nr_declara_obito_w		ptu_nota_hospitalar.nr_declara_obito%type;
ie_int_gestacao_w		ptu_nota_hospitalar.ie_int_gestacao%type;
ie_int_aborto_w			ptu_nota_hospitalar.ie_int_aborto%type;
ie_int_transtorno_w		ptu_nota_hospitalar.ie_int_transtorno%type;
ie_int_puerperio_w		ptu_nota_hospitalar.ie_int_puerperio%type;
ie_int_recem_nascido_w		ptu_nota_hospitalar.ie_int_recem_nascido%type;
ie_int_neonatal_w		ptu_nota_hospitalar.ie_int_neonatal%type;
ie_int_baixo_peso_w		ptu_nota_hospitalar.ie_int_baixo_peso%type;
ie_int_parto_cesarea_w		ptu_nota_hospitalar.ie_int_parto_cesarea%type;
ie_int_parto_normal_w		ptu_nota_hospitalar.ie_int_parto_normal%type;
cd_cid_obito_fatura_w		ptu_nota_hospitalar.cd_cid_obito%type;
ie_faturamento_w		ptu_nota_hospitalar.ie_faturamento%type;
ie_regime_internacao_w		ptu_nota_hospitalar.reg_internacao%type;

-- Variaveis de notas de servico

nr_autorizacao_w		ptu_nota_servico.nr_autorizacao%type;
nr_cgc_cpf_req_w		ptu_nota_servico.nr_cgc_cpf_req%type;
cd_prestador_req_w		ptu_nota_servico.cd_prestador_req%type;
nm_prestador_req_w		ptu_nota_servico.nm_prestador_requisitante%type;
nr_cgc_cpf_w			ptu_nota_servico.nr_cgc_cpf%type;
cd_prestador_w			ptu_nota_servico.cd_prestador%type;
nm_prestador_w			ptu_nota_servico.nm_prestador%type;	

-- Contadores

i				integer;

-- Variaveis table

nr_seq_nota_cobr_table_w	dbms_sql.number_table;
cd_cid_table_w			dbms_sql.varchar2_table;
cd_cid_obito_fatura_table_w	dbms_sql.varchar2_table;
nr_declara_obito_table_w	dbms_sql.varchar2_table;
nr_seq_nota_hosp_table_w	dbms_sql.number_table;

-- Outras variaveis

cd_cooperativa_w		ptu_servico_pre_pagto.cd_unimed_destino%type;
nr_seq_tipo_atendimento_w	pls_conta.nr_seq_tipo_atendimento%type;
qt_internacao_w			integer;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
nr_seq_clinica_w		pls_conta.nr_seq_clinica%type;
nr_seq_saida_int_w		pls_motivo_saida.nr_sequencia%type;
ds_indicacao_clinica_imp_w	pls_conta.ds_indicacao_clinica_imp%type;
ds_observacao_imp_w		pls_conta.ds_observacao%type;
dados_conta_w			pls_gerar_contas_a700_pck.dados_conta;
nr_versao_transacao_w		ptu_servico_pre_pagto.nr_versao_transacao%type;
ie_carater_internacao_w		pls_conta.ie_carater_internacao%type;
ie_tipo_consulta_w		pls_conta.ie_tipo_consulta%type;
nr_seq_tipo_acomodacao_w	bigint := null;


C01 CURSOR(	nr_seq_servico_pc	ptu_servico_pre_pagto.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_nota_cobranca,
		a.nr_nota,
		pls_obter_segurado_carteira(a.cd_unimed || a.cd_usuario_plano, cd_estabelecimento_p) cd_usuario_plano,
		pls_obter_dados_segurado(pls_obter_segurado_carteira(a.cd_unimed || a.cd_usuario_plano, cd_estabelecimento_p), 'NRP') nr_seq_plano,
		a.dt_atendimento,
		a.ie_carater_atendimento ie_carater_internacao, -- 1 = Urgencia/Emergencia	
		a.ie_tipo_saida_spdat,
		a.ie_tipo_atendimento,
		a.cd_cid,
		a.nr_guia_principal,
		a.cd_usuario_plano cd_usuario_plano_imp,
	       (SELECT	max(x.nr_sequencia)							
		from	pls_tipo_atendimento	x
		where	x.cd_estabelecimento	= cd_estabelecimento_p
		and	(x.cd_tiss)::numeric 	= (a.ie_tipo_atendimento)::numeric ) nr_seq_tipo_atendimento,
		coalesce(ie_consistente,'C') ie_consistente,
		a.tp_nota,
		a.tp_consulta,
		a.id_rn,
		a.dt_internacao,
		a.dt_alta,
		a.nr_seq_prest_inter,
		CASE WHEN coalesce(a.dt_internacao::text, '') = '' THEN  'A'  ELSE 'I' END  ie_vinc_internacao,
		CASE WHEN a.tp_ind_acidente='1' THEN  '0' WHEN a.tp_ind_acidente='2' THEN  '1' WHEN a.tp_ind_acidente='3' THEN  '2' WHEN a.tp_ind_acidente='9' THEN  '9'  ELSE null END  ie_indicacao_acidente,
		a.nr_guia_tiss_principal,
		a.nr_guia_tiss_operadora,
		a.nr_guia_tiss_prestador,
		a.ie_cobertura_especial,
		a.ie_regime_atendimento,
		a.ie_saude_ocupacional
	from	ptu_nota_cobranca a
	where	a.nr_seq_serv_pre_pagto = nr_seq_servico_pc;
	
C02 CURSOR(	nr_seq_nota_cobr_pc	ptu_nota_cobranca.nr_sequencia%type) FOR
	SELECT	ds_complemento,
		ie_tipo_complemento
	from	ptu_nota_complemento
	where	nr_seq_nota_cobr = nr_seq_nota_cobr_pc;
		
BEGIN	

select	nr_versao_transacao
into STRICT	nr_versao_transacao_w
from	ptu_servico_pre_pagto
where   nr_sequencia = nr_seq_servico_p;

i := 1;

-- Trunca a table temporaria

CALL exec_sql_dinamico(nm_usuario_p, 'truncate table pls_aux_contas_cobr');	

select	max(cd_unimed_destino)
into STRICT	cd_cooperativa_w -- Codigo da Unimed que ira receber o arquivo
from	ptu_servico_pre_pagto
where	nr_sequencia = nr_seq_servico_p;

-- Cursor de notas de cobranca

for r_c01_w in C01(nr_seq_servico_p) loop
	begin
	if	(r_c01_w.ie_consistente in ('C', 'IG')) then -- 'C' = Consistente / 'IG' = Inconsistente permite gerar contas
	
		/* Todas as variaveis que armazenarao os dados das notas hospitalares e notas de servico devem comecar nulas.
		     Obs: Nem todas as notas de cobranca possuem notas hospitalares e/ou notas de servico vinculadas. */

		     
		-- Variaveis de notas hospitalares

		dt_internacao_w 	:= null;
		dt_alta_w 		:= null;
		ie_tipo_internacao_w	:= null;
		cd_motivo_saida_w	:= null;
		ie_ind_acidente_w	:= null;
		ie_tipo_acomodacao_w	:= null;
		qt_nasc_vivos_w		:= null;
		qt_nasc_mortos_w	:= null;
		qt_nasc_vivos_pre_w	:= null;
		qt_obito_precoce_w	:= null;
		qt_obito_tardio_w	:= null;
		ie_obito_mulher_w	:= null;
		nr_declara_obito_w	:= null;
		ie_int_gestacao_w	:= null;
		ie_int_aborto_w		:= null;
		ie_int_transtorno_w	:= null;
		ie_int_puerperio_w	:= null;
		ie_int_recem_nascido_w	:= null;
		ie_int_neonatal_w	:= null;
		ie_int_baixo_peso_w	:= null;
		ie_int_parto_cesarea_w	:= null;
		ie_int_parto_normal_w	:= null;
		nr_seq_nota_hosp_w	:= null;
		cd_cid_obito_fatura_w	:= null;
		ie_faturamento_w	:= null;
		ie_regime_internacao_w	:= null;
		
		-- Variaveis de notas de servico 

		nr_autorizacao_w	:= null;
		nr_cgc_cpf_req_w	:= null;				
		cd_prestador_req_w	:= null;			
		nm_prestador_req_w	:= null;
		nr_cgc_cpf_w		:= null;				
		cd_prestador_w		:= null;				
		nm_prestador_w		:= null;
		ie_carater_internacao_w	:= null;
		ie_tipo_consulta_w	:= null;
		
		--Versao do PTU, se o valor do campo nr_versao_transacao for menor ou igual a 17, entao

		--o ie_carater_internacao sera obtido de acordo com a versao 6.0 do PTU(Antigo), caso 

		--contrario, o tipo internacao e obtido de acordo com  versao 6.1.

		if (nr_versao_transacao_w <= 17 ) then
			
			if (r_c01_w.ie_carater_internacao = 1) then
				ie_carater_internacao_w := 'U';
			else
				ie_carater_internacao_w := 'E';
			end if;
			
		else
			--Na versao 6.1, somente preenche o carater de internacao se for SP/SDT ou internacao, para os 

			--demais deixa em branco.

			if (r_c01_w.tp_nota in (2,3)) then
				if (r_c01_w.ie_carater_internacao = 1) then
					ie_carater_internacao_w := 'E';
				else
					ie_carater_internacao_w := 'U';
				end if;
			end if;
			
			--Campo tipo de consulta somente deve receber valor quando TP_nota for consulta ou SP/SADT

			--cujo tipo de atendimento for consulta(4). Somente preenche se versao do PTU a partir da 6.1

			--Demais casos deixa em branco.

			if	((r_c01_w.tp_nota = 1) or (r_c01_w.tp_nota = 2 and r_c01_w.nr_seq_tipo_atendimento = 4))then
				
				ie_tipo_consulta_w := r_c01_w.tp_consulta;
			end if;
		
		end if;
		
		-- Se houver algum tipo de atendimento informado na nota de cobranca, o numero de sequencia deste tipo devera ser obtido			

		nr_seq_tipo_atendimento_w := r_c01_w.nr_seq_tipo_atendimento;
		
		select	count(1)
		into STRICT	qt_internacao_w
		from	ptu_nota_hospitalar
		where	nr_seq_nota_cobr = r_c01_w.nr_seq_nota_cobranca  LIMIT 1;
		
		-- O tipo de guia sera determinado pela quantidade de notas hospitalares vinculadas a cada uma das notas de cobranca

		if (qt_internacao_w > 0) then
			ie_tipo_guia_w		:= '5'; -- 5 = Guia de Resumo de Internacao
		else
			select	CASE WHEN coalesce(tp_nota::text, '') = '' THEN  '4' WHEN tp_nota=1 THEN  '3' WHEN tp_nota=2 THEN  '4' WHEN tp_nota=3 THEN  '5' WHEN tp_nota=4 THEN  '6' END
			into STRICT	ie_tipo_guia_w
			from	ptu_nota_cobranca
			where	nr_sequencia = r_c01_w.nr_seq_nota_cobranca;
			--ie_tipo_guia_w		:= '4'; -- 4 = Guia de SP/SADT			

		end if;
		
		-- Obtem os dados de uma unica nota hospitalar que esteja vinculada a nota de cobranca

		begin	
			select	a.nr_sequencia nr_seq_nota_hosp,	coalesce(a.dt_internacao,r_c01_w.dt_internacao),			coalesce(a.dt_alta,r_c01_w.dt_alta),
				a.ie_tipo_internacao,			a.cd_motivo_saida,			CASE WHEN a.ie_ind_acidente='1' THEN '0' WHEN a.ie_ind_acidente='2' THEN '1'  ELSE '2' END  ie_ind_acidente,
				a.ie_tipo_acomodacao,			a.qt_nasc_vivos,			a.qt_nasc_mortos,
				a.qt_nasc_vivos_pre,			a.qt_obito_precoce,			a.qt_obito_tardio,
				a.ie_obito_mulher,			a.nr_declara_obito,			a.ie_int_gestacao,
				a.ie_int_aborto,			a.ie_int_transtorno,			a.ie_int_puerperio,
				a.ie_int_recem_nascido,			a.ie_int_neonatal,			a.ie_int_baixo_peso,
				a.ie_int_parto_cesarea,			a.ie_int_parto_normal,			a.cd_cid_obito,
			       (select	max(x.nr_sequencia) -- Se houver algum tipo de internacao informado na nota hospitalar, o numero de sequencia da clinica devera ser obtido						
				from	pls_clinica		x							
				where	somente_numero(x.cd_ptu) = a.ie_tipo_internacao) nr_seq_clinica,
				a.ie_faturamento,			a.reg_internacao
			into STRICT	nr_seq_nota_hosp_w,			dt_internacao_w,			dt_alta_w,
				ie_tipo_internacao_w,			cd_motivo_saida_w,			ie_ind_acidente_w,
				ie_tipo_acomodacao_w,			qt_nasc_vivos_w,			qt_nasc_mortos_w,	
				qt_nasc_vivos_pre_w,			qt_obito_precoce_w,			qt_obito_tardio_w,	
				ie_obito_mulher_w,			nr_declara_obito_w,			ie_int_gestacao_w,	
				ie_int_aborto_w,			ie_int_transtorno_w,			ie_int_puerperio_w,		
				ie_int_recem_nascido_w,			ie_int_neonatal_w,			ie_int_baixo_peso_w,		
				ie_int_parto_cesarea_w,			ie_int_parto_normal_w,			cd_cid_obito_fatura_w,
				nr_seq_clinica_w,
				ie_faturamento_w,			ie_regime_internacao_w
			from	ptu_nota_hospitalar	a
			where	a.nr_seq_nota_cobr = r_c01_w.nr_seq_nota_cobranca  LIMIT 1;
		exception
		when others then
			nr_seq_nota_hosp_w 	:= null;
			dt_internacao_w		:= null;
			dt_alta_w		:= null;
			ie_tipo_internacao_w	:= null;
			cd_motivo_saida_w	:= null;
			ie_ind_acidente_w	:= null;
			ie_tipo_acomodacao_w	:= null;
			qt_nasc_vivos_w		:= null;
			qt_nasc_mortos_w	:= null;
			qt_nasc_vivos_pre_w	:= null;
			qt_obito_precoce_w	:= null;
			qt_obito_tardio_w	:= null;
			ie_obito_mulher_w	:= null;
			nr_declara_obito_w	:= null;
			ie_int_gestacao_w	:= null;
			ie_int_aborto_w		:= null;
			ie_int_transtorno_w	:= null;
			ie_int_puerperio_w	:= null;
			ie_int_recem_nascido_w	:= null;
			ie_int_neonatal_w	:= null;
			ie_int_baixo_peso_w	:= null;
			ie_int_parto_cesarea_w	:= null;
			ie_int_parto_normal_w	:= null;
			cd_cid_obito_fatura_w	:= null;
			nr_seq_clinica_w	:= null;
			nr_seq_saida_int_w	:= null;
		end;
		
		if (coalesce(cd_motivo_saida_w::text, '') = '') then
			select	max(motivo_encerram)
			into STRICT	cd_motivo_saida_w
			from	ptu_nota_cobranca
			where	nr_sequencia = r_c01_w.nr_seq_nota_cobranca;
			
			select	max(x.nr_sequencia)
			into STRICT	nr_seq_saida_int_w
			from	pls_motivo_saida	x	
			where	somente_numero(x.cd_ptu) = cd_motivo_saida_w;
		else
			select	max(x.nr_sequencia)
			into STRICT	nr_seq_saida_int_w
			from	pls_motivo_saida	x	
			where	somente_numero(x.cd_ptu) = cd_motivo_saida_w;
		end if;
		
		-- Obtem o numero de autorizacao junto aos dados do prestador de uma unica nota de servico que esteja vinculada a nota de cobranca

		select	max(nr_autorizacao),
			nr_cgc_cpf_req,				cd_prestador_req,			nm_prestador_requisitante,
			nr_cgc_cpf,				cd_prestador,				nm_prestador
		into STRICT	nr_autorizacao_w,
			nr_cgc_cpf_req_w,			cd_prestador_req_w,			nm_prestador_req_w,	
			nr_cgc_cpf_w,				cd_prestador_w,				nm_prestador_w
		from	ptu_nota_servico
		where	nr_seq_nota_cobr = r_c01_w.nr_seq_nota_cobranca 	
		group 	by nr_cgc_cpf_req,				
			cd_prestador_req,				
			nm_prestador_requisitante,
			nr_cgc_cpf,					
			cd_prestador,					
			nm_prestador LIMIT 1;
		
		ds_indicacao_clinica_imp_w 	:= '';
		ds_observacao_imp_w 		:= '';
		
		--aldellandrea

		if (ie_tipo_acomodacao_w IS NOT NULL AND ie_tipo_acomodacao_w::text <> '') then
			select 	max(nr_sequencia)
			into STRICT	nr_seq_tipo_acomodacao_w
			from	pls_tipo_acomodacao
			where	ie_tipo_acomodacao_ptu = ie_tipo_acomodacao_w;
		else
			nr_seq_tipo_acomodacao_w:= null;
		end if;
			
		-- Cursor de complementos das notas de cobranca

		for r_c02_w in C02(r_c01_w.nr_seq_nota_cobranca) loop
			begin
				if (r_c02_w.ie_tipo_complemento = 1) and -- 1 = Indicacao Clinica
					(r_c02_w.ds_complemento IS NOT NULL AND r_c02_w.ds_complemento::text <> '') then
					ds_indicacao_clinica_imp_w := substr(trim(both ds_indicacao_clinica_imp_w ||' '|| r_c02_w.ds_complemento), 1, 500);
				elsif (r_c02_w.ie_tipo_complemento = 2) and -- 2 = Observacao da Nota
					(r_c02_w.ds_complemento IS NOT NULL AND r_c02_w.ds_complemento::text <> '') then
					ds_observacao_imp_w := substr(trim(both ds_observacao_imp_w ||' '|| r_c02_w.ds_complemento), 1, 4000);
				end if;	
			end;
		end loop;

		-- Armazena o valor que cada um dos campos da PLS_CONTA recebera

		dados_conta_w.ie_tipo_atendimento_imp(i)	:= r_c01_w.ie_tipo_atendimento;
		dados_conta_w.nr_seq_saida_spsadt(i)		:= r_c01_w.ie_tipo_saida_spdat;
		dados_conta_w.cd_guia(i)			:= r_c01_w.nr_nota;
		dados_conta_w.cd_guia_referencia(i)		:= r_c01_w.nr_guia_principal;
		dados_conta_w.nm_usuario(i)			:= nm_usuario_p;
		dados_conta_w.dt_atualizacao(i)			:= clock_timestamp();
		dados_conta_w.nm_usuario_nrec(i)		:= nm_usuario_p;
		dados_conta_w.dt_atualizacao_nrec(i)		:= clock_timestamp();
		dados_conta_w.nr_seq_protocolo(i)		:= nr_seq_protocolo_p;
		dados_conta_w.cd_estabelecimento(i)		:= cd_estabelecimento_p;
		dados_conta_w.nr_seq_prestador_exec(i)		:= null;
		dados_conta_w.dt_emissao(i)			:= r_c01_w.dt_atendimento;
		dados_conta_w.ie_status(i)			:= 'S'; -- 'S' = A700 finalizado
		dados_conta_w.ie_tipo_guia(i)			:= ie_tipo_guia_w;
		dados_conta_w.nr_seq_segurado(i)		:= r_c01_w.cd_usuario_plano;
		dados_conta_w.nr_seq_fatura(i)			:= null;
		dados_conta_w.cd_cooperativa(i)			:= cd_cooperativa_w;
		dados_conta_w.ie_tipo_conta(i)			:= 'D'; -- 'D' = Intercambio A700
		dados_conta_w.cd_medico_solicitante(i)		:= null;
		dados_conta_w.nr_seq_nota_cobranca(i)		:= r_c01_w.nr_seq_nota_cobranca;
		dados_conta_w.nr_seq_prestador_exec_imp(i)	:= nr_cgc_cpf_w;
		dados_conta_w.nr_seq_prestador_imp(i)		:= nr_cgc_cpf_req_w;
		dados_conta_w.cd_usuario_plano_imp(i)		:= r_c01_w.cd_usuario_plano_imp;
		dados_conta_w.ie_origem_conta(i)		:= 'Z'; -- 'Z' = Importacao do A700
		dados_conta_w.dt_atendimento(i)			:= r_c01_w.dt_atendimento;
		dados_conta_w.ie_carater_internacao(i)		:= ie_carater_internacao_w;
		dados_conta_w.dt_entrada(i)			:= dt_internacao_w;
		dados_conta_w.dt_alta(i)			:= dt_alta_w;
		dados_conta_w.nr_seq_clinica(i)			:= nr_seq_clinica_w;
		dados_conta_w.nr_seq_saida_int(i)		:= nr_seq_saida_int_w;
		dados_conta_w.ie_indicacao_acidente(i)		:= r_c01_w.ie_indicacao_acidente;
		dados_conta_w.cd_senha(i)			:= nr_autorizacao_w;
		dados_conta_w.cd_senha_externa(i)		:= nr_autorizacao_w;
		dados_conta_w.nr_seq_tipo_atendimento(i)	:= nr_seq_tipo_atendimento_w;
		dados_conta_w.cd_prestador_solic_imp(i)		:= cd_prestador_req_w;
		dados_conta_w.nm_prestador_imp(i)		:= nm_prestador_req_w;
		dados_conta_w.cd_prestador_exec_imp(i)		:= cd_prestador_w;
		dados_conta_w.nm_prestador_exec_imp(i)		:= nm_prestador_w;
		dados_conta_w.dt_atendimento_imp(i)		:= r_c01_w.dt_atendimento;
		dados_conta_w.ie_tipo_acomodacao_ptu(i)		:= ie_tipo_acomodacao_w;
		dados_conta_w.ds_indicacao_clinica(i)		:= ds_indicacao_clinica_imp_w;
		dados_conta_w.ds_observacao(i)			:= ds_observacao_imp_w;
		dados_conta_w.ie_gestacao(i)			:= ie_int_gestacao_w;
		dados_conta_w.ie_aborto(i)			:= ie_int_aborto_w;
		dados_conta_w.ie_parto_normal(i)		:= ie_int_parto_normal_w;
		dados_conta_w.ie_complicacao_puerperio(i)	:= ie_int_puerperio_w;
		dados_conta_w.ie_complicacao_neonatal(i)	:= ie_int_neonatal_w;
		dados_conta_w.ie_parto_cesaria(i)		:= ie_int_parto_cesarea_w;
		dados_conta_w.ie_baixo_peso(i)			:= ie_int_baixo_peso_w;
		dados_conta_w.ie_atend_rn_sala_parto(i)		:= ie_int_recem_nascido_w;
		dados_conta_w.ie_transtorno(i)			:= ie_int_transtorno_w;
		dados_conta_w.ie_obito_mulher(i)		:= ie_obito_mulher_w;
		dados_conta_w.qt_obito_precoce(i)		:= qt_obito_precoce_w;
		dados_conta_w.qt_obito_tardio(i)		:= qt_obito_tardio_w;
		dados_conta_w.qt_nasc_vivos_termo(i)		:= qt_nasc_vivos_w;
		dados_conta_w.qt_nasc_mortos(i)			:= qt_nasc_mortos_w;
		dados_conta_w.qt_nasc_vivos_prematuros(i)	:= qt_nasc_vivos_pre_w;
		dados_conta_w.nr_seq_serv_pre_pagto(i)		:= nr_seq_servico_p;
		dados_conta_w.ie_tipo_consulta(i)		:= ie_tipo_consulta_w;
		dados_conta_w.nr_seq_tipo_acomodacao(i)		:= nr_seq_tipo_acomodacao_w;
		dados_conta_w.ie_recem_nascido(i)		:= r_c01_w.id_rn;
		dados_conta_w.nr_seq_nota_hospitalar(i)		:= nr_seq_nota_hosp_w;
		dados_conta_w.ie_tipo_faturamento(i)		:= pls_obter_tipo_fat_prod_med(ie_faturamento_w);
		dados_conta_w.ie_regime_internacao(i)		:= ie_regime_internacao_w;
		dados_conta_w.nr_seq_prest_inter(i)		:= r_c01_w.nr_seq_prest_inter;
		dados_conta_w.ie_vinc_internacao(i)		:= r_c01_w.ie_vinc_internacao;
		dados_conta_w.nr_seq_plano(i)			:= r_c01_w.nr_seq_plano;
		dados_conta_w.nr_guia_tiss_principal(i)		:= r_c01_w.nr_guia_tiss_principal;
		dados_conta_w.nr_guia_tiss_operadora(i)		:= r_c01_w.nr_guia_tiss_operadora;
		dados_conta_w.nr_guia_tiss_prestador(i)		:= r_c01_w.nr_guia_tiss_prestador;
		dados_conta_w.ie_cobertura_especial(i)		:= r_c01_w.ie_cobertura_especial;
		dados_conta_w.ie_regime_atendimento(i)		:= r_c01_w.ie_regime_atendimento;
		dados_conta_w.ie_saude_ocupacional(i)		:= r_c01_w.ie_saude_ocupacional;
		
		-- Armazena os dados nas variaveis table

		nr_seq_nota_cobr_table_w(i)			:= r_c01_w.nr_seq_nota_cobranca;
		nr_seq_nota_cobr_table_w(i)			:= r_c01_w.nr_seq_nota_cobranca;
		cd_cid_table_w(i)				:= r_c01_w.cd_cid;
		cd_cid_obito_fatura_table_w(i)			:= cd_cid_obito_fatura_w;
		nr_declara_obito_table_w(i)			:= nr_declara_obito_w;
		nr_seq_nota_hosp_table_w(i)			:= nr_seq_nota_hosp_w;
		
			
		if (i >= current_setting('pls_gerar_contas_a700_pck.qt_registro_transacao_w')::integer) then
			-- Gera as contas / Gera declaracoes de obito e de nascimento / Gera procedimentos e materiais / Atualiza dados das contas

			CALL pls_gerar_contas_a700_pck.processar_contas_a700(	nr_seq_servico_p,
						dados_conta_w,
						nr_seq_nota_cobr_table_w,
						cd_cid_table_w,
						cd_cid_obito_fatura_table_w,
						nr_declara_obito_table_w,
						nr_seq_nota_hosp_table_w,
						nm_usuario_p,
						cd_estabelecimento_p	);
				
			-- Limpa as variaveis table do type "dados_conta"

			dados_conta_w := pls_gerar_contas_a700_pck.limpar_type_dados_conta_a700(dados_conta_w);
					
			-- Limpa as variaveis table

			nr_seq_nota_cobr_table_w.delete;
			cd_cid_table_w.delete;
			cd_cid_obito_fatura_table_w.delete;
			nr_declara_obito_table_w.delete;
			nr_seq_nota_hosp_table_w.delete;

			i := 1;
		else
			i := i + 1;
		end if;	
	end if;	
	end;
end loop;

-- Caso sobre algum item dentro das variaveis table, estes tambem precisam ser atualizados

CALL pls_gerar_contas_a700_pck.processar_contas_a700(	nr_seq_servico_p,
			dados_conta_w,
			nr_seq_nota_cobr_table_w,
			cd_cid_table_w,
			cd_cid_obito_fatura_table_w,
			nr_declara_obito_table_w,
			nr_seq_nota_hosp_table_w,
			nm_usuario_p,
			cd_estabelecimento_p	);
			
-- Limpa as variaveis table do type "dados_conta"

dados_conta_w := pls_gerar_contas_a700_pck.limpar_type_dados_conta_a700(dados_conta_w);
		
-- Limpa as variaveis table

nr_seq_nota_cobr_table_w.delete;
cd_cid_table_w.delete;
cd_cid_obito_fatura_table_w.delete;
nr_declara_obito_table_w.delete;
nr_seq_nota_hosp_table_w.delete;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contas_a700_pck.definir_contas_a_gerar_a700 ( nr_seq_servico_p ptu_servico_pre_pagto.nr_sequencia%type, nr_seq_protocolo_p pls_conta.nr_seq_protocolo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) FROM PUBLIC;
