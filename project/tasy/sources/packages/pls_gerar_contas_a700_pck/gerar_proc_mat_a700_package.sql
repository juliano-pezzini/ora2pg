-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/




CREATE OR REPLACE PROCEDURE pls_gerar_contas_a700_pck.gerar_proc_mat_a700 ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_nota_cobranca_p ptu_nota_cobranca.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina responsavel por gerar procedimentos, participantes de procedimentos, e materiais.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

-- Variaveis da PTU_NOTA_SERVICO:				

nm_prestador_w			ptu_nota_servico.nm_prestador%type;
cd_prestador_w			ptu_nota_servico.cd_prestador%type;
ie_tipo_participacao_w		ptu_nota_servico.ie_tipo_participacao%type;
vl_adic_procedimento_w		ptu_nota_servico.vl_adic_procedimento%type;
vl_adic_co_w			ptu_nota_servico.vl_adic_co%type;
vl_adic_filme_w			ptu_nota_servico.vl_adic_filme%type;
vl_procedimento_w		ptu_nota_servico.vl_procedimento%type;
vl_custo_operacional_w		ptu_nota_servico.vl_custo_operacional%type;
cd_procedimento_w		ptu_nota_servico.cd_procedimento%type;
nr_seq_material_w		ptu_nota_servico.nr_seq_material%type;
ie_origem_proced_w		ptu_nota_servico.ie_origem_proced%type;
nr_seq_nota_servico_w		ptu_nota_servico.nr_sequencia%type;
qt_procedimento_w		ptu_nota_servico.qt_procedimento%type;
ie_via_acesso_w			ptu_nota_servico.ie_via_acesso%type;
ie_tipo_despesa_w		ptu_nota_servico.ie_tipo_tabela%type;
dt_procedimento_w		ptu_nota_servico.dt_procedimento%type;
cd_servico_w			ptu_nota_servico.cd_servico%type;
nr_cgc_cpf_w			ptu_nota_servico.nr_cgc_cpf%type;
nr_cgc_cpf_req_w		ptu_nota_servico.nr_cgc_cpf_req%type;
ie_tipo_pessoa_prestador_w	ptu_nota_servico.ie_tipo_pessoa_prestador%type;
vl_filme_w			ptu_nota_servico.vl_filme%type;
ds_hora_procedimento_w		ptu_nota_servico.ds_hora_procedimento%type;
cd_porte_anestesico_w		ptu_nota_servico.cd_porte_anestesico%type;
ds_servico_w			ptu_nota_servico.ds_servico%type;
ie_pacote_w			ptu_nota_servico.ie_pacote%type;
nr_seq_proc_serv_w		ptu_nota_servico.nr_seq_conta_proc%type;
nr_seq_mat_serv_w		ptu_nota_servico.nr_seq_conta_mat%type;
nr_seq_proc_partic_w		ptu_nota_servico.nr_seq_proc_partic%type;

-- Variaveis da PLS_CONTA_PROC:

nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
tx_procedimento_w		pls_conta_proc.tx_item%type;
ds_via_acesso_w			pls_conta_proc.ie_via_acesso%type;
tx_intercambio_imp_w		pls_conta_proc.tx_intercambio_imp%type;
vl_proc_apresentado_ww		pls_conta_proc.vl_procedimento_imp%type;
vl_procedimento_uni_w		pls_conta_proc.vl_unitario_imp%type;
dt_inicio_proc_w		pls_conta_proc.dt_inicio_proc%type;

-- Variaveis table:	

nr_seq_serv_table_proc_w	dbms_sql.number_table;
nr_seq_serv_table_mat_w		dbms_sql.number_table;
cd_proc_table_w			dbms_sql.number_table;
ie_orig_proc_table_w		dbms_sql.number_table;
ie_tipo_particip_table_w	dbms_sql.varchar2_table;
nm_medico_exec_table_w		dbms_sql.varchar2_table;
vl_apresentado_table_w		dbms_sql.number_table;
nr_seq_proc_insert_w		dbms_sql.number_table;
nr_seq_partic_insert_w		dbms_sql.number_table;
nr_seq_mat_insert_w		dbms_sql.number_table;

-- Contadores:

i_proc				integer; -- contador de procedimentos
i_mat				integer; -- contador de materiais

-- Types:

dados_proc_w			dados_proc;
dados_mat_w			dados_mat;

-- Outras variaveis:

current_setting('pls_gerar_contas_a700_pck.qt_registro_transacao_w')::integer		integer;
cd_guia_w			pls_conta.cd_guia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
ie_material_intercambio_w	pls_parametros.ie_material_intercambio%type;
qt_servico_w			integer;
vl_total_proc_w			double precision;
vl_total_servico_w		double precision;

C01 CURSOR(nr_seq_cobranca_pc	ptu_nota_servico.nr_seq_nota_cobr%type) FOR
	SELECT	ie_tipo_tabela,
		cd_procedimento,
		ie_via_acesso,	--decode(ie_via_acesso,'D',2,'M',1,'U',0),
		dt_procedimento,
		qt_procedimento,
		coalesce(vl_adic_procedimento,0) vl_adic_procedimento,
		coalesce(vl_custo_operacional,0) vl_custo_operacional,
		ie_origem_proced,
		coalesce(vl_procedimento,0) vl_procedimento,
		coalesce(vl_filme,0) vl_filme,
		coalesce(vl_adic_co,0) vl_adic_co,
		coalesce(vl_adic_filme,0) vl_adic_filme,
		nr_seq_material,
		cd_servico,
		nr_sequencia,
		nr_cgc_cpf,
		nr_cgc_cpf_req,
		ie_tipo_pessoa_prestador,
		ie_tipo_participacao,
		cd_prestador,
		nm_prestador,
		ds_hora_procedimento,
		cd_porte_anestesico,
		ds_servico,
		ie_pacote,
		nr_seq_conta_proc,
		nr_seq_conta_mat,
		nr_seq_proc_partic,
		coalesce((replace(substr(ptu_obter_dados_nota_servico(nr_sequencia,'VTP'),1,255),'.',''))::numeric ,0) vl_total_servico
	from	ptu_nota_servico
	where	nr_seq_nota_cobr = nr_seq_cobranca_pc;
			
BEGIN

-- Obs: estes contadores serao usados em paralelo com o FORALL de outras procedures e precisam comecar com 1 porque o indice do FORALL comeca com 1

i_proc	:= 1;
i_mat	:= 1;

select 	coalesce(max(ie_material_intercambio),'S')
into STRICT	ie_material_intercambio_w
from	table(pls_parametros_pck.f_retorna_param(cd_estabelecimento_p));

-- Cursor de notas de servico

for r_c01_w in C01(nr_seq_nota_cobranca_p) loop
	begin
	ie_tipo_despesa_w		:= r_c01_w.ie_tipo_tabela;
	cd_procedimento_w		:= r_c01_w.cd_procedimento;
	ie_via_acesso_w			:= r_c01_w.ie_via_acesso;
	dt_procedimento_w		:= r_c01_w.dt_procedimento;
	qt_procedimento_w		:= r_c01_w.qt_procedimento;
	vl_adic_procedimento_w		:= r_c01_w.vl_adic_procedimento;
	vl_custo_operacional_w		:= r_c01_w.vl_custo_operacional;
	ie_origem_proced_w		:= r_c01_w.ie_origem_proced;
	vl_procedimento_w		:= r_c01_w.vl_procedimento;
	vl_filme_w			:= r_c01_w.vl_filme;
	vl_adic_co_w			:= r_c01_w.vl_adic_co;
	vl_adic_filme_w			:= r_c01_w.vl_adic_filme;
	nr_seq_material_w		:= r_c01_w.nr_seq_material;
	cd_servico_w			:= r_c01_w.cd_servico;
	nr_seq_nota_servico_w		:= r_c01_w.nr_sequencia;
	nr_cgc_cpf_w			:= r_c01_w.nr_cgc_cpf;
	nr_cgc_cpf_req_w		:= r_c01_w.nr_cgc_cpf_req;
	ie_tipo_pessoa_prestador_w 	:= r_c01_w.ie_tipo_pessoa_prestador;
	ie_tipo_participacao_w		:= r_c01_w.ie_tipo_participacao;
	cd_prestador_w			:= r_c01_w.cd_prestador;
	nm_prestador_w			:= r_c01_w.nm_prestador;
	ds_hora_procedimento_w		:= r_c01_w.ds_hora_procedimento;
	cd_porte_anestesico_w		:= r_c01_w.cd_porte_anestesico;
	ds_servico_w			:= r_c01_w.ds_servico;
	ie_pacote_w			:= r_c01_w.ie_pacote;
	vl_total_servico_w		:= r_c01_w.vl_total_servico;
	nr_seq_proc_serv_w		:= r_c01_w.nr_seq_conta_proc;
	nr_seq_mat_serv_w		:= r_c01_w.nr_seq_conta_mat;
	nr_seq_proc_partic_w		:= r_c01_w.nr_seq_proc_partic;	
	
	/* Efetua a soma dos valores - OS 416758 */


	vl_total_proc_w	:= coalesce(vl_procedimento_w,0) + coalesce(vl_filme_w,0) + coalesce(vl_custo_operacional_w,0);
	
	tx_intercambio_imp_w	:= round((dividir_sem_round((vl_adic_procedimento_w + vl_adic_co_w + vl_adic_filme_w),vl_total_proc_w))::numeric,2) * 100;
	/*Robson da Silva OS - 376887*/


	vl_proc_apresentado_ww 	:= vl_procedimento_w + vl_adic_procedimento_w + vl_custo_operacional_w + vl_adic_co_w + vl_filme_w + vl_adic_filme_w;
	vl_procedimento_uni_w	:= dividir_sem_round(vl_proc_apresentado_ww, qt_procedimento_w);
	
	begin
	dt_inicio_proc_w := to_date(to_char(dt_procedimento_w,'dd/mm/yyyy')||' '||ds_hora_procedimento_w, 'dd/mm/yyyy hh24:mi:ss');
	exception
	when others then
		dt_inicio_proc_w := null;
	end;	
	
	if (ie_tipo_despesa_w in (0, 1, 4)) then -- 0 = Rol de Procedimentos Unimed -- 1 = Servicos Hospitalares / Taxas / Complementos --  Servico com Custo Fechado / Pacote	
	-- PROCEDIMENTOS

		
		-- As variaveis table abaixo nao podem ser inicializadas sem valor pois serao esses os valores gravados nas notas de servico

		nr_seq_serv_table_proc_w(i_proc)	:= nr_seq_nota_servico_w;
		cd_proc_table_w(i_proc)			:= cd_procedimento_w;
		ie_orig_proc_table_w(i_proc) 		:= ie_origem_proced_w;
		
		case(ie_via_acesso_w)
			when 2 then -- 2 =  Via diferente (70% HM)
				ds_via_acesso_w := 'D'; -- 'D' =  Via de acesso Diferente
			when 1 then -- 1 = Mesma via (50% HM)
				ds_via_acesso_w := 'M'; -- 'M' = Mesma via de acesso
			when 0 then -- 0 = Independe da via (100% HM)
				ds_via_acesso_w := 'U'; -- 'U' = unica ou principal
			else
				null;
		end case;	

		if (ds_via_acesso_w in ('D','M','U') ) then
			tx_procedimento_w := obter_tx_proc_via_acesso(ds_via_acesso_w);
		else
			tx_procedimento_w := 100;
		end if;

		select	cd_guia
		into STRICT	cd_guia_w
		from	pls_conta a
		where	a.nr_sequencia = nr_seq_conta_p;
		
		case(ie_tipo_despesa_w)
			when 0 then -- 0 = Rol de Procedimentos Unimed (ptu_nota_servico)
				ie_tipo_despesa_w := 1; -- 1 = Procedimentos (pls_conta_proc)
			when 1 then -- 1 = Servicos Hospitalares / Taxas / Complementos (ptu_nota_servico)
				ie_tipo_despesa_w := 2; -- 2 = Taxas (pls_conta_proc)
			else
				null;
		end case;
		
		select	count(1)
		into STRICT	qt_servico_w
		from	procedimento
		where	cd_procedimento = cd_procedimento_w  LIMIT 1;
		
		if (qt_servico_w = 0) then		
			cd_proc_table_w(i_proc)		:= null;
			ie_orig_proc_table_w(i_proc) 	:= null;
					
			cd_procedimento_w	:= null;
			ie_origem_proced_w	:= null;
		end if;	
		
		dados_proc_w.cd_procedimento(i_proc) 		:= cd_procedimento_w;			
		dados_proc_w.ie_via_acesso(i_proc) 		:= ds_via_acesso_w;
		dados_proc_w.dt_procedimento(i_proc) 		:= dt_procedimento_w;
		dados_proc_w.tx_item(i_proc) 			:= tx_procedimento_w;
		dados_proc_w.qt_procedimento(i_proc) 		:= qt_procedimento_w;
		dados_proc_w.ie_status(i_proc) 			:= 'S'; -- Liberado pelo Sistema
		dados_proc_w.vl_procedimento_imp(i_proc) 	:= vl_proc_apresentado_ww;
		dados_proc_w.ie_tipo_despesa(i_proc) 		:= ie_tipo_despesa_w;
		dados_proc_w.nr_seq_conta(i_proc) 		:= nr_seq_conta_p;
		dados_proc_w.ie_situacao(i_proc) 		:= 'I'; -- 'I' = Importado 
		dados_proc_w.vl_unitario_imp(i_proc) 		:= vl_procedimento_uni_w;
		dados_proc_w.qt_procedimento_imp(i_proc) 	:= qt_procedimento_w;
		dados_proc_w.ie_origem_proced(i_proc) 		:= ie_origem_proced_w;
		dados_proc_w.vl_adic_procedimento(i_proc) 	:= vl_adic_procedimento_w;
		dados_proc_w.vl_adic_co(i_proc) 		:= vl_adic_co_w;
		dados_proc_w.vl_adic_materiais(i_proc) 		:= vl_adic_filme_w;
		dados_proc_w.cd_procedimento_imp(i_proc) 	:= cd_servico_w;
		dados_proc_w.tx_intercambio_imp(i_proc) 	:= tx_intercambio_imp_w;
		dados_proc_w.vl_taxa_co_imp(i_proc) 		:= vl_adic_co_w;
		dados_proc_w.vl_taxa_servico_imp(i_proc) 	:= vl_adic_procedimento_w;
		dados_proc_w.vl_taxa_material_imp(i_proc) 	:= vl_adic_filme_w;
		dados_proc_w.vl_procedimento_ptu_imp(i_proc) 	:= vl_procedimento_w;
		dados_proc_w.vl_co_ptu_imp(i_proc) 		:= vl_custo_operacional_w;
		dados_proc_w.vl_material_ptu_imp(i_proc) 	:= vl_filme_w;
		dados_proc_w.dt_inicio_proc(i_proc) 		:= dt_inicio_proc_w;
		dados_proc_w.cd_porte_anestesico_imp(i_proc) 	:= cd_porte_anestesico_w;
		dados_proc_w.ds_procedimento_imp(i_proc) 	:= ds_servico_w;
		dados_proc_w.ie_ato_cooperado(i_proc) 		:= '1'; -- '1' = Ato cooperativo Principal
		dados_proc_w.ie_pacote_ptu(i_proc) 		:= ie_pacote_w;
		dados_proc_w.qt_ptu_item(i_proc) 		:= qt_procedimento_w;
		dados_proc_w.vl_apresentado_xml(i_proc) 	:= vl_proc_apresentado_ww;
		dados_proc_w.vl_liberado(i_proc) 		:= vl_total_servico_w;
		dados_proc_w.vl_unitario(i_proc) 		:= dividir(vl_total_servico_w,qt_procedimento_w);
		
		-- Variaveis table utilizados para o insert na tabela PLS_PROC_PARTICIPANTE

		ie_tipo_particip_table_w(i_proc)	:= ie_tipo_participacao_w;
		nm_medico_exec_table_w(i_proc)		:= cd_prestador_w || ' - ' || nm_prestador_w;
		vl_apresentado_table_w(i_proc)		:= vl_procedimento_w;
		
		if (i_proc >= current_setting('pls_gerar_contas_a700_pck.qt_registro_transacao_w')::integer) then
			-- Faz insert na PLS_CONTA_PROC

			nr_seq_proc_insert_w := pls_gerar_contas_a700_pck.inserir_conta_proc_a700(dados_proc_w, nr_seq_proc_insert_w, nm_usuario_p, cd_estabelecimento_p);
			
			--Gerar coparticipacoes procedimentos(a partir das sequencias de procedimentos recem inseridos).

			CALL pls_gerar_contas_a700_pck.gera_copartic_proc(nr_seq_proc_insert_w, nm_usuario_p, cd_estabelecimento_p);
				
			-- Faz insert na PLS_PROC_PARTICIPANTE

			nr_seq_partic_insert_w := pls_gerar_contas_a700_pck.inserir_proc_particip_a700(	nr_seq_proc_insert_w, ie_tipo_particip_table_w, nm_medico_exec_table_w, vl_apresentado_table_w, nr_seq_partic_insert_w, nm_usuario_p, cd_estabelecimento_p);	
								
			-- Altera os dados da tabela PTU_NOTA_SERVICO

			CALL pls_gerar_contas_a700_pck.atualizar_nota_serv_proc_a700(nr_seq_serv_table_proc_w, cd_proc_table_w, ie_orig_proc_table_w, nr_seq_proc_insert_w, nr_seq_partic_insert_w);
				
			-- Limpa as variaveis table do type "dados_proc"

			dados_proc_w := pls_gerar_contas_a700_pck.limpar_type_dados_proc_a700(dados_proc_w);
			
			-- Limpa as variaveis table

			nr_seq_serv_table_proc_w.delete;
			cd_proc_table_w.delete;
			ie_orig_proc_table_w.delete;
			nr_seq_proc_insert_w.delete;
			nr_seq_partic_insert_w.delete;
			
			i_proc := 1;
		else
			i_proc := i_proc + 1;
		end if;	
	elsif (ie_tipo_despesa_w in (2, 3, 5, 6)) then -- 2 = Materiais / 3 = Medicamentos / 5 = TUSS Materiais / 6 = TUSS Medicamentos
	-- MATERIAIS				

		
		nr_seq_serv_table_mat_w(i_mat)	:= nr_seq_nota_servico_w;
		
		case(ie_tipo_despesa_w)
			when 6 then -- 6 = TUSS Medicamentos (ptu_nota_servico)
				ie_tipo_despesa_w := 2; -- 2 = Medicamentos (pls_conta_mat)
			when 5 then -- 5 = TUSS Materiais (ptu_nota_servico)
				ie_tipo_despesa_w := 3; -- 3 = Materiais (pls_conta_mat)
			when 3 then -- 3 = Medicamentos (ptu_nota_servico)
				ie_tipo_despesa_w := 2; -- 2 = Medicamentos (pls_conta_mat)
			when 2 then -- 2 = Materiais (ptu_nota_servico)
				ie_tipo_despesa_w := 3; -- 3 = Materiais (pls_conta_mat)
			else
				null;
		end case;

		dados_mat_w.nr_seq_material(i_mat) 		:= nr_seq_material_w;
		dados_mat_w.dt_atendimento(i_mat)		:= dt_procedimento_w;
		dados_mat_w.tx_reducao_acrescimo(i_mat)		:= tx_procedimento_w;
		dados_mat_w.qt_material(i_mat)			:= qt_procedimento_w;
		dados_mat_w.vl_material_imp(i_mat)		:= vl_proc_apresentado_ww;
		dados_mat_w.ie_status(i_mat)			:= 'S'; -- 'S' = Liberado pelo Sistema
		dados_mat_w.nr_seq_conta(i_mat)			:= nr_seq_conta_p;
		dados_mat_w.ie_situacao(i_mat)			:= 'I'; -- 'I' = Importado
		dados_mat_w.vl_unitario_imp(i_mat)		:= vl_procedimento_uni_w;
		dados_mat_w.qt_material_imp(i_mat)		:= qt_procedimento_w;
		dados_mat_w.ie_tipo_despesa(i_mat)		:= ie_tipo_despesa_w;
		dados_mat_w.vl_taxa_material_imp(i_mat)		:= vl_adic_procedimento_w;
		dados_mat_w.cd_material_imp(i_mat)		:= cd_servico_w;
		dados_mat_w.dt_inicio_atend(i_mat)		:= dt_inicio_proc_w;
		dados_mat_w.ds_material_imp(i_mat)		:= ds_servico_w;
		dados_mat_w.ie_ato_cooperado(i_mat)		:= '1'; -- '1' = Ato cooperativo Principal
		dados_mat_w.tx_intercambio_imp(i_mat)		:= tx_intercambio_imp_w;
		dados_mat_w.ie_pacote_ptu(i_mat)		:= ie_pacote_w;
		dados_mat_w.vl_liberado(i_mat)			:= vl_total_servico_w;
		dados_mat_w.vl_unitario(i_mat)			:= dividir(vl_total_servico_w, qt_procedimento_w);
		
		if (i_mat >= current_setting('pls_gerar_contas_a700_pck.qt_registro_transacao_w')::integer) then
			-- Faz insert na PLS_CONTA_MAT

			nr_seq_mat_insert_w := pls_gerar_contas_a700_pck.inserir_conta_mat_a700(dados_mat_w, nr_seq_mat_insert_w, nm_usuario_p, cd_estabelecimento_p);
			
			--Gera coparticipacoes para materiais(Com as sequencias do materiais recem inseridos).

			CALL pls_gerar_contas_a700_pck.gera_copartic_mat(nr_seq_mat_insert_w, nm_usuario_p, cd_estabelecimento_p);
			
			-- Altera os dados da tabela PTU_NOTA_SERVICO

			CALL pls_gerar_contas_a700_pck.atualizar_nota_serv_mat_a700(nr_seq_serv_table_mat_w, nr_seq_mat_insert_w);
		
			-- Limpa as variaveis table do type "dados_mat"

			dados_mat_w := pls_gerar_contas_a700_pck.limpar_type_dados_mat_a700(dados_mat_w);
						
			-- Limpa as variaveis table			

			nr_seq_serv_table_mat_w.delete;
			nr_seq_mat_insert_w.delete;
			
			i_mat := 1;
		else
			i_mat := i_mat + 1;
		end if;				
	end if;
	end;
end loop;

-- Caso sobre algum item dentro das variaveis table, estes tambem precisam ser atualizadas

nr_seq_proc_insert_w := pls_gerar_contas_a700_pck.inserir_conta_proc_a700( dados_proc_w, nr_seq_proc_insert_w, nm_usuario_p, cd_estabelecimento_p);
CALL pls_gerar_contas_a700_pck.gera_copartic_proc(nr_seq_proc_insert_w, nm_usuario_p, cd_estabelecimento_p);
nr_seq_partic_insert_w := pls_gerar_contas_a700_pck.inserir_proc_particip_a700( nr_seq_proc_insert_w, ie_tipo_particip_table_w, nm_medico_exec_table_w, vl_apresentado_table_w, nr_seq_partic_insert_w, nm_usuario_p, cd_estabelecimento_p); 							
CALL pls_gerar_contas_a700_pck.atualizar_nota_serv_proc_a700( nr_seq_serv_table_proc_w, cd_proc_table_w, ie_orig_proc_table_w, nr_seq_proc_insert_w, nr_seq_partic_insert_w); 										
nr_seq_mat_insert_w := pls_gerar_contas_a700_pck.inserir_conta_mat_a700(dados_mat_w, nr_seq_mat_insert_w, nm_usuario_p, cd_estabelecimento_p); 	
CALL pls_gerar_contas_a700_pck.gera_copartic_mat(nr_seq_mat_insert_w, nm_usuario_p, cd_estabelecimento_p);			
CALL pls_gerar_contas_a700_pck.atualizar_nota_serv_mat_a700(nr_seq_serv_table_mat_w, nr_seq_mat_insert_w); 							
	
-- Limpa as variaveis table dos type "dados_proc" e "dados_mat"

dados_proc_w := pls_gerar_contas_a700_pck.limpar_type_dados_proc_a700(dados_proc_w);
dados_mat_w := pls_gerar_contas_a700_pck.limpar_type_dados_mat_a700(dados_mat_w);
			
-- Limpa as variaveis table

nr_seq_serv_table_proc_w.delete;
cd_proc_table_w.delete;
ie_orig_proc_table_w.delete;
nr_seq_proc_insert_w.delete;
nr_seq_partic_insert_w.delete;
nr_seq_serv_table_mat_w.delete;
nr_seq_mat_insert_w.delete;			
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contas_a700_pck.gerar_proc_mat_a700 ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_nota_cobranca_p ptu_nota_cobranca.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
