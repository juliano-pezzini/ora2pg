-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/




CREATE OR REPLACE PROCEDURE pls_gerar_contas_a700_pck.processar_contas_a700 (nr_seq_servico_p ptu_servico_pre_pagto.nr_sequencia%type, dados_conta_p pls_gerar_contas_a700_pck.dados_conta, nr_seq_nota_cobr_table_p dbms_sql.number_table, cd_cid_table_p dbms_sql.varchar2_table, cd_cid_obito_fatura_table_p dbms_sql.varchar2_table, nr_declara_obito_table_p dbms_sql.varchar2_table, nr_seq_nota_hosp_table_p dbms_sql.number_table, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina responsavel por:
		* Gerar contas;
		* Gerar declaracoes de obito e de nascimento.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 				

-- Variaveis table

nr_seq_conta_table_w		dbms_sql.number_table;	

C01 CURSOR(	nr_seq_nota_hosp_pc	ptu_nota_hospitalar.nr_sequencia%type) FOR
	SELECT	a.cd_cid_obito,
		a.nr_declara_obito,
		a.nr_declara_vivo,
		a.ie_recem_nascido
	from	ptu_nota_hosp_compl	a
	where	a.nr_seq_nota_hosp = nr_seq_nota_hosp_pc
	and	(a.cd_cid_obito IS NOT NULL AND a.cd_cid_obito::text <> '')
	
union

	SELECT	a.cd_cid_obito,
		a.nr_declara_obito,
		a.nr_declara_vivo,
		a.ie_recem_nascido
	from	ptu_nota_hosp_compl	a
	where	a.nr_seq_nota_hosp = nr_seq_nota_hosp_pc
	and	(a.nr_declara_obito IS NOT NULL AND a.nr_declara_obito::text <> '')
	
union

	select	a.cd_cid_obito,
		a.nr_declara_obito,
		a.nr_declara_vivo,
		a.ie_recem_nascido
	from	ptu_nota_hosp_compl	a
	where	a.nr_seq_nota_hosp = nr_seq_nota_hosp_pc
	and	(a.nr_declara_vivo IS NOT NULL AND a.nr_declara_vivo::text <> '')
	
union

	select	a.cd_cid_obito,
		a.nr_declara_obito,
		a.nr_declara_vivo,
		a.ie_recem_nascido
	from	ptu_nota_hosp_compl	a
	where	a.nr_seq_nota_hosp = nr_seq_nota_hosp_pc
	and	(a.ie_recem_nascido IS NOT NULL AND a.ie_recem_nascido::text <> '');
	
BEGIN

-- Faz o insert das contas medicas

nr_seq_conta_table_w := pls_gerar_contas_a700_pck.inserir_contas_a700(dados_conta_p, nm_usuario_p, cd_estabelecimento_p, nr_seq_conta_table_w);

-- Percorre todas as contas criadas

for i in nr_seq_conta_table_w.first..nr_seq_conta_table_w.last loop
	-- Obs: As procedures chamadas dentro deste FOR ainda nao foram ajustadas para permitir variaveis table porque sao utilizadas em outras rotinas


	-- Se o CID houver sido informado na nota de cobranca, o diagnostico devera ser gerado para a conta criada

	if ((cd_cid_table_p(i) IS NOT NULL AND (cd_cid_table_p(i))::text <> '')) then
		CALL pls_gerar_diagnostico(nr_seq_conta_table_w(i), cd_cid_table_p(i), nm_usuario_p);
	end if;

	-- Se o CD_CID_OBITO ou o NR_DECLARA_OBITO houverem sido informados na nota hospitalar, uma declaracao de obito devera ser gerada para a conta criada

	if ((cd_cid_obito_fatura_table_p(i) IS NOT NULL AND (cd_cid_obito_fatura_table_p(i))::text <> '')) or ((nr_declara_obito_table_p(i) IS NOT NULL AND (nr_declara_obito_table_p(i))::text <> '')) then
		CALL pls_gerar_decl_nasc_obito(	cd_cid_obito_fatura_table_p(i), nr_declara_obito_table_p(i), null,
						nr_seq_conta_table_w(i), nm_usuario_p,null);
	end if;		

	-- Cursor de complementos das notas hospitalares

	for	r_C01_w in C01(nr_seq_nota_hosp_table_p(i)) loop
		-- Gera declaracoes de obito e de nascimento

		CALL pls_gerar_decl_nasc_obito(	r_C01_w.cd_cid_obito, r_C01_w.nr_declara_obito, r_C01_w.nr_declara_vivo,
						nr_seq_conta_table_w(i), nm_usuario_p,r_C01_w.ie_recem_nascido);
	end loop;
end loop;

-- Insere as contas e notas de cobranca na tabela temporario para que futuramente esta tabela seja utilizada na geracao de procedimentos e materiais

CALL pls_gerar_contas_a700_pck.inserir_contas_tab_temp_a700(nr_seq_conta_table_w, nr_seq_nota_cobr_table_p);
			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contas_a700_pck.processar_contas_a700 (nr_seq_servico_p ptu_servico_pre_pagto.nr_sequencia%type, dados_conta_p pls_gerar_contas_a700_pck.dados_conta, nr_seq_nota_cobr_table_p dbms_sql.number_table, cd_cid_table_p dbms_sql.varchar2_table, cd_cid_obito_fatura_table_p dbms_sql.varchar2_table, nr_declara_obito_table_p dbms_sql.varchar2_table, nr_seq_nota_hosp_table_p dbms_sql.number_table, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
