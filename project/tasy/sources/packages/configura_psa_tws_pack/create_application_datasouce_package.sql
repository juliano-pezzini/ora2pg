-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE configura_psa_tws_pack.create_application_datasouce ( nm_attempts_p datasource.vl_allowed_login_attempts%type, nm_email_admin_p subject.ds_email%type, ds_client_p client.ds_client%type, nm_client_p client.nm_client%type, id_application_p INOUT application.id%type, id_datasource_p INOUT datasource.id%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
id_application      application.id%TYPE;
nm_application_w    application.nm_application%TYPE := 'websuite';
ds_application_w    application.ds_application%TYPE := 'WEBSUITE';

id_client           client.id%TYPE;
id_datasource       datasource.id%TYPE;
ds_datasource_w     datasource.ds_datasource%TYPE := 'WEBSUITE';
nm_datasource_w     datasource.nm_datasource%TYPE := 'WTASY';


BEGIN


/*++++++++++++++++++++++++++++++++++++ CREATE APPLICATION / DATASOURCE  PATIENT +++++++++++++++++++++++++++++++++++++++*/
 --Cria a aplicação no Philips Security
 -- APPLICATION
 select	max(id)
 into STRICT	id_application
 from	application
 where	nm_application = nm_application_w;

if ( coalesce(id_application::text, '') = '' ) then

	id_application  := psa_uuid_generator;

	insert into application(id, dt_creation, dt_modification, ds_application, nm_application)
	values ( id_application, clock_timestamp(), clock_timestamp(), ds_application_w, nm_application_w );

 end if;

-- datasource
select	max(id)
into STRICT	id_datasource
from	datasource
where	nm_datasource = nm_datasource_w;

if ( coalesce(id_datasource::text, '') = '' ) then

	id_datasource := psa_uuid_generator;

	insert into datasource(id, dt_creation, dt_modification, ds_datasource, nm_datasource, id_application, vl_allowed_login_attempts)
	values (id_datasource, clock_timestamp(), clock_timestamp(), ds_datasource_w, nm_datasource_w, id_application, nm_attempts_p );
 end if;

--CLIENT
select	max(id)
into STRICT	id_client
from	client
where	nm_client = nm_client_p;

if ( coalesce(id_client::text, '') = '' ) then

	id_client := psa_uuid_generator;

	insert into client(id, dt_creation, dt_modification, ds_client, nm_client, ds_secret, id_application, vl_authentication_order)
	values (id_client, clock_timestamp(), clock_timestamp(), ds_client_p, nm_client_p, psa_uuid_generator, id_application, 'DS_REPLACEMENT_LOGIN,DS_ALTERNATIVE_LOGIN,DS_LOGIN');

	-- DATASOURCE_CLIENT
	insert into datasource_client(id_datasource,id_client)
	values ( id_datasource, id_client );
end if;

id_application_p 	:= id_application;
id_datasource_p  	:= id_datasource;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE configura_psa_tws_pack.create_application_datasouce ( nm_attempts_p datasource.vl_allowed_login_attempts%type, nm_email_admin_p subject.ds_email%type, ds_client_p client.ds_client%type, nm_client_p client.nm_client%type, id_application_p INOUT application.id%type, id_datasource_p INOUT datasource.id%type) FROM PUBLIC;
