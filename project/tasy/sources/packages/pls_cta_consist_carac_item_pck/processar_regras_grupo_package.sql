-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_consist_carac_item_pck.processar_regras_grupo ( nr_seq_grupo_p pls_lib_item_regra_grupo.nr_sequencia%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Ler as regras de determinado agrupamento e processá-las, gravando o vínculo entre as
	regras e os procedimentos liberados na tabela PLS_CONTA_PROC_REGRA_LIB.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações
-------------------------------------------------------------------------------------------------------------------
jjung OS 629123 - 08/11/2013 -  Criação da procedure.
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dados_regra_w	dados_regra;

-- Obtém todas as regras do grupo passado por parâmetro.
cs_regra_grupo CURSOR(nr_seq_grupo_pc	pls_lib_item_regra_grupo.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_tipo_acomodacao,
		-- Este campo é utilizado como controle, para que só seja feito algum select
		-- na PLS_CONTA_PROC_V se for retornado algum registro neste campo.
		(SELECT	count(1)
		from	pls_lib_item_regra_proc x
		where	x.nr_seq_regra = a.nr_sequencia) qt_proc_lib
	from	pls_lib_item_regra a
	where	a.nr_seq_grupo_regra = nr_seq_grupo_pc;
BEGIN

-- Só irá buscar as regras se for passado um grupo válido.
if (nr_seq_grupo_p IS NOT NULL AND nr_seq_grupo_p::text <> '') then

	-- Varrer as regras para o grupo passado por parâmetro.
	for	rw_regra_grupo_w in cs_regra_grupo(nr_seq_grupo_p) loop

		-- Alimentar os dados da regra que irá ser verficiada.
		dados_regra_w.nr_sequencia		:= rw_regra_grupo_w.nr_sequencia;
		dados_regra_w.nr_seq_regra_grupo	:= nr_seq_grupo_p;
		dados_regra_w.nr_seq_tipo_acomodacao	:= rw_regra_grupo_w.nr_seq_tipo_acomodacao;
		dados_regra_w.qt_procedimento_lib	:= rw_regra_grupo_w.qt_proc_lib;

		-- Busca os procedimentos que estão liberados para a regra atual.
		CALL pls_cta_consist_carac_item_pck.processar_regra(dados_regra_w);
	end loop; -- cs_regra_grupo
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_consist_carac_item_pck.processar_regras_grupo ( nr_seq_grupo_p pls_lib_item_regra_grupo.nr_sequencia%type) FROM PUBLIC;
