-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_cta_consist_carac_item_pck.obter_restricao_regra ( ie_opcao_p text, nr_cursor_p integer, ie_proc_mat_p text, dados_regra_p dados_regra) RETURNS DADOS_RESTRICAO AS $body$
DECLARE


dados_restricao_w	dados_restricao;


BEGIN

-------------------------------------------------------------------------------------------- CAMPOS -------------------------------------------------------------------------------------------------------------------
-- Montar os campos, está sendo feito nesta parte para poder montar o minus, que não irá permitir gravar um proceidmento que já foi liberado para a regra passada.
if (ie_opcao_p = 'RESTRICAO') then

	if (ie_proc_mat_p = 'P') then

		dados_restricao_w.ds_campos_sql :=	dados_restricao_w.ds_campos_sql || pls_util_pck.enter_w ||
							'	proc.nr_sequencia nr_seq_conta_proc, ' || pls_util_pck.enter_w ||
							'	null nr_seq_conta_mat, ' || pls_util_pck.enter_w ||
							'	:nr_seq_regra_lista, ' || pls_util_pck.enter_w ||
							'	''N'' ie_liberado, ' || pls_util_pck.enter_w ||
							'	:nr_seq_regra_carac ';
	end if;
else
	dbms_sql.bind_variable( nr_cursor_p, ':nr_seq_regra_lista', dados_regra_p.nr_seq_regra_grupo);
	dbms_sql.bind_variable( nr_cursor_p, ':nr_seq_regra_carac', dados_regra_p.nr_sequencia);
end if;

-------------------------------------------------------------------------------------------- PARAMETROS -------------------------------------------------------------------------------------------------------------------
-- Restrição quando for passado o lote por parâmetro.
if (current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::(dados_parametros.nr_seq_lote IS NOT NULL AND dados_parametros.nr_seq_lote::text <> '')) then

	if (ie_opcao_p = 'RESTRICAO') then

		if (ie_proc_mat_p = 'P') then

			dados_restricao_w.ds_restricao_lote :=	dados_restricao_w.ds_restricao_lote || pls_util_pck.enter_w ||
								'and	proc.nr_seq_lote_conta = :nr_seq_lote ';
		end if;
	else
		dbms_sql.bind_variable( nr_cursor_p, ':nr_seq_lote', current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::dados_parametros.nr_seq_lote);
	end if;
end if;

-- Realizar o acesso aos procedimentos do protocolo passado por parâmetro.
if (current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::(dados_parametros.nr_seq_protocolo IS NOT NULL AND dados_parametros.nr_seq_protocolo::text <> '')) then

	if (ie_opcao_p = 'RESTRICAO') then

		if (ie_proc_mat_p = 'P') then

			dados_restricao_w.ds_restricao_protocolo :=	dados_restricao_w.ds_restricao_protocolo || pls_util_pck.enter_w ||
									'and	proc.nr_seq_protocolo = :nr_seq_protocolo ';
		end if;
	else
		dbms_sql.bind_variable( nr_cursor_p, ':nr_seq_protocolo', current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::dados_parametros.nr_seq_protocolo);
	end if;
end if;

-- Realizar o acesso aos procedimentos pela conta passada por parâmetro.
if (current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::(dados_parametros.nr_seq_conta IS NOT NULL AND dados_parametros.nr_seq_conta::text <> '')) then

	if (ie_opcao_p = 'RESTRICAO') then

		if (ie_proc_mat_p = 'P') then

			dados_restricao_w.ds_restricao_conta :=	dados_restricao_w.ds_restricao_conta || pls_util_pck.enter_w ||
								'and	proc.nr_seq_conta = :nr_seq_conta ';
		end if;
	else
		dbms_sql.bind_variable( nr_cursor_p, ':nr_seq_conta', current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::dados_parametros.nr_seq_conta);
	end if;
end if;

-- Realizar o acesso aos procedimentos pela conta passada por parâmetro.
if (current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::(dados_parametros.nr_seq_lote_processo IS NOT NULL AND dados_parametros.nr_seq_lote_processo::text <> '')) then

	if (ie_opcao_p = 'RESTRICAO') then

		if (ie_proc_mat_p = 'P') then

			dados_restricao_w.ds_restricao_conta :=	dados_restricao_w.ds_restricao_conta || pls_util_pck.enter_w ||
								'and     exists (	select 1 ' || pls_util_pck.enter_w ||
								'			from   pls_cta_lote_proc_conta processo ' || pls_util_pck.enter_w ||
								'			where  processo.nr_seq_lote_processo = :nr_seq_lote_processo ' || pls_util_pck.enter_w ||
								'			and    processo.nr_seq_conta = proc.nr_seq_conta)';
		end if;
	else
		dbms_sql.bind_variable(nr_cursor_p, ':nr_seq_lote_processo', current_setting('pls_cta_consist_carac_item_pck.dados_parametros_w')::dados_parametros.nr_seq_lote_processo);
	end if;
end if;

-------------------------------------------------------------------------------------------- REGRA ----------------------------------------------------------------------------------------------------------------------
-- Se for uma regra por tipo de acomodação então verifica apenas as contas do tipo de acomodação da regra.
if (dados_regra_p.nr_seq_tipo_acomodacao IS NOT NULL AND dados_regra_p.nr_seq_tipo_acomodacao::text <> '') then

	if (ie_opcao_p = 'RESTRICAO') then

		if (ie_proc_mat_p = 'P') then

			dados_restricao_w.ds_restricao_conta :=	dados_restricao_w.ds_restricao_conta || pls_util_pck.enter_w ||
								'and	proc.nr_seq_tipo_acomodacao = :nr_seq_tipo_acomodacao ';
		end if;
	else
		dbms_sql.bind_variable(nr_cursor_p, ':nr_seq_tipo_acomodacao', dados_regra_p.nr_seq_tipo_acomodacao);
	end if;
end if;

-- Montar a restrição pelos itens que estão liberados para esta regra.
if (ie_opcao_p = 'RESTRICAO') then

	if (ie_proc_mat_p = 'P') then

		dados_restricao_w.ds_restricao_proc :=	dados_restricao_w.ds_restricao_proc || pls_util_pck.enter_w ||
							'and	not exists ( ' || pls_util_pck.enter_w ||
							'		select	1 ' || pls_util_pck.enter_w ||
							'		from	pls_proced_lib_regra_carac_v itens_lib ' || pls_util_pck.enter_w ||
							'		where	itens_lib.nr_seq_regra = :nr_seq_regra ' || pls_util_pck.enter_w ||
							'		and	itens_lib.ie_origem_proced = proc.ie_origem_proced ' || pls_util_pck.enter_w ||
							'		and	itens_lib.cd_procedimento = proc.cd_procedimento ' || pls_util_pck.enter_w ||
							'	) ';
	end if;
else
	dbms_sql.bind_variable(nr_cursor_p, ':nr_seq_regra', dados_regra_p.nr_sequencia);
end if;

return dados_restricao_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_cta_consist_carac_item_pck.obter_restricao_regra ( ie_opcao_p text, nr_cursor_p integer, ie_proc_mat_p text, dados_regra_p dados_regra) FROM PUBLIC;
