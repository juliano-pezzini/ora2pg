-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_odonto_pck.validar_requisicao (nr_seq_requisicao_p pls_requisicao_proc.nr_seq_requisicao%type, cd_estabelecimento_p pls_requisicao.cd_estabelecimento%type, nm_usuario_p pls_requisicao.nm_usuario%type) AS $body$
DECLARE


    cd_usuario_plano_w pls_segurado_carteira.cd_usuario_plano%type;

    dt_validade_carteira_w pls_segurado_carteira.dt_validade_carteira%type;
    dt_requisicao_w        pls_requisicao.dt_requisicao%type;
    dt_rescisao_w          pls_segurado.dt_rescisao%type;
    dt_limite_utilizacao_w pls_segurado.dt_limite_utilizacao%type;

    ie_tipo_pagador_w        varchar(2);
    ie_tipo_guia_w           pls_guia_plano.ie_tipo_guia%type;
    ie_tipo_processo_w       pls_requisicao.ie_tipo_processo%type;

    nr_seq_requisicao_mat_w  bigint;
    nr_seq_requisicao_proc_w bigint;

    nr_seq_segurado_w        pls_requisicao.nr_seq_segurado%type;
    nr_seq_plano_w           pls_requisicao.nr_seq_plano%type;
    nr_seq_prestador_w       pls_requisicao.nr_seq_prestador%type;
    nr_seq_uni_exec_w        pls_requisicao.nr_seq_uni_exec%type;
    nr_seq_congenere_w       pls_segurado.nr_seq_congenere%type;
    nr_seq_guia_princ_w      pls_requisicao.nr_seq_guia_principal%type;
    nr_seq_prest_exec_w      pls_requisicao.nr_seq_prestador%type;
    nr_seq_tipo_acomodacao_w pls_requisicao.nr_seq_tipo_acomodacao%type;
    nr_seq_categoria_w       pls_plano_acomodacao.nr_seq_categoria%type;

    qt_registros_w    bigint;
    qt_dias_vencido_w bigint;
    ie_cheque_w       varchar(1);

    ie_carater_atendimento_w     pls_requisicao.ie_carater_atendimento%type;
    ie_acomodacao_sca_w          varchar(1);
    cd_versao_tiss_w             pls_versao_tiss.cd_versao_tiss%type;
    ie_indicacao_acidente_w      pls_requisicao_diagnostico.ie_indicacao_acidente%type;
    ie_origem_solic_w            pls_requisicao.ie_origem_solic%type;
    ie_evento_w                  varchar(2);
    nr_seq_protocolo_atend_w     pls_protocolo_atendimento.nr_sequencia%type;
    nr_protocolo_w               pls_atendimento.nr_protocolo_atendimento%type;
    nr_seq_atend_pls_w           pls_atendimento.nr_sequencia%type;
    ie_tipo_guia_ref_w           pls_guia_plano.ie_tipo_guia%type;
    nr_seq_guia_ref_w            pls_guia_plano.nr_sequencia%type;
    ie_tipo_atendimento_w        pls_requisicao.ie_tipo_atendimento%type;
    ie_tipo_guia_princ_w         pls_guia_plano.ie_tipo_guia%type;
    nr_seq_guia_principal_w      pls_requisicao.nr_seq_guia_principal%type;
    ie_status_token_w            ptu_pedido_autorizacao.ie_status_token%type;
    ie_valida_token_w            pls_param_atend_geral.ie_valida_token%type;
    ie_valida_token_scs_w        varchar(1);
    nr_seq_leitura_w             pls_carteira_leitura.nr_sequencia%type;
    cd_ausencia_val_benef_tiss_w pls_requisicao.cd_ausencia_val_benef_tiss%type;
    cd_validacao_benef_tiss_w    pls_requisicao.cd_validacao_benef_tiss%type;
    ie_acomodacao_carencia_w     varchar(10);

    c01 CURSOR FOR
      SELECT b.nr_sequencia
        from pls_requisicao a, pls_requisicao_proc b
       where a.nr_sequencia = b.nr_seq_requisicao
         and a.nr_sequencia = nr_seq_requisicao_p
         and coalesce(cd_proc_inexistente::text, '') = ''
         and coalesce(b.ie_cobranca_previa_servico, 'N') <> 'S';

    c02 CURSOR FOR
      SELECT b.nr_sequencia
        from pls_requisicao a, pls_requisicao_mat b
       where a.nr_sequencia = b.nr_seq_requisicao
         and a.nr_sequencia = nr_seq_requisicao_p         
         and coalesce(b.ie_cobranca_previa_servico, 'N') <> 'S';

  
BEGIN
  
    --Atualizando a tabela de grupo de procedimentos
    CALL pls_gerencia_upd_obj_pck.atualizar_objetos('Tasy',
                                               'PLS_CONSISTIR_REQUISICAO',
                                               'PLS_GRUPO_SERVICO_TM');
  
    CALL pls_req_desfazer_consistir(nr_seq_requisicao_p, nm_usuario_p);

    cd_versao_tiss_w := pls_obter_versao_tiss;
    if (coalesce(cd_versao_tiss_w::text, '') = '') then
      cd_versao_tiss_w := '2.02.03';
    end if;

    begin
      select ie_tipo_processo
        into STRICT ie_tipo_processo_w
        from pls_requisicao
       where nr_sequencia = nr_seq_requisicao_p;
    exception
      when no_data_found then
        ie_tipo_processo_w    := 'M';
    end;

    if (coalesce(ie_tipo_processo_w, 'M') <> 'I') then
      CALL pls_cancel_item_req_regra(nr_seq_requisicao_p, nm_usuario_p);
    end if;

    select nr_seq_segurado,
           dt_requisicao,
           ie_tipo_guia,
           coalesce(nr_seq_plano, 0),
           nr_seq_prestador,
           nr_seq_uni_exec,
           nr_seq_prestador_exec,
           nr_seq_tipo_acomodacao,
           ie_carater_atendimento,
           ie_origem_solic,
           nr_seq_atend_pls,
           ie_tipo_atendimento,
           nr_seq_guia_principal,
           cd_ausencia_val_benef_tiss,
           cd_validacao_benef_tiss
      into STRICT nr_seq_segurado_w,
           dt_requisicao_w,
           ie_tipo_guia_w,
           nr_seq_plano_w,
           nr_seq_prestador_w,
           nr_seq_uni_exec_w,
           nr_seq_prest_exec_w,
           nr_seq_tipo_acomodacao_w,
           ie_carater_atendimento_w,
           ie_origem_solic_w,
           nr_seq_atend_pls_w,
           ie_tipo_atendimento_w,
           nr_seq_guia_principal_w,
           cd_ausencia_val_benef_tiss_w,
           cd_validacao_benef_tiss_w
      from pls_requisicao
     where nr_sequencia = nr_seq_requisicao_p;

    if (ie_origem_solic_w = 'E') then
      ie_evento_w := 'IG';
    else
      ie_evento_w := 'CG';
    end if;

    CALL pls_gerar_mensagem_requisicao(nr_seq_requisicao_p,
                                  ie_tipo_guia_w,
                                  ie_carater_atendimento_w,
                                  nm_usuario_p,
                                  cd_estabelecimento_p);

    --Verificar se existe algum tipo de anexo na requisicao, se existir marcar o campo de anexo na PLS_REQUISICAO
    CALL pls_atualizar_tipo_anexo_guia(null, nr_seq_requisicao_p, nm_usuario_p);

    CALL pls_define_regra_retorno(null,
                             nr_seq_requisicao_p,
                             null,
                             null,
                             nm_usuario_p);

    if (nr_seq_plano_w = 0) then
      CALL pls_gravar_requisicao_glosa('1024',
                                  nr_seq_requisicao_p,
                                  null,
                                  null,
                                  '',
                                  nm_usuario_p,
                                  nr_seq_prestador_w,
                                  cd_estabelecimento_p,
                                  null,
                                  null,
                                  ie_evento_w);
    else
      open c01;
      loop
        fetch c01
          into nr_seq_requisicao_proc_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
        begin
          CALL pls_odonto_pck.validar_req_proc(nr_seq_requisicao_proc_w,
                                        cd_estabelecimento_p,
                                        nm_usuario_p);
        end;
      end loop;
      close c01;

      open c02;
      loop
        fetch c02
          into nr_seq_requisicao_mat_w;
        EXIT WHEN NOT FOUND; /* apply on c02 */
        begin
          CALL pls_consistir_requisicao_mat(nr_seq_requisicao_mat_w,
                                       cd_estabelecimento_p,
                                       nm_usuario_p);
        end;
      end loop;
      close c02;
    end if;

    qt_dias_vencido_w := pls_obter_dias_inadimplencia(nr_seq_segurado_w);
    ie_cheque_w       := pls_obter_se_cheque_devolucao(nr_seq_segurado_w);

    begin
      select dt_rescisao, dt_limite_utilizacao, nr_seq_congenere
        into STRICT dt_rescisao_w, dt_limite_utilizacao_w, nr_seq_congenere_w
        from pls_segurado
       where nr_sequencia = nr_seq_segurado_w;
    exception
      when no_data_found then
        dt_rescisao_w          := null;
        dt_limite_utilizacao_w := null;
        nr_seq_congenere_w     := null;
    end;

    if (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '') then
      dt_limite_utilizacao_w := fim_dia(dt_limite_utilizacao_w);
    end if;

    if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') and
       (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '' AND dt_requisicao_w > dt_limite_utilizacao_w) then
      CALL pls_gravar_requisicao_glosa('1014',
                                  nr_seq_requisicao_p,
                                  null,
                                  null,
                                  '',
                                  nm_usuario_p,
                                  nr_seq_prestador_w,
                                  cd_estabelecimento_p,
                                  null,
                                  null,
                                  ie_evento_w);
    end if;

    select coalesce(max(cd_usuario_plano), '0')
      into STRICT cd_usuario_plano_w
      from pls_segurado_carteira
     where nr_seq_segurado = nr_seq_segurado_w
       and trunc(dt_inicio_vigencia) <= trunc(clock_timestamp());

    if (cd_usuario_plano_w = '0') then
      CALL pls_gravar_requisicao_glosa('1001',
                                  nr_seq_requisicao_p,
                                  null,
                                  null,
                                  '',
                                  nm_usuario_p,
                                  nr_seq_prestador_w,
                                  cd_estabelecimento_p,
                                  null,
                                  null,
                                  ie_evento_w);
    else
      select max(dt_validade_carteira)
        into STRICT dt_validade_carteira_w
        from pls_segurado_carteira
       where cd_usuario_plano = cd_usuario_plano_w
         and nr_seq_segurado = nr_seq_segurado_w;

      if ((fim_dia(dt_validade_carteira_w) < dt_requisicao_w) and (dt_validade_carteira_w IS NOT NULL AND dt_validade_carteira_w::text <> '')) then
        CALL pls_gravar_requisicao_glosa('1017',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    '',
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    ie_evento_w);
      end if;
    end if;

    if (ie_tipo_guia_w = '1') then
      select count(1)
        into STRICT qt_registros_w
        from pls_requisicao_diagnostico
       where nr_seq_requisicao = nr_seq_requisicao_p;

      if (qt_registros_w = 0) then
        CALL pls_gravar_requisicao_glosa('1508',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    '',
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    ie_evento_w);
      end if;
    end if;

    begin
      select nr_seq_guia_principal
        into STRICT nr_seq_guia_princ_w
        from pls_requisicao
       where nr_sequencia = nr_seq_requisicao_p;
    exception
      when no_data_found then
        nr_seq_guia_princ_w := 0;
    end;

    if (ie_tipo_guia_w = '8') then
      if (coalesce(nr_seq_guia_princ_w, 0) = 0) then
        /* Nao existe o Numero Guia Principal informado */

        CALL pls_gravar_requisicao_glosa('1303',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    '',
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    ie_evento_w);
      else
        select coalesce(max(nr_sequencia), 0)
          into STRICT nr_seq_guia_ref_w
          from pls_guia_plano
         where nr_sequencia = nr_seq_guia_princ_w
           and nr_seq_segurado = nr_seq_segurado_w
           and (ie_status = '1' or ie_status = '2');

        if (nr_seq_guia_ref_w = 0) then
          /* Nao existe guia de autorizacao relacionada */

          CALL pls_gravar_requisicao_glosa('1404',
                                      nr_seq_requisicao_p,
                                      null,
                                      null,
                                      expressao_pck.obter_desc_expressao(969795),
                                      nm_usuario_p,
                                      nr_seq_prestador_w,
                                      cd_estabelecimento_p,
                                      null,
                                      null,
                                      ie_evento_w);
        else
          select coalesce(max(ie_tipo_guia), 'X')
            into STRICT ie_tipo_guia_ref_w
            from pls_guia_plano
           where nr_sequencia = nr_seq_guia_ref_w;

          if (ie_tipo_guia_ref_w <> '1') then
            /* Nao existe guia de autorizacao relacionada */

            CALL pls_gravar_requisicao_glosa('1404',
                                        nr_seq_requisicao_p,
                                        null,
                                        null,
                                        expressao_pck.obter_desc_expressao(969795),
                                        nm_usuario_p,
                                        nr_seq_prestador_w,
                                        cd_estabelecimento_p,
                                        null,
                                        null,
                                        ie_evento_w);
          end if;
        end if;
      end if;
    end if;

    if (ie_tipo_guia_w = '2') then
      if (ie_tipo_atendimento_w = '7') then
        if (coalesce(nr_seq_guia_princ_w, 0) = 0) then
          /* Nao existe o Numero Guia Principal informado */

          CALL pls_gravar_requisicao_glosa('1303',
                                      nr_seq_requisicao_p,
                                      null,
                                      null,
                                      '',
                                      nm_usuario_p,
                                      nr_seq_prestador_w,
                                      cd_estabelecimento_p,
                                      null,
                                      null,
                                      ie_evento_w);
        else
          select coalesce(max(nr_sequencia), 0)
            into STRICT nr_seq_guia_ref_w
            from pls_guia_plano
           where nr_sequencia = nr_seq_guia_princ_w
             and nr_seq_segurado = nr_seq_segurado_w
             and (ie_status = '1' or ie_status = '2');

          if (nr_seq_guia_ref_w = 0) then
            /* Nao existe guia de autorizacao relacionada */

            CALL pls_gravar_requisicao_glosa('1404',
                                        nr_seq_requisicao_p,
                                        null,
                                        null,
                                        expressao_pck.obter_desc_expressao(969795),
                                        nm_usuario_p,
                                        nr_seq_prestador_w,
                                        cd_estabelecimento_p,
                                        null,
                                        null,
                                        ie_evento_w);
          end if;
        end if;

      elsif (coalesce(ie_tipo_atendimento_w, '1') <> '7') and (nr_seq_guia_princ_w <> 0) then
        begin
          select ie_tipo_guia
            into STRICT ie_tipo_guia_princ_w
            from pls_guia_plano
           where nr_sequencia = nr_seq_guia_princ_w;
        exception
          when no_data_found then
            ie_tipo_guia_princ_w := null;
        end;

        if (ie_tipo_guia_princ_w = '1') then
          --Codigo Tipo Guia Principal e Numero Guias Incompativeis
          CALL pls_gravar_requisicao_glosa('1302',
                                      nr_seq_requisicao_p,
                                      null,
                                      null,
                                      expressao_pck.obter_desc_expressao(969793),
                                      nm_usuario_p,
                                      nr_seq_prestador_w,
                                      cd_estabelecimento_p,
                                      null,
                                      null,
                                      ie_evento_w);
        end if;
      end if;
    end if;

    if ((ie_tipo_guia_w = '1') and (coalesce(ie_origem_solic_w, 'X') <> 'E')) or
       (ie_tipo_guia_w = 8 AND ie_origem_solic_w = 'E') then
    
      select count(1)
        into STRICT qt_registros_w
        from pls_plano_acomodacao
       where nr_seq_plano = nr_seq_plano_w
         and nr_seq_tipo_acomodacao = nr_seq_tipo_acomodacao_w;

      if (qt_registros_w = 0) then
        select coalesce(max(a.nr_seq_categoria), 0)
          into STRICT nr_seq_categoria_w
          from pls_plano_acomodacao a
         where a.nr_seq_plano = nr_seq_plano_w
           and exists (SELECT 1
                  from pls_regra_categoria b
                 where b.nr_seq_categoria = a.nr_seq_categoria
                   and b.nr_seq_tipo_acomodacao = nr_seq_tipo_acomodacao_w);

        if (nr_seq_categoria_w = 0) then
          /*aaschlote 05/03/2014 - 698622*/

          pls_obter_se_sca_acomodacao(nr_seq_segurado_w,
                                      nr_seq_tipo_acomodacao_w,
                                      dt_requisicao_w,
                                      ie_tipo_guia_w,
                                      ie_acomodacao_sca_w);

          if (ie_acomodacao_sca_w = 'N') then
            /*aaschlote 02/04/2012 - 400228 - Verifica se na carencias do beneficiario possui acomodacao*/

            ie_acomodacao_carencia_w := pls_obter_carencia_cobr_acomod(nr_seq_segurado_w,
                                                                       null,
                                                                       nr_seq_requisicao_p);

            if (ie_acomodacao_carencia_w = 'N') then
              CALL pls_gravar_requisicao_glosa('1413',
                                          nr_seq_requisicao_p,
                                          null,
                                          null,
                                          expressao_pck.obter_desc_expressao(969815),
                                          nm_usuario_p,
                                          nr_seq_prestador_w,
                                          cd_estabelecimento_p,
                                          null,
                                          null,
                                          ie_evento_w);
            end if;
          end if;
        end if;
      end if;
    end if;

    --- Glosa 1503 - Indicador de Acidente Invalido
    if (ie_tipo_guia_w in ('1', '2', '3') and cd_versao_tiss_w >= '3.02.00') then
      select max(ie_indicacao_acidente)
        into STRICT ie_indicacao_acidente_w
        from pls_requisicao_diagnostico
       where nr_seq_requisicao = nr_seq_requisicao_p
         and (ie_indicacao_acidente IS NOT NULL AND ie_indicacao_acidente::text <> '');

      if (coalesce(ie_indicacao_acidente_w, 'X') <> '0' and
         coalesce(ie_indicacao_acidente_w, 'X') <> '1' and
         coalesce(ie_indicacao_acidente_w, 'X') <> '2' and
         coalesce(ie_indicacao_acidente_w, 'X') <> '9') and
        ---Para as requisicoes geradas pelo WebService ( ie_origem_solic = 'E') , so devera consistir a Glosa se o tipo de guia for de internacao
         ((ie_origem_solic_w <> 'E') or (ie_origem_solic_w = 'E' and ie_tipo_guia_w = 1)) and        
         (not (nr_seq_guia_principal_w IS NOT NULL AND nr_seq_guia_principal_w::text <> '' AND ie_tipo_processo_w = 'I')) then
        --- Indicador de Acidente Invalido
        CALL pls_gravar_requisicao_glosa('1503',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    expressao_pck.obter_desc_expressao(969789),
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    ie_evento_w);
      end if;
    end if;
    
  
    if (ie_valida_token_scs_w = 'S') then
      begin
        select max(ie_status_token)
          into STRICT ie_status_token_w
          from ptu_pedido_compl_aut
         where nr_seq_requisicao = nr_seq_requisicao_p;

        if (coalesce(ie_status_token_w::text, '') = '') then
          select max(ie_status_token)
            into STRICT ie_status_token_w
            from ptu_pedido_autorizacao
           where nr_seq_requisicao = nr_seq_requisicao_p;
        end if;
      exception
        when no_data_found then
          ie_status_token_w := '2';
      end;

      if (ie_status_token_w IS NOT NULL AND ie_status_token_w::text <> '') and (ie_status_token_w <> '2') then
        CALL pls_gravar_requisicao_glosa('3156',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    null,
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    'CG');
      end if;
    end if;

    begin
      select coalesce(ie_valida_token, 'N')
        into STRICT ie_valida_token_w
        from pls_param_atend_geral;
    exception
      when no_data_found then
        ie_valida_token_w := 'N';
    end;

    if (ie_valida_token_w = 'S') and (coalesce(ie_origem_solic_w, 'X') in ('E', 'W')) and (coalesce(ie_tipo_processo_w, 'M') <> 'I') then
      begin
        select max(nr_sequencia)
          into STRICT nr_seq_leitura_w
          from pls_carteira_leitura
         where nr_seq_segurado = nr_seq_segurado_w;

        select max(ie_status)
          into STRICT ie_status_token_w
          from pls_carteira_leitura_token
         where nr_seq_leitura = nr_seq_leitura_w
           and ds_token = cd_validacao_benef_tiss_w;
      exception
        when no_data_found then
          ie_status_token_w := '2';
      end;

      if (ie_status_token_w IS NOT NULL AND ie_status_token_w::text <> '' AND ie_status_token_w <> '2') or
         ((coalesce(cd_validacao_benef_tiss_w::text, '') = '') and (coalesce(cd_ausencia_val_benef_tiss_w::text, '') = '')) then
        CALL pls_gravar_requisicao_glosa('3156',
                                    nr_seq_requisicao_p,
                                    null,
                                    null,
                                    null,
                                    nm_usuario_p,
                                    nr_seq_prestador_w,
                                    cd_estabelecimento_p,
                                    null,
                                    null,
                                    'CG');
      end if;
    end if;

    CALL pls_consistir_elegibilidade(nr_seq_segurado_w,
                                'CG',
                                nr_seq_requisicao_p,
                                'R',
                                nr_seq_prestador_w,
                                null,
                                '',
                                nm_usuario_p,
                                cd_estabelecimento_p);

    begin
      select CASE WHEN b.cd_cgc='' THEN  'PF'  ELSE 'PJ' END 
        into STRICT ie_tipo_pagador_w
        from pls_contrato_pagador b, pls_segurado a
       where a.nr_sequencia = nr_seq_segurado_w
         and a.nr_seq_pagador = b.nr_sequencia;
    exception
      when no_data_found then
        ie_tipo_pagador_w := 'A';
    end;

    CALL pls_tiss_consistir_prestador(nr_seq_requisicao_p,
                                 'R',
                                 '',
                                 nr_seq_prestador_w,
                                 null,
                                 '',
                                 nm_usuario_p,
                                 cd_estabelecimento_p);

    CALL pls_consistir_prest_exec_req(nr_seq_requisicao_p,
                                 nr_seq_prest_exec_w,
                                 cd_estabelecimento_p,
                                 nm_usuario_p,
                                 null,
                                 null);

      
    -- Jucimara OS 921867 - Verificar se o prestador esta cadastrado com o produto da guia
    CALL pls_consistir_prest_plano('CG',
                              nr_seq_prestador_w,
                              null,
                              null,
                              null,
                              null,
                              null,
                              nr_seq_requisicao_p,
                              cd_estabelecimento_p,
                              nm_usuario_p);

    CALL pls_consistir_cpt_requisicao(nr_seq_requisicao_p,
                                 cd_estabelecimento_p,
                                 nm_usuario_p);

    CALL pls_verifc_regra_exigencia_cid(nr_seq_requisicao_p,
                                   null,
                                   cd_estabelecimento_p,
                                   nm_usuario_p);

    /*aaschlore 20/08/2013 - Consistir o CID */

    CALL pls_consistir_cid_guia_req(null,
                               nr_seq_requisicao_p,
                               nr_seq_prestador_w,
                               cd_estabelecimento_p,
                               nm_usuario_p);

  
    CALL pls_gerar_ocorrencia_aut(nr_seq_segurado_w,
                             nr_seq_requisicao_p,
                             null,
                             null,
                             null,
                             null,
                             null,
                             null,
                             null,
                             ie_tipo_guia_w,
                             nr_seq_plano_w,
                             qt_dias_vencido_w,
                             ie_tipo_pagador_w,
                             nr_seq_prestador_w,
                             null,
                             'AC',
                             '',
                             '',
                             nm_usuario_p,
                             cd_estabelecimento_p,
                             nr_seq_congenere_w,
                             ie_cheque_w,
                             null);

    CALL pls_gerar_ocor_aut_combinada(nr_seq_segurado_w,
                                 null,
                                 nr_seq_requisicao_p,
                                 null,
                                 null,
                                 null,
                                 null,
                                 null,
                                 null,
                                 nm_usuario_p,
                                 cd_estabelecimento_p);

    CALL pls_atualiza_estagio_req(nr_seq_requisicao_p, nm_usuario_p);

    CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,
                               'L',
                               expressao_pck.obter_desc_expressao(969785),
                               null,
                               nm_usuario_p);

    commit;

    CALL pls_consist_lim_ocorr_req_guia(nr_seq_segurado_w,
                                   nr_seq_requisicao_p,
                                   null,
                                   null,
                                   cd_estabelecimento_p,
                                   nm_usuario_p);

    if (ie_origem_solic_w = 'P') then
      CALL pls_verif_regra_prest_just_web(null,
                                     nr_seq_requisicao_p,
                                     nm_usuario_p);
    end if;

    if (coalesce(nr_seq_atend_pls_w::text, '') = '') then
      /* Gerar e gravar o protocolo de atendimento */

      pls_gravar_protocolo_atend(2,
                                 nr_seq_segurado_w,
                                 nr_seq_requisicao_p,
                                 null,
                                 null,
                                 null,
                                 null,
                                 null,
                                 null,
                                 null,
                                 cd_estabelecimento_p,
                                 nm_usuario_p,
                                 nr_seq_protocolo_atend_w,
                                 nr_protocolo_w);
    end if;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_odonto_pck.validar_requisicao (nr_seq_requisicao_p pls_requisicao_proc.nr_seq_requisicao%type, cd_estabelecimento_p pls_requisicao.cd_estabelecimento%type, nm_usuario_p pls_requisicao.nm_usuario%type) FROM PUBLIC;
