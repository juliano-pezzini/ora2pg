-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION mprev_disp_agenda_pck.obter_horarios_indisp ( nr_seq_equipe_p bigint, ie_loc_interno_p text, ie_loc_tipo_atend_p text, cd_agenda_p bigint, cd_estabelecimento_p bigint, dt_dia_agenda_p timestamp, ie_tipo_p text) RETURNS SETOF T_HORARIO_INDISP_DATA AS $body$
DECLARE


	linha_w			t_horario_indisp_row;
	i			bigint;
	j			bigint;
	tipo_w			varchar(30);
	dt_dia_agenda_w		timestamp;
	dt_comeco_turno_w	timestamp;
	hr_final_anterior_w	timestamp;
	hr_final_turno_anterior_w	timestamp;
	cd_agenda_w		bigint;
	dt_horario_inicio_w	timestamp;
	dt_horario_fim_w	timestamp;
	ie_dia_semana_w		agenda_turno.ie_dia_semana%type;
	gerou_linha_w	boolean;
	
	ds_tipo_w		varchar(30);
	ds_tipo_sem_horario_w	varchar(30);
	ds_tipo_intervalo_w	varchar(30);
	ds_tipo_bloqueio_w	varchar(30);
	-- retorno 
	qt_intervalo_turno_w	bigint;
	hr_inicial_turno_w	timestamp;
	hr_final_turno_w	timestamp;
	ie_bloqueio_feriado_w	varchar(1);
	nr_minutos_duracao_w	bigint;
	dt_fim_bloqueio_ant_w	timestamp	:= null;

	C02 CURSOR(cd_agenda_p		bigint, dt_dia_agenda_p timestamp) FOR
		SELECT	ie_ordem, -- Criado para o sem intervalo (SHD2), pois deve ser o ultimo 
			ie_tipo,
			ie_dia_semana,
			dt_inicio_turno,
			dt_fim_turno,
			ds_motivo_bloqueio
		from	(-- Inicio dia 
			SELECT	1 ie_ordem,
				'SHD1' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_inicial, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_inicial, 0), 0),
				0,
				0) dt_inicio_turno,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final, 0), 0),
				0,
				0) dt_fim_turno,
				null ds_motivo_bloqueio
			from	agenda_turno a
			where	a.cd_agenda 	= cd_agenda_p
			and (a.ie_dia_semana = ie_dia_semana_w or (a.ie_dia_semana = 9 and ie_dia_semana_w not in (1,7)))
			and	dt_dia_agenda_w between a.dt_inicio_vigencia and coalesce(a.dt_final_vigencia, dt_dia_agenda_w)
			and (obter_se_gerar_turno_agecons(a.dt_inicio_vigencia,a.ie_frequencia,dt_dia_agenda_w) = 'S')
			and	((Obter_Semana_Dia_Agecons(dt_dia_agenda_w,a.ie_dia_semana) = coalesce(a.ie_semana,0)) or (coalesce(a.ie_semana,0) = 0))
			
union all

			-- Intervalo 
			select	1 ie_ordem,
				'INT' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_inicial_intervalo, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_inicial_intervalo, 0), 0),
				0,
				0) dt_inicio_turno,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final_intervalo, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final_intervalo, 0), 0),
				0,
				0) dt_fim_turno,				
				null ds_motivo_bloqueio
			from	agenda_turno a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicial_intervalo IS NOT NULL AND a.hr_inicial_intervalo::text <> '')
			and	(a.hr_final_intervalo IS NOT NULL AND a.hr_final_intervalo::text <> '')
			and (a.ie_dia_semana = ie_dia_semana_w or (a.ie_dia_semana = 9 and ie_dia_semana_w not in (1,7)))
			and	dt_dia_agenda_w between a.dt_inicio_vigencia and coalesce(a.dt_final_vigencia, dt_dia_agenda_w)
			
union all

			-- Bloqueio - Dia inicio 
			select	1 ie_ordem,
				'BLO' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_inicio_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_inicio_bloqueio, 0), 0),
				0,
				0) dt_inicio_turno,				
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', hr_final_turno_w, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', hr_final_turno_w, 0), 0),
				0,
				0) dt_fim_turno,				
				obter_valor_dominio(1007, a.ie_motivo_bloqueio) ds_motivo_bloqueio
			from	agenda_bloqueio a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicio_bloqueio IS NOT NULL AND a.hr_inicio_bloqueio::text <> '')
			and	(a.hr_final_bloqueio IS NOT NULL AND a.hr_final_bloqueio::text <> '')
			and	dt_dia_agenda_w = pkg_date_utils.start_of(a.dt_inicial,'DD',0)
			and	dt_dia_agenda_w <> pkg_date_utils.start_of(a.dt_final,'DD',0)
			and	coalesce(a.ie_dia_semana::text, '') = ''
			
union all

			-- Bloqueio - Dias intermediarios 
			select	1 ie_ordem,
				'BLO' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', hr_inicial_turno_w, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', hr_inicial_turno_w, 0), 0),
				0,
				0)  dt_inicio_turno,				
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', hr_final_turno_w, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', hr_final_turno_w, 0), 0),
				0,
				0) dt_fim_turno,
				obter_valor_dominio(1007, a.ie_motivo_bloqueio) ds_motivo_bloqueio
			from	agenda_bloqueio a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicio_bloqueio IS NOT NULL AND a.hr_inicio_bloqueio::text <> '')
			and	(a.hr_final_bloqueio IS NOT NULL AND a.hr_final_bloqueio::text <> '')
			and	dt_dia_agenda_w > pkg_date_utils.start_of(a.dt_inicial,'DD',0)
			and	dt_dia_agenda_w < pkg_date_utils.start_of(a.dt_final,'DD',0)
			and	coalesce(a.ie_dia_semana::text, '') = ''
			
union all

			-- Bloqueio - Dia final 
			select	1 ie_ordem,
				'BLO' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', hr_inicial_turno_w, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', hr_inicial_turno_w, 0), 0),
				0,
				0) dt_inicio_turno,				
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final_bloqueio, 0), 0),
				0,
				0) dt_fim_turno,				
				obter_valor_dominio(1007, a.ie_motivo_bloqueio) ds_motivo_bloqueio
			from	agenda_bloqueio a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicio_bloqueio IS NOT NULL AND a.hr_inicio_bloqueio::text <> '')
			and	(a.hr_final_bloqueio IS NOT NULL AND a.hr_final_bloqueio::text <> '')
			and	dt_dia_agenda_w = pkg_date_utils.start_of(a.dt_final,'DD',0)
			and	dt_dia_agenda_w <> pkg_date_utils.start_of(a.dt_inicial,'DD',0)
			and	coalesce(a.ie_dia_semana::text, '') = ''
			
union all

			-- Bloqueio - Comeca e termina no mesmo dia 
			select	1 ie_ordem,
				'BLO' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_inicio_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_inicio_bloqueio, 0), 0),
				0,
				0) dt_inicio_turno,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final_bloqueio, 0), 0),
				0,
				0) dt_fim_turno,				
				obter_valor_dominio(1007, a.ie_motivo_bloqueio) ds_motivo_bloqueio
			from	agenda_bloqueio a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicio_bloqueio IS NOT NULL AND a.hr_inicio_bloqueio::text <> '')
			and	(a.hr_final_bloqueio IS NOT NULL AND a.hr_final_bloqueio::text <> '')
			and	dt_dia_agenda_w = pkg_date_utils.start_of(a.dt_final,'DD',0)
			and	dt_dia_agenda_w = pkg_date_utils.start_of(a.dt_inicial,'DD',0)
			and	coalesce(a.ie_dia_semana::text, '') = ''
			
union all

			-- Bloqueio - Para dia da semana
			select	1 ie_ordem,
				'BLO' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_inicio_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_inicio_bloqueio, 0), 0),
				0,
				0) dt_inicio_turno,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final_bloqueio, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final_bloqueio, 0), 0),
				0,
				0) dt_fim_turno,
				obter_valor_dominio(1007, a.ie_motivo_bloqueio) ds_motivo_bloqueio
			from	agenda_bloqueio a
			where	a.cd_agenda 	= cd_agenda_p
			and	(a.hr_inicio_bloqueio IS NOT NULL AND a.hr_inicio_bloqueio::text <> '')
			and	(a.hr_final_bloqueio IS NOT NULL AND a.hr_final_bloqueio::text <> '')
			and	dt_dia_agenda_w >= pkg_date_utils.start_of(a.dt_inicial,'DD',0)
			and	dt_dia_agenda_w <= pkg_date_utils.start_of(a.dt_final,'DD',0)
			and (a.ie_dia_semana  = ie_dia_semana_w or a.ie_dia_semana = 9)
			
union all

			-- Fim dia 
			select	2 ie_ordem,
				'SHD2' ie_tipo,
				a.ie_dia_semana,
				pkg_date_utils.get_time(
				dt_dia_agenda_w,
				coalesce(pkg_date_utils.extract_field('HOUR', a.hr_final, 0), 0),
				coalesce(pkg_date_utils.extract_field('MINUTE', a.hr_final, 0), 0),
				0,
				0) dt_inicio_turno,
				hr_final_turno_w dt_fim_turno,
				null ds_motivo_bloqueio
			from	agenda_turno a
			where	a.cd_agenda 	= cd_agenda_p
			and (a.ie_dia_semana = ie_dia_semana_w or (a.ie_dia_semana = 9 and ie_dia_semana_w not in (1,7)))
			and	dt_dia_agenda_w between a.dt_inicio_vigencia and coalesce(a.dt_final_vigencia, dt_dia_agenda_w)
			and (obter_se_gerar_turno_agecons(a.dt_inicio_vigencia,a.ie_frequencia,dt_dia_agenda_w) = 'S')
			and	((Obter_Semana_Dia_Agecons(dt_dia_agenda_w,a.ie_dia_semana) = coalesce(a.ie_semana,0)) or (coalesce(a.ie_semana,0) = 0))
			) a
		group by
			ie_ordem,
			ie_tipo,
			ie_dia_semana,
			dt_inicio_turno,
			dt_fim_turno,
			ds_motivo_bloqueio
		order by
			ie_ordem,
			dt_inicio_turno;


	
BEGIN
	dt_dia_agenda_w	:= pkg_date_utils.start_of(dt_dia_agenda_p,'DD',0);
	ie_dia_semana_w	:= pkg_date_utils.get_weekday(dt_dia_agenda_w);
	cd_agenda_w	:= cd_agenda_p;

	ds_tipo_sem_horario_w	:= substr(obter_texto_tasy(317449,null),1,30);
	ds_tipo_intervalo_w	:= substr(obter_texto_tasy(317450,null),1,30);
	ds_tipo_bloqueio_w	:= substr(obter_texto_tasy(317476,null),1,30);

	if (nr_seq_equipe_p IS NOT NULL AND nr_seq_equipe_p::text <> '') or (ie_loc_interno_p IS NOT NULL AND ie_loc_interno_p::text <> '') or (ie_loc_tipo_atend_p IS NOT NULL AND ie_loc_tipo_atend_p::text <> '') then
		cd_agenda_w	:= null;
	end if;

	-- Se nao achou, pegar primeiro horario do dia 
	mprev_obter_horarios_agenda(	dt_dia_agenda_w,
					nr_seq_equipe_p,
					ie_loc_interno_p,
					ie_loc_tipo_atend_p,
					cd_agenda_w,
					cd_estabelecimento_p,
					qt_intervalo_turno_w,
					hr_inicial_turno_w,
					hr_final_turno_w,
					ie_bloqueio_feriado_w);

	hr_final_anterior_w		:= null;
	hr_final_turno_anterior_w	:= null;
	gerou_linha_w	:= false;
	for r_C02 in C02(cd_agenda_p, dt_dia_agenda_w) loop
		dt_horario_inicio_w	:= null;
		dt_horario_fim_w	:= null;
		nr_minutos_duracao_w	:= 0;
		if (r_C02.ie_tipo = 'SHD1') then
			ds_tipo_w	:= ds_tipo_sem_horario_w;

			nr_minutos_duracao_w	:= round((r_c02.dt_inicio_turno - coalesce(hr_final_turno_anterior_w,hr_inicial_turno_w)) * 1440);

			dt_horario_inicio_w	:= coalesce(hr_final_turno_anterior_w,hr_inicial_turno_w);
			dt_horario_fim_w	:= dt_horario_inicio_w + (nr_minutos_duracao_w/1440);

		elsif (r_c02.ie_tipo = 'INT') then
			ds_tipo_w	:= ds_tipo_intervalo_w;

			dt_horario_inicio_w	:= r_c02.dt_inicio_turno;
			dt_horario_fim_w	:= r_c02.dt_fim_turno;

			nr_minutos_duracao_w	:= round((dt_horario_fim_w - dt_horario_inicio_w) * 1440);
		elsif (r_c02.ie_tipo = 'BLO') then
			ds_tipo_w	:= ds_tipo_bloqueio_w;

			if (to_date(r_c02.dt_inicio_turno, 'dd/mm/yyyy') = to_date(dt_dia_agenda_w, 'dd/mm/yyyy')) then
				dt_horario_inicio_w	:= r_c02.dt_inicio_turno;
			else
				dt_horario_inicio_w	:= hr_inicial_turno_w;
			end if;
			
			--Verificar se esta sobrescrevendo outro bloqueio 
			if (dt_horario_inicio_w <= dt_fim_bloqueio_ant_w) then
				dt_horario_inicio_w	:= dt_fim_bloqueio_ant_w;
			end if;

			if (to_date(r_c02.dt_fim_turno, 'dd/mm/yyyy') = to_date(dt_dia_agenda_w, 'dd/mm/yyyy')) then
				dt_horario_fim_w	:= r_c02.dt_fim_turno;
			else
				dt_horario_fim_w	:= hr_final_turno_w;
			end if;

			nr_minutos_duracao_w	:= round((dt_horario_fim_w - dt_horario_inicio_w) * 1440);
			dt_fim_bloqueio_ant_w	:= dt_horario_fim_w;
		elsif (r_C02.ie_tipo = 'SHD2') then
			ds_tipo_w	:= ds_tipo_sem_horario_w;

			dt_horario_inicio_w	:= r_c02.dt_inicio_turno;
			dt_horario_fim_w	:= r_c02.dt_fim_turno;

			nr_minutos_duracao_w	:= round((dt_horario_fim_w - dt_horario_inicio_w) * 1440);
		end if;

		-- So criar linha caso o horario ja nao tenha sido colocado como indisponivel 
		if	(((r_C02.ie_tipo = 'SHD2') and (dt_horario_inicio_w > hr_final_anterior_w) or (coalesce(hr_final_anterior_w::text, '') = ''))
            or ((r_C02.ie_tipo != 'SHD2') and (dt_horario_inicio_w >= hr_final_anterior_w) or (coalesce(hr_final_anterior_w::text, '') = ''))) then
			
			gerou_linha_w	:= true;
			
			linha_w.ie_tipo			:= r_C02.ie_tipo;
			linha_w.ds_tipo			:= ds_tipo_w;
			linha_w.ie_status		:= 'SH';
			linha_w.ds_motivo_bloqueio	:= r_C02.ds_motivo_bloqueio;
			linha_w.dt_inicio_turno		:= r_c02.dt_inicio_turno;
			linha_w.dt_fim_turno		:= r_C02.dt_fim_turno;
			linha_w.dt_horario_inicio	:= dt_horario_inicio_w;
			linha_w.dt_horario_fim		:= dt_horario_fim_w;
			linha_w.nr_minutos_duracao	:= nr_minutos_duracao_w;

			RETURN NEXT linha_w;

			hr_final_anterior_w	:= dt_horario_fim_w;
			-- Caso seja SHD, deve alimentar tambem qual era o turno anterior 
			if (r_C02.ie_tipo = 'SHD1') then
				hr_final_turno_anterior_w	:= r_C02.dt_fim_turno;
			elsif (r_C02.ie_tipo = 'SHD2') then
				hr_final_turno_anterior_w	:= dt_horario_fim_w;
			end if;
		end if;
	end loop;
	
	-- Se nao gerou nenhum horario e porque nao tem turno, deve entao voltar indisponivel do inicio ao fim do turno da equipe 
	if (nr_seq_equipe_p IS NOT NULL AND nr_seq_equipe_p::text <> '') and (not gerou_linha_w) then
		nr_minutos_duracao_w	:= round((hr_final_turno_w - hr_inicial_turno_w) * 1440);
	
		linha_w.ie_tipo			:= 'SHD3';
		linha_w.ds_tipo			:= ds_tipo_sem_horario_w;
		linha_w.ie_status		:= 'SH';
		linha_w.ds_motivo_bloqueio	:= null;
		linha_w.dt_inicio_turno		:= hr_inicial_turno_w;
		linha_w.dt_fim_turno		:= hr_final_turno_w;
		linha_w.dt_horario_inicio	:= hr_inicial_turno_w;
		linha_w.dt_horario_fim		:= hr_final_turno_w;
		linha_w.nr_minutos_duracao	:= nr_minutos_duracao_w;

		RETURN NEXT linha_w;
	end if;

	return;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION mprev_disp_agenda_pck.obter_horarios_indisp ( nr_seq_equipe_p bigint, ie_loc_interno_p text, ie_loc_tipo_atend_p text, cd_agenda_p bigint, cd_estabelecimento_p bigint, dt_dia_agenda_p timestamp, ie_tipo_p text) FROM PUBLIC;
