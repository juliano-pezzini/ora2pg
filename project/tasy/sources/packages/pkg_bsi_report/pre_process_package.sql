-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE PROCEDURE pkg_bsi_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text, P_ELEMENTS text) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_BSI_RESUME CURSOR FOR
      SELECT M.NR_ATENDIMENTO,
             M.NR_SEQUENCIA NR_SEQ_ATEND_DISP,
             M.CD_ESTABELECIMENTO,
             M.CD_SETOR_ATENDIMENTO,
             M.DT_INSTALACAO,
             M.DT_RETIRADA,
             M.DT_INSTALACAO_ESTAB,
             M.DT_RETIRADA_ESTAB,
             M.DT_ENTRADA_SETOR,
             M.DT_SAIDA_SETOR,
             GREATEST(M.DT_INSTALACAO_ESTAB, M.DT_ENTRADA_SETOR) DT_INSTALACAO_SETOR,
             LEAST(coalesce(M.DT_RETIRADA_ESTAB, M.DT_SAIDA_SETOR),
                   coalesce(M.DT_SAIDA_SETOR, DT_RETIRADA_ESTAB)) DT_RETIRADA_SETOR
        FROM (SELECT DISTINCT UN.CD_ESTABELECIMENTO,
                              UN.CD_SETOR_ATENDIMENTO,
                              UN.NR_ATENDIMENTO,
                              APD.NR_SEQUENCIA,
                              APD.DT_INSTALACAO,
                              APD.DT_RETIRADA,
                              PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO) DT_INSTALACAO_ESTAB,
                              PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA) DT_RETIRADA_ESTAB,
                              PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                              PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_SAIDA) DT_SAIDA_SETOR                               
                FROM TABLE(pkg_bsi_report.get_tab_atend_unidade(P_START_DATE, P_END_DATE, P_AGE, P_CLINICAL_UNIT)) UN,
                     ATEND_PAC_DISPOSITIVO  APD                                       
               WHERE UN.NR_ATENDIMENTO = APD.NR_ATENDIMENTO
                 AND EXISTS (SELECT 1 FROM DISPOSITIVO D WHERE D.NR_SEQUENCIA = APD.NR_SEQ_DISPOSITIVO AND D.IE_CLASSIF_DISP_NISS = 'CCIP')
                 AND OBTER_IDADE_PF(OBTER_CD_PES_FIS_ATEND(APD.NR_ATENDIMENTO), APD.DT_INSTALACAO, 'A') >= P_AGE
                 AND TRUNC(PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO), 'DD') <= P_END_DATE
                 AND coalesce(TRUNC(PKG_ATEND_PAC_UNID.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA), 'DD'), P_END_DATE) >= P_START_DATE
                 AND APD.DT_INSTALACAO <= coalesce(UN.DT_SAIDA, APD.DT_INSTALACAO)                                                                    
                 AND UN.DT_ENTRADA_UNIDADE <= coalesce(APD.DT_RETIRADA, UN.DT_ENTRADA_UNIDADE)
                 AND EXISTS (SELECT 1
                              FROM GQA_PROTOCOLO_PAC P
                             WHERE P.NR_ATENDIMENTO = APD.NR_ATENDIMENTO
                               AND P.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(6)
                               AND P.IE_SITUACAO = 'A'
                               AND P.DT_INCLUSAO <= coalesce(APD.DT_RETIRADA, P.DT_INCLUSAO)
                               AND APD.DT_INSTALACAO <= coalesce(P.DT_TERMINO, APD.DT_INSTALACAO))) M;
    --
    TYPE T_BSI_RESUME IS TABLE OF C_BSI_RESUME%ROWTYPE;
    R_BSI_RESUME T_BSI_RESUME;
    --
    C_PRE_PROCESS CURSOR FOR
      SELECT X.DT_ATEND,
             X.NR_ATENDIMENTO,
             X.CD_ESTABELECIMENTO,
             X.CD_SETOR_ATENDIMENTO,
             X.CENTRAL_LINE_INSERTIONS,
             1 CENTRAL_LINE_DAYS,
             X.CENTRAL_LINE_COMPLIANT_DAYS,
             CASE WHEN X.INFECTIONS=0 THEN  0  ELSE 1 END  INFECTION,
             X.OCS_COUNT,
             X.OCS_COMPLIANCE,
             X.PATIENT_BARRIER_COUNT,
             X.PATIENT_BARRIER_COMPLIANCE,
             X.PROVIDER_BARRIER_COUNT,
             X.PROVIDER_BARRIER_COMPLIANCE,
             X.ANTISEPTIC_SKIN_COUNT,
             X.ANTISEPTIC_SKIN_COMPLIANCE,
             X.HAND_HYGIENE_COUNT,
             X.HAND_HYGIENE_COMPLIANCE
        FROM (SELECT A.DT_ATEND,
                     A.NR_ATENDIMENTO,
                     A.CD_ESTABELECIMENTO,
                     A.CD_SETOR_ATENDIMENTO,
                     SUM(A.CENTRAL_LINE_INSERTIONS) CENTRAL_LINE_INSERTIONS,
                     CASE WHEN SUM(A.CENTRAL_LINE_INSERTIONS)=0 THEN  0  ELSE round((SUM(A.CENTRAL_LINE_COMPLIANT_DAYS) / SUM(A.CENTRAL_LINE_INSERTIONS))::numeric, 2) END  CENTRAL_LINE_COMPLIANT_DAYS,
                     SUM(A.INFECTIONS) INFECTIONS,
                     SUM(A.OCS_COUNT) OCS_COUNT,
                     SUM(A.OCS_COMPLIANCE) OCS_COMPLIANCE,
                     SUM(A.PATIENT_BARRIER_COUNT) PATIENT_BARRIER_COUNT,
                     SUM(A.PATIENT_BARRIER_COMPLIANCE) PATIENT_BARRIER_COMPLIANCE,
                     SUM(A.PROVIDER_BARRIER_COUNT) PROVIDER_BARRIER_COUNT,
                     SUM(A.PROVIDER_BARRIER_COMPLIANCE) PROVIDER_BARRIER_COMPLIANCE,
                     SUM(A.ANTISEPTIC_SKIN_COUNT) ANTISEPTIC_SKIN_COUNT,
                     SUM(A.ANTISEPTIC_SKIN_COMPLIANCE) ANTISEPTIC_SKIN_COMPLIANCE,
                     SUM(A.HAND_HYGIENE_COUNT) HAND_HYGIENE_COUNT,
                     SUM(A.HAND_HYGIENE_COMPLIANCE) HAND_HYGIENE_COMPLIANCE
                FROM (SELECT C.DT_ATEND,
                             C.NR_ATENDIMENTO,
                             C.NR_SEQ_ATEND_DISP,
                             C.CD_ESTABELECIMENTO,
                             C.CD_SETOR_ATENDIMENTO,
                             C.DT_INSTALACAO,
                             C.DT_RETIRADA,
                             C.DT_INSTALACAO_ESTAB,
                             C.DT_RETIRADA_ESTAB,
                             C.DT_ENTRADA_SETOR,
                             C.DT_SAIDA_SETOR,
                             C.DT_ENTRADA_ATEND,
                             C.DT_SAIDA_ATEND,
                             C.CENTRAL_LINE_INSERTIONS,
                             CASE WHEN C.OCS_COMPLIANCE +                                     C.PATIENT_BARRIER_COMPLIANCE +                                     C.PROVIDER_BARRIER_COMPLIANCE +                                     C.ANTISEPTIC_SKIN_COMPLIANCE +                                     C.HAND_HYGIENE_COMPLIANCE=5 THEN                                     1  ELSE 0 END  CENTRAL_LINE_COMPLIANT_DAYS,
                             C.OCS_COUNT,                             
                             C.OCS_COMPLIANCE,
                             C.PATIENT_BARRIER_COUNT,
                             C.PATIENT_BARRIER_COMPLIANCE,
                             C.PROVIDER_BARRIER_COUNT,
                             C.PROVIDER_BARRIER_COMPLIANCE,
                             C.ANTISEPTIC_SKIN_COUNT,
                             C.ANTISEPTIC_SKIN_COMPLIANCE,
                             C.HAND_HYGIENE_COUNT,
                             C.HAND_HYGIENE_COMPLIANCE,
                             C.INFECTIONS
                        FROM (SELECT T.DT_ATEND,
                                     T.NR_ATENDIMENTO,
                                     T.NR_SEQ_ATEND_DISP,
                                     T.CD_ESTABELECIMENTO,
                                     T.CD_SETOR_ATENDIMENTO,
                                     T.DT_INSTALACAO,
                                     T.DT_RETIRADA,
                                     T.DT_INSTALACAO_ESTAB,
                                     T.DT_RETIRADA_ESTAB,
                                     T.DT_ENTRADA_SETOR,
                                     T.DT_SAIDA_SETOR,
                                     T.DT_ENTRADA_ATEND,
                                     T.DT_SAIDA_ATEND,
                                     CASE WHEN TRUNC(T.DT_INSTALACAO_SETOR, 'DD')=T.DT_ATEND THEN  1  ELSE 0 END  CENTRAL_LINE_INSERTIONS,
                                     CASE WHEN P_ELEMENTS='N' THEN                                              0  ELSE 1 END  OCS_COUNT,                            
                                     CASE WHEN P_ELEMENTS='N' THEN                                              0  ELSE -- OPTIMAL_CATHETER_COMPLIANCE 
                                            PKG_BSI_REPORT.GET_GOAL_COMPLIANCE(T.NR_ATENDIMENTO, T.NR_SEQ_ATEND_DISP, T.CD_ESTABELECIMENTO, T.DT_ATEND, 1) END  OCS_COMPLIANCE,
                                     CASE WHEN P_ELEMENTS='N' THEN                                              0  ELSE 1 END  PATIENT_BARRIER_COUNT,
                                     CASE WHEN P_ELEMENTS='N' THEN                                              0  ELSE -- PATIENT_BARRIER_COMPLIANCE
                                            PKG_BSI_REPORT.GET_GOAL_COMPLIANCE(T.NR_ATENDIMENTO, T.NR_SEQ_ATEND_DISP, T.CD_ESTABELECIMENTO, T.DT_ATEND, 2) END  PATIENT_BARRIER_COMPLIANCE,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             0  ELSE 1 END  PROVIDER_BARRIER_COUNT,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             0  ELSE -- PROVIDER_BARRIER_COMPLIANCE
                                            PKG_BSI_REPORT.GET_GOAL_COMPLIANCE(T.NR_ATENDIMENTO, T.NR_SEQ_ATEND_DISP, T.CD_ESTABELECIMENTO, T.DT_ATEND, 4) END  PROVIDER_BARRIER_COMPLIANCE,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             0  ELSE 1 END  ANTISEPTIC_SKIN_COUNT,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             0  ELSE -- ANTISEPTIC_SKIN_COMPLIANCE
                                            PKG_BSI_REPORT.GET_GOAL_COMPLIANCE(T.NR_ATENDIMENTO, T.NR_SEQ_ATEND_DISP, T.CD_ESTABELECIMENTO, T.DT_ATEND, 3) END  ANTISEPTIC_SKIN_COMPLIANCE,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             '0'  ELSE 1 END  HAND_HYGIENE_COUNT,
                                     CASE WHEN P_ELEMENTS='N' THEN                                             0  ELSE -- HAND_HYGIENE_COMPLIANCE
                                            PKG_BSI_REPORT.GET_GOAL_COMPLIANCE(T.NR_ATENDIMENTO, T.NR_SEQ_ATEND_DISP, T.CD_ESTABELECIMENTO, T.DT_ATEND, 5) END  HAND_HYGIENE_COMPLIANCE,
                                     (SELECT COUNT(1)
                                        FROM CIH_FICHA_OCORRENCIA O,
                                             CIH_LOCAL_INFECCAO I
                                       WHERE O.NR_ATENDIMENTO = T.NR_ATENDIMENTO
                                         AND O.NR_FICHA_OCORRENCIA = I.NR_FICHA_OCORRENCIA
                                         AND I.IE_INFECCAO_SECUNDARIA = 'S'
                                         AND PKG_ATEND_PAC_UNID.GET_ESTAB_DT(T.CD_ESTABELECIMENTO, 
                                                                             I.DT_INFECCAO) 
                                             BETWEEN T.DT_ENTRADA_ATEND AND T.DT_SAIDA_ATEND + 2) INFECTIONS
                                FROM (WITH DT_ATEND AS (WITH RECURSIVE cte AS (
SELECT level, P_END_DATE - level + 1 dt_atend
                                                          
                                                       LEVEL <= P_END_DATE - P_START_DATE + 1  UNION ALL
SELECT level, P_END_DATE - level + 1 dt_atend
                                                          
                                                       LEVEL <= P_END_DATE - P_START_DATE + 1 JOIN cte c ON ()

) SELECT * FROM cte;
)                              
                                      SELECT DT.DT_ATEND,
                                             N.NR_ATENDIMENTO,
                                             N.NR_SEQ_ATEND_DISP,
                                             N.CD_ESTABELECIMENTO,
                                             N.CD_SETOR_ATENDIMENTO,
                                             N.DT_INSTALACAO,
                                             N.DT_RETIRADA,
                                             N.DT_INSTALACAO_ESTAB,
                                             N.DT_RETIRADA_ESTAB,
                                             N.DT_ENTRADA_SETOR,
                                             N.DT_SAIDA_SETOR,
                                             N.DT_INSTALACAO_SETOR,
                                             N.DT_RETIRADA_SETOR,
                                             GREATEST(N.DT_INSTALACAO_SETOR, DT.DT_ATEND) DT_ENTRADA_ATEND,
                                             LEAST(coalesce(N.DT_RETIRADA_SETOR, 
                                                       LEAST(DT.DT_ATEND + 1, 
                                                             PKG_ATEND_PAC_UNID.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))), 
                                                   LEAST(DT.DT_ATEND + 1, 
                                                         PKG_ATEND_PAC_UNID.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))) DT_SAIDA_ATEND
                                        FROM BSI_REPORT_RESUME N,
                                             DT_ATEND DT  
                                       WHERE DT.DT_ATEND BETWEEN TRUNC(N.DT_INSTALACAO_SETOR, 'DD') 
                                                             AND coalesce(TRUNC(N.DT_RETIRADA_SETOR, 'DD'), P_END_DATE)) T) C) A
               GROUP BY A.DT_ATEND,
                        A.NR_ATENDIMENTO,
                        A.CD_ESTABELECIMENTO,
                        A.CD_SETOR_ATENDIMENTO) X;
    --
    TYPE T_PRE_PROCESS IS TABLE OF C_PRE_PROCESS%ROWTYPE;
    R_PRE_PROCESS T_PRE_PROCESS;
    --     
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;
    --
    OPEN C_BSI_RESUME;
    LOOP
      FETCH C_BSI_RESUME BULK COLLECT INTO R_BSI_RESUME LIMIT 1000;
        BEGIN
          FOR i IN R_BSI_RESUME.FIRST..R_BSI_RESUME.LAST LOOP
            INSERT INTO BSI_REPORT_RESUME(
              nr_atendimento,
              nr_seq_atend_disp,
              cd_estabelecimento, 
              cd_setor_atendimento,           
              dt_instalacao, 
              dt_retirada, 
              dt_instalacao_estab, 
              dt_retirada_estab, 
              dt_entrada_setor, 
              dt_saida_setor, 
              dt_instalacao_setor, 
              dt_retirada_setor,
              nm_usuario)
            VALUES (
              R_BSI_RESUME[i].NR_ATENDIMENTO, --nr_atendimento, 
              R_BSI_RESUME[i].NR_SEQ_ATEND_DISP, --nr_seq_atend_disp, 
              R_BSI_RESUME[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
              R_BSI_RESUME[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
              R_BSI_RESUME[i].DT_INSTALACAO, --dt_instalacao, 
              R_BSI_RESUME[i].DT_RETIRADA, --dt_retirada, 
              R_BSI_RESUME[i].DT_INSTALACAO_ESTAB, --dt_instalacao_estab, 
              R_BSI_RESUME[i].DT_RETIRADA_ESTAB, --dt_retirada_estab, 
              R_BSI_RESUME[i].DT_ENTRADA_SETOR, --dt_entrada_setor, 
              R_BSI_RESUME[i].DT_SAIDA_SETOR, --dt_saida_setor, 
              R_BSI_RESUME[i].DT_INSTALACAO_SETOR, --dt_instalacao_setor, 
              R_BSI_RESUME[i].DT_RETIRADA_SETOR, --dt_retirada_setor,
              NM_USUARIO_W);  --nm_usuario
          END LOOP;
          COMMIT;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
      EXIT WHEN NOT FOUND; /* apply on C_BSI_RESUME */
    END LOOP;
    CLOSE C_BSI_RESUME;
    COMMIT;

    OPEN C_PRE_PROCESS;
    LOOP
      FETCH C_PRE_PROCESS BULK COLLECT INTO R_PRE_PROCESS LIMIT 1000;
        BEGIN
          FOR i IN R_PRE_PROCESS.FIRST..R_PRE_PROCESS.LAST LOOP
            INSERT INTO BSI_REPORT(
              dt_atendimento,
              month, 
              month_name, 
              year, 
              cd_estabelecimento, 
              cd_setor_atend, 
              nr_atendimento,
              central_line_insertions,
              central_line_days,
              central_line_compliant_days,
              infection,
              ocs_count, 
              ocs_compliance, 
              patient_barrier_count, 
              patient_barrier_compliance, 
              provider_barrier_count, 
              provider_barrier_compliance, 
              antiseptic_skin_count, 
              antiseptic_skin_compliance, 
              hand_hygiene_count, 
              hand_hygiene_compliance,
              nm_usuario) 
            VALUES (
              R_PRE_PROCESS[i].DT_ATEND, --dt_atendimento, 
              TO_CHAR(R_PRE_PROCESS[i].DT_ATEND, 'MM'), --month,
              trim(both TO_CHAR(R_PRE_PROCESS[i].DT_ATEND, 'Month', 'NLS_DATE_LANGUAGE = American')), --month_name,           
              TO_CHAR(R_PRE_PROCESS[i].DT_ATEND, 'YYYY'), --year, 
              R_PRE_PROCESS[i].CD_ESTABELECIMENTO, --cd_estabelecimento,
              R_PRE_PROCESS[i].CD_SETOR_ATENDIMENTO, --cd_setor_atend,
              R_PRE_PROCESS[i].NR_ATENDIMENTO, --nr_atendimento,
              R_PRE_PROCESS[i].CENTRAL_LINE_INSERTIONS, --central_line_insertions,  
              R_PRE_PROCESS[i].CENTRAL_LINE_DAYS, --central_line_days,
              R_PRE_PROCESS[i].CENTRAL_LINE_COMPLIANT_DAYS, --central_line_compliant_days,
              R_PRE_PROCESS[i].INFECTION, --infection,
              R_PRE_PROCESS[i].OCS_COUNT, --ocs_count, 
              R_PRE_PROCESS[i].OCS_COMPLIANCE, --ocs_compliance, 
              R_PRE_PROCESS[i].PATIENT_BARRIER_COUNT, --patient_barrier_count, 
              R_PRE_PROCESS[i].PATIENT_BARRIER_COMPLIANCE, --patient_barrier_compliance, 
              R_PRE_PROCESS[i].PROVIDER_BARRIER_COUNT, --provider_barrier_count, 
              R_PRE_PROCESS[i].PROVIDER_BARRIER_COMPLIANCE, --provider_barrier_compliance, 
              R_PRE_PROCESS[i].ANTISEPTIC_SKIN_COUNT, --antiseptic_skin_count, 
              R_PRE_PROCESS[i].ANTISEPTIC_SKIN_COMPLIANCE, --antiseptic_skin_compliance, 
              R_PRE_PROCESS[i].HAND_HYGIENE_COUNT, --hand_hygiene_count, 
              R_PRE_PROCESS[i].HAND_HYGIENE_COMPLIANCE, --hand_hygiene_compliance,
              NM_USUARIO_W); --nm_usuario
          END LOOP;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
      EXIT WHEN NOT FOUND; /* apply on C_PRE_PROCESS */
    END LOOP;
    CLOSE C_PRE_PROCESS;
    COMMIT;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_bsi_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text, P_ELEMENTS text) FROM PUBLIC;
