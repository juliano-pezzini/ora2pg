-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE FUNCTION pkg_bsi_report.get_tab_atend_unidade (P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text) RETURNS SETOF T_TAB_ATEND_UNIDADE AS $body$
DECLARE


    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;

    C_UNIDADE_ATEND_BSI CURSOR FOR
      SELECT S.CD_ESTABELECIMENTO,
             U.CD_SETOR_ATENDIMENTO,
             U.NR_ATENDIMENTO,
             MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
             PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                  U.DT_ENTRADA_UNIDADE,
                                                  U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR                                              
        FROM (SELECT DISTINCT P.NR_ATENDIMENTO
                FROM ATEND_PAC_DISPOSITIVO A,
                     ATENDIMENTO_PACIENTE P 
               WHERE A.NR_ATENDIMENTO = P.NR_ATENDIMENTO   
                 AND EXISTS (SELECT 1 FROM DISPOSITIVO D WHERE D.NR_SEQUENCIA = A.NR_SEQ_DISPOSITIVO AND D.IE_CLASSIF_DISP_NISS = 'CCIP')
                 AND OBTER_IDADE_PF(P.CD_PESSOA_FISICA, A.DT_INSTALACAO, 'A') >= P_AGE
                 AND A.DT_INSTALACAO <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(P_END_DATE), clock_timestamp()))
                 AND (coalesce(A.DT_RETIRADA::text, '') = '' OR
                      A.DT_RETIRADA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, P_START_DATE))
                 AND P.DT_ENTRADA <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(P_END_DATE), clock_timestamp()))
                 AND (coalesce(P.DT_ALTA::text, '') = '' OR
                      P.DT_ALTA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, P_START_DATE))
                 AND EXISTS (SELECT 1
                        FROM GQA_PROTOCOLO_PAC G
                       WHERE G.NR_ATENDIMENTO = A.NR_ATENDIMENTO
                         AND G.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(6)
                         AND G.IE_SITUACAO = 'A'
                         AND G.DT_INCLUSAO <= coalesce(A.DT_RETIRADA, G.DT_INCLUSAO)
                         AND A.DT_INSTALACAO <= coalesce(G.DT_TERMINO, A.DT_INSTALACAO))) AP,
             ATEND_PACIENTE_UNIDADE U,
             SETOR_ATENDIMENTO S
       WHERE AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
         AND S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
         AND (P_CLINICAL_UNIT = '0' OR OBTER_SE_CONTIDO(S.CD_SETOR_ATENDIMENTO, P_CLINICAL_UNIT) = 'S')
         AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND S.CD_SETOR_ATENDIMENTO = US.CD_SETOR_ATENDIMENTO)  
         AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
         AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
         AND U.DT_ENTRADA_UNIDADE <= PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(FIM_DIA(P_END_DATE), clock_timestamp()))         
         AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                      U.DT_ENTRADA_UNIDADE,
                                                      U.CD_SETOR_ATENDIMENTO),
                 PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, P_START_DATE)) >=
             PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, P_START_DATE)
       GROUP BY S.CD_ESTABELECIMENTO,
                U.CD_SETOR_ATENDIMENTO,
                U.NR_ATENDIMENTO,
                PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                     U.DT_ENTRADA_UNIDADE,
                                                     U.CD_SETOR_ATENDIMENTO);

  TYPE T_UNIDADE_ATEND_BSI IS TABLE OF C_UNIDADE_ATEND_BSI%ROWTYPE;
  R_UNIDADE_ATEND_BSI T_UNIDADE_ATEND_BSI;


BEGIN 
  
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;

    OPEN C_UNIDADE_ATEND_BSI;
    LOOP
      FETCH C_UNIDADE_ATEND_BSI BULK COLLECT INTO R_UNIDADE_ATEND_BSI LIMIT 1000;

        BEGIN
          FOR i IN R_UNIDADE_ATEND_BSI.FIRST..R_UNIDADE_ATEND_BSI.LAST LOOP
            RETURN NEXT R_UNIDADE_ATEND_BSI(i);
          END LOOP;
        EXCEPTION WHEN OTHERS THEN
          NULL;
        END;

      EXIT WHEN NOT FOUND; /* apply on C_UNIDADE_ATEND_BSI */
 
    END LOOP;
    CLOSE C_UNIDADE_ATEND_BSI;
  
    RETURN;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_bsi_report.get_tab_atend_unidade (P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text) FROM PUBLIC;
