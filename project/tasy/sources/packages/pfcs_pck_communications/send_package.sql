-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*=========================================== EMAIL ===========================================*/

CREATE OR REPLACE PROCEDURE pfcs_pck_communications.send (cd_establishment_p bigint, nm_user_p text) AS $body$
DECLARE

        ds_message_w        pfcs_communication_rule.ds_email_communication%type;
        nr_total_page_w     double precision := 0;
        nr_page_size_w      constant smallint := 10;
        ds_user_list_w      varchar(4000);
        nr_total_users_w    bigint := 1;
        nr_startcount_w     bigint := 0;
        nr_lastcount_w      bigint := 0;
        id_sms_w            numeric(20);
		ds_email_sender		varchar(100);

BEGIN
        if (current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p%ISOPEN) then
            close current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p;
        end if;

        open current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p(cd_establishment_p);
        loop
            fetch current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p bulk collect into current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type;
            EXIT WHEN NOT FOUND; /* apply on current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p */
        end loop;
        close current_setting('pfcs_pck_communications.cur_communication')::CURSOR(cd_establishment_p;

        for i in 1..cur_communication_w.count loop
            if (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].vl_indicator >= current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_start) and (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].vl_indicator <= current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_end) then
                -- Checking the time of the last message sent
                if (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i]coalesce(.dt_last_comunication_sent::text, '') = '') or
                    (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].qt_cooldown_period <= round((clock_timestamp() - current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].dt_last_comunication_sent) * 24 * 60)) then
                    if (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i](.ds_email_communication IS NOT NULL AND .ds_email_communication::text <> '')) then
                        -- Sending Email
                        nr_total_users_w := pfcs_pck_communications.get_total_users(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, pfcs_pck_constants.IE_EMAIL_SEND);
                        if (nr_total_users_w > 10) then
                            nr_total_page_w := nr_total_users_w / nr_page_size_w;
                        end if;
                        if (nr_total_page_w <= 1) then
                            ds_user_list_w := pfcs_pck_communications.get_user_list(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, 1, nr_total_users_w, pfcs_pck_constants.IE_EMAIL_SEND);
                        else
                            nr_total_page_w := nr_total_page_w + 1;
                            for j in 1..nr_total_page_w loop
                                nr_startcount_w := ((j -1) * nr_page_size_w) + 1;
                                nr_lastcount_w := ((j -1) * nr_page_size_w) + nr_page_size_w;
                                ds_user_list_w := pfcs_pck_communications.get_user_list(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, nr_startcount_w, nr_lastcount_w, pfcs_pck_constants.IE_EMAIL_SEND);
                            end loop;
                        end if;
						
						-- Initiating communication
						-- Replace the Macros
						ds_message_w := current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_email_communication;
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@initialGoal', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_start);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@finalGoal', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_end);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@currentValue', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].vl_indicator);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@Establishment', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_establishment_name);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@indicatorName', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_indicator_name);
                        if ((trim(both ds_user_list_w) IS NOT NULL AND (trim(both ds_user_list_w))::text <> '')) then
							ds_email_sender := pfcs_pck_communications.get_user_email(nm_user_p);
							-- Call function to Send EMAIL
                            CALL enviar_email(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_communication_title, ds_message_w, ds_email_sender, ds_user_list_w, 'PFCS', 'M');
                            -- Updating the last message sent
                            CALL pfcs_pck_communications.update_last_message_sent(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, clock_timestamp());
                        end if;
                        -- Sending Internal Communication
                        nr_total_users_w := pfcs_pck_communications.get_total_users(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, pfcs_pck_constants.IE_COMMUNICATION_INTERNAL);
                        ds_user_list_w := pfcs_pck_communications.get_user_list(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, 1, nr_total_users_w, pfcs_pck_constants.IE_COMMUNICATION_INTERNAL);
                        if ((trim(both ds_user_list_w) IS NOT NULL AND (trim(both ds_user_list_w))::text <> '')) then
							-- Call function to send internal communication
                            CALL pfcs_pck_communications.send_internal_communication(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_communication_title, ds_message_w, ds_user_list_w, cd_establishment_p);
                            -- Updating the last message sent
                            CALL pfcs_pck_communications.update_last_message_sent(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, clock_timestamp());
                        end if;
                    end if;
                    if (current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i](.ds_sms_communication IS NOT NULL AND .ds_sms_communication::text <> '')) then
						-- Replace Macros
						ds_message_w := current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_sms_communication;
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@initialGoal', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_start);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@finalGoal', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_range_end);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@currentValue', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].vl_indicator);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@Establishment', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_establishment_name);
                        ds_message_w := pfcs_pck_communications.format_message(ds_message_w, '@indicatorName', current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_indicator_name);
                        nr_total_users_w := pfcs_pck_communications.get_total_users(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, pfcs_pck_constants.IE_SMS_SEND);
                        ds_user_list_w := pfcs_pck_communications.get_user_list(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, 1, nr_total_users_w, pfcs_pck_constants.IE_SMS_SEND);
                        if ((trim(both ds_user_list_w) IS NOT NULL AND (trim(both ds_user_list_w))::text <> '')) then
							-- Call function to send SMS
                            id_sms_w := wheb_sms.enviar_sms(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].ds_communication_title, ds_user_list_w, ds_message_w, 'PFCS', id_sms_w);
                            -- Updating the last message sent
                            CALL pfcs_pck_communications.update_last_message_sent(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, clock_timestamp());
                        end if;
                    end if;
                end if;
            else
                -- Clear the last message sent
                CALL pfcs_pck_communications.update_last_message_sent(current_setting('pfcs_pck_communications.cur_communication_w')::cur_communication_type[i].nr_sequencia_rule, null);
            end if;
        end loop;
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_communications.send (cd_establishment_p bigint, nm_user_p text) FROM PUBLIC;
