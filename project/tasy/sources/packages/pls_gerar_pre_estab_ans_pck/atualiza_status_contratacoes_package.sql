-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Rotina responsável por atualizar o status dos lotes de franquia e A800
CREATE OR REPLACE PROCEDURE pls_gerar_pre_estab_ans_pck.atualiza_status_contratacoes (nr_seq_lote_ret_p pls_monitor_tiss_lote_ret.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_lote_monitor_w		pls_monitor_tiss_lote.nr_sequencia%type;
cd_glosa_w			pls_monitor_tiss_glosa.cd_glosa%type;
tb_nr_sequencia_w		pls_util_cta_pck.t_number_table;
nr_seq_arquivo_w		pls_monitor_tiss_arquivo.nr_sequencia%type;

C01 CURSOR(nr_seq_lote_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type) FOR
	SELECT	a.nr_identificador,
		a.nr_seq_prestador
	from	pls_monit_tiss_pre_est_ret a
	where	a.nr_seq_guia_monitor_ret = nr_seq_lote_ret_pc
	and	(a.cd_cpf_cnpj IS NOT NULL AND a.cd_cpf_cnpj::text <> '');

C02 CURSOR(	dt_inicio_pc		pls_monitor_tiss_lote.dt_mes_competencia%type,
		dt_fim_pc		pls_monitor_tiss_lote.dt_mes_competencia%type,
		nr_seq_regra_pc		pls_regra_franq_pag.nr_sequencia%type,
		nr_seq_prestador_pc	pls_prestador.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia
	from	pls_franq_pag a,
		pls_franq_pag_prest b
	where	a.nr_sequencia = b.nr_seq_franq_pag
	and	a.dt_referencia between dt_inicio_pc and dt_fim_pc
	and	b.nr_seq_regra = nr_seq_regra_pc
	and	b.nr_seq_prestador = nr_seq_prestador_pc
	and	b.ie_status_monitoramento = 'PR';

C03 CURSOR(nr_seq_lote_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type) FOR
	SELECT	nr_identificador
	from	pls_monit_tiss_pre_est_ret a
	where	a.nr_seq_guia_monitor_ret = nr_seq_lote_ret_pc
	and	(a.nr_registro_operadora_inter IS NOT NULL AND a.nr_registro_operadora_inter::text <> '');

C04 CURSOR(	nr_seq_arquivo_pc		pls_monitor_tiss_arquivo.nr_sequencia%type,
		nr_seq_lote_monitor_pc		pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	a.nr_identificador,
		a.nr_seq_prestador
	from	pls_monit_tiss_pre_est a
	where	a.nr_seq_lote_monitor = nr_seq_lote_monitor_pc
	and	a.nr_seq_arq_monitor = nr_seq_arquivo_pc
	and	(a.cd_cpf_cnpj IS NOT NULL AND a.cd_cpf_cnpj::text <> '')
	and	not exists (	SELECT	1
				from	pls_monit_tiss_pre_est_ret x
				where	x.nr_seq_pre_estab = a.nr_sequencia);

C05 CURSOR(	nr_seq_arquivo_pc		pls_monitor_tiss_arquivo.nr_sequencia%type,
		nr_seq_lote_monitor_pc		pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	a.nr_identificador
	from	pls_monit_tiss_pre_est a
	where	a.nr_seq_lote_monitor = nr_seq_lote_monitor_pc
	and	a.nr_seq_arq_monitor = nr_seq_arquivo_pc
	and	(a.nr_registro_operadora_inter IS NOT NULL AND a.nr_registro_operadora_inter::text <> '')
	and	not exists (	SELECT	1
				from	pls_monit_tiss_pre_est_ret x
				where	x.nr_seq_pre_estab = a.nr_sequencia);

BEGIN
-- Busca sequencial do lote de envio e sequencial do arquivo
select	max(c.nr_seq_lote_monitor),
	max(c.nr_seq_arquivo)
into STRICT	nr_seq_lote_monitor_w,
	nr_seq_arquivo_w
from	pls_monitor_tiss_lote_ret c
where	c.nr_sequencia = nr_seq_lote_ret_p;

-- Alimenta as variáveis de data
select	trunc(dt_mes_competencia, 'mm'),
	fim_mes(dt_mes_competencia)
into STRICT	current_setting('pls_gerar_pre_estab_ans_pck.dt_inicio_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type,
	current_setting('pls_gerar_pre_estab_ans_pck.dt_fim_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type
from	pls_monitor_tiss_lote
where	nr_sequencia = nr_seq_lote_monitor_w;

-- Caso tenha encontrado um sequencial de envio
if (nr_seq_lote_monitor_w IS NOT NULL AND nr_seq_lote_monitor_w::text <> '') then

	-- Busca se o arquivo todo foi rejeitado
	select	max(cd_glosa)
	into STRICT	cd_glosa_w
	from	pls_monit_tiss_glo_pre_est
	where	nr_seq_guia_monitor_ret	= nr_seq_lote_ret_p;


	--5001 - MENSAGEM ELETRÔNICA FORA DO PADRÃO TISS
	--5002 - NÃO FOI POSSÍVEL VALIDAR O ARQUIVO XML
	--5007 - MENSAGEM INCONSISTENTE OU INCOMPLETA
	--5014 - CÓDIGO HASH INVÁLIDO. MENSAGEM PODE ESTAR CORROMPIDA
	--5025-DATA DE REGISTRO DA TRANSAÇÃO INVÁLIDA
	--5026-HORA DE REGISTRO DA TRANSAÇÃO INVÁLIDA
	if	((cd_glosa_w <> '5001') and (cd_glosa_w <> '5002') and (cd_glosa_w <> '5007') and (cd_glosa_w <> '5014') and (cd_glosa_w <> '5025') and (cd_glosa_w <> '5026') and (cd_glosa_w <> '5044') and (cd_glosa_w <> '5045') and (cd_glosa_w <> '5046') or (coalesce(cd_glosa_w::text, '') = '')) then

		-- Caso não tenha sido rejeitado, o sistema irá atualizar os registros que foram negados para 'N'
		for r_C01_w in C01(nr_seq_lote_ret_p) loop

			Open C02(current_setting('pls_gerar_pre_estab_ans_pck.dt_inicio_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerar_pre_estab_ans_pck.dt_fim_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, r_C01_w.nr_identificador, r_C01_w.nr_seq_prestador);
			loop
				tb_nr_sequencia_w.delete;

				fetch C02 bulk collect into tb_nr_sequencia_w
				limit current_setting('pls_gerar_pre_estab_ans_pck.qt_transacao_w')::integer;

				exit when tb_nr_sequencia_w.count = 0;

				forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
					update	pls_franq_pag_prest
					set	ie_status_monitoramento = 'N'
					where	nr_sequencia = tb_nr_sequencia_w(i);
				commit;
			end loop;

			if (C02%ISOPEN) then
				close C02;
			end if;
		end loop;

		Open C03(nr_seq_lote_ret_p);
		loop
			tb_nr_sequencia_w.delete;

			fetch C03 bulk collect into tb_nr_sequencia_w
			limit current_setting('pls_gerar_pre_estab_ans_pck.qt_transacao_w')::integer;

			exit when tb_nr_sequencia_w.count = 0;

			forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
				update	ptu_fatura_pre
				set	ie_status_monitoramento = 'N'
				where	nr_sequencia = tb_nr_sequencia_w(i);
			commit;
		end loop;

		if (C03%ISOPEN) then
			close C03;
		end if;

		-- E os que não estão no arquivo de retorno, serão aceitos
		for r_C04_w in C04(nr_seq_arquivo_w, nr_seq_lote_monitor_w) loop

			Open C02(current_setting('pls_gerar_pre_estab_ans_pck.dt_inicio_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerar_pre_estab_ans_pck.dt_fim_ref_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, r_C04_w.nr_identificador, r_C04_w.nr_seq_prestador);
			loop
				tb_nr_sequencia_w.delete;

				fetch C02 bulk collect into tb_nr_sequencia_w
				limit current_setting('pls_gerar_pre_estab_ans_pck.qt_transacao_w')::integer;

				exit when tb_nr_sequencia_w.count = 0;

				forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
					update	pls_franq_pag_prest
					set	ie_status_monitoramento = 'A'
					where	nr_sequencia = tb_nr_sequencia_w(i);
				commit;
			end loop;

			if (C02%ISOPEN) then
				close C02;
			end if;
		end loop;

		Open C05(nr_seq_arquivo_w, nr_seq_lote_monitor_w);
		loop
			tb_nr_sequencia_w.delete;

			fetch C05 bulk collect into tb_nr_sequencia_w
			limit current_setting('pls_gerar_pre_estab_ans_pck.qt_transacao_w')::integer;

			exit when tb_nr_sequencia_w.count = 0;

			forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
				update	ptu_fatura_pre
				set	ie_status_monitoramento = 'A'
				where	nr_sequencia = tb_nr_sequencia_w(i)
				and	ie_status_monitoramento = 'PR';
			commit;
		end loop;

		if (C05%ISOPEN) then
			close C05;
		end if;
	else
		-- Caso tenha sido rejeitado, nega todo o arquivo
		CALL pls_gerar_pre_estab_ans_pck.atualiza_status_arq_rej(nr_seq_lote_ret_p, nm_usuario_p);
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_pre_estab_ans_pck.atualiza_status_contratacoes (nr_seq_lote_ret_p pls_monitor_tiss_lote_ret.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
