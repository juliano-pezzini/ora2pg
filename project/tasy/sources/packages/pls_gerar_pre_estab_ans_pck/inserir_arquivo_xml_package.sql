-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Rotina responsável por gerar alimentar a tabela de arquivos
CREATE OR REPLACE PROCEDURE pls_gerar_pre_estab_ans_pck.inserir_arquivo_xml ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


qt_total_contas_arquivo_w	pls_monitor_tiss_param.qt_conta_arquivo%type;
nr_seq_arquivo_xml_w		pls_monitor_tiss_arquivo.nr_sequencia%type;
nm_arquivo_w			pls_monitor_tiss_arquivo.nm_arquivo%type;
nr_arquivo_w			pls_monitor_tiss_arquivo.nr_arquivo%type := 0;
qt_contas_selec_w		integer := 0;
nr_index_w			integer := 0;
tb_nr_sequencia_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_arquivo_w		pls_util_cta_pck.t_number_table;

C01 CURSOR(nr_seq_lote_pc	pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_monit_tiss_pre_est
	where	nr_seq_lote_monitor = nr_seq_lote_pc;

BEGIN
--Verifica a quantidade máxima permitida por parâmetro
select	coalesce(max(qt_conta_arquivo),10000)
into STRICT	qt_total_contas_arquivo_w
from 	pls_monitor_tiss_param;

for r_C01_w in C01(nr_seq_lote_p) loop

	-- Se for a primeira vez que estiver passando, ou alcançou a quantidade máxima, gera um novo arquivo
	if (qt_contas_selec_w = 0) or (qt_contas_selec_w = qt_total_contas_arquivo_w) then

		-- Quantidade de arquivos do lote
		nr_arquivo_w := nr_arquivo_w + 1;

		-- Pega o sequencial através de select pois esse sequencial será utilizado para criar o nome do arquivo
		select	nextval('pls_monitor_tiss_arquivo_seq')
		into STRICT	nr_seq_arquivo_xml_w
		;

		-- Gera o nome do arquivo conforme padrão TISS
		nm_arquivo_w := pls_gerar_pre_estab_ans_pck.obter_nome_arquivo(nr_seq_lote_p, nr_seq_arquivo_xml_w);

		insert	into	pls_monitor_tiss_arquivo(	nr_sequencia, nr_seq_lote_monitor, dt_geracao_arquivo,
				nm_arquivo, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_arquivo,
				ie_status)
		values (	nr_seq_arquivo_xml_w, nr_seq_lote_p, clock_timestamp(),
				nm_arquivo_w, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, nr_arquivo_w,
				'N');
	end if;
	--Incrementa o número de registros selecionados
	qt_contas_selec_w := qt_contas_selec_w + 1;

	-- Se alcançou a quantidade máxima permitida, zera o contador
	if (qt_contas_selec_w > 0) and (qt_contas_selec_w = qt_total_contas_arquivo_w) then
		qt_contas_selec_w := 0;
	end if;

	-- Alimenta nos table para atualizar o vínculo com os registros quentes
	tb_nr_sequencia_w(nr_index_w) := r_C01_w.nr_sequencia;
	tb_nr_seq_arquivo_w(nr_index_w) := nr_seq_arquivo_xml_w;

	-- Mnada para o banco
	if (tb_nr_sequencia_w.count >= current_setting('pls_gerar_pre_estab_ans_pck.qt_transacao_w')::integer) then
		forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
			update	pls_monit_tiss_pre_est
			set	nr_seq_arq_monitor = tb_nr_seq_arquivo_w(i)
			where	nr_sequencia = tb_nr_sequencia_w(i);
		commit;

		tb_nr_sequencia_w.delete;
		tb_nr_seq_arquivo_w.delete;
		nr_index_w := 0;
	else
		nr_index_w := nr_index_w + 1;
	end if;
end loop;

-- Caso tenha sobrado algo, manda para o banco
if (tb_nr_sequencia_w.count > 0) then
	forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
		update	pls_monit_tiss_pre_est
		set	nr_seq_arq_monitor = tb_nr_seq_arquivo_w(i)
		where	nr_sequencia = tb_nr_sequencia_w(i);
	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_pre_estab_ans_pck.inserir_arquivo_xml ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
