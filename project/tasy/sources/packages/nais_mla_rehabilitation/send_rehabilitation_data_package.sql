-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/** 
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	NAIS MLA Event - REHABILITATION Test Starts Here
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	**/
        


CREATE OR REPLACE PROCEDURE nais_mla_rehabilitation.send_rehabilitation_data ( nr_prescricao_p bigint, cd_classif_p text, file_output_p out text ) as countitemrow varchar(30) AS $body$
DECLARE

        PERFORM
                cd_classif_p                                                                                                    process_classif,
                'R0'                                                                                                            order_class,              
                coalesce(co.nr_order_patient_seq, 0)                                                                                 order_number,            
                coalesce(i.medical_record_id,'0000000000')                                                                           patient_identifier,
                coalesce(to_char(g.dt_start_time, 'YYYYMMDD'),'00000000')                                                            consultation_date,
                
                case when (co.cd_especialidade_med IS NOT NULL AND co.cd_especialidade_med::text <> '') then 
                coalesce(nais_mla_rehabilitation.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', co.cd_especialidade_med), ' ') 
                when (co.cd_departamento_med IS NOT NULL AND co.cd_departamento_med::text <> '') then 
                coalesce(nais_mla_rehabilitation.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', co.cd_departamento_med), ' ')
                else '00'
                end as                                                                                                          department_code,
    
                CASE WHEN get_patient_type(i.encounter_id, NULL)='IN' THEN  1 WHEN get_patient_type(i.encounter_id, NULL)='OP' THEN  2 END                                                 patient_classification, 
                coalesce(i.bed_id,'   ')                                                                                             ward_code,        
                coalesce(i.room_id,'     ')                                                                                          room_number,            
                '1'                                                                                                             blood_tranfusion_type,    
                coalesce(a.NR_SEQ_NAIS_INSURANCE,'00')                                                                               insurance_number,       
                coalesce(a.cd_medico,'00000000')                                                                                     doctor_code,              
                '0'                                                                                                             patient_newborn,        
                ' '                                                                                                             prescription_classfication,
                '   '                                                                                                           requestor_code,          
                ' '                                                                                                             mutual_exclusion_rule,     
                '    '                                                                                                          division_number,          
                ' '                                                                                                             blank_one,              
                ' '                                                                                                             blank_two                  
        from    cpoe_procedimento a, 
                prescr_procedimento b, 
                rp_tratamento c, 
                prescr_medica d,  
                agenda_consulta f, 
                rp_implementation_reab g,            
                bft_encounter_v i,
                proc_interno pi,
                cpoe_order_unit co,
                cpoe_tipo_pedido ct
        where   a.nr_sequencia = b.nr_seq_proc_cpoe
        and     a.nr_atendimento =  i.encounter_id
        and     b.nr_prescricao = d.nr_prescricao
        and     c.nr_seq_cpoe_procedimento = a.nr_sequencia
        and     g.nr_seq_tratamento = c.nr_sequencia
        and     g.nr_seq_impl_agenda = f.nr_sequencia
	    and     g.ie_exec_status='S' and g.ie_info_acc='S'
        and     b.nr_prescricao = nr_prescricao_p
        and     co.nr_seq_cpoe_tipo_pedido   = ct.nr_sequencia 
        and     co.nr_sequencia              = a.nr_seq_cpoe_order_unit
        and     obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'R0'
        and     ct.nr_seq_sub_grp            = 'RE'
        and     pi.nr_sequencia              = a.nr_seq_proc_interno
        order by dt_agenda desc;

    --  End of Accounting Information
        c02 return;

    c03 return;


        r_c03                 c03%rowtype;
        r_c01_w               accinforectyp;
        r_c02_w               execinforedtyp;
        r_c03_w               medtreatmentinforedtyp;
        cd_contin_flag_w      varchar(1) := 'C';
        loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w               smallint := 0;
        json_output_w		    philips_json;
        json_output_list_w  philips_json_list;

         
    
BEGIN 
    
        PERFORM set_config('nais_mla_rehabilitation.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w :=0;
        PERFORM set_config('nais_mla_rehabilitation.index_counter_w', 0, false);
        loop_count_w := 0;
        json_output_w   := philips_json();
        json_output_list_w	:= philips_json_list();
        open c03;

        loop
            fetch c03 into r_c03_w;

            EXIT WHEN NOT FOUND; /* apply on c03 */

            if  c03%rowcount = 1 then
            current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767) := nais_mla_rehabilitation.get_action_code_med_detail('R0', r_c03_w, current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_rehabilitation.add_med_treatment_detail_array(current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767), current_setting('nais_mla_rehabilitation.index_counter_w')::smallint);
            end if;

            CALL CALL CALL CALL nais_mla_rehabilitation.common_med_treatment_info(r_c03_w);
            CALL CALL CALL CALL nais_mla_rehabilitation.add_med_treatment_detail_array(current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767), current_setting('nais_mla_rehabilitation.index_counter_w')::smallint);

        end loop;
            current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767) := nais_mla_rehabilitation.add_date_class_med_detail('R0', r_c03_w, current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_rehabilitation.add_med_treatment_detail_array(current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767), current_setting('nais_mla_rehabilitation.index_counter_w')::smallint);
        close c03;
        loop_count_w := ceil(current_setting('nais_mla_rehabilitation.index_counter_w')::smallint / 10);


        
        for i in 1..loop_count_w loop begin
            if ( i = loop_count_w ) then
                cd_contin_flag_w := 'E';
            end if;
            CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.nais_common_header('KK', nr_prescricao_p, cd_classif_p, cd_contin_flag_w, 1,
                               810);
            open c01;
            loop
                fetch c01 into r_c01_w;
                EXIT WHEN NOT FOUND; /* apply on c01 */
                CALL CALL CALL CALL CALL nais_mla_rehabilitation.common_accounting_info(r_c01_w);
            end loop;

            close c01;
            open c02;
            loop
                fetch c02 into r_c02_w;
                EXIT WHEN NOT FOUND; /* apply on c02 */
                CALL CALL CALL CALL CALL nais_mla_rehabilitation.common_execution_info(r_c02_w);
            end loop;

            close c02;
            open c03;
            fetch c03 into r_c03;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(r_c03.slip_code, 3, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(coalesce(r_c03.count_medi_details, 0), 2, 'L', '0');
            close c03;
            inside_loop_count_w := counter_w + 1;
            for x in inside_loop_count_w..inside_loop_count_w + 9 loop
                counter_w := counter_w + 1;

                current_setting('nais_mla_rehabilitation.med_treamtent')::med_treamtent_array.extend;
                if ( cd_contin_flag_w = 'E' and current_setting('nais_mla_rehabilitation.med_treamtent')::coalesce(med_treamtent_array(x)::text, '') = '' ) then
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(' ', 64);
                else
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(current_setting('nais_mla_rehabilitation.med_treamtent')::med_treamtent_array(x), 64, 'L', ' ');
                end if;

            end loop;

            open c03;
            fetch c03 into r_c03;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(r_c03.medi_blank, 4, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_rehabilitation.append_text(r_c03.eot, 1, 'L');
            close c03;
           json_output_w := nais_mla_rehabilitation.add_json_value(json_output_w, 'message', current_setting('nais_mla_rehabilitation.ds_line_w')::varchar(32767));
           json_output_list_w.append(json_output_w.to_json_value());

        end;

        end loop;
        dbms_lob.createtemporary( file_output_p, true);
        json_output_list_w.(file_output_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_rehabilitation.send_rehabilitation_data ( nr_prescricao_p bigint, cd_classif_p text, file_output_p out text ) as countitemrow varchar(30) FROM PUBLIC;
