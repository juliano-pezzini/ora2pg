-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.gerar_prestador_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
_ora2pg_r RECORD;
-- Tables

tb_nr_seq_prestador_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_matriz_w	pls_util_cta_pck.t_number_table;

tb_nr_seq_prest_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_valor_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_upd_w		pls_util_cta_pck.t_number_table;
tb_vl_glosa_w			pls_util_cta_pck.t_number_table;
tb_vl_provento_w		pls_util_cta_pck.t_number_table;
tb_vl_desconto_w		pls_util_cta_pck.t_number_table;
tb_vl_tributo_w			pls_util_cta_pck.t_number_table;
tb_vl_liquido_w			pls_util_cta_pck.t_number_table;
tb_vl_tit_receber_w		pls_util_cta_pck.t_number_table;
tb_vl_apropriado_w		pls_util_cta_pck.t_number_table;
tb_data_vencimento_w		pls_util_cta_pck.t_date_table;
tb_ie_origem_venc_titulo_w	pls_util_cta_pck.t_varchar2_table_5;
tb_ie_origem_comp_pag_w		pls_util_cta_pck.t_varchar2_table_5;
tb_dt_comp_pagto_w		pls_util_cta_pck.t_date_table;
tb_nr_seq_regra_vcto_w		pls_util_cta_pck.t_number_table;
tb_acao_pgto_negativo_w		pls_util_cta_pck.t_varchar2_table_5;
tb_qt_pag_neg_max_w		pls_util_cta_pck.t_number_table;
tb_vl_min_tit_liq_w		pls_util_cta_pck.t_number_table;
tb_vl_titulo_pagar_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_banco_w		pls_util_cta_pck.t_number_table;

-- Indice das Tables

nr_idx_insert_w		integer;
nr_idx_update_w		integer;

-- Controla a soma de valores

vl_glosa_w		pls_pp_prest_evento_valor.vl_glosa%type;
vl_provento_w		pls_pp_prestador.vl_provento%type;
vl_desconto_w		pls_pp_prestador.vl_desconto%type;
vl_tributo_w		pls_pp_prest_evento_valor.vl_tributo%type;
vl_liquido_w		pls_pp_prest_evento_valor.vl_liquido%type;
vl_tit_receber_w	pls_pp_prestador.vl_titulo_receber%type;
vl_apropriado_w		pls_pp_prestador.vl_apropriado%type;

-- Verifica se deve disponibilizar os prestadores no portal

ie_exibe_portal_w	pls_pp_lote.ie_exibe_portal%type;

C01 CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type) FOR
	SELECT	distinct a.nr_seq_prestador,
		b.nr_seq_prestador_matriz
	from	pls_pp_prest_evento_valor a,
		pls_pp_prestador_tmp b
	where	a.nr_seq_lote = nr_seq_lote_pc
	and	b.nr_seq_prestador = a.nr_seq_prestador;
	
C02 CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_pp_prest,
		a.nr_seq_prestador,
		b.ie_origem_venc_titulo,
		b.dt_venc_titulo,
		b.nr_seq_regra_venc_titulo,
		b.ie_origem_comp_pag,
		b.dt_comp_pag,
		b.ie_acao_pgto_negativo,
		b.qt_pag_negativo_max,
		b.vl_minimo_tit_liq,
		b.nr_seq_conta_banco
	from	pls_pp_prestador a,
		pls_pp_prestador_tmp b
	where	a.nr_seq_lote = nr_seq_lote_pc
	and	b.nr_seq_prestador = a.nr_seq_prestador;
		
C03 CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type,
		nr_seq_prestador_pc	pls_pp_prest_evento_valor.nr_seq_prestador%type) FOR
	SELECT	nr_sequencia,
		ie_acao_pgto_negativo,
		coalesce(vl_glosa, 0) vl_glosa,
		coalesce(vl_item, 0) vl_item,
		coalesce(vl_liquido, 0) vl_liquido,
		coalesce(vl_acao_negativo, 0) vl_acao_negativo,
		coalesce(vl_tributo, 0) vl_tributo
	from	pls_pp_prest_evento_valor
	where	nr_seq_lote = nr_seq_lote_pc
	and	nr_seq_prestador = nr_seq_prestador_pc;
	
BEGIN
		
tb_nr_seq_prestador_w.delete;

select	coalesce(max(ie_exibe_portal),'N')
into STRICT	ie_exibe_portal_w
from	pls_pp_lote
where	nr_sequencia = nr_seq_lote_p;

-- Varre a tabela 'pls_pp_prest_evento_valor' e insere na tabela 'pls_pp_prestador'

open C01(nr_seq_lote_p);
	loop
		fetch C01 bulk collect into tb_nr_seq_prestador_w, tb_nr_seq_prest_matriz_w
		limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_nr_seq_prestador_w.count = 0;
					
		forall i in tb_nr_seq_prestador_w.first..tb_nr_seq_prestador_w.last
			insert into pls_pp_prestador(	
				nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
				dt_cancelamento, ie_exibe_portal, nm_usuario, 
				nm_usuario_nrec, nr_seq_lote, nr_seq_prestador, 
				nr_seq_prestador_matriz, vl_glosa, vl_provento, 
				vl_desconto, vl_tributo, vl_liquido,
				vl_titulo_pagar, vl_titulo_receber, vl_apropriado,
				ie_cancelado
			) values (
				nextval('pls_pp_prestador_seq'), clock_timestamp(), clock_timestamp(),
				null, 'N', nm_usuario_p,
				nm_usuario_p, nr_seq_lote_p, tb_nr_seq_prestador_w(i),
				tb_nr_seq_prest_matriz_w(i), 0, 0, 
				0, 0, 0,
				0, 0, 0,
				'N'
			);
		commit;
	end loop;
close C01;

-- Limpa as tables e zera os indices que serao utilizados nos inserts e updates

SELECT * FROM pls_pp_lote_pagamento_pck.grava_lista_prestador(	tb_nr_seq_prest_w, tb_nr_seq_valor_w, tb_nr_seq_prest_upd_w, tb_vl_glosa_w, tb_vl_provento_w, tb_vl_desconto_w, tb_vl_tributo_w, tb_vl_liquido_w, tb_vl_titulo_pagar_w, tb_vl_tit_receber_w, tb_vl_apropriado_w, tb_ie_origem_venc_titulo_w, tb_ie_origem_comp_pag_w, tb_dt_comp_pagto_w, tb_data_vencimento_w, tb_nr_seq_regra_vcto_w, tb_acao_pgto_negativo_w, tb_qt_pag_neg_max_w, tb_vl_min_tit_liq_w, tb_nr_seq_conta_banco_w, nr_idx_update_w, nr_idx_insert_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_nr_seq_valor_w := _ora2pg_r.tb_nr_seq_valor_p; tb_nr_seq_prest_upd_w := _ora2pg_r.tb_nr_seq_prest_upd_p; tb_vl_glosa_w := _ora2pg_r.tb_vl_glosa_p; tb_vl_provento_w := _ora2pg_r.tb_vl_provento_p; tb_vl_desconto_w := _ora2pg_r.tb_vl_desconto_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_liquido_w := _ora2pg_r.tb_vl_liquido_p; tb_vl_titulo_pagar_w := _ora2pg_r.tb_vl_titulo_pagar_p; tb_vl_tit_receber_w := _ora2pg_r.tb_vl_tit_receber_p; tb_vl_apropriado_w := _ora2pg_r.tb_vl_apropriado_p; tb_ie_origem_venc_titulo_w := _ora2pg_r.tb_ie_orig_venc_tit_p; tb_ie_origem_comp_pag_w := _ora2pg_r.tb_ie_orig_comp_pag_p; tb_dt_comp_pagto_w := _ora2pg_r.tb_dt_comp_pagto_p; tb_data_vencimento_w := _ora2pg_r.tb_data_vencimento_p; tb_nr_seq_regra_vcto_w := _ora2pg_r.tb_nr_seq_regra_vcto_p; tb_acao_pgto_negativo_w := _ora2pg_r.tb_acao_pgto_negativo_p; tb_qt_pag_neg_max_w := _ora2pg_r.tb_qt_pag_neg_max_p; tb_vl_min_tit_liq_w := _ora2pg_r.tb_vl_min_tit_liq_p; tb_nr_seq_conta_banco_w := _ora2pg_r.tb_nr_seq_conta_banco_p; nr_idx_update_w := _ora2pg_r.nr_idx_update_p; nr_idx_insert_w := _ora2pg_r.nr_idx_insert_p;

-- Retorna todos os registros da tabela 'pls_pp_prestador' ja agrupados por prestador

for r_C02_w in C02(nr_seq_lote_p) loop

	-- Zera os somadores de valores

	vl_glosa_w := 0;
	vl_provento_w := 0;
	vl_desconto_w := 0;
	vl_tributo_w := 0;
	vl_liquido_w := 0;
	vl_tit_receber_w := 0;
	vl_apropriado_w := 0;

	-- Retorna todos os itens, neste bloco deve ser somado os itens por lote, evento e prestador

	for r_C03_w in C03(nr_seq_lote_p, r_C02_w.nr_seq_prestador) loop
	
		-- Grava os dados nas tables para um futuro insert na tabela 'pls_pp_prest_event_prest'

		tb_nr_seq_prest_w(nr_idx_insert_w) := r_C02_w.nr_seq_pp_prest;
		tb_nr_seq_valor_w(nr_idx_insert_w) := r_C03_w.nr_sequencia;
		
		-- Soma os valores agrupados por prestador

		vl_glosa_w := vl_glosa_w + r_C03_w.vl_glosa;
		vl_tributo_w := vl_tributo_w + r_C03_w.vl_tributo;
		
		-- se for positivo e provento, senao desconto

		if (r_C03_w.vl_item > 0) then
			vl_provento_w := vl_provento_w + r_C03_w.vl_item;
		else
			vl_desconto_w := vl_desconto_w + r_C03_w.vl_item;
		end if;
		
		vl_liquido_w := vl_liquido_w + r_C03_w.vl_liquido;
		
		-- apropriacao

		if (r_c03_w.ie_acao_pgto_negativo = 'PP') then
			vl_apropriado_w := vl_apropriado_w + r_C03_w.vl_acao_negativo;

		-- gerar titulo a receber

		elsif (r_c03_w.ie_acao_pgto_negativo = 'TR') then
			vl_tit_receber_w := vl_tit_receber_w + r_C03_w.vl_acao_negativo;
		end if;
		
		if (nr_idx_insert_w >= pls_util_cta_pck.qt_registro_transacao_w) then
		
			SELECT * FROM pls_pp_lote_pagamento_pck.grava_lista_prestador(	tb_nr_seq_prest_w, tb_nr_seq_valor_w, tb_nr_seq_prest_upd_w, tb_vl_glosa_w, tb_vl_provento_w, tb_vl_desconto_w, tb_vl_tributo_w, tb_vl_liquido_w, tb_vl_titulo_pagar_w, tb_vl_tit_receber_w, tb_vl_apropriado_w, tb_ie_origem_venc_titulo_w, tb_ie_origem_comp_pag_w, tb_dt_comp_pagto_w, tb_data_vencimento_w, tb_nr_seq_regra_vcto_w, tb_acao_pgto_negativo_w, tb_qt_pag_neg_max_w, tb_vl_min_tit_liq_w, tb_nr_seq_conta_banco_w, nr_idx_update_w, nr_idx_insert_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_nr_seq_valor_w := _ora2pg_r.tb_nr_seq_valor_p; tb_nr_seq_prest_upd_w := _ora2pg_r.tb_nr_seq_prest_upd_p; tb_vl_glosa_w := _ora2pg_r.tb_vl_glosa_p; tb_vl_provento_w := _ora2pg_r.tb_vl_provento_p; tb_vl_desconto_w := _ora2pg_r.tb_vl_desconto_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_liquido_w := _ora2pg_r.tb_vl_liquido_p; tb_vl_titulo_pagar_w := _ora2pg_r.tb_vl_titulo_pagar_p; tb_vl_tit_receber_w := _ora2pg_r.tb_vl_tit_receber_p; tb_vl_apropriado_w := _ora2pg_r.tb_vl_apropriado_p; tb_ie_origem_venc_titulo_w := _ora2pg_r.tb_ie_orig_venc_tit_p; tb_ie_origem_comp_pag_w := _ora2pg_r.tb_ie_orig_comp_pag_p; tb_dt_comp_pagto_w := _ora2pg_r.tb_dt_comp_pagto_p; tb_data_vencimento_w := _ora2pg_r.tb_data_vencimento_p; tb_nr_seq_regra_vcto_w := _ora2pg_r.tb_nr_seq_regra_vcto_p; tb_acao_pgto_negativo_w := _ora2pg_r.tb_acao_pgto_negativo_p; tb_qt_pag_neg_max_w := _ora2pg_r.tb_qt_pag_neg_max_p; tb_vl_min_tit_liq_w := _ora2pg_r.tb_vl_min_tit_liq_p; tb_nr_seq_conta_banco_w := _ora2pg_r.tb_nr_seq_conta_banco_p; nr_idx_update_w := _ora2pg_r.nr_idx_update_p; nr_idx_insert_w := _ora2pg_r.nr_idx_insert_p;
		else
			-- Incrementa o index do update

			nr_idx_insert_w := nr_idx_insert_w + 1;
		end if;
	end loop;
	
	-- Grava os dados nas tables para um futuro update na tabela 'pls_pp_prestador'

	tb_nr_seq_prest_upd_w(nr_idx_update_w) := r_C02_w.nr_seq_pp_prest;
	tb_vl_glosa_w(nr_idx_update_w) := vl_glosa_w;
	tb_vl_provento_w(nr_idx_update_w) := vl_provento_w;
	tb_vl_desconto_w(nr_idx_update_w) := vl_desconto_w;
	tb_vl_tributo_w(nr_idx_update_w) := vl_tributo_w;
	tb_vl_liquido_w(nr_idx_update_w) := vl_liquido_w;
	tb_vl_tit_receber_w(nr_idx_update_w) := vl_tit_receber_w;
	tb_vl_apropriado_w(nr_idx_update_w) := vl_apropriado_w;
	tb_data_vencimento_w(nr_idx_update_w) := r_C02_w.dt_venc_titulo;
	tb_ie_origem_venc_titulo_w(nr_idx_update_w) := r_C02_w.ie_origem_venc_titulo;
	tb_ie_origem_comp_pag_w(nr_idx_update_w) := r_C02_w.ie_origem_comp_pag;
	tb_dt_comp_pagto_w(nr_idx_update_w) := r_C02_w.dt_comp_pag;
	tb_nr_seq_regra_vcto_w(nr_idx_update_w) := r_C02_w.nr_seq_regra_venc_titulo;
	tb_acao_pgto_negativo_w(nr_idx_update_w) := r_C02_w.ie_acao_pgto_negativo;
	tb_qt_pag_neg_max_w(nr_idx_update_w) := r_C02_w.qt_pag_negativo_max;
	tb_vl_min_tit_liq_w(nr_idx_update_w) := r_C02_w.vl_minimo_tit_liq;
	tb_nr_seq_conta_banco_w(nr_idx_update_w) := r_C02_w.nr_seq_conta_banco;
	
	-- tratamentos para o valor do titulo a pagar, caso o valor liquido seja negativo o valor e zero

	-- o valor do titulo a pagar deve ser o valor liquido + o valor do imposto, isto deve-se ao tratamento

	-- que existe no titulo a pagar, onde os tributos sao vinculados ao mesmo e depois o saldo e atualizado 

	-- descontando o valor do tributo

	if (vl_liquido_w <= 0) then
	
		tb_vl_titulo_pagar_w(nr_idx_update_w) := 0;
	else
		tb_vl_titulo_pagar_w(nr_idx_update_w) := vl_liquido_w + abs(vl_tributo_w);
	end if;
	
	if (nr_idx_update_w >= pls_util_cta_pck.qt_registro_transacao_w) then
	
		SELECT * FROM pls_pp_lote_pagamento_pck.grava_lista_prestador(	tb_nr_seq_prest_w, tb_nr_seq_valor_w, tb_nr_seq_prest_upd_w, tb_vl_glosa_w, tb_vl_provento_w, tb_vl_desconto_w, tb_vl_tributo_w, tb_vl_liquido_w, tb_vl_titulo_pagar_w, tb_vl_tit_receber_w, tb_vl_apropriado_w, tb_ie_origem_venc_titulo_w, tb_ie_origem_comp_pag_w, tb_dt_comp_pagto_w, tb_data_vencimento_w, tb_nr_seq_regra_vcto_w, tb_acao_pgto_negativo_w, tb_qt_pag_neg_max_w, tb_vl_min_tit_liq_w, tb_nr_seq_conta_banco_w, nr_idx_update_w, nr_idx_insert_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_nr_seq_valor_w := _ora2pg_r.tb_nr_seq_valor_p; tb_nr_seq_prest_upd_w := _ora2pg_r.tb_nr_seq_prest_upd_p; tb_vl_glosa_w := _ora2pg_r.tb_vl_glosa_p; tb_vl_provento_w := _ora2pg_r.tb_vl_provento_p; tb_vl_desconto_w := _ora2pg_r.tb_vl_desconto_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_liquido_w := _ora2pg_r.tb_vl_liquido_p; tb_vl_titulo_pagar_w := _ora2pg_r.tb_vl_titulo_pagar_p; tb_vl_tit_receber_w := _ora2pg_r.tb_vl_tit_receber_p; tb_vl_apropriado_w := _ora2pg_r.tb_vl_apropriado_p; tb_ie_origem_venc_titulo_w := _ora2pg_r.tb_ie_orig_venc_tit_p; tb_ie_origem_comp_pag_w := _ora2pg_r.tb_ie_orig_comp_pag_p; tb_dt_comp_pagto_w := _ora2pg_r.tb_dt_comp_pagto_p; tb_data_vencimento_w := _ora2pg_r.tb_data_vencimento_p; tb_nr_seq_regra_vcto_w := _ora2pg_r.tb_nr_seq_regra_vcto_p; tb_acao_pgto_negativo_w := _ora2pg_r.tb_acao_pgto_negativo_p; tb_qt_pag_neg_max_w := _ora2pg_r.tb_qt_pag_neg_max_p; tb_vl_min_tit_liq_w := _ora2pg_r.tb_vl_min_tit_liq_p; tb_nr_seq_conta_banco_w := _ora2pg_r.tb_nr_seq_conta_banco_p; nr_idx_update_w := _ora2pg_r.nr_idx_update_p; nr_idx_insert_w := _ora2pg_r.nr_idx_insert_p;
	else
		-- Incrementa o index do update

		nr_idx_update_w := nr_idx_update_w + 1;
	end if;
end loop;

SELECT * FROM pls_pp_lote_pagamento_pck.grava_lista_prestador(	tb_nr_seq_prest_w, tb_nr_seq_valor_w, tb_nr_seq_prest_upd_w, tb_vl_glosa_w, tb_vl_provento_w, tb_vl_desconto_w, tb_vl_tributo_w, tb_vl_liquido_w, tb_vl_titulo_pagar_w, tb_vl_tit_receber_w, tb_vl_apropriado_w, tb_ie_origem_venc_titulo_w, tb_ie_origem_comp_pag_w, tb_dt_comp_pagto_w, tb_data_vencimento_w, tb_nr_seq_regra_vcto_w, tb_acao_pgto_negativo_w, tb_qt_pag_neg_max_w, tb_vl_min_tit_liq_w, tb_nr_seq_conta_banco_w, nr_idx_update_w, nr_idx_insert_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_nr_seq_valor_w := _ora2pg_r.tb_nr_seq_valor_p; tb_nr_seq_prest_upd_w := _ora2pg_r.tb_nr_seq_prest_upd_p; tb_vl_glosa_w := _ora2pg_r.tb_vl_glosa_p; tb_vl_provento_w := _ora2pg_r.tb_vl_provento_p; tb_vl_desconto_w := _ora2pg_r.tb_vl_desconto_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_liquido_w := _ora2pg_r.tb_vl_liquido_p; tb_vl_titulo_pagar_w := _ora2pg_r.tb_vl_titulo_pagar_p; tb_vl_tit_receber_w := _ora2pg_r.tb_vl_tit_receber_p; tb_vl_apropriado_w := _ora2pg_r.tb_vl_apropriado_p; tb_ie_origem_venc_titulo_w := _ora2pg_r.tb_ie_orig_venc_tit_p; tb_ie_origem_comp_pag_w := _ora2pg_r.tb_ie_orig_comp_pag_p; tb_dt_comp_pagto_w := _ora2pg_r.tb_dt_comp_pagto_p; tb_data_vencimento_w := _ora2pg_r.tb_data_vencimento_p; tb_nr_seq_regra_vcto_w := _ora2pg_r.tb_nr_seq_regra_vcto_p; tb_acao_pgto_negativo_w := _ora2pg_r.tb_acao_pgto_negativo_p; tb_qt_pag_neg_max_w := _ora2pg_r.tb_qt_pag_neg_max_p; tb_vl_min_tit_liq_w := _ora2pg_r.tb_vl_min_tit_liq_p; tb_nr_seq_conta_banco_w := _ora2pg_r.tb_nr_seq_conta_banco_p; nr_idx_update_w := _ora2pg_r.nr_idx_update_p; nr_idx_insert_w := _ora2pg_r.nr_idx_insert_p;
			
-- Atualizar se os prestadores do lote mostram no portal

CALL pls_pp_exibir_portal( nr_seq_lote_p, null, ie_exibe_portal_w, nm_usuario_p);
			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.gerar_prestador_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
