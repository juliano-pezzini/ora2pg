-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

-- controle para decidir quando o select para obtencao dos valores dos parametros deve ser executado novamente




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.grava_tempo_execucao ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_lote_ret_p pls_pp_lr_lote.nr_sequencia%type, ie_tipo_gravacao_p text, ds_etapa_p pls_pp_lote_log_etapa.ds_etapa%type, nr_seq_log_etapa_p INOUT pls_pp_lote_log_etapa.nr_sequencia%type, ie_tipo_processo_p pls_pp_lote_log_etapa.ie_tipo_processo%type, nm_usuario_p usuario.nm_usuario%type, ds_erro_p pls_pp_lote_log_etapa.ds_erro%type default null) AS $body$
DECLARE


ds_etapa_w	varchar(1000);


BEGIN
-- caso nao tenha etapa e porque esta no processo de desfazer, com isso alimentamos o erro neste campo

if (coalesce(ds_etapa_p::text, '') = '') then

	ds_etapa_w := substr(ds_erro_p, 1, 1000);
else
	ds_etapa_w := ds_etapa_p;
end if;

-- inicio do processo gera um novo registro

if (ie_tipo_gravacao_p = 'I') then

	insert 	into pls_pp_lote_log_etapa(
		nr_sequencia, ds_erro, ds_etapa,
		ds_tempo_duracao, dt_atualizacao, dt_fim,
		dt_inicio, nm_usuario, nr_seq_lote,
		ie_tipo_processo, nr_seq_lote_ret
	) values (
		nextval('pls_pp_lote_log_etapa_seq'), null, ds_etapa_w,
		null, clock_timestamp(), null,
		clock_timestamp(), nm_usuario_p, nr_seq_lote_p,
		ie_tipo_processo_p, nr_seq_lote_ret_p
	) returning nr_sequencia into nr_seq_log_etapa_p;

-- atualiza com a data de fim	

elsif (ie_tipo_gravacao_p = 'F') then
	
	update 	pls_pp_lote_log_etapa set
		dt_atualizacao = clock_timestamp(),
		dt_fim = clock_timestamp(),
		ds_tempo_duracao = pls_manipulacao_datas_pck.obter_tempo_execucao_format(dt_inicio, clock_timestamp())
	where	nr_sequencia = nr_seq_log_etapa_p;

-- se gerou algum erro grava na tabela

elsif (ie_tipo_gravacao_p = 'E') then

	-- nos processos de desfazer algum processo do lote nao trabalhamos com log de etapas

	-- por isso, se der erro, fazemos insert para armazenar a mensagem do erro

	if (coalesce(nr_seq_log_etapa_p::text, '') = '') then
	
		insert 	into pls_pp_lote_log_etapa(
			nr_sequencia, ds_erro, ds_etapa,
			ds_tempo_duracao, dt_atualizacao, dt_fim,
			dt_inicio, nm_usuario, nr_seq_lote,
			ie_tipo_processo, nr_seq_lote_ret
		) values (
			nextval('pls_pp_lote_log_etapa_seq'), ds_erro_p, ds_etapa_w,
			null, clock_timestamp(), clock_timestamp(),
			clock_timestamp(), nm_usuario_p, nr_seq_lote_p,
			ie_tipo_processo_p, nr_seq_lote_ret_p
		) returning nr_sequencia into nr_seq_log_etapa_p;
	else
		update 	pls_pp_lote_log_etapa set
			dt_atualizacao = clock_timestamp(),
			dt_fim = clock_timestamp(),
			ds_tempo_duracao  = NULL,
			ds_erro = ds_erro_p
		where	nr_sequencia = nr_seq_log_etapa_p;
	end if;
	
-- limpar todos os registros de tempo do lote de uma possivel geracao anterior

elsif (ie_tipo_gravacao_p = 'L') then
	
	if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
		delete 	FROM pls_pp_lote_log_etapa
		where	nr_seq_lote = nr_seq_lote_p
		and	ie_tipo_processo = ie_tipo_processo_p;
	end if;
	
	if (nr_seq_lote_ret_p IS NOT NULL AND nr_seq_lote_ret_p::text <> '') then
		delete 	FROM pls_pp_lote_log_etapa
		where	nr_seq_lote_ret = nr_seq_lote_ret_p
		and	ie_tipo_processo = ie_tipo_processo_p;
	end if;
end if;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.grava_tempo_execucao ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_lote_ret_p pls_pp_lr_lote.nr_sequencia%type, ie_tipo_gravacao_p text, ds_etapa_p pls_pp_lote_log_etapa.ds_etapa%type, nr_seq_log_etapa_p INOUT pls_pp_lote_log_etapa.nr_sequencia%type, ie_tipo_processo_p pls_pp_lote_log_etapa.ie_tipo_processo%type, nm_usuario_p usuario.nm_usuario%type, ds_erro_p pls_pp_lote_log_etapa.ds_erro%type default null) FROM PUBLIC;
