-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.alimenta_busca_inconsistencia ( ie_tipo_data_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_sem_evento_vinc_p text, ie_sem_lote_pagamento_p text, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_p INOUT pls_pp_busca_inconsist.nr_id_transacao%type, ie_opcao_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_tipo_prestador_p pls_tipo_prestador.nr_sequencia%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_sequencia_w	pls_util_cta_pck.t_number_table;

valor_bind_w		sql_pck.t_dado_bind;
ds_restricao_w		varchar(6000);
ds_restricao_mat_w	varchar(1000);
ds_restricao_proc_w	varchar(1000);
ds_tab_extra_mat_w	varchar(200);
ds_tab_extra_proc_w	varchar(200);
ds_select_w		varchar(32000);
cursor_w		sql_pck.t_cursor;

tb_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_proc_w	pls_util_cta_pck.t_number_table;
tb_cd_procedimento_w	pls_util_cta_pck.t_number_table;
tb_ie_origem_proced_w	pls_util_cta_pck.t_number_table;
tb_seq_prestador_pag_w	pls_util_cta_pck.t_number_table;
tb_ds_prestador_pag_w	pls_util_cta_pck.t_varchar2_table_255;
tb_ds_procedimento_w	pls_util_cta_pck.t_varchar2_table_255;
tb_seq_conta_mat_w	pls_util_cta_pck.t_number_table;
tb_seq_material_w	pls_util_cta_pck.t_number_table;
tb_ds_material_w	pls_util_cta_pck.t_varchar2_table_255;
tb_ie_tipo_item_w	pls_util_cta_pck.t_varchar2_table_1;
tb_vl_liberado_w	pls_util_cta_pck.t_number_table;
tb_seq_pp_evento_w	pls_util_cta_pck.t_number_table;
tb_ds_pp_evento_w	pls_util_cta_pck.t_varchar2_table_255;

-- para apagar todos os da transacao atual mais os que por algum motivo ficaram "perdidos" no tempo a mais de uma semana

c01 CURSOR(	nr_id_transacao_pc	pls_pp_busca_inconsist.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia
	from	pls_pp_busca_inconsist a
	where 	a.nr_id_transacao = nr_id_transacao_pc
	
union all

	SELECT	a.nr_sequencia
	from	pls_pp_busca_inconsist a
	where 	a.dt_atualizacao_nrec <= (clock_timestamp() - interval '7 days');
	

BEGIN

-- se for nulo gera uma transacao, senao usa a passada de parametro

if (coalesce(nr_id_transacao_p::text, '') = '') then
	select	nextval('pls_id_transacao_pp_bu_inc_seq')
	into STRICT	nr_id_transacao_p
	;
end if;

if (ie_opcao_p in ('T','D')) then
	-- apaga todos os registros sempre (por seguranca)

	open c01(nr_id_transacao_p);
	loop
		fetch c01 bulk collect into tb_sequencia_w
		limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_sequencia_w.count = 0;
		
		forall i in tb_sequencia_w.first..tb_sequencia_w.last
			delete from pls_pp_busca_inconsist
			where	nr_sequencia = tb_sequencia_w(i);
		commit;
	end loop;
	close c01;
end if;

if (ie_opcao_p = 'T') then
	-- obtem todas as restricoes do comando SQL

	SELECT * FROM pls_pp_lote_pagamento_pck.obter_restricao_inconsistencia(	ie_tipo_data_p, dt_inicio_p, dt_fim_p, ie_sem_evento_vinc_p, ie_sem_lote_pagamento_p, nr_seq_prestador_p, nr_seq_evento_p, nr_seq_tipo_prestador_p, valor_bind_w) INTO STRICT _ora2pg_r;
 ds_tab_extra_mat_w := _ora2pg_r.ds_tab_extra_mat_p; ds_tab_extra_proc_w := _ora2pg_r.ds_tab_extra_proc_p; ds_restricao_mat_w := _ora2pg_r.ds_restricao_mat_p; ds_restricao_proc_w := _ora2pg_r.ds_restricao_proc_p; valor_bind_w := _ora2pg_r.valor_bind_p;

	ds_select_w :=
		'select	a.nr_seq_conta,' || pls_util_pck.enter_w ||
		'	a.nr_seq_conta_proc,' || pls_util_pck.enter_w ||
		'	proc.cd_procedimento,' || pls_util_pck.enter_w ||
		'	proc.ie_origem_proced,' || pls_util_pck.enter_w ||
		'	a.nr_seq_prestador_pgto,' || pls_util_pck.enter_w ||
		'	substr(pls_obter_dados_prestador(a.nr_seq_prestador_pgto, ''N''), 1, 255) ds_prestador_pagamento,' || pls_util_pck.enter_w ||
		'	substr(p.ds_procedimento, 1, 255) ds_procedimento,' || pls_util_pck.enter_w ||
		'	null nr_seq_conta_mat,' || pls_util_pck.enter_w ||
		'	null nr_seq_material,' || pls_util_pck.enter_w ||
		'	null ds_material,' || pls_util_pck.enter_w ||
		'	''P'' ie_tipo_item,' || pls_util_pck.enter_w ||
		'	nvl(a.vl_liberado, 0) vl_liberado,' || pls_util_pck.enter_w ||
		'	a.nr_seq_pp_evento,'  || pls_util_pck.enter_w ||
		'	substr(pls_obter_desc_evento(a.nr_seq_pp_evento),1,225) ds_evento_pagamento' || pls_util_pck.enter_w ||
		'from	pls_prestador pp, ' || pls_util_pck.enter_w ||
		'	pls_conta_medica_resumo a,' || pls_util_pck.enter_w ||
		'	pls_conta_proc proc,' || pls_util_pck.enter_w ||
		'	pls_conta conta,' || pls_util_pck.enter_w ||
		'	procedimento p' || pls_util_pck.enter_w ||
			ds_tab_extra_proc_w ||
		'where	a.ie_tipo_item in (''C'', ''M'', ''P'', ''R'')' || pls_util_pck.enter_w ||
		'and	a.ie_situacao = ''A''' || pls_util_pck.enter_w ||
		'and	proc.nr_sequencia = a.nr_seq_conta_proc' || pls_util_pck.enter_w ||
		'and	conta.nr_sequencia = proc.nr_seq_conta' || pls_util_pck.enter_w ||
		'and	conta.ie_status = ''F'' ' || pls_util_pck.enter_w ||
		'and	p.cd_procedimento = proc.cd_procedimento' || pls_util_pck.enter_w ||
		'and	p.ie_origem_proced = proc.ie_origem_proced' || pls_util_pck.enter_w ||
		'and	a.nr_seq_prestador_pgto = pp.nr_sequencia ' || pls_util_pck.enter_w ||
			ds_restricao_w ||
			ds_restricao_proc_w ||
		'and   	not exists	(select	1 ' || pls_util_pck.enter_w ||
					'from	pls_ajuste_fatura_conta fatu_conta ' || pls_util_pck.enter_w ||
					'where	fatu_conta.nr_seq_conta	= a.nr_seq_conta' || pls_util_pck.enter_w ||
					'and	fatu_conta.ie_status	= ''N'') ' || pls_util_pck.enter_w ||
		'union all' || pls_util_pck.enter_w ||
		'select	a.nr_seq_conta,' || pls_util_pck.enter_w ||
		'	null nr_seq_conta_proc,' || pls_util_pck.enter_w ||
		'	null cd_procedimento,' || pls_util_pck.enter_w ||
		'	null ie_origem_proced,' || pls_util_pck.enter_w ||
		'	a.nr_seq_prestador_pgto,' || pls_util_pck.enter_w ||
		'	substr(pls_obter_dados_prestador(a.nr_seq_prestador_pgto, ''N''), 1, 255) ds_prestador_pagamento,' || pls_util_pck.enter_w ||
		'	null ds_procedimento,' || pls_util_pck.enter_w ||
		'	a.nr_seq_conta_mat,' || pls_util_pck.enter_w ||
		'	mat.nr_seq_material,' || pls_util_pck.enter_w ||
		'	substr(obter_descricao_padrao(''PLS_MATERIAL'', ''DS_MATERIAL'', mat.nr_seq_material), 1, 255) ds_material,' || pls_util_pck.enter_w ||
		'	''M'' ie_tipo_item,' || pls_util_pck.enter_w ||
		'	nvl(a.vl_liberado, 0) vl_liberado,' || pls_util_pck.enter_w ||
		'	a.nr_seq_pp_evento,'  || pls_util_pck.enter_w ||
		'	substr(pls_obter_desc_evento(a.nr_seq_pp_evento),1,225) ds_evento_pagamento' || pls_util_pck.enter_w ||
		'from	pls_prestador pp, ' || pls_util_pck.enter_w ||
		'	pls_conta_medica_resumo a,' || pls_util_pck.enter_w ||
		'	pls_conta_mat mat,' || pls_util_pck.enter_w ||
		'	pls_conta conta' || pls_util_pck.enter_w ||
			ds_tab_extra_mat_w ||
		'where	a.ie_tipo_item in (''C'', ''M'', ''P'', ''R'')' || pls_util_pck.enter_w ||
		'and	a.ie_situacao = ''A''' || pls_util_pck.enter_w ||
		'and	mat.nr_sequencia = a.nr_seq_conta_mat' || pls_util_pck.enter_w ||
		'and	conta.nr_sequencia = mat.nr_seq_conta' || pls_util_pck.enter_w ||
		'and	conta.ie_status = ''F'' ' || pls_util_pck.enter_w ||
		'and	a.nr_seq_prestador_pgto = pp.nr_sequencia ' || pls_util_pck.enter_w ||
			ds_restricao_w ||
			ds_restricao_mat_w ||
		'and   	not exists	(select	1 ' || pls_util_pck.enter_w ||
					'from	pls_ajuste_fatura_conta fatu_conta ' || pls_util_pck.enter_w ||
					'where	fatu_conta.nr_seq_conta	= a.nr_seq_conta' || pls_util_pck.enter_w ||
					'and	fatu_conta.ie_status	= ''N'') ' || pls_util_pck.enter_w;
		
		-- executa o comando sql com os respectivos binds

		valor_bind_w := sql_pck.executa_sql_cursor(ds_select_w, valor_bind_w);

		loop
			fetch cursor_w bulk collect into 	tb_seq_conta_w, tb_seq_conta_proc_w, tb_cd_procedimento_w,
								tb_ie_origem_proced_w, tb_seq_prestador_pag_w, tb_ds_prestador_pag_w,
								tb_ds_procedimento_w, tb_seq_conta_mat_w, tb_seq_material_w,
								tb_ds_material_w, tb_ie_tipo_item_w, tb_vl_liberado_w, tb_seq_pp_evento_w,
								tb_ds_pp_evento_w
			limit pls_util_pck.qt_registro_transacao_w;
			exit when tb_seq_conta_w.count = 0;
			
				forall i in tb_seq_conta_w.first..tb_seq_conta_w.last
					insert 	into pls_pp_busca_inconsist(
						nr_sequencia, cd_procedimento, ds_material,
						ds_prestador_pagamento, ds_procedimento, dt_atualizacao,
						dt_atualizacao_nrec, ie_origem_proced, nm_usuario,
						nm_usuario_nrec, nr_id_transacao, nr_seq_conta,
						nr_seq_conta_mat, nr_seq_conta_proc, nr_seq_material,
						nr_seq_prest_pag, ie_tipo_item, vl_item, nr_seq_pp_evento, ds_pp_evento
					) values (	
						nextval('pls_pp_busca_inconsist_seq'), tb_cd_procedimento_w(i), tb_ds_material_w(i),
						tb_ds_prestador_pag_w(i), tb_ds_procedimento_w(i), clock_timestamp(),
						clock_timestamp(), tb_ie_origem_proced_w(i), nm_usuario_p,
						nm_usuario_p, nr_id_transacao_p, tb_seq_conta_w(i),
						tb_seq_conta_mat_w(i), tb_seq_conta_proc_w(i), tb_seq_material_w(i),
						tb_seq_prestador_pag_w(i), tb_ie_tipo_item_w(i), tb_vl_liberado_w(i),
						tb_seq_pp_evento_w(i), tb_ds_pp_evento_w(i)
					);
				commit;
		end loop;
		close cursor_w;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.alimenta_busca_inconsistencia ( ie_tipo_data_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_sem_evento_vinc_p text, ie_sem_lote_pagamento_p text, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_p INOUT pls_pp_busca_inconsist.nr_id_transacao%type, ie_opcao_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_tipo_prestador_p pls_tipo_prestador.nr_sequencia%type) FROM PUBLIC;
