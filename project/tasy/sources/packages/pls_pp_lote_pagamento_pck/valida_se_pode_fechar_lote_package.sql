-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_fechar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


cd_estabelecimento_w	pls_pp_lote.cd_estabelecimento%type;
nm_usuario_envio_w	pls_pp_lote.nm_usuario_fechamento%type;
dt_referencia_inicio_w	pls_pp_lote.dt_referencia_inicio%type;
dt_referencia_fim_w	pls_pp_lote.dt_referencia_fim%type;
ie_status_w		pls_pp_lote.ie_status%type;
nr_seq_lote_franq_w	pls_franq_pag.nr_sequencia%type;
nr_seq_regra_periodo_w	pls_pp_lote.nr_seq_regra_periodo%type;
qt_registros_w		integer;
ds_mensagem_w		varchar(255);

c01 CURSOR(	nr_seq_regra_periodo_pc		pls_pp_lote.nr_seq_regra_periodo%type,
		dt_referencia_inicio_pc		pls_pp_lote.dt_referencia_inicio%type,
		dt_referencia_fim_pc		pls_pp_lote.dt_referencia_fim%type) FOR
	SELECT	a.nr_seq_regra
	from	pls_regra_franq_pag_per a
	where	a.nr_seq_pp_periodo = nr_seq_regra_periodo_pc
	and	exists (	SELECT	1
			from	pls_regra_franq_pag x
			where	x.nr_sequencia = a.nr_seq_regra
			and	dt_referencia_inicio_pc between x.dt_inicio_franquia and x.dt_fim_franquia
			
union all

			select	1
			from	pls_regra_franq_pag y
			where	y.nr_sequencia = a.nr_seq_regra
			and	dt_referencia_fim_pc between y.dt_inicio_franquia and y.dt_fim_franquia);

BEGIN

begin
	-- tenta buscar os dados do lote de pagamento

	select	a.cd_estabelecimento,
		a.nm_usuario_fechamento,
		a.dt_referencia_inicio,
		a.dt_referencia_fim,
		a.ie_status,
		a.nr_seq_regra_periodo
	into STRICT	cd_estabelecimento_w,
		nm_usuario_envio_w,
		dt_referencia_inicio_w,
		dt_referencia_fim_w,
		ie_status_w,
		nr_seq_regra_periodo_w
	from	pls_pp_lote a
	where	a.nr_sequencia	= nr_seq_lote_p;
	
exception
	when others then
	-- Lote de pagamento de producao medica nao existe

	CALL wheb_mensagem_pck.exibir_mensagem_abort(388121, 'NR_SEQ_LOTE_PP_P=' || nr_seq_lote_p);
end;
	
-- verificacao de seguranca para o caso do estabelecimento do usuario seja diferente do estabelecimento do SIP

if (cd_estabelecimento_p <> cd_estabelecimento_w)	then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(388364, 'CD_ESTABELECIMENTO_P=' || to_char(cd_estabelecimento_p) || ';CD_ESTABELECIMENTO_CADASTRO_LOTE=' || to_char(cd_estabelecimento_w));
end if;

-- se o lote ja estiver fechado (Definitivo)

if (ie_status_w = 'D') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(455354);
end if;

-- se o lote estiver com erro tem que ser defeito primeiro

if (ie_status_w = 'E') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(410459);
end if;

select	count(1)
into STRICT	qt_registros_w
from	pls_franq_pag
where	ie_funcao_pagamento = '2'
and	nr_seq_pp_lote_pgto = nr_seq_lote_p;

-- se existir lote de franquia, verifica se ele ja esta liberado

if (qt_registros_w > 0) then

	select	max(nr_sequencia)
	into STRICT	nr_seq_lote_franq_w
	from	pls_franq_pag
	where	ie_funcao_pagamento = '2'
	and	nr_seq_pp_lote_pgto = nr_seq_lote_p
	and	coalesce(dt_fechamento_lote::text, '') = '';

	-- verifica se tem o lote gerado porem nao esta liberado

	if (nr_seq_lote_franq_w IS NOT NULL AND nr_seq_lote_franq_w::text <> '') then

		-- Nao e possivel fechar o lote de pagamento, existe um lote de franquia vinculado a este lote de pagamento

		-- que nao esta fechado. Lote: #@NR_SEQ_LOTE_P#@

		CALL wheb_mensagem_pck.exibir_mensagem_abort(460640, 'NR_SEQ_LOTE_P=' || to_char(nr_seq_lote_franq_w));	
	end if;
-- se nao existir verifica se existe alguma regra para o periodo do lote de pagamento

-- verifica se existe uma regra de franquia para o periodo do lote de pagamento

elsif (nr_seq_regra_periodo_w IS NOT NULL AND nr_seq_regra_periodo_w::text <> '') then
	-- retorna todas as regras que tenham do periodo informado

	for r_c01_w in c01(nr_seq_regra_periodo_w, dt_referencia_inicio_w, dt_referencia_fim_w) loop
	
		ds_mensagem_w := pls_util_pck.concatena_string(ds_mensagem_w, r_c01_w.nr_seq_regra, ', ', 255);
	end loop;

	-- se retornou algo no cursor para a geracao do lote

	if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then
	
		CALL wheb_mensagem_pck.exibir_mensagem_abort(686387, 'DS_MENSAGEM_P=' || ds_mensagem_w);
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_fechar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
