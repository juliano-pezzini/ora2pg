-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_des_gerar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


cd_estabelecimento_w	pls_pp_lote.cd_estabelecimento%type;
nr_seq_lotes_w		varchar(255);
nr_seq_conta_com_rec_w	pls_conta.nr_sequencia%type;
dt_mes_competencia_w	pls_pp_lote.dt_mes_competencia%type;
ie_lote_gerado_w	varchar(255);
qt_nota_fiscal_w	integer;
qt_anexo_w		integer;


BEGIN

-- tenta buscar os dados do lote de pagamento

select	max(a.cd_estabelecimento),
	max(a.dt_mes_competencia)
into STRICT	cd_estabelecimento_w,
	dt_mes_competencia_w
from	pls_pp_lote a
where	a.nr_sequencia	= nr_seq_lote_p;

if (coalesce(cd_estabelecimento_w::text, '') = '') then
	-- Lote de pagamento de producao medica nao existe

	CALL wheb_mensagem_pck.exibir_mensagem_abort(388121, 'NR_SEQ_LOTE_PP_P=' || nr_seq_lote_p);
end if;

ie_lote_gerado_w	:= obter_se_lote_contabil_gerado(41, dt_mes_competencia_w);

if (ie_lote_gerado_w = 'S') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(673786);
end if;

-- verificacao de seguranca para o caso do estabelecimento do usuario seja diferente do estabelecimento do SIP

if (cd_estabelecimento_p <> cd_estabelecimento_w)	then
	-- O estabelecimento que esta tentando desfazer a geracao do lote de pagamento (#@CD_ESTABELECIMENTO_P#@) 

	-- e diferente do que foi cadastrado (#@CD_ESTABELECIMENTO_CADASTRO_LOTE#@)

	CALL wheb_mensagem_pck.exibir_mensagem_abort(389047, 'CD_ESTABELECIMENTO_P=' || to_char(cd_estabelecimento_p) ||
								';CD_ESTABELECIMENTO_CADASTRO_LOTE=' || to_char(cd_estabelecimento_w));
end if;

-- levanta se existe alguma conta do lote com um recurso de glosa nao cancelado

select	max(a.nr_seq_conta)
into STRICT	nr_seq_conta_com_rec_w
from	pls_conta_medica_resumo	a
where	a.nr_seq_pp_lote	= nr_seq_lote_p
and	a.ie_situacao		= 'A'
and	exists (	SELECT	1
		from	pls_rec_glosa_conta	x
		where	x.nr_seq_conta		= a.nr_seq_conta
		and	x.ie_status		in ('1','2'));
		
if (nr_seq_conta_com_rec_w IS NOT NULL AND nr_seq_conta_com_rec_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(991405, 'NR_SEQ_CONTA='||to_char(nr_seq_conta_com_rec_w));
end if;

-- verifica se existe algum registro de apropriacao gerado neste lote que tenha entrado em algum lote posterior ou 

-- se entrou algum gerado em outro lote que tenha sido vinculado tambem a este lote

nr_seq_lotes_w := pls_pp_apropriacao_pck.obter_pgto_aprop_posteriores(nr_seq_lote_p);

-- se algum dos dois selects acima retornou registro e pq os valores de apropriacao que entraram neste lote, entraram em 

-- um lote gerado posteriormente

if (nr_seq_lotes_w IS NOT NULL AND nr_seq_lotes_w::text <> '') then
	-- Nao e possivel desfazer o lote de pagamento pois os registros de apropriacao vinculados a este ja entraram no(s) lote(s) de pagamento: #@NR_SEQ_LOTE_P#@

	CALL wheb_mensagem_pck.exibir_mensagem_abort(451117, 'NR_SEQ_LOTE_P=' || nr_seq_lotes_w);
end if;

-- verifica se existe alguma regra com limite de valor originaria deste lote que ja tenha entrado em outro lote, ou que tenha algum lancamento neste lote

nr_seq_lotes_w := pls_pp_lanc_programado_pck.obter_lotes_lanc_prog_post(nr_seq_lote_p);

-- se retornou algum lote aqui entao nao pode desfazer o lote

if (nr_seq_lotes_w IS NOT NULL AND nr_seq_lotes_w::text <> '') then
	-- Nao e possivel desfazer o lote de pagamento, existem regras de eventos com valor limite que ja entraram no(s) lote(s) de pagamento: #@NR_SEQ_LOTE_P#@

	CALL wheb_mensagem_pck.exibir_mensagem_abort(451154, 'NR_SEQ_LOTE_P=' || nr_seq_lotes_w);
end if;

select	max(to_char(nr_sequencia))
into STRICT	nr_seq_lotes_w
from	pls_franq_pag
where	ie_funcao_pagamento = '2'
and	nr_seq_pp_lote_pgto = nr_seq_lote_p
and	(dt_geracao_lote IS NOT NULL AND dt_geracao_lote::text <> '');

if (nr_seq_lotes_w IS NOT NULL AND nr_seq_lotes_w::text <> '') then
	-- Nao e possivel desfazer o lote de pagamento pois existe lote de franquia gerado para este lote de pagamento. Lote: #@NR_SEQ_LOTE_P#@

	CALL wheb_mensagem_pck.exibir_mensagem_abort(460643, 'NR_SEQ_LOTE_P=' || nr_seq_lotes_w);
end if;

select	count(1)
into STRICT	qt_nota_fiscal_w
from	pls_pp_prestador
where	nr_seq_lote	= nr_seq_lote_p
and	(nr_nota_fiscal IS NOT NULL AND nr_nota_fiscal::text <> '');

if (qt_nota_fiscal_w = 0) then
	select	count(1)
	into STRICT	qt_nota_fiscal_w
	from	pls_pp_prest_nota
	where	nr_seq_lote	= nr_seq_lote_p;
end if;

if (qt_nota_fiscal_w > 0) then
	-- Nao e possivel desfazer o lote de pagamento pois existe nota fiscal vinculada neste lote de pagamento.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1070032);
end if;

select	count(1)
into STRICT	qt_anexo_w
from	pls_pp_prest_anexo
where	nr_seq_lote	= nr_seq_lote_p;

if (qt_anexo_w > 0) then
	-- Nao e possivel desfazer o lote de pagamento pois existe anexo no lote de pagamento.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1070035);
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_des_gerar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
