-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_des_fechar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


cd_estabelecimento_w	pls_pp_lote.cd_estabelecimento%type;
qt_registro_w		integer;
ds_estabelecimento_w	varchar(255);
nr_seq_pp_lote_w	pls_pp_lote.nr_sequencia%type;
dt_mes_competencia_w	pls_pp_lote.dt_mes_competencia%type;
ie_lote_gerado_w	varchar(255);


BEGIN

-- tenta buscar os dados do lote de pagamento

select	max(a.cd_estabelecimento),
	max(a.dt_mes_competencia)
into STRICT	cd_estabelecimento_w,
	dt_mes_competencia_w
from	pls_pp_lote a
where	a.nr_sequencia	= nr_seq_lote_p;

if (coalesce(cd_estabelecimento_w::text, '') = '') then
	-- Lote de pagamento de producao medica nao existe

	CALL wheb_mensagem_pck.exibir_mensagem_abort(388121, 'NR_SEQ_LOTE_PP_P=' || nr_seq_lote_p);
end if;

ie_lote_gerado_w	:= obter_se_lote_contabil_gerado(41, dt_mes_competencia_w);

if (ie_lote_gerado_w = 'S') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(673786);
end if;

-- verificacao de seguranca para o caso do estabelecimento do usuario seja diferente do estabelecimento do SIP

if (cd_estabelecimento_p <> cd_estabelecimento_w)	then

	-- O estabelecimento que esta tentando desfazer a geracao do lote de pagamento (#@CD_ESTABELECIMENTO_P#@) 

	-- e diferente do que foi cadastrado (#@CD_ESTABELECIMENTO_CADASTRO_LOTE#@)

	CALL wheb_mensagem_pck.exibir_mensagem_abort(389047, 'CD_ESTABELECIMENTO_P=' || to_char(cd_estabelecimento_p) ||
								';CD_ESTABELECIMENTO_CADASTRO_LOTE=' || to_char(cd_estabelecimento_w));
end if;

-- verifica todos os registros de base acumulada que tiveram origem neste lote e estao em uma base de calculo

-- de um registro que nao seja deste lote, ou seja, fazem parte da base acumulada de outro lote gerado posteriormente

select	max(d.nr_seq_lote)
into STRICT	nr_seq_pp_lote_w
from	pls_pp_base_atual_trib a,
	pls_pp_base_acum_trib b,
	pls_pp_ba_acu_trib_pess c,
	pls_pp_valor_trib_pessoa d
where	a.nr_seq_lote = nr_seq_lote_p
and	b.nr_seq_item_base_atual = a.nr_sequencia
and	c.nr_seq_base_acumulada = b.nr_sequencia
and	d.nr_sequencia = c.nr_seq_trib_pessoa
and	d.nr_seq_lote != nr_seq_lote_p  LIMIT 1;

-- se a base atual deste lote ja estiver em alguma base acumulada de outro lote de pagamento nao pode deixar desfazer

if (nr_seq_pp_lote_w > 0) then
	select	max(obter_nome_estabelecimento(lp.cd_estabelecimento))
	into STRICT	ds_estabelecimento_w
	from	pls_pp_lote	lp
	where	lp.nr_sequencia	= nr_seq_pp_lote_w;

	-- Nao e possivel desfazer o lote de pagamento, existem valores de tributos que estao sendo utilizados em lotes posteriores (ex: lote '||nr_seq_pp_lote_w||', estabelecimento: '||ds_estabelecimento_w||') a este como base de calculo para outros tributos.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1046592, 'NR_SEQ_PP_LOTE=' || to_char(nr_seq_pp_lote_w) || ';DS_ESTABELECIMENTO=' || ds_estabelecimento_w);
end if;

-- verifica todos os itens de pagamento que geraram apropriacao, depois faz um exists para ver se estes registros

-- ja entraram em algum lote

select	count(1),
	max(	select	x.nr_seq_lote
		from	pls_pp_item_lote x
		where	x.nr_seq_pp_it_aprop = b.nr_sequencia) nr_seq_pp_lote
into STRICT	qt_registro_w,
	nr_seq_pp_lote_w
from	pls_pp_item_lote a,
	pls_pp_item_apropriacao b
where	a.nr_seq_lote = nr_seq_lote_p
and	b.nr_seq_it_lote_orig = a.nr_sequencia
and 	exists (	SELECT	1
		from	pls_pp_item_lote x
		where	x.nr_seq_pp_it_aprop = b.nr_sequencia)  LIMIT 1;

-- se algum registro de apropriacao entrou em um outro lote de pagamento, nao pode desfazer o lote

if (qt_registro_w > 0) then
	select	max(obter_nome_estabelecimento(lp.cd_estabelecimento))
	into STRICT	ds_estabelecimento_w
	from	pls_pp_lote	lp
	where	lp.nr_sequencia	= nr_seq_pp_lote_w;
	
	-- Nao e possivel desfazer o fechamento do lote pois existem registros de apropriacao que foram vinculados a lotes posteriores (ex: lote '||nr_seq_pp_lote_w||', estabelecimento: '||ds_estabelecimento_w).

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1046593, 'NR_SEQ_PP_LOTE=' || to_char(nr_seq_pp_lote_w) || ';DS_ESTABELECIMENTO=' || ds_estabelecimento_w);
end if;

select	count(1)
into STRICT	qt_registro_w
from	pls_pp_lr_lote
where	dt_mes_competencia = current_setting('pls_pp_lote_pagamento_pck.dt_mes_comp_lote_w')::pls_pp_lote.dt_mes_competencia%type
and	(dt_geracao IS NOT NULL AND dt_geracao::text <> '');

-- se o lote de retencao ja foi gerado nao deixa desfazer fechamento do lote de pagamento

CALL pls_pp_lote_pagamento_pck.valida_lote_retencao_ja_gerado(	current_setting('pls_pp_lote_pagamento_pck.dt_mes_comp_lote_w')::pls_pp_lote.dt_mes_competencia%type, 457206);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lote_pagamento_pck.valida_se_pode_des_fechar_lote ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
