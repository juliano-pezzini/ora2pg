-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_desc_const_disc_pck.gera_valor_eventos_desc_disc (nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_referencia_inicio_pc pls_pp_lote.dt_referencia_inicio%type, dt_referencia_fim_pc pls_pp_lote.dt_referencia_fim%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Ira gerar os valores em si para os eventos dos prestadores, conforme existir descontos na discussao 
--------------------------------------------------------------------------------------------------------------------------------- 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
tb_nr_seq_desc_disc_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_evento_w	pls_util_cta_pck.t_number_table;
tb_vl_desc_disc_w	pls_util_cta_pck.t_number_table;

 
c_descontos CURSOR(	nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type, 
			dt_inicio_ref_pc	pls_pp_lote.dt_referencia_inicio%type, 
			dt_fim_ref_pc		pls_pp_lote.dt_referencia_fim%type) FOR 
	SELECT	b.nr_sequencia nr_seq_desc_disc, 
		b.nr_seq_prestador, 
		a.nr_seq_evento, 
		b.vl_movimento *(-1) vl_desc_disc 
	from	pls_pp_lote_prest_event		a, 
		pls_discussao_evento_movto	b 
	where	b.nr_seq_prestador		= a.nr_seq_prestador 
	and	b.nr_seq_evento			= a.nr_seq_evento 
	and	a.nr_seq_lote			= nr_seq_lote_pc 
	and	b.dt_movimento			between dt_inicio_ref_pc and dt_fim_ref_pc	 
	and	coalesce(b.nr_seq_evento_movto::text, '') = ''  -- Não incluir registros ja utilizado no pagamento antigo 
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') 
	-- Não incluir registros válidos ja utilizados no pagamento novo 
	and	not exists (	SELECT	1 
				from	pls_pp_item_lote	x 
				where	x.nr_seq_prestador	= a.nr_seq_prestador 
				and	x.nr_seq_disc_evento	= b.nr_sequencia 
				and	x.ie_cancelado		= 'N');

BEGIN
 
-- Somente executa se possuir lote informado 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
 
	-- Abre o cursor com os descontos 
	open c_descontos(nr_seq_lote_p, dt_referencia_inicio_pc, dt_referencia_fim_pc);
	-- navega pelos dados 
	loop 
	fetch c_descontos bulk collect into	tb_nr_seq_desc_disc_w, 
						tb_nr_seq_prest_w, 
						tb_nr_seq_evento_w, 
						tb_vl_desc_disc_w limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_desc_disc_w.count = 0;
	 
		SELECT * FROM pls_pp_desc_const_disc_pck.grava_valor_eventos_desc_disc(	nr_seq_lote_p, tb_nr_seq_evento_w, tb_nr_seq_prest_w, tb_vl_desc_disc_w, tb_nr_seq_desc_disc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_nr_seq_evento_w := _ora2pg_r.tb_nr_seq_evento_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_vl_desc_disc_w := _ora2pg_r.tb_vl_desc_disc_p; tb_nr_seq_desc_disc_w := _ora2pg_r.tb_tb_nr_seq_desc_disc_p;
	end loop; -- fim navegar pelos dados 
	 
	-- se o cursor estiver aberto, fecha 
	if (c_descontos%isopen) then
	 
		close c_descontos;
	end if;
end if;
 
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_desc_const_disc_pck.gera_valor_eventos_desc_disc (nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_referencia_inicio_pc pls_pp_lote.dt_referencia_inicio%type, dt_referencia_fim_pc pls_pp_lote.dt_referencia_fim%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
