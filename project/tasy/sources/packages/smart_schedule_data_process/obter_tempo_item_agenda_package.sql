-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION smart_schedule_data_process.obter_tempo_item_agenda (ie_consulta_p text) RETURNS bigint AS $body$
DECLARE

        qt_min_item_w bigint;


BEGIN
        IF (NOT current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table[nr_seq_agenda_item_pp].exists (cd_agenda_pp)) OR
          --
           ((current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%coalesce(TYPE::text, '') = '') AND (current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).nr_min_item_agenda = 0)) OR
          --
           ((current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%(TYPE IS NOT NULL AND TYPE::text <> '')) AND (NOT current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).info_tempo_medico_w.exists(current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%TYPE))) THEN
          IF (ie_consulta_p = 'S') THEN
            --qt_min_item_w := nvl(Ageint_Obter_Dur_Classif (ie_classif_agenda_w, nvl(info_agenda_w(cd_agenda_pp).cd_estabelecimento,cd_estabelecimento_p), cd_medico_preco_w, hr_agenda_pp),0);
            qt_min_item_w := coalesce(obter_duracao_classif_agecons(cd_agenda_pp,
                                                               hr_agenda_pp,
                                                               current_setting('smart_schedule_data_process.nr_seq_ageint_w')::agenda_integrada.nr_sequencia%TYPE,
                                                               nr_seq_agenda_item_pp,
                                                               current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%TYPE,
                                                               current_setting('smart_schedule_data_process.nm_usuario_ativo_w')::usuario.nm_usuario%TYPE,
                                                               current_setting('smart_schedule_data_process.info_agenda_w')::info_agenda_table[cd_agenda_pp].cd_estabelecimento),
                                 0);
          ELSE
            obter_tempo_padrao_ageint(current_setting('smart_schedule_data_process.agenda_integrada_item_w')::agenda_integrada_item_table[nr_seq_agenda_item_pp].nr_seq_proc_interno,
                                      NULL,
                                      NULL,
                                      current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%TYPE,
                                      cd_agenda_pp,
                                      current_setting('smart_schedule_data_process.cd_pessoa_fisica_ageint_w')::agenda_integrada.cd_pessoa_fisica%TYPE,
                                      qt_min_item_w,
                                      current_setting('smart_schedule_data_process.agenda_integrada_item_w')::agenda_integrada_item_table[nr_seq_agenda_item_pp].ie_lado,
                                      coalesce(current_setting('smart_schedule_data_process.agenda_integrada_item_w')::agenda_integrada_item_table[nr_seq_agenda_item_pp].cd_conv_item_w, current_setting('smart_schedule_data_process.cd_convenio_ageint_w')::agenda_integrada.cd_convenio),
                                      coalesce(current_setting('smart_schedule_data_process.agenda_integrada_item_w')::agenda_integrada_item_table[nr_seq_agenda_item_pp].cd_categ_item_w, current_setting('smart_schedule_data_process.cd_categoria_ageint_w')::agenda_integrada.cd_categoria),
                                      coalesce(current_setting('smart_schedule_data_process.agenda_integrada_item_w')::agenda_integrada_item_table[nr_seq_agenda_item_pp].cd_plano_item_w, current_setting('smart_schedule_data_process.cd_plano_ageint_w')::agenda_integrada.cd_plano),
                                      current_setting('smart_schedule_data_process.nr_seq_agenda_w')::agenda_paciente.nr_sequencia%type,
                                      NULL);
          END IF;
          qt_min_item_w := coalesce(qt_min_item_w, 0);
          IF (current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%(TYPE IS NOT NULL AND TYPE::text <> '')) THEN
            current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).info_tempo_medico_w(current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%TYPE).nr_minuto_item := qt_min_item_w;
          ELSE
            current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).nr_min_item_agenda := qt_min_item_w;
          END IF;
        END IF;
        qt_min_item_w := 0;
        IF (current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%(TYPE IS NOT NULL AND TYPE::text <> '')) THEN
          qt_min_item_w := current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).info_tempo_medico_w(current_setting('smart_schedule_data_process.cd_medico_preco_w')::pessoa_fisica.cd_pessoa_fisica%TYPE).nr_minuto_item;
        ELSE
          qt_min_item_w := current_setting('smart_schedule_data_process.info_tempo_item_w')::info_tempo_item_table(nr_seq_agenda_item_pp)(cd_agenda_pp).nr_min_item_agenda;
        END IF;

        RETURN qt_min_item_w;

      END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION smart_schedule_data_process.obter_tempo_item_agenda (ie_consulta_p text) FROM PUBLIC;
