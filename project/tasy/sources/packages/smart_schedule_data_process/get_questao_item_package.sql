-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


  /*-------------------------------------------------------------------
  -- Objeto: TWS_CREATE_SCHEDULE
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Cria registra na agenda Integrada.
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Maxwell da Silva Oliveira
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- Maxwell     16/11/20   Criacao                                     */
  PROCEDURE tws_create_schedule(cd_pessoa_fisica_p   	VARCHAR2,
                                ds_user_tws_p        	VARCHAR2,
                                cd_convenio_p       	NUMBER,
                                cd_categoria_p       	NUMBER,
                                cd_plano_p           	VARCHAR2,
                                cd_estabelecimento_p 	NUMBER,
                                nr_seq_ageint_p      	OUT NUMBER,
								cd_usuario_convenio_p	IN VARCHAR2 default null,
								dt_validade_carteira_p	IN DATE default null,
								qt_peso_p				IN NUMBER default null,
								qt_altura_cm_p			IN NUMBER default null) IS

    nm_paciente_w   agenda_integrada.nm_paciente%TYPE;
    nr_telefone_w   agenda_integrada.nr_telefone%TYPE;
    dt_nascimento_w agenda_integrada.dt_nascimento%TYPE;
    qt_altura_cm_w  agenda_integrada.qt_altura_cm%TYPE;
    ie_sexo_w       agenda_integrada.ie_sexo%TYPE;
    qt_idade_pac_w  agenda_integrada.qt_idade_pac%TYPE;
    qt_peso_w       agenda_integrada.qt_peso%TYPE;
    nr_seq_status_w agenda_integrada.nr_seq_status%TYPE;
  BEGIN
    nr_seq_ageint_p := agenda_integrada_seq.nextval;
    SELECT MIN(nr_sequencia) INTO nr_seq_status_w FROM agenda_integrada_status WHERE ie_status_tasy = 'EA';

    IF cd_pessoa_fisica_p IS NULL THEN

      SELECT nm_pessoa_fisica,
             nr_ddi_celular || ' ' || nr_ddd_celular || ' ' || nr_telefone_celular AS nr_telefone,
             dt_nascimento,
             qt_altura_cm_p,
             ie_sexo,
             obter_idade(dt_nascimento, SYSDATE, 'A') AS qt_idade_pac,
             qt_peso_p
        INTO nm_paciente_w,
             nr_telefone_w,
             dt_nascimento_w,
             qt_altura_cm_w,
             ie_sexo_w,
             qt_idade_pac_w,
             qt_peso_w
        FROM wsuite_solic_inclusao_pf ws,
             wsuite_usuario           wu
       WHERE ws.nr_sequencia = wu.nr_seq_inclusao_pf
         AND wu.ds_login = ds_user_tws_p;

    ELSE
      SELECT substr(obter_nome_pf(cd_pessoa_fisica_p), 1, 60) AS nm_paciente,
             substr(obter_fone_pac_agenda(cd_pessoa_fisica_p),1,60) AS nr_telefone,
             obter_data_nascto_pf(cd_pessoa_fisica_p) AS dt_nascimento,
             nvl(qt_altura_cm_p,obter_dados_pf(cd_pessoa_fisica_p, 'AL')) AS qt_altura_cm,
             obter_sexo_pf(cd_pessoa_fisica_p, 'C') AS ie_sexo,
             obter_idade_pf(cd_pessoa_fisica_p, SYSDATE, 'A') AS qt_idade_pac,
             nvl(qt_peso_p,obter_dados_pf(cd_pessoa_fisica_p, 'KG')) AS qt_peso_pac
        INTO nm_paciente_w,
             nr_telefone_w,
             dt_nascimento_w,
             qt_altura_cm_w,
             ie_sexo_w,
             qt_idade_pac_w,
             qt_peso_w
        FROM dual;
    END IF;
    INSERT INTO agenda_integrada
      (nr_sequencia,
       dt_atualizacao,
       nm_usuario,
       dt_atualizacao_nrec,
       nm_usuario_nrec,
       dt_inicio_agendamento,
       nr_seq_status,
       cd_estabelecimento,
       cd_convenio,
       cd_categoria,
       cd_plano,
       cd_pessoa_fisica,
       nm_paciente,
       nr_telefone,
       dt_nascimento,
       qt_altura_cm,
       ie_sexo,
       qt_idade_pac,
       qt_peso,
	   ie_agendamento_wsuite,
	   cd_usuario_convenio,
	   dt_validade_carteira)
    VALUES
      (nr_seq_ageint_p,
       SYSDATE,
       ds_user_tws_p,
       SYSDATE,
       ds_user_tws_p,
       SYSDATE,
       nr_seq_status_w,
       cd_estabelecimento_p,
       cd_convenio_p,
       cd_categoria_p,
       cd_plano_p,
       cd_pessoa_fisica_p,
       nm_paciente_w,
       nr_telefone_w,
       dt_nascimento_w,
       qt_altura_cm_w,
       ie_sexo_w,
       qt_idade_pac_w,
       qt_peso_w,
	   'S',
	   cd_usuario_convenio_p,
	   dt_validade_carteira_p);

	   commit;
  END tws_create_schedule;

  /*-------------------------------------------------------------------
  -- Objeto: tws_create_item_schedule
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Cria registra na agenda Integrada Item
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Maxwell da Silva Oliveira
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- Maxwell     16/11/20   Criacao                                     */
  PROCEDURE tws_create_item_schedule(nr_seq_ageint_p       NUMBER,
                                     ds_user_tws_p         VARCHAR2,
                                     ie_tipo_item_p        VARCHAR2,
                                     cd_especialidade_p    NUMBER,
                                     cd_medico_p           VARCHAR2,
                                     nr_seq_proc_interno_p NUMBER,
									 nr_seq_area_atuacao_p NUMBER default null) IS

    nr_sequencia_w 		NUMBER := agenda_integrada_item_seq.nextval;
	IE_CLASSIF_AGENDA_w	agenda_integrada_item.IE_CLASSIF_AGENDA%type;
	cd_estab_ageint_w	agenda_integrada.cd_estabelecimento%type;
  BEGIN
	if (ie_tipo_item_p = 'C') then
		select	cd_estabelecimento
		into	cd_estab_ageint_w
		from	agenda_integrada
		where	nr_sequencia = nr_seq_ageint_p;
		
		select 	max(IE_CLASSIF_AGENDA)
		into	IE_CLASSIF_AGENDA_w	
		from	WSUITE_CONFIG_AGENDAMENTO
		where	nvl(cd_estabelecimento,cd_estab_ageint_w) = cd_estab_ageint_w
		and		ie_aplicacao = 1;
	end if;
  
    INSERT INTO agenda_integrada_item
      (nr_sequencia,
       nr_seq_agenda_int,
       ie_tipo_agendamento,
       dt_atualizacao,
       nm_usuario,
       nr_seq_proc_interno,
       cd_especialidade,
       cd_medico,
	   IE_CLASSIF_AGENDA,
	   nr_seq_area_atuacao)
    VALUES
      (nr_sequencia_w,
       nr_seq_ageint_p,
       ie_tipo_item_p,
       SYSDATE,
       ds_user_tws_p,
       nr_seq_proc_interno_p,
       cd_especialidade_p,
       cd_medico_p,
	   IE_CLASSIF_AGENDA_w,
	   nr_seq_area_atuacao_p);

	   commit;
  END;

  /*-------------------------------------------------------------------
  -- Objeto: tws_generate_time_suggestion
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Gera os dados do array das agendas para a sugestao
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Maxwell da Silva Oliveira
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- Maxwell     16/11/20   Criacao                                     */
  PROCEDURE tws_generate_time_suggestion(nr_seq_ageint_p NUMBER,
                                         dt_inicial_p    DATE,
                                         dt_final_p      DATE,
                                         nr_seq_regiao_p NUMBER,
										 cd_estab_portal_p	in number,
										 vetor_schecule_day_p out refcursortype,
										 vetor_time_schedule_p out refcursortype,
										 vetor_info_schedule_p out refcursortype,
										 vetor_itens_block_p out refcursortype) IS
    qt_dias_w 				NUMBER := trunc(dt_final_p) - trunc(dt_inicial_p);
	cd_estabelecimento_w	agenda_integrada.cd_estabelecimento%type;
	ds_user_tws_w   		agenda_integrada.nm_usuario_nrec%type;
	cd_perfil_w				perfil.cd_perfil%type;
	nr_seq_regiao_w			wsuite_grupo_localizacao.nr_sequencia%type;
	
  BEGIN
  if (qt_dias_w = 0) then
    qt_dias_w := 1;
  end if;

	select 	max(cd_estabelecimento),
			max(nm_usuario_nrec)
	into	cd_estabelecimento_w,
			ds_user_tws_w
	from	agenda_integrada
	where	nr_sequencia = nr_seq_ageint_p;
	
	select 	max(CD_PERFIL)
	into	cd_perfil_w
	from	WSUITE_CONFIG_AGENDAMENTO
	where	nvl(cd_estabelecimento,cd_estabelecimento_w) = (cd_estabelecimento_w);
	
	clean_cache;
	
    ie_agenda_web_w := 'S'; -- Filtro somente agenda para WEB
	wheb_usuario_pck.set_nm_usuario(ds_user_tws_w);
	wheb_usuario_pck.set_cd_perfil(cd_perfil_w);
	wheb_usuario_pck.set_cd_funcao(869);
	wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_w);
	
	nr_seq_regiao_w := nr_seq_regiao_p;
	if nr_seq_regiao_w = 0 then
		nr_seq_regiao_w := null;
	end if;

    gerar_horarios_itens_vetor(nr_seq_ageint_p => nr_seq_ageint_p, dt_inicio_ger_p => dt_inicial_p, qt_dias_p => qt_dias_w, nr_seq_regiao_p => nr_seq_regiao_w, cd_estab_portal_p => cd_estab_portal_p);
	
	vetor_schecule_day_p  := get_vetor_schedule_day;
	vetor_time_schedule_p := get_vetor_time_schedule;
	vetor_info_schedule_p := get_vetor_info_schedule;
	vetor_itens_block_p   := get_vetor_itens_block(nr_seq_ageint_p);
  END;
  
  FUNCTION get_time_schedule RETURN ageint_hor_usuario_rec_table
	PIPELINED IS
  BEGIN
	if agenda_item_w.count > 0 then
		FOR i IN agenda_item_w.first .. agenda_item_w.last LOOP
		  IF (agenda_item_w.EXISTS(i)) and (agenda_item_w(i).horario_agenda_w.count > 0) THEN
			FOR x IN agenda_item_w(i).horario_agenda_w.first .. agenda_item_w(i).horario_agenda_w.last LOOP
			  IF agenda_item_w(i).horario_agenda_w.EXISTS(x) THEN
				FOR z IN agenda_item_w(i).horario_agenda_w(x).first .. agenda_item_w(i).horario_agenda_w(x).last LOOP
				  IF agenda_item_w(i).horario_agenda_w(x).EXISTS(z) THEN
					FOR w IN agenda_item_w(i).horario_agenda_w(x)(z).first .. agenda_item_w(i).horario_agenda_w(x)(z).last LOOP
					  IF agenda_item_w(i).horario_agenda_w(x)(z).EXISTS(w) THEN
						PIPE ROW(agenda_item_w(i).horario_agenda_w(x) (z) (w));
					  END IF;
					END LOOP;
				  END IF;
				END LOOP;
			  END IF;
			END LOOP;
		  END IF;
		END LOOP;
	end if;
  END;
  
  FUNCTION get_schedule_day RETURN agendas_lib_rec_table 
	PIPELINED is 
  BEGIN
	if agenda_item_w.count > 0 then
		FOR i IN agenda_item_w.first .. agenda_item_w.last LOOP
		  IF agenda_item_w.EXISTS(I) THEN
			FOR x IN agenda_item_w(i).vetor_agendas_dias_w.first .. agenda_item_w(i).vetor_agendas_dias_w.last LOOP
			  IF agenda_item_w(i).vetor_agendas_dias_w.EXISTS(x) THEN
				FOR z IN agenda_item_w(i).vetor_agendas_dias_w(x).first .. agenda_item_w(i).vetor_agendas_dias_w(x).last LOOP
				  IF agenda_item_w(i).vetor_agendas_dias_w(X).EXISTS(z) THEN
					PIPE ROW(agenda_item_w(i).vetor_agendas_dias_w(x) (z));
				  END IF;
				END LOOP;
			  END IF;
			END LOOP;
		  END IF;
		END LOOP;
	end if;
  END;
  
  FUNCTION get_info_schedule RETURN info_agenda_rec_table
	PIPELINED is 
  BEGIN
	if info_agenda_w.count > 0 then
		for i in info_agenda_w.first .. info_agenda_w.last loop
		  if (info_agenda_w.exists(i)) then
			info_agenda_w(i).cd_agenda_html := i;
			pipe row(info_agenda_w(i));
		  end if;
		end loop;
	end if;
  END;
  
	
  /*-------------------------------------------------------------------
  -- Objeto: tws_get_existing_schedule
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Validar se o paciente ja possui um agendamento em aberto para o dia
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  08/02/21   Criacao                                     */
  FUNCTION get_vetor_time_schedule RETURN refcursortype
	IS alluserscursor refcursortype;
  BEGIN
	OPEN alluserscursor FOR
		SELECT *
		FROM   TABLE (get_time_schedule);
	RETURN alluserscursor;
  END;
  
  FUNCTION get_vetor_schedule_day RETURN refcursortype
	IS alluserscursor refcursortype;
  BEGIN
	OPEN alluserscursor FOR
		SELECT *
		FROM   TABLE (get_schedule_day);
	RETURN alluserscursor;
	END;
  
  FUNCTION get_vetor_info_schedule RETURN refcursortype
    IS alluserscursor refcursortype;
  BEGIN
	OPEN alluserscursor FOR
		SELECT *
		FROM   TABLE (get_info_schedule);
	RETURN alluserscursor;
  END;
  
  FUNCTION get_vetor_itens_block(nr_seq_ageint_p number) RETURN refcursortype
    IS alluserscursor refcursortype;
  BEGIN
	OPEN alluserscursor FOR
		SELECT *
		FROM   TABLE (get_itens_block(nr_seq_ageint_p));
	RETURN alluserscursor;
  END;

  /*-------------------------------------------------------------------
  -- Objeto: tws_get_existing_schedule
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Validar se o paciente ja possui um agendamento em aberto para o dia
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  08/02/21   Criacao                                     */
  Function tws_get_existing_schedule(cd_pessoa_fisica_p   VARCHAR2,
									 ds_user_tws_p        VARCHAR2,
									 cd_estabelecimento_p NUMBER) RETURN Number IS
    
	nr_seq_status_w 		agenda_integrada.nr_seq_status%TYPE;
	nr_seq_ageint_w 		agenda_integrada.nr_sequencia%type;
  BEGIN
 
    SELECT MIN(nr_sequencia) INTO nr_seq_status_w FROM agenda_integrada_status WHERE ie_status_tasy = 'EA';
	
	Select 	nvl(max(nr_sequencia),0)
	into	nr_seq_ageint_w
	from	AGENDA_INTEGRADA
	where	cd_estabelecimento = cd_estabelecimento_p
	and		(cd_pessoa_fisica = cd_pessoa_fisica_p or nm_usuario_nrec = ds_user_tws_p)
	and		nr_seq_status = nr_seq_status_w
	and		trunc(dt_atualizacao_nrec) = Trunc(sysdate);

    RETURN nr_seq_ageint_w;
  END;
  
  /*-------------------------------------------------------------------
  -- Objeto: tws_get_data_schedule
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Obter os dados do agendamento do paciente (AGENDA_INTEGRADA)
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  08/02/21   Criacao   */
  procedure tws_get_data_schedule(nr_seq_ageint_p 		NUMBER,
								  cd_pessoa_fisica_p   	OUT VARCHAR2,
                                  ds_user_tws_p        	OUT VARCHAR2,
                                  cd_convenio_p        	OUT NUMBER,
                                  cd_categoria_p       	OUT NUMBER,
                                  cd_plano_p           	OUT VARCHAR2) is
  BEGIN
 
    Select 	cd_pessoa_fisica,
			nm_usuario_nrec,
			cd_convenio,
			cd_categoria,
			cd_plano
	into	cd_pessoa_fisica_p,
			ds_user_tws_p,
			cd_convenio_p,
			cd_categoria_p,
			cd_plano_p
	from	agenda_integrada
	where	nr_sequencia = nr_seq_ageint_p;

  END;
  
  /*-------------------------------------------------------------------
  -- Objeto: TWS_UPDATE_SCHEDULE
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Atualiza os dados do paciente do portal para o agendamento (Edicao de dados)
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  08/02/21   Criacao                                     */
  PROCEDURE tws_update_schedule(nr_seq_ageint_p      	NUMBER,
								cd_pessoa_fisica_p   	VARCHAR2,
                                ds_user_tws_p        	VARCHAR2,
                                cd_convenio_p        	NUMBER,
                                cd_categoria_p       	NUMBER,
                                cd_plano_p           	VARCHAR2,
                                cd_estabelecimento_p 	NUMBER,
								cd_usuario_convenio_p	IN VARCHAR2 default null,
								dt_validade_carteira_p	IN DATE default null,
								qt_peso_p				IN NUMBER default null,
								qt_altura_cm_p			IN NUMBER default null) IS

    nm_paciente_w   agenda_integrada.nm_paciente%TYPE;
    nr_telefone_w   agenda_integrada.nr_telefone%TYPE;
    dt_nascimento_w agenda_integrada.dt_nascimento%TYPE;
    qt_altura_cm_w  agenda_integrada.qt_altura_cm%TYPE;
    ie_sexo_w       agenda_integrada.ie_sexo%TYPE;
    qt_idade_pac_w  agenda_integrada.qt_idade_pac%TYPE;
    qt_peso_w       agenda_integrada.qt_peso%TYPE;
    nr_seq_status_w agenda_integrada.nr_seq_status%TYPE;
	cd_categoria_w	agenda_integrada.cd_categoria%TYPE := null;
  BEGIN
	
    SELECT MIN(nr_sequencia) INTO nr_seq_status_w FROM agenda_integrada_status WHERE ie_status_tasy = 'EA';
	
    IF cd_pessoa_fisica_p IS NULL THEN

      SELECT nm_pessoa_fisica,
             nr_ddi_celular || ' ' || nr_ddd_celular || ' ' || nr_telefone_celular AS nr_telefone,
             dt_nascimento,
             qt_altura_cm_p,
             ie_sexo,
             obter_idade(dt_nascimento, SYSDATE, 'A') AS qt_idade_pac,
             qt_peso_p
        INTO nm_paciente_w,
             nr_telefone_w,
             dt_nascimento_w,
             qt_altura_cm_w,
             ie_sexo_w,
             qt_idade_pac_w,
             qt_peso_w
        FROM wsuite_solic_inclusao_pf ws,
             wsuite_usuario           wu
       WHERE ws.nr_sequencia = wu.nr_seq_inclusao_pf
         AND wu.ds_login = ds_user_tws_p;

    ELSE
      SELECT substr(obter_nome_pf(cd_pessoa_fisica_p), 1, 60) AS nm_paciente,
             substr(obter_fone_pac_agenda(cd_pessoa_fisica_p),1,60) AS nr_telefone,
             obter_data_nascto_pf(cd_pessoa_fisica_p) AS dt_nascimento,
             nvl(qt_altura_cm_p,obter_dados_pf(cd_pessoa_fisica_p, 'AL')) AS qt_altura_cm,
             obter_sexo_pf(cd_pessoa_fisica_p, 'C') AS ie_sexo,
             obter_idade_pf(cd_pessoa_fisica_p, SYSDATE, 'A') AS qt_idade_pac,
             nvl(qt_peso_p,obter_dados_pf(cd_pessoa_fisica_p, 'KG')) AS qt_peso_pac
        INTO nm_paciente_w,
             nr_telefone_w,
             dt_nascimento_w,
             qt_altura_cm_w,
             ie_sexo_w,
             qt_idade_pac_w,
             qt_peso_w
        FROM dual;
    END IF;
	
    UPDATE 	agenda_integrada
	SET		dt_atualizacao = SYSDATE,
			nm_usuario = ds_user_tws_p,
			dt_atualizacao_nrec = SYSDATE,
			nm_usuario_nrec = ds_user_tws_p,
			dt_inicio_agendamento = SYSDATE,
			cd_estabelecimento = cd_estabelecimento_p,
			cd_convenio = cd_convenio_p,
			cd_categoria = cd_categoria_w,
			cd_plano = cd_plano_p,
			cd_pessoa_fisica = cd_pessoa_fisica_p,
			nm_paciente = nm_paciente_w,
			nr_telefone = nr_telefone_w,
			dt_nascimento = dt_nascimento_w,
			qt_altura_cm = qt_altura_cm_w,
			ie_sexo = ie_sexo_w,
			qt_idade_pac = qt_idade_pac_w,
			qt_peso = qt_peso_w,
			ie_agendamento_wsuite = 'S',
			cd_usuario_convenio = cd_usuario_convenio_p,
			dt_validade_carteira = dt_validade_carteira_p			
	where	nr_sequencia = nr_seq_ageint_p
	and		nr_seq_status = nr_seq_status_w;

	commit;
  END tws_update_schedule;
  
  /*-------------------------------------------------------------------
  -- Objeto: TWS_DELETE_SCHEDULE_ITEM
  -- Modulo: Portal do Paciente - TWS
  -- Objetivo: Exclui os itens do paciente para posterior lancamento dos novos itens (Edicao de dados)
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  08/02/21   Criacao                                     */
  PROCEDURE tws_delete_schedule_item(nr_seq_ageint_p NUMBER) is
  BEGIN
	tws_limpar_todas_marcacoes(nr_seq_ageint_p);
	
	delete from agenda_integrada_item a
	where a.nr_seq_agenda_int = nr_seq_ageint_p
	and	not exists (select 	1
					from 	ageint_marcacao_usuario ag
					where 	ag.nr_seq_ageint_item = a.nr_sequencia);
	
  END tws_delete_schedule_item;
  
  /*-------------------------------------------------------------------
  -- Objeto: tws_limpar_marcacao_item
  -- Modulo: Agenda Integrada
  -- Objetivo: excluir um item que estava reservado
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  01/03/21   Criacao                                     */
  procedure tws_limpar_marcacao_item(nr_seq_ageint_item_p number) is
  begin
	delete	ageint_marcacao_usuario
	where	nr_seq_ageint_item = nr_seq_ageint_item_p
	and		nvl(ie_gerado,'N')	= 'N';
	
	commit;
  end tws_limpar_marcacao_item;
  
  /*-------------------------------------------------------------------
  -- Objeto: tws_limpar_todas_marcacoes
  -- Modulo: Agenda Integrada
  -- Objetivo: excluir todas as reservas de um agendamento
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Diogo Dallabona
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- ddallabona  01/03/21   Criacao                                     */
  procedure tws_limpar_todas_marcacoes(nr_seq_ageint_p number) is
  begin
	delete	ageint_marcacao_usuario
	where	nr_seq_ageint = nr_seq_ageint_p
	and		nvl(ie_gerado,'N')	= 'N';
	
	commit;
  end tws_limpar_todas_marcacoes;
	
  
  /*-------------------------------------------------------------------
  -- Objeto: tws_click_time_suggestion
  -- Modulo: Agenda Integrada
  -- Objetivo: Valida o horario selecionado e adiciona na tabela
  --
  -- Execucao:
  -- Analista: Diogo Dallabona
  -- Desenvolvimento: Maxwell da Silva Oliveira
  -- Historico de Modificacoes
  -- Pessoa      Data       Comentarios
  -- ---------   ------     -------------------------------------------
  -- Maxwell     18/11/20   Criacao                                     */
PROCEDURE tws_click_time_suggestion(nr_seq_ageint_p           NUMBER,
									nr_seq_ageint_item_p      NUMBER,
									nr_seq_agenda_p           NUMBER,
									cd_agenda_p               NUMBER,
                                    hr_agenda_p               DATE,
                                    ie_acao_p                 VARCHAR2,
                                    nr_minuto_duracao_p       NUMBER,
                                    cd_medico_p               VARCHAR2,
									nr_seq_combo_p			  NUMBER,
									qt_peso_max_agenda_p 	  NUMBER,
									ds_user_tws_p             VARCHAR2,
                                    ds_mensagem_abort_p       IN OUT NOCOPY VARCHAR2) IS
									
cd_pessoa_fisica_w			agenda_integrada.cd_pessoa_fisica%type;
qt_peso_ageint_w			AGENDA_INTEGRADA.QT_PESO%TYPE;
ds_mensagens_quest_w		varchar2(4000);
ds_mensagens_quest_item_w	varchar2(4000);

BEGIN
  --Valida se o item ja esta marcado. caso estiver desmarca antes de reservar.
  tws_limpar_marcacao_item(nr_seq_ageint_item_p);  

  select max(cd_pessoa_fisica),
		 max(qt_peso)
  into	 cd_pessoa_fisica_w,
		 qt_peso_ageint_w
  from	 agenda_integrada
  where	 nr_sequencia = nr_seq_ageint_p;
	
  validar_click_horario_html(cd_agenda_p               => cd_agenda_p,
                             hr_agenda_p               => hr_agenda_p,
                             ie_acao_p                 => ie_acao_p,
                             nr_minuto_duracao_p       => nr_minuto_duracao_p,
                             nr_seq_ageint_item_p      => nr_seq_ageint_item_p,
                             cd_medico_p               => cd_medico_p,
                             nr_seq_combo_p            => nr_seq_combo_p,
                             ds_mensagem_abort_p       => ds_mensagem_abort_p,
                             ds_mensagens_quest_p      => ds_mensagens_quest_w,
                             ds_mensagens_quest_item_p => ds_mensagens_quest_item_w,
                                                         --------
                             qt_peso_max_agenda_p 	   => qt_peso_max_agenda_p,
                             nr_seq_ageint_p           => nr_seq_ageint_p,
							 qt_peso_ageint_P	       => qt_peso_ageint_w,
                             nm_usuario_p              => ds_user_tws_p,
							 ie_agendamento_wsuite_p   => 'S',
							 cd_pessoa_fisica_p		   => cd_pessoa_fisica_w);


  IF ds_mensagem_abort_p IS NULL THEN
    smart_schedule_data_process.adicionar_marcacao_vetor(cd_agenda_p                  => cd_agenda_p,
                             hr_agenda_p                  => hr_agenda_p,
                             nm_usuario_p                 => ds_user_tws_p,
                             nr_seq_ageint_p              => nr_seq_ageint_p,
                             nr_minuto_duracao_p          => nr_minuto_duracao_p,
                             nr_seq_agenda_p              => nr_seq_agenda_p,
                             nr_seq_ageint_item_p         => nr_seq_ageint_item_p,
                             ie_horario_auxiliar_p        => 'N',
                             cd_pessoa_fisica_p           => cd_medico_p,
                             nr_seq_combo_p               => nr_seq_combo_p,
                             ie_encaixe_p                 => 'N',
                             nm_usuario_confirm_encaixe_p => null,
                             dt_confirm_encaixe_p         => null);
                             --nr_sequencia_gerada_p        => nr_sequencia_gerada_p);
  END IF;

END;

  FUNCTION get_obter_se_feriado(cd_estabelecimento_p NUMBER,
                                dt_dia_p             DATE) RETURN VARCHAR2 IS
    nr_seq_vetor_agend_w NUMBER(10);
  BEGIN
    nr_seq_vetor_agend_w := to_number(to_char(trunc(dt_dia_p), 'j'));
    RETURN info_feriado_estab_w(cd_estabelecimento_p)(nr_seq_vetor_agend_w).ie_feriado_w;
  END;

  FUNCTION get_regras_desabilitar RETURN regras_desabilitar_table
    PIPELINED IS
  BEGIN
    atualizar_regras_desabilitar;
    IF (regras_hab_desab_w(nr_seq_ageint_w).count > 0) THEN
      FOR linha IN regras_hab_desab_w(nr_seq_ageint_w).first .. regras_hab_desab_w(nr_seq_ageint_w).last LOOP
        IF (regras_hab_desab_w(nr_seq_ageint_w).exists(linha)) THEN
          PIPE ROW(regras_hab_desab_w(nr_seq_ageint_w) (linha));
        END IF;
      END LOOP;
    END IF;
    RETURN;
  END get_regras_desabilitar;

  FUNCTION get_tempo_entre_setores(cd_setor1_p NUMBER,
                                   cd_setor2_p NUMBER) RETURN NUMBER IS
    qt_tempo_w NUMBER;
  BEGIN
    IF (regras_hab_desab_w(nr_seq_ageint_w)(2).ie_situacao = 'S') THEN
      SELECT nvl(MAX(ate.qt_tempo), 0)
        INTO qt_tempo_w
        FROM ageint_tempo_entre_setores ate
       WHERE nvl(ate.cd_setor_pri, cd_setor1_p) = cd_setor1_p
         AND nvl(ate.cd_setor_seg, cd_setor2_p) = cd_setor2_p
         AND ie_situacao = 'A';
    ELSE
      qt_tempo_w := 0;
    END IF;
    RETURN qt_tempo_w;
  END get_tempo_entre_setores;

  FUNCTION get_tempo_entre_itens(nr_item1_p           NUMBER,
                                 nr_item2_p           NUMBER,
                                 nr_grupo1_p          NUMBER,
                                 nr_grupo2_p          NUMBER,
                                 ie_regra_tempo       IN OUT NOCOPY VARCHAR2,
                                 ie_tempo_exclusivo_p IN OUT NOCOPY VARCHAR2) RETURN NUMBER IS
    --ret_w NUMBER := 0;
    qt_tempo_item  NUMBER := 0;
    qt_tempo_grupo NUMBER := 0;
  BEGIN
    ie_tempo_exclusivo_p := 'N';
    IF (regras_hab_desab_w(nr_seq_ageint_w)(1).ie_situacao = 'S') THEN
      SELECT nvl(MAX(qt_tempo), 0),
             nvl(MAX(ie_tempo_exclusivo), 'N')
        INTO qt_tempo_item,
             ie_tempo_exclusivo_p
        FROM ageint_tempo_entre_exames
       WHERE ((cd_exame_pri = nr_item1_p AND cd_exame_seg = nr_item2_p) OR (nvl(ie_regra_exclusiva, 'N') = 'N' AND cd_exame_pri = nr_item2_p AND cd_exame_seg = nr_item1_p))
         AND ie_situacao = 'A';
    ELSE
      qt_tempo_item        := 0;
      ie_tempo_exclusivo_p := 'N';
    END IF;
    -- dbms_output.put_line('Tempo ITEM: '||qt_tempo_item);
    IF (regras_hab_desab_w(nr_seq_ageint_w)(6).ie_situacao = 'S') THEN
      SELECT nvl(MAX(qt_tempo), 0)
        INTO qt_tempo_grupo
        FROM ageint_tempo_entre_grupos
       WHERE ((cd_grupo_pri = nr_grupo1_p AND cd_grupo_seg = nr_grupo2_p) OR (cd_grupo_pri = nr_grupo2_p AND cd_grupo_seg = nr_grupo1_p))
         AND ie_situacao = 'A';
      ie_regra_tempo := 'I';
      IF qt_tempo_grupo > qt_tempo_item THEN
        ie_regra_tempo := 'G';
      END IF;
    END IF;
    -- dbms_output.put_line('Tempo GRUPO: '||qt_tempo_grupo);
    RETURN greatest(qt_tempo_grupo, qt_tempo_item);
  END;

  FUNCTION get_itens(dt_inicio_filtro_p     DATE DEFAULT NULL,
                     dt_fim_filtro_p        DATE DEFAULT NULL,
                     ie_somente_em_agenda_p VARCHAR2 DEFAULT 'S') RETURN ageint_item_rec_table
    PIPELINED IS
    PROCEDURE atualizar_pri_hor_item(nr_seq_ageint_item_pp NUMBER) IS
      dt_ult_geracao_per_w DATE;
      dia_w                NUMBER;
      qt_agendas_w         NUMBER(1);
      ds_mais_ww           VARCHAR2(4000) := ''; -- texto que vai ao lado do item

    BEGIN
      IF (dt_fim_filtro_p >= dt_inicio_filtro_p) AND
         (dt_fim_filtro_p >= trunc(SYSDATE)) THEN
        SELECT MIN(hr_agenda)
          INTO agenda_integrada_item_w(nr_seq_ageint_item_pp).hr_prim_hor
          FROM TABLE(get_horarios_item_dia(nr_seq_ageint_item_pp, 'S', greatest(trunc(dt_inicio_filtro_p), SYSDATE), trunc(dt_fim_filtro_p) + 0.99));
        IF (agenda_integrada_item_w(nr_seq_ageint_item_pp).hr_prim_hor IS NULL) AND
           (ageint_controle_horarios_w.exists(nr_seq_ageint_item_pp)) THEN
          SELECT nvl(MAX(1), 0) INTO qt_agendas_w FROM TABLE(get_agendas_item(nr_seq_ageint_item_pp, 'N', dt_inicio_filtro_p, dt_ult_geracao_per_w));
          IF (qt_agendas_w > 0) THEN
            FOR dias_w IN to_number(to_char(dt_inicio_filtro_p, 'j')) .. to_number(to_char(dt_fim_filtro_p, 'j')) LOOP
              IF (NOT ageint_controle_horarios_w(nr_seq_ageint_item_pp).exists(dias_w)) THEN
                EXIT;
              END IF;
              dia_w := dias_w;
            END LOOP;
            dt_ult_geracao_per_w := to_date(dia_w, 'J');
            ds_mais_ww           := ' >' || (trunc(dt_ult_geracao_per_w) - trunc(dt_inicio_filtro_p));

          ELSE
            ds_mais_ww := wheb_mensagem_pck.get_texto(1034537);

          END IF;
        END IF;
      END IF;

      agenda_integrada_item_w(nr_seq_ageint_item_pp).ds_mais_w := ds_mais_ww;
    END;
  BEGIN
    IF (agenda_integrada_item_w.count > 0) THEN
      FOR linha IN agenda_integrada_item_w.first .. agenda_integrada_item_w.last LOOP
        IF (agenda_integrada_item_w.exists(linha)) AND
           ((ie_somente_em_agenda_p = 'N') OR ((ie_transferencia_w = 'S' AND (ds_lista_itens_selec_w IS NULL OR obter_se_contido_entre_virgula(ds_lista_itens_selec_w, linha) = 'S')) AND
           (ageint_obter_status_item(nr_seq_ageint_w, agenda_integrada_item_w(linha).nr_sequencia, 'C') NOT IN ('L', 'LF'))) OR
           (ageint_obter_status_item(nr_seq_ageint_w, agenda_integrada_item_w(linha).nr_sequencia, 'C') IN ('L', 'LF'))) THEN
          atualizar_pri_hor_item(linha);
          PIPE ROW(agenda_integrada_item_w(linha));
        END IF;
      END LOOP;
    END IF;
    RETURN;
  END;

  FUNCTION get_info_age_regr(cd_agenda_p NUMBER) RETURN info_agenda_regra_table
    PIPELINED IS
  BEGIN
    IF (info_agenda_regra_w.exists(cd_agenda_p) AND info_agenda_regra_w(cd_agenda_p).count > 0) THEN
      FOR linha IN info_agenda_regra_w(cd_agenda_p).first .. info_agenda_regra_w(cd_agenda_p).last LOOP
        IF (info_agenda_regra_w(cd_agenda_p).exists(linha)) THEN
          PIPE ROW(info_agenda_regra_w(cd_agenda_p) (linha));
        END IF;
      END LOOP;
    END IF;
    RETURN;
  END;

  FUNCTION get_lista_marcacao_item(nr_seq_ageint_item_p NUMBER) RETURN lista_seq_marc_table
    PIPELINED IS
  BEGIN
    IF (lista_seq_marcacao_w.exists(nr_seq_ageint_item_p)) AND
       (lista_seq_marcacao_w(nr_seq_ageint_item_p).count > 0) THEN
      FOR linha IN lista_seq_marcacao_w(nr_seq_ageint_item_p).first .. lista_seq_marcacao_w(nr_seq_ageint_item_p).last LOOP
        IF (lista_seq_marcacao_w(nr_seq_ageint_item_p).exists(linha)) THEN
          PIPE ROW(lista_seq_marcacao_w(nr_seq_ageint_item_p) (linha));
        END IF;
      END LOOP;
    END IF;
  END get_lista_marcacao_item;

  FUNCTION get_agendas_item(nr_seq_ageint_item_p  NUMBER,
                            ie_possuir_horarios_p VARCHAR2 DEFAULT 'S',
                            dt_inicio_periodo_p   DATE DEFAULT NULL,
                            dt_fim_periodo_p      DATE DEFAULT NULL) RETURN agendas_lib_rec_table
    PIPELINED IS
    agendas_lib_temp_w agendas_lib_table;
    dt_inicio_per_w    DATE;
    dt_final_per_w     DATE;
  BEGIN
    dt_inicio_per_w := trunc(nvl(dt_inicio_periodo_p, SYSDATE));
    dt_final_per_w  := trunc(nvl(dt_fim_periodo_p, SYSDATE + qt_dias_sugestao_w + 1));
    FOR dias_w IN to_number(to_char(dt_inicio_per_w, 'j')) .. to_number(to_char(dt_final_per_w, 'j')) LOOP
      IF (agenda_item_w.exists(nr_seq_ageint_item_p) AND agenda_item_w(nr_seq_ageint_item_p).vetor_agendas_dias_w.exists(dias_w)) THEN
        agendas_lib_temp_w := agenda_item_w(nr_seq_ageint_item_p).vetor_agendas_dias_w(dias_w);
        IF (agendas_lib_temp_w.count > 0) THEN
          FOR linha IN agendas_lib_temp_w.first .. agendas_lib_temp_w.last LOOP
            --for linha in (select * from table(agenda_item_w(nr_seq_ageint_item_p).vetor_agendas_dias_w(dias_w))) loop
            IF (agendas_lib_temp_w.exists(linha)) THEN
              IF (ie_possuir_horarios_p = 'N') THEN
                PIPE ROW(agendas_lib_temp_w(linha));
              ELSIF (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w.exists(agendas_lib_temp_w(linha).cd_agenda)) THEN
                IF (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(agendas_lib_temp_w(linha).cd_agenda).exists(dias_w)) THEN
                  IF (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(agendas_lib_temp_w(linha).cd_agenda)(dias_w).count > 0) THEN
                    PIPE ROW(agendas_lib_temp_w(linha));
                  END IF;
                END IF;
              END IF;
            END IF;
          END LOOP;
        END IF;
      END IF;
    END LOOP;
    RETURN;
  END;

  FUNCTION get_agendas_ageint(nr_seq_ageint_p       NUMBER,
                              ie_possuir_horarios_p VARCHAR2 DEFAULT 'S',
                              dt_inicio_periodo_p   DATE DEFAULT NULL,
                              dt_fim_periodo_p      DATE DEFAULT NULL) RETURN agendas_lib_rec_table
    PIPELINED IS
  BEGIN
    FOR r_agenda IN (SELECT nr_sequencia FROM TABLE(get_itens)) LOOP
      FOR linha IN (SELECT * FROM TABLE(get_agendas_item(r_agenda.nr_sequencia, ie_possuir_horarios_p, dt_inicio_periodo_p, dt_fim_periodo_p))) LOOP
        PIPE ROW(linha);
      END LOOP;
    END LOOP;
    RETURN;
  END;

  FUNCTION get_horarios_item_agenda(nr_seq_ageint_item_p NUMBER,
                                    cd_agenda_p          NUMBER,
                                    ie_somente_livres_p  VARCHAR2 DEFAULT 'S',
                                    dt_inicio_periodo_p  DATE DEFAULT NULL,
                                    dt_fim_periodo_p     DATE DEFAULT NULL) RETURN ageint_hor_usuario_rec_table
    PIPELINED IS
    dt_inicio_per_w DATE;
    dt_final_per_w  DATE;
  BEGIN
    IF (agenda_item_w.exists(nr_seq_ageint_item_p) AND agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w.exists(cd_agenda_p)) THEN
      dt_inicio_per_w := nvl(dt_inicio_periodo_p, trunc(SYSDATE));
      dt_final_per_w  := nvl(dt_fim_periodo_p, trunc(SYSDATE + qt_dias_sugestao_w + 1));
      FOR dias_w IN to_number(to_char(dt_inicio_per_w, 'j')) .. to_number(to_char(dt_final_per_w, 'j')) LOOP
        IF (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p).exists(dias_w)) AND
           (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p)(dias_w).count > 0) THEN
          FOR linha IN agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p)(dias_w).first .. agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p)(dias_w).last LOOP
            IF (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p) (dias_w)(linha).hr_agenda >= dt_inicio_per_w) AND
               (agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p) (dias_w)(linha).hr_agenda <= dt_final_per_w) THEN
              PIPE ROW(agenda_item_w(nr_seq_ageint_item_p).horario_agenda_w(cd_agenda_p) (dias_w) (linha));
            END IF;
          END LOOP;
        END IF;
      END LOOP;
    END IF;
    RETURN;
  END;

  FUNCTION get_horarios_item_dia(nr_seq_ageint_item_p NUMBER,
                                 ie_somente_livres_p  VARCHAR2 DEFAULT 'S',
                                 dt_inicio_periodo_p  DATE DEFAULT NULL,
                                 dt_fim_periodo_p     DATE DEFAULT NULL) RETURN ageint_hor_usuario_rec_table
    PIPELINED IS
    dt_inicio_per_w DATE;
    dt_final_per_w  DATE;
  BEGIN
    dt_inicio_per_w := trunc(nvl(dt_inicio_periodo_p, SYSDATE));
    dt_final_per_w  := trunc(nvl(dt_fim_periodo_p, SYSDATE + qt_dias_sugestao_w + 1));
    FOR agenda IN (SELECT DISTINCT cd_agenda FROM TABLE(get_agendas_item(nr_seq_ageint_item_p, 'N', dt_inicio_per_w, dt_final_per_w))) LOOP
      FOR linha IN (SELECT * FROM TABLE(get_horarios_item_agenda(nr_seq_ageint_item_p, agenda.cd_agenda, ie_somente_livres_p, dt_inicio_periodo_p, dt_fim_periodo_p))) LOOP
        PIPE ROW(linha);
      END LOOP;
    END LOOP;
    RETURN;
  END;

  FUNCTION get_horarios_ageint(nr_seq_ageint_p     NUMBER,
                               ie_somente_livres_p VARCHAR2 DEFAULT 'S',
                               dt_inicio_periodo_p DATE DEFAULT NULL,
                               dt_fim_periodo_p    DATE DEFAULT NULL) RETURN ageint_hor_usuario_rec_table
    PIPELINED IS
  BEGIN
    FOR ageint IN (SELECT nr_sequencia FROM TABLE(get_itens)) LOOP
      FOR linha IN (SELECT * FROM TABLE(get_horarios_item_dia(ageint.nr_sequencia, ie_somente_livres_p, dt_inicio_periodo_p, dt_fim_periodo_p))) LOOP
        PIPE ROW(linha);
      END LOOP;
    END LOOP;
    RETURN;
  END;

  FUNCTION get_nr_seq_ageint RETURN NUMBER IS
  BEGIN
    RETURN nr_seq_ageint_w;
  END;

  FUNCTION get_agendas_dias_liberados(nr_seq_agenda_int_p NUMBER,
                                      dt_agenda_p         DATE) RETURN VARCHAR2 IS

    ie_existe_horario_w NUMBER;
    ds_retorno_w        VARCHAR2(4000) := '';
    nr_indice_w         NUMBER := 0;
    dt_inicio_w         DATE := trunc(dt_agenda_p, 'MONTH');
    dt_fim_w            DATE := trunc(last_day(dt_agenda_p));
    qt_dias_periodo     NUMBER := dt_fim_w - dt_inicio_w;

    CURSOR c_agenda_lib(dt_inicio_p         DATE,
                        dt_fim_p            DATE,
                        nr_seq_agenda_int_p NUMBER) IS
      WITH agenda_datas AS
       (SELECT (trunc(dt_inicio_p) + (LEVEL - 1)) AS dt_agenda FROM dual CONNECT BY (trunc(dt_inicio_p) + (LEVEL - 1)) <= (trunc(dt_fim_p))),
      agenda_liberadas AS
       (SELECT DISTINCT trunc(dt_agenda) dt_agenda,
                        nr_seq_ageint_item
          FROM TABLE(agenda_liberada_w))
      SELECT i.nr_sequencia,
             a.dt_agenda
        FROM agenda_integrada_item i,
             agenda_datas          a
       WHERE nr_seq_agenda_int = nr_seq_agenda_int_p
         AND NOT EXISTS (SELECT 1
                FROM agenda_liberadas agd
               WHERE agd.dt_agenda = a.dt_agenda
                 AND agd.nr_seq_ageint_item = i.nr_sequencia);

  BEGIN
    agenda_liberada_w := agenda_liberada_table();
    agenda_liberada_w.delete();
    clean_cache;
    iniciar_itens_ageint(nr_seq_agenda_int_p);
    IF dt_fim_w > SYSDATE THEN
      gerar_horarios_itens_vetor(nr_seq_agenda_int_p, dt_inicio_w, qt_dias_periodo);
      FOR f_item IN (SELECT nr_sequencia FROM TABLE(get_itens)) LOOP

        FOR f_agenda IN (SELECT DISTINCT dt_agenda /*CD_AGEND */
                           


CREATE OR REPLACE FUNCTION smart_schedule_data_process.get_questao_item (nr_seq_ageint_p bigint, cd_estabelecimento_p bigint) RETURNS SETOF QUEST_T AS $body$
DECLARE


    c_itens CURSOR(nr_seq_ageint_p bigint) FOR
      SELECT ai.cd_convenio,
             ai.cd_categoria,
             ai.cd_plano,
             ai.qt_idade_pac,
             obter_tipo_convenio(ai.cd_convenio) AS ie_tipo_convenio,
             aii.ie_tipo_agendamento AS ie_tipo_item,
             aii.cd_medico,
             ai.ie_sexo,
             aii.nr_seq_proc_interno,
             aii.cd_procedimento,
             aii.ie_origem_proced,
             aii.nr_sequencia,
             aii.nr_seq_agenda_int,
             substr(obter_item_grid_ageint(aii.nr_seq_proc_interno, aii.cd_medico, aii.cd_especialidade, 1), 1, 255) ds_item,
             ageint_obter_prior_apresent(aii.nr_seq_agenda_int, aii.nr_seq_proc_interno, obter_estabelecimento_ativo, aii.nr_seq_grupo_selec, aii.nr_sequencia) nr_seq_ordem_apresent,
             ageint_obter_prioridade(aii.nr_seq_agenda_int, aii.nr_seq_proc_interno, obter_estabelecimento_ativo, aii.nr_seq_grupo_selec) nr_seq_ordem,
             aii.nr_seq_ageint_item_transf
        FROM agenda_integrada      ai,
             agenda_integrada_item aii
       WHERE aii.nr_seq_agenda_int = ai.nr_sequencia
         AND ai.nr_sequencia = nr_seq_ageint_p
       ORDER BY nr_seq_ordem_apresent,
                nr_seq_ordem;

    c_bloqueio CURSOR(nr_seq_estrutura_p     bigint,
                      cd_estabelecimento_p   bigint,
                      cd_area_procedimento_p bigint,
                      cd_grupo_proc_p        bigint,
                      ie_tipo_item_p         text,
                      nr_seq_proc_interno_p  bigint,
                      cd_especialidade_p     bigint,
                      cd_medico_p            text,
                      cd_convenio_p          bigint,
                      cd_categoria_p         text,
                      cd_plano_convenio_p    text,
                      ie_tipo_convenio_p     text,
                      qt_idade_pac_p         bigint,
                      ie_sexo_p              text) FOR
      SELECT aqrb.ie_bloquear,
             aqrb.ds_alerta,
             aqrb.nr_seq_resposta
        FROM ageint_quest_regra_bloq aqrb,
             ageint_quest_utilizacao aqu
       WHERE coalesce(aqu.ie_situacao, 'A') = 'A'
         AND coalesce(aqrb.ie_situacao, 'A') = 'A'
         AND aqrb.nr_seq_estrutura = nr_seq_estrutura_p
         AND aqrb.nr_seq_estrutura = aqu.nr_seq_estrutura
         AND aqrb.nr_seq_quest_utilizacao = aqu.nr_sequencia
         AND (coalesce(aqu.cd_estabelecimento::text, '') = '' OR cd_estabelecimento_p = aqu.cd_estabelecimento)
         AND (coalesce(aqu.cd_area_procedimento::text, '') = '' OR cd_area_procedimento_p = aqu.cd_area_procedimento)
         AND (coalesce(aqu.cd_grupo_proc::text, '') = '' OR cd_grupo_proc_p = aqu.cd_grupo_proc)
         AND (coalesce(aqu.ie_tipo_item::text, '') = '' OR ie_tipo_item_p = aqu.ie_tipo_item)
         AND (coalesce(aqu.nr_seq_proc_interno::text, '') = '' OR nr_seq_proc_interno_p = aqu.nr_seq_proc_interno)
         AND (coalesce(aqu.cd_especialidade::text, '') = '' OR cd_especialidade_p = aqu.cd_especialidade)
         AND (coalesce(aqu.cd_medico::text, '') = '' OR cd_medico_p = aqu.cd_medico)
         AND (coalesce(aqu.cd_convenio::text, '') = '' OR cd_convenio_p = aqu.cd_convenio)
         AND (coalesce(aqu.cd_categoria::text, '') = '' OR cd_categoria_p = aqu.cd_categoria)
         AND (coalesce(aqu.cd_plano_convenio::text, '') = '' OR cd_plano_convenio_p = aqu.cd_plano_convenio)
         AND (coalesce(aqu.ie_tipo_convenio::text, '') = '' OR ie_tipo_convenio_p = aqu.ie_tipo_convenio)
         AND (coalesce(aqu.qt_idade_min::text, '') = '' OR qt_idade_pac_p >= aqu.qt_idade_min)
         AND (coalesce(aqu.qt_idade_max::text, '') = '' OR qt_idade_pac_p <= aqu.qt_idade_max)
         AND (coalesce(aqu.ie_sexo, 'A') = 'A' OR ie_sexo_p = aqu.ie_sexo)

UNION ALL

      SELECT 'N',
             '',
             NULL
;WITH RECURSIVE cte AS (
 -- Gera um registro em branco
    c_questionario CURSOR(nr_seq_ageint_p        bigint,
                          cd_area_procedimento_p bigint,
                          cd_grupo_proc_p        bigint,
                          ie_tipo_item_p         text,
                          nr_seq_proc_interno_p  bigint,
                          cd_especialidade_p     bigint,
                          cd_medico_p            text,
                          cd_convenio_p          bigint,
                          cd_categoria_p         text,
                          cd_plano_convenio_p    text,
                          ie_tipo_convenio_p     text,
                          qt_idade_pac_p         bigint,
                          ie_sexo_p              text) IS

      WITH tab_est AS (SELECT aqe.nr_sequencia,
               aqe.ie_obrigatorio,
               aqe.nr_seq_pergunta,
               aqe.nr_seq_superior,
               aqe.ie_tipo_resposta,
               aqe.nr_seq_grupo_resp,
               aqe.nr_seq_ordem_apres,
               MAX(aqu.nr_sequencia) AS nr_seq_quest_util,
               aqu.ie_questionar_trans
          FROM ageint_quest_estrutura  aqe,
               ageint_quest_utilizacao aqu
         WHERE coalesce(aqu.ie_situacao, 'A') = 'A'
           AND coalesce(aqe.ie_situacao, 'A') = 'A'
           AND coalesce(aqu.ie_tipo_regra, 'H') = 'H'
           AND aqe.nr_sequencia = aqu.nr_seq_estrutura
           AND (coalesce(aqu.cd_estabelecimento::text, '') = '' OR cd_estabelecimento_p = aqu.cd_estabelecimento)
           AND (coalesce(aqu.cd_area_procedimento::text, '') = '' OR cd_area_procedimento_p = aqu.cd_area_procedimento)
           AND (coalesce(aqu.cd_grupo_proc::text, '') = '' OR cd_grupo_proc_p = aqu.cd_grupo_proc)
           AND (coalesce(aqu.ie_tipo_item::text, '') = '' OR ie_tipo_item_p = aqu.ie_tipo_item)
           AND (coalesce(aqu.nr_seq_proc_interno::text, '') = '' OR nr_seq_proc_interno_p = aqu.nr_seq_proc_interno)
           AND (coalesce(aqu.cd_especialidade::text, '') = '' OR cd_especialidade_p = aqu.cd_especialidade)
           AND (coalesce(aqu.cd_medico::text, '') = '' OR cd_medico_p = aqu.cd_medico)
           AND (coalesce(aqu.cd_convenio::text, '') = '' OR cd_convenio_p = aqu.cd_convenio)
           AND (coalesce(aqu.cd_categoria::text, '') = '' OR cd_categoria_p = aqu.cd_categoria)
           AND (coalesce(aqu.cd_plano_convenio::text, '') = '' OR cd_plano_convenio_p = aqu.cd_plano_convenio)
           AND (coalesce(aqu.ie_tipo_convenio::text, '') = '' OR ie_tipo_convenio_p = aqu.ie_tipo_convenio)
           AND (coalesce(aqu.qt_idade_min::text, '') = '' OR qt_idade_pac_p >= aqu.qt_idade_min)
           AND (coalesce(aqu.qt_idade_max::text, '') = '' OR qt_idade_pac_p <= aqu.qt_idade_max)
           AND (coalesce(aqu.ie_sexo, 'A') = 'A' OR ie_sexo_p = aqu.ie_sexo)
           AND NOT EXISTS (SELECT 1
                  FROM ageint_quest_utilizacao aqu1
                 WHERE coalesce(aqu1.ie_tipo_regra, 'H') = 'B'
                   AND aqe.nr_sequencia = aqu1.nr_seq_estrutura
                   AND (coalesce(aqu1.cd_estabelecimento::text, '') = '' OR cd_estabelecimento_p = aqu1.cd_estabelecimento)
                   AND (coalesce(aqu1.cd_area_procedimento::text, '') = '' OR cd_area_procedimento_p = aqu1.cd_area_procedimento)
                   AND (coalesce(aqu1.cd_grupo_proc::text, '') = '' OR cd_grupo_proc_p = aqu1.cd_grupo_proc)
                   AND (coalesce(aqu1.ie_tipo_item::text, '') = '' OR ie_tipo_item_p = aqu1.ie_tipo_item)
                   AND (coalesce(aqu1.nr_seq_proc_interno::text, '') = '' OR nr_seq_proc_interno_p = aqu1.nr_seq_proc_interno)
                   AND (coalesce(aqu1.cd_especialidade::text, '') = '' OR cd_especialidade_p = aqu1.cd_especialidade)
                   AND (coalesce(aqu1.cd_medico::text, '') = '' OR cd_medico_p = aqu1.cd_medico)
                   AND (coalesce(aqu1.cd_convenio::text, '') = '' OR cd_convenio_p = aqu1.cd_convenio)
                   AND (coalesce(aqu1.cd_categoria::text, '') = '' OR cd_categoria_p = aqu1.cd_categoria)
                   AND (coalesce(aqu1.cd_plano_convenio::text, '') = '' OR cd_plano_convenio_p = aqu1.cd_plano_convenio)
                   AND (coalesce(aqu1.ie_tipo_convenio::text, '') = '' OR ie_tipo_convenio_p = aqu1.ie_tipo_convenio)
                   AND (coalesce(aqu1.qt_idade_min::text, '') = '' OR qt_idade_pac_p >= aqu1.qt_idade_min)
                   AND (coalesce(aqu1.qt_idade_max::text, '') = '' OR qt_idade_pac_p <= aqu1.qt_idade_max)
                   AND (coalesce(aqu1.ie_sexo, 'A') = 'A' OR ie_sexo_p = aqu1.ie_sexo))
         GROUP BY aqe.nr_sequencia,
                  aqe.ie_obrigatorio,
                  aqe.nr_seq_pergunta,
                  aqe.nr_seq_superior,
                  aqe.ie_tipo_resposta,
                  aqe.nr_seq_grupo_resp,
                  aqe.nr_seq_ordem_apres,
                  aqu.ie_questionar_trans)
      SELECT aqe.nr_sequencia,aqe.nr_seq_superior,aqe.nr_seq_pergunta,aqe.ie_tipo_resposta,coalesce(aqe.ie_obrigatorio, 'N') AS ie_obrigatorio,1 lvl,connect_by_root aqe.nr_sequencia nr_seq_root,row_number() OVER () AS ordz,aqp.ds_pergunta,arq.nr_seq_resp,agiq_obter_se_questao_readonly(arq.nr_seq_ageint, arq.nr_sequencia) ie_readonly,agiq_obter_resposta_grid(NULL, arq.nr_seq_estrutura, arq.nr_seq_resp, arq.ds_resposta) ds_resposta_grid,arq.ds_resposta,arq.nr_sequencia AS nr_seq_resp_utl,arq.ie_tipo_quest,aqe.nr_seq_quest_util,aqe.ie_questionar_trans,ARRAY[ row_number() OVER (ORDER BY  coalesce(aqe.nr_seq_ordem_apres, aqe.nr_sequencia)) ] as hierarchy
        FROM ageint_quest_perguntas aqp, tab_est aqe
LEFT OUTER JOIN ageint_resp_quest arq ON (aqe.nr_sequencia = arq.nr_seq_estrutura AND nr_seq_ageint_p = arq.nr_seq_ageint) WHERE coalesce(aqe.nr_seq_superior::text, '') = ''
  UNION ALL

    c_questionario CURSOR(nr_seq_ageint_p        bigint,
                          cd_area_procedimento_p bigint,
                          cd_grupo_proc_p        bigint,
                          ie_tipo_item_p         text,
                          nr_seq_proc_interno_p  bigint,
                          cd_especialidade_p     bigint,
                          cd_medico_p            text,
                          cd_convenio_p          bigint,
                          cd_categoria_p         text,
                          cd_plano_convenio_p    text,
                          ie_tipo_convenio_p     text,
                          qt_idade_pac_p         bigint,
                          ie_sexo_p              text) IS

      WITH tab_est AS (SELECT aqe.nr_sequencia,
               aqe.ie_obrigatorio,
               aqe.nr_seq_pergunta,
               aqe.nr_seq_superior,
               aqe.ie_tipo_resposta,
               aqe.nr_seq_grupo_resp,
               aqe.nr_seq_ordem_apres,
               MAX(aqu.nr_sequencia) AS nr_seq_quest_util,
               aqu.ie_questionar_trans
          FROM ageint_quest_estrutura  aqe,
               ageint_quest_utilizacao aqu
         WHERE coalesce(aqu.ie_situacao, 'A') = 'A'
           AND coalesce(aqe.ie_situacao, 'A') = 'A'
           AND coalesce(aqu.ie_tipo_regra, 'H') = 'H'
           AND aqe.nr_sequencia = aqu.nr_seq_estrutura
           AND (coalesce(aqu.cd_estabelecimento::text, '') = '' OR cd_estabelecimento_p = aqu.cd_estabelecimento)
           AND (coalesce(aqu.cd_area_procedimento::text, '') = '' OR cd_area_procedimento_p = aqu.cd_area_procedimento)
           AND (coalesce(aqu.cd_grupo_proc::text, '') = '' OR cd_grupo_proc_p = aqu.cd_grupo_proc)
           AND (coalesce(aqu.ie_tipo_item::text, '') = '' OR ie_tipo_item_p = aqu.ie_tipo_item)
           AND (coalesce(aqu.nr_seq_proc_interno::text, '') = '' OR nr_seq_proc_interno_p = aqu.nr_seq_proc_interno)
           AND (coalesce(aqu.cd_especialidade::text, '') = '' OR cd_especialidade_p = aqu.cd_especialidade)
           AND (coalesce(aqu.cd_medico::text, '') = '' OR cd_medico_p = aqu.cd_medico)
           AND (coalesce(aqu.cd_convenio::text, '') = '' OR cd_convenio_p = aqu.cd_convenio)
           AND (coalesce(aqu.cd_categoria::text, '') = '' OR cd_categoria_p = aqu.cd_categoria)
           AND (coalesce(aqu.cd_plano_convenio::text, '') = '' OR cd_plano_convenio_p = aqu.cd_plano_convenio)
           AND (coalesce(aqu.ie_tipo_convenio::text, '') = '' OR ie_tipo_convenio_p = aqu.ie_tipo_convenio)
           AND (coalesce(aqu.qt_idade_min::text, '') = '' OR qt_idade_pac_p >= aqu.qt_idade_min)
           AND (coalesce(aqu.qt_idade_max::text, '') = '' OR qt_idade_pac_p <= aqu.qt_idade_max)
           AND (coalesce(aqu.ie_sexo, 'A') = 'A' OR ie_sexo_p = aqu.ie_sexo)
           AND NOT EXISTS (SELECT 1
                  FROM ageint_quest_utilizacao aqu1
                 WHERE coalesce(aqu1.ie_tipo_regra, 'H') = 'B'
                   AND aqe.nr_sequencia = aqu1.nr_seq_estrutura
                   AND (coalesce(aqu1.cd_estabelecimento::text, '') = '' OR cd_estabelecimento_p = aqu1.cd_estabelecimento)
                   AND (coalesce(aqu1.cd_area_procedimento::text, '') = '' OR cd_area_procedimento_p = aqu1.cd_area_procedimento)
                   AND (coalesce(aqu1.cd_grupo_proc::text, '') = '' OR cd_grupo_proc_p = aqu1.cd_grupo_proc)
                   AND (coalesce(aqu1.ie_tipo_item::text, '') = '' OR ie_tipo_item_p = aqu1.ie_tipo_item)
                   AND (coalesce(aqu1.nr_seq_proc_interno::text, '') = '' OR nr_seq_proc_interno_p = aqu1.nr_seq_proc_interno)
                   AND (coalesce(aqu1.cd_especialidade::text, '') = '' OR cd_especialidade_p = aqu1.cd_especialidade)
                   AND (coalesce(aqu1.cd_medico::text, '') = '' OR cd_medico_p = aqu1.cd_medico)
                   AND (coalesce(aqu1.cd_convenio::text, '') = '' OR cd_convenio_p = aqu1.cd_convenio)
                   AND (coalesce(aqu1.cd_categoria::text, '') = '' OR cd_categoria_p = aqu1.cd_categoria)
                   AND (coalesce(aqu1.cd_plano_convenio::text, '') = '' OR cd_plano_convenio_p = aqu1.cd_plano_convenio)
                   AND (coalesce(aqu1.ie_tipo_convenio::text, '') = '' OR ie_tipo_convenio_p = aqu1.ie_tipo_convenio)
                   AND (coalesce(aqu1.qt_idade_min::text, '') = '' OR qt_idade_pac_p >= aqu1.qt_idade_min)
                   AND (coalesce(aqu1.qt_idade_max::text, '') = '' OR qt_idade_pac_p <= aqu1.qt_idade_max)
                   AND (coalesce(aqu1.ie_sexo, 'A') = 'A' OR ie_sexo_p = aqu1.ie_sexo))
         GROUP BY aqe.nr_sequencia,
                  aqe.ie_obrigatorio,
                  aqe.nr_seq_pergunta,
                  aqe.nr_seq_superior,
                  aqe.ie_tipo_resposta,
                  aqe.nr_seq_grupo_resp,
                  aqe.nr_seq_ordem_apres,
                  aqu.ie_questionar_trans)
      SELECT aqe.nr_sequencia,aqe.nr_seq_superior,aqe.nr_seq_pergunta,aqe.ie_tipo_resposta,coalesce(aqe.ie_obrigatorio, 'N') AS ie_obrigatorio,(c.level+1) lvl,connect_by_root aqe.nr_sequencia nr_seq_root,row_number() OVER () AS ordz,aqp.ds_pergunta,arq.nr_seq_resp,agiq_obter_se_questao_readonly(arq.nr_seq_ageint, arq.nr_sequencia) ie_readonly,agiq_obter_resposta_grid(NULL, arq.nr_seq_estrutura, arq.nr_seq_resp, arq.ds_resposta) ds_resposta_grid,arq.ds_resposta,arq.nr_sequencia AS nr_seq_resp_utl,arq.ie_tipo_quest,aqe.nr_seq_quest_util,aqe.ie_questionar_trans, array_append(c.hierarchy, row_number() OVER (ORDER BY  coalesce(aqe.nr_seq_ordem_apres, aqe.nr_sequencia)))  as hierarchy
        FROM ageint_quest_perguntas aqp, tab_est aqe
LEFT OUTER JOIN ageint_resp_quest arq ON (aqe.nr_sequencia = arq.nr_seq_estrutura AND nr_seq_ageint_p = arq.nr_seq_ageint) JOIN cte c ON (c.nr_sequencia = aqp.aqe.nr_seq_superior)

) SELECT * FROM cte WHERE aqp.nr_sequencia = aqe.nr_seq_pergunta ORDER BY hierarchy;
;

    c_habilita CURSOR(nr_seq_estrutura_p bigint) FOR
      SELECT aqer.nr_seq_resp_ant FROM ageint_quest_estrut_resp aqer WHERE aqer.nr_seq_estrutura = nr_seq_estrutura_p;

    cd_area_procedimento_w bigint := NULL;
    cd_grupo_proc_w        bigint := NULL;
    current_setting('smart_schedule_data_process.cd_especialidade_w')::integer     bigint := NULL;
    current_setting('smart_schedule_data_process.cd_pessoa_fisica_w')::varchar(10)     ageint_marcacao_usuario.cd_pessoa_fisica%TYPE;

    quest_w quest_r;

BEGIN
    FOR current_setting('smart_schedule_data_process.i')::bigint IN c_itens(nr_seq_ageint_p => nr_seq_ageint_p) LOOP

      IF (current_setting('smart_schedule_data_process.i')::bigint.ie_tipo_item NOT IN ('CI', 'CH', 'Q')) THEN

        SELECT MAX(cd_area_procedimento),
               MAX(cd_grupo_proc),
               MAX(cd_especialidade)
          INTO STRICT cd_area_procedimento_w,
               cd_grupo_proc_w,
               current_setting('smart_schedule_data_process.cd_especialidade_w')::integer
          FROM estrutura_procedimento_v
         WHERE cd_procedimento = current_setting('smart_schedule_data_process.i')::bigint.cd_procedimento
           AND ie_origem_proced = current_setting('smart_schedule_data_process.i')::bigint.ie_origem_proced;
      ELSE
        cd_area_procedimento_w := NULL;
        cd_grupo_proc_w        := NULL;
        PERFORM set_config('smart_schedule_data_process.cd_especialidade_w', NULL, false);
      END IF;
      quest_w.nr_seq_ageint_item    := current_setting('smart_schedule_data_process.i')::bigint.nr_sequencia;
      quest_w.nr_seq_agenda_int     := current_setting('smart_schedule_data_process.i')::bigint.nr_seq_agenda_int;
      quest_w.ds_item               := current_setting('smart_schedule_data_process.i')::bigint.ds_item;
      quest_w.nr_seq_ordem_apresent := current_setting('smart_schedule_data_process.i')::bigint.nr_seq_ordem_apresent;
      quest_w.nr_seq_ordem          := current_setting('smart_schedule_data_process.i')::bigint.nr_seq_ordem;
      SELECT MAX(cd_pessoa_fisica)
        INTO STRICT current_setting('smart_schedule_data_process.cd_pessoa_fisica_w')::varchar(10)
        FROM ageint_marcacao_usuario
       WHERE nr_seq_ageint = nr_seq_ageint_p
         AND nr_seq_ageint_item = quest_w.nr_seq_ageint_item;

      FOR q IN c_questionario(nr_seq_ageint_p        => nr_seq_ageint_p,
                              cd_area_procedimento_p => cd_area_procedimento_w,
                              cd_grupo_proc_p        => cd_grupo_proc_w,
                              ie_tipo_item_p         => current_setting('smart_schedule_data_process.i')::bigint.ie_tipo_item,
                              nr_seq_proc_interno_p  => current_setting('smart_schedule_data_process.i')::bigint.nr_seq_proc_interno,
                              cd_especialidade_p     => current_setting('smart_schedule_data_process.cd_especialidade_w')::integer,
                              cd_medico_p            => coalesce(current_setting('smart_schedule_data_process.i')::bigint.cd_medico, current_setting('smart_schedule_data_process.cd_pessoa_fisica_w')::varchar(10)),
                              cd_convenio_p          => current_setting('smart_schedule_data_process.i')::bigint.cd_convenio,
                              cd_categoria_p         => current_setting('smart_schedule_data_process.i')::bigint.cd_categoria,
                              cd_plano_convenio_p    => current_setting('smart_schedule_data_process.i')::bigint.cd_plano,
                              ie_tipo_convenio_p     => current_setting('smart_schedule_data_process.i')::bigint.ie_tipo_convenio,
                              qt_idade_pac_p         => current_setting('smart_schedule_data_process.i')::bigint.qt_idade_pac,
                              ie_sexo_p              => current_setting('smart_schedule_data_process.i')::bigint.ie_sexo) LOOP

        IF ((q.ie_questionar_trans <> 'N') AND (current_setting('smart_schedule_data_process.i')::(bigint.nr_seq_ageint_item_transf IS NOT NULL AND bigint.nr_seq_ageint_item_transf::text <> ''))) OR (current_setting('smart_schedule_data_process.i')::coalesce(bigint.nr_seq_ageint_item_transf::text, '') = '') THEN

          quest_w.nr_sequencia      := q.nr_seq_resp_utl;
          quest_w.nr_seq_estrutura  := q.nr_sequencia;
          quest_w.nr_seq_superior   := q.nr_seq_superior;
          quest_w.nr_seq_pergunta   := q.nr_seq_pergunta;
          quest_w.ds_pergunta       := q.ds_pergunta;
          quest_w.nr_seq_resp       := q.nr_seq_resp;
          quest_w.ds_resposta       := q.ds_resposta;
          quest_w.ie_tipo_quest     := q.ie_tipo_quest;
          quest_w.ie_obrigatorio    := q.ie_obrigatorio;
          quest_w.ds_resposta_grid  := q.ds_resposta_grid;
          quest_w.ie_tipo_resposta  := q.ie_tipo_resposta;
          quest_w.ie_readonly       := q.ie_readonly;
          quest_w.lvl               := q.lvl;
          quest_w.nr_seq_root       := q.nr_seq_root;
          quest_w.ordz              := q.ordz;
          quest_w.nr_seq_quest_util := q.nr_seq_quest_util;
          quest_w.ie_bloquear       := 'N';
          quest_w.ds_alerta         := '';
          quest_w.cd_dependencia    := '';
          quest_w.cd_bloquear       := '';

          FOR b IN c_bloqueio(nr_seq_estrutura_p     => q.nr_sequencia,
                              cd_estabelecimento_p   => cd_estabelecimento_p,
                              cd_area_procedimento_p => cd_area_procedimento_w,
                              cd_grupo_proc_p        => cd_grupo_proc_w,
                              ie_tipo_item_p         => current_setting('smart_schedule_data_process.i')::bigint.ie_tipo_item,
                              nr_seq_proc_interno_p  => current_setting('smart_schedule_data_process.i')::bigint.nr_seq_proc_interno,
                              cd_especialidade_p     => current_setting('smart_schedule_data_process.cd_especialidade_w')::integer,
                              cd_medico_p            => coalesce(current_setting('smart_schedule_data_process.i')::bigint.cd_medico, current_setting('smart_schedule_data_process.cd_pessoa_fisica_w')::varchar(10)),
                              cd_convenio_p          => current_setting('smart_schedule_data_process.i')::bigint.cd_convenio,
                              cd_categoria_p         => current_setting('smart_schedule_data_process.i')::bigint.cd_categoria,
                              cd_plano_convenio_p    => current_setting('smart_schedule_data_process.i')::bigint.cd_plano,
                              ie_tipo_convenio_p     => current_setting('smart_schedule_data_process.i')::bigint.ie_tipo_convenio,
                              qt_idade_pac_p         => current_setting('smart_schedule_data_process.i')::bigint.qt_idade_pac,
                              ie_sexo_p              => current_setting('smart_schedule_data_process.i')::bigint.ie_sexo) LOOP

            IF b.ie_bloquear = 'S' THEN
              quest_w.ie_bloquear := 'S';
              quest_w.cd_bloquear := quest_w.cd_bloquear || ';' || b.nr_seq_resposta;
            END IF;
            IF (b.ds_alerta IS NOT NULL AND b.ds_alerta::text <> '') THEN
              quest_w.ds_alerta := quest_w.ds_alerta || '@;' || b.nr_seq_resposta || '@:' || b.ds_alerta;
            END IF;
          END LOOP;
          FOR d IN c_habilita(q.nr_sequencia) LOOP
            quest_w.cd_dependencia := d.nr_seq_resp_ant || ';' || quest_w.cd_dependencia;
          END LOOP;
          current_setting('smart_schedule_data_process.quest_est_item_w')::quest_est_item_t(quest_w.nr_seq_estrutura)(quest_w.nr_seq_ageint_item) := quest_w;
          RETURN NEXT quest_w;
        END IF;
      END LOOP;
    END LOOP;
    RETURN;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION smart_schedule_data_process.get_questao_item (nr_seq_ageint_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;
