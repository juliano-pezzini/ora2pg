-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pfcs_obs_contributor_pck.get_pred_disch_disposition (ds_patient_id_p text, ie_return_type_p text) RETURNS varchar AS $body$
DECLARE

		ds_return_w					varchar(4000)	:= null;
        nr_time_to_predict_dd   	double precision;
		nr_no_of_pred_facilities   	double precision	:= 0;
        nr_seq_encounter_p   		bigint;
		nr_non_routine_disc_cutoff	double precision;
		nr_referencia_observation_w	double precision;
		dt_enc_start   				timestamp;
		
		dd_popover_content	         		PHILIPS_JSON := PHILIPS_JSON();
		ds_return_json		         		PHILIPS_JSON := PHILIPS_JSON();
		dd_popover_content_list         	PHILIPS_JSON_LIST := PHILIPS_JSON_LIST();
		dd_pred_facility_json         		PHILIPS_JSON := PHILIPS_JSON();
		dd_pred_facility_list         		PHILIPS_JSON_LIST := PHILIPS_JSON_LIST();
		dd_pred_facilities_list         	PHILIPS_JSON_LIST := PHILIPS_JSON_LIST();
	
BEGIN
        select nr_sequencia
			into STRICT nr_seq_encounter_p 
			from pfcs_encounter 
			where nr_seq_patient in (SELECT nr_sequencia 
				from pfcs_patient 
				where patient_id= ds_patient_id_p) 
            order by dt_atualizacao desc LIMIT 1;
				
		select coalesce(QT_THRESHOLD_CHANCES_DD, PFCS_PCK_CONSTANTS.QT_DISCH_DISP_LIMIT_RULE)
            into STRICT nr_non_routine_disc_cutoff
			from PFCS_GENERAL_RULE;
		
		nr_referencia_observation_w := pfcs_obs_contributor_pck.get_observation_value(nr_seq_encounter_p, current_setting('pfcs_obs_contributor_pck.cd_dd_type_w')::varchar(100));
		if (nr_referencia_observation_w IS NOT NULL AND nr_referencia_observation_w::text <> '') THEN
			if (nr_referencia_observation_w > nr_non_routine_disc_cutoff) THEN
				if (ie_return_type_p = PFCS_PCK_CONSTANTS.CD_MPL) then
					return obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_POST_ACUTE_CARE);
				elsif (ie_return_type_p = PFCS_PCK_CONSTANTS.CD_TOOLTIP) then				
					dd_popover_content.put('type', 'text');
					dd_popover_content.put('id', 'DD_NON_ROUTINE_PRED');
					dd_popover_content.put('label', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_PROBABILITY));
					dd_popover_content.put('value', concat(nr_referencia_observation_w, '%'));
					dd_popover_content_list.append(dd_popover_content.to_char());
				
					dd_popover_content.put('type', 'text');
					dd_popover_content.put('id', 'DD_NON_ROUTINE_PRED');
					dd_popover_content.put('label', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_PRED_DEST));
					dd_popover_content.put('value', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_POST_ACUTE_CARE));
					dd_popover_content_list.append(dd_popover_content.to_char());
				
					SELECT ROUND(24 * (clock_timestamp() - enc.period_start)), enc.period_start
						into STRICT nr_time_to_predict_dd, dt_enc_start
						from pfcs_encounter enc,
						pfcs_observation obs
						where enc.nr_sequencia = obs.nr_seq_encounter
						and obs.nr_seq_encounter =  nr_seq_encounter_p  LIMIT 1;
					
					if (nr_time_to_predict_dd > 24) THEN -- prediction available
						PERFORM set_config('pfcs_obs_contributor_pck.nr_seq_observation_w', pfcs_obs_contributor_pck.get_observation_seq(nr_seq_encounter_p, current_setting('pfcs_obs_contributor_pck.cd_dd_type_w')::varchar(100)), false);
					
						for c01_w in current_setting('pfcs_obs_contributor_pck.cursor_rank')::CURSOR(nr_seq_observation_p(current_setting('pfcs_obs_contributor_pck.nr_seq_observation_w')::pfcs_observ_extension.nr_seq_observation%type, '#PRED_DD_FACILITY', 3) loop
							nr_no_of_pred_facilities := nr_no_of_pred_facilities + 1;
							dd_pred_facility_json := new PHILIPS_JSON();
							dd_pred_facility_list := new PHILIPS_JSON_LIST();
							if (upper(c01_w.ds_title) != PFCS_PCK_CONSTANTS.CD_NA and upper(c01_w.ds_title) != PFCS_PCK_CONSTANTS.CD_NAN) then
								dd_pred_facility_json.put('id', 'DD_PRED_FACILITY');
								dd_pred_facility_json.put('useExpression', false);
								dd_pred_facility_json.put('value', c01_w.ds_title);
								dd_pred_facility_list.append(dd_pred_facility_json.to_char());
								
								dd_pred_facility_json.put('id', 'DD_PRED_FACILITY_PERCENT');
								dd_pred_facility_json.put('useExpression', false);
								dd_pred_facility_json.put('value', concat(c01_w.ds_value, '%'));
								dd_pred_facility_list.append(dd_pred_facility_json.to_char());
							end if;
							dd_pred_facilities_list.append(dd_pred_facility_list);
						end loop;
						
						if (nr_no_of_pred_facilities > 0) then
							dd_popover_content.put('type', 'table');
							dd_popover_content.put('id', 'DD_PRED_FACILITIES');
							dd_popover_content.put('records', dd_pred_facilities_list);
							dd_popover_content_list.append(dd_popover_content.to_char());
						end if;					
					else
						dd_popover_content := new PHILIPS_JSON();
						dd_popover_content.put('id', 'DD_PRED_TIME_LEFT');
						dd_popover_content.put('type', 'text');
						dd_popover_content.put('label', get_time_by_minutes((1 - (clock_timestamp() - dt_enc_start)) * 1440) || ' ' || obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_PRED_TIME_LEFT));
						dd_popover_content_list.append(dd_popover_content.to_char());
					end if;
				end if;
			else
				if (ie_return_type_p = PFCS_PCK_CONSTANTS.CD_MPL) then
					return obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_HOME);
				elsif (ie_return_type_p = PFCS_PCK_CONSTANTS.CD_TOOLTIP) then
					dd_popover_content.put('type', 'text');
					dd_popover_content.put('id', 'DD_NON_ROUTINE_PRED');
					dd_popover_content.put('label', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_PROBABILITY));
					dd_popover_content.put('value', concat(100 - nr_referencia_observation_w, '%'));
					dd_popover_content_list.append(dd_popover_content.to_char());
					
					dd_popover_content.put('type', 'text');
					dd_popover_content.put('id', 'DD_NON_ROUTINE_PRED');
					dd_popover_content.put('label', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_PRED_DEST));
					dd_popover_content.put('value', obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_HOME));
					dd_popover_content_list.append(dd_popover_content.to_char());
				end if;
			end if;
			
			ds_return_json.put('content', dd_popover_content_list.to_char());
			ds_return_w := ds_return_json.to_char();
		end if;
		
		return ds_return_w;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pfcs_obs_contributor_pck.get_pred_disch_disposition (ds_patient_id_p text, ie_return_type_p text) FROM PUBLIC;
