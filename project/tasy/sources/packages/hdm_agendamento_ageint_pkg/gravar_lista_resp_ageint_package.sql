-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/* -------------------------------------------------------------------------------------------------------------------
	Finalidade: Obter lista de responsáveis pelo agendamento
	*/
CREATE OR REPLACE PROCEDURE hdm_agendamento_ageint_pkg.gravar_lista_resp_ageint ( nr_seq_captacao_p mprev_captacao.nr_sequencia%type, nr_seq_partic_ciclo_item_p mprev_partic_ciclo_item.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_pf_usuario_logado_p pessoa_fisica.cd_pessoa_fisica%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


	ds_lista_responsaveis_w		varchar(500);
	lista_responsaveis_w		dbms_sql.varchar2_table;
	cd_pessoa_responsavel_w		mprev_equipe.cd_pessoa_responsavel%type;
	cd_especialidade_w		especialidade_medica.cd_especialidade%type;

	
BEGIN

	/*Entra no if caso a procedure for chamada pela função HDM - Acompanhamento do plano de atendimento*/

	if (nr_seq_partic_ciclo_item_p IS NOT NULL AND nr_seq_partic_ciclo_item_p::text <> '') then
		ds_lista_responsaveis_w	:= mprev_obter_profissionais(nr_seq_partic_ciclo_item_p);
	end if;

	/*Entra no if caso a procedure for chamada pela função HDM - Captação*/

	if (nr_seq_captacao_p IS NOT NULL AND nr_seq_captacao_p::text <> '') then
		/*Busca o responsável pela equipe da pessoa fisica logada. Caso a pessoa fisica não for responsável de equipe vai retornar
		o responsável sa equipe que ele pertence.*/
		ds_lista_responsaveis_w	:= mprev_obter_prof_captacao(nr_seq_captacao_p);

		if (coalesce(ds_lista_responsaveis_w::text, '') = '') then
			ds_lista_responsaveis_w	:= mprev_obter_resp_equipe_pf(cd_pf_usuario_logado_p);
		end if;

	end if;

	if (coalesce(ds_lista_responsaveis_w::text, '') = '') then
		--Atribui cd_pessoa_fisica do usuário logado como responsável pela equipe
		ds_lista_responsaveis_w := cd_pf_usuario_logado_p;
	end if;

	lista_responsaveis_w := obter_lista_string(ds_lista_responsaveis_w, ',');

	delete from w_hdm_prof_resp_ageint where nm_usuario = nm_usuario_p;

    for	i in lista_responsaveis_w.first..lista_responsaveis_w.last loop
		cd_pessoa_responsavel_w	:= lista_responsaveis_w(i);

		cd_especialidade_w := hdm_agendamento_ageint_pkg.obter_especialidade_ageint(cd_pessoa_responsavel_w, cd_estabelecimento_p);

		insert into w_hdm_prof_resp_ageint(nr_sequencia,
						nr_seq_captacao,
						cd_pessoa_fisica_resp,
						cd_especialidade,
						nm_usuario,
						cd_estabelecimento,
						nr_seq_partic_ciclo_item,
						dt_atualizacao)
					values (	nextval('w_hdm_prof_resp_ageint_seq'),
						nr_seq_captacao_p,
						cd_pessoa_responsavel_w,
						cd_especialidade_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						nr_seq_partic_ciclo_item_p,
						clock_timestamp());

	end loop;

	commit;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hdm_agendamento_ageint_pkg.gravar_lista_resp_ageint ( nr_seq_captacao_p mprev_captacao.nr_sequencia%type, nr_seq_partic_ciclo_item_p mprev_partic_ciclo_item.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_pf_usuario_logado_p pessoa_fisica.cd_pessoa_fisica%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
