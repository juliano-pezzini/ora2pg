-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_smp_pck.aplicar_regra_preco_servico ( nm_usuario_p usuario.nm_usuario%type, regra_simulacao_preco_serv_p pls_smp_pck.regra_simulacao_preco_ser, regra_preco_servico_p pls_cta_valorizacao_pck.dados_regra_preco_ser_data) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplica as regras de precos encontradas por servicos na simulacao
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
vl_servico_w		dbms_sql.number_table;
regra_preco_servico_w	dbms_sql.number_table;
BEGIN

-- somente executa se tiver um servico identificado
if (regra_simulacao_preco_serv_p.cd_servico IS NOT NULL AND regra_simulacao_preco_serv_p.cd_servico::text <> '') then

	-- primeiro, passa os valores da regra para uma tabela temporaria, para poder usar o forall
	for i in regra_preco_servico_p.first .. regra_preco_servico_p.last loop
		vl_servico_w(i)			:= coalesce(regra_preco_servico_p[i].vl_servico,0);
		regra_preco_servico_w(i)	:= regra_preco_servico_p[i].nr_sequencia;
	end loop; -- fim loop regras
	
	-- insere na simulacao
	forall i in regra_preco_servico_p.first .. regra_preco_servico_p.last
		insert into pls_smp_result_regra(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_smp_result_regra,
					vl_simulacao,
					nr_seq_regra_preco_proc,
					nr_seq_regra_preco_mat,
					nr_seq_regra_preco_servico)
		values (nextval('pls_smp_result_regra_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			regra_simulacao_preco_serv_p.nr_seq_item_serv,
			vl_servico_w(i),
			null,
			null,
			regra_preco_servico_w(i));
	commit;

	
end if; -- fim se existir servico
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_smp_pck.aplicar_regra_preco_servico ( nm_usuario_p usuario.nm_usuario%type, regra_simulacao_preco_serv_p pls_smp_pck.regra_simulacao_preco_ser, regra_preco_servico_p pls_cta_valorizacao_pck.dados_regra_preco_ser_data) FROM PUBLIC;
