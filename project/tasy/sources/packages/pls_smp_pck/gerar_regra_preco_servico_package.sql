-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_smp_pck.gerar_regra_preco_servico ( regra_simulacao_p pls_smp_pck.regra_simulacao, nm_usuario_p usuario.nm_usuario%type, regra_simulacao_preco_serv_p pls_smp_pck.regra_simulacao_preco_ser) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Obtem as regras de precos dos servicos.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
sql_cursor_w			varchar(32000);
bind_sql_valor_w		sql_pck.t_dado_bind;
cur_serv_w			sql_pck.t_cursor;
regra_preco_servico_w		pls_cta_valorizacao_pck.dados_regra_preco_ser_data;
i				integer;

nr_seq_regra_atend_cart_w	pls_regra_preco_servico.nr_seq_regra_atend_cart%type;
cd_especialidade_prest_w	pls_regra_preco_servico.cd_especialidade_prest%type;
nr_seq_grupo_operadora_w	pls_regra_preco_servico.nr_seq_grupo_operadora%type;
vl_negociado_ww			double precision	:= 0;
ie_grupo_produto_w		varchar(10);
ie_carteira_valida_w		varchar(1)	:= 'S';
ie_especialidade_prest_w	varchar(1);
ie_grupo_operadora_w		varchar(1);
nr_seq_grupo_contrato_w		bigint;
ie_grupo_contrato_w		varchar(10);
tx_ajuste_ww			double precision;
nr_seq_excecao_preco_serv_w	bigint;
dt_vigencia_ww			timestamp;
nr_seq_grupo_produto_w		bigint;
nr_seq_regra_ww			bigint;
qt_excecao_preco_serv_w		bigint;
vl_servico_tabela_w		pls_conta_proc.vl_unitario%type;
vl_servico_w			double precision	:= 0;
cd_tabela_servico_ww		smallint;
nr_seq_grupo_servico_w		bigint;
cd_moeda_ww			smallint;
tx_ajuste_preco_ww		pls_regra_preco_servico.tx_ajuste_preco%type := null;
vl_ch_servico_w			double precision;


BEGIN

-- Somente executa se tiver simulacao e servico
if (regra_simulacao_p.nr_sequencia IS NOT NULL AND regra_simulacao_p.nr_sequencia::text <> '') and (regra_simulacao_preco_serv_p.cd_servico IS NOT NULL AND regra_simulacao_preco_serv_p.cd_servico::text <> '') then
	
	-- inicia indice
	i := 0;

	-- Monta o cursor com as regras
	bind_sql_valor_w := pls_smp_pck.retorna_sql_cursor_serv(regra_simulacao_preco_serv_p, bind_sql_valor_w);
	
	-- abre o cursor com as regras
	bind_sql_valor_w := sql_pck.executa_sql_big_cursor(sql_cursor_w, bind_sql_valor_w);
	
	-- se abriu corretamente o cursor
	if (cur_serv_w%isopen) then
	
		-- navega pelas regras
		loop
			fetch	cur_serv_w
			into	vl_negociado_ww,
				tx_ajuste_ww,
				dt_vigencia_ww,
				cd_tabela_servico_ww,
				nr_seq_regra_ww,
				nr_seq_grupo_contrato_w,
				nr_seq_grupo_produto_w,
				nr_seq_grupo_servico_w,
				cd_moeda_ww,
				tx_ajuste_preco_ww,
				nr_seq_regra_atend_cart_w,
				cd_especialidade_prest_w,
				nr_seq_grupo_operadora_w;
				
			EXIT WHEN NOT FOUND; /* apply on cur_serv_w */
				
			ie_grupo_produto_w	:= 'S';
			ie_grupo_contrato_w	:= 'S';
			ie_carteira_valida_w	:= 'S';
			ie_especialidade_prest_w:= 'S';
			ie_grupo_operadora_w	:= 'S';
			/* Grupo de contratos */

			/* Grupo de prestadores */

			/* Grupo de servicos */

			
			if (coalesce(nr_seq_grupo_contrato_w,0) > 0) and
				((coalesce(regra_simulacao_preco_serv_p.nr_seq_contrato,0)	> 0) or (coalesce(regra_simulacao_preco_serv_p.nr_seq_contrato_intercambio,0) > 0)) then
				ie_grupo_contrato_w	:= pls_se_grupo_preco_contrato(nr_seq_grupo_contrato_w, regra_simulacao_preco_serv_p.nr_seq_contrato, regra_simulacao_preco_serv_p.nr_seq_contrato_intercambio);
			elsif (coalesce(nr_seq_grupo_contrato_w,0) > 0) then
				ie_grupo_contrato_w	:= 'N';
			end if;	
			if (ie_grupo_contrato_w = 'S') then
				/* Grupo de produtos */

				if (coalesce(nr_seq_grupo_produto_w,0) > 0) then
					ie_grupo_produto_w	:= pls_se_grupo_preco_produto(nr_seq_grupo_produto_w, regra_simulacao_preco_serv_p.nr_seq_plano);
				end if;
				if (ie_grupo_produto_w = 'S') then
					if (nr_seq_regra_atend_cart_w IS NOT NULL AND nr_seq_regra_atend_cart_w::text <> '') then
						ie_carteira_valida_w	:= pls_valida_regra_cart(regra_simulacao_preco_serv_p.nr_seq_segurado, nr_seq_regra_atend_cart_w);
					end if;
					if (ie_carteira_valida_w	= 'S') then
						if (cd_especialidade_prest_w	> 0) then
							if	not(cd_especialidade_prest_w like('%'||regra_simulacao_preco_serv_p.cd_especialidade_prest||',%')) then
								ie_especialidade_prest_w	:= 'N';
							end if;
						end if;
						
						if (ie_especialidade_prest_w	= 'S') and (nr_seq_grupo_operadora_w IS NOT NULL AND nr_seq_grupo_operadora_w::text <> '') then
							ie_grupo_operadora_w := pls_se_grupo_preco_operadora(nr_seq_grupo_operadora_w,coalesce(regra_simulacao_preco_serv_p.nr_seq_congenere,regra_simulacao_preco_serv_p.nr_seq_congenere_prot));
						end if;							
					end if;
				end if;
			end if;
			
			if (ie_grupo_contrato_w	= 'S') and (ie_grupo_produto_w	= 'S') and (ie_carteira_valida_w	= 'S') and (ie_grupo_operadora_w	= 'S') and (ie_especialidade_prest_w = 'S') then
				nr_seq_excecao_preco_serv_w	:= 0;
				
				select	count(1)
				into STRICT	qt_excecao_preco_serv_w
				from	pls_excecao_preco_servico
				where	nr_seq_regra	= nr_seq_regra_ww;
				
				if (qt_excecao_preco_serv_w > 0) then
					pls_obter_excecao_preco_serv(	nr_seq_regra_ww, regra_simulacao_preco_serv_p.cd_servico, regra_simulacao_preco_serv_p.ie_origem_proced,
									regra_simulacao_preco_serv_p.dt_servico, regra_simulacao_preco_serv_p.ie_preco, regra_simulacao_preco_serv_p.ie_tipo_contratacao,
									regra_simulacao_preco_serv_p.ie_tipo_segurado, regra_simulacao_preco_serv_p.nr_seq_contrato, regra_simulacao_preco_serv_p.nr_seq_prestador, 
									regra_simulacao_preco_serv_p.nr_seq_congenere, regra_simulacao_preco_serv_p.nr_seq_tipo_prestador, regra_simulacao_preco_serv_p.nr_seq_grupo_intercambio,
									regra_simulacao_preco_serv_p.nr_seq_classificacao, regra_simulacao_preco_serv_p.nr_seq_classificacao, regra_simulacao_preco_serv_p.nr_seq_contrato_intercambio, 
									regra_simulacao_preco_serv_p.nr_seq_congenere_prot, nr_seq_excecao_preco_serv_w, regra_simulacao_preco_serv_p.ie_origem_protocolo,
									regra_simulacao_preco_serv_p.ie_tipo_intercambio, regra_simulacao_preco_serv_p.cd_prestador_prot, regra_simulacao_preco_serv_p.ie_ref_guia_internacao,
									regra_simulacao_preco_serv_p.nr_seq_grupo_rec);
				end if;
			end if;
				
			-- Nao incluir regras de excecao
			if (coalesce(nr_seq_excecao_preco_serv_w,0)	= 0) then
			
				if (coalesce(cd_moeda_ww,0) <> 0 ) then
					vl_ch_servico_w:= obter_valor_cotacao_moeda_data(cd_moeda_ww, regra_simulacao_preco_serv_p.dt_servico);
				end if;

				if (coalesce(nr_seq_regra_ww,0) > 0) then	
					if (coalesce(vl_negociado_ww,0) <> 0) then
						vl_servico_w		:= vl_negociado_ww;
						vl_servico_tabela_w	:= vl_servico_w;
					elsif (coalesce(tx_ajuste_ww,0) <> 0) then
						begin
						/* obter os valores da tabela SERVIcO   
						Felipe - 20/06/2011 - OS 330776 - Coloquei a restricao por estabelecimento*/
						select	a.vl_servico
						into STRICT	vl_servico_w
						from	preco_servico a
						where	a.cd_tabela_servico	= cd_tabela_servico_ww
						and	a.cd_estabelecimento	= regra_simulacao_preco_serv_p.cd_estabelecimento
						and	a.cd_procedimento	= regra_simulacao_preco_serv_p.cd_servico
						and	a.ie_origem_proced	= regra_simulacao_preco_serv_p.ie_origem_proced
						and	coalesce(a.dt_inicio_vigencia, clock_timestamp() - interval '3650 days')	=
									(	SELECT	max(coalesce(b.dt_inicio_vigencia, clock_timestamp() - interval '3650 days'))
									from	preco_servico b
									where	b.cd_tabela_servico	= cd_tabela_servico_ww
									and	b.cd_procedimento	= regra_simulacao_preco_serv_p.cd_servico
									and	b.ie_origem_proced	= regra_simulacao_preco_serv_p.ie_origem_proced
									and	b.cd_estabelecimento	= a.cd_estabelecimento
									and	regra_simulacao_preco_serv_p.dt_servico >= b.dt_inicio_vigencia
									and (regra_simulacao_preco_serv_p.dt_servico <= b.dt_vigencia_final or coalesce(b.dt_vigencia_final::text, '') = ''));
						exception
						when others then
						begin	
							vl_servico_w	:= null;
						end;
						end;
						vl_servico_tabela_w	:= vl_servico_w;
						if (coalesce(cd_moeda_ww,9999) <> 9999) then
							vl_servico_w := ( vl_servico_w * vl_ch_servico_w);
						end if;

						vl_servico_w	:= (vl_servico_w * tx_ajuste_ww);	

						if (coalesce(tx_ajuste_preco_ww,0) <> 0) then
							vl_servico_w		:= (vl_servico_w * tx_ajuste_preco_ww);	
						end if;


					end if;

					-- Apenas insere a regra, se o valor e maior que zero
					if (coalesce(vl_servico_w,0) > 0) then
						-- atribui as informacoes da regra na tabela de output
						
						-- Aplica o deflator / inflator se existir
						vl_servico_w := pls_smp_pck.gerar_valor_deflator(regra_simulacao_p, vl_servico_w);
						
						regra_preco_servico_w[i].nr_sequencia		:= nr_seq_regra_ww;
						regra_preco_servico_w[i].vl_servico		:= coalesce(vl_servico_w,0);
						regra_preco_servico_w[i].cd_tabela_servico	:= cd_tabela_servico_ww;
						regra_preco_servico_w[i].dt_vigencia		:= dt_vigencia_ww;
						regra_preco_servico_w[i].cd_moeda		:= cd_moeda_ww;
						regra_preco_servico_w[i].vl_servico_tabela	:= vl_servico_tabela_w;
						regra_preco_servico_w[i].vl_ch_servico		:= vl_ch_servico_w;

						i := i +1;
						
						-- se foi alcancado o limite, grava no banco
						if (pls_util_pck.qt_registro_transacao_w <= i) then
						
							-- grava no banco
							CALL pls_smp_pck.aplicar_regra_preco_servico(nm_usuario_p, regra_simulacao_preco_serv_p, regra_preco_servico_w);
							-- limpa as regras
							regra_preco_servico_w.delete;
							
							-- reinicia o contador
							i := 0;
						
						end if; -- fim limite alcancado
					end if; -- fim se tem valor
				end if;
			end if; -- fim se nao for regra de excecao
		
		end loop; -- fim navegar pelas regras
		
		close cur_serv_w;
		
		-- se ainda tem alguma regra nao gravada
		if (regra_preco_servico_w.count > 0) then
		
			-- grava no banco
			CALL pls_smp_pck.aplicar_regra_preco_servico(nm_usuario_p, regra_simulacao_preco_serv_p, regra_preco_servico_w);
			-- limpa as regras
			regra_preco_servico_w.delete;
		
		end if; -- ainda tem alguma regra nao gravada
	
	end if; -- fim abriu corretamente o cursor de regras
	
end if; -- fim se existir simulacao e servico
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_smp_pck.gerar_regra_preco_servico ( regra_simulacao_p pls_smp_pck.regra_simulacao, nm_usuario_p usuario.nm_usuario%type, regra_simulacao_preco_serv_p pls_smp_pck.regra_simulacao_preco_ser) FROM PUBLIC;
