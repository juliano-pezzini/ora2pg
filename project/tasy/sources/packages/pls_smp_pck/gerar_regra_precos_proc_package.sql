-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_smp_pck.gerar_regra_precos_proc ( regra_simulacao_p pls_smp_pck.regra_simulacao, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, regra_simulacao_preco_proc_p pls_smp_pck.regra_simulacao_preco_proc) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gerar os as regras de precos dos procedimentos simulados
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
sql_cursor_w			varchar(32000);
bind_sql_valor_w		sql_pck.t_dado_bind;
cur_proc_w			sql_pck.t_cursor;

nr_seq_regra_ww			pls_regra_preco_proc.nr_sequencia%type;
nr_seq_grupo_servico_w		pls_regra_preco_proc.nr_seq_grupo_servico%type;
nr_seq_grupo_prestador_w	pls_regra_preco_proc.nr_seq_grupo_prestador%type;
nr_seq_grupo_contrato_w		pls_regra_preco_proc.nr_seq_grupo_contrato%type;
nr_seq_grupo_produto_w		pls_regra_preco_proc.nr_seq_grupo_produto%type;
nr_seq_cbhpm_edicao_ww		pls_regra_preco_proc.nr_seq_cbhpm_edicao%type;
ie_proc_tabela_w		pls_regra_preco_proc.ie_proc_tabela%type;
nr_seq_categoria_w		pls_regra_preco_proc.nr_seq_categoria_plano%type;
nr_seq_regra_atend_cart_w	pls_regra_preco_proc.nr_seq_regra_atend_cart%type;
cd_especialidade_prest_w	pls_regra_preco_proc.cd_especialidade_prest%type;
ie_ch_padrao_anestesista_w	pls_regra_preco_proc.ie_ch_padrao_anestesista%type;
nr_seq_grupo_operadora_w	pls_regra_preco_proc.nr_seq_grupo_operadora%type;


ie_origem_proced_w		bigint;
vl_ch_honorarios_w		double precision	:= 0;
vl_ch_custo_oper_w		double precision	:= 0;
vl_ch_custo_filme_w		double precision	:= 0;
vl_ch_anestesista_w		double precision	:= 0;	
vl_filme_w			double precision	:= 0;
vl_materiais_w			pls_regra_preco_proc.vl_materiais%type;
tx_ajuste_custo_oper_w		double precision	:= 0;
tx_ajuste_partic_w		double precision	:= 0;
vl_procedimento_w		double precision	:= 0;
vl_anestesista_w		double precision	:= 0;
vl_custo_operacional_w		double precision	:= 0;
vl_medico_w			double precision	:= 0;
vl_auxiliares_amb_w		double precision	:= 0;
vl_auxiliares_w			double precision	:= 0;
vl_porte_anestesico_w		double precision	:= 0;
nr_seq_regra_w			bigint;
nr_porte_anestesico_w		smallint;
cd_especialidade_w		bigint;
nr_auxiliares_w			smallint;
dt_inicio_vigencia_w		timestamp;
dt_inicio_vig_edicao_w		timestamp;
tx_ajuste_filme_w		double precision	:= 0;
vl_proc_negociado_w		double precision	:= 0;
vl_medico_neg_w			double precision	:= 0;
vl_auxiliares_neg_w		double precision	:= 0;
vl_anestesista_neg_w		double precision	:= 0;
vl_custo_oper_neg_w		double precision	:= 0;
tx_ajuste_ch_honor_w		double precision	:= 0;
tx_ajuste_geral_w		double precision	:= 0;
pr_ajuste_w			double precision	:= 0;
vl_medico_cbhpm_w		double precision	:= 0;
vl_saldo_w			double precision	:= 0;
vl_soma_proc_w			double precision	:= 0;
cd_porte_cbhpm_w		varchar(10);
tx_porte_cbhpm_w		double precision;
qt_uco_cbhpm_w			double precision;
nr_porte_anest_cbhpm_w		smallint;
nr_auxiliar_cbhpm_w		smallint;
qt_filme_cbhpm_w		double precision;
qt_incidencia_cbhpm_w		double precision;
ie_unid_ra_cbhpm_w		varchar(1);
vl_porte_cbhpm_w		double precision;
dt_vig_porte_cbhpm_w		timestamp;
dt_vig_preco_cbhpm_w		timestamp;
vl_porte_anest_cbhpm_w		double precision;
cd_edicao_amb_w			integer;
ie_preco_informado_w		varchar(1)	:= 'N';
ds_observacao_log_w		varchar(4000);
cd_moeda_ch_medico_w		smallint;
cd_moeda_ch_co_w		smallint;
cd_moeda_filme_w		smallint;
cd_moeda_anestesista_w		smallint;
cd_porte_anestesico_w		varchar(10);
ie_grupo_servico_w		varchar(1)	:= 'S';
ie_grupo_prestador_w		varchar(1)	:= 'S';
ie_grupo_contrato_w		varchar(1)	:= 'S';
ie_grupo_produto_w		varchar(1)	:= 'S';
nr_seq_cbhpm_edicao_w		bigint;

nr_seq_regra_autogerado_w	bigint;
vl_autogerado_w			double precision;
ie_calculo_tuss_w		varchar(10);
qt_filme_w			double precision;
ie_credenciado_w		varchar(1);
qt_excecao_preco_proc_w		bigint;
nr_seq_excecao_preco_proc_w	bigint;
nr_seq_congenere_w		bigint;
cd_prestador_w			varchar(30)	:= null;
ie_autogerado_w			varchar(1);
qt_incidencia_amb_w		bigint;
vl_filme_ww			double precision;
nr_seq_grupo_servico_ant_w	bigint	:= 0;
ie_grupo_servico_ant_w		varchar(3);
ie_existe_proc_tabela_w		varchar(1);
cd_moeda_autogerado_w		pls_preco_autogerado.cd_moeda%type;
ie_autogerado_proc_w		pls_regra_preco_proc.ie_autogerado%type;
ie_categoria_w			varchar(1);
ie_carteira_valida_w		varchar(1)	:= 'S';
ie_especialidade_prest_w	varchar(1);
vl_proc_tabela_w		preco_amb.vl_procedimento%type	:= 0;
vl_custo_operacional_tab_w	preco_amb.vl_custo_operacional%type;
qt_filme_tab_w			preco_amb.qt_filme%type;
nr_seq_edicao_tuss_w		pls_edicao_preco_tuss.nr_sequencia%type;
ie_grupo_operadora_w		varchar(1);
val_tab_amb_w			tipo_val_tab_amb;
ie_porte_amb_tuss_w		pls_parametros.ie_porte_amb_tuss%type;
vl_base_filme_w			double precision	:= 0; 	--aldellandrea os774659
dt_mes_competencia_w	pls_conta_proc_v.dt_mes_competencia%type;
nr_seq_lote_w			pls_lote_auto_gerado.nr_sequencia%type;
dt_lote_w				pls_lote_auto_gerado.dt_inicio%type;
cd_moeda_tabela_w		moeda.cd_moeda%type;


BEGIN

-- Apenas executa se tiver regra e procedimento informados
if (regra_simulacao_p.nr_sequencia IS NOT NULL AND regra_simulacao_p.nr_sequencia::text <> '') and (regra_simulacao_preco_proc_p.cd_procedimento IS NOT NULL AND regra_simulacao_preco_proc_p.cd_procedimento::text <> '') and (regra_simulacao_preco_proc_p.ie_origem_proced IS NOT NULL AND regra_simulacao_preco_proc_p.ie_origem_proced::text <> '') then

	-- retorna o sql do cursor com a busca de regras
	bind_sql_valor_w := pls_smp_pck.retorna_sql_cursor_proc(regra_simulacao_preco_proc_p, bind_sql_valor_w);
	
	-- abre o cursor com as regras
	bind_sql_valor_w := sql_pck.executa_sql_big_cursor(sql_cursor_w, bind_sql_valor_w);
	
	-- se abriu corretamente o cursor
	if (cur_proc_w%isopen) then
		loop
			fetch cur_proc_w
			into	nr_seq_regra_ww,
				nr_seq_grupo_servico_w,
				nr_seq_grupo_prestador_w,
				nr_seq_grupo_contrato_w,
				nr_seq_grupo_produto_w,
				nr_seq_cbhpm_edicao_ww,
				ie_proc_tabela_w,
				nr_seq_categoria_w,
				nr_seq_regra_atend_cart_w,
				cd_especialidade_prest_w,
				ie_ch_padrao_anestesista_w,
				nr_seq_grupo_operadora_w,
				cd_moeda_tabela_w;
			EXIT WHEN NOT FOUND; /* apply on cur_proc_w */
			
			ie_grupo_produto_w		:= 'S';
			ie_grupo_contrato_w		:= 'S';
			ie_grupo_prestador_w		:= 'S';
			ie_grupo_servico_w		:= 'S';
			ie_existe_proc_tabela_w		:= 'S';
			ie_categoria_w			:= 'S';
			ie_carteira_valida_w		:= 'S';
			ie_especialidade_prest_w	:= 'S';
			ie_grupo_operadora_w		:= 'S';
			nr_seq_excecao_preco_proc_w	:= 0;
			
			if (ie_grupo_prestador_w = 'S') then
				/* Grupo de contratos */
				if (coalesce(nr_seq_grupo_contrato_w,0) > 0) then
					if	((coalesce(regra_simulacao_preco_proc_p.nr_seq_contrato,0)	> 0) or (coalesce(regra_simulacao_preco_proc_p.nr_seq_contrato_intercambio,0) > 0)) then                         
						ie_grupo_contrato_w	:= pls_se_grupo_preco_contrato(nr_seq_grupo_contrato_w, regra_simulacao_preco_proc_p.nr_seq_contrato, regra_simulacao_preco_proc_p.nr_seq_contrato_intercambio);
					else                          
						ie_grupo_contrato_w	:= 'N';
					end if;
				end if;
				
				if (ie_grupo_contrato_w = 'S') then
				
					/* Grupo de produtos */
					if (coalesce(nr_seq_grupo_produto_w,0) > 0) then 
						ie_grupo_produto_w	:= pls_se_grupo_preco_produto(nr_seq_grupo_produto_w, regra_simulacao_preco_proc_p.nr_seq_plano);
					end if;

					if (ie_grupo_produto_w = 'S') then
					
						if (ie_proc_tabela_w	= 'S') then
							ie_existe_proc_tabela_w	:= pls_obter_se_proc_tabela(nr_seq_regra_ww,regra_simulacao_preco_proc_p.cd_procedimento, regra_simulacao_preco_proc_p.ie_origem_proced, regra_simulacao_preco_proc_p.dt_guia, cd_moeda_tabela_w);

						end if;
						
						if (ie_existe_proc_tabela_w	= 'S') then
							if (nr_seq_regra_atend_cart_w IS NOT NULL AND nr_seq_regra_atend_cart_w::text <> '') then
								ie_carteira_valida_w	:= pls_valida_regra_cart(regra_simulacao_preco_proc_p.nr_seq_segurado, nr_seq_regra_atend_cart_w);
							end if;
							if (ie_carteira_valida_w	= 'S') then
								if (cd_especialidade_prest_w	> 0) then
									if	not(cd_especialidade_prest_w like('%'||regra_simulacao_preco_proc_p.cd_especialidade||',%')) then
										ie_especialidade_prest_w	:= 'N';
									end if;
								end if;
								
								if (ie_especialidade_prest_w	= 'S') and (nr_seq_grupo_operadora_w IS NOT NULL AND nr_seq_grupo_operadora_w::text <> '') then
									ie_grupo_operadora_w := pls_se_grupo_preco_operadora(nr_seq_grupo_operadora_w,regra_simulacao_preco_proc_p.nr_seq_congenere);
								end if;
							end if;
						end if;

					end if;
				end if;
			end if;
			
			if (coalesce(nr_seq_categoria_w,0) <> 0) then
				ie_categoria_w	:= pls_obter_se_categoria_plano(regra_simulacao_preco_proc_p.nr_seq_plano,nr_seq_categoria_w);
			end if;
													
			if (ie_grupo_servico_w	= 'S') and (ie_grupo_prestador_w	= 'S') and (ie_grupo_contrato_w	= 'S') and (ie_existe_proc_tabela_w = 'S')and (ie_grupo_produto_w	= 'S') and (ie_categoria_w		= 'S') and (ie_carteira_valida_w	= 'S') and (ie_grupo_operadora_w	= 'S') and (ie_especialidade_prest_w = 'S') then
				
				select	count(1)               
				into STRICT	qt_excecao_preco_proc_w  
				from	pls_excecao_preco_proc   
				where	nr_seq_regra	= nr_seq_regra_ww
				and	ie_situacao	= 'A';
				
				if (qt_excecao_preco_proc_w > 0) then      
					pls_obter_excecao_preco_proc(	nr_seq_regra_ww, regra_simulacao_preco_proc_p.cd_procedimento, regra_simulacao_preco_proc_p.ie_origem_proced, 
									regra_simulacao_preco_proc_p.dt_guia, regra_simulacao_preco_proc_p.ie_preco, regra_simulacao_preco_proc_p.ie_tipo_contratacao, 
									regra_simulacao_preco_proc_p.ie_tipo_beneficiario, regra_simulacao_preco_proc_p.nr_seq_contrato, regra_simulacao_preco_proc_p.nr_seq_prestador, 
									regra_simulacao_preco_proc_p.nr_seq_congenere, regra_simulacao_preco_proc_p.nr_seq_tipo_prest_exec, null,                                                                                  
									regra_simulacao_preco_proc_p.nr_seq_clas_prest, regra_simulacao_preco_proc_p.nr_seq_clas_prest, regra_simulacao_preco_proc_p.nr_seq_contrato_intercambio, 
									null, nr_seq_excecao_preco_proc_w, regra_simulacao_preco_proc_p.nr_seq_tipo_prest_exec,
									null,regra_simulacao_preco_proc_p.ie_tipo_intercambio, regra_simulacao_preco_proc_p.nr_seq_tipo_atendimento, null);
				end if;
				if (coalesce(nr_seq_excecao_preco_proc_w,0)	= 0) then	
					nr_seq_regra_w		:= nr_seq_regra_ww;
				end if;	
			end if;

			-- somente processa o que nao for regra de excecao
			if (coalesce(nr_seq_excecao_preco_proc_w,0)	= 0) then
		
				nr_seq_grupo_servico_ant_w	:= nr_seq_grupo_servico_w;
				ie_grupo_servico_ant_w		:= ie_grupo_servico_w;
				
				if (coalesce(nr_seq_regra_w,0) > 0) then
					select	a.cd_edicao_amb,
						a.dt_inicio_vigencia,         
						coalesce(a.vl_ch_honorarios,1),    
						coalesce(a.vl_ch_custo_oper,1),    
						cd_moeda_ch_medico,           
						cd_moeda_ch_co,               
						cd_moeda_filme,               
						cd_moeda_anestesista,         
						a.tx_ajuste_geral,            
						a.vl_filme,                   
						a.tx_ajuste_filme,            
						a.tx_ajuste_custo_oper,       
						a.tx_ajuste_partic,           
						a.tx_ajuste_ch_honor,         
						coalesce(a.vl_proc_negociado,0),   
						coalesce(a.vl_medico,0),           
						coalesce(a.vl_auxiliares,0),       
						coalesce(a.vl_anestesista,0),      
						coalesce(a.vl_custo_operacional,0),
						coalesce(a.ie_preco_informado,'N'),
						ie_autogerado,
						coalesce(a.vl_materiais, 0),
						nr_seq_cbhpm_edicao,
						ie_ch_padrao_anestesista,
						nr_seq_edicao_tuss
					into STRICT	cd_edicao_amb_w,          
						dt_inicio_vigencia_w,         
						vl_ch_honorarios_w,           
						vl_ch_custo_oper_w,           
						cd_moeda_ch_medico_w,         
						cd_moeda_ch_co_w,             
						cd_moeda_filme_w,             
						cd_moeda_anestesista_w,       
						tx_ajuste_geral_w,            
						vl_filme_w,                   
						tx_ajuste_filme_w,            
						tx_ajuste_custo_oper_w,       
						tx_ajuste_partic_w,           
						tx_ajuste_ch_honor_w,         
						vl_proc_negociado_w,          
						vl_medico_neg_w,              
						vl_auxiliares_neg_w,          
						vl_anestesista_neg_w,         
						vl_custo_oper_neg_w,          
						ie_preco_informado_w,         
						ie_autogerado_w,
						vl_materiais_w,
						nr_seq_cbhpm_edicao_w,
						ie_ch_padrao_anestesista_w,
						nr_seq_edicao_tuss_w
					from	pls_regra_preco_proc a    
					where	a.nr_sequencia	= nr_seq_regra_ww;
					
					
					if (coalesce(ie_autogerado_w,'N') = 'S') and (regra_simulacao_preco_proc_p.ie_tipo_tabela	 	<> 'A') and (ie_autogerado_proc_w	= 'S')then
							
						SELECT * FROM pls_gerencia_autogerado_pck.pls_define_moeda_autogerado( dt_mes_competencia_w, regra_simulacao_preco_proc_p.dt_guia, regra_simulacao_preco_proc_p.nr_seq_prestador, cd_estabelecimento_p, nr_seq_regra_autogerado_w, vl_autogerado_w, cd_moeda_autogerado_w, cd_prestador_w, nr_seq_lote_w, dt_lote_w, regra_simulacao_preco_proc_p.cd_procedimento, regra_simulacao_preco_proc_p.ie_origem_proced) INTO STRICT nr_seq_regra_autogerado_w, vl_autogerado_w, cd_moeda_autogerado_w, nr_seq_lote_w, dt_lote_w;
					
					else
						cd_moeda_autogerado_w	:= cd_moeda_ch_medico_w;
					end if;
					
					if (cd_moeda_ch_medico_w IS NOT NULL AND cd_moeda_ch_medico_w::text <> '') then
						vl_ch_honorarios_w	:= obter_valor_cotacao_moeda_data(cd_moeda_ch_medico_w, regra_simulacao_preco_proc_p.dt_guia);
					end if;
					if (cd_moeda_ch_co_w IS NOT NULL AND cd_moeda_ch_co_w::text <> '') then     
						vl_ch_custo_oper_w	:= obter_valor_cotacao_moeda_data(cd_moeda_ch_co_w, regra_simulacao_preco_proc_p.dt_guia);
					end if;
						
					if (vl_autogerado_w	<> 0) and (ie_autogerado_proc_w	= 'S') and (vl_autogerado_w	<= coalesce(vl_ch_custo_oper_w,0)) and (vl_autogerado_w	<= coalesce(vl_ch_honorarios_w,0)) then       
						vl_ch_honorarios_w	:= vl_autogerado_w;
						vl_ch_custo_oper_w	:= vl_autogerado_w;
						vl_ch_anestesista_w	:= vl_autogerado_w;
						if (cd_moeda_filme_w IS NOT NULL AND cd_moeda_filme_w::text <> '') then
							vl_ch_custo_filme_w	:= obter_valor_cotacao_moeda_data(cd_moeda_filme_w, regra_simulacao_preco_proc_p.dt_guia);
						end if;
					else
								
						if (cd_moeda_filme_w IS NOT NULL AND cd_moeda_filme_w::text <> '') then     
							vl_ch_custo_filme_w	:= obter_valor_cotacao_moeda_data(cd_moeda_filme_w, regra_simulacao_preco_proc_p.dt_guia);
						end if;
						if (cd_moeda_anestesista_w IS NOT NULL AND cd_moeda_anestesista_w::text <> '') then                              
							vl_ch_anestesista_w	:= obter_valor_cotacao_moeda_data(cd_moeda_anestesista_w, regra_simulacao_preco_proc_p.dt_guia);
						end if;
					end if;
					
					/* Obter a origem da edicao */
					begin                          
						select	coalesce(ie_origem_proced, ie_origem_proced_w),                          
							ie_calculo_tuss               
						into STRICT	ie_origem_proced_w,       
							ie_calculo_tuss_w             
						from	edicao_amb                
						where	cd_edicao_amb	= cd_edicao_amb_w;
					exception                      
					when others then               
						ie_origem_proced_w	:= ie_origem_proced_w;
					end;
					
					if (ie_preco_informado_w	= 'S') then
						vl_procedimento_w 	:= vl_proc_negociado_w;
						vl_custo_operacional_w	:= vl_custo_oper_neg_w;
						vl_medico_w		:= vl_medico_neg_w;
						vl_anestesista_w	:= vl_anestesista_neg_w;
						vl_auxiliares_amb_w	:= vl_auxiliares_neg_w;
						ds_observacao_log_w	:= 'Preco informado!';
					else                           
						if (ie_origem_proced_w = 1) or (ie_origem_proced_w = 4) or  
							(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'A') then            
							if (ie_origem_proced_w = 8) then
								pls_define_preco_tuss(ie_calculo_tuss_w, cd_edicao_amb_w, regra_simulacao_preco_proc_p.cd_procedimento,
									regra_simulacao_preco_proc_p.ie_origem_proced, regra_simulacao_preco_proc_p.dt_guia, cd_estabelecimento_p,                   
									regra_simulacao_preco_proc_p.nr_seq_prestador, nr_seq_edicao_tuss_w,regra_simulacao_preco_proc_p.nr_seq_plano, vl_procedimento_w, vl_medico_w,                    
									vl_anestesista_w, vl_auxiliares_amb_w, vl_custo_operacional_w,         
									vl_filme_ww, vl_porte_anest_cbhpm_w, qt_filme_w,                        
									nr_auxiliares_w, nr_porte_anestesico_w, cd_porte_cbhpm_w,              
									tx_porte_cbhpm_w, qt_uco_cbhpm_w, qt_incidencia_amb_w);
							vl_base_filme_w := vl_filme_w; -- aldellandrea os 774659
							vl_filme_w := vl_filme_w * qt_filme_w;
							else
								--obtem os valores para a tabela amb
								val_tab_amb_w := pls_obter_val_tab_amb(cd_edicao_amb_w, regra_simulacao_preco_proc_p.dt_guia, regra_simulacao_preco_proc_p.cd_procedimento, vl_filme_w);
								
								vl_procedimento_w := val_tab_amb_w.vl_procedimento;
								vl_custo_operacional_w := val_tab_amb_w.vl_custo_operacional;
								vl_medico_w := val_tab_amb_w.vl_medico;
								vl_filme_w := val_tab_amb_w.vl_filme;
								nr_porte_anestesico_w := val_tab_amb_w.nr_porte_anestesico;
								vl_anestesista_w := val_tab_amb_w.vl_anestesista;
								nr_auxiliares_w := val_tab_amb_w.nr_auxiliares;
								vl_auxiliares_amb_w := val_tab_amb_w.vl_auxiliares_amb;
								qt_filme_w := val_tab_amb_w.qt_filme;
								vl_base_filme_w := vl_filme_w; --aldellandrea os 774659
							end if;
							
							cd_porte_anestesico_w	:= nr_porte_anestesico_w;
							vl_custo_operacional_w	:= vl_custo_operacional_w * vl_ch_custo_oper_w;
							vl_medico_w		:= vl_medico_w * vl_ch_honorarios_w;
							if (vl_ch_custo_filme_w	<> 0) then
								vl_filme_w		:= vl_filme_w * vl_ch_custo_filme_w;
							end if;
							vl_custo_operacional_w	:= vl_custo_operacional_w * tx_ajuste_custo_oper_w;
							vl_medico_w		:= vl_medico_w * tx_ajuste_ch_honor_w;
							vl_filme_w		:= vl_filme_w * tx_ajuste_filme_w;
							
						elsif (ie_origem_proced_w = 5) or
							(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'C') then
							if (ie_origem_proced_w = 8) then
								pls_define_preco_tuss(ie_calculo_tuss_w, cd_edicao_amb_w, regra_simulacao_preco_proc_p.cd_procedimento,    
									regra_simulacao_preco_proc_p.ie_origem_proced, regra_simulacao_preco_proc_p.dt_guia, cd_estabelecimento_p,
									regra_simulacao_preco_proc_p.nr_seq_prestador,nr_seq_edicao_tuss_w, regra_simulacao_preco_proc_p.nr_seq_plano, vl_procedimento_w, vl_medico_cbhpm_w,              
									vl_anestesista_w, vl_auxiliares_amb_w, vl_custo_operacional_w,         
									vl_filme_ww, vl_porte_anest_cbhpm_w, qt_filme_cbhpm_w,                  
									nr_auxiliar_cbhpm_w, nr_porte_anest_cbhpm_w, cd_porte_cbhpm_w,         
									tx_porte_cbhpm_w, qt_uco_cbhpm_w, qt_incidencia_cbhpm_w);
							else                         
								/* obter os valores da tabela CBHPM */
   
								
								select	max(dt_vigencia)
								into STRICT	dt_inicio_vig_edicao_w 
								from	cbhpm_edicao           
								where	nr_sequencia	= nr_seq_cbhpm_edicao_w;
							 
								if ( coalesce(dt_inicio_vig_edicao_w::text, '') = '') then
									dt_inicio_vig_edicao_w	:= dt_inicio_vigencia_w;
								end if;
								
								ie_credenciado_w  := obter_se_medico_credenciado(cd_estabelecimento_p, regra_simulacao_preco_proc_p.cd_medico, regra_simulacao_preco_proc_p.cd_convenio, null, cd_especialidade_w,
									regra_simulacao_preco_proc_p.cd_categoria, null, null, null, null, null, null);
								
								pls_obter_preco_cbhpm(          
									cd_estabelecimento_p, regra_simulacao_preco_proc_p.dt_guia, regra_simulacao_preco_proc_p.cd_procedimento,
									regra_simulacao_preco_proc_p.ie_origem_proced, dt_inicio_vig_edicao_w,                       
									regra_simulacao_preco_proc_p.nr_seq_prestador, null, vl_medico_cbhpm_w,                           
									cd_porte_cbhpm_w, tx_porte_cbhpm_w, qt_uco_cbhpm_w,                    
									nr_porte_anest_cbhpm_w, nr_auxiliar_cbhpm_w, qt_filme_cbhpm_w,         
									qt_incidencia_cbhpm_w, ie_unid_ra_cbhpm_w, vl_porte_cbhpm_w,           
									dt_vig_porte_cbhpm_w, dt_vig_preco_cbhpm_w, vl_porte_anest_cbhpm_w,    
									regra_simulacao_preco_proc_p.cd_categoria, ie_credenciado_w,coalesce(nr_seq_congenere_w, null), regra_simulacao_preco_proc_p.nr_seq_plano);
							end if;
							cd_porte_anestesico_w	:= nr_porte_anest_cbhpm_w;
							vl_custo_operacional_w	:= coalesce((qt_uco_cbhpm_w * vl_ch_custo_oper_w),0);
							vl_medico_w		:= (vl_medico_cbhpm_w * vl_ch_honorarios_w);
							vl_filme_w		:= (qt_filme_cbhpm_w * vl_filme_w);
							if (vl_ch_custo_filme_w	<> 0) then
								vl_filme_w		:= vl_filme_w * vl_ch_custo_filme_w;
							end if;
							vl_custo_operacional_w	:= vl_custo_operacional_w * tx_ajuste_custo_oper_w;
							vl_medico_w		:= vl_medico_w * tx_ajuste_ch_honor_w;
							vl_filme_w		:= vl_filme_w * tx_ajuste_filme_w;
							nr_porte_anestesico_w	:= nr_porte_anest_cbhpm_w;
							vl_anestesista_w	:= 0;
							nr_auxiliares_w		:= coalesce(nr_auxiliar_cbhpm_w,0);
							vl_auxiliares_amb_w	:= 0;
						end if;
					end if;
					
					if (vl_auxiliares_amb_w > 0) then 
					
						vl_auxiliares_w		:= vl_auxiliares_amb_w;
						
					elsif (ie_origem_proced_w = 5) or
						(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'C') then
					
						/* Para CBHPM sempre paga 30% para o 1 auxiliar e 20% para o 2 auxiliar */
      
						if (nr_auxiliares_w > 0) then 
							vl_auxiliares_w	:= ((vl_medico_w * .3) + (vl_medico_w * (nr_auxiliares_w -1) * .2));
						end if;
					end if;
					
					if (ie_origem_proced_w = 1) or (ie_origem_proced_w = 4) or
						(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'A' AND ie_porte_amb_tuss_w = 'A') then 
						
						/* obter valor do porte anestesico */
      
						begin                         
							select	vl_porte_anestesico    
							into STRICT	vl_porte_anestesico_w    
							from	porte_anestesico         
							where	cd_edicao_amb		= cd_edicao_amb_w     
							and	nr_porte_anestesico	= nr_porte_anestesico_w                           
							and	dt_inicio_vigencia	=      
									(	SELECT	max(b.dt_inicio_vigencia)       
										from	porte_anestesico b    
										where	b.cd_edicao_amb		= cd_edicao_amb_w
										and	b.nr_porte_anestesico	= nr_porte_anestesico_w                      
										and	b.dt_inicio_vigencia	<= regra_simulacao_preco_proc_p.dt_guia);
						exception                     
							when others then             
								vl_porte_anestesico_w	:= 0;
						end;
						/* calcular valor do anestesista */

					
						if (vl_porte_anestesico_w 	= 0) and (vl_anestesista_w	> 0) then  
							if (ie_ch_padrao_anestesista_w	= 'C') then
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_anestesista_w * vl_ch_anestesista_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w);
							elsif (ie_ch_padrao_anestesista_w	= 'M') then
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							else
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_anestesista_w * vl_ch_anestesista_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;
						end if;
						if (vl_porte_anestesico_w > 0) then  
							if (ie_ch_padrao_anestesista_w	= 'C') then
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_porte_anestesico_w * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (vl_porte_anestesico_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w);
							elsif (ie_ch_padrao_anestesista_w	= 'M') then
								vl_anestesista_w	:= (vl_porte_anestesico_w);
								
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							else
									
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_porte_anestesico_w * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (vl_porte_anestesico_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;			
																				
						end if;
							
					elsif (ie_origem_proced_w = 5) or
						(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'C')then 
					
						-- Quando for para buscar do preco informado nao olha para a tabela de preco.
						if (ie_ch_padrao_anestesista_w	= 'C') then
							if (ie_preco_informado_w = 'N' or coalesce(ie_preco_informado_w::text, '') = '') then
						
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0)  * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0));
								end if;
							end if;
							vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w);

						elsif (ie_ch_padrao_anestesista_w	= 'M') then
							
							if (ie_preco_informado_w = 'N' or coalesce(ie_preco_informado_w::text, '') = '') then
							
								vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0));
							
							end if;
							vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
						else
								
							if (ie_preco_informado_w = 'N' or coalesce(ie_preco_informado_w::text, '') = '') then
							
								vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0) * vl_ch_anestesista_w * tx_ajuste_partic_w);
						
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0)  * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (coalesce(vl_porte_anest_cbhpm_w,0));
								end if;
							end if;
							vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
						end if;			
						
					elsif	(ie_origem_proced_w = 8 AND ie_calculo_tuss_w = 'A') then
						 
						begin                         
							select	vl_porte    
							into STRICT	vl_porte_anestesico_w    
							from	tuss_porte         
							where	cd_porte	= nr_porte_anestesico_w                           
							and	dt_vigencia	<= regra_simulacao_preco_proc_p.dt_guia;
						exception                     
							when others then             
								vl_porte_anestesico_w	:= 0;
						end;
						
						if (ie_ch_padrao_anestesista_w	= 'C') then
							if (vl_porte_anestesico_w 	= 0) and (vl_anestesista_w	> 0) then  
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_anestesista_w * vl_ch_anestesista_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w);
							end if;
							
							if (vl_porte_anestesico_w > 0) then       
								vl_anestesista_w	:= (vl_porte_anestesico_w);
								
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;

						elsif (ie_ch_padrao_anestesista_w	= 'M') then
							if (vl_porte_anestesico_w 	= 0) and (vl_anestesista_w	> 0) then
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_anestesista_w * vl_ch_anestesista_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;
							
							if (vl_porte_anestesico_w > 0) then       
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_porte_anestesico_w * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (vl_porte_anestesico_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;
						else
								
							if (vl_porte_anestesico_w 	= 0) and (vl_anestesista_w	> 0) then
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_anestesista_w * vl_ch_anestesista_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;
							
							if (vl_porte_anestesico_w > 0) then       
								if (vl_ch_anestesista_w > 0 ) then
									vl_anestesista_w	:= (vl_porte_anestesico_w * vl_ch_anestesista_w );
								else
									vl_anestesista_w	:= (vl_porte_anestesico_w);
								end if;
								vl_anestesista_w	:= (vl_anestesista_w * tx_ajuste_partic_w * vl_ch_honorarios_w);
							end if;
						end if;			
						
						
					end if;
					--Vl proc tabela e um campo utilizado por hora somente para relatorio deve ser armazerado neste momento para que nao sofra allteracao OS 732043
					vl_proc_tabela_w		:= coalesce(vl_medico_w,0);
					vl_custo_operacional_tab_w	:= coalesce(vl_custo_operacional_w,0);
					qt_filme_tab_w			:= coalesce(qt_filme_w,0);
					/* calcular valor do procedimento */

					if (coalesce(vl_proc_negociado_w,0) > 0) and (ie_preco_informado_w	= 'S') then
						/* Felipe - OS 111739 - Retirei o vl_filme_w da somatoria do vl_soma_proc_w */
						vl_soma_proc_w		:= (vl_custo_operacional_w + vl_medico_w +                
									   vl_auxiliares_w + vl_anestesista_w + vl_materiais_w);
						if (vl_soma_proc_w = 0) then  
							pr_ajuste_w	:= 1;
						else                          
							pr_ajuste_w	:= dividir_sem_round(vl_proc_negociado_w,vl_soma_proc_w);
						end if;
						vl_base_filme_w		:= vl_materiais_w; -- aldellandrea os 774659
						vl_medico_w		:= vl_medico_w * pr_ajuste_w;
						vl_anestesista_w	:= vl_anestesista_w * pr_ajuste_w;
						vl_auxiliares_w		:= vl_auxiliares_w * pr_ajuste_w;
						vl_materiais_w		:= vl_materiais_w * pr_ajuste_w;
						if (vl_custo_operacional_w <> 0) then      
							vl_custo_operacional_w :=	vl_proc_negociado_w - vl_medico_w - vl_auxiliares_w -  
											vl_anestesista_w - vl_materiais_w;
						end if;
						vl_soma_proc_w		:= (vl_custo_operacional_w + vl_medico_w +                
									   vl_auxiliares_w + vl_anestesista_w + vl_materiais_w);
						vl_saldo_w		:= vl_procedimento_w - vl_soma_proc_w;
						if (vl_saldo_w <> 0) then     
							if (vl_custo_operacional_w	> 0) then      
								vl_custo_operacional_w	:= vl_custo_operacional_w + vl_saldo_w;
							elsif (vl_materiais_w	> 0) then  
								vl_materiais_w	:= vl_materiais_w + vl_saldo_w;
							elsif (vl_medico_w	> 0) then 
								vl_medico_w	:= vl_medico_w + vl_saldo_w;
							end if;
						end if;
						vl_filme_w := vl_materiais_w;
					else
						vl_procedimento_w 	:= (	coalesce(vl_custo_operacional_w,0) + coalesce(vl_anestesista_w,0) + coalesce(vl_medico_w,0) +                                                                                                 
										coalesce(vl_filme_w,0) + coalesce(vl_auxiliares_w,0));      	
					end if;

					
					if (tx_ajuste_geral_w	<> 1) then
						vl_procedimento_w	:= vl_procedimento_w * tx_ajuste_geral_w;
						vl_custo_operacional_w	:= vl_custo_operacional_w * tx_ajuste_geral_w;
						vl_anestesista_w	:= vl_anestesista_w * tx_ajuste_geral_w;
						vl_medico_w	:= vl_medico_w * tx_ajuste_geral_w;
						vl_filme_w	:= vl_filme_w * tx_ajuste_geral_w;


						vl_auxiliares_w	:= vl_auxiliares_w * tx_ajuste_geral_w;
					end if;
					
					
					-- Apenas insere a regra, se o valor e maior que zero
					if (coalesce(vl_procedimento_w,0) > 0) then
						
						-- Aplica o deflator / inflator se existir
						vl_procedimento_w := pls_smp_pck.gerar_valor_deflator(regra_simulacao_p, vl_procedimento_w);
						
						insert into pls_smp_result_regra(	nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											nr_seq_smp_result_regra,
											vl_simulacao,
											nr_seq_regra_preco_proc,
											nr_seq_regra_preco_mat,
											nr_seq_regra_preco_servico)
						SELECT	nextval('pls_smp_result_regra_seq'),
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							regra_simulacao_preco_proc_p.nr_seq_item_proc,
							vl_procedimento_w,
							nr_seq_regra_ww,
							null,
							null
						;
					end if; -- fim se tem valor
						
					commit;									
										
				end if;  -- if se possuir regra localizada
			end if;  -- se nao for regra de excecao
		
		end loop; -- fim navegar pelo cursor
		
		close cur_proc_w;
			
	end if; -- abriu corretamente o cursor
	
end if; -- fim se possuir regra e proc informado
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_smp_pck.gerar_regra_precos_proc ( regra_simulacao_p pls_smp_pck.regra_simulacao, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, regra_simulacao_preco_proc_p pls_smp_pck.regra_simulacao_preco_proc) FROM PUBLIC;
