-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pkg_tie_account_batch.criar_movimento_contabil ( seq_lote_p lote_contabil.nr_lote_contabil%TYPE, ds_erro_p INOUT text ) AS $body$
DECLARE

        id_account_batch_w     lote_contabil.nr_lote_contabil%TYPE;
        cd_estabelecimento_w   ctb_movimento.cd_estabelecimento%TYPE;
        dt_referencia_w        lote_contabil.dt_referencia%TYPE;
        current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE     lote_contabil.nr_lote_contabil%TYPE;
        nr_lote_externo_w      lote_contabil.nr_lote_externo%TYPE;
        dt_movimento_w         ctb_movimento.dt_movimento%TYPE;
        cd_conta_debito_w      ctb_movimento.cd_conta_debito%TYPE;
        cd_conta_credito_w     ctb_movimento.cd_conta_credito%TYPE;
        vl_movimento_w         ctb_movimento.vl_movimento%TYPE;
        nr_seq_agrupamento_w   ctb_movimento.nr_seq_agrupamento%TYPE;
        cd_historico_w         ctb_movimento.cd_historico%TYPE;
        ds_compl_historico_w   ctb_movimento.ds_compl_historico%TYPE;
        ds_observacao_w        ctb_movimento.ds_observacao%TYPE;
        dt_lancto_ext_w        ctb_movimento.dt_lancto_ext%TYPE;
        nr_seq_proj_rec_w      ctb_movimento.nr_seq_proj_rec%TYPE;
        nr_seq_mutacao_pl_w    ctb_movimento.nr_seq_mutacao_pl%TYPE;
        cd_centro_custo_w      ctb_movto_centro_custo.cd_centro_custo%TYPE;
        vl_movimento_mvto_w    ctb_movto_centro_custo.vl_movimento%TYPE;
        ds_erro_w              varchar(2000);
        nr_lote_contabil_ww    ctb_movimento.nr_lote_contabil%TYPE;
        cd_classif_debito_w    ctb_movimento.cd_classif_debito%TYPE;
        nr_seq_movimento_w     ctb_movimento.nr_sequencia%TYPE;
        cd_classif_credito_w   ctb_movimento.cd_classif_credito%TYPE;
        cd_centro_custo_ww     ctb_movto_centro_custo.cd_centro_custo%TYPE;
        nr_seq_mov_cc_w        ctb_movto_centro_custo.nr_sequencia%TYPE;
        nr_rfc_w               movimento_contabil_doc.nr_rfc%TYPE;
        cd_conta_contabil_w    conta_contabil.cd_conta_contabil%TYPE;
        ie_debito_credito_w    varchar(1);
        size_cost_center       integer;
        id_movement_w          bigint;
        contador_w             bigint := 0;


  i RECORD;
  j RECORD;

BEGIN
        SELECT
            ID_ACCOUNT_BATCH,
            ESTABLISHMENT_ID,
            REF_DATE,
            BATCH_ID,
            EXTERNAL_ID
        INTO STRICT
            id_account_batch_w,
            cd_estabelecimento_w,
            dt_referencia_w,
            current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE,
            nr_lote_externo_w
        FROM
            tie_account_batch
        WHERE ID_ACCOUNT_BATCH = seq_lote_p;

    FOR i IN (
        SELECT
            ID_MOVEMENT,
            ID_ACCOUNT_BATCH,
            MOVEMENT_DATE,
            DEBIT_ACCOUNT,
            CREDIT_ACCOUNT,
            MOVEMENT_VALUE,
            ID_GROUP,
            HISTORIC_ID,
            COMPLEMENT_HIST,
            ADDITIONAL_NOTE,
            RELEASE_DATE,
            PROJECT_ID,
            MUTATION_ID,
            RFC_ID
        FROM
            TIE_ACCOUNTING_MOVEMENT
        WHERE ID_ACCOUNT_BATCH = id_account_batch_w
        ORDER BY
            ID_MOVEMENT
    ) LOOP
        id_movement_w := i.ID_MOVEMENT;
        dt_movimento_w := i.MOVEMENT_DATE;
        cd_conta_debito_w := i.DEBIT_ACCOUNT;
        cd_conta_credito_w := i.CREDIT_ACCOUNT;
        vl_movimento_w := i.MOVEMENT_VALUE;
        nr_seq_agrupamento_w := i.ID_GROUP;
        cd_historico_w := i.HISTORIC_ID;
        ds_compl_historico_w := i.COMPLEMENT_HIST;
        ds_observacao_w := i.ADDITIONAL_NOTE;
        dt_lancto_ext_w := i.RELEASE_DATE;
        nr_seq_proj_rec_w := i.PROJECT_ID;
        nr_seq_mutacao_pl_w := i.MUTATION_ID;
        nr_rfc_w := i.RFC_ID;

        ds_erro_p := pkg_tie_account_batch.get_validations_mvto(cd_estabelecimento_w, dt_referencia_w, current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE, dt_movimento_w, cd_conta_debito_w,
                    cd_conta_credito_w, vl_movimento_w, cd_historico_w, nr_seq_proj_rec_w, nr_seq_mutacao_pl_w);

        IF coalesce(ds_erro_p::text, '') = '' THEN
            IF ( current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%coalesce(TYPE::text, '') = '' AND contador_w = 0 ) THEN
                SELECT
                    coalesce(MAX(nr_lote_contabil), 0) + 1
                INTO STRICT nr_lote_contabil_ww
                FROM
                    lote_contabil;

                BEGIN
                    INSERT INTO lote_contabil(
                        nr_lote_contabil,
                        dt_referencia,
                        cd_tipo_lote_contabil,
                        dt_atualizacao,
                        nm_usuario,
                        cd_estabelecimento,
                        ie_situacao,
                        vl_debito,
                        vl_credito,
                        dt_integracao,
                        dt_atualizacao_saldo,
                        dt_consistencia,
                        nm_usuario_original,
                        nr_seq_mes_ref,
                        ie_encerramento,
                        ds_observacao,
                        nr_lote_externo,
                        ie_status_origem
                    ) VALUES (
                        nr_lote_contabil_ww,
                        dt_referencia_w,
                        12,
                        clock_timestamp(),
                        'integracao',
                        cd_estabelecimento_w,
                        'A',
                        0,
                        0,
                        NULL,
                        NULL,
                        NULL,
                        'integracao',
                        current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%TYPE,
                        'N',
                        'Lote gerado atraves de integracao',
                        nr_lote_externo_w,
                        'TIE'
                    );

                EXCEPTION
                    WHEN OTHERS THEN
                        ds_erro_w := sqlerrm(SQLSTATE);
                END;

            END IF;

            IF ( coalesce(nr_lote_contabil_ww::text, '') = '' ) THEN
                nr_lote_contabil_ww := current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE;
            ELSIF ( current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%coalesce(TYPE::text, '') = '' ) THEN
                PERFORM set_config('pkg_tie_account_batch.nr_lote_contabil_w', nr_lote_contabil_ww, false);
            END IF;

            IF ( coalesce(ds_erro_w, 'X') = 'X' ) THEN
                BEGIN
                    nr_seq_movimento_w := NULL;
                    IF (cd_conta_debito_w IS NOT NULL AND cd_conta_debito_w::text <> '') THEN
                        cd_classif_debito_w := ctb_obter_classif_conta(cd_conta_debito_w, NULL, dt_movimento_w);
                        SELECT
                            MAX(nr_sequencia)
                        INTO STRICT nr_seq_movimento_w
                        FROM
                            ctb_movimento
                        WHERE
                            nr_lote_contabil = current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE
                            AND dt_movimento = dt_movimento_w
                                AND cd_conta_debito = cd_conta_debito_w
                                    AND cd_historico = cd_historico_w
                                        AND vl_movimento = vl_movimento_w;

                    END IF;

                    IF (cd_conta_credito_w IS NOT NULL AND cd_conta_credito_w::text <> '') THEN
                        cd_classif_credito_w := ctb_obter_classif_conta(cd_conta_credito_w, NULL, dt_movimento_w);
                        SELECT
                            MAX(nr_sequencia)
                        INTO STRICT nr_seq_movimento_w
                        FROM
                            ctb_movimento
                        WHERE
                            nr_lote_contabil = current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE
                            AND dt_movimento = dt_movimento_w
                                AND cd_conta_credito = cd_conta_credito_w
                                    AND cd_historico = cd_historico_w
                                        AND vl_movimento = vl_movimento_w;

                    END IF;

                    IF coalesce(nr_seq_movimento_w::text, '') = '' THEN
                        BEGIN
                            SELECT
                                nextval('ctb_movimento_seq')
                            INTO STRICT nr_seq_movimento_w
;

                            INSERT INTO ctb_movimento(
                                nr_sequencia,
                                nr_lote_contabil,
                                nr_seq_mes_ref,
                                dt_movimento,
                                vl_movimento,
                                dt_atualizacao,
                                nm_usuario,
                                cd_historico,
                                cd_conta_debito,
                                cd_conta_credito,
                                ds_compl_historico,
                                nr_seq_agrupamento,
                                ie_revisado,
                                cd_estabelecimento,
                                nm_usuario_nrec,
                                dt_atualizacao_nrec,
                                cd_classif_debito,
                                cd_classif_credito,
                                ds_observacao,
                                nr_seq_mutacao_pl,
                                dt_lancto_ext,
                                nr_seq_proj_rec
                            ) VALUES (
                                nr_seq_movimento_w,
                                current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE,
                                current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%TYPE,
                                dt_movimento_w,
                                vl_movimento_w,
                                clock_timestamp(),
                                'integracao',
                                cd_historico_w,
                                cd_conta_debito_w,
                                cd_conta_credito_w,
                                ds_compl_historico_w,
                                nr_seq_agrupamento_w,
                                'N',
                                cd_estabelecimento_w,
                                'WebService',
                                clock_timestamp(),
                                cd_classif_debito_w,
                                cd_classif_credito_w,
                                'Lote gerado atraves de integracao',
                                nr_seq_mutacao_pl_w,
                                dt_lancto_ext_w,
                                nr_seq_proj_rec_w
                            );

                            IF (nr_rfc_w IS NOT NULL AND nr_rfc_w::text <> '') THEN
                                IF (cd_conta_debito_w IS NOT NULL AND cd_conta_debito_w::text <> '') AND (cd_conta_credito_w IS NOT NULL AND cd_conta_credito_w::text <> '') THEN
                                    cd_conta_contabil_w := NULL;
                                    ie_debito_credito_w := NULL;
                                ELSIF (cd_conta_debito_w IS NOT NULL AND cd_conta_debito_w::text <> '') THEN
                                    cd_conta_contabil_w := cd_conta_debito_w;
                                    ie_debito_credito_w := 'D';
                                ELSIF (cd_conta_credito_w IS NOT NULL AND cd_conta_credito_w::text <> '') THEN
                                    cd_conta_contabil_w := cd_conta_credito_w;
                                    ie_debito_credito_w := 'C';
                                END IF;

                                INSERT INTO movimento_contabil_doc(
                                    nr_sequencia,
                                    nr_lote_contabil,
                                    nr_seq_info,
                                    cd_conta_contabil,
                                    ie_debito_credito,
                                    cd_historico,
                                    ds_compl_historico,
                                    dt_movimento,
                                    vl_movimento,
                                    nr_seq_ctb_movto,
                                    dt_atualizacao,
                                    nm_usuario,
                                    nr_rfc
                                ) VALUES (
                                    nextval('movimento_contabil_doc_seq'),
                                    current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE,
                                    99, --tabela informacao_contabil
                                    cd_conta_contabil_w,
                                    ie_debito_credito_w,
                                    cd_historico_w,
                                    ds_compl_historico_w,
                                    dt_movimento_w,
                                    vl_movimento_w,
                                    nr_seq_movimento_w, --nr_seq_ctb_movto
                                    clock_timestamp(),
                                    'integracao',
                                    nr_rfc_w
                                );

                            END IF;

                        EXCEPTION
                            WHEN OTHERS THEN
                                ds_erro_w := substr(sqlerrm(SQLSTATE), 1, 255);
                                ds_erro_w := substr(ds_erro_w || 'Error generating accounting movement', 1, 255);
                        END;

                        SELECT
                            COUNT(*)
                        INTO STRICT size_cost_center
                        FROM
                            TIE_COST_CENTER
                        WHERE
                            ID_MOVEMENT = id_movement_w;

                        FOR j IN (
                            SELECT
                                COST_CENTER_ID,
                                COST_CENTER_MOVEMENT
                            FROM
                                TIE_COST_CENTER
                            WHERE
                                ID_MOVEMENT = id_movement_w
                            AND ID_ACCOUNT_BATCH = id_account_batch_w
                        ) LOOP
                            cd_centro_custo_w := j.COST_CENTER_ID;
                            vl_movimento_mvto_w := j.COST_CENTER_MOVEMENT;
                            ds_erro_p := pkg_tie_account_batch.get_validations_cost(cd_estabelecimento_w, cd_centro_custo_w, vl_movimento_mvto_w);
                            IF coalesce(ds_erro_p::text, '') = '' THEN
                                SELECT
                                    coalesce(MAX(cd_centro_custo), NULL)
                                INTO STRICT cd_centro_custo_ww
                                FROM
                                    centro_custo
                                WHERE
                                    cd_estabelecimento = cd_estabelecimento_w
                                    AND cd_centro_custo = cd_centro_custo_w;

                                IF (cd_centro_custo_ww IS NOT NULL AND cd_centro_custo_ww::text <> '') THEN
                                    BEGIN
                                        INSERT INTO ctb_movto_centro_custo(
                                            nr_sequencia,
                                            nr_seq_movimento,
                                            cd_centro_custo,
                                            dt_atualizacao,
                                            nm_usuario,
                                            vl_movimento,
                                            pr_rateio
                                        ) VALUES (
                                            nextval('ctb_movto_centro_custo_seq'),
                                            nr_seq_movimento_w,
                                            cd_centro_custo_ww,
                                            clock_timestamp(),
                                            'integracao',
                                            vl_movimento_mvto_w,
                                            100
                                        );

                                    EXCEPTION
                                        WHEN OTHERS THEN
                                            ds_erro_w := sqlerrm(SQLSTATE);
                                            ds_erro_w := substr('Error generating movement by cost center: ' || ds_erro_w, 1, 255
                                            );
                                    END;

                                ELSIF ( coalesce(cd_centro_custo_ww::text, '') = '' ) AND (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') THEN
                                    ds_erro_w := substr('Cost center not registered/linked in Tasy: ' || cd_centro_custo_w, 1, 255
                                    );
                                END IF;

                            ELSE
                                ROLLBACK;
                                return;
                            END IF;

                        END LOOP;

                    END IF;

                END;
            END IF;

            IF ( coalesce(ds_erro_w::text, '') = '' ) THEN
                ds_erro_p := 'Successful! Account batch created ' || current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE;
            ELSE
                ds_erro_p := substr(ds_erro_w, 0, 255);
            END IF;

        ELSE
            ROLLBACK;
            return;
        END IF;
    contador_w := contador_w + 1;
    END LOOP;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_tie_account_batch.criar_movimento_contabil ( seq_lote_p lote_contabil.nr_lote_contabil%TYPE, ds_erro_p INOUT text ) FROM PUBLIC;
