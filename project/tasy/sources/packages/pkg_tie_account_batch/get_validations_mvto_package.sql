-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pkg_tie_account_batch.get_validations_mvto ( cd_estabelecimento_p ctb_movimento.cd_estabelecimento%TYPE, dt_referencia_p lote_contabil.dt_referencia%TYPE, nr_lote_contabil_p lote_contabil.nr_lote_contabil%TYPE, dt_movimento_p ctb_movimento.dt_movimento%TYPE, cd_conta_debito_p ctb_movimento.cd_conta_debito%TYPE, cd_conta_credito_p ctb_movimento.cd_conta_credito%TYPE, vl_movimento_p ctb_movimento.vl_movimento%TYPE, cd_historico_p ctb_movimento.cd_historico%TYPE, nr_seq_proj_rec_p ctb_movimento.nr_seq_proj_rec%TYPE, nr_seq_mutacao_pl_p ctb_movimento.nr_seq_mutacao_pl%TYPE ) RETURNS varchar AS $body$
DECLARE


        ds_erro_w              varchar(5000);
        cd_estabelecimento_w   ctb_movimento.cd_estabelecimento%TYPE;
        dt_fech_diario_w       timestamp;
        current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE     lote_contabil.nr_lote_contabil%TYPE;
        cd_conta_debito_w      ctb_movimento.cd_conta_debito%TYPE;
        cd_conta_credito_w     ctb_movimento.cd_conta_credito%TYPE;
        dt_fechamento_w        timestamp;
        cd_empresa_conta_w     bigint;
        nr_seq_proj_rec_w      ctb_movimento.nr_seq_proj_rec%TYPE;
        nr_seq_mutacao_pl_w    ctb_movimento.nr_seq_mutacao_pl%TYPE;
        cd_historico_w         ctb_movimento.cd_historico%TYPE;
        cd_centro_custo_w      ctb_movto_centro_custo.cd_centro_custo%TYPE;
        ie_status_origem_w     ctb_movto_centro_custo.vl_movimento%TYPE;

BEGIN
    --VALIDACAO CAMPOS OBRIGATORIOS
        IF ( coalesce(cd_estabelecimento_p::text, '') = '' ) THEN
            ds_erro_w := 'The establishment is a mandatory field.';
        ELSIF ( coalesce(dt_referencia_p::text, '') = '' ) THEN
            ds_erro_w := 'Reference date is a mandatory field.';
        ELSIF ( coalesce(dt_movimento_p::text, '') = '' ) THEN
            ds_erro_w := 'Movement date is a mandatory field.';
        ELSIF ( coalesce(vl_movimento_p::text, '') = '' ) THEN
            ds_erro_w := 'Movement value is a mandatory field.';
        ELSIF ( coalesce(cd_historico_p::text, '') = '' ) THEN
            ds_erro_w := 'History number is a mandatory field.';
        ELSE
            SELECT
                coalesce(MAX(cd_estabelecimento), NULL)
            INTO STRICT cd_estabelecimento_w
            FROM
                estabelecimento
            WHERE
                cd_estabelecimento = cd_estabelecimento_p;

   --validacao estabelecimento 
            IF coalesce(cd_estabelecimento_w::text, '') = '' THEN
                ds_erro_w := substr('There is no establishment '
                                    || cd_estabelecimento_p
                                    || ' registered in Tasy. ', 1, 255);
            END IF;

            --validacao mes ref    
            if (dt_referencia_p IS NOT NULL AND dt_referencia_p::text <> '') and coalesce(ds_erro_w::text, '') = '' then
                SELECT
                    coalesce(MAX(nr_sequencia), NULL)
                INTO STRICT current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%TYPE
                FROM
                    ctb_mes_ref
                WHERE
                    to_char(dt_referencia, 'MM/YYYY') = to_char(to_date(dt_referencia_p), 'MM/YYYY')
                    AND cd_empresa = obter_empresa_estab(cd_estabelecimento_w);

                IF current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%coalesce(TYPE::text, '') = '' THEN
                    ds_erro_w := substr('There is no month '
                                        || dt_referencia_p
                                        || ' registered in Tasy. ', 1, 255);

                --validacao dt_referencia
                ELSE
                    SELECT
                        MAX(dt_fechamento)
                    INTO STRICT dt_fechamento_w
                    FROM
                        ctb_mes_ref
                    WHERE
                        nr_sequencia = current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%TYPE;

                    IF (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') THEN
                        ds_erro_w := substr('Month '
                                            || to_char(dt_fechamento_w, 'dd/mm/yyyy')
                                            || ' is already closed in the accounting.', 1, 255);

                    END IF;

                    SELECT
                        coalesce(MAX(dt_fech_diario), NULL)
                    INTO STRICT dt_fech_diario_w
                    FROM
                        ctb_mes_ref
                    WHERE
                        nr_sequencia = current_setting('pkg_tie_account_batch.nr_seq_mes_ref_w')::lote_contabil.nr_seq_mes_ref%TYPE;

                    IF (dt_fech_diario_w IS NOT NULL AND dt_fech_diario_w::text <> '') AND ( dt_fech_diario_w > dt_movimento_p ) THEN
                        ds_erro_w := substr('The movement date is greater than the Daily closing date informed in the accounting month record.'
                        , 1, 255);
                    END IF;
                END IF;
            end if;

            --VALIDACAO LOTE CONTABIL
            IF (nr_lote_contabil_p IS NOT NULL AND nr_lote_contabil_p::text <> '')  and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(nr_lote_contabil), NULL)
                INTO STRICT current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%TYPE
                FROM
                    lote_contabil
                WHERE
                    nr_lote_contabil = nr_lote_contabil_p;

                IF current_setting('pkg_tie_account_batch.nr_lote_contabil_w')::lote_contabil.nr_lote_contabil%coalesce(TYPE::text, '') = '' THEN
                    ds_erro_w := substr(' There is no accounting lot number '
                                        || nr_lote_contabil_p
                                        || ' registered in Tasy.', 1, 255);
                END IF;

            END IF;

    -- VALIDACAO CONTA DEBITO 
            IF (cd_conta_debito_p IS NOT NULL AND cd_conta_debito_p::text <> '') and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(cd_conta_contabil), NULL)
                INTO STRICT cd_conta_debito_w
                FROM
                    conta_contabil
                WHERE
                    cd_conta_contabil = cd_conta_debito_p
                    AND cd_empresa = obter_empresa_estab(cd_estabelecimento_p);

                IF coalesce(cd_conta_debito_w::text, '') = '' THEN
                    ds_erro_w := substr('Debit account not registered/linked in Tasy: ('
                                        || cd_conta_debito_p
                                        || ')', 1, 255);
                END IF;

            END IF;

        -- VALIDACAO CONTA CREDITO
            IF (cd_conta_credito_p IS NOT NULL AND cd_conta_credito_p::text <> '') and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(cd_conta_contabil), NULL)
                INTO STRICT cd_conta_credito_w
                FROM
                    conta_contabil
                WHERE
                    cd_conta_contabil = cd_conta_credito_p
                    AND cd_empresa = obter_empresa_estab(cd_estabelecimento_p);

                IF ( coalesce(cd_conta_credito_w, 0) = 0 ) THEN
                    ds_erro_w := substr('Credit account not registered/linked in Tasy: ('
                                        || cd_conta_credito_p
                                        || ')', 1, 255);
                END IF;

            END IF;

    -- VALIDACAO PROJETO RECURSO 
            IF (nr_seq_proj_rec_p IS NOT NULL AND nr_seq_proj_rec_p::text <> '') and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(nr_sequencia), NULL)
                INTO STRICT nr_seq_proj_rec_w
                FROM
                    projeto_recurso
                WHERE
                    nr_sequencia = nr_seq_proj_rec_p;

                IF coalesce(nr_seq_proj_rec_w::text, '') = '' THEN
                    ds_erro_w := substr('There is no resource project'
                                        || nr_seq_proj_rec_p
                                        || ' registered in Tasy. ', 1, 255);
                END IF;

            END IF;

        -- VALIDACAO CTB MUTACAO
            IF (nr_seq_mutacao_pl_p IS NOT NULL AND nr_seq_mutacao_pl_p::text <> '') and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(nr_sequencia), NULL)
                INTO STRICT nr_seq_mutacao_pl_w
                FROM
                    ctb_mutacao_pl
                WHERE
                    nr_sequencia = nr_seq_mutacao_pl_p;

                IF coalesce(nr_seq_mutacao_pl_w::text, '') = '' THEN
                    ds_erro_w := substr('There is no mutation '
                                        || nr_seq_mutacao_pl_p
                                        || ' registered in Tasy. ', 1, 255);
                END IF;

            END IF;

    -- VALIDACAO HISTORICO 
            if (cd_historico_p IS NOT NULL AND cd_historico_p::text <> '') and coalesce(ds_erro_w::text, '') = '' THEN
                SELECT
                    coalesce(MAX(cd_historico), NULL)
                INTO STRICT cd_historico_w
                FROM
                    historico_padrao
                WHERE
                    cd_empresa = obter_empresa_estab(cd_estabelecimento_w)
                    AND cd_historico = cd_historico_p;

                IF coalesce(cd_historico_w::text, '') = '' THEN
                    ds_erro_w := substr('There is no historic '
                                        || cd_historico_p
                                        || ' registered in Tasy.', 1, 255);
                END IF;
            end if;
        END IF;

        RETURN ds_erro_w;
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_tie_account_batch.get_validations_mvto ( cd_estabelecimento_p ctb_movimento.cd_estabelecimento%TYPE, dt_referencia_p lote_contabil.dt_referencia%TYPE, nr_lote_contabil_p lote_contabil.nr_lote_contabil%TYPE, dt_movimento_p ctb_movimento.dt_movimento%TYPE, cd_conta_debito_p ctb_movimento.cd_conta_debito%TYPE, cd_conta_credito_p ctb_movimento.cd_conta_credito%TYPE, vl_movimento_p ctb_movimento.vl_movimento%TYPE, cd_historico_p ctb_movimento.cd_historico%TYPE, nr_seq_proj_rec_p ctb_movimento.nr_seq_proj_rec%TYPE, nr_seq_mutacao_pl_p ctb_movimento.nr_seq_mutacao_pl%TYPE ) FROM PUBLIC;
