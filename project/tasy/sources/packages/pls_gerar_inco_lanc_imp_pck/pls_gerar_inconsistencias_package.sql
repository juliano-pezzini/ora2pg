-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerar_inco_lanc_imp_pck.pls_gerar_inconsistencias ( nr_seq_lote_lanc_prog_p pls_lanc_prog_import_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


	nr_seq_lanc_prog_imp_w			pls_lanc_prog_importacao.nr_sequencia%type;
	nr_seq_pagador_w			pls_lanc_prog_importacao.nr_seq_pagador%type;
	nr_seq_segurado_w			pls_lanc_prog_importacao.nr_seq_segurado%type;
	nr_contrato_w				pls_lanc_prog_importacao.nr_contrato%type;
	nr_seq_contrato_w			pls_contrato.nr_sequencia%type;
	nr_seq_plano_sca_w			pls_sca_regra_contrato.nr_seq_plano%type;
	dt_rescisao_w				timestamp;
	dt_lote_w				timestamp;
	qt_inadimplementes_w			bigint;
	index_w					bigint;
	ie_possui_sca_w				varchar(10);

	C01 CURSOR FOR
		SELECT	nr_sequencia,
			nr_seq_pagador,
			nr_seq_segurado,
			nr_contrato
		from	pls_lanc_prog_importacao
		where	nr_seq_lote = nr_seq_lote_lanc_prog_p;

	C02 CURSOR FOR
		SELECT	nr_seq_plano
		from	pls_sca_regra_contrato
		where	nr_seq_contrato	= nr_seq_contrato_w
		and	dt_lote_w between coalesce(dt_inicio_vigencia,dt_lote_w) and fim_dia(coalesce(dt_fim_vigencia,dt_lote_w));

	
BEGIN

	select	dt_lote
	into STRICT	dt_lote_w
	from	pls_lanc_prog_import_lote
	where	nr_sequencia	= nr_seq_lote_lanc_prog_p;

	/*Setar o usu√°rio*/

	CALL CALL CALL CALL CALL CALL CALL CALL pls_gerar_inco_lanc_imp_pck.set_nm_usuario(nm_usuario_p);

	current_setting('pls_gerar_inco_lanc_imp_pck.sca_lanc_imp_inc_rec_vetor_w')::sca_lanc_imp_inc_rec_v.delete;
	CALL pls_gerar_inco_lanc_imp_pck.armazenar_regras_sca();

	open C01;
	loop
	fetch C01 into
		nr_seq_lanc_prog_imp_w,
		nr_seq_pagador_w,
		nr_seq_segurado_w,
		nr_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		PERFORM set_config('pls_gerar_inco_lanc_imp_pck.ie_situacao_lanc_w', '3', false);
		dt_rescisao_w			:= null;
		qt_inadimplementes_w		:= 0;
		ie_possui_sca_w			:= 'S';

		delete	FROM pls_lanc_prog_imp_inco
		where	nr_seq_lanc_prog_imp	= nr_seq_lanc_prog_imp_w;

		if (coalesce(nr_seq_segurado_w::text, '') = '') and (coalesce(nr_seq_pagador_w::text, '') = '') then
			CALL CALL CALL pls_gerar_inco_lanc_imp_pck.inserir_inconsistencia(nr_seq_lanc_prog_imp_w,1);
		else
			if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				select	dt_rescisao,
					nr_seq_pagador
				into STRICT	dt_rescisao_w,
					nr_seq_pagador_w
				from	pls_segurado
				where	nr_sequencia	= nr_seq_segurado_w;
			elsif (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				select	dt_rescisao
				into STRICT	dt_rescisao_w
				from	pls_contrato_pagador
				where	nr_sequencia	= nr_seq_pagador_w;
			end if;

			if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') and (trunc(dt_rescisao_w,'dd') <= trunc(dt_lote_w,'dd')) then
				CALL CALL CALL pls_gerar_inco_lanc_imp_pck.inserir_inconsistencia(nr_seq_lanc_prog_imp_w,2);
			end if;

			if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				select	count(1)
				into STRICT	qt_inadimplementes_w
				from	pls_notificacao_item	d,
					pls_notificacao_pagador	c,
					pls_notificacao_lote	b,
					titulo_receber		a
				where	a.nr_titulo			= d.nr_titulo
				and	d.nr_seq_notific_pagador	= c.nr_sequencia
				and	c.nr_seq_lote			= b.nr_sequencia
				and	c.nr_seq_pagador		= nr_seq_pagador_w
				and	coalesce(a.dt_liquidacao::text, '') = ''
				and	(b.dt_envio IS NOT NULL AND b.dt_envio::text <> '') LIMIT 1;
			end if;

			if (qt_inadimplementes_w	> 0) then
				CALL CALL CALL pls_gerar_inco_lanc_imp_pck.inserir_inconsistencia(nr_seq_lanc_prog_imp_w,3);
			end if;

			if (current_setting('pls_gerar_inco_lanc_imp_pck.sca_lanc_imp_inc_rec_vetor_w')::sca_lanc_imp_inc_rec_v.count > 0) and (nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') then
				ie_possui_sca_w	:= 'N';
				select	max(nr_sequencia)
				into STRICT	nr_seq_contrato_w
				from	pls_contrato
				where	nr_contrato	= nr_contrato_w;

				if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
					open c02;
					loop
					fetch c02 into
						nr_seq_plano_sca_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin
						index_w	:= 0;

						for index_w in 1..sca_lanc_imp_inc_rec_vetor_w.count loop
							begin
							if (current_setting('pls_gerar_inco_lanc_imp_pck.sca_lanc_imp_inc_rec_vetor_w')::sca_lanc_imp_inc_rec_v[index_w].nr_seq_plano = nr_seq_plano_sca_w) then
								ie_possui_sca_w := 'S';
								exit;
							end if;
							end;
						end loop;

						if (ie_possui_sca_w = 'S') then
							exit;
						end if;
						end;
					end loop;
					close c02;

					if (ie_possui_sca_w = 'N') then
						CALL CALL CALL pls_gerar_inco_lanc_imp_pck.inserir_inconsistencia(nr_seq_lanc_prog_imp_w,4);
					end if;
				end if;
			end if;
		end if;

		update	pls_lanc_prog_importacao
		set	ie_situacao_lanc	= current_setting('pls_gerar_inco_lanc_imp_pck.ie_situacao_lanc_w')::pls_lanc_prog_importacao.ie_situacao_lanc%type,
			nm_usuario		= get_nm_usuario,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia		= nr_seq_lanc_prog_imp_w;

		end;
	end loop;
	close C01;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_inco_lanc_imp_pck.pls_gerar_inconsistencias ( nr_seq_lote_lanc_prog_p pls_lanc_prog_import_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
