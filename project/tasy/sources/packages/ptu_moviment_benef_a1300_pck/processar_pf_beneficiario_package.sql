-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ptu_moviment_benef_a1300_pck.processar_pf_beneficiario ( nr_seq_lote_p bigint, nr_seq_mov_empresa_p bigint, nr_seq_contrato_p bigint, dt_inicio_p timestamp) AS $body$
DECLARE

	
	nm_mae_benef_w			varchar(255);
	index_w				integer;
	pessoa_fisica_w			pessoa_fisica_w_record;
	qt_idade_w			integer;
	cd_municipio_residencia_w	varchar(255);
	ptu_mov_benef_empresa_seq_w	ptu_mov_benef_empresa.nr_sequencia%type;
	ie_brasileiro_w			nacionalidade.ie_brasileiro%type;
	dt_fim_w			timestamp;
	
	C01 CURSOR FOR
		SELECT	cd_pessoa_fisica
		from	w_ptu_mov_benef
		where	nr_seq_lote		= nr_seq_lote_p
		and	ie_tipo_contrato	= 'PF'
		and	ie_empresario_individual = 'N'
		and	ie_tipo_mov_cadastral	<> 'E'
		and	coalesce(nr_seq_contrato_p::text, '') = ''
		group by cd_pessoa_fisica
		
union all

		SELECT	cd_pessoa_fisica
		from	w_ptu_mov_benef
		where	nr_seq_lote		= nr_seq_lote_p
		and	nr_seq_contrato 	= nr_seq_contrato_p
		and	(nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '')
		and	ie_tipo_contrato	= 'PJ'
		and	ie_tipo_mov_cadastral	<> 'E'
		group by cd_pessoa_fisica
		
union all

		select	cd_pessoa_fisica
		from	w_ptu_mov_benef
		where	nr_seq_lote		= nr_seq_lote_p
		and	nr_seq_contrato 	= nr_seq_contrato_p
		and	(nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '')
		and	ie_tipo_contrato	= 'PF'
		and	ie_empresario_individual = 'S'
		and	ie_tipo_mov_cadastral	<> 'E'
		group by cd_pessoa_fisica;
	
	
BEGIN
	
	--Agrupa todas as pessoas  de contratos PF

	for r_c01_w in C01 loop
		begin
		index_w	:= C01%rowCount;
		
		select	substr(a.nm_pessoa_fisica,1,70),
			substr(a.nm_social,1,70),
			a.dt_nascimento,
			a.ie_sexo,
			substr(trim(both a.nr_cpf),1,14),
			a.nr_identidade,
			CASE WHEN a.ie_estado_civil='1' THEN 'S' WHEN a.ie_estado_civil='2' THEN 'M' WHEN a.ie_estado_civil='3' THEN 'D' WHEN a.ie_estado_civil='6' THEN 'A' WHEN a.ie_estado_civil='5' THEN 'W' WHEN a.ie_estado_civil='9' THEN 'U' WHEN a.ie_estado_civil='4' THEN 'U' WHEN a.ie_estado_civil='7' THEN 'U' END ,
			a.ds_orgao_emissor_ci,
			a.sg_emissora_ci,
			(	select	max(x.cd_ptu)
				from	pais x
				where	x.nr_sequencia	= a.nr_seq_pais),
			a.nr_cartao_nac_sus,
			a.nr_pis_pasep,
			a.cd_municipio_ibge,
			coalesce((	select	max(x.ie_brasileiro)
				from	nacionalidade x
				where	x.cd_nacionalidade = a.cd_nacionalidade),'N') ie_estrangeiro,
			obter_compl_pf(a.cd_pessoa_fisica,1,'CDM') cd_municipio_residencia,
			(	select max(x.nr_seq_genero)				
				from   pessoa_fisica_aux x
				where  x.cd_pessoa_fisica	= a.cd_pessoa_fisica) nr_seq_genero
		into STRICT	pessoa_fisica_w.nm_pessoa_fisica(index_w),
			pessoa_fisica_w.nm_social(index_w),
			pessoa_fisica_w.dt_nascimento(index_w),
			pessoa_fisica_w.ie_sexo(index_w),
			pessoa_fisica_w.nr_cpf(index_w),
			pessoa_fisica_w.nr_identidade(index_w),
			pessoa_fisica_w.cd_estado_civil(index_w),
			pessoa_fisica_w.ds_orgao_emissor(index_w),
			pessoa_fisica_w.sg_emissor_ci(index_w),
			pessoa_fisica_w.cd_pais_emissor_ci(index_w),
			pessoa_fisica_w.cd_cns(index_w),
			pessoa_fisica_w.nr_pis_pasep(index_w),
			pessoa_fisica_w.cd_municipio_ibge(index_w),
			ie_brasileiro_w,
			cd_municipio_residencia_w,
			pessoa_fisica_w.nr_seq_genero(index_w)
		from	pessoa_fisica a
		where	a.cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica;
		
		if (ie_brasileiro_w = 'S') then
			pessoa_fisica_w.ie_estrangeiro(index_w)	:= 'N';
		else
			pessoa_fisica_w.ie_estrangeiro(index_w)	:= 'S';
		end if;
		
		if (coalesce(cd_municipio_residencia_w::text, '') = '') then
			if (current_setting('ptu_moviment_benef_a1300_pck.ie_utilizar_ender_empresa_w')::varchar(30) = 'S') then
				ptu_mov_benef_empresa_seq_w	:= ptu_moviment_benef_a1300_pck.obter_ptu_mov_benef_empresa(nr_seq_contrato_p);
			
				if (ptu_mov_benef_empresa_seq_w IS NOT NULL AND ptu_mov_benef_empresa_seq_w::text <> '') then
					begin
					select	substr(cd_municipio_ibge,1,7)
					into STRICT	cd_municipio_residencia_w
					from	ptu_mov_benef_empresa
					where	nr_sequencia = ptu_mov_benef_empresa_seq_w;
					exception
					when others then
						cd_municipio_residencia_w	:= null;
					end;
				end if;
			end if;
		end if;

		pessoa_fisica_w.cd_municipio_residencia(index_w) := cd_municipio_residencia_w;		
		begin		
		select	nm_contato
		into STRICT	nm_mae_benef_w
		from	compl_pessoa_fisica
		where	cd_pessoa_fisica	= r_c01_w.cd_pessoa_fisica
		and	ie_tipo_complemento	= 5  LIMIT 1;
		exception
		when others then
			nm_mae_benef_w	:= '';
		end;
		
		if (length(nm_mae_benef_w) > 25) then
			nm_mae_benef_w	:= substr(pls_gerar_nome_abreviado(nm_mae_benef_w),1,255);
		end if;	
		
		pessoa_fisica_w.nm_mae(index_w)			:= nm_mae_benef_w;	
		pessoa_fisica_w.cd_pessoa_fisica(index_w)	:= r_c01_w.cd_pessoa_fisica;
		
		end;
	end loop;
	
	if (pessoa_fisica_w.nm_pessoa_fisica.count > 0) then
		for i in pessoa_fisica_w.nm_pessoa_fisica.first ..pessoa_fisica_w.nm_pessoa_fisica.count loop
			begin
			pessoa_fisica_w.nm_pessoa_fisica(i)	:= ptu_somente_caracter_permitido(pessoa_fisica_w.nm_pessoa_fisica(i),'ANS');
			pessoa_fisica_w.nm_social(i)		:= ptu_somente_caracter_permitido(pessoa_fisica_w.nm_social(i),'ANS');
			pessoa_fisica_w.nr_identidade(i)	:= ptu_somente_caracter_permitido(pessoa_fisica_w.nr_identidade(i),'AN');
			pessoa_fisica_w.ds_orgao_emissor(i)	:= ptu_somente_caracter_permitido(pessoa_fisica_w.ds_orgao_emissor(i),'AN');
			pessoa_fisica_w.sg_emissor_ci(i)	:= ptu_somente_caracter_permitido(pessoa_fisica_w.sg_emissor_ci(i),'AN');
			pessoa_fisica_w.cd_pais_emissor_ci(i)	:= ptu_somente_caracter_permitido(pessoa_fisica_w.cd_pais_emissor_ci(i),'AN');
			pessoa_fisica_w.nm_mae(i)		:= ptu_somente_caracter_permitido(pessoa_fisica_w.nm_mae(i),'ANS');		
			end;
		end loop;
	end if;
	
	forall i in pessoa_fisica_w.cd_pessoa_fisica.first ..pessoa_fisica_w.cd_pessoa_fisica.last	
		insert into ptu_mov_benef_pf_lote(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_lote,cd_pessoa_fisica,dt_nascimento,ie_sexo,
				ie_estado_civil,cd_cgc_cpf,nr_rg,
				ds_orgao_emissor_ci, sg_emissor_ci, cd_pais_emissor_ci,
				nr_cartao_nac_sus,nm_beneficiario, nm_mae_benef,
				nr_pis_pasep, cd_municipio_ibge_nasc, nr_seq_mov_empresa,
				ie_estrangeiro, nm_social, cd_municipio_residencia,nr_seq_genero)
		values (	nextval('ptu_mov_benef_pf_lote_seq'),clock_timestamp(),get_nm_usuario,clock_timestamp(),get_nm_usuario,
				nr_seq_lote_p,pessoa_fisica_w.cd_pessoa_fisica(i),pessoa_fisica_w.dt_nascimento(i),pessoa_fisica_w.ie_sexo(i),
				pessoa_fisica_w.cd_estado_civil(i),pessoa_fisica_w.nr_cpf(i),pessoa_fisica_w.nr_identidade(i),
				pessoa_fisica_w.ds_orgao_emissor(i), pessoa_fisica_w.sg_emissor_ci(i), pessoa_fisica_w.cd_pais_emissor_ci(i),
				pessoa_fisica_w.cd_cns(i),pessoa_fisica_w.nm_pessoa_fisica(i), pessoa_fisica_w.nm_mae(i),
				pessoa_fisica_w.nr_pis_pasep(i), pessoa_fisica_w.cd_municipio_ibge(i), nr_seq_mov_empresa_p,
				pessoa_fisica_w.ie_estrangeiro(i), pessoa_fisica_w.nm_social(i), pessoa_fisica_w.cd_municipio_residencia(i), pessoa_fisica_w.nr_seq_genero(i))
		returning nr_sequencia bulk collect into pessoa_fisica_w.nr_seq_mov_benef_pf;
	
	dt_fim_w	:= fim_dia(current_setting('ptu_moviment_benef_a1300_pck.ptu_mov_benef_lote_w')::ptu_mov_benef_lote%rowtype.dt_final);
	
	if (pessoa_fisica_w.nm_pessoa_fisica.count > 0) then
		for i in pessoa_fisica_w.nm_pessoa_fisica.first ..pessoa_fisica_w.nm_pessoa_fisica.count loop
			begin
			
			if (coalesce(pessoa_fisica_w.ie_sexo(i)::text, '') = '') then
				CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
							wheb_mensagem_pck.get_texto(1107814)/*Falta a informacao do sexo da pessoa fisica*/
);
			end if;
			
			if (coalesce(pessoa_fisica_w.dt_nascimento(i)::text, '') = '') then
				CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
							wheb_mensagem_pck.get_texto(1107817)/*Falta a informacao da data de nascimento da pessoa fisica*/
);
			end if;
			
			if (coalesce(pessoa_fisica_w.cd_estado_civil(i)::text, '') = '') then
				CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
							wheb_mensagem_pck.get_texto(1107818)/*Falta a informacao do estado civil da pessoa fisica*/
);
			end if;
			
			if (coalesce(pessoa_fisica_w.cd_cns(i)::text, '') = '') then
				CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
							wheb_mensagem_pck.get_texto(1107819)/*Falta a informacao do cartao nacional de saude da pessoa fisica*/
);
			end if;
			
			if ((pessoa_fisica_w.dt_nascimento(i) IS NOT NULL AND (pessoa_fisica_w.dt_nascimento(i))::text <> '')) and (pessoa_fisica_w.ie_estrangeiro(i) = 'N')then
				qt_idade_w	:= trunc(months_between(dt_fim_w, trunc(pessoa_fisica_w.dt_nascimento(i),'month')) / 12);
				
				if (qt_idade_w >= 18) and (coalesce(pessoa_fisica_w.nr_cpf(i),0) = 0) then
					CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
								wheb_mensagem_pck.get_texto(1107821)/*Falta a informacao do CPF da pessoa fisica*/
);
				elsif (qt_idade_w < 18) and (coalesce(pessoa_fisica_w.nr_cpf(i),0) = 0) and (trim(both pessoa_fisica_w.nm_mae(i)) is null) and (lpad(pessoa_fisica_w.nr_pis_pasep(i),11,'0') = '00000000000') then
					CALL ptu_moviment_benef_a1300_pck.gravar_log_inco_vetor(	nr_seq_mov_empresa_p,nr_seq_contrato_p,null,pessoa_fisica_w.cd_pessoa_fisica(i),null,
								wheb_mensagem_pck.get_texto(1107823)/*Falta a informacao do nome da mae ou PIS/PASE da pessoa fisica menor de idade*/
);
				end if;
			end if;
			end;
		end loop;
	end if;
	
	CALL ptu_moviment_benef_a1300_pck.gerar_info_compl_pf(pessoa_fisica_w,nr_seq_mov_empresa_p,nr_seq_contrato_p);
	CALL ptu_moviment_benef_a1300_pck.gerar_dados_beneficiario(nr_seq_lote_p,pessoa_fisica_w,nr_seq_contrato_p,dt_inicio_p);
	
	pessoa_fisica_w.cd_pessoa_fisica.delete;
	pessoa_fisica_w.dt_nascimento.delete;
	pessoa_fisica_w.ie_sexo.delete;
	pessoa_fisica_w.cd_estado_civil.delete;
	pessoa_fisica_w.nr_cpf.delete;
	pessoa_fisica_w.nr_identidade.delete;
	pessoa_fisica_w.ds_orgao_emissor.delete;
	pessoa_fisica_w.cd_cns.delete;
	pessoa_fisica_w.nm_mae.delete;
	pessoa_fisica_w.nr_pis_pasep.delete;
	
	end;
	

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_moviment_benef_a1300_pck.processar_pf_beneficiario ( nr_seq_lote_p bigint, nr_seq_mov_empresa_p bigint, nr_seq_contrato_p bigint, dt_inicio_p timestamp) FROM PUBLIC;
