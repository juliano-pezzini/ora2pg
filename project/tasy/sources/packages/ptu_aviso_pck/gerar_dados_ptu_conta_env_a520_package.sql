-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Gerar dados PTU_AVISO_CONTA para envio



CREATE OR REPLACE PROCEDURE ptu_aviso_pck.gerar_dados_ptu_conta_env_a520 ( nr_seq_aviso_protocolo_p ptu_aviso_protocolo.nr_sequencia%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, dados_a520_p dados_lote_a520_t, dados_gerais_a520_p dados_gerais_a520_t, alias_p alias_a520_t) AS $body$
DECLARE

						
cursor_w			sql_pck.t_cursor; 	-- Cursor para o sql dinamico
valor_bind_w			sql_pck.t_dado_bind;	-- Binds para o sql dinamico
ds_sql_w			varchar(32000);


-- Procedimento 

valor_bind_proc_w		sql_pck.t_dado_bind;	-- Binds para o sql dinamico
ds_sql_proc_w			varchar(32000);


-- Material

valor_bind_mat_w		sql_pck.t_dado_bind;	-- Binds para o sql dinamico
ds_sql_mat_w			varchar(32000);

-- navegacao do cursor dinamico

c_nr_seq_conta_w		ptu_aviso_conta.nr_sequencia%type;
c_nr_seq_segurado_w		ptu_aviso_conta.nr_seq_segurado%type;
c_nr_guia_principal_w		ptu_aviso_conta.nr_guia_principal%type;
c_nr_guia_operadora_w		ptu_aviso_conta.nr_guia_operadora%type;
c_nr_guia_prestador_w		ptu_aviso_conta.nr_guia_prestador%type;
c_cd_registro_ans_w		ptu_aviso_conta.cd_registro_ans%type;
c_dt_autorizacao_w		ptu_aviso_conta.dt_autorizacao%type;
c_cd_senha_w			ptu_aviso_conta.cd_senha%type;
c_dt_validade_senha_w		ptu_aviso_conta.dt_validade_senha%type;
c_nr_carteira_benef_w		ptu_aviso_conta.nr_carteira_benef%type;
c_ie_atendimento_rn_w		ptu_aviso_conta.ie_atendimento_rn%type;
c_nm_beneficiario_w		ptu_aviso_conta.nm_beneficiario%type;
c_nr_cns_benef_w		ptu_aviso_conta.nr_cns_benef%type;
c_ie_ident_beneficiario_w	ptu_aviso_conta.ie_ident_beneficiario%type;
c_cd_prestador_solicitante_w	ptu_aviso_conta.cd_prestador_solicitante%type;
c_cd_cpf_solicitante_w		ptu_aviso_conta.cd_cpf_solicitante%type;
c_cd_cnpj_solicitante_w		ptu_aviso_conta.cd_cnpj_solicitante%type;
c_nm_profissional_solic_w	ptu_aviso_conta.nm_profissional_solicitante%type;
c_sg_conselho_solicitante_w	ptu_aviso_conta.sg_conselho_solicitante%type;
c_nr_conselho_solicitante_w	ptu_aviso_conta.nr_conselho_solicitante%type;
c_sg_uf_solicitante_w		ptu_aviso_conta.sg_uf_solicitante%type;
c_nr_cbo_solicitante_w		ptu_aviso_conta.nr_cbo_solicitante%type;
c_nm_solicitante_w		ptu_aviso_conta.nm_solicitante%type;
c_cd_cnes_solicitante_w		ptu_aviso_conta.cd_cnes_solicitante%type;
c_dt_solicitacao_w		ptu_aviso_conta.dt_solicitacao%type;
c_ie_carater_atendimento_w	ptu_aviso_conta.ie_carater_atendimento%type;
c_ds_indicacao_clinica_w	ptu_aviso_conta.ds_indicacao_clinica%type;
c_cd_prestador_executante_w	ptu_aviso_conta.cd_prestador_executante%type;
c_cd_cpf_executante_w		ptu_aviso_conta.cd_cpf_executante%type;
c_cd_cnpj_executante_w		ptu_aviso_conta.cd_cnpj_executante%type;
c_nm_profissional_executante_w	ptu_aviso_conta.nm_profissional_executante%type;
c_sg_conselho_executante_w	ptu_aviso_conta.sg_conselho_executante%type;
c_nr_conselho_executante_w	ptu_aviso_conta.nr_conselho_executante%type;
c_sg_uf_executante_w		ptu_aviso_conta.sg_uf_executante%type;
c_nr_cbo_executante_w		ptu_aviso_conta.nr_cbo_executante%type;
c_nm_executante_w		ptu_aviso_conta.nm_executante%type;
c_cd_cnes_executante_w		ptu_aviso_conta.cd_cnes_executante%type;
c_ie_tipo_atendimento_w		ptu_aviso_conta.ie_tipo_atendimento%type;
c_ie_indicacao_acidente_w	ptu_aviso_conta.ie_indicacao_acidente%type;
c_ie_tipo_consulta_w		ptu_aviso_conta.ie_tipo_consulta%type;
c_ie_motivo_encerramento_w	ptu_aviso_conta.ie_motivo_encerramento%type;
c_ds_observacao_w		ptu_aviso_conta.ds_observacao%type;
c_vl_procedimento_w		ptu_aviso_conta.vl_procedimento%type;
c_vl_diaria_w			ptu_aviso_conta.vl_diaria%type;
c_vl_taxa_w			ptu_aviso_conta.vl_taxa%type;
c_vl_material_w			ptu_aviso_conta.vl_material%type;
c_vl_medicamento_w		ptu_aviso_conta.vl_medicamento%type;
c_vl_opme_w			ptu_aviso_conta.vl_opme%type;
c_vl_gases_w			ptu_aviso_conta.vl_gases%type;
c_vl_total_geral_w		ptu_aviso_conta.vl_total_geral%type;
c_ie_tipo_faturamento_w		ptu_aviso_conta.ie_tipo_faturamento%type;
c_dt_inicio_faturamento_w	ptu_aviso_conta.dt_inicio_faturamento%type;
c_dt_fim_faturamento_w		ptu_aviso_conta.dt_fim_faturamento%type;
c_hr_inicio_faturamento_w	ptu_aviso_conta.hr_inicio_faturamento%type;
c_hr_fim_faturamento_w		ptu_aviso_conta.hr_fim_faturamento%type;
c_ie_tipo_internacao_w		ptu_aviso_conta.ie_tipo_internacao%type;
c_ie_regime_internacao_w	ptu_aviso_conta.ie_regime_internacao%type;
c_ds_diagnostico_w		ptu_aviso_conta.ds_diagnostico%type;
c_dt_atendimento_ref_w		ptu_aviso_conta.dt_atendimento_ref%type;
c_cd_med_solic_pos_w		pessoa_fisica.cd_pessoa_fisica%type;
c_cd_med_exec_pos_w		pessoa_fisica.cd_pessoa_fisica%type;
c_cd_med_solic_conta_w		pessoa_fisica.cd_pessoa_fisica%type;
c_cd_med_exec_conta_w		pessoa_fisica.cd_pessoa_fisica%type;
c_nr_seq_prest_exec_pos_w	pls_prestador.nr_sequencia%type;
c_nr_seq_prest_exec_conta_w	pls_prestador.nr_sequencia%type;
c_ie_tipo_guia_w		pls_conta.ie_tipo_guia%type;
c_nr_seq_cbo_saude_solic_w	pls_conta.nr_seq_cbo_saude_solic%type;
------


nr_seq_aviso_conta_w		ptu_aviso_conta.nr_sequencia%type;
sg_estado_w			pessoa_juridica.sg_estado%type;
vl_procedimento_w		ptu_aviso_conta.vl_procedimento%type;
vl_diaria_w			ptu_aviso_conta.vl_diaria%type;
vl_taxa_w			ptu_aviso_conta.vl_taxa%type;
vl_material_w			ptu_aviso_conta.vl_material%type;
vl_medicamento_w		ptu_aviso_conta.vl_medicamento%type;
vl_opme_w			ptu_aviso_conta.vl_opme%type;
vl_gases_w			ptu_aviso_conta.vl_gases%type;
vl_total_geral_w		ptu_aviso_conta.vl_total_geral%type;
nr_seq_arquivo_w		ptu_aviso_arquivo.nr_sequencia%type;

-- SOLIC

cd_medico_solic_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_prestador_solicitante_w	ptu_aviso_conta.cd_prestador_solicitante%type;
cd_cpf_solicitante_w		ptu_aviso_conta.cd_cpf_solicitante%type;
cd_cnpj_solicitante_w		ptu_aviso_conta.cd_cnpj_solicitante%type;
nm_profissional_solicitante_w	ptu_aviso_conta.nm_profissional_solicitante%type;
sg_conselho_solicitante_w	varchar(10);
nr_conselho_solicitante_w	ptu_aviso_conta.nr_conselho_solicitante%type;
sg_uf_solicitante_w		ptu_aviso_conta.sg_uf_solicitante%type;
nr_cbo_solicitante_w		ptu_aviso_conta.nr_cbo_solicitante%type;
nm_solicitante_w		ptu_aviso_conta.nm_solicitante%type;
cd_cnes_solicitante_w		ptu_aviso_conta.cd_cnes_solicitante%type;
nr_seq_cbo_saude_solic_w	pls_conta.nr_seq_cbo_saude_solic%type;
qt_cbo_valido_w			integer;

-- EXEC

nr_seq_prest_exec_w		pls_prestador.nr_sequencia%type;
cd_cgc_exec_w			pessoa_juridica.cd_cgc%type;
cd_medico_exec_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_prestador_executante_w	ptu_aviso_conta.cd_prestador_executante%type;
cd_cpf_executante_w		ptu_aviso_conta.cd_cpf_executante%type;
cd_cnpj_executante_w		ptu_aviso_conta.cd_cnpj_executante%type;
nm_profissional_executante_w	ptu_aviso_conta.nm_profissional_executante%type;
sg_conselho_executante_w	ptu_aviso_conta.sg_conselho_executante%type;
nr_conselho_executante_w	ptu_aviso_conta.nr_conselho_executante%type;
sg_uf_executante_w		ptu_aviso_conta.sg_uf_executante%type;
nr_cbo_executante_w		ptu_aviso_conta.nr_cbo_executante%type;
nm_executante_w			ptu_aviso_conta.nm_executante%type;
cd_cnes_executante_w		ptu_aviso_conta.cd_cnes_executante%type;



BEGIN

-- Info do protocolo

select	max(a.nr_seq_arquivo)
into STRICT	nr_seq_arquivo_w
from	ptu_aviso_protocolo	a
where	a.nr_sequencia		= nr_seq_aviso_protocolo_p;

select	max(sg_estado)
into STRICT	sg_estado_w
from	pessoa_juridica	p,
	pls_outorgante	o
where	p.cd_cgc		= o.cd_cgc_outorgante
and	o.cd_estabelecimento	= dados_a520_p.cd_estabelecimento;


valor_bind_w := ptu_aviso_pck.gera_sql_arq_a520_conta(dados_a520_p, alias_p, nr_seq_aviso_protocolo_p, nr_seq_congenere_p, dados_gerais_a520_p, valor_bind_w);

valor_bind_w := sql_pck.executa_sql_cursor(ds_sql_w, valor_bind_w);

-- Carrega as regras dos itens

-- Por questoes de performance, hoje pode-se fazer a carga fora do loop, atualizando apenas as bind.

valor_bind_proc_w.delete;
valor_bind_proc_w := ptu_aviso_pck.gera_sql_arq_a520_proc(dados_a520_p, alias_p, null, dados_gerais_a520_p, valor_bind_proc_w);

valor_bind_mat_w.delete;
valor_bind_mat_w := ptu_aviso_pck.gera_sql_arq_a520_mat(dados_a520_p, alias_p, null, dados_gerais_a520_p, valor_bind_mat_w);

loop

fetch cursor_w  into	c_nr_seq_conta_w,		c_nr_seq_segurado_w,			c_nr_guia_principal_w,		c_nr_guia_operadora_w,	
			c_nr_guia_prestador_w,		c_cd_registro_ans_w,			c_dt_autorizacao_w,		c_cd_senha_w,
			c_dt_validade_senha_w,		c_nr_carteira_benef_w,			c_ie_atendimento_rn_w,		c_nm_beneficiario_w,
			c_nr_cns_benef_w,		c_ie_ident_beneficiario_w,		c_cd_prestador_solicitante_w,	c_cd_cpf_solicitante_w,
			c_cd_cnpj_solicitante_w,	c_nm_profissional_solic_w	,	c_sg_conselho_solicitante_w,	c_nr_conselho_solicitante_w,
			c_sg_uf_solicitante_w,		c_nr_cbo_solicitante_w,			c_nm_solicitante_w,		c_cd_cnes_solicitante_w,	
			c_dt_solicitacao_w,		c_ie_carater_atendimento_w,		c_ds_indicacao_clinica_w,	c_cd_prestador_executante_w,	
			c_cd_cpf_executante_w,		c_cd_cnpj_executante_w,			c_nm_profissional_executante_w,	c_sg_conselho_executante_w,	
			c_nr_conselho_executante_w,	c_sg_uf_executante_w,			c_nr_cbo_executante_w,		c_nm_executante_w,	
			c_cd_cnes_executante_w,		c_ie_tipo_atendimento_w,		c_ie_indicacao_acidente_w,	c_ie_tipo_consulta_w,	
			c_ie_motivo_encerramento_w,	c_ds_observacao_w,			c_vl_procedimento_w,		c_vl_diaria_w,	
			c_vl_taxa_w,			c_vl_material_w,			c_vl_medicamento_w,		c_vl_opme_w,	
			c_vl_gases_w,			c_vl_total_geral_w,			c_ie_tipo_faturamento_w,	c_dt_inicio_faturamento_w,
			c_dt_fim_faturamento_w,		c_hr_inicio_faturamento_w,		c_hr_fim_faturamento_w,		c_ie_tipo_internacao_w,
			c_ie_regime_internacao_w,	c_ds_diagnostico_w,			c_dt_atendimento_ref_w,		c_cd_med_solic_pos_w,
			c_cd_med_exec_pos_w,		c_cd_med_solic_conta_w,			c_cd_med_exec_conta_w,		c_nr_seq_prest_exec_pos_w,	
			c_nr_seq_prest_exec_conta_w,	c_ie_tipo_guia_w,			c_nr_seq_cbo_saude_solic_w;
EXIT WHEN NOT FOUND; /* apply on cursor_w */

	-- Inicializar variaveis

	-- Solic

	cd_medico_solic_w		:= coalesce(c_cd_med_solic_pos_w,c_cd_med_solic_conta_w); -- Sempre prioriza o pos, depois a conta
	cd_prestador_solicitante_w	:= c_cd_prestador_solicitante_w;
	cd_cpf_solicitante_w		:= c_cd_cpf_solicitante_w;
	cd_cnpj_solicitante_w		:= c_cd_cnpj_solicitante_w;
	nm_profissional_solicitante_w	:= c_nm_profissional_solic_w;
	sg_conselho_solicitante_w	:= c_sg_conselho_solicitante_w;
	nr_conselho_solicitante_w	:= c_nr_conselho_solicitante_w;
	sg_uf_solicitante_w		:= c_sg_uf_solicitante_w;
	nr_cbo_solicitante_w		:= c_nr_cbo_solicitante_w;
	nm_solicitante_w		:= c_nm_solicitante_w;
	cd_cnes_solicitante_w		:= coalesce(c_cd_cnes_solicitante_w,'9999999');
	nr_seq_cbo_saude_solic_w	:= c_nr_seq_cbo_saude_solic_w;
	
	-- Exec

	nr_seq_prest_exec_w		:= coalesce(c_nr_seq_prest_exec_pos_w,c_nr_seq_prest_exec_conta_w); -- Sempre prioriza o pos, depois a conta
	cd_medico_exec_w		:= coalesce(c_cd_med_exec_pos_w,c_cd_med_exec_conta_w); -- Sempre prioriza o pos, depois a conta
	cd_cgc_exec_w			:= null;
	cd_prestador_executante_w	:= c_cd_prestador_executante_w;
	cd_cpf_executante_w		:= c_cd_cpf_executante_w;
	cd_cnpj_executante_w		:= c_cd_cnpj_executante_w;
	nm_profissional_executante_w	:= c_nm_profissional_executante_w;
	sg_conselho_executante_w	:= c_sg_conselho_executante_w;
	nr_conselho_executante_w	:= c_nr_conselho_executante_w;
	sg_uf_executante_w		:= c_sg_uf_executante_w;
	nr_cbo_executante_w		:= c_nr_cbo_executante_w;
	nm_executante_w			:= c_nm_executante_w;
	cd_cnes_executante_w		:= substr(coalesce(coalesce(c_cd_cnes_executante_w, pls_obter_cnes_prestador(nr_seq_prest_exec_w)),'9999999'),1,7);
	qt_cbo_valido_w			:= 0;
		
	-- Medico solicitante

	if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '') then
		cd_cpf_solicitante_w		:= coalesce(substr(obter_dados_pf(cd_medico_solic_w,'CPF'),1,11),'99999999999');
		cd_cnpj_solicitante_w		:= null;
		nm_profissional_solicitante_w	:= substr(obter_nome_medico(cd_medico_solic_w,'N'),1,255);
		sg_conselho_solicitante_w	:= coalesce(substr(obter_dados_medico(cd_medico_solic_w,'SGCRM'),1,10),'06');
		nr_conselho_solicitante_w	:= substr(obter_dados_medico(cd_medico_solic_w,'CRM'),1,15);
		sg_uf_solicitante_w		:= substr(obter_dados_medico(cd_medico_solic_w,'UFCRM'),1,5);
		nm_solicitante_w		:= substr(coalesce(nm_solicitante_w,nm_profissional_solicitante_w),1,70);
		
		select	count(1)
		into STRICT	qt_cbo_valido_w
		from 	cbo_saude
		where	cd_cbo_ptu	= nr_cbo_solicitante_w
		and	ie_situacao	= 'A';
		
		-- Caso o CBO da conta nao seja valido

		if (qt_cbo_valido_w = 0) then
			nr_cbo_solicitante_w := null;
		end if;
	
		if (coalesce(nr_cbo_solicitante_w::text, '') = '') then
			-- Pegar o informado na conta medica

			if (nr_seq_cbo_saude_solic_w IS NOT NULL AND nr_seq_cbo_saude_solic_w::text <> '') then
				nr_cbo_solicitante_w := substr(obter_codigo_cbo_tiss_vigente(nr_seq_cbo_saude_solic_w),1,6);
			end if;
			
			select	count(1)
			into STRICT	qt_cbo_valido_w
			from 	cbo_saude
			where	cd_cbo_ptu	= nr_cbo_solicitante_w
			and	ie_situacao	= 'A';
			
			-- Caso o CBO da conta nao seja valido

			if (qt_cbo_valido_w = 0) then
				nr_cbo_solicitante_w := null;
			end if;
			
			-- Pegar o CBO do cadastro medico

			if (coalesce(nr_cbo_solicitante_w::text, '') = '') then
				select 	max(nr_seq_cbo_saude)
				into STRICT	nr_seq_cbo_saude_solic_w
				from 	pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
				
				if (nr_seq_cbo_saude_solic_w IS NOT NULL AND nr_seq_cbo_saude_solic_w::text <> '') then
					nr_cbo_solicitante_w := substr(obter_codigo_cbo_tiss_vigente(nr_seq_cbo_saude_solic_w),1,6);
				end if;
			end if;	

			-- Pega o CBO da especialidade do medico

			if (coalesce(nr_cbo_solicitante_w::text, '') = '') then
				select 	max(nr_seq_cbo_saude)
				into STRICT	nr_seq_cbo_saude_solic_w
				from 	medico_especialidade
				where	cd_pessoa_fisica = cd_medico_solic_w
				and	nr_seq_prioridade = (	SELECT	min(nr_seq_prioridade)
								from	medico_especialidade
								where	cd_pessoa_fisica = cd_medico_solic_w);							
				
				if (nr_seq_cbo_saude_solic_w IS NOT NULL AND nr_seq_cbo_saude_solic_w::text <> '') then
					nr_cbo_solicitante_w := substr(obter_codigo_cbo_tiss_vigente(nr_seq_cbo_saude_solic_w),1,6);
				end if;
			end if;
			
			-- Pegar o CBO SUS vinculado a pessoa fisica

			if (coalesce(nr_cbo_solicitante_w::text, '') = '') then
				select	substr(max(cd_cbo),1,6)
				into STRICT	nr_cbo_solicitante_w
				from	sus_cbo_pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
			end if;
		end if;
	end if;
	
	-- Medico executor

	if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then	
		cd_cpf_executante_w		:= substr(obter_dados_pf(cd_medico_exec_w,'CPF'),1,11);
		cd_cnpj_executante_w		:= null;
		nm_profissional_executante_w	:= substr(obter_nome_medico(cd_medico_exec_w,'N'),1,255);
		sg_conselho_executante_w	:= substr(obter_dados_medico(cd_medico_exec_w,'SGCRM'),1,5);
		nr_conselho_executante_w	:= substr(obter_dados_medico(cd_medico_exec_w,'CRM'),1,15);
		sg_uf_executante_w		:= substr(obter_dados_medico(cd_medico_exec_w,'UFCRM'),1,5);
		nm_executante_w			:= substr(coalesce(nm_executante_w,nm_profissional_executante_w),1,70);
		
		if (coalesce(nr_cbo_executante_w::text, '') = '') then
			select	substr(max(cd_cbo),1,6)
			into STRICT	nr_cbo_executante_w
			from	sus_cbo_pessoa_fisica
			where	cd_pessoa_fisica = cd_medico_exec_w;
		end if;
	-- Prestador executor

	elsif (nr_seq_prest_exec_w IS NOT NULL AND nr_seq_prest_exec_w::text <> '') then	
		begin
		select	cd_pessoa_fisica,
			cd_cgc
		into STRICT	cd_medico_exec_w,
			cd_cgc_exec_w
		from	pls_prestador
		where	nr_sequencia = nr_seq_prest_exec_w;
		exception
		when others then
			cd_medico_exec_w	:= null;
			cd_cgc_exec_w		:= null;
			cd_cnes_executante_w	:= null;
		end;
	
		-- PESSOA FISICA

		if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then			
			cd_cpf_executante_w		:= substr(obter_dados_pf(cd_medico_exec_w,'CPF'),1,11);		
			cd_cnpj_executante_w		:= null;
			nm_profissional_executante_w	:= substr(obter_nome_medico(cd_medico_exec_w,'N'),1,255);
			
			begin
			sg_conselho_executante_w	:= substr(obter_dados_medico(cd_medico_exec_w,'SGCRM'),1,5);
			exception
			when others then
				sg_conselho_executante_w := null;
			end;
			
			begin
			nr_conselho_executante_w	:= substr(obter_dados_medico(cd_medico_exec_w,'CRM'),1,15);
			exception
			when others then
				nr_conselho_executante_w := null;
			end;
			
			begin
			sg_uf_executante_w		:= substr(obter_dados_medico(cd_medico_exec_w,'UFCRM'),1,5);
			exception
			when others then
				sg_uf_executante_w := null;
			end;
			
			nm_executante_w			:= substr(coalesce(nm_executante_w,nm_profissional_executante_w),1,70);
			
			if (coalesce(nr_cbo_executante_w::text, '') = '') then
				select	substr(max(cd_cbo),1,6)
				into STRICT	nr_cbo_executante_w
				from	sus_cbo_pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_exec_w;
			end if;
		-- PESSOA JURIDICA

		elsif (cd_cgc_exec_w IS NOT NULL AND cd_cgc_exec_w::text <> '') then		
			cd_cpf_executante_w		:= null;
			cd_cnpj_executante_w		:= cd_cgc_exec_w;
			nm_profissional_executante_w	:= substr(obter_dados_pf_pj(null,cd_cgc_exec_w,'N'),1,255);
			sg_conselho_executante_w	:= null;
			nr_conselho_executante_w	:= null;
			sg_uf_executante_w		:= null;
			
			nm_executante_w			:= substr(obter_dados_pf_pj(null,cd_cgc_exec_w,'N'),1,70);
			nr_cbo_executante_w		:= null;
		end if;
	end if;
	
	nm_profissional_executante_w	:= ptu_somente_caracter_permitido(nm_profissional_executante_w,'AN');
	nm_executante_w			:= ptu_somente_caracter_permitido(nm_executante_w,'AN');
	nm_profissional_solicitante_w	:= ptu_somente_caracter_permitido(nm_profissional_solicitante_w,'AN');
	nm_solicitante_w		:= ptu_somente_caracter_permitido(nm_solicitante_w,'AN');
	
	-- Ajustar conforme o TISS

	-- Solic

	-- Se vem com numeros ja ta no padrao TISS

	if (somente_numero(sg_conselho_solicitante_w) = 0) then
		sg_conselho_solicitante_w := pls_obter_conselho_tiss_xml(coalesce(sg_conselho_solicitante_w,'CRM'));
	end if;

	sg_conselho_solicitante_w	:= lpad(sg_conselho_solicitante_w,2,'0');
	nr_conselho_solicitante_w	:= coalesce(nr_conselho_solicitante_w,0);
	sg_uf_solicitante_w		:= ptu_aviso_pck.obter_uf_tiss(coalesce(sg_uf_solicitante_w,sg_estado_w));
	nr_cbo_solicitante_w		:= coalesce(nr_cbo_solicitante_w,'999999');
	
	-- Exec 

	-- Se vem com numeros ja ta no padrao TISS

	if (somente_numero(sg_conselho_executante_w) = 0) then
		sg_conselho_executante_w := pls_obter_conselho_tiss_xml(coalesce(sg_conselho_executante_w,'CRM'));
	end if;
	
	sg_conselho_executante_w	:= lpad(sg_conselho_executante_w,2,'0');
	nr_conselho_executante_w	:= coalesce(nr_conselho_executante_w,0);
	sg_uf_executante_w		:= ptu_aviso_pck.obter_uf_tiss(coalesce(sg_uf_executante_w,sg_estado_w));
	nr_cbo_executante_w		:= coalesce(nr_cbo_executante_w,'999999');

	if (c_ie_tipo_guia_w = '3') then 			-- Guia de consulta 
		if (cd_cnpj_executante_w IS NOT NULL AND cd_cnpj_executante_w::text <> '') then
			cd_cpf_executante_w		:= null;
			cd_prestador_executante_w	:= null;
		elsif (cd_cpf_executante_w IS NOT NULL AND cd_cpf_executante_w::text <> '') then
			cd_cnpj_executante_w		:= null;
			cd_prestador_executante_w	:= null;
		end if;
	end if;

	if (c_ie_tipo_guia_w in ('2','4')) then
		if (c_ie_motivo_encerramento_w not in ('41','42','43')) then
			c_ie_motivo_encerramento_w := null;
		end if;
	end if;

	insert into ptu_aviso_conta(nr_sequencia,				dt_atualizacao,			nm_usuario,
		dt_atualizacao_nrec,			nm_usuario_nrec,		nr_seq_aviso_protocolo,
		nr_seq_conta,				nr_seq_segurado,		nr_guia_principal,
		nr_guia_operadora,			nr_guia_prestador,		cd_registro_ans,
		dt_autorizacao,				cd_senha,			dt_validade_senha,
		nr_carteira_benef,			ie_atendimento_rn,		nm_beneficiario,
		nr_cns_benef,				ie_ident_beneficiario,		cd_prestador_solicitante,
		cd_cpf_solicitante,			cd_cnpj_solicitante,		nm_profissional_solicitante,
		sg_conselho_solicitante,		nr_conselho_solicitante,	sg_uf_solicitante,
		nr_cbo_solicitante,			nm_solicitante,			cd_cnes_solicitante,
		dt_solicitacao,				ie_carater_atendimento,		ds_indicacao_clinica,
		cd_prestador_executante,		cd_cpf_executante,		cd_cnpj_executante,
		nm_profissional_executante,		sg_conselho_executante,		nr_conselho_executante,
		sg_uf_executante,			nr_cbo_executante,		nm_executante,
		cd_cnes_executante,			ie_tipo_atendimento,		ie_indicacao_acidente,
		ie_tipo_consulta,			ie_motivo_encerramento,		ds_observacao,
		vl_procedimento,			vl_diaria,			vl_taxa,
		vl_material,				vl_medicamento,			vl_opme,
		vl_gases,				vl_total_geral,			ie_tipo_faturamento,
		dt_inicio_faturamento,			dt_fim_faturamento,		hr_inicio_faturamento,
		hr_fim_faturamento,			ie_tipo_internacao,		ie_regime_internacao,
		ds_diagnostico,				dt_atendimento_ref)
	values (nextval('ptu_aviso_conta_seq'),				clock_timestamp(),						nm_usuario_p,
		clock_timestamp(),						nm_usuario_p,						nr_seq_aviso_protocolo_p,
		c_nr_seq_conta_w,					c_nr_seq_segurado_w,					c_nr_guia_principal_w,
		c_nr_guia_operadora_w,					c_nr_guia_prestador_w,					c_cd_registro_ans_w,
		c_dt_autorizacao_w,					c_cd_senha_w,						c_dt_validade_senha_w,
		c_nr_carteira_benef_w,					c_ie_atendimento_rn_w,					c_nm_beneficiario_w,
		c_nr_cns_benef_w,					c_ie_ident_beneficiario_w,				cd_prestador_solicitante_w,
		cd_cpf_solicitante_w,					cd_cnpj_solicitante_w,					nm_profissional_solicitante_w,
		sg_conselho_solicitante_w,				nr_conselho_solicitante_w,				sg_uf_solicitante_w,
		nr_cbo_solicitante_w,					nm_solicitante_w,					cd_cnes_solicitante_w,
		c_dt_solicitacao_w,					c_ie_carater_atendimento_w,				c_ds_indicacao_clinica_w,
		cd_prestador_executante_w,				cd_cpf_executante_w,					cd_cnpj_executante_w,
		nm_profissional_executante_w,				sg_conselho_executante_w,				nr_conselho_executante_w,
		sg_uf_executante_w,					nr_cbo_executante_w,					nm_executante_w,
		cd_cnes_executante_w,					c_ie_tipo_atendimento_w,				c_ie_indicacao_acidente_w,
		c_ie_tipo_consulta_w,					c_ie_motivo_encerramento_w,				c_ds_observacao_w,
		c_vl_procedimento_w,					c_vl_diaria_w,						c_vl_taxa_w,
		c_vl_material_w,					c_vl_medicamento_w,					c_vl_opme_w,
		c_vl_gases_w,						c_vl_total_geral_w,					c_ie_tipo_faturamento_w,
		c_dt_inicio_faturamento_w,				coalesce(c_dt_fim_faturamento_w,c_dt_inicio_faturamento_w),	c_hr_inicio_faturamento_w,
		coalesce(c_hr_fim_faturamento_w,c_hr_inicio_faturamento_w),	c_ie_tipo_internacao_w,					c_ie_regime_internacao_w,
		c_ds_diagnostico_w,					c_dt_atendimento_ref_w) returning nr_sequencia into nr_seq_aviso_conta_w;
	
	-- indicador se inseriu algum Proc, mat e declaracao 

	PERFORM set_config('ptu_aviso_pck.ie_qtd_proc_mat', 'N', false);
	-- Gerar dados PTU_AVISO_PROCEDIMENTO para envio

	valor_bind_proc_w.delete;
	valor_bind_proc_w := sql_pck.bind_variable(':nr_seq_aviso_conta_p', nr_seq_aviso_conta_w, valor_bind_proc_w);
	valor_bind_proc_w := sql_pck.bind_variable(':nr_seq_lote', dados_a520_p.nr_seq_lote, valor_bind_proc_w);
	valor_bind_proc_w := sql_pck.bind_variable(':ie_via_acesso_mult_p', dados_a520_p.ie_via_acesso_mult, valor_bind_proc_w);
	valor_bind_proc_w := sql_pck.bind_variable(':ie_status_faturamento', case dados_a520_p.ie_geracao_aviso_cobr when 'PA' then 'A' else 'L' end, valor_bind_proc_w);
	
	-- gera os dados

	CALL ptu_aviso_pck.gerar_dados_ptu_proc_env_a520(ds_sql_proc_w, nm_usuario_p, nr_seq_aviso_conta_w, valor_bind_proc_w);
	
	-- Gerar dados PTU_AVISO_MATERIAL para envio

	valor_bind_mat_w.delete;
	valor_bind_mat_w := sql_pck.bind_variable(':nr_seq_aviso_conta_p', nr_seq_aviso_conta_w, valor_bind_mat_w);
	valor_bind_mat_w := sql_pck.bind_variable(':nr_seq_lote', dados_a520_p.nr_seq_lote, valor_bind_mat_w);
	valor_bind_mat_w := sql_pck.bind_variable(':ie_via_acesso_mult_p', dados_a520_p.ie_via_acesso_mult, valor_bind_mat_w);
	valor_bind_proc_w := sql_pck.bind_variable(':ie_status_faturamento', case dados_a520_p.ie_geracao_aviso_cobr when 'PA' then 'A' else 'L' end, valor_bind_proc_w);
	
	CALL ptu_aviso_pck.gerar_dados_ptu_mat_env_a520( ds_sql_mat_w, nm_usuario_p, nr_seq_aviso_conta_w, valor_bind_mat_w);
	
	-- Gerar dados PTU_AVISO_DECLARACAO para envio

	CALL ptu_aviso_pck.gerar_dados_ptu_decl_env_a520( nr_seq_aviso_conta_w, nm_usuario_p);
	
	if current_setting('ptu_aviso_pck.ie_qtd_proc_mat')::varchar(1) = 'S' then
	
		select	coalesce(sum(coalesce(vl_procedimento,0)),0),
			coalesce(sum(coalesce(vl_diaria,0)),0),
			coalesce(sum(coalesce(vl_taxa,0)),0),
			coalesce(sum(coalesce(vl_material,0)),0),
			coalesce(sum(coalesce(vl_medicamento,0)),0),
			coalesce(sum(coalesce(vl_opme,0)),0),
			coalesce(sum(coalesce(vl_gases,0)),0)
		into STRICT	vl_procedimento_w,
			vl_diaria_w,
			vl_taxa_w,
			vl_material_w,
			vl_medicamento_w,
			vl_opme_w,
			vl_gases_w
		from (SELECT	CASE WHEN cd_despesa='00' THEN vl_total  ELSE 0 END  vl_procedimento,
				CASE WHEN cd_despesa='05' THEN vl_total  ELSE 0 END  vl_diaria,
				CASE WHEN cd_despesa='07' THEN vl_total  ELSE 0 END  vl_taxa,
				0 vl_material,
				0 vl_medicamento,
				0 vl_opme,
				0 vl_gases
			from	ptu_aviso_procedimento
			where	nr_seq_aviso_conta	= nr_seq_aviso_conta_w
			
union all

			SELECT	0 vl_procedimento,
				0 vl_diaria,
				0 vl_taxa,
				CASE WHEN cd_despesa='03' THEN vl_total  ELSE 0 END  vl_material,
				CASE WHEN cd_despesa='02' THEN vl_total  ELSE 0 END  vl_medicamento,
				CASE WHEN cd_despesa='08' THEN vl_total  ELSE 0 END  vl_opme,
				CASE WHEN cd_despesa='01' THEN vl_total  ELSE 0 END  vl_gases
			from	ptu_aviso_material
			where	nr_seq_aviso_conta	= nr_seq_aviso_conta_w) alias23;

		vl_total_geral_w := vl_procedimento_w + vl_diaria_w + vl_taxa_w + vl_material_w + vl_medicamento_w + vl_opme_w + vl_gases_w;
		
		update	ptu_aviso_conta
		set	vl_procedimento	= vl_procedimento_w,
			vl_diaria	= vl_diaria_w,
			vl_taxa		= vl_taxa_w,
			vl_material	= vl_material_w,
			vl_medicamento	= vl_medicamento_w,
			vl_opme		= vl_opme_w,
			vl_gases	= vl_gases_w,
			vl_total_geral	= vl_total_geral_w
		where	nr_sequencia	= nr_seq_aviso_conta_w;	
	else
		delete FROM ptu_aviso_conta where nr_sequencia = nr_seq_aviso_conta_w;
	end if;
end loop;

if (cursor_w%isopen) then

	close cursor_w;
end if;

-- Converte os itens gerados conforme regras do PTU

CALL ptu_aviso_pck.converter_itens_a520(nr_seq_arquivo_w, nm_usuario_p);
	

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_aviso_pck.gerar_dados_ptu_conta_env_a520 ( nr_seq_aviso_protocolo_p ptu_aviso_protocolo.nr_sequencia%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, dados_a520_p dados_lote_a520_t, dados_gerais_a520_p dados_gerais_a520_t, alias_p alias_a520_t) FROM PUBLIC;
