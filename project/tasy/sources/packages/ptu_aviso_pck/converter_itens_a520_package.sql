-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ptu_aviso_pck.converter_itens_a520 ( nr_seq_arquivo_p ptu_aviso_arquivo.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Converte os procedimentos e materiais de um arquivo para o codigo TNUMM
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ ]  Objetos do dicionario [X] Tasy (Delphi/Java) [ X] Portal [ X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


type tipo_intercambio is table of varchar(10) index by integer;
tb_tipo_intercambio_w	tipo_intercambio;

sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
ie_tipo_contrato_w		pls_intercambio.ie_tipo_contrato%type;
ie_participante_w		varchar(10)	:= 'N';
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type := 'N';
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
cd_cgc_outorgante_w		pls_outorgante.cd_cgc_outorgante%type;
dt_geracao_lote_w		ptu_lote_aviso.dt_geracao%type;
dt_alta_w			pls_conta.dt_alta%type;
dt_procedimento_w		timestamp;
ie_tipo_data_w			varchar(255);
cd_proc_conversao_w		pls_conversao_proc.cd_proc_conversao%type;
cd_procedimento_w		pls_conta_proc.cd_procedimento%type;
ds_procedimento_w		pls_conversao_proc.ds_proc_envio%type;
ie_origem_proced_conv_w		pls_conversao_proc.ie_origem_conversao%type;
nr_seq_regra_conv_w		pls_conversao_proc.nr_sequencia%type;
ie_somente_codigo_w		pls_regra_conv_mat_interc.ie_somente_codigo%type;
nr_seq_material_w		pls_material.nr_sequencia%type;
nr_seq_material_temp_w		pls_material.nr_sequencia%type;
ie_tipo_tabela_mat_conv_w	pls_conversao_mat.ie_tipo_tabela%type;
ie_tipo_tabela_mat_w		pls_conversao_mat.ie_tipo_tabela%type;
cd_material_envio_w		pls_conversao_mat.cd_material_envio%type;
cd_material_envio_temp_w	pls_conversao_mat.cd_material_envio%type;
ds_material_envio_w		pls_material_unimed.ds_material%type;
cd_material_w			pls_conversao_mat.cd_material_envio%type;
nr_seq_regra_conv_mat_w		pls_conversao_mat.nr_sequencia%type;
nr_seq_mat_unimed_w		pls_regra_conv_mat_interc.nr_seq_material%type;
cd_servico_mat_w		pls_conversao_mat.cd_material_envio%type;
ie_mat_a900_w			varchar(1);
ie_material_intercambio_w	pls_parametros.ie_material_intercambio%type;
cd_servico_a900_w		pls_material_a900.cd_material_a900%type;
qt_cad_mat_a900_w		integer;
ie_data_conv_mat_unimed_w	pls_parametro_faturamento.ie_data_conv_mat_unimed%type;

tb_cd_proc_convertido_w		dbms_sql.varchar2_table;
tb_ds_proc_convertido_w		dbms_sql.varchar2_table;
tb_nr_seq_aviso_proc_w		dbms_sql.number_table;

tb_cd_mat_convertido_w		dbms_sql.varchar2_table;
tb_ds_mat_convertido_w		dbms_sql.varchar2_table;
tb_nr_seq_aviso_mat_w		dbms_sql.number_table;

p				integer;
m				integer;

c01 CURSOR(	nr_seq_arquivo_pc	ptu_aviso_arquivo.nr_sequencia%type) FOR
	SELECT	'P' ie_tipo_conta,
		d.nr_sequencia nr_seq_aviso_proc,
		null nr_seq_aviso_mat,
		e.nr_seq_prestador_exec,
		coalesce(f.nr_seq_ops_congenere, f.nr_seq_congenere) nr_seq_congenere,
		d.cd_procedimento,
		d.ie_origem_proced,
		null nr_seq_material,
		f.nr_seq_contrato,
		f.nr_seq_intercambio,
		e.nr_seq_segurado,
		(	SELECT	count(1)
			from	pls_proc_participante	x
			where	x.nr_seq_conta_proc	= d.nr_seq_conta_proc) qt_participante,
		e.dt_atendimento_referencia,
		coalesce(e.dt_fim_faturamento, e.dt_alta) dt_alta,
		e.cd_guia_referencia,
		coalesce(d.dt_execucao, clock_timestamp()) dt_item,
		e.ie_tipo_guia,
		e.cd_guia_ok,
		e.nr_seq_tipo_atendimento,
		e.nr_sequencia nr_seq_conta,
		null cd_material_ops,
		null ds_material,
		null ie_tipo_despesa_mat,
		null nr_seq_tuss_mat_item,
		d.ds_procedimento,
		e.ie_regime_atendimento,
		e.ie_saude_ocupacional
	from	ptu_aviso_arquivo		a,
		ptu_aviso_protocolo		b,
		ptu_aviso_conta			c,		
		ptu_aviso_procedimento		d,
		pls_conta			e,
		pls_segurado			f
	where	b.nr_seq_arquivo		= a.nr_sequencia
	and	c.nr_seq_aviso_protocolo	= b.nr_sequencia
	and	d.nr_seq_aviso_conta		= c.nr_sequencia
	and	e.nr_sequencia			= c.nr_seq_conta
	and	f.nr_sequencia			= e.nr_seq_segurado
	and	a.nr_sequencia			= nr_seq_arquivo_pc
	
union all

	select	'M' ie_tipo_conta,
		null nr_seq_aviso_proc,
		d.nr_sequencia nr_seq_aviso_mat,
		e.nr_seq_prestador_exec,
		coalesce(f.nr_seq_ops_congenere, f.nr_seq_congenere) nr_seq_congenere,
		null cd_procedimento,
		null ie_origem_proced,
		d.nr_seq_material,
		f.nr_seq_contrato,
		f.nr_seq_intercambio,
		e.nr_seq_segurado,
		0 qt_participante,
		e.dt_atendimento_referencia,
		coalesce(e.dt_fim_faturamento, e.dt_alta) dt_alta,
		e.cd_guia_referencia,
		coalesce(d.dt_execucao, clock_timestamp()) dt_item,
		e.ie_tipo_guia,
		e.cd_guia_ok,
		e.nr_seq_tipo_atendimento,
		e.nr_sequencia nr_seq_conta,
		g.cd_material_ops,
		g.ds_material,
		coalesce(g.ie_tipo_despesa, h.ie_tipo_despesa) ie_tipo_despesa_mat,
		g.nr_seq_tuss_mat_item,
		null ds_procedimento,
		e.ie_regime_atendimento,
		e.ie_saude_ocupacional
	from	ptu_aviso_arquivo		a,
		ptu_aviso_protocolo		b,
		ptu_aviso_conta			c,		
		ptu_aviso_material		d,
		pls_conta			e,
		pls_segurado			f,
		pls_material			g,
		pls_conta_mat			h
	where	b.nr_seq_arquivo		= a.nr_sequencia
	and	c.nr_seq_aviso_protocolo	= b.nr_sequencia
	and	d.nr_seq_aviso_conta		= c.nr_sequencia
	and	e.nr_sequencia			= c.nr_seq_conta
	and	f.nr_sequencia			= e.nr_seq_segurado
	and	g.nr_sequencia			= d.nr_seq_material
	and	h.nr_sequencia			= d.nr_seq_conta_mat
	and	a.nr_sequencia			= nr_seq_arquivo_pc;
BEGIN

-- informacoes gerais

select	max(a.cd_estabelecimento),
	max((	select	max(x.cd_cgc_outorgante)
		from	pls_outorgante	x
		where	cd_estabelecimento = a.cd_estabelecimento)),
	max(a.dt_geracao)
into STRICT	cd_estabelecimento_w,
	cd_cgc_outorgante_w,
	dt_geracao_lote_w
from	ptu_lote_aviso		a,
	ptu_aviso_arquivo	b
where	b.nr_seq_lote		= a.nr_sequencia
and	b.nr_sequencia		= nr_seq_arquivo_p;

select	coalesce(max(ie_novo_pos_estab), 'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_w;


select 	coalesce(max(ie_material_intercambio), 'S')
into STRICT	ie_material_intercambio_w
from 	pls_parametros
where 	cd_estabelecimento = cd_estabelecimento_w;

select 	coalesce(max(ie_data_conv_mat_unimed), 'DA') ie_data_conv_mat_unimed
into STRICT	ie_data_conv_mat_unimed_w
from	pls_parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

p :=0;
m := 0;

select	count(1)
into STRICT	qt_cad_mat_a900_w
from	pls_material_a900 LIMIT 1;

-- carrega todos os itens a ser convertidos

for r_c01_w in c01(nr_seq_arquivo_p) loop

	
	cd_proc_conversao_w	:= null;
	ie_origem_proced_conv_w	:= null;
	
	-- levanta o tipo de intercambio

	-- primeiro verifica se o congenere ja foi levantado, para evitar retrabalho

	if (not tb_tipo_intercambio_w.exists(r_c01_w.nr_seq_segurado)) then
	
		select	coalesce(max(sg_estado), 'X')
		into STRICT	sg_estado_w
		from	pessoa_juridica
		where	cd_cgc	= cd_cgc_outorgante_w;
					
		-- Obter a UF da operadora do beneficiario eventual ou que enviou o protocolo

		select	coalesce(max(a.sg_estado), 'X'),
			coalesce(max(b.ie_nacional), 'N')
		into STRICT	sg_estado_int_w,
			ie_nacional_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= r_c01_w.nr_seq_congenere;
		
		if (ie_nacional_w = 'S') then
		
			tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado) := 'N';
			
		elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
			
			if (sg_estado_w = sg_estado_int_w) then
			
				tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado) := 'E';
			else	
			
				tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado) := 'N';
			end if;
		else
		
			tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado) := 'A';
		end if;
		
		-- ainda verifica o contrato do benef

		select	max(a.ie_tipo_contrato)
		into STRICT	ie_tipo_contrato_w
		from	pls_intercambio		a,
			pls_contrato_pagador 	b,
			pls_segurado 		c
		where	a.nr_sequencia		= b.nr_seq_pagador_intercambio
		and	b.nr_sequencia		= c.nr_seq_pagador
		and	c.nr_sequencia		= r_c01_w.nr_seq_segurado;
		
		-- Quando for PEA, tem que tratar como Nacional	

		if (ie_tipo_contrato_w = 'S') then
		
			tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado) := 'N';
		end if;
		
	end if;
	
	
	-- verifica se tem participante

	if (r_c01_w.qt_participante > 0) then
	
		ie_participante_w := 'S';
	else
	
		ie_participante_w := 'N';
	end if;
	
	dt_alta_w := r_c01_w.dt_alta;
	
	if	(((coalesce(dt_alta_w::text, '') = '') or (to_char(dt_alta_w, 'hh24:mi:ss') = '00:00:00')) and (r_c01_w.cd_guia_referencia IS NOT NULL AND r_c01_w.cd_guia_referencia::text <> '')) then
		
		select	coalesce(max(dt_alta), dt_alta_w)
		into STRICT	dt_alta_w
		from	pls_conta
		where	cd_guia_referencia	= r_c01_w.cd_guia_referencia
		and	ie_tipo_guia		= '5';
	end if;
	
	-- obtem o tipo da data

	pls_obter_regra_data_ptu_serv(	tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado), r_c01_w.ie_tipo_guia, 		r_c01_w.cd_procedimento,
					r_c01_w.ie_origem_proced, 			ie_tipo_data_w,			r_c01_w.nr_seq_tipo_atendimento,
					r_c01_w.nr_seq_congenere,			r_c01_w.ie_regime_atendimento,	r_c01_w.ie_saude_ocupacional);
	
	-- levanta a data do item

	pls_obter_data_serv_ptu_A500(	r_c01_w.nr_seq_conta,		ie_participante_w,			r_c01_w.ie_tipo_guia,
					r_c01_w.nr_seq_segurado,	r_c01_w.cd_guia_ok,			r_c01_w.nr_seq_congenere,
					dt_geracao_lote_w, 		r_c01_w.dt_atendimento_referencia,	dt_alta_w,
					ie_tipo_data_w, 		r_c01_w.ie_tipo_conta,			r_c01_w.dt_item,
					'N',				dt_procedimento_w);
					
	ie_somente_codigo_w := null;
	
	-- separacao por tipo de item, sendo proc ou mat

	-- procedimentos

	if (r_c01_w.ie_tipo_conta = 'P') then
	
		-- converte o procedimento

		pls_obter_proced_conversao(	r_c01_w.cd_procedimento,			r_c01_w.ie_origem_proced,	r_c01_w.nr_seq_prestador_exec,
						cd_estabelecimento_w, 				1, 				r_c01_w.nr_seq_congenere,
						1, 						'E',				r_c01_w.nr_seq_contrato,
						r_c01_w.nr_seq_intercambio,			null, 				null,
						tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado), cd_proc_conversao_w, 		ie_origem_proced_conv_w,
						nr_seq_regra_conv_w,				ie_somente_codigo_w,		dt_procedimento_w,
						r_c01_w.nr_seq_tipo_atendimento,		null,				null);
		
		-- verifica se e para converter tambem a descricao

		if (nr_seq_regra_conv_w IS NOT NULL AND nr_seq_regra_conv_w::text <> '') then
		
			cd_procedimento_w := substr(cd_proc_conversao_w, 1, 8);
			
			select	substr(ds_proc_envio, 1, 80)
			into STRICT	ds_procedimento_w
			from	pls_conversao_proc
			where	nr_sequencia = nr_seq_regra_conv_w;
		else
			cd_procedimento_w	:= substr(cd_proc_conversao_w, 1, 8);
			ds_procedimento_w	:= substr(pls_obter_desc_procedimento(cd_proc_conversao_w, ie_origem_proced_conv_w), 1, 80);
		end if;
		
		if (coalesce(ie_somente_codigo_w, 'N') = 'S') then
		
			ds_procedimento_w := substr(r_c01_w.ds_procedimento, 1, 80);
		end if;
		
		-- guarda em memoria para descarrego no banco

		tb_cd_proc_convertido_w(p)	:= substr(coalesce(cd_proc_conversao_w, r_c01_w.cd_procedimento),1,10);
		tb_ds_proc_convertido_w(p)	:= coalesce(ds_procedimento_w, r_c01_w.ds_procedimento);
		tb_nr_seq_aviso_proc_w(p)	:= r_c01_w.nr_seq_aviso_proc;
		
		-- verifica se a quantidade chegou no limite e precisa mandar para o banco

		if (p >= pls_util_pck.qt_registro_transacao_w) then
		
			-- atualiza o novo proc

			SELECT * FROM ptu_aviso_pck.atualiza_proc_conv(tb_cd_proc_convertido_w, tb_ds_proc_convertido_w, tb_nr_seq_aviso_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_cd_proc_convertido_w := _ora2pg_r.tb_cd_proc_convertido_p; tb_ds_proc_convertido_w := _ora2pg_r.tb_ds_proc_convertido_p; tb_nr_seq_aviso_proc_w := _ora2pg_r.tb_nr_seq_aviso_proc_p;
			commit;
			p := 0;
		else
		
			p := p+1;
		end if;
	-- materiais

	elsif (r_c01_w.ie_tipo_conta = 'M') then
	
		nr_seq_material_w	:= r_c01_w.nr_seq_material;
		cd_material_w		:= null;
		
		
		if (r_c01_w.ie_tipo_despesa_mat in (1,3,7)) then
		
			ie_tipo_tabela_mat_w := 2;
			
		elsif (r_c01_w.ie_tipo_despesa_mat = 2) then
		
			ie_tipo_tabela_mat_w := 3;
			
		end if;
		
		
		
		-- o nr_seq_material_w e a saida

		pls_obter_mat_conversao(r_c01_w.cd_material_ops, 	r_c01_w.ie_tipo_despesa_mat, 	nm_usuario_p,
					'E', 				null, 				null,
					r_c01_w.nr_seq_prestador_exec, 	nr_seq_material_w,		cd_material_envio_w,
					ds_material_envio_w,		ie_tipo_tabela_mat_conv_w,	nr_seq_regra_conv_mat_w,
					null);
					
		-- Se nao conseguiu converter, o nr_seq_material_w recebe null, portanto e "devolvido" o seu valor anterior o cd_procedimento do cursor c02

		nr_seq_material_w	:= coalesce(nr_seq_material_w, r_c01_w.nr_seq_material);
		ie_tipo_tabela_mat_w	:= coalesce(ie_tipo_tabela_mat_conv_w, ie_tipo_tabela_mat_w);
		
		cd_material_w := substr(to_char(somente_numero(cd_material_envio_w)), 1, 15);
		
		if (coalesce(cd_material_w, 0) = 0) then
		
			cd_material_w		:= null;
			nr_seq_material_w	:= r_c01_w.nr_seq_material;
		end if;
		
		-- Se nao encontrar, buscar na tabela de conversao do PTU

		if (coalesce(cd_material_w::text, '') = '') then
		
			ptu_obter_material_conversao(	r_c01_w.cd_material_ops,			ie_tipo_tabela_mat_w,		dt_procedimento_w,
							'E',						'A',				r_c01_w.ie_tipo_despesa_mat,
							tb_tipo_intercambio_w(r_c01_w.nr_seq_segurado),	nr_seq_mat_unimed_w,		cd_servico_mat_w,
							ie_somente_codigo_w);
							
							
			if (nr_seq_mat_unimed_w IS NOT NULL AND nr_seq_mat_unimed_w::text <> '') then
			
				select	cd_material,
					substr(coalesce(ds_material, nm_material), 1, 80)
				into STRICT	cd_material_w,
					ds_material_envio_w
				from	pls_material_unimed
				where	nr_sequencia = nr_seq_mat_unimed_w;
				
				ie_mat_a900_w := 'S';
			end if;
			
			if (coalesce(ie_somente_codigo_w, 'N') = 'S') then
			
				ds_material_envio_w := substr(r_c01_w.ds_material, 1, 80);
			end if;
			
			if (coalesce(nr_seq_mat_unimed_w::text, '') = '') and (cd_servico_mat_w IS NOT NULL AND cd_servico_mat_w::text <> '') then
				select	max(substr(coalesce(ds_material, nm_material), 1, 80)),
					max(nr_sequencia)
				into STRICT	ds_material_envio_w,
					nr_seq_mat_unimed_w
				from	pls_material_unimed
				where	cd_material = cd_servico_mat_w;
				
				if (coalesce(nr_seq_mat_unimed_w::text, '') = '') then
					select	max(substr(coalesce(ds_material, nm_material), 1, 80)),
						max(nr_sequencia)
					into STRICT	ds_material_envio_w,
						nr_seq_mat_unimed_w
					from	pls_material_unimed
					where	cd_anterior_material = cd_servico_mat_w;
					
					if (coalesce(nr_seq_mat_unimed_w::text, '') = '') then
						select	max(substr(coalesce(ds_material, nm_material), 1, 80)),
							max(nr_sequencia)
						into STRICT	ds_material_envio_w,
							nr_seq_mat_unimed_w
						from	pls_material_unimed
						where	cd_anterior_medicamento	= cd_servico_mat_w;
					end if;
				end if;
				
				if (nr_seq_mat_unimed_w IS NOT NULL AND nr_seq_mat_unimed_w::text <> '') then
				
					ie_mat_a900_w := 'S';
				end if;
			end if;
			
			cd_material_envio_w := cd_servico_mat_w;
		end if; -- fim se nao existe codigo do material
		
		if (coalesce(cd_material_envio_w::text, '') = '') then
			
			nr_seq_material_w	:= r_c01_w.nr_seq_material;
			ds_material_envio_w	:= substr(pls_obter_desc_material(nr_seq_material_w), 1, 80);
		end if;
		
		begin
				--Somente se nao tinha nenhuma regra de conversao em cooperativas medicas\regras gerais\conversao (cd_servico_w is null)

			if	((coalesce(ie_material_intercambio_w, 'S') = 'S') and (coalesce(cd_material_envio_w::text, '') = '')) then
			
				cd_material_envio_w := nr_seq_material_w;
				
			--Somente se nao tinha nenhuma regra de conversao em cooperativas medicas\regras gerais\conversao (cd_servico_w is null)

			elsif	((coalesce(ie_material_intercambio_w, 'S') = 'C') and (coalesce(cd_material_envio_w::text, '') = '')) then
			
				cd_material_envio_w := r_c01_w.cd_material_ops;
				
			--Se utilizar a gestao de materias, entao as conversoes cadastradas la tem prioridade em relacao as conversoes cadastradas em cooperativas medicas

			elsif (coalesce(ie_material_intercambio_w, 'S') = 'CI') then
			
				cd_servico_a900_w		:= null;
				nr_seq_material_temp_w		:= nr_seq_material_w;
				cd_material_envio_temp_w	:= cd_material_envio_w;
				
				-- 'OPS - Gestao de Operadora > Parametros da OPS > Faturamento', campo 'Data conversao material PTU'

				if (ie_data_conv_mat_unimed_w = 'DA') then -- Data atual
				
					pls_obter_mat_a900_vigente(nr_seq_material_temp_w, clock_timestamp(), cd_servico_a900_w, null);
				else -- Data item
				
					pls_obter_mat_a900_vigente(nr_seq_material_temp_w, r_c01_w.dt_item, cd_servico_a900_w, null);
				end if;
				
				cd_material_envio_temp_w := somente_numero(cd_servico_a900_w);

				if (cd_material_envio_temp_w = 0) then
				
					cd_material_envio_temp_w := null;
				else
					ie_mat_a900_w := 'S';
					
					select	coalesce(coalesce(max(a.nr_seq_material_unimed),max(b.nr_sequencia)),nr_seq_mat_unimed_w)
					into STRICT	nr_seq_mat_unimed_w
					from	pls_material_a900	a,
						pls_material_unimed	b
					where	b.cd_material		= a.cd_material_a900
					and	a.cd_material_a900	= cd_servico_a900_w
					and	r_c01_w.dt_item		between a.dt_inicio_vigencia and fim_dia(a.dt_fim_vigencia);
				end if;
				
				if (coalesce(cd_material_envio_temp_w::text, '') = '') and (qt_cad_mat_a900_w = 0) then
					
					select	nr_seq_material_unimed
					into STRICT	nr_seq_mat_unimed_w
					from	pls_material
					where	nr_sequencia = nr_seq_material_w;
					
					if (nr_seq_mat_unimed_w IS NOT NULL AND nr_seq_mat_unimed_w::text <> '') then
						select	cd_material
						into STRICT	cd_material_envio_temp_w
						from	pls_material_unimed
						where	nr_sequencia = nr_seq_mat_unimed_w;
						
						ie_mat_a900_w := 'S';
					end if;
				end if;
				
				-- Conversao pela gestao de materiais tem prioridade sobre a convesao cadastrada nas cooperativas medicas, caso encontrar uma conversao valida na gestao de materiais, cd_servico e nr_seq_material sera sobrescrito

				if (cd_material_envio_temp_w IS NOT NULL AND cd_material_envio_temp_w::text <> '') then
				
					cd_material_envio_w := cd_material_envio_temp_w;
				end if;
				
				if (nr_seq_material_temp_w IS NOT NULL AND nr_seq_material_temp_w::text <> '') and (cd_material_envio_temp_w IS NOT NULL AND cd_material_envio_temp_w::text <> '') then
				
					nr_seq_material_w	:= nr_seq_material_temp_w;
					ds_material_envio_w	:= substr(pls_obter_desc_material(nr_seq_material_w), 1, 80); --pode ter obtido outra sequencia de material
				end if;
			end if;
		exception
		when others then
			cd_material_envio_w := null;
		end;
		
		-- Alterado - Unimed Litoral

		-- Caso tenha uma conversao de codigo ou de item, respeitar a alteracao que ocorreu na analise de pos-estabelecido (22/11)

		/* INFORMACOES SOMENTE DO POS, podem ser utilizadas futuramente, guardado aqui o codigo para evidenciar esta necessidade
		if	(r_c01_w.cd_item_convertido is not null) or
			(r_c01_w.ds_item_convertido is not null) then
			cd_servico_w	:= nvl(trim(r_c02_w.cd_item_convertido), cd_servico_w);
			ds_servico_w	:= nvl(trim(substr(r_c02_w.ds_item_convertido, 1, 80)), ds_servico_w);
		end if;
		*/

		
		-- Se ainda assim nao encontrar, lancar o codigo da operadora mesmo

		if (coalesce(cd_material_envio_w::text, '') = '') then
		
			select	max((cd_material_ops)::numeric )
			into STRICT	cd_material_envio_w
			from	pls_material
			where	nr_sequencia = nr_seq_material_w;
		end if;
		
		
		tb_cd_mat_convertido_w(m)	:= cd_material_envio_w;
		tb_ds_mat_convertido_w(m)	:= ds_material_envio_w;
		tb_nr_seq_aviso_mat_w(m) 	:= r_c01_w.nr_seq_aviso_mat;
		
		-- verifica se a quantidade chegou no limite e precisa mandar para o banco

		if (m >= pls_util_pck.qt_registro_transacao_w) then
		
			-- atualiza o novo material

			SELECT * FROM ptu_aviso_pck.atualiza_mat_conv(tb_cd_mat_convertido_w, tb_ds_mat_convertido_w, tb_nr_seq_aviso_mat_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_cd_mat_convertido_w := _ora2pg_r.tb_cd_mat_convertido_p; tb_ds_mat_convertido_w := _ora2pg_r.tb_ds_mat_convertido_p; tb_nr_seq_aviso_mat_w := _ora2pg_r.tb_nr_seq_aviso_mat_p;
			commit;
			m := 0;
		else
		
			m := m+1;
		end if;
		
		
	end if; -- fim por tipo de item
	

end loop; -- fim todos procedimentos

-- se ainda "sobrou" registros, manda para o banco

SELECT * FROM ptu_aviso_pck.atualiza_proc_conv(tb_cd_proc_convertido_w, tb_ds_proc_convertido_w, tb_nr_seq_aviso_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_cd_proc_convertido_w := _ora2pg_r.tb_cd_proc_convertido_p; tb_ds_proc_convertido_w := _ora2pg_r.tb_ds_proc_convertido_p; tb_nr_seq_aviso_proc_w := _ora2pg_r.tb_nr_seq_aviso_proc_p;
commit;

SELECT * FROM ptu_aviso_pck.atualiza_mat_conv(tb_cd_mat_convertido_w, tb_ds_mat_convertido_w, tb_nr_seq_aviso_mat_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_cd_mat_convertido_w := _ora2pg_r.tb_cd_mat_convertido_p; tb_ds_mat_convertido_w := _ora2pg_r.tb_ds_mat_convertido_p; tb_nr_seq_aviso_mat_w := _ora2pg_r.tb_nr_seq_aviso_mat_p;
commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_aviso_pck.converter_itens_a520 ( nr_seq_arquivo_p ptu_aviso_arquivo.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
