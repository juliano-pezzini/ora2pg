-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_filtro_regra_preco_cta_pck.obter_restricao_procedimento ( cd_especialidade_p pls_cp_cta_filtro_proc.cd_especialidade%type, cd_area_procedimento_p pls_cp_cta_filtro_proc.cd_area_procedimento%type, cd_grupo_proc_p pls_cp_cta_filtro_proc.cd_grupo_proc%type, ie_origem_proced_p pls_cp_cta_filtro_proc.ie_origem_proced%type, cd_procedimento_p pls_cp_cta_filtro_proc.cd_procedimento%type, nr_seq_grupo_servico_p pls_cp_cta_filtro_proc.nr_seq_grupo_servico%type, nr_seq_grupo_rec_p pls_cp_cta_filtro_proc.nr_seq_grupo_rec%type, ie_origem_procedimento_p pls_cp_cta_filtro_proc.ie_origem_procedimento%type, ie_tecnica_utilizada_p pls_cp_cta_filtro_proc.ie_tecnica_utilizada%type, nr_seq_rp_combinada_p pls_cp_cta_filtro_proc.nr_seq_rp_combinada%type, ie_proc_tabela_p pls_cp_cta_filtro_proc.ie_proc_tabela%type, ie_taxa_coleta_p pls_cp_cta_filtro_proc.ie_taxa_coleta%type, cd_prestador_p pls_cp_cta_filtro_proc.cd_prestador%type, nr_seq_prestador_p pls_cp_cta_filtro_proc.nr_seq_prestador%type, nr_seq_regra_filtro_p pls_cp_cta_combinada.nr_sequencia%type, ds_tabela_p out text, ds_campos_p out text, valor_bind_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


ds_restricao_proc_w	varchar(2500);
ds_tabela_w		varchar(500);
ds_restricao_tab_w	varchar(500);
ds_campos_w		varchar(500);


BEGIN

ds_tabela_w := null;
ds_restricao_tab_w := null;
ds_campos_w := null;

-- Procedimento

if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced = :ie_origem_proced_pc ' || pls_util_pck.enter_w ||
							'	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.cd_procedimento = :cd_procedimento_pc ' || pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':ie_origem_proced_pc', ie_origem_proced_p, valor_bind_p);
	valor_bind_p := sql_pck.bind_variable(	':cd_procedimento_pc', cd_procedimento_p, valor_bind_p);
else
	-- traz o que e necessorio da view como tabela (grupo, area, etc..)

	-- feito desta forma por motivos de performance.

	-- em testes realizados na base WHEB essa forma de acesso se mostrou mais eficiente

	ds_tabela_w := ds_tabela_w || ', ' || pls_util_pck.enter_w ||
			'	(select	x.ie_origem_proced, ' || pls_util_pck.enter_w ||
			'		x.cd_procedimento ' || pls_util_pck.enter_w ||
			'	from	estrutura_procedimento_v x ' || pls_util_pck.enter_w ||
			'	where	1 = 1 ' || pls_util_pck.enter_w;
	
	-- Grupo proc

	if (cd_grupo_proc_p IS NOT NULL AND cd_grupo_proc_p::text <> '') then

		ds_restricao_tab_w := ds_restricao_tab_w || '	and x.cd_grupo_proc = :cd_grupo_proc_pc ' || pls_util_pck.enter_w;
		valor_bind_p := sql_pck.bind_variable(	':cd_grupo_proc_pc', cd_grupo_proc_p, valor_bind_p);

	-- Especialidade

	elsif (cd_especialidade_p IS NOT NULL AND cd_especialidade_p::text <> '') then

		ds_restricao_tab_w := ds_restricao_tab_w || '	and x.cd_especialidade = :cd_especialidade_pc ' || pls_util_pck.enter_w;
		valor_bind_p := sql_pck.bind_variable(	':cd_especialidade_pc', cd_especialidade_p, valor_bind_p);

	-- area proc

	elsif (cd_area_procedimento_p IS NOT NULL AND cd_area_procedimento_p::text <> '') then

		ds_restricao_tab_w := ds_restricao_tab_w || '	and x.cd_area_procedimento = :cd_area_procedimento_pc ' || pls_util_pck.enter_w;
		valor_bind_p := sql_pck.bind_variable(	':cd_area_procedimento_pc', cd_area_procedimento_p, valor_bind_p);
	end if;
end if;

-- Grupo de servicos

if (nr_seq_grupo_servico_p IS NOT NULL AND nr_seq_grupo_servico_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and exists(	select 	1 ' || pls_util_pck.enter_w ||
							'			from 	pls_grupo_servico_tm x ' || pls_util_pck.enter_w ||
							'			where	x.ie_origem_proced = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced ' || pls_util_pck.enter_w ||
							'			and	x.cd_procedimento = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.cd_procedimento ' || pls_util_pck.enter_w ||
							'			and 	x.nr_seq_grupo_servico = :nr_seq_grupo_servico_pc) '|| pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_grupo_servico_pc', nr_seq_grupo_servico_p, valor_bind_p);
end if;

-- Grupo receita

if (nr_seq_grupo_rec_p IS NOT NULL AND nr_seq_grupo_rec_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and exists(	select 	1 ' || pls_util_pck.enter_w ||
							'			from 	procedimento x ' || pls_util_pck.enter_w ||
							'			where	x.ie_origem_proced = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced ' || pls_util_pck.enter_w ||
							'			and	x.cd_procedimento = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.cd_procedimento ' || pls_util_pck.enter_w ||
							'			and 	x.nr_seq_grupo_rec = :nr_seq_grupo_rec_pc ) '|| pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_grupo_rec_pc', nr_seq_grupo_rec_p, valor_bind_p);
end if;

-- Origem proced

if (ie_origem_procedimento_p IS NOT NULL AND ie_origem_procedimento_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced = :ie_origem_procedimento_pc ' || pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':ie_origem_procedimento_pc', ie_origem_procedimento_p, valor_bind_p);
end if;

-- Tecnica utilizada

if (ie_tecnica_utilizada_p IS NOT NULL AND ie_tecnica_utilizada_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_tecnica_utilizada = :ie_tecnica_utilizada_pc ' || pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':ie_tecnica_utilizada_pc', ie_tecnica_utilizada_p, valor_bind_p);
end if;

-- Pagamento diferenciado

if (nr_seq_rp_combinada_p IS NOT NULL AND nr_seq_rp_combinada_p::text <> '') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.nr_seq_rp_combinada = :nr_seq_rp_combinada_pc ' || pls_util_pck.enter_w;
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_rp_combinada_pc', nr_seq_rp_combinada_p, valor_bind_p);
end if;

-- Procedimento existe na tabela de preco, apenas se o checkbox estiver marcado

if (ie_proc_tabela_p = 'S') then

	ds_campos_w := ds_campos_w || ', ' || pls_util_pck.enter_w ||
			' pls_filtro_regra_preco_cta_pck.obter_se_proc_existe_tab_preco(' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.dt_procedimento_referencia, ' ||
			pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.cd_procedimento, ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced, ' ||
			' :nr_seq_regra_comb ) ie_existe_tabela ';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_regra_comb', nr_seq_regra_filtro_p, valor_bind_p);
else

	ds_campos_w := ds_campos_w || ', ' || pls_util_pck.enter_w ||
			'''S'' ie_existe_tabela ';
end if;

-- Taxa coleta, apenas se o checkbox estiver checado

if (ie_taxa_coleta_p = 'S') then

	ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.nr_seq_exame_coleta is not null ' || pls_util_pck.enter_w;
	
	
	-- so precisa verificar os campos do prestador caso o checkbox esteja checado

	-- caso a sequencia esteja informada NAO ha necessidade de verificar o codigo.

	if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then

		ds_restricao_proc_w := ds_restricao_proc_w || '	and ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.nr_seq_prest_pgto_coleta = :nr_seq_prestador_pc ' || pls_util_pck.enter_w;
		valor_bind_p := sql_pck.bind_variable(	':nr_seq_prestador_pc', nr_seq_prestador_p, valor_bind_p);
	end if;

	if (cd_prestador_p IS NOT NULL AND cd_prestador_p::text <> '') then

		ds_restricao_proc_w := ds_restricao_proc_w || '	and exists(select 1 ' || pls_util_pck.enter_w ||
							'		from 	pls_prestador x ' || pls_util_pck.enter_w ||
							'		where 	x.nr_sequencia = '  || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.nr_seq_prest_pgto_coleta ' || pls_util_pck.enter_w ||
							'		and	x.cd_prestador = :cd_prestador_pc) '|| pls_util_pck.enter_w;
		valor_bind_p := sql_pck.bind_variable(	':cd_prestador_pc', cd_prestador_p, valor_bind_p);
	end if;
end if;

-- se NAO tem nenhum filtro de estrutura para processar limpa o campo tabela

if (coalesce(ds_restricao_tab_w::text, '') = '') then
	
	ds_tabela_w := null;
	
-- seNAO alimenta as variaveis que serao necessorias

else
	-- junta a view (tabela) com a restricao necessorias

	ds_tabela_w := ds_tabela_w || ds_restricao_tab_w || ' ) estru ' || pls_util_pck.enter_w;

	-- faz a restricao padrao da tabela

	ds_restricao_proc_w := ds_restricao_proc_w || '	and estru.ie_origem_proced = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.ie_origem_proced ' || pls_util_pck.enter_w ||
						'	and estru.cd_procedimento = ' || pls_filtro_regra_preco_cta_pck.obter_alias_tabela('procedimento') || '.cd_procedimento ' || pls_util_pck.enter_w;
end if;

-- alimenta os parametros out

ds_tabela_p := ds_tabela_w;
ds_campos_p := ds_campos_w;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_filtro_regra_preco_cta_pck.obter_restricao_procedimento ( cd_especialidade_p pls_cp_cta_filtro_proc.cd_especialidade%type, cd_area_procedimento_p pls_cp_cta_filtro_proc.cd_area_procedimento%type, cd_grupo_proc_p pls_cp_cta_filtro_proc.cd_grupo_proc%type, ie_origem_proced_p pls_cp_cta_filtro_proc.ie_origem_proced%type, cd_procedimento_p pls_cp_cta_filtro_proc.cd_procedimento%type, nr_seq_grupo_servico_p pls_cp_cta_filtro_proc.nr_seq_grupo_servico%type, nr_seq_grupo_rec_p pls_cp_cta_filtro_proc.nr_seq_grupo_rec%type, ie_origem_procedimento_p pls_cp_cta_filtro_proc.ie_origem_procedimento%type, ie_tecnica_utilizada_p pls_cp_cta_filtro_proc.ie_tecnica_utilizada%type, nr_seq_rp_combinada_p pls_cp_cta_filtro_proc.nr_seq_rp_combinada%type, ie_proc_tabela_p pls_cp_cta_filtro_proc.ie_proc_tabela%type, ie_taxa_coleta_p pls_cp_cta_filtro_proc.ie_taxa_coleta%type, cd_prestador_p pls_cp_cta_filtro_proc.cd_prestador%type, nr_seq_prestador_p pls_cp_cta_filtro_proc.nr_seq_prestador%type, nr_seq_regra_filtro_p pls_cp_cta_combinada.nr_sequencia%type, ds_tabela_p out text, ds_campos_p out text, valor_bind_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
