-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE mprev_gravar_dados_pessoa_pck.mprev_gravar_dados_pessoa ( nr_seq_regra_cubo_p bigint, cd_pessoa_fisica_p text, nr_seq_populacao_alvo_p bigint) AS $body$
DECLARE

						
	dt_referencia_w	timestamp;
	
	c_contas_guias CURSOR(nr_seq_populacao_alvo_pc	bigint) FOR
			SELECT	1 ie_union,   
				a.nr_sequencia nr_seq_conta_cubo,   
				c.nr_sequencia nr_seq_pop_alvo_benef,  
				p.nr_sequencia nr_seq_pop_alvo_pessoa, 
				a.cd_medico_solicitante,      
				a.cd_medico_executor,          
				a.ie_carater_internacao,       
				a.nr_seq_tipo_atendimento,	
				a.nr_seq_prestador_exec,        
				obter_especialidade_medico(a.cd_medico_solicitante, 'C') cd_especialidade,		
				a.nr_seq_clinica,	    	
				a.dt_atendimento_referencia dt_atendimento,  
				d.dt_mes_competencia,		
				a.cd_guia,		
				a.cd_guia_referencia cd_guia_principal,   
				a.ie_tipo_guia,		
				substr(obter_desc_expressao(285928),1,254) ds_guia_conta, 
				a.vl_total vl_conta     
			from	pls_conta a,	
				mprev_pop_alvo_benef c,
				pls_protocolo_conta d,
				mprev_pop_alvo_pessoa p,
				pls_segurado s
			where	p.nr_sequencia =  c.nr_seq_pop_alvo_pessoa
			and     a.nr_seq_protocolo =  d.nr_sequencia
			and	c.nr_seq_segurado =  a.nr_seq_segurado		
			and	p.nr_seq_populacao_alvo =  nr_seq_populacao_alvo_pc
			and	d.dt_mes_competencia >= dt_referencia_w
			and     a.nr_seq_segurado = s.nr_sequencia 
			and	(a.dt_atendimento IS NOT NULL AND a.dt_atendimento::text <> '')
			and	a.ie_status = 'F'
			and 	s.cd_pessoa_fisica = cd_pessoa_fisica_p
			
union all

			SELECT	2 ie_union,   
				a.nr_sequencia  nr_seq_conta_cubo,     
				c.nr_sequencia  nr_seq_pop_alvo_benef,  
				p.nr_sequencia  nr_seq_pop_alvo_pessoa,  
				null cd_medico_solicitante,
				null cd_medico_executor,
				a.ie_carater_internacao,		
				(a.ie_tipo_atend_tiss)::numeric  nr_seq_tipo_atendimento,		
				null nr_seq_prestador_exec,
				obter_especialidade_medico(a.cd_medico_solicitante, 'C') cd_especialidade,
				a.nr_seq_clinica,		
				a.dt_solicitacao dt_atendimento,		
				pkg_date_utils.start_of(a.dt_solicitacao, 'MONTH', 0) dt_mes_competencia,  
				a.cd_guia,		
				a.cd_guia_principal,		
				a.ie_tipo_guia,			
				substr(obter_desc_expressao(650944),1,254) ds_guia_conta,
				null vl_conta
			from	pls_guia_plano a,
				mprev_pop_alvo_benef c,
				mprev_pop_alvo_pessoa p,
				pls_segurado s
			where	p.nr_sequencia = c.nr_seq_pop_alvo_pessoa
			and	c.nr_seq_segurado = a.nr_seq_segurado		
			and	p.nr_seq_populacao_alvo = nr_seq_populacao_alvo_pc
			and	pkg_date_utils.start_of(a.dt_solicitacao, 'MONTH', 0) >= dt_referencia_w
			and 	a.nr_seq_segurado = s.nr_sequencia
			and	(a.dt_solicitacao IS NOT NULL AND a.dt_solicitacao::text <> '')  
			and	a.ie_status <> '3' 
			and 	s.cd_pessoa_fisica = cd_pessoa_fisica_p;
			
	c_diagnostico CURSOR(nr_seq_conta_cubo_pc	bigint) FOR
		SELECT	cd_doenca
		from	pls_diagnostico_conta
		where	nr_seq_conta = nr_seq_conta_cubo_pc;
			
	c_procedimento CURSOR(nr_seq_conta_cubo_pc	bigint,
		 ie_union_pc		bigint) FOR		
		SELECT	cd_procedimento,
			ie_origem_proced,
			qt_procedimento   
		from	pls_conta_proc
		where	nr_seq_conta	= nr_seq_conta_cubo_pc
		and 	ie_union_pc 	= 1
		
union all

		SELECT	cd_procedimento,  
			ie_origem_proced, 
			qt_solicitada     qt_procedimento
		from	pls_guia_plano_proc 
		where	nr_seq_guia	= nr_seq_conta_cubo_pc
		and 	ie_union_pc 	= 2;
		
	c_custo CURSOR(nr_seq_populacao_alvo_pc	bigint) FOR		
		SELECT	c.nr_sequencia nr_seq_pop_alvo_benef,
			p.nr_sequencia nr_seq_pop_alvo_pessoa,
			a.dt_mesano_referencia dt_mesano_referencia,
			a.vl_total_despesa vl_custo,
			a.vl_total_receita vl_receita,
			a.vl_resultado vl_resultado,
			a. pr_resultado pr_sinistralidade
		from	pls_segurado_valores a,			
			pls_segurado b,
			mprev_pop_alvo_benef    c,
			mprev_pop_alvo_pessoa   p
		where	p.nr_sequencia =  c.nr_seq_pop_alvo_pessoa
		and     a.nr_seq_segurado =  b.nr_sequencia
		and	c.nr_seq_segurado =  b.nr_sequencia
		and	p.nr_seq_populacao_alvo =  nr_seq_populacao_alvo_pc
		and	a.dt_mesano_referencia  >= dt_referencia_w
		and     b.cd_pessoa_fisica	=  cd_pessoa_fisica_p;
		
	c_beneficientes CURSOR(nr_seq_populacao_alvo_pc	text,
		 cd_pessoa_fisica_pc		bigint) FOR	
		SELECT  distinct
			d.nr_sequencia nr_seq_segurado, 
			pls_obter_dados_segurado(d.nr_sequencia, 'C') cd_usuario_plano,
			c.ie_preco ie_preco_plano,   
			substr(obter_valor_dominio(1669,c.ie_preco),1,255) ds_preco_plano, 
			d.dt_inclusao_operadora,   
			e.ie_situacao,         
			d.ie_situacao_atend,       
			pes.nr_sequencia        
		from  	mprev_pop_alvo_pessoa pes,  
			pls_segurado d,     
			pls_plano c,     
			pls_contrato e        
		where  	pes.cd_pessoa_fisica = d.cd_pessoa_fisica 
		and	d.nr_seq_contrato = e.nr_sequencia       
		and 	c.nr_sequencia = d.nr_seq_plano     
		and 	pes.nr_seq_populacao_alvo  = nr_seq_populacao_alvo_pc   
		and 	pes.cd_pessoa_fisica = cd_pessoa_fisica_pc;
		
	nr_seq_atend_w			mprev_pop_pes_atend.nr_sequencia%type;
	nr_seq_pop_alvo_data_w		mprev_pop_alvo_data.nr_sequencia%type := null;	
		
	
BEGIN		
		select 	pkg_date_utils.add_month(pkg_date_utils.start_of(clock_timestamp(),'MONTH', 0),- coalesce(qt_meses_atras,0), 0) dt_referencia
		into STRICT 	dt_referencia_w
		from 	mprev_regra_cubo
		where 	nr_sequencia = nr_seq_regra_cubo_p;				
		
		-- ***  BENEFICIARIOS *** --	

		for r_c_beneficientes in c_beneficientes(nr_seq_populacao_alvo_p,cd_pessoa_fisica_p) loop			
			insert into mprev_pop_alvo_benef(	
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec, 
						nr_seq_pop_alvo_pessoa,
						nr_seq_segurado,
						cd_usuario_plano, 
						ie_preco_plano,
						ds_preco_plano,
						dt_inclusao_plano, 
						ie_situacao_contrato,
						ie_situacao_atend
			) values (
						nextval('mprev_pop_alvo_benef_seq'), 
						clock_timestamp(),
						wheb_usuario_pck.get_nm_usuario,
						clock_timestamp(),
						wheb_usuario_pck.get_nm_usuario,
						r_c_beneficientes.nr_sequencia,
						r_c_beneficientes.nr_seq_segurado,
						r_c_beneficientes.cd_usuario_plano, 
						r_c_beneficientes.ie_preco_plano,
						r_c_beneficientes.ds_preco_plano,
						r_c_beneficientes.dt_inclusao_operadora, 
						r_c_beneficientes.ie_situacao,
						r_c_beneficientes.ie_situacao_atend
			);		
		end loop;

		for r_c_contas_guias in c_contas_guias(nr_seq_populacao_alvo_p) loop	
			nr_seq_pop_alvo_data_w := mprev_gravar_dados_pessoa_pck.inserir_data(nr_seq_populacao_alvo_p, r_c_contas_guias.dt_atendimento, wheb_usuario_pck.get_nm_usuario, nr_seq_pop_alvo_data_w);
			
			if (nr_seq_pop_alvo_data_w IS NOT NULL AND nr_seq_pop_alvo_data_w::text <> '')then
				insert into mprev_pop_pes_atend(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nr_seq_pop_alvo_benef,
							nr_seq_pop_alvo_data,
							cd_medico_solicitante,
							cd_medico_executor,
							ie_carater_internacao,
							nr_seq_tipo_atendimento,
							nr_seq_prestador_exec,
							cd_especialidade_solic,
							nr_seq_clinica,
							nr_crm_medico_solic,
							nr_crm_medico_exec,
							nm_medico_solic,
							nm_medico_exec,
							nm_prestador_exec,
							ds_especialidade_solic,
							ds_tipo_internacao,
							ds_tipo_atendimento,
							qt_atendimento,
							nr_seq_pop_alvo_pessoa,
							ie_tipo_guia,
							ds_guia_conta,
							vl_atendimento
				) values (
							nextval('mprev_pop_pes_atend_seq'),
							wheb_usuario_pck.get_nm_usuario,
							clock_timestamp(),
							r_c_contas_guias.nr_seq_pop_alvo_benef,
							nr_seq_pop_alvo_data_w,
							r_c_contas_guias.cd_medico_solicitante,
							r_c_contas_guias.cd_medico_executor,
							r_c_contas_guias.ie_carater_internacao,
							r_c_contas_guias.nr_seq_tipo_atendimento,
							r_c_contas_guias.nr_seq_prestador_exec,
							r_c_contas_guias.cd_especialidade,
							r_c_contas_guias.nr_seq_clinica,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							1,
							r_c_contas_guias.nr_seq_pop_alvo_pessoa,
							r_c_contas_guias.ie_tipo_guia,
							r_c_contas_guias.ds_guia_conta,
							r_c_contas_guias.vl_conta
				)
				returning nr_sequencia into nr_seq_atend_w;						
				
				-- ***  DIAGNOSTICOS *** --

				if (r_c_contas_guias.ie_union = 1) then
					for r_c_diagnostico in c_diagnostico(r_c_contas_guias.nr_seq_conta_cubo) loop
						if (r_c_diagnostico.cd_doenca IS NOT NULL AND r_c_diagnostico.cd_doenca::text <> '')then
							insert into mprev_pop_pes_diagnostico(
									nr_sequencia,
									nm_usuario,
									dt_atualizacao,
									nr_seq_pop_alvo_pessoa,
									nr_seq_pop_alvo_benef,
									nr_seq_pop_alvo_data,
									nr_seq_pop_alvo_atend,
									cd_doenca
							) values (
									nextval('mprev_pop_pes_diagnostico_seq'),
									wheb_usuario_pck.get_nm_usuario,
									clock_timestamp(),
									r_c_contas_guias.nr_seq_pop_alvo_pessoa,
									r_c_contas_guias.nr_seq_pop_alvo_benef,
									nr_seq_pop_alvo_data_w,
									nr_seq_atend_w,
									r_c_diagnostico.cd_doenca
							);
						end if;
					end loop;
				end if;		
				
				-- *** PROCEDIMENTO *** --

				for r_c_procedimento in c_procedimento(r_c_contas_guias.nr_seq_conta_cubo,r_c_contas_guias.ie_union) loop
					insert into mprev_pop_pes_atend_proc(
								nr_sequencia,
								nm_usuario,
								dt_atualizacao,
								nr_seq_pop_alvo_pessoa,
								nr_seq_pop_alvo_benef,
								nr_seq_pop_alvo_data,
								nr_seq_pop_alvo_atend,
								cd_procedimento,
								ie_origem_procedimento,
								qt_procedimento
					) values (
								nextval('mprev_pop_pes_atend_proc_seq'),
								wheb_usuario_pck.get_nm_usuario,
								clock_timestamp(),
								r_c_contas_guias.nr_seq_pop_alvo_pessoa,
								r_c_contas_guias.nr_seq_pop_alvo_benef,
								nr_seq_pop_alvo_data_w,
								nr_seq_atend_w,
								r_c_procedimento.cd_procedimento,
								r_c_procedimento.ie_origem_proced,
								r_c_procedimento.qt_procedimento
					);
					
				end loop;				
			end if;
		end loop;
		
		-- *** CUSTO *** --

		for r_c_custo in c_custo(nr_seq_populacao_alvo_p) loop
			nr_seq_pop_alvo_data_w := mprev_gravar_dados_pessoa_pck.inserir_data(nr_seq_populacao_alvo_p, r_c_custo.dt_mesano_referencia, wheb_usuario_pck.get_nm_usuario, nr_seq_pop_alvo_data_w);	
			
			if (nr_seq_pop_alvo_data_w IS NOT NULL AND nr_seq_pop_alvo_data_w::text <> '')then
				insert into mprev_pop_pes_custo(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nr_seq_pop_alvo_pessoa,
							nr_seq_pop_alvo_benef,
							nr_seq_pop_alvo_data,
							vl_custo,
							vl_receita,
							vl_resultado,
							pr_sinistralidade
				) values (
							nextval('mprev_pop_pes_custo_seq'),
							wheb_usuario_pck.get_nm_usuario,
							clock_timestamp(),
							r_c_custo.nr_seq_pop_alvo_pessoa,
							r_c_custo.nr_seq_pop_alvo_benef, 
							nr_seq_pop_alvo_data_w,
							r_c_custo.vl_custo,    
							r_c_custo.vl_receita,    
							r_c_custo.vl_resultado,    
							r_c_custo.pr_sinistralidade   
				);
			end if;
			
		end loop;
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_gravar_dados_pessoa_pck.mprev_gravar_dados_pessoa ( nr_seq_regra_cubo_p bigint, cd_pessoa_fisica_p text, nr_seq_populacao_alvo_p bigint) FROM PUBLIC;
