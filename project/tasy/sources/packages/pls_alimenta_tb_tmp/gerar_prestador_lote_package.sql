-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Obter prestador por lote de protocolo
CREATE OR REPLACE PROCEDURE pls_alimenta_tb_tmp.gerar_prestador_lote (nr_seq_lote_p pls_lote_protocolo.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_contador_w			integer := 0;
tb_nr_contador_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_w		pls_util_cta_pck.t_number_table;
tb_cd_prestador_w		pls_util_cta_pck.t_varchar2_table_50;
tb_ie_tipo_pessoa_prest_w	pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_classificacao_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_prestador_w		pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_lote_w		pls_util_cta_pck.t_number_table;
tb_null_w			pls_util_cta_pck.t_number_table;
tb_nr_seq_lote_processo_w	pls_util_cta_pck.t_number_table;
nr_seq_lote_w			pls_lote_protocolo.nr_sequencia%type := nr_seq_lote_p;

--  Lote de protocolo por analise
c01 CURSOR(	nr_seq_analise_pc	pls_analise_conta.nr_sequencia%type) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PL' ie_tipo_prestador,
		x.nr_sequencia nr_seq_lote,
		null
	from	pls_lote_protocolo	x,
		pls_conta		c,
		pls_protocolo_conta	l,
		pls_prestador		p
	where	p.nr_sequencia		= x.nr_seq_prestador
	and	l.nr_sequencia		= c.nr_seq_protocolo
	and	x.nr_sequencia		= l.nr_seq_lote
	and	c.nr_seq_analise	= nr_seq_analise_pc
	group by p.nr_sequencia, p.cd_prestador, p.cd_cgc, p.nr_seq_classificacao, x.nr_sequencia;

--  Lote de protocolo por lote de processos
c02 CURSOR(	nr_seq_lote_processo_pc		pls_cta_lote_processo.nr_sequencia%type) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PL' ie_tipo_prestador,
		x.nr_sequencia nr_seq_lote,
		nr_seq_lote_processo_pc nr_seq_lote_processo_p,
		null
	from	pls_lote_protocolo	x,
		pls_cta_lote_proc_conta	y,
		pls_conta		c,
		pls_protocolo_conta	l,
		pls_prestador		p
	where	p.nr_sequencia		= x.nr_seq_prestador
	and	l.nr_sequencia		= c.nr_seq_protocolo
	and	c.nr_sequencia		= y.nr_seq_conta
	and	x.nr_sequencia		= l.nr_seq_lote
	and	y.nr_seq_lote_processo	= nr_seq_lote_processo_pc
	group by p.nr_sequencia, p.cd_prestador, p.cd_cgc, p.nr_seq_classificacao, x.nr_sequencia;


BEGIN
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') or -- Lote de protocolo
	(nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') or -- Protocolo de conta
	(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then -- Conta
	if (coalesce(nr_seq_lote_w::text, '') = '') then
		if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then -- Protocolo
			select	max(nr_seq_lote)
			into STRICT	nr_seq_lote_w
			from	pls_protocolo_conta
			where	nr_sequencia	= nr_seq_protocolo_p;

		elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then -- Conta
			select	max(p.nr_seq_lote)
			into STRICT	nr_seq_lote_w
			from	pls_protocolo_conta	p,
				pls_conta		c
			where	p.nr_sequencia	= c.nr_seq_protocolo
			and	c.nr_sequencia	= nr_seq_conta_p;

		end if;
	end if;

	if (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') then
		nr_contador_w := 1;
		begin
		select	p.nr_sequencia,
			p.cd_prestador,
			CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END ,
			p.nr_seq_classificacao,
			'PL' ie_tipo_prestador,
			l.nr_sequencia,
			null,
			null
		into STRICT	tb_nr_seq_prestador_w(nr_contador_w),
			tb_cd_prestador_w(nr_contador_w),
			tb_ie_tipo_pessoa_prest_w(nr_contador_w),
			tb_nr_seq_classificacao_w(nr_contador_w),
			tb_ie_tipo_prestador_w(nr_contador_w),
			tb_nr_seq_lote_w(nr_contador_w),
			tb_null_w(nr_contador_w),
			tb_nr_seq_lote_processo_w(nr_contador_w)
		from	pls_lote_protocolo	l,
			pls_prestador		p
		where	p.nr_sequencia	= l.nr_seq_prestador
		and	l.nr_sequencia	= nr_seq_lote_w;
		exception
		when others then
			null;
		end;
	end if;

elsif (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') then
	-- Gerar lote de protocolo por analise
	open c01( nr_seq_analise_p );
	loop
	fetch c01 bulk collect into	tb_nr_seq_prestador_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_lote_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_nr_seq_lote_w, tb_null_w, tb_null_w, tb_null_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_null_w, tb_null_w, tb_null_w, tb_null_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_null_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_null_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_null_w := _ora2pg_r.tb_nr_seq_analise_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_processo_p;

	end loop;

elsif (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then
	-- Gerar lote de protocolo por lote de processos
	open c02( nr_seq_lote_processo_p );
	loop
	fetch c02 bulk collect into	tb_nr_seq_prestador_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_lote_w,
					tb_nr_seq_lote_processo_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_nr_seq_lote_w, tb_null_w, tb_null_w, tb_null_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_null_w, tb_null_w, tb_null_w, tb_nr_seq_lote_processo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_null_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_null_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_null_w := _ora2pg_r.tb_nr_seq_analise_p; tb_nr_seq_lote_processo_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;

end if;

-- se sobrou algo manda para o banco e zera as variÃ¡veis
if (tb_nr_seq_prestador_w.count > 0) then
	SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_nr_seq_lote_w, tb_null_w, tb_null_w, tb_null_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_null_w, tb_null_w, tb_null_w, tb_nr_seq_lote_processo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_null_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_null_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_null_w := _ora2pg_r.tb_nr_seq_analise_p; tb_nr_seq_lote_processo_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alimenta_tb_tmp.gerar_prestador_lote (nr_seq_lote_p pls_lote_protocolo.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type) FROM PUBLIC;
