-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Obter prestador por procedimento (participante)
CREATE OR REPLACE PROCEDURE pls_alimenta_tb_tmp.gerar_prestador_proc (nr_seq_lote_p pls_lote_protocolo.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_contador_w			integer := 0;
tb_nr_seq_prestador_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_lote_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_protocolo_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_proc_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_mat_w		pls_util_cta_pck.t_number_table;
tb_cd_prestador_w		pls_util_cta_pck.t_varchar2_table_50;
tb_ie_tipo_pessoa_prest_w	pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_classificacao_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_prestador_w		pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_prest_inter_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_proc_partic_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_analise_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_lote_processo_w	pls_util_cta_pck.t_number_table;
tb_null_w			pls_util_cta_pck.t_number_table;

-- Procedimento por lote de protocolo
c01 CURSOR(	nr_seq_lote_pc		pls_lote_protocolo.nr_sequencia%type ) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		null nr_seq_prest_inter,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante	r,
		pls_conta_proc		s,
		pls_conta		c,
		pls_protocolo_conta	l,
		pls_prestador		p
	where	l.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prestador
	and	l.nr_seq_lote	= nr_seq_lote_pc
	
union all

	SELECT	null nr_seq_prestador,
		p.nr_sequencia nr_seq_prest_inter,
		null cd_prestador,
		CASE WHEN coalesce(p.cd_cgc_intercambio::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		null nr_seq_classificacao,
		'PIP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante		r,
		pls_conta_proc			s,
		pls_conta			c,
		pls_protocolo_conta		l,
		pls_prestador_intercambio	p
	where	l.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prest_inter
	and	l.nr_seq_lote	= nr_seq_lote_pc;

-- Procedimento por protocolo
c02 CURSOR(	nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type ) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		null nr_seq_prest_inter,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante	r,
		pls_conta_proc		s,
		pls_conta		c,
		pls_protocolo_conta	l,
		pls_prestador		p
	where	l.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prestador
	and	l.nr_sequencia	= nr_seq_protocolo_pc
	
union all

	SELECT	null nr_seq_prestador,
		p.nr_sequencia nr_seq_prest_inter,
		null cd_prestador,
		CASE WHEN coalesce(p.cd_cgc_intercambio::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		null nr_seq_classificacao,
		'PIP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante		r,
		pls_conta_proc			s,
		pls_conta			c,
		pls_protocolo_conta		l,
		pls_prestador_intercambio	p
	where	l.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prest_inter
	and	l.nr_sequencia	= nr_seq_protocolo_pc;

-- Procedimento por conta
c03 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type ) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		null nr_seq_prest_inter,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante	r,
		pls_conta_proc		s,
		pls_conta		c,
		pls_prestador		p
	where	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prestador
	and	c.nr_sequencia	= nr_seq_conta_pc
	
union all

	SELECT	null nr_seq_prestador,
		p.nr_sequencia nr_seq_prest_inter,
		null cd_prestador,
		CASE WHEN coalesce(p.cd_cgc_intercambio::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		null nr_seq_classificacao,
		'PIP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante		r,
		pls_conta_proc			s,
		pls_conta			c,
		pls_prestador_intercambio	p
	where	c.nr_sequencia	= s.nr_seq_conta
	and	s.nr_sequencia	= r.nr_seq_conta_proc
	and	p.nr_sequencia	= r.nr_seq_prest_inter
	and	c.nr_sequencia	= nr_seq_conta_pc;

-- Procedimento por analise
c04 CURSOR(	nr_seq_analise_pc	pls_analise_conta.nr_sequencia%type ) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		null nr_seq_prest_inter,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante	r,
		pls_conta_proc		s,
		pls_conta		c,
		pls_prestador		p
	where	c.nr_sequencia		= s.nr_seq_conta
	and	s.nr_sequencia		= r.nr_seq_conta_proc
	and	p.nr_sequencia		= r.nr_seq_prestador
	and	c.nr_seq_analise	= nr_seq_analise_pc
	
union all

	SELECT	null nr_seq_prestador,
		p.nr_sequencia nr_seq_prest_inter,
		null cd_prestador,
		CASE WHEN coalesce(p.cd_cgc_intercambio::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		null nr_seq_classificacao,
		'PIP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		null
	from	pls_proc_participante		r,
		pls_conta_proc			s,
		pls_conta			c,
		pls_prestador_intercambio	p
	where	c.nr_sequencia		= s.nr_seq_conta
	and	s.nr_sequencia		= r.nr_seq_conta_proc
	and	p.nr_sequencia		= r.nr_seq_prest_inter
	and	c.nr_seq_analise	= nr_seq_analise_pc;

-- Procedimento por lote de processos
c05 CURSOR(	nr_seq_lote_processo_pc		pls_cta_lote_processo.nr_sequencia%type ) FOR
	SELECT	p.nr_sequencia nr_seq_prestador,
		null nr_seq_prest_inter,
		p.cd_prestador,
		CASE WHEN coalesce(p.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		p.nr_seq_classificacao,
		'PP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		nr_seq_lote_processo_pc nr_seq_lote_processo_p,
		null
	from	pls_cta_lote_proc_conta	y,
		pls_proc_participante	r,
		pls_conta_proc		s,
		pls_conta		c,
		pls_prestador		p
	where	c.nr_sequencia		= s.nr_seq_conta
	and	s.nr_sequencia		= r.nr_seq_conta_proc
	and	p.nr_sequencia		= r.nr_seq_prestador
	and	c.nr_sequencia		= y.nr_seq_conta
	and	y.nr_seq_lote_processo	= nr_seq_lote_processo_pc
	
union all

	SELECT	null nr_seq_prestador,
		p.nr_sequencia nr_seq_prest_inter,
		null cd_prestador,
		CASE WHEN coalesce(p.cd_cgc_intercambio::text, '') = '' THEN 'PF'  ELSE 'PJ' END  ie_tipo_pessoa_prest,
		null nr_seq_classificacao,
		'PIP' ie_tipo_prestador,
		c.nr_seq_protocolo,
		c.nr_sequencia nr_seq_conta,
		s.nr_sequencia nr_seq_conta_proc,
		r.nr_sequencia nr_seq_proc_partic,
		c.nr_seq_analise,
		nr_seq_lote_processo_pc nr_seq_lote_processo_p,
		null
	from	pls_cta_lote_proc_conta		y,
		pls_proc_participante		r,
		pls_conta_proc			s,
		pls_conta			c,
		pls_prestador_intercambio	p
	where	c.nr_sequencia		= s.nr_seq_conta
	and	s.nr_sequencia		= r.nr_seq_conta_proc
	and	p.nr_sequencia		= r.nr_seq_prest_inter
	and	c.nr_sequencia		= y.nr_seq_conta
	and	y.nr_seq_lote_processo	= nr_seq_lote_processo_pc;


BEGIN

-- Procedimentos = Participantes
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	-- Por Lote de Protocolo
	open c01( nr_seq_lote_p );
	loop
	fetch c01 bulk collect into	tb_nr_seq_prestador_w,
					tb_nr_seq_prest_inter_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_protocolo_w,
					tb_nr_seq_conta_w,
					tb_nr_seq_conta_proc_w,
					tb_nr_seq_proc_partic_w,
					tb_nr_seq_analise_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_nr_seq_lote_w, tb_nr_seq_protocolo_w, tb_nr_seq_conta_w, tb_nr_seq_conta_proc_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_nr_seq_prest_inter_w, tb_nr_seq_proc_partic_w, tb_nr_seq_analise_w, tb_null_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_protocolo_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_nr_seq_prest_inter_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_nr_seq_proc_partic_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_nr_seq_analise_w := _ora2pg_r.tb_nr_seq_analise_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;

elsif (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	-- Por protocolo
	open c02( nr_seq_protocolo_p );
	loop

	fetch c02 bulk collect into	tb_nr_seq_prestador_w,
					tb_nr_seq_prest_inter_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_protocolo_w,
					tb_nr_seq_conta_w,
					tb_nr_seq_conta_proc_w,
					tb_nr_seq_proc_partic_w,
					tb_nr_seq_analise_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_null_w, tb_nr_seq_protocolo_w, tb_nr_seq_conta_w, tb_nr_seq_conta_proc_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_nr_seq_prest_inter_w, tb_nr_seq_proc_partic_w, tb_nr_seq_analise_w, tb_null_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_protocolo_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_nr_seq_prest_inter_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_nr_seq_proc_partic_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_nr_seq_analise_w := _ora2pg_r.tb_nr_seq_analise_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;

elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	-- Por conta
	open c03(nr_seq_conta_p);
	loop

	fetch c03 bulk collect into	tb_nr_seq_prestador_w,
					tb_nr_seq_prest_inter_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_protocolo_w,
					tb_nr_seq_conta_w,
					tb_nr_seq_conta_proc_w,
					tb_nr_seq_proc_partic_w,
					tb_nr_seq_analise_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_null_w, tb_nr_seq_protocolo_w, tb_nr_seq_conta_w, tb_nr_seq_conta_proc_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_nr_seq_prest_inter_w, tb_nr_seq_proc_partic_w, tb_nr_seq_analise_w, tb_null_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_protocolo_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_nr_seq_prest_inter_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_nr_seq_proc_partic_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_nr_seq_analise_w := _ora2pg_r.tb_nr_seq_analise_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;

elsif (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') then
	-- Por Analise
	open c04(nr_seq_analise_p);
	loop

	fetch c04 bulk collect into	tb_nr_seq_prestador_w,
					tb_nr_seq_prest_inter_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_protocolo_w,
					tb_nr_seq_conta_w,
					tb_nr_seq_conta_proc_w,
					tb_nr_seq_proc_partic_w,
					tb_nr_seq_analise_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_null_w, tb_nr_seq_protocolo_w, tb_nr_seq_conta_w, tb_nr_seq_conta_proc_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_nr_seq_prest_inter_w, tb_nr_seq_proc_partic_w, tb_nr_seq_analise_w, tb_null_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_protocolo_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_nr_seq_prest_inter_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_nr_seq_proc_partic_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_nr_seq_analise_w := _ora2pg_r.tb_nr_seq_analise_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;

elsif (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then
	-- Por Lote de processos
	open c05(nr_seq_lote_processo_p);
	loop
	fetch c05 bulk collect into	tb_nr_seq_prestador_w,
					tb_nr_seq_prest_inter_w,
					tb_cd_prestador_w,
					tb_ie_tipo_pessoa_prest_w,
					tb_nr_seq_classificacao_w,
					tb_ie_tipo_prestador_w,
					tb_nr_seq_protocolo_w,
					tb_nr_seq_conta_w,
					tb_nr_seq_conta_proc_w,
					tb_nr_seq_proc_partic_w,
					tb_nr_seq_analise_w,
					tb_nr_seq_lote_processo_w,
					tb_null_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_prestador_w.count = 0;

		SELECT * FROM pls_alimenta_tb_tmp.inserir_prestador(	nr_contador_w, tb_nr_seq_prestador_w, tb_null_w, tb_nr_seq_protocolo_w, tb_nr_seq_conta_w, tb_nr_seq_conta_proc_w, tb_null_w, tb_cd_prestador_w, tb_ie_tipo_pessoa_prest_w, tb_nr_seq_classificacao_w, tb_ie_tipo_prestador_w, tb_nr_seq_prest_inter_w, tb_nr_seq_proc_partic_w, tb_nr_seq_analise_w, tb_nr_seq_lote_processo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_null_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_protocolo_w := _ora2pg_r.tb_nr_seq_protocolo_p; tb_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_null_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_cd_prestador_w := _ora2pg_r.tb_cd_prestador_p; tb_ie_tipo_pessoa_prest_w := _ora2pg_r.tb_ie_tipo_pessoa_prest_p; tb_nr_seq_classificacao_w := _ora2pg_r.tb_nr_seq_classificacao_p; tb_ie_tipo_prestador_w := _ora2pg_r.tb_ie_tipo_prestador_p; tb_nr_seq_prest_inter_w := _ora2pg_r.tb_nr_seq_prest_inter_p; tb_nr_seq_proc_partic_w := _ora2pg_r.tb_nr_seq_proc_partic_p; tb_nr_seq_analise_w := _ora2pg_r.tb_nr_seq_analise_p; tb_nr_seq_lote_processo_w := _ora2pg_r.tb_nr_seq_lote_processo_p;
	end loop;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alimenta_tb_tmp.gerar_prestador_proc (nr_seq_lote_p pls_lote_protocolo.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type) FROM PUBLIC;
