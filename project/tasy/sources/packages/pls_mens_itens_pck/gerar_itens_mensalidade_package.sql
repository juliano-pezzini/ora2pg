-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_mens_itens_pck.gerar_itens_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


pls_lote_mensalidade_w			pls_lote_mensalidade%rowtype;
qt_mensalidade_benef_w			integer;
ie_inseriu_preco_pre_w			varchar(1);

--Regra geral

ie_mensalidade_mes_rescisao_w		pls_regra_mens_contrato.ie_mensalidade_mes_rescisao%type;
ie_rescisao_proporcional_w		pls_regra_mens_contrato.ie_rescisao_proporcional%type;
ie_existe_mensalidade_w			varchar(1);
ie_titularidade_w			varchar(1);
ie_benef_ativo_w			varchar(1);
nr_seq_segurado_ant_w			pls_segurado.nr_seq_segurado_ant%type;
nr_seq_titular_ant_w			pls_segurado.nr_seq_titular%type;

C01 CURSOR(nr_seq_lote_pc	pls_lote_mensalidade.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_mensalidade_seg,
		a.dt_mesano_referencia,
		a.nr_seq_segurado_preco,
		a.ie_tipo_estipulante,
		a.nr_parcela,
		a.ie_rescisao_proporcional,
		a.ie_pce_proporcional,
		a.ie_reativacao_proporcional,
		c.dt_inclusao_pce,
		a.dt_inicio_cobertura,
		a.dt_fim_cobertura,
		a.qt_idade,
		b.nr_seq_pagador,
		b.nr_sequencia nr_seq_mensalidade,
		b.nr_seq_motivo_susp,
		b.nr_seq_pagador_fin,
		b.dt_referencia,
		c.nr_sequencia nr_seq_segurado,
		c.nr_seq_titular,
		c.nr_seq_contrato,
		c.nr_seq_intercambio,
		c.nr_seq_subestipulante,
		c.ie_tipo_segurado,
		c.ie_tipo_repasse,
		c.dt_contratacao,
		c.dt_rescisao,
		c.dt_reativacao,
		c.qt_dias_reativacao,
		c.ie_acao_contrato,
		c.nr_seq_parentesco,
		c.ie_tipo_parentesco,
		c.ie_mensalidade_proporcional,
		c.nr_seq_tabela,
		coalesce(c.ie_taxa_inscricao,'S') ie_taxa_inscricao,
		d.nr_sequencia nr_seq_plano,
		d.ds_plano,
		d.ie_regulamentacao,
		d.ie_preco,
		e.nm_tabela,
		coalesce(e.tx_adaptacao,0) tx_adaptacao,
		f.dt_nascimento,
		coalesce((	SELECT	max(x.ie_desconsiderar_vl_limite)
			from	pls_causa_rescisao x
			where	x.nr_sequencia = c.nr_seq_causa_rescisao), 'N') ie_desconsiderar_vl_limite,
		c.dt_migracao,
		c.nr_seq_segurado_ant,
		c.nr_seq_segurado_mig,
		(select	max(x.nr_seq_segurado_ant)
		from	pls_segurado x
		where	x.nr_sequencia = c.nr_seq_titular) nr_seq_titular_ant,
		a.nr_seq_regra_susp_reaj_fx,
		c.dt_rescisao_ant,
		(select	max(x.ie_calculo_proporcional)
		from	pls_contrato_pagador x
		where	x.nr_sequencia = b.nr_seq_pagador) ie_calculo_proporcional
	FROM pessoa_fisica f, pls_plano d, pls_mensalidade b, pls_mensalidade_segurado a, pls_segurado c
LEFT OUTER JOIN pls_tabela_preco e ON (c.nr_seq_tabela = e.nr_sequencia)
WHERE b.nr_sequencia	= a.nr_seq_mensalidade and c.nr_sequencia	= a.nr_seq_segurado and d.nr_sequencia	= a.nr_seq_plano  and f.cd_pessoa_fisica = c.cd_pessoa_fisica and a.nr_seq_lote	= nr_seq_lote_pc and ((b.nr_sequencia = nr_seq_mensalidade_p) or (coalesce(nr_seq_mensalidade_p::text, '') = '')) order by 
		a.dt_mesano_referencia asc, --Gerar por ordem de competencia
		c.nr_seq_titular desc, --Gerar primeiro os titulares
		a.nr_sequencia asc;
BEGIN
pls_lote_mensalidade_w	:= pls_mens_selecao_benef_pck.get_lote_mensalidade;
CALL pls_mens_itens_pck.carregar_grupo_itens(pls_lote_mensalidade_w.nr_seq_grupo_itens);

--Nesessario chamar as rotinas ATUALIZAR_PLS_MENS_SEG_ITEM e INSERIR_MENSALIDADE_SCA para limpar todos os vetores de itens de mensalidade

current_setting('pls_mens_itens_pck.tb_nr_seq_mensalidade_seg_w')::pls_util_cta_pck.t_number_table.delete;
current_setting('pls_mens_itens_pck.tb_sca_nr_seq_item_w')::pls_util_cta_pck.t_number_table.delete;
CALL pls_mens_itens_pck.atualizar_pls_mens_seg_item(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
CALL pls_mens_itens_pck.inserir_mensalidade_sca(cd_estabelecimento_p, nm_usuario_p);

for r_c01_w in C01(nr_seq_lote_p) loop
	begin
	PERFORM set_config('pls_mens_itens_pck.nr_seq_motivo_susp_w', r_c01_w.nr_seq_motivo_susp, false);
	PERFORM set_config('pls_mens_itens_pck.vl_preco_pre_w', 0, false);
	PERFORM set_config('pls_mens_itens_pck.vl_preco_pre_nao_sub_w', 0, false);
	PERFORM set_config('pls_mens_itens_pck.vl_reaj_variacao_custo_w', 0, false);
	PERFORM set_config('pls_mens_itens_pck.vl_reaj_faixa_etaria_w', 0, false);
	PERFORM set_config('pls_mens_itens_pck.vl_total_preco_pre_w', 0, false);
	ie_benef_ativo_w		:= 'N';
	PERFORM set_config('pls_mens_itens_pck.ie_gerou_item_benef_w', 'N', false);
	PERFORM set_config('pls_mens_itens_pck.dt_mesano_referencia_w', r_c01_w.dt_mesano_referencia, false);
	PERFORM set_config('pls_mens_itens_pck.dt_referencia_w', r_c01_w.dt_referencia, false);
	
	--Definicao de pagadores do beneficiario

	CALL pls_mens_itens_pck.definir_pagador_beneficiario(r_c01_w.nr_seq_segurado, r_c01_w.dt_mesano_referencia, r_c01_w.ie_pce_proporcional);
	ie_existe_mensalidade_w := pls_mens_itens_pck.carregar_itens_mens_benef(r_c01_w.nr_seq_segurado, r_c01_w.dt_mesano_referencia, ie_existe_mensalidade_w);
	
	nr_seq_titular_ant_w	:= null;
	
	if	((r_c01_w.dt_migracao IS NOT NULL AND r_c01_w.dt_migracao::text <> '') and (r_c01_w.dt_mesano_referencia <= add_months(trunc(r_c01_w.dt_migracao, 'mm'), pls_mensalidade_util_pck.get_qt_meses_benef_rescindido))) then
		if (r_c01_w.nr_seq_segurado_ant IS NOT NULL AND r_c01_w.nr_seq_segurado_ant::text <> '') and (r_c01_w.nr_seq_segurado_mig IS NOT NULL AND r_c01_w.nr_seq_segurado_mig::text <> '') then
			nr_seq_segurado_ant_w	:= r_c01_w.nr_seq_segurado_mig;
		else
			nr_seq_segurado_ant_w 	:= coalesce(r_c01_w.nr_seq_segurado_ant, r_c01_w.nr_seq_segurado_mig);
		end if;
	else
		if	((coalesce(r_c01_w.nr_seq_segurado_ant::text, '') = '') and (coalesce(r_c01_w.nr_seq_segurado_mig::text, '') = '') and (r_c01_w.nr_seq_titular_ant IS NOT NULL AND r_c01_w.nr_seq_titular_ant::text <> '')) then
			nr_seq_titular_ant_w	:= r_c01_w.nr_seq_titular_ant;
		end if;
		
		nr_seq_segurado_ant_w	:= null;
	end if;

	CALL pls_mens_itens_limite_pck.obter_regras_itens_limite(	r_c01_w.nr_seq_contrato, r_c01_w.nr_seq_titular, r_c01_w.nr_seq_segurado,
								r_c01_w.dt_mesano_referencia, r_c01_w.dt_referencia, r_c01_w.nr_seq_plano, 
								nr_seq_segurado_ant_w, nr_seq_titular_ant_w);
	
	if (pls_lote_mensalidade_w.ie_utilizacao = 'U') then
		goto UTILIZACAO;
	end if;
	
	select	CASE WHEN coalesce(r_c01_w.nr_seq_titular::text, '') = '' THEN 'T'  ELSE 'D' END
	into STRICT	ie_titularidade_w
	;

	SELECT * FROM pls_mensalidade_util_pck.obter_regra_geral(r_c01_w.nr_seq_contrato, r_c01_w.nr_seq_intercambio, r_c01_w.ie_tipo_estipulante, r_c01_w.dt_mesano_referencia, ie_mensalidade_mes_rescisao_w, ie_rescisao_proporcional_w) INTO STRICT ie_mensalidade_mes_rescisao_w, ie_rescisao_proporcional_w;

	if	(((coalesce(r_c01_w.dt_rescisao::text, '') = '') or (trunc(r_c01_w.dt_rescisao,'month') > r_c01_w.dt_mesano_referencia)) or
		 ((ie_mensalidade_mes_rescisao_w = 'S') and (trunc(r_c01_w.dt_rescisao,'month') = r_c01_w.dt_mesano_referencia) and (r_c01_w.dt_rescisao > r_c01_w.dt_inicio_cobertura))) then
		ie_benef_ativo_w	:= 'S';
		
		if (r_c01_w.ie_preco in ('1','4')) and (pls_mens_itens_pck.obter_se_item_grupo('1',null) = 'S') then --Gerar os itens referente ao preco pre-estabelecido
			pls_mens_itens_preco_pre_pck.gerar_itens_preco_pre(nr_seq_lote_p,
									r_c01_w.nr_seq_mensalidade,
									r_c01_w.nr_seq_mensalidade_seg,
									r_c01_w.dt_mesano_referencia,
									r_c01_w.nr_seq_segurado_preco,
									r_c01_w.nr_parcela,
									r_c01_w.dt_inicio_cobertura,
									r_c01_w.dt_fim_cobertura,
									r_c01_w.ie_tipo_estipulante,
									r_c01_w.ie_pce_proporcional,
									r_c01_w.ie_reativacao_proporcional,
									r_c01_w.dt_inclusao_pce,
									r_c01_w.nr_seq_segurado,
									r_c01_w.nr_seq_titular,
									r_c01_w.dt_contratacao,
									r_c01_w.dt_rescisao,
									r_c01_w.dt_reativacao,
									r_c01_w.qt_dias_reativacao,
									r_c01_w.ie_mensalidade_proporcional,
									r_c01_w.nr_seq_pagador,
									r_c01_w.nr_seq_contrato,
									r_c01_w.nr_seq_intercambio,
									r_c01_w.nr_seq_plano,
									r_c01_w.ds_plano,
									r_c01_w.ie_regulamentacao,
									r_c01_w.nr_seq_tabela,
									r_c01_w.nm_tabela,
									r_c01_w.tx_adaptacao,
									r_c01_w.dt_nascimento,
									r_c01_w.ie_rescisao_proporcional,
									r_c01_w.nr_seq_regra_susp_reaj_fx,
									r_c01_w.ie_calculo_proporcional,
									cd_estabelecimento_p,
									nm_usuario_p,
									current_setting('pls_mens_itens_pck.vl_preco_pre_w')::pls_mensalidade_seg_item.vl_item%type,
									current_setting('pls_mens_itens_pck.vl_preco_pre_nao_sub_w')::pls_mensalidade_seg_item.vl_item%type,
									current_setting('pls_mens_itens_pck.vl_reaj_variacao_custo_w')::pls_mensalidade_seg_item.vl_item%type,
									current_setting('pls_mens_itens_pck.vl_reaj_faixa_etaria_w')::pls_mensalidade_seg_item.vl_item%type,
									ie_inseriu_preco_pre_w);
			PERFORM set_config('pls_mens_itens_pck.vl_total_preco_pre_w', current_setting('pls_mens_itens_pck.vl_preco_pre_w')::pls_mensalidade_seg_item.vl_item%type + current_setting('pls_mens_itens_pck.vl_preco_pre_nao_sub_w')::pls_mensalidade_seg_item.vl_item%type + current_setting('pls_mens_itens_pck.vl_reaj_variacao_custo_w')::pls_mensalidade_seg_item.vl_item%type + current_setting('pls_mens_itens_pck.vl_reaj_faixa_etaria_w')::pls_mensalidade_seg_item.vl_item%type, false);
		else
			ie_inseriu_preco_pre_w	:= 'N';
			PERFORM set_config('pls_mens_itens_pck.vl_preco_pre_w', 0, false);
			PERFORM set_config('pls_mens_itens_pck.vl_total_preco_pre_w', 0, false);
			PERFORM set_config('pls_mens_itens_pck.vl_preco_pre_nao_sub_w', 0, false);
			PERFORM set_config('pls_mens_itens_pck.vl_reaj_variacao_custo_w', 0, false);
			PERFORM set_config('pls_mens_itens_pck.vl_reaj_faixa_etaria_w', 0, false);
		end if;
		
		if (r_c01_w.ie_preco in ('2','3','4')) and (pls_mens_itens_pck.obter_se_item_grupo('10',null) = 'S') then --Gerar o valor de manutencao de pos-estabelecido
			if (pls_mens_itens_pck.obter_se_pagador_item(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_pagador, '10', null, r_c01_w.ie_pce_proporcional, null) = 'S') and (pls_mens_itens_pck.obter_se_item_gerado(r_c01_w.nr_seq_segurado, '10', null, null, null) = 'N') then
				CALL pls_mens_itens_conta_pck.gerar_vl_manutencao_pos(	r_c01_w.nr_seq_mensalidade_seg,
											r_c01_w.dt_mesano_referencia,
											r_c01_w.nr_seq_contrato,
											r_c01_w.nr_seq_intercambio,
											r_c01_w.nr_seq_plano);
			end if;
		end if;
		
		if (pls_mens_itens_pck.obter_se_item_grupo('15',null) = 'S') then --Servicos e coberturas adicionais
			CALL pls_mens_itens_sca_pck.gerar_sca(r_c01_w.nr_seq_mensalidade,
							r_c01_w.nr_seq_mensalidade_seg,
							r_c01_w.dt_mesano_referencia,
							r_c01_w.qt_idade,
							r_c01_w.ie_tipo_estipulante,
							nr_seq_lote_p,
							trunc(pls_lote_mensalidade_w.dt_mesano_referencia,'month'),
							r_c01_w.nr_seq_segurado,
							r_c01_w.dt_contratacao,
							r_c01_w.dt_rescisao,
							r_c01_w.dt_reativacao,
							r_c01_w.nr_seq_contrato,
							r_c01_w.nr_seq_intercambio,
							r_c01_w.nr_seq_pagador,
							r_c01_w.ie_mensalidade_proporcional,
							ie_titularidade_w,
							cd_estabelecimento_p,
							r_c01_w.ie_pce_proporcional,
							r_c01_w.dt_inclusao_pce,
							r_c01_w.ie_reativacao_proporcional,
							r_c01_w.dt_rescisao_ant,
							nm_usuario_p);
		end if;
		
		if (pls_mens_itens_pck.obter_se_item_grupo('34',null) = 'S') then --Gerar o valor de manutencao de intercambio
			CALL pls_mens_item_manutenc_interc(	r_c01_w.nr_seq_mensalidade_seg,
							r_c01_w.dt_mesano_referencia,
							r_c01_w.nr_seq_intercambio,
							nm_usuario_p);
		end if;
		
		--Gerar a cobranca de taxa de inscricao

		if (r_c01_w.ie_taxa_inscricao = 'S') and (pls_mens_itens_pck.obter_se_item_grupo('2',null) = 'S') and (pls_mens_itens_pck.obter_se_pagador_item(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_pagador, '2', null, r_c01_w.ie_pce_proporcional, null) = 'S') and (pls_mens_itens_pck.obter_se_item_gerado(r_c01_w.nr_seq_segurado, '2', null, null, null) = 'N') then
			CALL pls_mens_item_taxa_inscricao(	r_c01_w.nr_seq_mensalidade_seg, r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_plano,
							r_c01_w.nr_seq_pagador, r_c01_w.dt_mesano_referencia, r_c01_w.nr_parcela,
							r_c01_w.nr_seq_contrato, r_c01_w.nr_seq_intercambio, r_c01_w.nr_seq_subestipulante,
							r_c01_w.ie_acao_contrato, current_setting('pls_mens_itens_pck.vl_total_preco_pre_w')::pls_mensalidade_seg_item.vl_item%type, cd_estabelecimento_p, nm_usuario_p);
		end if;
		
		--Gerar a cobranca de emissao de via adicional da carteirinha

		if (pls_mens_itens_pck.obter_se_item_grupo('11',null) = 'S') and (pls_mens_itens_pck.obter_se_pagador_item(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_pagador, '11', null, r_c01_w.ie_pce_proporcional, null) = 'S') and (pls_mens_itens_pck.obter_se_gera_item(ie_inseriu_preco_pre_w, r_c01_w.dt_mesano_referencia, pls_lote_mensalidade_w.dt_mesano_referencia) = 'S') then
			CALL pls_mens_item_via_carteira(r_c01_w.nr_seq_mensalidade_seg, r_c01_w.nr_seq_segurado, nm_usuario_p);
		end if;
		
		--Gerar a cobranca do agravo

		if (pls_mens_itens_pck.obter_se_item_grupo('21',null) = 'S') and (pls_mens_itens_pck.obter_se_pagador_item(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_pagador, '21', null, r_c01_w.ie_pce_proporcional, null) = 'S') then
			CALL pls_mens_item_agravo(r_c01_w.nr_seq_mensalidade_seg, r_c01_w.nr_seq_segurado, r_c01_w.dt_mesano_referencia, current_setting('pls_mens_itens_pck.vl_total_preco_pre_w')::pls_mensalidade_seg_item.vl_item%type, nm_usuario_p);
		end if;
		
		--Gerar lancamento programado de bonificacao por indicacao

		--OBS: Essa rotina deve ser chamada sempre antes da geracao dos lancamentos manuais e bonificacao

		if (pls_mens_itens_pck.obter_se_item_grupo('14',null) = 'S') then
			CALL pls_gerar_lanc_bonif_indicacao(	r_c01_w.nr_seq_segurado,
							r_c01_w.dt_mesano_referencia,
							cd_estabelecimento_p,
							nm_usuario_p);
		end if;
	end if;
	
	--Gerar lancamentos programados para o beneficiario

	CALL pls_mens_item_lanc_prog_benef(	r_c01_w.nr_seq_mensalidade,
					r_c01_w.nr_seq_mensalidade_seg,
					r_c01_w.dt_mesano_referencia,
					r_c01_w.nr_seq_segurado,
					r_c01_w.nr_seq_pagador,
					pls_lote_mensalidade_w.nr_seq_solic_resc_fin,
					trunc(pls_lote_mensalidade_w.dt_mesano_referencia,'month'),
					r_c01_w.ie_desconsiderar_vl_limite,
					nm_usuario_p);
	
	<<UTILIZACAO>>
	
	--Gerar os itens de mensalidade referente a contas medicas

	if (pls_lote_mensalidade_w.ie_utilizacao <> 'SU') then
		CALL pls_mens_itens_conta_pck.gerar_itens_contas(	r_c01_w.nr_seq_mensalidade_seg,
								r_c01_w.nr_seq_mensalidade,
								r_c01_w.dt_referencia,
								r_c01_w.nr_seq_segurado,
								r_c01_w.nr_seq_titular,
								r_c01_w.ie_tipo_segurado,
								r_c01_w.ie_tipo_repasse,
								r_c01_w.dt_rescisao,
								r_c01_w.nr_seq_pagador,
								r_c01_w.dt_mesano_referencia,
								r_c01_w.ie_tipo_estipulante,
								r_c01_w.nr_seq_contrato,
								r_c01_w.nr_seq_intercambio,
								r_c01_w.nr_seq_motivo_susp,
								ie_existe_mensalidade_w,
								pls_lote_mensalidade_w.ie_mensalidade_mes_anterior,
								ie_inseriu_preco_pre_w,
								pls_lote_mensalidade_w.dt_mesano_referencia,
								r_c01_w.ie_desconsiderar_vl_limite,
								cd_estabelecimento_p,
								nm_usuario_p);
	end if;
	
	--Gerar a cobranca de acrescimo

	if (pls_mens_itens_pck.obter_se_item_grupo('22',null) = 'S') and (ie_benef_ativo_w = 'S' or current_setting('pls_mens_itens_pck.ie_gerou_item_benef_w')::varchar(1) = 'S') then
		if (pls_mens_itens_pck.obter_se_pagador_item(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_pagador, '22', null, r_c01_w.ie_pce_proporcional, null) = 'S') and (pls_mens_itens_pck.obter_se_item_gerado(r_c01_w.nr_seq_segurado, '22', null, null, null) = 'N') then
			CALL pls_mens_item_acrescimo(r_c01_w.nr_seq_mensalidade_seg, r_c01_w.dt_mesano_referencia, r_c01_w.nr_seq_mensalidade, r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_titular,
						r_c01_w.nr_seq_parentesco, r_c01_w.ie_tipo_parentesco, r_c01_w.nr_seq_pagador, r_c01_w.nr_seq_contrato, ie_mensalidade_mes_rescisao_w, nm_usuario_p);
		end if;
	end if;
	
	if (current_setting('pls_mens_itens_pck.nr_indice_w')::integer >= pls_util_pck.qt_registro_transacao_w) then
		CALL pls_mens_itens_pck.atualizar_pls_mens_seg_item(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	end if;
	end;
end loop;

CALL pls_mens_itens_pck.atualizar_pls_mens_seg_item(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
CALL pls_mens_itens_pck.inserir_mensalidade_sca(cd_estabelecimento_p, nm_usuario_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mens_itens_pck.gerar_itens_mensalidade ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
