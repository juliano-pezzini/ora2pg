-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

/*
        This package is responsible for retrieving data related to the simulation. The function GET_SIMULATION_DATA is meant to
        be used within the other functions only

        nr_hour_p: defines how many hours from now the prediction value will return
          (for example, if it is 12, the prediction will be based on 12 hours from now)

        cd_type_p:
        - CAP: Predicted capacity
        - CEN: Predicted census
        - AVB: Predicted available beds
        - BED: Predicted beds needed/Predicted arrivals
        - DIS: Predicted discharges

        cd_unit_p: unit code (example: 40029)
        cd_unit_classification_p: unit classification (1, 2, 3, 4, etc.). It is based on table "valor_dominio" (cd_dominio = 1)
        ie_std_deviation_p: Flag (Y, N) that defines if the function should return the standard deviation alongside the value
        vl_aux_p: auxiliary value that should be used, when necessary, to calculate the simulation value based on another value

        GET_SIMULATION_VALUE_UNIT -> Data per unit code (only will return data for that specific unit)
        GET_SIMULATION_VALUE -> Data per unit classification or the whole establishment if the classification is not defined
    */
    


CREATE OR REPLACE FUNCTION pfcs_pck_sim.get_simulation_data_by_module ( cd_establishment_p bigint, nr_hour_p bigint, cd_type_p text, nr_seq_dynamic_module_p bigint, ie_std_deviation_p text, vl_aux_p bigint default null) RETURNS varchar AS $body$
DECLARE

        vl_simulation_w         integer;
        vl_std_deviation_w      integer;
        nr_hour_w               integer;
        dt_simulation_w         timestamp;
        unit_classif_array_w    strarray;
        ds_aux_char_w           varchar(5);

BEGIN
        nr_hour_w := to_number(to_char((clock_timestamp() + (coalesce(nr_hour_p,0)/24)), PFCS_PCK_CONSTANTS.CD_MASK_HH24));
        dt_simulation_w := trunc(clock_timestamp() + (coalesce(nr_hour_p,0)/24));
        unit_classif_array_w := pfcs_pck_dynamic_cards.get_module_unit_types_array(nr_seq_dynamic_module_p);

        PERFORM set_config('pfcs_pck_sim.ds_sim_value_w', null, false);
        vl_simulation_w := 0;
        vl_std_deviation_w := 0;

        if ( unit_classif_array_w.count = 0 or (unit_classif_array_w.count = 1 and (
                PFCS_PCK_CONSTANTS.CD_UNIT_TYPE_TELE member of(unit_classif_array_w) or
                PFCS_PCK_CONSTANTS.CD_HAH member of(unit_classif_array_w))) ) then
            return obter_desc_expressao(PFCS_PCK_CONSTANTS.CD_EXPR_NA);
        end if;

        if (cd_type_p IS NOT NULL AND cd_type_p::text <> '')  then
            select
                case    when cd_type_p in (current_setting('pfcs_pck_sim.cd_type_census_w')::varchar(3), current_setting('pfcs_pck_sim.cd_type_available_beds_w')::varchar(3), current_setting('pfcs_pck_sim.cd_type_capacity_w')::varchar(3))  then sum(sim.nr_mean_pred_capacity)
                        when cd_type_p = current_setting('pfcs_pck_sim.cd_type_beds_needed_w')::varchar(3)                                              then sum(sim.nr_mean_pred_arrival)
                        when cd_type_p = current_setting('pfcs_pck_sim.cd_type_discharges_w')::varchar(3)                                               then sum(sim.nr_mean_pred_discharges)
                        else null
                end,
                case    when cd_type_p in (current_setting('pfcs_pck_sim.cd_type_census_w')::varchar(3), current_setting('pfcs_pck_sim.cd_type_available_beds_w')::varchar(3), current_setting('pfcs_pck_sim.cd_type_capacity_w')::varchar(3))  then avg(sim.nr_sd_pred_capacity)
                        when cd_type_p = current_setting('pfcs_pck_sim.cd_type_beds_needed_w')::varchar(3)                                              then avg(sim.nr_sd_pred_arrival)
                        when cd_type_p = current_setting('pfcs_pck_sim.cd_type_discharges_w')::varchar(3)                                               then avg(sim.nr_sd_pred_discharges)
                        else null
                end
            into STRICT vl_simulation_w, vl_std_deviation_w
            from pfcs_patient_simulation sim,
                setor_atendimento sec
            where sim.dt_simulation = dt_simulation_w
                and sim.hr_time_simulation = nr_hour_w
                and (sim.cd_classif_setor member of(unit_classif_array_w))
                and sim.cd_estabelecimento = cd_establishment_p
                and sec.cd_setor_atendimento = isnumber(sim.cd_unit);

            if (cd_type_p = current_setting('pfcs_pck_sim.cd_type_capacity_w')::varchar(3) and (vl_aux_p IS NOT NULL AND vl_aux_p::text <> '')) then
                vl_simulation_w := pfcs_get_percentage_value(vl_simulation_w, vl_aux_p);
                ds_aux_char_w := PFCS_PCK_CONSTANTS.DS_PERCENT_SIGN;
            elsif (cd_type_p = current_setting('pfcs_pck_sim.cd_type_available_beds_w')::varchar(3) and (vl_aux_p IS NOT NULL AND vl_aux_p::text <> '')) then
                vl_simulation_w :=  vl_aux_p - vl_simulation_w;
            end if;
            vl_simulation_w := coalesce(vl_simulation_w,0);
            vl_std_deviation_w := coalesce(vl_std_deviation_w,0);
        end if;

        PERFORM set_config('pfcs_pck_sim.ds_sim_value_w', (to_char(vl_simulation_w) || ds_aux_char_w), false);
        if (ie_std_deviation_p = PFCS_PCK_CONSTANTS.IE_YES) then
            PERFORM set_config('pfcs_pck_sim.ds_sim_value_w', (current_setting('pfcs_pck_sim.ds_sim_value_w')::varchar(80) || PFCS_PCK_CONSTANTS.DS_SEMICOLON || vl_std_deviation_w), false);
        end if;
        return current_setting('pfcs_pck_sim.ds_sim_value_w')::varchar(80);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pfcs_pck_sim.get_simulation_data_by_module ( cd_establishment_p bigint, nr_hour_p bigint, cd_type_p text, nr_seq_dynamic_module_p bigint, ie_std_deviation_p text, vl_aux_p bigint default null) FROM PUBLIC;
