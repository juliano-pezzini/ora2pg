-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE integracao_dispensario_pck.cubixx_gerar_solic_compra ( dt_geracao_p timestamp, nm_usuario_p text) AS $body$
DECLARE

	
	current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type	estabelecimento.cd_estabelecimento%type;
	cd_local_estoque_w		local_estoque.cd_local_estoque%type;
	current_setting('integracao_dispensario_pck.cd_setor_atendimento_w')::setor_atendimento.cd_setor_atendimento%type	setor_atendimento.cd_setor_atendimento%type;
	cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
	nr_solic_compra_w		solic_compra.nr_solic_compra%type := 0;
	qt_dias_entrega_padrao_w	parametro_compras.qt_dias_entrega_padrao%type;
	ie_regra_local_estoque_w	varchar(1);
	dt_entrega_solic_w		timestamp;
	nr_seq_atendimento_w	paciente_atendimento.nr_seq_atendimento%type;
	current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type			material.cd_material%type;
	qt_material_w			double precision;
	ie_gerar_ordem_w		varchar(1) := 'N';
	qt_estoque_minimo_w		double precision;
	qt_estoque_maximo_w		double precision;
	qt_comprar_w			solic_compra_item.qt_material%type;
	ds_observacao_w			solic_compra_item.ds_observacao%type;

	C01 CURSOR FOR
		SELECT	max(cd_material),
			sum(obter_quantidade_convertida(cd_material, calcula_dose_total_quimio(qt_dose_prescricao,qt_dias_util,cd_intervalo), cd_unid_med_dose, 'UME'))
		from	paciente_atend_medic b
		where	b.nr_seq_atendimento in (
			SELECT	nr_seq_atendimento
			from	paciente_atendimento
			where	obter_autorizacao_quimio(nr_seq_atendimento, nr_ciclo, ds_dia_ciclo, 'NR') = '10'
			and	dt_prevista between inicio_dia(clock_timestamp() + interval '3 days') and fim_dia(clock_timestamp() + interval '9 days'))
		and	obter_se_mat_existe_padrao_loc(cd_material,	cd_local_estoque_w) = 'S'
		group by cd_material;
	
	C02 CURSOR FOR
		SELECT	b.nr_seq_atendimento
		from	paciente_atendimento b
		where	obter_autorizacao_quimio(nr_seq_atendimento, nr_ciclo, ds_dia_ciclo, 'NR') = '10'
		and	dt_prevista between inicio_dia(clock_timestamp() + interval '3 days') and fim_dia(clock_timestamp() + interval '9 days')
		and	exists (
			SELECT	1
			from	paciente_atend_medic a
			where	a.nr_seq_atendimento = b.nr_seq_atendimento
			and	a.cd_material = current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type
			and	obter_se_mat_existe_padrao_loc(cd_material,	cd_local_estoque_w) = 'S');
	
BEGIN
	
	PERFORM set_config('integracao_dispensario_pck.cd_estabelecimento_w', coalesce(wheb_usuario_pck.get_cd_estabelecimento,0), false);
	
	if (current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type = 0) then
		select	min(cd_estabelecimento)
		into STRICT	current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type
		from	parametro_compras;
	end if;
	
	select	max(cd_local_estoque)
	into STRICT	cd_local_estoque_w
	from	parametros_farmacia
	where	cd_estabelecimento = current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type;
	
	open C01;
	loop
	fetch C01 into	
		current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type,
		qt_material_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		qt_estoque_minimo_w := obter_dados_padrao_est_local(current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type, cd_local_estoque_w, current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type, 'M');
		qt_estoque_maximo_w := obter_dados_padrao_est_local(current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type, cd_local_estoque_w, current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type, 'A');
				
		if (qt_material_w > qt_estoque_minimo_w) then
			ie_gerar_ordem_w := 'S';
		end if;
		
		
		if (ie_gerar_ordem_w = 'S') and (nr_solic_compra_w = 0) then
			
			select	max(cd_pessoa_solic_padrao),
				max(substr(obter_setor_usuario_pf(cd_pessoa_solic_padrao),1,20))
			into STRICT	cd_pessoa_fisica_w,
				current_setting('integracao_dispensario_pck.cd_setor_atendimento_w')::setor_atendimento.cd_setor_atendimento%type
			from	parametro_compras
			where	cd_estabelecimento = current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type;

			select	coalesce(max(qt_dias_entrega_padrao),2)
			into STRICT	qt_dias_entrega_padrao_w
			from	parametro_compras
			where	cd_estabelecimento = current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type;

			dt_entrega_solic_w  := trunc(clock_timestamp(),'dd') + qt_dias_entrega_padrao_w;

			select	nextval('solic_compra_seq')
			into STRICT	nr_solic_compra_w
			;

			begin
			
			insert into solic_compra(
				nr_solic_compra,
				cd_estabelecimento,
				dt_solicitacao_compra,
				dt_atualizacao,
				nm_usuario,
				ie_situacao,
				cd_pessoa_solicitante,
				cd_local_estoque,
				cd_centro_custo,
				cd_conta_contabil,
				cd_setor_atendimento,
				ds_observacao,
				cd_motivo_baixa,
				dt_baixa,
				dt_liberacao,
				cd_pessoa_autoriza,
				dt_autorizacao,
				dt_impressao,
				ie_aviso_chegada,
				ie_aviso_aprov_oc,
				ie_urgente,
				ie_tipo_solicitacao,
				ie_comodato,
				ie_semanal,
				nm_usuario_nrec,
				dt_atualizacao_nrec)
			values (	nr_solic_compra_w,
				current_setting('integracao_dispensario_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%type,
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				'A',
				cd_pessoa_fisica_w,
				cd_local_estoque_w,
				null,
				null,
				current_setting('integracao_dispensario_pck.cd_setor_atendimento_w')::setor_atendimento.cd_setor_atendimento%type, 
				null, 
				null,
				null, 
				null,
				cd_pessoa_fisica_w,
				null,
				null,
				'S',
				'S',
				'N',
				1,
				'N',
				'N',
				nm_usuario_p,
				clock_timestamp());
			exception
				when others then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(266029);
					--'Erro ao gravar solicitacao'
			end;
			ie_gerar_ordem_w := 'N';
		end if;
		
		if (qt_material_w > qt_estoque_minimo_w) and (nr_solic_compra_w > 0) then
			
			qt_comprar_w := qt_material_w - qt_estoque_minimo_w;
			if (qt_comprar_w > qt_estoque_maximo_w) then
				qt_comprar_w := qt_estoque_maximo_w;
			end if;
			
			open C02;
			loop
			fetch C02 into	
				nr_seq_atendimento_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				ds_observacao_w := substr(ds_observacao_w || nr_seq_atendimento_w ||', ',1,255);
				end;
			end loop;
			close C02;
			
			ds_observacao_w := substr(wheb_mensagem_pck.get_texto(1059812, 'ds_atendimento='||ds_observacao_w),1,255);
			
			CALL gerar_solic_compra_item(nr_solic_compra_w, current_setting('integracao_dispensario_pck.cd_material_w')::material.cd_material%type, 'E', qt_comprar_w, clock_timestamp() + interval '3 days', nm_usuario_p, 'N', null, ds_observacao_w);
			
		end if;
		end;
	end loop;
	close C01;
	
	end;
	

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE integracao_dispensario_pck.cubixx_gerar_solic_compra ( dt_geracao_p timestamp, nm_usuario_p text) FROM PUBLIC;
