-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pck_flowsheet.ger_dados_audit_vital_signs (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint) AS $body$
DECLARE


    c1 CURSOR FOR
      SELECT distinct nr_atendimento
        from w_rel_val_flowsheet t
       where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
         and t.nr_relatorio = cd_relatorio_p;
    r1 c1%rowtype;

    c_escala_indice CURSOR FOR
      SELECT a.qt_glasgow,
             a.ie_resposta_motora,
             a.ie_resposta_verbal,
             a.ie_abertura_ocular,
             a.dt_inativacao,
             a.dt_avaliacao,
             a.ds_justificativa,
             a.nm_usuario_inativacao
        from atend_escala_indice a
       where a.nr_atendimento = r1.nr_atendimento
         and a.ie_situacao = 'I'
         and (a.dt_inativacao IS NOT NULL AND a.dt_inativacao::text <> '')
         and a.dt_avaliacao between dt_inicial_p and dt_final_p;
    r_escala_indice c_escala_indice%rowtype;

    c_escala_dor CURSOR FOR
      SELECT a.qt_escala_dor,
             a.qt_saturacao_o2,
             obter_valor_dominio_idioma(1298,a.cd_escala_dor, 8) ds_escala_dor,
             a.qt_temp,
             a.qt_freq_cardiaca,
             obter_valor_dominio_idioma(1306, a.ie_aparelho_pa, 8) ie_aparelho_pa,
             case
               when a.ie_aparelho_pa in ('C', 'E') and ((a.qt_pa_sistolica IS NOT NULL AND a.qt_pa_sistolica::text <> '') or (a.qt_pa_diastolica IS NOT NULL AND a.qt_pa_diastolica::text <> '')) 
               then coalesce(a.qt_pa_sistolica, 0) + coalesce(a.qt_pa_diastolica, 0)
               else null
             end qt_noinvasive_mean,
             case 
               when a.ie_aparelho_pa = 'I' and ((a.qt_pa_sistolica IS NOT NULL AND a.qt_pa_sistolica::text <> '') or (a.qt_pa_diastolica IS NOT NULL AND a.qt_pa_diastolica::text <> '')) 
               then coalesce(a.qt_pa_sistolica, 0) + coalesce(a.qt_pa_diastolica, 0)
               else null
             end qt_invasive_mean,
             a.dt_inativacao,
             a.dt_sinal_vital,
             a.ds_justificativa,
             a.nm_usuario_inativacao
        from atendimento_sinal_vital a
       where a.nr_atendimento = r1.nr_atendimento
         and a.ie_situacao = 'I'
         and (a.dt_inativacao IS NOT NULL AND a.dt_inativacao::text <> '')
         and a.dt_sinal_vital between dt_inicial_p and dt_final_p;
    r_escala_dor c_escala_dor%rowtype;

    c_escala_risco_delirium CURSOR FOR
      SELECT regexp_replace(obter_result_delirium(a.nr_sequencia), '[a-z]|\(|\)|\ ', '') ds_risco_delirium,
             a.dt_inativacao,
             a.dt_avaliacao,
             a.ds_justificativa,
             a.nm_usuario_inativacao
        from escala_risco_delirium a
       where a.nr_atendimento = r1.nr_atendimento
         and a.ie_situacao = 'I'
         and (a.dt_inativacao IS NOT NULL AND a.dt_inativacao::text <> '')
         and a.dt_avaliacao between dt_inicial_p and dt_final_p;
    r_escala_risco_delirium c_escala_risco_delirium%rowtype;

    c_monit_resp CURSOR FOR
      SELECT a.qt_freq_resp,
             a.qt_saturacao_o2,
             a.nr_seq_equipamento,
             a.qt_fluxo_oxigenio,
             a.dt_monitorizacao,
             a.dt_inativacao,
             a.nm_usuario_inativacao,
             a.ds_justificativa
        from atendimento_monit_resp a
       where a.nr_atendimento = r1.nr_atendimento
         and a.ie_situacao = 'I'
         and (a.dt_inativacao IS NOT NULL AND a.dt_inativacao::text <> '')
         and a.dt_monitorizacao between dt_inicial_p and dt_final_p;
    r_monit_resp c_monit_resp%rowtype;

    c_monit_hemod CURSOR FOR
      SELECT a.qt_pvc,
             a.qt_debito_card,
             a.tx_indice_card,
             a.qt_rv_sistemica,
             a.tx_rv_sistemica,
             a.qt_rv_pulmonar,
             a.tx_rv_pulmonar,
             a.dt_monitoracao,
             a.dt_inativacao,
             a.ie_situacao,
             a.nm_usuario_inativacao,
             a.ds_justificativa
        from atend_monit_hemod a
       where a.nr_atendimento = r1.nr_atendimento
         and a.ie_situacao = 'I'
         and (a.dt_inativacao IS NOT NULL AND a.dt_inativacao::text <> '')
         and a.dt_monitoracao between dt_inicial_p and dt_final_p;
    r_monit_hemod c_monit_hemod%rowtype;

    c_prescr_proc CURSOR(ie_tipo_rel_p cp_intervention.ie_interv_sae_rel%type) FOR
      SELECT e.ds_resultado,
             b.dt_suspensao dt_inativacao,
             c.dt_atualizacao,
             b.nm_usuario_susp nm_usuario_inativacao,
             b.ds_justificativa
        from pe_prescricao a,
             pe_prescr_proc b,
             pe_item_result_proc c,
             cp_intervention d,
             pe_item_resultado e
       where a.nr_atendimento = r1.nr_atendimento
         and b.nr_seq_prescr = a.nr_sequencia
         and b.nr_seq_result = c.nr_seq_result
         and c.nr_seq_proc = d.nr_seq_pe_procedimento
         and e.nr_sequencia = c.nr_seq_result
         and d.ie_interv_sae_rel = ie_tipo_rel_p
         and (b.dt_suspensao IS NOT NULL AND b.dt_suspensao::text <> '')
         and c.dt_atualizacao between dt_inicial_p and dt_final_p;
    r_prescr_proc c_prescr_proc%rowtype;

    c_prescr_material CURSOR(ie_tipo_rel_p classe_material.ie_classe_material_rel%type) FOR
      SELECT b1.qt_dose ds_valor,
             b1.dt_liberacao,
             (CASE WHEN (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> '') THEN b1.ds_motivo_susp ELSE a1.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> '') THEN b1.nm_usuario_susp ELSE a1.nm_usuario_susp END) nm_usuario_inativacao,
             coalesce(b1.dt_suspensao, a1.dt_suspensao) dt_inativacao
        from prescr_medica a1,
             prescr_material b1,
             material c1,
             classe_material d1
       where a1.nr_prescricao = b1.nr_prescricao
         and b1.cd_material = c1.cd_material
         and c1.cd_classe_material = d1.cd_classe_material
         and (c1.cd_medicamento IS NOT NULL AND c1.cd_medicamento::text <> '')
         and d1.ie_classe_material_rel = ie_tipo_rel_p
         and ((a1.dt_suspensao IS NOT NULL AND a1.dt_suspensao::text <> '') or (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> ''))
         and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
         and b1.dt_liberacao between dt_inicial_p and dt_final_p
         and a1.nr_atendimento = r1.nr_atendimento;
    r_prescr_material c_prescr_material%rowtype;

    c_prescr_material_comment CURSOR(ie_tipo_rel_p classe_material.ie_classe_material_rel%type) FOR
      SELECT substr(b1.ds_observacao, 1, 255) ds_observacao,
             b1.dt_liberacao,
             b1.nm_usuario
        from prescr_medica a1,
             prescr_material b1,
             material c1,
             classe_material d1
       where a1.nr_prescricao = b1.nr_prescricao
         and b1.cd_material = c1.cd_material
         and c1.cd_classe_material = d1.cd_classe_material
         and (c1.cd_medicamento IS NOT NULL AND c1.cd_medicamento::text <> '')
         and d1.ie_classe_material_rel = ie_tipo_rel_p
         and c1.ie_situacao = 'A'
         and d1.ie_situacao = 'A'
         and coalesce(a1.dt_suspensao::text, '') = ''
         and coalesce(b1.dt_suspensao::text, '') = ''
         and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
         and coalesce(b1.cd_unidade_medida_dose, b1.cd_unidade_medida) = 'ml'
         and a1.nr_atendimento = r1.nr_atendimento
         and b1.dt_liberacao between dt_inicial_p and dt_final_p
         and (trim(both b1.ds_observacao) IS NOT NULL AND (trim(both b1.ds_observacao))::text <> '');
    r_prescr_material_c1 c_prescr_material_comment%rowtype;

    w_audit_flowsheet_w w_rel_audit_flowsheet%rowtype;


BEGIN

    w_audit_flowsheet_w.cd_pessoa_fisica := cd_pessoa_fisica_p;
    w_audit_flowsheet_w.nr_relatorio := cd_relatorio_p;
    w_audit_flowsheet_w.nr_ordem := 1;

    open c1;
    loop
      fetch c1 into r1;
      EXIT WHEN NOT FOUND; /* apply on c1 */

        w_audit_flowsheet_w.nr_atendimento := r1.nr_atendimento;

        open c_escala_indice;
        loop
          fetch c_escala_indice into r_escala_indice;
          EXIT WHEN NOT FOUND; /* apply on c_escala_indice */

            w_audit_flowsheet_w.dt_evento := to_char(r_escala_indice.dt_avaliacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_escala_indice.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_escala_indice.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_escala_indice.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('GCS Total', r_escala_indice.qt_glasgow, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Motor', r_escala_indice.ie_resposta_motora, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Verbal', r_escala_indice.ie_resposta_verbal, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Eyes', r_escala_indice.ie_abertura_ocular, w_audit_flowsheet_w);

        end loop;
        close c_escala_indice;

        open c_escala_dor;
        loop
          fetch c_escala_dor into r_escala_dor;
          EXIT WHEN NOT FOUND; /* apply on c_escala_dor */

            w_audit_flowsheet_w.dt_evento := to_char(r_escala_dor.dt_sinal_vital, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_escala_dor.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_escala_dor.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_escala_dor.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Pain Score', r_escala_dor.qt_escala_dor, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Pain Goal', r_escala_dor.ds_escala_dor, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Temperature (C)', r_escala_dor.qt_temp, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Heart Rate (bpm)', r_escala_dor.qt_freq_cardiaca, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('No-Invasive BP Sys/Dias', pck_flowsheet.abreviar(r_escala_dor.ie_aparelho_pa), w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('No-Invasive BP Mean', r_escala_dor.qt_noinvasive_mean, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Invasive BP Sys/Dias', pck_flowsheet.abreviar(r_escala_dor.ie_aparelho_pa), w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('Invasive BP Mean', r_escala_dor.qt_invasive_mean, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('PA Systolic/Diastolic', r_escala_dor.qt_invasive_mean, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('PA Mean', r_escala_dor.ie_aparelho_pa, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('SVO2%', r_escala_dor.qt_saturacao_o2, w_audit_flowsheet_w);

        end loop;
        close c_escala_dor;

        open c_escala_risco_delirium;
        loop
          fetch c_escala_risco_delirium into r_escala_risco_delirium;
          EXIT WHEN NOT FOUND; /* apply on c_escala_risco_delirium */

            w_audit_flowsheet_w.dt_evento := to_char(r_escala_risco_delirium.dt_avaliacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_escala_risco_delirium.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_escala_risco_delirium.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_escala_risco_delirium.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Delirium Score', r_escala_risco_delirium.ds_risco_delirium, w_audit_flowsheet_w);

        end loop;
        close c_escala_risco_delirium;

        open c_monit_resp;
        loop
          fetch c_monit_resp into r_monit_resp;
          EXIT WHEN NOT FOUND; /* apply on c_monit_resp */

            w_audit_flowsheet_w.dt_evento := to_char(r_monit_resp.dt_monitorizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_monit_resp.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_monit_resp.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_monit_resp.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Respiratory Rate (bpm)', r_monit_resp.qt_freq_resp, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('O2 Saturation (%)', r_monit_resp.qt_saturacao_o2, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('O2 Admin Device', r_monit_resp.nr_seq_equipamento, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('O2 L%', r_monit_resp.qt_fluxo_oxigenio, w_audit_flowsheet_w);

        end loop;
        close c_monit_resp;

        open c_monit_hemod;
        loop
          fetch c_monit_hemod into r_monit_hemod;
          EXIT WHEN NOT FOUND; /* apply on c_monit_hemod */

            w_audit_flowsheet_w.dt_evento := to_char(r_monit_hemod.dt_monitoracao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_monit_hemod.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_monit_hemod.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_monit_hemod.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('CVP (mmHg)', r_monit_hemod.qt_pvc, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('CO (L/min)', r_monit_hemod.qt_debito_card, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('CI (L/min/m2)', r_monit_hemod.tx_indice_card, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('SVR (dynes X sec X cm5)', r_monit_hemod.qt_rv_sistemica, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('SVRI (dyne sec/cm2/m2)', r_monit_hemod.tx_rv_sistemica, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('PVR (dynes X sec X cm5)', r_monit_hemod.qt_rv_pulmonar, w_audit_flowsheet_w);
            CALL pck_flowsheet.verify_and_insert_audit('PVRI (dyne X sec X cm5)', r_monit_hemod.tx_rv_pulmonar, w_audit_flowsheet_w);

        end loop;
        close c_monit_hemod;

        open c_prescr_proc(11);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Capillary Refil/Left Hand', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_proc(12);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Site Check', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_proc(13);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Pulses', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_proc(14);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Dorsiflex/Flush', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_proc(15);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Left Brachial Pulse', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_proc(16);
        loop
          fetch c_prescr_proc into r_prescr_proc;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_proc */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_proc.dt_atualizacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_proc.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_proc.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_proc.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Distal Pulse', r_prescr_proc.ds_resultado, w_audit_flowsheet_w);

        end loop;
        close c_prescr_proc;

        open c_prescr_material(41);
        loop
          fetch c_prescr_material into r_prescr_material;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Abciximab', r_prescr_material.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_prescr_material(42);
        loop
          fetch c_prescr_material into r_prescr_material;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Amiodarone', r_prescr_material.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        w_audit_flowsheet_w.nr_ordem := 2;
        w_audit_flowsheet_w.dt_inativacao := null;
        w_audit_flowsheet_w.ds_motivo := null;

        open c_prescr_material_comment(41);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c1;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Abciximab', r_prescr_material_c1.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_prescr_material_comment(42);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c1;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Amiodarone', r_prescr_material_c1.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        commit;

    end loop;
    close c1;

    commit;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pck_flowsheet.ger_dados_audit_vital_signs (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint) FROM PUBLIC;
