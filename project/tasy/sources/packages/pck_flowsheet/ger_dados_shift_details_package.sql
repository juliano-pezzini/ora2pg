-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pck_flowsheet.ger_dados_shift_details (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint ) AS $body$
DECLARE


    c1 CURSOR FOR
      SELECT distinct ds_data, nr_atendimento
        from (SELECT pck_flowsheet.get_formata_data(b1.dt_liberacao) ds_data,
                     e1.nr_atendimento
                from prescr_medica a1,
                     prescr_material b1,
                     material c1,
                     classe_material d1,
                     atendimento_paciente e1
               where a1.nr_prescricao = b1.nr_prescricao
                 and b1.cd_material = c1.cd_material
                 and c1.cd_classe_material = d1.cd_classe_material
                 and a1.nr_atendimento = e1.nr_atendimento
                 and c1.ie_situacao = 'A'
                 and d1.ie_situacao = 'A'
                 and (c1.ie_tipo_material in (0, 2, 3, 6, 8, 9) or d1.ie_classe_material_rel in (37, 38, 39, 40))
                 and coalesce(a1.dt_suspensao::text, '') = ''
                 and coalesce(b1.dt_suspensao::text, '') = ''
                 and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
                 and coalesce(b1.cd_unidade_medida_dose, b1.cd_unidade_medida) = 'ml'
                 and e1.cd_pessoa_fisica = cd_pessoa_fisica_p
                 and b1.dt_liberacao between dt_inicial_p and dt_final_p

union

              select pck_flowsheet.get_formata_data(c2.dt_alteracao) ds_data,
                     d2.nr_atendimento
                from prescr_medica a2,
                     prescr_solucao b2,
                     prescr_solucao_evento c2,
                     atendimento_paciente d2
               where c2.ie_evento_valido = 'S'
                 and a2.nr_prescricao  = b2.nr_prescricao
                 and b2.nr_prescricao = c2.nr_prescricao
                 and b2.nr_seq_solucao = c2.nr_seq_solucao
                 and (c2.nr_seq_solucao IS NOT NULL AND c2.nr_seq_solucao::text <> '')
                 and coalesce(a2.dt_suspensao::text, '') = ''
                 and coalesce(b2.dt_suspensao::text, '') = ''
                 and (c2.qt_vol_infundido IS NOT NULL AND c2.qt_vol_infundido::text <> '')
                 and a2.nr_atendimento = d2.nr_atendimento
                 and d2.cd_pessoa_fisica = cd_pessoa_fisica_p
                 and c2.dt_alteracao between dt_inicial_p and dt_final_p
              
union

              select pck_flowsheet.get_formata_data(c3.dt_resultado) ds_data,
                     e3.nr_atendimento
                from prescr_medica a3,
                     prescr_solic_bco_sangue b3,
                     prescr_procedimento c3,
                     san_derivado d3,
                     atendimento_paciente e3
               where a3.nr_prescricao = b3.nr_prescricao
                 and b3.nr_prescricao = c3.nr_prescricao
                 and b3.nr_sequencia = c3.nr_seq_solic_sangue
                 and c3.nr_seq_derivado = d3.nr_sequencia
                 and d3.ie_tipo_derivado in ('CH','PC','CP')
                 and coalesce(d3.ie_situacao, 'A') = 'A'
                 and coalesce(a3.dt_suspensao::text, '') = ''
                 and coalesce(c3.dt_suspensao::text, '') = ''
                 and (c3.qt_vol_hemocomp IS NOT NULL AND c3.qt_vol_hemocomp::text <> '')
                 and a3.nr_atendimento = e3.nr_atendimento
                 and c3.dt_resultado between dt_inicial_p and dt_final_p
                 and e3.cd_pessoa_fisica = cd_pessoa_fisica_p
              
union

              select pck_flowsheet.get_formata_data(a4.dt_liberacao) ds_data,
                     d4.nr_atendimento
                from atendimento_perda_ganho a4,
                     tipo_perda_ganho b4,
                     grupo_perda_ganho c4,
                     atendimento_paciente d4
               where a4.nr_seq_tipo = b4.nr_sequencia
                 and b4.nr_seq_grupo = c4.nr_sequencia
                 and b4.ie_tipo_rel in (1, 2, 3, 4, 6)
                 and ((b4.ie_tipo_rel <> 6 and c4.ie_perda_ganho = 'P') or (b4.ie_tipo_rel = 6 and c4.ie_perda_ganho = 'G'))
                 and coalesce(b4.ie_soma_bh, 'S') = 'S'
                 and coalesce(a4.ie_situacao, 'A') = 'A'
                 and (a4.qt_volume IS NOT NULL AND a4.qt_volume::text <> '')
                 and a4.nr_atendimento = d4.nr_atendimento
                 and a4.dt_liberacao between dt_inicial_p and dt_final_p
                 and d4.cd_pessoa_fisica = cd_pessoa_fisica_p
              
union

              select pck_flowsheet.get_formata_data(c5.dt_evento) ds_data,
                     d5.nr_atendimento
                from prescr_medica a5,
                     prescr_solucao b5,
                     hd_prescricao_evento c5,
                     atendimento_paciente d5
               where a5.nr_prescricao = b5.nr_prescricao
                 and b5.nr_prescricao = c5.nr_prescricao
                 and b5.nr_seq_solucao = c5.nr_seq_solucao
                 and coalesce(a5.dt_suspensao::text, '') = ''
                 and coalesce(b5.dt_suspensao::text, '') = ''
                 and ((c5.qt_volume IS NOT NULL AND c5.qt_volume::text <> '') or (c5.qt_vol_drenagem IS NOT NULL AND c5.qt_vol_drenagem::text <> ''))
                 and a5.nr_atendimento = d5.nr_atendimento
                 and d5.cd_pessoa_fisica = cd_pessoa_fisica_p
                 and c5.dt_evento between dt_inicial_p and dt_final_p
              
union

              select pck_flowsheet.get_formata_data(a6.dt_sinal_vital) ds_data,
                     b6.nr_atendimento
                from atendimento_sinal_vital a6,
                     atendimento_paciente b6
               where coalesce(a6.ie_situacao, 'A') = 'A'
                 and (a6.qt_peso IS NOT NULL AND a6.qt_peso::text <> '')
                 and a6.nr_atendimento = b6.nr_atendimento
                 and b6.cd_pessoa_fisica = cd_pessoa_fisica_p
                 and a6.dt_sinal_vital between dt_inicial_p and dt_final_p) alias36
       order by nr_atendimento, ds_data;
    r1 c1%rowtype;

    c_prescr_material CURSOR(ie_tipo_rel_p classe_material.ie_classe_material_rel%type) FOR
      SELECT sum(b1.qt_dose) ds_valor
        from prescr_medica a1,
             prescr_material b1,
             material c1,
             classe_material d1
       where a1.nr_prescricao = b1.nr_prescricao
         and b1.cd_material = c1.cd_material
         and c1.cd_classe_material = d1.cd_classe_material
         and ((ie_tipo_rel_p = 0 and c1.ie_tipo_material in (0, 2, 3, 6, 8, 9) and d1.ie_classe_material_rel not in (37, 38, 39, 40)) or (ie_tipo_rel_p <> 0 and d1.ie_classe_material_rel = ie_tipo_rel_p))
         and c1.ie_situacao = 'A'
         and d1.ie_situacao = 'A'
         and coalesce(a1.dt_suspensao::text, '') = ''
         and coalesce(b1.dt_suspensao::text, '') = ''
         and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
         and coalesce(b1.cd_unidade_medida_dose, b1.cd_unidade_medida) = 'ml'
         and b1.dt_liberacao between dt_inicial_p and dt_final_p
         and a1.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(b1.dt_liberacao) = r1.ds_data;
    r_prescr_material_1 c_prescr_material%rowtype;
    r_prescr_material_2 c_prescr_material%rowtype;
    r_prescr_material_3 c_prescr_material%rowtype;
    r_prescr_material_4 c_prescr_material%rowtype;
    r_prescr_material_5 c_prescr_material%rowtype;

    c_infusao_cont CURSOR FOR
      SELECT sum(c2.qt_vol_infundido) ds_valor
        from prescr_medica a2,
             prescr_solucao b2,
             prescr_solucao_evento c2
       where c2.ie_evento_valido = 'S'
         and a2.nr_prescricao  = b2.nr_prescricao
         and b2.nr_prescricao = c2.nr_prescricao
         and b2.nr_seq_solucao = c2.nr_seq_solucao
         and (c2.nr_seq_solucao IS NOT NULL AND c2.nr_seq_solucao::text <> '')
         and coalesce(a2.dt_suspensao::text, '') = ''
         and coalesce(b2.dt_suspensao::text, '') = ''
         and (c2.qt_vol_infundido IS NOT NULL AND c2.qt_vol_infundido::text <> '')
         and c2.dt_alteracao between dt_inicial_p and dt_final_p
         and a2.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(c2.dt_alteracao) = r1.ds_data;
    r_infusao_cont c_infusao_cont%rowtype;

    c_sangue_produtos CURSOR(ie_tipo_derivado_p san_derivado.ie_tipo_derivado%type)     FOR
      SELECT sum(c3.qt_vol_hemocomp) ds_valor
        from prescr_medica a3,
             prescr_solic_bco_sangue b3,
             prescr_procedimento c3,
             san_derivado d3
       where a3.nr_prescricao = b3.nr_prescricao
         and b3.nr_prescricao = c3.nr_prescricao
         and b3.nr_sequencia = c3.nr_seq_solic_sangue
         and c3.nr_seq_derivado = d3.nr_sequencia
         and d3.ie_tipo_derivado = ie_tipo_derivado_p
         and coalesce(d3.ie_situacao, 'A') = 'A'
         and coalesce(a3.dt_suspensao::text, '') = ''
         and coalesce(c3.dt_suspensao::text, '') = ''
         and (c3.qt_vol_hemocomp IS NOT NULL AND c3.qt_vol_hemocomp::text <> '')
         and c3.dt_resultado between dt_inicial_p and dt_final_p
         and a3.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(c3.dt_resultado) = r1.ds_data;
    r_sangue_produtos_1 c_sangue_produtos%rowtype;
    r_sangue_produtos_2 c_sangue_produtos%rowtype;
    r_sangue_produtos_3 c_sangue_produtos%rowtype;

    c_perda_ganho CURSOR(ie_tipo_rel_p tipo_perda_ganho.ie_tipo_rel%type) FOR
      SELECT sum(a4.qt_volume) ds_valor
        from atendimento_perda_ganho a4,
             tipo_perda_ganho b4,
             grupo_perda_ganho c4
       where a4.nr_seq_tipo = b4.nr_sequencia
         and b4.nr_seq_grupo = c4.nr_sequencia
         and b4.ie_tipo_rel = ie_tipo_rel_p
         and ((b4.ie_tipo_rel <> 6 and c4.ie_perda_ganho = 'P') or (b4.ie_tipo_rel = 6 and c4.ie_perda_ganho = 'G'))
         and coalesce(b4.ie_soma_bh, 'S') = 'S'
         and coalesce(a4.ie_situacao, 'A') = 'A'
         and (a4.qt_volume IS NOT NULL AND a4.qt_volume::text <> '')
         and a4.dt_liberacao between dt_inicial_p and dt_final_p
         and a4.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(a4.dt_liberacao) = r1.ds_data;
    r_perda_ganho_1 c_perda_ganho%rowtype;
    r_perda_ganho_2 c_perda_ganho%rowtype;
    r_perda_ganho_3 c_perda_ganho%rowtype;
    r_perda_ganho_4 c_perda_ganho%rowtype;
    r_perda_ganho_5 c_perda_ganho%rowtype;

    c_dialise_ent CURSOR FOR
      SELECT sum(c5.qt_volume) ds_valor
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and coalesce(a5.dt_suspensao::text, '') = ''
         and coalesce(b5.dt_suspensao::text, '') = ''
         and (c5.qt_volume IS NOT NULL AND c5.qt_volume::text <> '')
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and a5.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(c5.dt_evento) = r1.ds_data;
    r_dialise_ent c_dialise_ent%rowtype;

    c_dialise_sai CURSOR FOR
      SELECT sum(c5.qt_vol_drenagem) ds_valor
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and coalesce(a5.dt_suspensao::text, '') = ''
         and coalesce(b5.dt_suspensao::text, '') = ''
         and (c5.qt_vol_drenagem IS NOT NULL AND c5.qt_vol_drenagem::text <> '')
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and a5.nr_atendimento = r1.nr_atendimento
         and pck_flowsheet.get_formata_data(c5.dt_evento) = r1.ds_data
       order by c5.dt_evento desc;
    r_dialise_sai c_dialise_sai%rowtype;

    c_qt_peso CURSOR FOR
      SELECT qt_peso ds_valor,
             trim(both substr(a6.ds_observacao, 1, 255)) ds_observacao,
             a6.dt_sinal_vital,
             a6.nm_usuario
        from atendimento_sinal_vital a6
       where coalesce(a6.ie_situacao, 'A') = 'A'
         and (a6.qt_peso IS NOT NULL AND a6.qt_peso::text <> '')
         and a6.nr_atendimento = r1.nr_atendimento
         and a6.dt_sinal_vital between dt_inicial_p and dt_final_p
         and pck_flowsheet.get_formata_data(a6.dt_sinal_vital) = r1.ds_data 
       order by a6.dt_sinal_vital desc LIMIT 1;
    r_qt_peso c_qt_peso%rowtype;

    c2 CURSOR FOR
      SELECT t.nm_usuario,
             t.nr_relatorio,
             t.nr_pagina,
             t.nr_ordem,
             t.cd_pessoa_fisica,
             substr(t.ds_data_hora, 1, 5) ds_data,
             sum(coalesce((t.ds_valor)::numeric , 0)) ds_valor,
             t.nr_atendimento,
             'S' ds_tipo_soma
        from w_rel_val_flowsheet t
       where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
         and t.nr_relatorio = cd_relatorio_p
       group by t.nm_usuario,
                t.nr_relatorio,
                t.nr_pagina,
                t.nr_ordem,
                t.cd_pessoa_fisica,
                substr(t.ds_data_hora, 1, 5),
                t.nr_atendimento
       order by t.nr_atendimento,
                substr(t.ds_data_hora, 1, 5),
                t.nr_pagina,
                t.nr_ordem;
    r2 c2%rowtype;

    c3 CURSOR FOR
      SELECT t.nm_usuario,
             t.nr_relatorio,
             3 nr_pagina,
             t.nr_ordem,
             t.cd_pessoa_fisica,
             to_char(dt_final_p, 'mm/dd') || ' 00:00-23:59' ds_data,
             sum(coalesce((t.ds_valor)::numeric , 0)) ds_valor,
             t.nr_atendimento,
             'T' ds_tipo_soma
        from w_rel_val_flowsheet t
       where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
         and t.nr_relatorio = cd_relatorio_p
         and t.ds_tipo_soma = 'S'
       group by t.nm_usuario,
                t.nr_relatorio,
                t.nr_ordem,
                t.cd_pessoa_fisica,
                t.nr_atendimento
       order by t.nr_atendimento,
                t.nr_ordem;
    r3 c3%rowtype;

    w_val_flowsheet_w w_rel_val_flowsheet%rowtype;
    val_intake_w   bigint;
    val_output_w   bigint;
    val_dialysis_w bigint;
    dt_peso_w      w_rel_val_flowsheet.ds_data_hora%type;

    w_audit_flowsheet_w w_rel_audit_flowsheet%rowtype;


BEGIN

    w_val_flowsheet_w.nr_relatorio       := cd_relatorio_p;
    w_val_flowsheet_w.cd_pessoa_fisica   := cd_pessoa_fisica_p;
    w_val_flowsheet_w.ds_tipo_soma       := 'N';

    w_audit_flowsheet_w.nr_ordem := 2;
    w_audit_flowsheet_w.nr_relatorio := cd_relatorio_p;
    w_audit_flowsheet_w.cd_pessoa_fisica := cd_pessoa_fisica_p;

    -- Inserir horarios
    open c1;
    loop

      fetch c1 into r1;
      EXIT WHEN NOT FOUND; /* apply on c1 */

        w_val_flowsheet_w.nr_atendimento     := r1.nr_atendimento;
        w_val_flowsheet_w.ds_data_hora       := r1.ds_data;
        w_val_flowsheet_w.nr_pagina          := case when substr(r1.ds_data, -5, 2) between '00' and '11' then 1 else 2 end;

        val_intake_w := 0;
        val_output_w := 0;
        val_dialysis_w := 0;

        open c_prescr_material(37);
          fetch c_prescr_material into r_prescr_material_1;
        close c_prescr_material;

        open c_prescr_material(38);
          fetch c_prescr_material into r_prescr_material_2;
        close c_prescr_material;

        open c_prescr_material(39);
          fetch c_prescr_material into r_prescr_material_3;
        close c_prescr_material;

        open c_prescr_material(40);
          fetch c_prescr_material into r_prescr_material_4;
        close c_prescr_material;

        open c_prescr_material(0);
          fetch c_prescr_material into r_prescr_material_5;
        close c_prescr_material;

        open c_infusao_cont;
          fetch c_infusao_cont into r_infusao_cont;
        close c_infusao_cont;

        open c_sangue_produtos('CH');
          fetch c_sangue_produtos into r_sangue_produtos_1;
        close c_sangue_produtos;

        open c_sangue_produtos('PC');
          fetch c_sangue_produtos into r_sangue_produtos_2;
        close c_sangue_produtos;

        open c_sangue_produtos('CP');
          fetch c_sangue_produtos into r_sangue_produtos_3;
        close c_sangue_produtos;

        open c_perda_ganho(1);
          fetch c_perda_ganho into r_perda_ganho_1;
        close c_perda_ganho;

        open c_perda_ganho(2);
          fetch c_perda_ganho into r_perda_ganho_2;
        close c_perda_ganho;

        open c_perda_ganho(3);
          fetch c_perda_ganho into r_perda_ganho_3;
        close c_perda_ganho;

        open c_perda_ganho(4);
          fetch c_perda_ganho into r_perda_ganho_4;
        close c_perda_ganho;

        open c_perda_ganho(6);
          fetch c_perda_ganho into r_perda_ganho_5;
        close c_perda_ganho;

        open c_dialise_ent;
          fetch c_dialise_ent into r_dialise_ent;
        close c_dialise_ent;

        open c_dialise_sai;
          fetch c_dialise_sai into r_dialise_sai;
        close c_dialise_sai;

        open c_qt_peso;
          fetch c_qt_peso into r_qt_peso;
        close c_qt_peso;

        val_intake_w := coalesce(r_prescr_material_1.ds_valor, 0) +
                        coalesce(r_prescr_material_2.ds_valor, 0) +
                        coalesce(r_prescr_material_3.ds_valor, 0) +
                        coalesce(r_prescr_material_4.ds_valor, 0) +
                        coalesce(r_prescr_material_5.ds_valor, 0) +
                        coalesce(r_infusao_cont.ds_valor, 0) +
                        coalesce(r_sangue_produtos_1.ds_valor, 0) +
                        coalesce(r_sangue_produtos_2.ds_valor, 0) +
                        coalesce(r_sangue_produtos_3.ds_valor, 0) +
                        coalesce(r_perda_ganho_5.ds_valor, 0);

        val_output_w := coalesce(r_perda_ganho_1.ds_valor, 0) +
                        coalesce(r_perda_ganho_2.ds_valor, 0) +
                        coalesce(r_perda_ganho_3.ds_valor, 0) +
                        coalesce(r_perda_ganho_4.ds_valor, 0);

        val_dialysis_w := coalesce(r_dialise_ent.ds_valor, 0) -
                          coalesce(r_dialise_sai.ds_valor, 0);

        w_audit_flowsheet_w.nr_atendimento   := r1.nr_atendimento;
        w_audit_flowsheet_w.dt_evento := to_char(r_qt_peso.dt_sinal_vital, 'MM/DD/YYYY HH24:MI:SS');
        w_audit_flowsheet_w.ds_autor  := r_qt_peso.nm_usuario;
        CALL pck_flowsheet.verify_and_insert_audit('Bodyweight (kg)', r_qt_peso.ds_observacao, w_audit_flowsheet_w);

        -- 1 - INTAKE (ml)
        w_val_flowsheet_w.nr_ordem := 1;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 2 - Potassium
        w_val_flowsheet_w.nr_ordem := 2;
        w_val_flowsheet_w.ds_valor := r_prescr_material_1.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 3 - Cristalloids (ml)
        w_val_flowsheet_w.nr_ordem := 3;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 4 - NS
        w_val_flowsheet_w.nr_ordem := 4;
        w_val_flowsheet_w.ds_valor := r_prescr_material_3.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 5 - LR
        w_val_flowsheet_w.nr_ordem := 5;
        w_val_flowsheet_w.ds_valor := r_prescr_material_4.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 6 - Continuos Infusion meds
        w_val_flowsheet_w.nr_ordem := 6;
        w_val_flowsheet_w.ds_valor := r_infusao_cont.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 7 - Other meds
        w_val_flowsheet_w.nr_ordem := 7;
        w_val_flowsheet_w.ds_valor := r_prescr_material_5.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 8 - Colloids (ml)
        w_val_flowsheet_w.nr_ordem := 8;
        w_val_flowsheet_w.ds_valor := r_prescr_material_2.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 9 - Blood Products (ml)
        w_val_flowsheet_w.nr_ordem := 9;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 10 - pRBCs
        w_val_flowsheet_w.nr_ordem := 10;
        w_val_flowsheet_w.ds_valor := r_sangue_produtos_1.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 11 - FFP
        w_val_flowsheet_w.nr_ordem := 11;
        w_val_flowsheet_w.ds_valor := r_sangue_produtos_2.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 12 - Platelets
        w_val_flowsheet_w.nr_ordem := 12;
        w_val_flowsheet_w.ds_valor := r_sangue_produtos_3.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 13 - Nutrition (ml)
        w_val_flowsheet_w.nr_ordem := 13;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 14 - Clear Liquids
        w_val_flowsheet_w.nr_ordem := 14;
        w_val_flowsheet_w.ds_valor := r_perda_ganho_5.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 15 - INTAKE TOTAL (ml)
        w_val_flowsheet_w.nr_ordem := 15;
        w_val_flowsheet_w.ds_valor := case when val_intake_w = 0 then '' else val_intake_w end;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 16 - OUTPUT (ml)
        w_val_flowsheet_w.nr_ordem := 16;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 17 - Gastric (NG)
        w_val_flowsheet_w.nr_ordem := 17;
        w_val_flowsheet_w.ds_valor := r_perda_ganho_1.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 18 - Urine
        w_val_flowsheet_w.nr_ordem := 18;
        w_val_flowsheet_w.ds_valor := r_perda_ganho_2.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 19 - Stool
        w_val_flowsheet_w.nr_ordem := 19;
        w_val_flowsheet_w.ds_valor := r_perda_ganho_3.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 20 - Blood Loss
        w_val_flowsheet_w.nr_ordem := 20;
        w_val_flowsheet_w.ds_valor := r_perda_ganho_4.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 21 - OUTPUT TOTAL (ml)
        w_val_flowsheet_w.nr_ordem := 21;
        w_val_flowsheet_w.ds_valor := case when val_output_w = 0 then '' else val_output_w end;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 22 - DIALYSIS (ml)
        w_val_flowsheet_w.nr_ordem := 22;
        w_val_flowsheet_w.ds_valor := '';
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 23 - In
        w_val_flowsheet_w.nr_ordem := 23;
        w_val_flowsheet_w.ds_valor := r_dialise_ent.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 24 - Out
        w_val_flowsheet_w.nr_ordem := 24;
        w_val_flowsheet_w.ds_valor := r_dialise_sai.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 25 - Net
        w_val_flowsheet_w.nr_ordem := 25;
        w_val_flowsheet_w.ds_valor := case when coalesce(r_dialise_ent.ds_valor::text, '') = '' and coalesce(r_dialise_sai.ds_valor::text, '') = '' then '' else val_dialysis_w end;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 26 - TOTAL NET (In-Out) (ml)
        w_val_flowsheet_w.nr_ordem := 26;
        w_val_flowsheet_w.ds_valor := case when val_intake_w = 0 and val_output_w = 0 and coalesce(r_dialise_ent.ds_valor::text, '') = '' and coalesce(r_dialise_sai.ds_valor::text, '') = '' then '' else val_intake_w - val_output_w + val_dialysis_w end;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        -- 27 - Bodyweight (kg)
        w_val_flowsheet_w.nr_ordem := 27;
        w_val_flowsheet_w.ds_valor := r_qt_peso.ds_valor;
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_p => w_val_flowsheet_w);

        r_prescr_material_1 := null;
        r_prescr_material_2 := null;
        r_prescr_material_3 := null;
        r_prescr_material_4 := null;
        r_prescr_material_5 := null;
        r_infusao_cont := null;
        r_sangue_produtos_1 := null;
        r_sangue_produtos_2 := null;
        r_sangue_produtos_3 := null;
        r_perda_ganho_1 := null;
        r_perda_ganho_2 := null;
        r_perda_ganho_3 := null;
        r_perda_ganho_4 := null;
        r_perda_ganho_5 := null;
        r_dialise_ent := null;
        r_dialise_sai := null;
        r_qt_peso := null;

    end loop;
    close c1;

    commit;

    open c2;
    loop
      fetch c2 into r2;
      EXIT WHEN NOT FOUND; /* apply on c2 */

      w_val_flowsheet_w.nr_relatorio := r2.nr_relatorio;
      w_val_flowsheet_w.nr_pagina := r2.nr_pagina;
      w_val_flowsheet_w.nr_ordem := r2.nr_ordem;
      w_val_flowsheet_w.cd_pessoa_fisica := r2.cd_pessoa_fisica;
      w_val_flowsheet_w.ds_data_hora := r2.ds_data || case when r2.nr_pagina = 1 then ' 00:00-11:59' else ' 12:00-23:59' end;
      w_val_flowsheet_w.ds_valor := case when r2.ds_valor = 0 then '' else r2.ds_valor end;
      w_val_flowsheet_w.nr_atendimento := r2.nr_atendimento;
      w_val_flowsheet_w.ds_tipo_soma := r2.ds_tipo_soma;
      dt_peso_w  := '';

      if r2.nr_ordem = 27 and r2.ds_valor <> 0 then

        select max(t.ds_data_hora)
          into STRICT dt_peso_w
          from w_rel_val_flowsheet t
         where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
           and t.nr_relatorio = r2.nr_relatorio
           and t.nr_pagina = r2.nr_pagina
           and t.cd_pessoa_fisica = r2.cd_pessoa_fisica
           and substr(t.ds_data_hora, 1, 5) = r2.ds_data
           and t.nr_atendimento = r2.nr_atendimento
           and t.ds_tipo_soma = 'N'
           and t.nr_ordem = 27
           and (trim(both t.ds_valor) IS NOT NULL AND (trim(both t.ds_valor))::text <> '');

        begin
          select t.ds_valor
            into STRICT w_val_flowsheet_w.ds_valor
            from w_rel_val_flowsheet t
           where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
             and t.nr_relatorio = r2.nr_relatorio
             and t.nr_pagina = r2.nr_pagina
             and t.cd_pessoa_fisica = r2.cd_pessoa_fisica
             and t.nr_atendimento = r2.nr_atendimento
             and t.ds_tipo_soma = 'N'
             and t.nr_ordem = 27
             and t.ds_data_hora = dt_peso_w;
        exception when no_data_found then
          w_val_flowsheet_w.ds_valor := '';
        end;
      end if;

      if r2.nr_ordem = 25 and r2.ds_valor = 0 then
        delete from w_rel_val_flowsheet t
         where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
           and t.nr_relatorio = r2.nr_relatorio
           and t.nr_pagina = r2.nr_pagina
           and t.cd_pessoa_fisica = r2.cd_pessoa_fisica
           and substr(t.ds_data_hora, 1, 5) = r2.ds_data
           and t.nr_atendimento = r2.nr_atendimento
           and t.nr_ordem in (22, 23, 24, 25);
      else
        CALL pck_flowsheet.insert_valor(w_val_flowsheet_w);
      end if;
    end loop;
    close c2;

    commit;

    open c3;
    loop
      fetch c3 into r3;
      EXIT WHEN NOT FOUND; /* apply on c3 */

        w_val_flowsheet_w.nr_relatorio := r3.nr_relatorio;
        w_val_flowsheet_w.nr_pagina := r3.nr_pagina;
        w_val_flowsheet_w.nr_ordem := r3.nr_ordem;
        w_val_flowsheet_w.cd_pessoa_fisica := r3.cd_pessoa_fisica;
        w_val_flowsheet_w.ds_data_hora := r3.ds_data;
        w_val_flowsheet_w.ds_valor := case when r3.ds_valor = 0 then '' else r3.ds_valor end;
        w_val_flowsheet_w.nr_atendimento := r3.nr_atendimento;
        w_val_flowsheet_w.ds_tipo_soma := r3.ds_tipo_soma;
        dt_peso_w  := '';

        if r3.nr_ordem = 27 and r3.ds_valor <> 0 then

          select max(t.ds_data_hora)
            into STRICT dt_peso_w
            from w_rel_val_flowsheet t
           where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
             and t.nr_relatorio = r3.nr_relatorio
             and t.cd_pessoa_fisica = r3.cd_pessoa_fisica
             and t.nr_atendimento = r3.nr_atendimento
             and t.nr_ordem = 27
             and t.ds_tipo_soma = 'S'
             and (trim(both t.ds_valor) IS NOT NULL AND (trim(both t.ds_valor))::text <> '');

          begin
            select t.ds_valor
              into STRICT w_val_flowsheet_w.ds_valor
              from w_rel_val_flowsheet t
             where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
               and t.nr_relatorio = r3.nr_relatorio
               and t.cd_pessoa_fisica = r3.cd_pessoa_fisica
               and t.nr_atendimento = r3.nr_atendimento
               and t.nr_ordem = 27
               and t.ds_tipo_soma = 'S'
               and t.ds_data_hora = dt_peso_w;
          exception when no_data_found then
            w_val_flowsheet_w.ds_valor := '';
          end;
        end if;

        CALL pck_flowsheet.insert_valor(w_val_flowsheet_w);

    end loop;
    close c3;

    commit;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pck_flowsheet.ger_dados_shift_details (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint ) FROM PUBLIC;
