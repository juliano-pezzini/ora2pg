-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pck_flowsheet.ger_dados_audit_shift_details (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint ) AS $body$
DECLARE


    c1 CURSOR FOR
      SELECT distinct nr_atendimento
        from w_rel_val_flowsheet t
       where t.nm_usuario = wheb_usuario_pck.get_nm_usuario
         and t.nr_relatorio = cd_relatorio_p;
    r1 c1%rowtype;

    c_prescr_material CURSOR(ie_tipo_rel_p classe_material.ie_classe_material_rel%type) FOR
      SELECT b1.qt_dose ds_valor,
             b1.dt_liberacao,
             (CASE WHEN (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> '') THEN b1.ds_motivo_susp ELSE a1.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> '') THEN b1.nm_usuario_susp ELSE a1.nm_usuario_susp END) nm_usuario,
             coalesce(b1.dt_suspensao, a1.dt_suspensao) dt_fim_prescricao
        from prescr_medica a1,
             prescr_material b1,
             material c1,
             classe_material d1
       where a1.nr_prescricao = b1.nr_prescricao
         and b1.cd_material = c1.cd_material
         and c1.cd_classe_material = d1.cd_classe_material
         and ((ie_tipo_rel_p = 0 and c1.ie_tipo_material in (0, 2, 3, 6, 8, 9) and d1.ie_classe_material_rel not in (37, 38, 39, 40)) or (ie_tipo_rel_p <> 0 and d1.ie_classe_material_rel = ie_tipo_rel_p))
         and ((a1.dt_suspensao IS NOT NULL AND a1.dt_suspensao::text <> '') or (b1.dt_suspensao IS NOT NULL AND b1.dt_suspensao::text <> ''))
         and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
         and coalesce(b1.cd_unidade_medida_dose, b1.cd_unidade_medida) = 'ml'
         and b1.dt_liberacao between dt_inicial_p and dt_final_p
         and a1.nr_atendimento = r1.nr_atendimento;
    r_prescr_material_1 c_prescr_material%rowtype;
    r_prescr_material_2 c_prescr_material%rowtype;
    r_prescr_material_3 c_prescr_material%rowtype;
    r_prescr_material_4 c_prescr_material%rowtype;
    r_prescr_material_5 c_prescr_material%rowtype;

    c_prescr_material_comment CURSOR(ie_tipo_rel_p classe_material.ie_classe_material_rel%type) FOR
      SELECT substr(b1.ds_observacao, 1, 255) ds_observacao,
             b1.dt_liberacao,
             b1.nm_usuario
        from prescr_medica a1,
             prescr_material b1,
             material c1,
             classe_material d1
       where a1.nr_prescricao = b1.nr_prescricao
         and b1.cd_material = c1.cd_material
         and c1.cd_classe_material = d1.cd_classe_material
         and ((ie_tipo_rel_p = 0 and c1.ie_tipo_material in (0, 2, 3, 6, 8, 9) and d1.ie_classe_material_rel not in (37, 38, 39, 40)) or (ie_tipo_rel_p <> 0 and d1.ie_classe_material_rel = ie_tipo_rel_p))
         and c1.ie_situacao = 'A'
         and d1.ie_situacao = 'A'
         and coalesce(a1.dt_suspensao::text, '') = ''
         and coalesce(b1.dt_suspensao::text, '') = ''
         and (b1.qt_dose IS NOT NULL AND b1.qt_dose::text <> '')
         and coalesce(b1.cd_unidade_medida_dose, b1.cd_unidade_medida) = 'ml'
         and a1.nr_atendimento = r1.nr_atendimento
         and b1.dt_liberacao between dt_inicial_p and dt_final_p
         and (trim(both b1.ds_observacao) IS NOT NULL AND (trim(both b1.ds_observacao))::text <> '');
    r_prescr_material_c1 c_prescr_material_comment%rowtype;
    r_prescr_material_c2 c_prescr_material_comment%rowtype;
    r_prescr_material_c3 c_prescr_material_comment%rowtype;
    r_prescr_material_c4 c_prescr_material_comment%rowtype;
    r_prescr_material_c5 c_prescr_material_comment%rowtype;

    c_infusao_cont CURSOR FOR
      SELECT c2.dt_alteracao,
             coalesce(b2.dt_suspensao, a2.dt_suspensao) dt_suspensao,
             (CASE WHEN (b2.dt_suspensao IS NOT NULL AND b2.dt_suspensao::text <> '') THEN b2.ds_motivo_susp ELSE a2.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (b2.dt_suspensao IS NOT NULL AND b2.dt_suspensao::text <> '') THEN b2.nm_usuario_susp ELSE a2.nm_usuario_susp END) nm_usuario,
             c2.qt_vol_infundido ds_valor
        from prescr_medica a2,
             prescr_solucao b2,
             prescr_solucao_evento c2
       where c2.ie_evento_valido = 'S'
         and a2.nr_prescricao  = b2.nr_prescricao
         and b2.nr_prescricao = c2.nr_prescricao
         and b2.nr_seq_solucao = c2.nr_seq_solucao
         and (c2.nr_seq_solucao IS NOT NULL AND c2.nr_seq_solucao::text <> '')
         and (c2.qt_vol_infundido IS NOT NULL AND c2.qt_vol_infundido::text <> '')
         and c2.dt_alteracao between dt_inicial_p and dt_final_p
         and ((a2.dt_suspensao IS NOT NULL AND a2.dt_suspensao::text <> '') OR (b2.dt_suspensao IS NOT NULL AND b2.dt_suspensao::text <> ''))
         and a2.nr_atendimento = r1.nr_atendimento;
    r_infusao_cont c_infusao_cont%rowtype;

    c_infusao_cont_comment CURSOR FOR
      SELECT substr(c2.ds_observacao, 1, 255) ds_observacao,
             c2.dt_alteracao,
             c2.nm_usuario
        from prescr_medica a2,
             prescr_solucao b2,
             prescr_solucao_evento c2
       where c2.ie_evento_valido = 'S'
         and a2.nr_prescricao  = b2.nr_prescricao
         and b2.nr_prescricao = c2.nr_prescricao
         and b2.nr_seq_solucao = c2.nr_seq_solucao
         and (c2.nr_seq_solucao IS NOT NULL AND c2.nr_seq_solucao::text <> '')
         and coalesce(a2.dt_suspensao::text, '') = ''
         and coalesce(b2.dt_suspensao::text, '') = ''
         and (c2.qt_vol_infundido IS NOT NULL AND c2.qt_vol_infundido::text <> '')
         and a2.nr_atendimento = r1.nr_atendimento
         and c2.dt_alteracao between dt_inicial_p and dt_final_p
         and (trim(both c2.ds_observacao) IS NOT NULL AND (trim(both c2.ds_observacao))::text <> '');
    r_infusao_cont_c c_infusao_cont_comment%rowtype;

    c_sangue_produtos CURSOR(ie_tipo_derivado_p san_derivado.ie_tipo_derivado%type)     FOR
      SELECT c3.qt_vol_hemocomp ds_valor,
             c3.dt_resultado,
             (CASE WHEN (c3.dt_suspensao IS NOT NULL AND c3.dt_suspensao::text <> '') THEN c3.ds_motivo_susp ELSE a3.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (c3.dt_suspensao IS NOT NULL AND c3.dt_suspensao::text <> '') THEN c3.nm_usuario_susp ELSE a3.nm_usuario_susp END) nm_usuario,
             coalesce(c3.dt_suspensao, a3.dt_suspensao) dt_fim_prescricao
        from prescr_medica a3,
             prescr_solic_bco_sangue b3,
             prescr_procedimento c3,
             san_derivado d3
       where a3.nr_prescricao = b3.nr_prescricao
         and b3.nr_prescricao = c3.nr_prescricao
         and b3.nr_sequencia = c3.nr_seq_solic_sangue
         and c3.nr_seq_derivado = d3.nr_sequencia
         and d3.ie_tipo_derivado = ie_tipo_derivado_p
         and ((a3.dt_suspensao IS NOT NULL AND a3.dt_suspensao::text <> '') or (a3.dt_suspensao IS NOT NULL AND a3.dt_suspensao::text <> ''))
         and (c3.qt_vol_hemocomp IS NOT NULL AND c3.qt_vol_hemocomp::text <> '')
         and c3.dt_resultado between dt_inicial_p and dt_final_p
         and a3.nr_atendimento = r1.nr_atendimento;
    r_sangue_produtos_1 c_sangue_produtos%rowtype;
    r_sangue_produtos_2 c_sangue_produtos%rowtype;
    r_sangue_produtos_3 c_sangue_produtos%rowtype;

    c_sangue_produtos_comment CURSOR(ie_tipo_derivado_p san_derivado.ie_tipo_derivado%type)     FOR
      SELECT substr(b3.ds_observacao, 1, 255) ds_observacao,
             c3.dt_resultado,
             b3.nm_usuario
        from prescr_medica a3,
             prescr_solic_bco_sangue b3,
             prescr_procedimento c3,
             san_derivado d3
       where a3.nr_prescricao = b3.nr_prescricao
         and b3.nr_prescricao = c3.nr_prescricao
         and b3.nr_sequencia = c3.nr_seq_solic_sangue
         and c3.nr_seq_derivado = d3.nr_sequencia
         and d3.ie_tipo_derivado = ie_tipo_derivado_p
         and coalesce(d3.ie_situacao, 'A') = 'A'
         and coalesce(a3.dt_suspensao::text, '') = ''
         and coalesce(a3.dt_suspensao::text, '') = ''
         and (c3.qt_vol_hemocomp IS NOT NULL AND c3.qt_vol_hemocomp::text <> '')
         and a3.nr_atendimento = r1.nr_atendimento
         and c3.dt_resultado between dt_inicial_p and dt_final_p
         and (trim(both b3.ds_observacao) IS NOT NULL AND (trim(both b3.ds_observacao))::text <> '');
    r_sangue_produtos_c1 c_sangue_produtos_comment%rowtype;
    r_sangue_produtos_c2 c_sangue_produtos_comment%rowtype;
    r_sangue_produtos_c3 c_sangue_produtos_comment%rowtype;

    c_perda_ganho CURSOR(ie_tipo_rel_p tipo_perda_ganho.ie_tipo_rel%type) FOR
      SELECT a4.qt_volume ds_valor,
             a4.dt_liberacao,
             a4.ds_justificativa,
             a4.nm_usuario_inativacao nm_usuario,
             a4.dt_inativacao
        from atendimento_perda_ganho a4,
             tipo_perda_ganho b4,
             grupo_perda_ganho c4
       where a4.nr_seq_tipo = b4.nr_sequencia
         and b4.nr_seq_grupo = c4.nr_sequencia
         and b4.ie_tipo_rel = ie_tipo_rel_p
         and ((b4.ie_tipo_rel <> 6 and c4.ie_perda_ganho = 'P') or (b4.ie_tipo_rel = 6 and c4.ie_perda_ganho = 'G'))
         and coalesce(b4.ie_soma_bh, 'S') = 'S'
         and a4.ie_situacao = 'I'
         and (a4.qt_volume IS NOT NULL AND a4.qt_volume::text <> '')
         and a4.dt_liberacao between dt_inicial_p and dt_final_p
         and a4.nr_atendimento = r1.nr_atendimento;
    r_perda_ganho_1 c_perda_ganho%rowtype;
    r_perda_ganho_2 c_perda_ganho%rowtype;
    r_perda_ganho_3 c_perda_ganho%rowtype;
    r_perda_ganho_4 c_perda_ganho%rowtype;
    r_perda_ganho_5 c_perda_ganho%rowtype;

    c_perda_ganho_comment CURSOR(ie_tipo_rel_p tipo_perda_ganho.ie_tipo_rel%type) FOR
      SELECT a4.ds_observacao,
             a4.dt_liberacao,
             a4.nm_usuario
        from atendimento_perda_ganho a4,
             tipo_perda_ganho b4,
             grupo_perda_ganho c4
       where a4.nr_seq_tipo = b4.nr_sequencia
         and b4.nr_seq_grupo = c4.nr_sequencia
         and b4.ie_tipo_rel = ie_tipo_rel_p
         and ((b4.ie_tipo_rel <> 6 and c4.ie_perda_ganho = 'P') or (b4.ie_tipo_rel = 6 and c4.ie_perda_ganho = 'G'))
         and coalesce(b4.ie_soma_bh, 'S') = 'S'
         and coalesce(a4.ie_situacao, 'A') = 'A'
         and (a4.qt_volume IS NOT NULL AND a4.qt_volume::text <> '')
         and a4.nr_atendimento = r1.nr_atendimento
         and a4.dt_liberacao between dt_inicial_p and dt_final_p
         and (trim(both a4.ds_observacao) IS NOT NULL AND (trim(both a4.ds_observacao))::text <> '');
    r_perda_ganho_c1 c_perda_ganho_comment%rowtype;
    r_perda_ganho_c2 c_perda_ganho_comment%rowtype;
    r_perda_ganho_c3 c_perda_ganho_comment%rowtype;
    r_perda_ganho_c4 c_perda_ganho_comment%rowtype;
    r_perda_ganho_c5 c_perda_ganho_comment%rowtype;

    c_dialise_ent CURSOR FOR
      SELECT c5.qt_volume ds_valor,
             c5.dt_evento,
             coalesce(b5.dt_suspensao, a5.dt_suspensao) dt_suspensao,
             (CASE WHEN (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> '') THEN b5.ds_motivo_susp ELSE a5.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> '') THEN b5.nm_usuario_susp ELSE a5.nm_usuario_susp END) nm_usuario_susp
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and ((a5.dt_suspensao IS NOT NULL AND a5.dt_suspensao::text <> '') or (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> ''))
         and (c5.qt_volume IS NOT NULL AND c5.qt_volume::text <> '')
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and a5.nr_atendimento = r1.nr_atendimento;
    r_dialise_ent c_dialise_ent%rowtype;

    c_dialise_ent_comment CURSOR FOR
      SELECT substr(a5.ds_observacao, 1, 255) ds_observacao,
             c5.dt_evento,
             c5.nm_usuario
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and coalesce(a5.dt_suspensao::text, '') = ''
         and coalesce(b5.dt_suspensao::text, '') = ''
         and (c5.qt_volume IS NOT NULL AND c5.qt_volume::text <> '')
         and a5.nr_atendimento = r1.nr_atendimento
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and (trim(both a5.ds_observacao) IS NOT NULL AND (trim(both a5.ds_observacao))::text <> '');
    r_dialise_ent_c c_dialise_ent_comment%rowtype;

    c_dialise_sai CURSOR FOR
      SELECT c5.qt_vol_drenagem ds_valor,
             c5.dt_evento,
             coalesce(b5.dt_suspensao, a5.dt_suspensao) dt_suspensao,
             (CASE WHEN (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> '') THEN b5.ds_motivo_susp ELSE a5.ds_motivo_susp END) ds_justificativa,
             (CASE WHEN (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> '') THEN b5.nm_usuario_susp ELSE a5.nm_usuario_susp END) nm_usuario_susp
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and ((a5.dt_suspensao IS NOT NULL AND a5.dt_suspensao::text <> '') or (b5.dt_suspensao IS NOT NULL AND b5.dt_suspensao::text <> ''))
         and (c5.qt_vol_drenagem IS NOT NULL AND c5.qt_vol_drenagem::text <> '')
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and a5.nr_atendimento = r1.nr_atendimento;
    r_dialise_sai c_dialise_sai%rowtype;

    c_dialise_sai_comment CURSOR FOR
      SELECT substr(a5.ds_observacao, 1, 255) ds_observacao,
             c5.dt_evento,
             c5.nm_usuario
        from prescr_medica a5,
             prescr_solucao b5,
             hd_prescricao_evento c5
       where a5.nr_prescricao = b5.nr_prescricao
         and b5.nr_prescricao = c5.nr_prescricao
         and b5.nr_seq_solucao = c5.nr_seq_solucao
         and coalesce(a5.dt_suspensao::text, '') = ''
         and coalesce(b5.dt_suspensao::text, '') = ''
         and (c5.qt_vol_drenagem IS NOT NULL AND c5.qt_vol_drenagem::text <> '')
         and a5.nr_atendimento = r1.nr_atendimento
         and c5.dt_evento between dt_inicial_p and dt_final_p
         and (trim(both a5.ds_observacao) IS NOT NULL AND (trim(both a5.ds_observacao))::text <> '');
    r_dialise_sai_c c_dialise_sai_comment%rowtype;

    c_qt_peso CURSOR FOR
      SELECT qt_peso ds_valor,
             a6.dt_liberacao,
             a6.dt_inativacao,
             a6.ds_justificativa,
             a6.nm_usuario_inativacao
        from atendimento_sinal_vital a6
       where a6.ie_situacao = 'I'
         and (a6.qt_peso IS NOT NULL AND a6.qt_peso::text <> '')
         and a6.dt_liberacao between dt_inicial_p and dt_final_p
         and a6.nr_atendimento = r1.nr_atendimento;
    r_qt_peso c_qt_peso%rowtype;

    w_audit_flowsheet_w w_rel_audit_flowsheet%rowtype;

  
BEGIN
      
    w_audit_flowsheet_w.nr_relatorio := cd_relatorio_p;
    w_audit_flowsheet_w.cd_pessoa_fisica := cd_pessoa_fisica_p;

    open c1;
    loop
      fetch c1 into r1;
      EXIT WHEN NOT FOUND; /* apply on c1 */
         
        w_audit_flowsheet_w.nr_atendimento := r1.nr_atendimento;
        w_audit_flowsheet_w.nr_ordem := 1;

        open c_prescr_material(37);
        loop
          fetch c_prescr_material into r_prescr_material_1;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material_1.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material_1.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material_1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Potassium', r_prescr_material_1.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_prescr_material(39);
        loop
          fetch c_prescr_material into r_prescr_material_2;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_2.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material_2.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material_2.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material_2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Crystalloids NS', r_prescr_material_2.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_prescr_material(40);
        loop
          fetch c_prescr_material into r_prescr_material_3;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_3.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material_3.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material_3.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material_3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Crystalloids LR', r_prescr_material_3.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_infusao_cont;
        loop
          fetch c_infusao_cont into r_infusao_cont;
          EXIT WHEN NOT FOUND; /* apply on c_infusao_cont */

            w_audit_flowsheet_w.dt_evento := to_char(r_infusao_cont.dt_alteracao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_infusao_cont.dt_suspensao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_infusao_cont.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_infusao_cont.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Continuous Infusion', r_infusao_cont.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_infusao_cont;

        open c_prescr_material(0);
        loop
          fetch c_prescr_material into r_prescr_material_4;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_4.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material_4.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material_4.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material_4.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Other Meds', r_prescr_material_4.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_prescr_material(38);
        loop
          fetch c_prescr_material into r_prescr_material_5;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_5.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_prescr_material_5.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_prescr_material_5.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_prescr_material_5.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Colloids (ml)', r_prescr_material_5.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material;

        open c_sangue_produtos('CH');
        loop
          fetch c_sangue_produtos into r_sangue_produtos_1;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_1.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_sangue_produtos_1.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_sangue_produtos_1.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('pRBCs', r_sangue_produtos_1.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos;

        open c_sangue_produtos('PC');
        loop
          fetch c_sangue_produtos into r_sangue_produtos_2;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_2.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_sangue_produtos_2.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_sangue_produtos_2.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('FFP', r_sangue_produtos_2.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos;

        open c_sangue_produtos('CP');
        loop
          fetch c_sangue_produtos into r_sangue_produtos_3;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_3.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_sangue_produtos_3.dt_fim_prescricao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_sangue_produtos_3.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Platelets', r_sangue_produtos_3.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos;

        open c_perda_ganho(1);
        loop
          fetch c_perda_ganho into r_perda_ganho_1;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_perda_ganho_1.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_perda_ganho_1.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Gastric (NG)', r_perda_ganho_1.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho;

        open c_perda_ganho(2);
        loop
          fetch c_perda_ganho into r_perda_ganho_2;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_2.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_perda_ganho_2.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_perda_ganho_2.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Urine', r_perda_ganho_2.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho;

        open c_perda_ganho(3);
        loop
          fetch c_perda_ganho into r_perda_ganho_3;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_3.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_perda_ganho_3.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_perda_ganho_3.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Stool', r_perda_ganho_3.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho;

        open c_perda_ganho(4);
        loop
          fetch c_perda_ganho into r_perda_ganho_4;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_4.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_perda_ganho_4.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_perda_ganho_4.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_4.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Blood Loss', r_perda_ganho_4.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho;

        open c_perda_ganho(6);
        loop
          fetch c_perda_ganho into r_perda_ganho_5;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_5.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_perda_ganho_5.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_perda_ganho_5.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_5.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Clear Liquids', r_perda_ganho_5.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho;

        open c_dialise_ent;
        loop
          fetch c_dialise_ent into r_dialise_ent;
          EXIT WHEN NOT FOUND; /* apply on c_dialise_ent */

            w_audit_flowsheet_w.dt_evento := to_char(r_dialise_ent.dt_evento, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_dialise_ent.dt_suspensao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_dialise_ent.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_dialise_ent.nm_usuario_susp;

            CALL pck_flowsheet.verify_and_insert_audit('Dialysis IN', r_dialise_ent.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_dialise_ent;

        open c_dialise_sai;
        loop
          fetch c_dialise_sai into r_dialise_sai;
          EXIT WHEN NOT FOUND; /* apply on c_dialise_sai */

            w_audit_flowsheet_w.dt_evento := to_char(r_dialise_sai.dt_evento, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_dialise_sai.dt_suspensao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_dialise_sai.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_dialise_sai.nm_usuario_susp;

            CALL pck_flowsheet.verify_and_insert_audit('Dialysis OUT', r_dialise_sai.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_dialise_sai;

        open c_qt_peso;
        loop
          fetch c_qt_peso into r_qt_peso;
          EXIT WHEN NOT FOUND; /* apply on c_qt_peso */

            w_audit_flowsheet_w.dt_evento := to_char(r_qt_peso.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.dt_inativacao := to_char(r_qt_peso.dt_inativacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_motivo := r_qt_peso.ds_justificativa;
            w_audit_flowsheet_w.ds_autor := r_qt_peso.nm_usuario_inativacao;

            CALL pck_flowsheet.verify_and_insert_audit('Bodyweight (kg)', r_qt_peso.ds_valor, w_audit_flowsheet_w);

        end loop;
        close c_qt_peso;

        w_audit_flowsheet_w.nr_ordem := 2;
        w_audit_flowsheet_w.dt_inativacao := null;
        w_audit_flowsheet_w.ds_motivo := null;

        open c_prescr_material_comment(37);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c1;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Potassium', r_prescr_material_c1.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_prescr_material_comment(39);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c2;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c2.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Crystalloids NS', r_prescr_material_c2.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_prescr_material_comment(40);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c3;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c3.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Crystalloids LR', r_prescr_material_c3.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_infusao_cont_comment;
        loop
          fetch c_infusao_cont_comment into r_infusao_cont_c;
          EXIT WHEN NOT FOUND; /* apply on c_infusao_cont_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_infusao_cont_c.dt_alteracao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_infusao_cont_c.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Continuous Infusion', r_infusao_cont_c.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_infusao_cont_comment;

        open c_prescr_material_comment(0);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c4;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c4.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c4.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Other Meds', r_prescr_material_c4.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_prescr_material_comment(38);
        loop
          fetch c_prescr_material_comment into r_prescr_material_c5;
          EXIT WHEN NOT FOUND; /* apply on c_prescr_material_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_prescr_material_c5.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_prescr_material_c5.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Colloids (ml)', r_prescr_material_c5.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_prescr_material_comment;

        open c_sangue_produtos_comment('CH');
        loop
          fetch c_sangue_produtos_comment into r_sangue_produtos_c1;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_c1.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_c1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('pRBCs', r_sangue_produtos_c1.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos_comment;

        open c_sangue_produtos_comment('PC');
        loop
          fetch c_sangue_produtos_comment into r_sangue_produtos_c2;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_c2.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_c2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('FFP', r_sangue_produtos_c2.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos_comment;

        open c_sangue_produtos_comment('CP');
        loop
          fetch c_sangue_produtos_comment into r_sangue_produtos_c3;
          EXIT WHEN NOT FOUND; /* apply on c_sangue_produtos_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_sangue_produtos_c3.dt_resultado, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_sangue_produtos_c3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Platelets', r_sangue_produtos_c3.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_sangue_produtos_comment;

        open c_perda_ganho_comment(1);
        loop
          fetch c_perda_ganho_comment into r_perda_ganho_c1;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_c1.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_c1.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Gastric (NG)', r_perda_ganho_c1.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho_comment;

        open c_perda_ganho_comment(2);
        loop
          fetch c_perda_ganho_comment into r_perda_ganho_c2;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_c2.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_c2.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Urine', r_perda_ganho_c2.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho_comment;

        open c_perda_ganho_comment(3);
        loop
          fetch c_perda_ganho_comment into r_perda_ganho_c3;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_c3.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_c3.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Stool', r_perda_ganho_c3.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho_comment;

        open c_perda_ganho_comment(4);
        loop
          fetch c_perda_ganho_comment into r_perda_ganho_c4;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_c4.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_c4.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Blood Loss', r_perda_ganho_c4.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho_comment;

        open c_perda_ganho_comment(6);
        loop
          fetch c_perda_ganho_comment into r_perda_ganho_c5;
          EXIT WHEN NOT FOUND; /* apply on c_perda_ganho_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_perda_ganho_c5.dt_liberacao, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_perda_ganho_c5.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Clear Liquids', r_perda_ganho_c5.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_perda_ganho_comment;

        open c_dialise_ent_comment;
        loop
          fetch c_dialise_ent_comment into r_dialise_ent_c;
          EXIT WHEN NOT FOUND; /* apply on c_dialise_ent_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_dialise_ent_c.dt_evento, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_dialise_ent_c.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Dialysis IN', r_dialise_ent_c.nm_usuario, w_audit_flowsheet_w);

        end loop;
        close c_dialise_ent_comment;

        open c_dialise_sai_comment;
        loop
          fetch c_dialise_sai_comment into r_dialise_sai_c;
          EXIT WHEN NOT FOUND; /* apply on c_dialise_sai_comment */

            w_audit_flowsheet_w.dt_evento := to_char(r_dialise_sai_c.dt_evento, 'MM/DD/YYYY HH24:MI:SS');
            w_audit_flowsheet_w.ds_autor := r_dialise_sai_c.nm_usuario;

            CALL pck_flowsheet.verify_and_insert_audit('Dialysis OUT', r_dialise_sai_c.ds_observacao, w_audit_flowsheet_w);

        end loop;
        close c_dialise_sai_comment;

        commit;

    end loop;
    close c1;

    commit;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pck_flowsheet.ger_dados_audit_shift_details (cd_relatorio_p bigint, ie_dados_p text, dt_inicial_p timestamp, dt_final_p timestamp, cd_pessoa_fisica_p bigint ) FROM PUBLIC;
