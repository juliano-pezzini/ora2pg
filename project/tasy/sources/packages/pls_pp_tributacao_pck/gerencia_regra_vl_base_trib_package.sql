-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_tributacao_pck.gerencia_regra_vl_base_trib ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, ie_vencimento_p tributo.ie_vencimento%type, ie_pf_pj_p tributo.ie_pf_pj%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_nr_seq_item_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_contrat_w	pls_util_cta_pck.t_varchar2_table_5;
tb_nr_seq_prest_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_evento_w	pls_util_cta_pck.t_number_table;
tb_vl_item_w		pls_util_cta_pck.t_number_table;
tb_dt_comp_base_w	pls_util_cta_pck.t_date_table;
tb_nr_seq_tipo_prest_w	pls_util_cta_pck.t_number_table;

ds_alias_item_w		varchar(20);
ds_alias_lote_w		varchar(20);
ds_alias_prest_w	varchar(20);
ds_campos_w		varchar(1500);
ds_sql_w		varchar(30000);
ds_restricao_w		varchar(20000);
valor_bind_w		sql_pck.t_dado_bind;
cursor_w		sql_pck.t_cursor;

c01 CURSOR(	cd_tributo_pc	tributo.cd_tributo%type) FOR
	SELECT	nr_sequencia,
		nr_seq_evento,
		cd_prestador_cod,
		dt_fim_vigencia_ref,
		dt_inicio_vigencia_ref,
		ie_cooperado,
		ie_situacao_prest,
		nr_seq_classificacao,
		nr_seq_grupo_prestador,
		nr_seq_prestador,
		nr_seq_sit_coop,
		nr_seq_tipo_prestador,
		(SELECT count(1)
		from	pls_pp_regra_ex_vl_b_trib x
		where	x.nr_seq_regra = a.nr_sequencia  LIMIT 1) qt_excecao
	from	pls_pp_regra_vl_base_trib a
	where	a.cd_tributo = cd_tributo_pc
	and	a.ie_situacao = 'A';

BEGIN

ds_alias_item_w := pls_pp_tributacao_pck.obter_alias_tabela('pls_pp_item_lote');
ds_alias_lote_w := pls_pp_tributacao_pck.obter_alias_tabela('pls_pp_lote');
ds_alias_prest_w := pls_pp_tributacao_pck.obter_alias_tabela('pls_pp_prestador_tmp');

for r_c01_w in c01(cd_tributo_p) loop

	-- monta a restricao da regra de acordo com os campos informados na mesma

	SELECT * FROM pls_pp_tributacao_pck.obter_restricao_regra_trib(	r_c01_w.cd_prestador_cod, r_c01_w.dt_fim_vigencia_ref, r_c01_w.dt_inicio_vigencia_ref, r_c01_w.ie_cooperado, r_c01_w.ie_situacao_prest, r_c01_w.nr_seq_classificacao, r_c01_w.nr_seq_evento, r_c01_w.nr_seq_grupo_prestador, r_c01_w.nr_seq_prestador, r_c01_w.nr_seq_sit_coop, r_c01_w.nr_seq_tipo_prestador, r_c01_w.nr_sequencia, r_c01_w.qt_excecao, ie_vencimento_p, ie_pf_pj_p, valor_bind_w) INTO STRICT _ora2pg_r;
 ds_campos_w := _ora2pg_r.ds_campos_p; valor_bind_w := _ora2pg_r.valor_bind_p;

	-- so trago os itens que tenham valor de item diferente de zero, zero nao ira interferir no calculo

	-- por isso so ira gerar registros desnecessarios na tabela

	ds_sql_w := 	'select	' || ds_alias_item_w || '.nr_sequencia,' || pls_util_pck.enter_w ||
			'	nvl(' || ds_alias_item_w || '.ie_tipo_contratacao, ''S''),' || pls_util_pck.enter_w ||
			'	' || ds_alias_item_w || '.nr_seq_prestador,' || pls_util_pck.enter_w ||
			'	' || ds_alias_item_w || '.nr_seq_evento,' || pls_util_pck.enter_w ||
			'	' || ds_alias_item_w || '.vl_item,' || pls_util_pck.enter_w ||
			'	' || ds_alias_prest_w || '.nr_seq_tipo_prestador' || pls_util_pck.enter_w ||
			ds_campos_w ||
			'from	pls_pp_lote ' || ds_alias_lote_w || ',' || pls_util_pck.enter_w ||
			'	pls_pp_item_lote ' || ds_alias_item_w || ',' || pls_util_pck.enter_w ||
			'	pls_pp_prestador_tmp ' || ds_alias_prest_w || pls_util_pck.enter_w ||
			'where	' || ds_alias_lote_w || '.nr_sequencia = :nr_seq_lote' || pls_util_pck.enter_w ||
			'and	' || ds_alias_item_w || '.nr_seq_lote = ' || ds_alias_lote_w || '.nr_sequencia' || pls_util_pck.enter_w ||
			'and	' || ds_alias_prest_w || '.nr_seq_prestador = ' || ds_alias_item_w || '.nr_seq_prestador' || pls_util_pck.enter_w ||
			'and	' || ds_alias_item_w || '.vl_item <> 0' || pls_util_pck.enter_w ||
			ds_restricao_w;

	valor_bind_w := sql_pck.bind_variable(':nr_seq_lote', nr_seq_lote_p, valor_bind_w);
	
	valor_bind_w := sql_pck.executa_sql_cursor(	ds_sql_w, valor_bind_w);

	loop
		fetch cursor_w bulk collect into 	tb_nr_seq_item_w, tb_ie_tipo_contrat_w, tb_nr_seq_prest_w,
							tb_nr_seq_evento_w, tb_vl_item_w, tb_nr_seq_tipo_prest_w,
							tb_dt_comp_base_w
		limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_nr_seq_item_w.count = 0;
	
		forall i in tb_nr_seq_item_w.first..tb_nr_seq_item_w.last
			insert into pls_pp_base_atual_trib(
				cd_tributo, dt_atualizacao, dt_atualizacao_nrec,
				ie_tipo_contratacao, nm_usuario, nm_usuario_nrec,
				nr_seq_evento, nr_seq_item_lote, nr_seq_lote,
				nr_seq_prestador, nr_seq_regra_trib, nr_sequencia,
				vl_item, dt_comp_base_calc, nr_seq_tipo_prestador,
				vl_base, vl_base_adic, vl_base_nao_retido,
				vl_nao_retido, vl_trib_adic, vl_tributo,
				ie_cancelado
			) values (
				cd_tributo_p, clock_timestamp(), clock_timestamp(),
				tb_ie_tipo_contrat_w(i), nm_usuario_p, nm_usuario_p,
				tb_nr_seq_evento_w(i), tb_nr_seq_item_w(i), nr_seq_lote_p,
				tb_nr_seq_prest_w(i), r_c01_w.nr_sequencia, nextval('pls_pp_base_atual_trib_seq'),
				tb_vl_item_w(i), tb_dt_comp_base_w(i), tb_nr_seq_tipo_prest_w(i),
				0, 0, 0,
				0, 0, 0,
				'N'
			);
		commit;
	end loop; -- cursor_w
	close cursor_w;
end loop; -- c01

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_tributacao_pck.gerencia_regra_vl_base_trib ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, ie_vencimento_p tributo.ie_vencimento%type, ie_pf_pj_p tributo.ie_pf_pj%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
