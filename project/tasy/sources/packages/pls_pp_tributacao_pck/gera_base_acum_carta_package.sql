-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_tributacao_pck.gera_base_acum_carta ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_cont_w		integer;
ie_acumula_base_w	boolean;

tb_nr_sequencia_w	pls_util_cta_pck.t_number_table;
tb_vl_tributo_w		pls_util_cta_pck.t_number_table;
tb_vl_base_calc_w	pls_util_cta_pck.t_number_table;
tb_cd_pf_w		pls_util_cta_pck.t_varchar2_table_50;
tb_dt_comp_base_w	pls_util_cta_pck.t_date_table;
tb_nr_seq_tipo_prest_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_trib_w	pls_util_cta_pck.t_varchar2_table_50;

-- e verificado se ja existe um registro para aquele mes que estamos processando

-- pois e possivel cadastrar uma regra para o ano todo e com isso devemos ter um

-- registro para cada mes nesta tabela

c01 CURSOR(	cd_tributo_pc	tributo.cd_tributo%type,
		nr_seq_lote_pc	pls_pp_lote.nr_sequencia%type) FOR
	SELECT	cd_pessoa_fisica,
		max(dt_base) dt_base,
		nr_sequencia nr_seq_carta,
		vl_tributo,
		vl_base_calculo,
		max(nr_seq_tipo_prestador) nr_seq_tipo_prestador,
		ie_tipo_tributo,
		cd_estabelecimento,
		max(dt_data_venc_trunc) dt_data_venc_trunc,
		max(dt_comp_pag) dt_comp_pag,
		ie_vencimento,
		max(nr_seq_prestador) nr_seq_prestador
	from (SELECT	a.nr_sequencia,
			a.vl_tributo,
			a.vl_base_calculo,
			a.cd_pessoa_fisica,
			b.dt_data_venc_trunc dt_base,
			b.dt_data_venc_trunc,
			b.dt_comp_pag,
			c.ie_vencimento,
			b.nr_seq_tipo_prestador,
			c.ie_tipo_tributo,
			a.cd_estabelecimento,
			b.nr_seq_prestador
		from	pls_pp_prestador_tmp b,
			pessoa_fisica_trib a,
			tributo c
		where	b.ie_tipo_prestador = 'PF'
		and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and	a.ie_tipo_data = 'V' -- por vencimento, ira utilizar a data de vencimento do prestador

		and	b.dt_data_venc_trunc between trunc(a.dt_inicio_vigencia) and a.dt_fim_vigencia
		and	a.cd_tributo = cd_tributo_pc
		and	c.cd_tributo = a.cd_tributo
		and not exists (	select	1
				from	pls_pp_base_acum_trib x
				where	x.nr_seq_vl_outra_fonte = a.nr_sequencia
				and	x.dt_competencia = b.dt_data_venc_trunc)
		
union all

		select	a.nr_sequencia,
			a.vl_tributo,
			a.vl_base_calculo,
			a.cd_pessoa_fisica,
			b.dt_comp_pag dt_base,
			b.dt_data_venc_trunc,
			b.dt_comp_pag,
			c.ie_vencimento,
			b.nr_seq_tipo_prestador,
			c.ie_tipo_tributo,
			a.cd_estabelecimento,
			b.nr_seq_prestador
		from	pls_pp_prestador_tmp b,
			pessoa_fisica_trib a,
			tributo c
		where	b.ie_tipo_prestador = 'PF'
		and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and	a.ie_tipo_data = 'E' -- por emissao, ira utilizar a data de competencia do lote

		and	b.dt_comp_pag between trunc(a.dt_inicio_vigencia) and a.dt_fim_vigencia
		and	a.cd_tributo = cd_tributo_pc
		and	c.cd_tributo = a.cd_tributo
		and not exists (	select	1
				from	pls_pp_base_acum_trib x
				where	x.nr_seq_vl_outra_fonte = a.nr_sequencia
				and	x.dt_competencia = b.dt_comp_pag)) alias10
	group by cd_pessoa_fisica,
		nr_sequencia,
		vl_tributo,
		vl_base_calculo,
		ie_tipo_tributo,
		cd_estabelecimento,
		ie_vencimento;

BEGIN
-- inicia as variaveis

SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_carta(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_trib_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_trib_w := _ora2pg_r.tb_ie_tipo_trib_p;

for r_c01_w in c01(cd_tributo_p, nr_seq_lote_p) loop

	-- comeca como sendo valido

	ie_acumula_base_w := true;
	
	-- verifica se o estabelecimento e diferente

	if (r_c01_w.cd_estabelecimento IS NOT NULL AND r_c01_w.cd_estabelecimento::text <> '') and (r_c01_w.cd_estabelecimento != cd_estabelecimento_p) then
		
		ie_acumula_base_w := false;
	end if;
	
	-- se e para fazer parte da base de calculo

	if (ie_acumula_base_w) then

		tb_nr_sequencia_w(nr_cont_w) := r_c01_w.nr_seq_carta;
		tb_vl_tributo_w(nr_cont_w) := r_c01_w.vl_tributo;
		tb_vl_base_calc_w(nr_cont_w) := r_c01_w.vl_base_calculo;
		tb_cd_pf_w(nr_cont_w) := r_c01_w.cd_pessoa_fisica;
		tb_nr_seq_tipo_prest_w(nr_cont_w) := r_c01_w.nr_seq_tipo_prestador;
		tb_ie_tipo_trib_w(nr_cont_w) := r_c01_w.ie_tipo_tributo;

		-- busca um prestador para lancar a carta, um prestador que seja da mesma pessoa fisica e que esteja na tributacao ja

		tb_nr_seq_prest_w(nr_cont_w) := pls_pp_tributacao_pck.obter_prest_pessoa_trib(nr_seq_lote_p, r_c01_w.cd_pessoa_fisica);

		-- para buscar a carta e olhado o campo ie_tipo_data do cadastro da carta, porem para tributar verificamos

		-- o campo ie_vencimento do cadastro do tributo para definir qual sera a data de 'tributacao'

		-- por vencimento

		if (r_c01_w.ie_vencimento in ('V', 'C')) then

			tb_dt_comp_base_w(nr_cont_w) := r_c01_w.dt_data_venc_trunc;
		-- por competencia

		else

			tb_dt_comp_base_w(nr_cont_w) := r_c01_w.dt_comp_pag;
		end if;
		
		-- se atingiu a quantidade manda pro banco

		if (nr_cont_w >= pls_util_pck.qt_registro_transacao_w) then
		
			SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_carta(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_trib_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_trib_w := _ora2pg_r.tb_ie_tipo_trib_p;
		else
			nr_cont_w := nr_cont_w + 1;
		end if;
	end if;
end loop;

-- se sobrou algo manda pro banco

SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_carta(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_trib_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_trib_w := _ora2pg_r.tb_ie_tipo_trib_p;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_tributacao_pck.gera_base_acum_carta ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
