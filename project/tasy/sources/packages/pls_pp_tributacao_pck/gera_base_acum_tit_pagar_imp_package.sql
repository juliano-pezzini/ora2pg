-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_tributacao_pck.gera_base_acum_tit_pagar_imp ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, ie_rest_estab_p tributo.ie_restringe_estab%type, ie_vencimento_p tributo.ie_vencimento%type, ie_baixa_titulo_p tributo.ie_baixa_titulo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_acumula_base_w	boolean;
nr_cont_w		integer;
tb_nr_sequencia_w	pls_util_cta_pck.t_number_table;
tb_vl_tributo_w		pls_util_cta_pck.t_number_table;
tb_vl_base_calc_w	pls_util_cta_pck.t_number_table;
tb_vl_item_w		pls_util_cta_pck.t_number_table;
tb_cd_pf_w		pls_util_cta_pck.t_varchar2_table_50;
tb_dt_comp_base_w	pls_util_cta_pck.t_date_table;
tb_vl_nao_retido_w	pls_util_cta_pck.t_number_table;
tb_vl_base_nao_ret_w	pls_util_cta_pck.t_number_table;
tb_vl_trib_adic_w	pls_util_cta_pck.t_number_table;
tb_vl_base_adic_w	pls_util_cta_pck.t_number_table;
tb_nr_titulo_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_tipo_prest_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_tributo_w	pls_util_cta_pck.t_varchar2_table_20;

c01 CURSOR(	cd_tributo_pc		tributo.cd_tributo%type,
		ie_vencimento_pc	text) FOR
	SELECT	b.cd_pessoa_fisica,
		a.nr_sequencia,
		c.nr_seq_tipo_prestador,
		max(a.vl_imposto) vl_imposto,
		max(a.vl_base_calculo) vl_base_calculo,
		max(b.vl_titulo) vl_titulo,
		trunc(max(b.dt_vencimento_atual), 'month') dt_base,
		max(b.cd_estabelecimento) cd_estabelecimento,
		max(a.vl_nao_retido) vl_nao_retido,
		max(a.vl_base_nao_retido) vl_base_nao_retido,
		max(a.vl_trib_adic) vl_trib_adic,
		max(a.vl_base_adic) vl_base_adic,
		max(b.nr_titulo) nr_titulo,
		max(c.nr_seq_prestador) nr_seq_prestador,
		obter_se_base_calculo(max(b.nr_titulo), 'TP') ie_base_calculo,
		max(d.ie_tipo_tributo) ie_tipo_tributo
	from	pls_pp_prestador_tmp c,
		titulo_pagar b,
		titulo_pagar_imposto a,
		tributo d
	where	ie_vencimento_pc = 'V' -- por vencimento, ira utilizar a data de vencimento do prestador

	and	c.ie_tipo_prestador = 'PF'
	and	b.cd_pessoa_fisica = c.cd_pessoa_fisica
	and	b.dt_vencimento_atual between c.dt_venc_ini_mes and c.dt_venc_fim_mes
	and	b.ie_situacao in ('A','L')
	and	a.nr_titulo = b.nr_titulo
	and	a.cd_tributo = cd_tributo_pc
	and	a.ie_pago_prev = 'V'
	and	d.cd_tributo = a.cd_tributo
	and	b.ie_origem_titulo != '25' -- Se for de origem pagamento medico (HTML), entao nao considera, ja devia estar o tributo no proprio pagamento

	and not exists (	SELECT	1
			from	pls_pp_base_acum_trib x
			where	x.nr_seq_vl_tit_trib = a.nr_sequencia)
	group by b.cd_pessoa_fisica, a.nr_sequencia, c.nr_seq_tipo_prestador
	
union all

	select	b.cd_pessoa_fisica,
		a.nr_sequencia,
		y.nr_seq_tipo_prestador,
		max(a.vl_imposto) vl_imposto,
		max(a.vl_base_calculo) vl_base_calculo,
		max(b.vl_titulo) vl_titulo,
		trunc(coalesce(max(b.dt_contabil), max(b.dt_emissao)), 'month') dt_base,
		max(b.cd_estabelecimento) cd_estabelecimento,
		max(a.vl_nao_retido) vl_nao_retido,
		max(a.vl_base_nao_retido) vl_base_nao_retido,
		max(a.vl_trib_adic) vl_trib_adic,
		max(a.vl_base_adic) vl_base_adic,
		max(b.nr_titulo) nr_titulo,
		max(y.nr_seq_prestador) nr_seq_prestador,
		obter_se_base_calculo(max(b.nr_titulo), 'TP') ie_base_calculo,
		max(d.ie_tipo_tributo) ie_tipo_tributo
	from	pls_pp_prestador_tmp y,
		titulo_pagar b,
		titulo_pagar_imposto a,
		tributo d
	where	ie_vencimento_pc = 'C' -- por vencimento, ira utilizar a data de vencimento do prestador

	and	y.ie_tipo_prestador = 'PF'
	and	b.cd_pessoa_fisica = y.cd_pessoa_fisica
	and	b.ie_situacao in ('A','L')
	and 	y.nr_seq_prestador in (	
					select	c.nr_seq_prestador
					from	pls_pp_prestador_tmp c
					where	c.ie_tipo_prestador = 'PF'
					and	c.cd_pessoa_fisica = b.cd_pessoa_fisica
					and	b.dt_contabil between c.dt_venc_ini_mes and c.dt_venc_fim_mes
					
union all

					select	c.nr_seq_prestador
					from	pls_pp_prestador_tmp c
					where	c.ie_tipo_prestador = 'PF'
					and	c.cd_pessoa_fisica = b.cd_pessoa_fisica
					and	b.dt_emissao between c.dt_venc_ini_mes and c.dt_venc_fim_mes)	
	and	a.nr_titulo = b.nr_titulo
	and	a.cd_tributo = cd_tributo_pc
	and	a.ie_pago_prev = 'V'
	and	d.cd_tributo = a.cd_tributo
	and	b.ie_origem_titulo != '25' -- Se for de origem pagamento medico (HTML), entao nao considera, ja devia estar o tributo no proprio pagamento

	and not exists (	select	1
			from	pls_pp_base_acum_trib x
			where	x.nr_seq_vl_tit_trib = a.nr_sequencia)
	group by b.cd_pessoa_fisica, a.nr_sequencia, y.nr_seq_tipo_prestador
	
union all

	select	b.cd_pessoa_fisica,
		a.nr_sequencia,
		c.nr_seq_tipo_prestador,
		max(a.vl_imposto) vl_imposto,
		max(a.vl_base_calculo) vl_base_calculo,
		max(b.vl_titulo) vl_titulo,
		trunc(max(b.dt_emissao), 'month') dt_base,
		max(b.cd_estabelecimento) cd_estabelecimento,
		max(a.vl_nao_retido) vl_nao_retido,
		max(a.vl_base_nao_retido) vl_base_nao_retido,
		max(a.vl_trib_adic) vl_trib_adic,
		max(a.vl_base_adic) vl_base_adic,
		max(b.nr_titulo) nr_titulo,
		max(c.nr_seq_prestador) nr_seq_prestador,
		obter_se_base_calculo(max(b.nr_titulo), 'TP') ie_base_calculo,
		max(d.ie_tipo_tributo) ie_tipo_tributo
	from	pls_pp_prestador_tmp c,
		titulo_pagar b,
		titulo_pagar_imposto a,
		tributo d
	where	ie_vencimento_pc in ('R', 'B', 'S') -- por competencia, ira utilizar a data do lote
	and	c.ie_tipo_prestador = 'PF'
	and	b.cd_pessoa_fisica = c.cd_pessoa_fisica
	and	b.dt_emissao between c.dt_comp_ini_mes and c.dt_comp_fim_mes
	and	b.ie_situacao in ('A','L')
	and	a.nr_titulo = b.nr_titulo
	and	a.cd_tributo = cd_tributo_pc
	and	a.ie_pago_prev = 'V'
	and	d.cd_tributo = a.cd_tributo
	and	b.ie_origem_titulo != '25' -- Se for de origem pagamento medico (HTML), entao nao considera, ja devia estar o tributo no proprio pagamento

	and not exists (	select	1
			from	pls_pp_base_acum_trib x
			where	x.nr_seq_vl_tit_trib = a.nr_sequencia)
	group by b.cd_pessoa_fisica, a.nr_sequencia, c.nr_seq_tipo_prestador;

c02 CURSOR(	cd_tributo_pc		tributo.cd_tributo%type,
		ie_vencimento_pc	text) FOR
	SELECT	b.cd_pessoa_fisica,
		a.nr_sequencia,
		c.nr_seq_tipo_prestador,
		max(a.vl_imposto) vl_imposto,
		max(a.vl_base_calculo) vl_base_calculo,
		max(b.vl_titulo) vl_titulo,
		trunc(max(d.dt_baixa), 'month') dt_base,
		max(b.cd_estabelecimento) cd_estabelecimento,
		max(a.vl_nao_retido) vl_nao_retido,
		max(a.vl_base_nao_retido) vl_base_nao_retido,
		max(a.vl_trib_adic) vl_trib_adic,
		max(a.vl_base_adic) vl_base_adic,
		max(b.nr_titulo) nr_titulo,
		max(c.nr_seq_prestador) nr_seq_prestador,
		obter_se_base_calculo(max(b.nr_titulo), 'TP') ie_base_calculo,
		max(e.ie_tipo_tributo) ie_tipo_tributo
	from	pls_pp_prestador_tmp c,
		titulo_pagar b,
		titulo_pagar_imposto a,
		titulo_pagar_baixa d,
		tributo e
	where	ie_vencimento_pc in ('R', 'B', 'S') -- por competencia, ira utilizar a data do lote
	and	c.ie_tipo_prestador = 'PF'
	and	b.cd_pessoa_fisica = c.cd_pessoa_fisica
	and	b.ie_situacao in ('A','L')
	and 	a.nr_titulo = b.nr_titulo
	and	a.cd_tributo = cd_tributo_pc
	and	a.ie_pago_prev = 'V'
	and	d.nr_sequencia = a.nr_seq_baixa
	and	d.nr_titulo = a.nr_titulo
	and	d.dt_baixa between c.dt_comp_ini_mes and c.dt_comp_fim_mes
	and	e.cd_tributo = a.cd_tributo
	and	b.ie_origem_titulo != '25' -- Se for de origem pagamento medico (HTML), entao nao considera, ja devia estar o tributo no proprio pagamento

	and not exists (	SELECT	1
			from	pls_pp_base_acum_trib x
			where	x.nr_seq_vl_tit_trib = a.nr_sequencia)
	group by b.cd_pessoa_fisica, a.nr_sequencia, c.nr_seq_tipo_prestador
	
union all

	select	b.cd_pessoa_fisica,
		a.nr_sequencia,
		c.nr_seq_tipo_prestador,
		max(a.vl_imposto) vl_imposto,
		max(a.vl_base_calculo) vl_base_calculo,
		max(b.vl_titulo) vl_titulo,
		trunc(max(d.dt_baixa), 'month') dt_base,
		max(b.cd_estabelecimento) cd_estabelecimento,
		max(a.vl_nao_retido) vl_nao_retido,
		max(a.vl_base_nao_retido) vl_base_nao_retido,
		max(a.vl_trib_adic) vl_trib_adic,
		max(a.vl_base_adic) vl_base_adic,
		max(b.nr_titulo) nr_titulo,
		max(c.nr_seq_prestador) nr_seq_prestador,
		obter_se_base_calculo(max(b.nr_titulo), 'TP') ie_base_calculo,
		max(e.ie_tipo_tributo) ie_tipo_tributo
	from	pls_pp_prestador_tmp c,
		titulo_pagar b,
		titulo_pagar_imposto a,
		titulo_pagar_baixa d,
		tributo e
	where	ie_vencimento_pc in ('V', 'C') -- por vencimento, ira utilizar a data de vencimento do prestador
	and	c.ie_tipo_prestador = 'PF'
	and	b.cd_pessoa_fisica = c.cd_pessoa_fisica
	and	b.ie_situacao in ('A','L')
	and 	a.nr_titulo = b.nr_titulo
	and	a.cd_tributo = cd_tributo_pc
	and	a.ie_pago_prev = 'V'
	and	d.nr_sequencia = a.nr_seq_baixa
	and	d.nr_titulo = a.nr_titulo
	and	d.dt_baixa between c.dt_venc_ini_mes and c.dt_venc_fim_mes
	and	e.cd_tributo = a.cd_tributo
	and	b.ie_origem_titulo != '25' -- Se for de origem pagamento medico (HTML), entao nao considera, ja devia estar o tributo no proprio pagamento

	and not exists (	select	1
			from	pls_pp_base_acum_trib x
			where	x.nr_seq_vl_tit_trib = a.nr_sequencia)
	group by b.cd_pessoa_fisica, a.nr_sequencia, c.nr_seq_tipo_prestador;

BEGIN

-- inicializa as variaveis

SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_tit_pag(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_vl_item_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_vl_nao_retido_w, tb_vl_base_nao_ret_w, tb_vl_trib_adic_w, tb_vl_base_adic_w, tb_nr_titulo_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_tributo_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_vl_item_w := _ora2pg_r.tb_vl_item_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_vl_nao_retido_w := _ora2pg_r.tb_vl_nao_retido_p; tb_vl_base_nao_ret_w := _ora2pg_r.tb_vl_base_nao_ret_p; tb_vl_trib_adic_w := _ora2pg_r.tb_vl_trib_adic_p; tb_vl_base_adic_w := _ora2pg_r.tb_vl_base_adic_p; tb_nr_titulo_w := _ora2pg_r.tb_nr_titulo_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_tributo_w := _ora2pg_r.tb_ie_tipo_tributo_p;

-- imposto gerado na baixa do titulo a pagar ou na emissao do titulo

if (ie_baixa_titulo_p = 'N') then

	-- abre o cursor com os registros que precisam ser verificados

	for r_c01_w in c01(cd_tributo_p, ie_vencimento_p) loop
	
		-- a funcao obter_se_base_calculo verifica se deve fazer parte da base de calculo,

		-- nela e verificada se esse valor nao e proveniente de outra origem, por exemplo:

		-- um valor de pagamento que esta no titulo a pagar

		if (r_c01_w.ie_base_calculo = 'S') then
			-- comeca como sendo valido

			ie_acumula_base_w := true;
			
			-- se for necessario restringir estabelecimento

			if (ie_rest_estab_p = 'S') then
			
				-- verifica se o estabelecimento e diferente

				-- se o estabelecimento for nulo, o registro nao e valido pois entendemos

				-- que se existe uma regra para estabelecimento ela deve ser respeitada e sempre devem existir valores

				if	((r_c01_w.cd_estabelecimento != cd_estabelecimento_p) or (coalesce(r_c01_w.cd_estabelecimento::text, '') = '')) then
					
					ie_acumula_base_w := false;
				end if;
			end if;
			
			-- se e para fazer parte da base de calculo

			if (ie_acumula_base_w) then

				tb_nr_sequencia_w(nr_cont_w) := r_c01_w.nr_sequencia;
				tb_vl_tributo_w(nr_cont_w) := r_c01_w.vl_imposto;
				tb_vl_base_calc_w(nr_cont_w) := r_c01_w.vl_base_calculo;
				tb_vl_item_w(nr_cont_w) := r_c01_w.vl_titulo;
				tb_cd_pf_w(nr_cont_w) := r_c01_w.cd_pessoa_fisica;
				tb_dt_comp_base_w(nr_cont_w) := r_c01_w.dt_base;
				tb_vl_nao_retido_w(nr_cont_w) := r_c01_w.vl_nao_retido;
				tb_vl_base_nao_ret_w(nr_cont_w) := r_c01_w.vl_base_nao_retido;
				tb_vl_trib_adic_w(nr_cont_w) := r_c01_w.vl_trib_adic;
				tb_vl_base_adic_w(nr_cont_w) := r_c01_w.vl_base_adic;
				tb_nr_titulo_w(nr_cont_w) := r_c01_w.nr_titulo;
				tb_nr_seq_tipo_prest_w(nr_cont_w) := r_c01_w.nr_seq_tipo_prestador;
				tb_nr_seq_prest_w(nr_cont_w) := r_c01_w.nr_seq_prestador;
				tb_ie_tipo_tributo_w(nr_cont_w) := r_c01_w.ie_tipo_tributo;
				
				-- se atingiu a quantidade manda pro banco

				if (nr_cont_w >= pls_util_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_tit_pag(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_vl_item_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_vl_nao_retido_w, tb_vl_base_nao_ret_w, tb_vl_trib_adic_w, tb_vl_base_adic_w, tb_nr_titulo_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_tributo_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_vl_item_w := _ora2pg_r.tb_vl_item_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_vl_nao_retido_w := _ora2pg_r.tb_vl_nao_retido_p; tb_vl_base_nao_ret_w := _ora2pg_r.tb_vl_base_nao_ret_p; tb_vl_trib_adic_w := _ora2pg_r.tb_vl_trib_adic_p; tb_vl_base_adic_w := _ora2pg_r.tb_vl_base_adic_p; tb_nr_titulo_w := _ora2pg_r.tb_nr_titulo_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_tributo_w := _ora2pg_r.tb_ie_tipo_tributo_p;
				else
					nr_cont_w := nr_cont_w + 1;
				end if;
			end if;
		end if;
	end loop;
else
	
	-- abre o cursor com os registros que precisam ser verificados

	for r_c02_w in c02(cd_tributo_p, ie_vencimento_p) loop

		-- a funcao obter_se_base_calculo verifica se deve fazer parte da base de calculo,

		-- nela e verificada se esse valor nao e proveniente de outra origem, por exemplo:

		-- um valor de pagamento que esta no titulo a pagar

		if (r_c02_w.ie_base_calculo = 'S') then
		
			-- comeca como sendo valido

			ie_acumula_base_w := true;
			
			-- se for necessario restringir estabelecimento			

			if (ie_rest_estab_p = 'S') then
			
				-- verifica se o estabelecimento e diferente

				-- se o estabelecimento for nulo, o registro nao e valido pois entendemos

				-- que se existe uma regra para estabelecimento ela deve ser respeitada e sempre devem existir valores

				if	((r_c02_w.cd_estabelecimento != cd_estabelecimento_p) or (coalesce(r_c02_w.cd_estabelecimento::text, '') = '')) then
					
					ie_acumula_base_w := false;
				end if;
			end if;
			
			-- se e para fazer parte da base de calculo

			if (ie_acumula_base_w) then

				tb_nr_sequencia_w(nr_cont_w) := r_c02_w.nr_sequencia;
				tb_vl_tributo_w(nr_cont_w) := r_c02_w.vl_imposto;
				tb_vl_base_calc_w(nr_cont_w) := r_c02_w.vl_base_calculo;
				tb_vl_item_w(nr_cont_w) := r_c02_w.vl_titulo;
				tb_cd_pf_w(nr_cont_w) := r_c02_w.cd_pessoa_fisica;
				tb_dt_comp_base_w(nr_cont_w) := r_c02_w.dt_base;
				tb_vl_nao_retido_w(nr_cont_w) := r_c02_w.vl_nao_retido;
				tb_vl_base_nao_ret_w(nr_cont_w) := r_c02_w.vl_base_nao_retido;
				tb_vl_trib_adic_w(nr_cont_w) := r_c02_w.vl_trib_adic;
				tb_vl_base_adic_w(nr_cont_w) := r_c02_w.vl_base_adic;
				tb_nr_titulo_w(nr_cont_w) := r_c02_w.nr_titulo;
				tb_nr_seq_tipo_prest_w(nr_cont_w) := r_c02_w.nr_seq_tipo_prestador;
				tb_nr_seq_prest_w(nr_cont_w) := r_c02_w.nr_seq_prestador;
				tb_ie_tipo_tributo_w(nr_cont_w) := r_c02_w.ie_tipo_tributo;
				
				-- se atingiu a quantidade manda pro banco

				if (nr_cont_w >= pls_util_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_tit_pag(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_vl_item_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_vl_nao_retido_w, tb_vl_base_nao_ret_w, tb_vl_trib_adic_w, tb_vl_base_adic_w, tb_nr_titulo_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_tributo_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_vl_item_w := _ora2pg_r.tb_vl_item_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_vl_nao_retido_w := _ora2pg_r.tb_vl_nao_retido_p; tb_vl_base_nao_ret_w := _ora2pg_r.tb_vl_base_nao_ret_p; tb_vl_trib_adic_w := _ora2pg_r.tb_vl_trib_adic_p; tb_vl_base_adic_w := _ora2pg_r.tb_vl_base_adic_p; tb_nr_titulo_w := _ora2pg_r.tb_nr_titulo_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_tributo_w := _ora2pg_r.tb_ie_tipo_tributo_p;
				else
					nr_cont_w := nr_cont_w + 1;
				end if;
			end if;
		end if;
	end loop;
end if;

-- se sobrou algo manda pro banco

SELECT * FROM pls_pp_tributacao_pck.alimenta_pp_base_acum_tit_pag(	nr_cont_w, tb_nr_sequencia_w, tb_vl_tributo_w, tb_vl_base_calc_w, tb_vl_item_w, tb_cd_pf_w, tb_dt_comp_base_w, tb_vl_nao_retido_w, tb_vl_base_nao_ret_w, tb_vl_trib_adic_w, tb_vl_base_adic_w, tb_nr_titulo_w, tb_nr_seq_tipo_prest_w, tb_nr_seq_prest_w, tb_ie_tipo_tributo_w, nr_seq_lote_p, cd_tributo_p, nm_usuario_p) INTO STRICT _ora2pg_r;
 	nr_cont_w := _ora2pg_r.nr_cont_p; tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_vl_tributo_w := _ora2pg_r.tb_vl_tributo_p; tb_vl_base_calc_w := _ora2pg_r.tb_vl_base_calc_p; tb_vl_item_w := _ora2pg_r.tb_vl_item_p; tb_cd_pf_w := _ora2pg_r.tb_cd_pf_p; tb_dt_comp_base_w := _ora2pg_r.tb_dt_comp_base_p; tb_vl_nao_retido_w := _ora2pg_r.tb_vl_nao_retido_p; tb_vl_base_nao_ret_w := _ora2pg_r.tb_vl_base_nao_ret_p; tb_vl_trib_adic_w := _ora2pg_r.tb_vl_trib_adic_p; tb_vl_base_adic_w := _ora2pg_r.tb_vl_base_adic_p; tb_nr_titulo_w := _ora2pg_r.tb_nr_titulo_p; tb_nr_seq_tipo_prest_w := _ora2pg_r.tb_nr_seq_tipo_prest_p; tb_nr_seq_prest_w := _ora2pg_r.tb_nr_seq_prest_p; tb_ie_tipo_tributo_w := _ora2pg_r.tb_ie_tipo_tributo_p;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_tributacao_pck.gera_base_acum_tit_pagar_imp ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_tributo_p tributo.cd_tributo%type, ie_rest_estab_p tributo.ie_restringe_estab%type, ie_vencimento_p tributo.ie_vencimento%type, ie_baixa_titulo_p tributo.ie_baixa_titulo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
