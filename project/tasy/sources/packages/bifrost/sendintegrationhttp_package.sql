-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION bifrost.sendintegrationhttp ( direct boolean, eventName text, javaClass text, content text, synchronous char, userName text, usesTasyBackend char, headers text ) RETURNS text AS $body$
DECLARE

    activated varchar(1) := 'N';
    tasyHost varchar(1024);
    contentConverted text;
    request utl_http.req;
    response utl_http.resp;
    bifrostMessageId varchar(50) := null;
    resultBuffer text;
    resultValue text := 'NACK';
    errorMessage varchar(4000) := null;
    tenantId varchar(1024);
    tenantToken varchar(5000);

BEGIN

    activated := obter_valor_param_usuario(9041, 10, 0, coalesce(wheb_usuario_pck.get_nm_usuario, userName), wheb_usuario_pck.get_cd_estabelecimento);
    if activated = 'S' then

        tasyHost := bifrost.gettasyhost(userName, usesTasyBackend);

        if (tasyHost IS NOT NULL AND tasyHost::text <> '') then							

			begin	

				contentConverted := bifrost.convertcontent(content);

				if direct then
					request := utl_http.begin_request(tasyHost || '/resources/integration/event/direct?event=' || eventName || chr(38) || 'sync=' || synchronous, 'POST','HTTP/1.1');
				else
					request := utl_http.begin_request(tasyHost || '/resources/integration/event?event=' || eventName || chr(38) || 'class=' || javaClass || chr(38) || 'sync=' || synchronous, 'POST','HTTP/1.1');
				end if;


				utl_http.set_transfer_timeout(5);
				utl_http.set_header(request, 'content-type', 'application/json; charset=iso-8859-1');
				utl_http.set_header(request, 'content-length', octet_length(contentConverted));

				-- If there is a tenant ID, send it in headers
				tenantId := bifrost.gettenantid();
				if (tenantId IS NOT NULL AND tenantId::text <> '') then
					utl_http.set_header(request, 'philips.tenant.id', tenantId);
				end if;

				-- If there is a tenant Token Authorization, send it in headers					
				tenantToken := bifrost.gettenanttoken();
				if (tenantToken IS NOT NULL AND tenantToken::text <> '') then
					utl_http.set_header(request, 'Authorization', 'Bearer ' || tenantToken);
				end if;					

				utl_http.write_text(request, contentConverted);

				response := utl_http.get_response(request);

				bifrostMessageId := bifrost.getbifrostmessageid(response);

				begin
					loop
						utl_http.read_line(response, resultBuffer, true);
						resultValue := resultValue || resultBuffer;
					end loop;
					utl_http.end_response(response);
				exception
					when utl_http.end_of_body then
						utl_http.end_response(response);
				end;

			exception
				when others then
					errorMessage := substr(SQLSTATE || ' ' || sqlerrm, 1, 4000);
					begin
						utl_http.end_request(request);
					exception
						when others then
							errorMessage := substr(errorMessage || chr(10) || '----------------' || chr(10) || SQLSTATE || ' ' || sqlerrm, 1, 4000);
					end;
			end;

			CALL CALL bifrost.logmessage(bifrostMessageId, eventName, javaClass, content, resultValue, userName, errorMessage);

		end if;
    end if;

    return resultValue;

END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON FUNCTION bifrost.sendintegrationhttp ( direct boolean, eventName text, javaClass text, content text, synchronous char, userName text, usesTasyBackend char, headers text ) FROM PUBLIC;
