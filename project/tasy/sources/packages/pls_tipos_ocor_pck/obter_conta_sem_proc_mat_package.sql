-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_tipos_ocor_pck.obter_conta_sem_proc_mat ( nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_incidencia_p text) RETURNS varchar AS $body$
DECLARE

ds_retorno_w		varchar(1);
ds_sql_w		varchar(2000);
valor_bind_p		sql_pck.t_dado_bind;
cursor_w		sql_pck.t_cursor;
qt_conta_sem_proc_mat_w	integer;

BEGIN

ds_sql_w :=	'select	count(1) ' || pls_util_pck.enter_w ||
		'from	pls_conta_ocor_v conta' || pls_util_pck.enter_w ||
		'where	1 = 1' || pls_util_pck.enter_w;

-- Se for para filtrar por estabelecimento sera verificado o estabelecimento do protocolo apenas.

if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and 	conta.cd_estabelecimento = :cd_estabelecimento';
	valor_bind_p := sql_pck.bind_variable(	':cd_estabelecimento', cd_estabelecimento_p, valor_bind_p);
end if;

-- Se houver numero do lote informado buscar os protocolos do lote.

if (nr_seq_lote_conta_p IS NOT NULL AND nr_seq_lote_conta_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and	conta.nr_seq_lote_conta = :nr_seq_lote_conta';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_lote_conta', nr_seq_lote_conta_p, valor_bind_p);
end if;

-- Se houver protocolo informado buscar apenas aquele protocolo.

if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and	conta.nr_seq_protocolo = :nr_seq_protocolo';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_protocolo', nr_seq_protocolo_p, valor_bind_p);
end if;

-- Se for infromado o lote da funcao OPS - Producao - Processo contas medicas entao busca apenas as contas que estiverem no lote.

if (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and     exists (select 1 ' || pls_util_pck.enter_w ||
			'		 from   pls_cta_lote_proc_conta processo ' || pls_util_pck.enter_w ||
			'		 where  processo.nr_seq_lote_processo = :nr_seq_lote_processo ' || pls_util_pck.enter_w ||
			'		 and    processo.nr_seq_conta = conta.nr_sequencia)';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_lote_processo', nr_seq_lote_processo_p, valor_bind_p);
end if;

-- Se houver conta informada so ira consistir a conta e seus itens.

if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and	conta.nr_sequencia = :nr_seq_conta';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta', nr_seq_conta_p, valor_bind_p);
end if;

-- se for T, verifica se tem alguma conta sem proc e sem mat

-- caso contrario, verifica de acordo com o proc ou o mat

if (ie_incidencia_p != 'T') then
	-- Se for informado o procedimento entao ira consistir somente aquele procedimento. Comum nos itens da analise durante a execucao de acoes como aceite ou ajuste de valores.

	if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then


		ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
				'and	exists (select	1 ' || pls_util_pck.enter_w ||
				'		from	pls_conta_proc_ocor_v procx ' || pls_util_pck.enter_w ||
				'		where	procx.nr_sequencia = :nr_seq_conta_proc ' || pls_util_pck.enter_w ||
				'		and	procx.nr_seq_conta = conta.nr_sequencia)';

		valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta_proc', nr_seq_conta_proc_p, valor_bind_p);
	else
		-- se for incidencia de procedimento tem que ver se tem conta sem proc

		if (ie_incidencia_p = 'P') then
			ds_sql_w := 	ds_sql_w || pls_util_pck.enter_w ||
					'and not exists (select	1' || pls_util_pck.enter_w ||
					'	 	from	pls_conta_proc procx' || pls_util_pck.enter_w ||
					'	 	where	procx.nr_seq_conta = conta.nr_sequencia' || pls_util_pck.enter_w ||
					'		and   	procx.ie_status in (''A'', ''C'', ''L'', ''P'', ''S'', ''U''))';
		end if;
	end if;


	-- Se for informado o material entao ira consistir somente aquele material. Comum nos itens da analise durante a execucao de acoes como aceite ou ajuste de valores.

	if (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then

		ds_sql_w := 	ds_sql_w || pls_util_pck.enter_w ||
				'and	exists (select	1 ' || pls_util_pck.enter_w ||
				'		from	pls_conta_mat_ocor_v matx ' || pls_util_pck.enter_w ||
				'		where	matx.nr_sequencia = :nr_seq_conta_mat ' || pls_util_pck.enter_w ||
				'		and	matx.nr_seq_conta = conta.nr_sequencia)';

		valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta_mat', nr_seq_conta_mat_p, valor_bind_p);
	else
		-- se for incidencia de material tem que ver se tem conta sem mat

		if (ie_incidencia_p = 'M') then
			ds_sql_w := 	ds_sql_w || pls_util_pck.enter_w ||
					'and not exists (select	1' || pls_util_pck.enter_w ||
					'	 	from	pls_conta_mat matx' || pls_util_pck.enter_w ||
					'	 	where	matx.nr_seq_conta = conta.nr_sequencia' || pls_util_pck.enter_w ||
					'		and   	matx.ie_status in (''A'', ''C'', ''L'', ''P'', ''S'', ''U''))';
		end if;
	end if;
else
	-- nao tem proc e nem mat

	ds_sql_w := 	ds_sql_w || pls_util_pck.enter_w ||
			'and not exists (select	1' || pls_util_pck.enter_w ||
			'	 	 from	pls_conta_proc procx' || pls_util_pck.enter_w ||
			'	 	 where	procx.nr_seq_conta = conta.nr_sequencia' || pls_util_pck.enter_w ||
			'		 and   	procx.ie_status in (''A'', ''C'', ''L'', ''P'', ''S'', ''U''))' || pls_util_pck.enter_w ||
			'and not exists	(select	1' || pls_util_pck.enter_w ||
			'	 	 from	pls_conta_mat matx' || pls_util_pck.enter_w ||
			'	 	 where	matx.nr_seq_conta = conta.nr_sequencia' || pls_util_pck.enter_w ||
			'		 and   	matx.ie_status in (''A'', ''C'', ''L'', ''P'', ''S'', ''U''))';
end if;

-- Se houver analise informada so ira consistir a analise e seus itens.

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') then
	ds_sql_w :=	ds_sql_w || pls_util_pck.enter_w ||
			'and	conta.nr_seq_analise = :nr_seq_analise';
	valor_bind_p := sql_pck.bind_variable(	':nr_seq_analise', nr_seq_analise_p, valor_bind_p);
end if;

-- busca o registro

valor_bind_p := sql_pck.executa_sql_cursor(	ds_sql_w, valor_bind_p);

loop
	fetch 	cursor_w
	into 	qt_conta_sem_proc_mat_w;
	EXIT WHEN NOT FOUND; /* apply on cursor_w */
end loop;
close cursor_w;

if (qt_conta_sem_proc_mat_w > 0) then
	ds_retorno_w := 'S';
else
	ds_retorno_w := 'N';
end if;

return ds_retorno_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_tipos_ocor_pck.obter_conta_sem_proc_mat ( nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_incidencia_p text) FROM PUBLIC;
