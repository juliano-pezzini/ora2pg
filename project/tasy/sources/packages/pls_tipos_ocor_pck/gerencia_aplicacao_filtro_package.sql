-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_tipos_ocor_pck.gerencia_aplicacao_filtro ( dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gravar em uma tabela as contas/itens que se apliquem nos combinacoes de filtros
de ocorrencias. Tambem gerencia a insercao de todos os registros necessarios quando nao for
utilizada uma configuracao de filtro.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
Nao deve ser mudada a sequencia de aplicacao dos filtros, pois a mesma precisa seguir a
granularidade dos dados.

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


qt_filtro_processado_w		integer;
ie_considera_tab_selecao_w	boolean;
dados_filtro_w			pls_tipos_ocor_pck.dados_filtro;
ie_processa_regra_w		varchar(1);

-- Dados da PLS_OC_CTA_FILTRO, responsavel por armazenar os dados dos filtros criados pelo usuario.

-- o order by serve para trazer os filtros de excecao para o final e priorizar para ser executado os que sao a nivel de conta antes

-- e feito isso porque mais abaixo existe um controle de performance que deixa de executar os filtros caso todos estejam invalidos

c_comb_filtro CURSOR(	nr_seq_regra_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.nm_filtro,
		a.ie_filtro_conta,
		a.ie_filtro_proc,
		a.ie_filtro_mat,
		a.ie_filtro_benef,
		a.ie_filtro_prest,
		a.ie_filtro_interc,
		a.ie_filtro_contrato,
		a.ie_filtro_produto,
		a.ie_filtro_prof,
		a.ie_excecao,
		a.ie_filtro_protocolo,
		a.ie_valida_todo_atend,
		a.ie_filtro_oper_benef,
		coalesce(a.ie_valida_conta_princ, 'N') ie_valida_conta_princ
	from	pls_oc_cta_filtro a
	where	a.nr_seq_oc_cta_comb	= nr_seq_regra_pc
	and	a.ie_situacao	= 'A'
	order by a.ie_excecao,
		 a.ie_filtro_proc,
		 a.ie_filtro_mat;
BEGIN

if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	

	-- se for uma regra que nao utiliza filtros

	if (dados_regra_p.ie_utiliza_filtro = 'N' and dados_regra_p.ie_validacao <> 1) then

		-- se for excecao independente do tipo, alimenta

		if (dados_regra_p.ie_excecao = 'S') then
			dados_filtro_w.ie_processo_excecao := 'S';
		else
			dados_filtro_w.ie_processo_excecao := 'N';
		end if;

		-- filtro padrao nao precisa ser processado em regras de excecao

		if (dados_regra_p.ie_excecao = 'N') then
			-- insere todos os registros necessarios na tabela de selecao de acordo com os "grandes filtros" (lote analise, protocolo, lote processamento, conta, etc.)

			CALL CALL pls_tipos_ocor_pck.aplica_filtro_padrao( 	dados_consistencia_p, dados_regra_p, dados_forma_geracao_ocor_p,
						dados_filtro_w, nr_id_transacao_p, cd_estabelecimento_p,
						nm_usuario_p);
		else
			-- quando e regra de excecao precisa processar os filtros da regra, como por exemplo, data de vigencia

			-- essa rotina apenas retira fora os itens que nao fazem parte da regra, ou melhor, que nao casam com ela

			CALL pls_tipos_ocor_pck.aplica_filtro_regra(	dados_regra_p, nr_id_transacao_p, nm_usuario_p);
		end if;
	else
		qt_filtro_processado_w := 0;

		for r_c_comb_filtro in c_comb_filtro(dados_regra_p.nr_sequencia) loop

			-- Atualizar os dados do filtro na variavel para passar todos os dados as outras rotinas

			dados_filtro_w.nr_sequencia		:= r_c_comb_filtro.nr_sequencia;
			dados_filtro_w.nm_filtro		:= r_c_comb_filtro.nm_filtro;
			dados_filtro_w.ie_filtro_conta		:= r_c_comb_filtro.ie_filtro_conta;
			dados_filtro_w.ie_filtro_proc		:= r_c_comb_filtro.ie_filtro_proc;
			dados_filtro_w.ie_filtro_mat		:= r_c_comb_filtro.ie_filtro_mat;
			dados_filtro_w.ie_filtro_benef		:= r_c_comb_filtro.ie_filtro_benef;
			dados_filtro_w.ie_filtro_prest		:= r_c_comb_filtro.ie_filtro_prest;
			dados_filtro_w.ie_filtro_interc		:= r_c_comb_filtro.ie_filtro_interc;
			dados_filtro_w.ie_filtro_contrato	:= r_c_comb_filtro.ie_filtro_contrato;
			dados_filtro_w.ie_filtro_produto	:= r_c_comb_filtro.ie_filtro_produto;
			dados_filtro_w.ie_filtro_prof		:= r_c_comb_filtro.ie_filtro_prof;
			dados_filtro_w.ie_excecao		:= r_c_comb_filtro.ie_excecao;
			dados_filtro_w.ie_filtro_protocolo	:= r_c_comb_filtro.ie_filtro_protocolo;
			dados_filtro_w.ie_valida_todo_atend	:= r_c_comb_filtro.ie_valida_todo_atend;
			dados_filtro_w.ie_filtro_oper_benef	:= r_c_comb_filtro.ie_filtro_oper_benef;
			dados_filtro_w.ie_valida_conta_princ	:= r_c_comb_filtro.ie_valida_conta_princ;

			-- alimenta a incidencia do filtro

			if (dados_filtro_w.ie_filtro_proc = 'S') then
				dados_filtro_w.ie_incidencia_selecao := 'P';
			elsif (dados_filtro_w.ie_filtro_mat = 'S') then
				dados_filtro_w.ie_incidencia_selecao := 'M';
			else
				dados_filtro_w.ie_incidencia_selecao := 'C';
			end if;

			-- se for excecao independente do tipo, alimenta

			if (dados_regra_p.ie_excecao = 'S' or r_c_comb_filtro.ie_excecao = 'S') then
				dados_filtro_w.ie_processo_excecao := 'S';
			else
				dados_filtro_w.ie_processo_excecao := 'N';
			end if;

			-- faz uma verificacao se existe a necessidade de processar a regra de filtro

			-- o objetivo e melhorar a performance nao processando filtros que nao irao alterar nada da tabela de selecao

			ie_processa_regra_w := pls_tipos_ocor_pck.obter_se_processa_filtro(	dados_consistencia_p,
										dados_regra_p,
										dados_forma_geracao_ocor_p,
										dados_filtro_w,
										nr_id_transacao_p,
										qt_filtro_processado_w,
										cd_estabelecimento_p,
										nm_usuario_p);

			
										
			-- para de validar os filtros

			if (ie_processa_regra_w = 'Z') then
				exit;
			-- se for necessario processar a regra entao processa

			elsif (ie_processa_regra_w = 'S') then

				-- faz a devida alimentacao dos campos de acordo com o tipo de regra para realizar o correto processamento dos filtros

				CALL CALL CALL CALL CALL pls_tipos_ocor_pck.prepara_reg_proces_filtro(	nr_id_transacao_p,
								dados_regra_p,
								dados_filtro_w);

				/*
				Verificar cada checkbox da combinacao de filtros, para filtrar cada tipo.
				Para executar a verificacao dos filtros deve ser respeitada a ordem de aplicacao dos mesmos, passando do nivel mais alto
				para o nivel mais baixo, comecando do Protocolo para as contas, das contas para os itens, para que os filtros
				respeitem os outros filtros cadastrados.  Isto evita  casos em que a conta nao atende aos filtros e a ocorrencia e lancada para os itens.
				Alem disto este conceito ajuda no quesito de performance da aplicacao de filtros, por exemplo, o filtro por protocolo deve ser aplicado
				primeiro, pois se o protocolo nao atender ao cadastro do filtro entao nem busca as contas do mesmo, assim para as contas, os itens,
				participantes e assim por diante. */


				-- se for regras boas e filtros bons

				if	(dados_regra_p.ie_excecao = 'N' AND dados_filtro_w.ie_excecao = 'N') then
					-- para cada novo filtro nao considera o que tem na tabela de selecao

					-- pois cada filtro bom influencia somente o que for inserido por ele

					ie_considera_tab_selecao_w := false;
				else
					-- se for excecao sempre deve considerar a tabela de selecao

					ie_considera_tab_selecao_w := true;
				end if;

				-- Para o filtro de excecao que  utiliza a opcao "Valida conta principal", somente deve-se verificar se a conta

				-- avaliada e considerada a principal, neste caso os demais filtro nao se aplicam.

				if	(dados_filtro_w.ie_valida_conta_princ = 'S' AND dados_filtro_w.ie_excecao = 'S') then
					-- preenche a tabela de excecoes, respeitando a opcao "valida conta principal"

					CALL pls_tipos_ocor_pck.gerencia_aplic_filtro_ex_atend(	nr_id_transacao_p, dados_filtro_w,
									dados_regra_p, nm_usuario_p,
									cd_estabelecimento_p);
				else

				
				
					-- filtro de Protocolo

					if (dados_filtro_w.ie_filtro_protocolo = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_protocolo(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;
					
					-- filtro de conta

					if (dados_filtro_w.ie_filtro_conta = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_conta(		ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- Prestador

					if (dados_filtro_w.ie_filtro_prest = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_prestador(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- Profissional

					if (dados_filtro_w.ie_filtro_prof = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_profissional(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- contrato

					if (dados_filtro_w.ie_filtro_contrato = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_contrato(	ie_considera_tab_selecao_w, dados_regra_p,
									dados_filtro_w, dados_consistencia_p,
									dados_forma_geracao_ocor_p, nr_id_transacao_p,
									cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- produto

					if (dados_filtro_w.ie_filtro_produto = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_produto(	ie_considera_tab_selecao_w, dados_regra_p,
									dados_filtro_w, dados_consistencia_p,
									dados_forma_geracao_ocor_p, nr_id_transacao_p,
									cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- Intercambio

					if (dados_filtro_w.ie_filtro_interc = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_intercambio(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					-- beneficiario

					if (dados_filtro_w.ie_filtro_benef = 'S') then
						CALL CALL pls_tipos_ocor_pck.aplica_filtro_beneficiario(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					--filtroOperadora

					if (dados_filtro_w.ie_filtro_oper_benef = 'S') then
						CALL pls_tipos_ocor_pck.aplica_filtro_operadora(	ie_considera_tab_selecao_w, dados_regra_p,
										dados_filtro_w, dados_consistencia_p,
										dados_forma_geracao_ocor_p, nr_id_transacao_p,
										cd_estabelecimento_p, nm_usuario_p);
						ie_considera_tab_selecao_w := true;
					end if;

					
					
					-- so vai processar para regras que sejam para contas que tem itens, se a conta nao tem item nao faz sentido processar proc e mat

					if (dados_regra_p.ie_conta_sem_item = 'N') then

					
						
						-- procedimento

						if (dados_filtro_w.ie_filtro_proc = 'S')  then
							CALL CALL pls_tipos_ocor_pck.aplica_filtro_procedimento(	ie_considera_tab_selecao_w, dados_regra_p,
											dados_filtro_w, dados_consistencia_p,
											dados_forma_geracao_ocor_p, nr_id_transacao_p,
											cd_estabelecimento_p, nm_usuario_p);
							ie_considera_tab_selecao_w := true;
						end if;

						-- material

						if (dados_filtro_w.ie_filtro_mat = 'S')  then
							CALL CALL pls_tipos_ocor_pck.aplica_filtro_material(		ie_considera_tab_selecao_w, dados_regra_p,
											dados_filtro_w, dados_consistencia_p,
											dados_forma_geracao_ocor_p, nr_id_transacao_p,
											cd_estabelecimento_p, nm_usuario_p);
							ie_considera_tab_selecao_w := true;
						end if;
					end if;

					-- Atualizar o campo definitivo que sera utilizado para sinalizar os registros que foram processados

					CALL CALL CALL CALL CALL pls_tipos_ocor_pck.atualiza_campo_valido(	'F', nr_id_transacao_p, dados_filtro_w, dados_regra_p, 'F');

					-- processa novamente o filtro de excecao para todo o atendimento

					CALL pls_tipos_ocor_pck.gerencia_aplic_filtro_ex_atend(	nr_id_transacao_p, dados_filtro_w,
									dados_regra_p, nm_usuario_p,
									cd_estabelecimento_p);
				end if;

				-- seta N para todos os campos auxiliares por uma questao de seguranca para manter os registros integros

				CALL CALL pls_tipos_ocor_pck.reinicializa_campos_ie_valido(nr_id_transacao_p);
			end if;

			qt_filtro_processado_w := qt_filtro_processado_w + 1;
		end loop; -- loop combinacoes
		-- faz as finalizacoes do processamento dos filtros

		CALL CALL pls_tipos_ocor_pck.finaliza_processo_filtro(nr_id_transacao_p);
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tipos_ocor_pck.gerencia_aplicacao_filtro ( dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
