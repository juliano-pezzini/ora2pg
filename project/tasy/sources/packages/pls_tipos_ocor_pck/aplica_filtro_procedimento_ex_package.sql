-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_tipos_ocor_pck.aplica_filtro_procedimento_ex ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_ex_p pls_selecao_ex_ocor_cta.nr_id_transacao%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	gerencia a aplicacao do filtro de procedimento para todo atendimento em filtro de
	excecao.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
Nao incluir restricoes nessa procedure, ela e responsavel apenas  por passar no cursor
dos filtros e incluir na selecao das contas que devem ter a ocorrencia gerada.

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


tb_seq_selecao_w	pls_util_cta_pck.t_number_table;

dados_filtro_proc_w	pls_tipos_ocor_pck.dados_filtro_proc;
ds_select_w		varchar(8000);
valor_bind_w		sql_pck.t_dado_bind;
dados_restricao_w	pls_tipos_ocor_pck.dados_select;
cursor_w		sql_pck.t_cursor;

c_filtro CURSOR(	nr_seq_filtro_pc	pls_oc_cta_filtro.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_estrutura,
		a.nr_seq_grupo_servico,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.ie_feriado,
		a.dt_dia_semana,
		a.hr_inicial,
		a.hr_final,
		a.ie_tipo_feriado,
		a.ie_tipo_data,
		a.ie_consistencia_valor,
		a.ie_tipo_desp_proc,
		a.vl_max_item,
		a.vl_minimo_item,
		a.nr_seq_grupo_rec,
		a.ie_via_acesso,
		CASE WHEN a.ie_via_acesso='U' THEN  1 WHEN a.ie_via_acesso='M' THEN  2 WHEN a.ie_via_acesso='D' THEN  3 END  ie_via_acesso_imp,
		a.ie_prestador_alto_custo,
		--Feito tratamento com nvl pois modificamos a forma de cadastrar as regras e nao fizemos um BACA por motivos de seguranca

		--Sendo assim, cadastros antigos terao os dados gravados dentro dos campos que nao sao IMP e os novos terao dados nos campos IMP para o caso de importacao XML

		coalesce(a.vl_max_item_imp,a.vl_max_item) vl_max_item_imp,
		coalesce(a.vl_minimo_item_imp,a.vl_minimo_item) vl_minimo_item_imp,
		a.id_pacote_ptu,
		a.tp_rede_min,
		a.ie_acres_urg_emer
	from	pls_oc_cta_filtro_proc a
	where	a.nr_seq_oc_cta_filtro	= nr_seq_filtro_pc
	and	a.ie_situacao = 'A';

BEGIN

-- Se nao tiver informacoes do filtro nao sera possivel executar os filtros.

if (dados_filtro_p.nr_sequencia IS NOT NULL AND dados_filtro_p.nr_sequencia::text <> '') then

	-- Atualizar o campo auxiliar que sera utilizado para sinalizar os registros que foram processados

	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar_ex(nr_id_transacao_ex_p);

	-- Abrir cursor com todas as combinacoes de filtro da regra

	for r_c_filtro in c_filtro(dados_filtro_p.nr_sequencia) loop

		-- Preencher dados do filtro para passar como parametro

		dados_filtro_proc_w.nr_sequencia		:= r_c_filtro.nr_sequencia;
		dados_filtro_proc_w.nr_seq_estrutura		:= r_c_filtro.nr_seq_estrutura;
		dados_filtro_proc_w.nr_seq_grupo_servico	:= r_c_filtro.nr_seq_grupo_servico;
		dados_filtro_proc_w.cd_procedimento		:= r_c_filtro.cd_procedimento;
		dados_filtro_proc_w.ie_origem_proced		:= r_c_filtro.ie_origem_proced;
		dados_filtro_proc_w.cd_area_procedimento	:= r_c_filtro.cd_area_procedimento;
		dados_filtro_proc_w.cd_especialidade		:= r_c_filtro.cd_especialidade;
		dados_filtro_proc_w.cd_grupo_proc		:= r_c_filtro.cd_grupo_proc;
		dados_filtro_proc_w.ie_feriado			:= r_c_filtro.ie_feriado;
		dados_filtro_proc_w.dt_dia_semana		:= r_c_filtro.dt_dia_semana;
		dados_filtro_proc_w.hr_inicial			:= r_c_filtro.hr_inicial;
		dados_filtro_proc_w.hr_final			:= r_c_filtro.hr_final;
		dados_filtro_proc_w.ie_tipo_feriado		:= r_c_filtro.ie_tipo_feriado;
		dados_filtro_proc_w.ie_tipo_data		:= r_c_filtro.ie_tipo_data;
		dados_filtro_proc_w.ie_consistencia_valor	:= r_c_filtro.ie_consistencia_valor;
		dados_filtro_proc_w.ie_tipo_desp_proc		:= r_c_filtro.ie_tipo_desp_proc;
		dados_filtro_proc_w.nr_seq_grupo_rec		:= r_c_filtro.nr_seq_grupo_rec;
		dados_filtro_proc_w.ie_via_acesso		:= r_c_filtro.ie_via_acesso;
		dados_filtro_proc_w.ie_via_acesso_imp		:= r_c_filtro.ie_via_acesso_imp;
		dados_filtro_proc_w.ie_prestador_alto_custo	:= r_c_filtro.ie_prestador_alto_custo;
		dados_filtro_proc_w.id_pacote_ptu		:= r_c_filtro.id_pacote_ptu;
		dados_filtro_proc_w.tp_rede_min			:= r_c_filtro.tp_rede_min;
		dados_filtro_proc_w.ie_acres_urg_emer  := r_c_filtro.ie_acres_urg_emer;

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_filtro_proc_w.vl_max_item			:= r_c_filtro.vl_max_item_imp;
			dados_filtro_proc_w.vl_minimo_item		:= r_c_filtro.vl_minimo_item_imp;
		else
			dados_filtro_proc_w.vl_max_item			:= r_c_filtro.vl_max_item;
			dados_filtro_proc_w.vl_minimo_item		:= r_c_filtro.vl_minimo_item;
		end if;

		begin
			-- restricao para todas as outras situacoes

			valor_bind_w := pls_tipos_ocor_pck.obter_restricao_procedimento(	dados_regra_p, dados_filtro_p, dados_filtro_proc_w, null, valor_bind_w);

			-- Montar o select padrao juntamente as restricoes.

			valor_bind_w := pls_tipos_ocor_pck.obter_select_filtro_ex(	dados_filtro_p, dados_restricao_w, nr_id_transacao_ex_p, valor_bind_w);

			-- executa o comando sql com os respectivos binds

			valor_bind_w := sql_pck.executa_sql_cursor(	ds_select_w, valor_bind_w);

			loop
				fetch cursor_w bulk collect into tb_seq_selecao_w
				limit pls_util_pck.qt_registro_transacao_w;
				exit when tb_seq_selecao_w.count = 0;

				-- Insere todos os registros das listas na tabela de selecao

				CALL pls_tipos_ocor_pck.gerencia_selecao_filtro_ex(	tb_seq_selecao_w, 'S', nm_usuario_p);

			end loop;
			close cursor_w;

		exception
			when others then

			if (cursor_w%isopen) then
				close cursor_w;
			end if;

			-- Tratar erro gerado no sql dinamico, sera inserido registro no log e abortado o processo exibindo mensagem de erro.

			CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(	dados_regra_p, ds_select_w,
									null, nm_usuario_p);
		end;

	end loop; -- filtro

	-- Atualizar o campo definitivo que sera utilizado para sinalizar os registros que foram processados

	CALL pls_tipos_ocor_pck.atualiza_campo_valido_ex(nr_id_transacao_ex_p);
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tipos_ocor_pck.aplica_filtro_procedimento_ex ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_ex_p pls_selecao_ex_ocor_cta.nr_id_transacao%type) FROM PUBLIC;
