-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_tipos_ocor_pck.obter_restricao_regra ( dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, ie_incidencia_regra_p text, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, ie_conta_sem_item_p text, bind_sql_valor_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Retornar as restricoes e campos adicionais do select inicial da rotina de
 ocorrencias combinadas. O select mencionado e responsavel pela leitura de todas as regras
 que devem ser processadas.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_restricao_excecao_w	varchar(1000);
dados_retorno_w		pls_tipos_ocor_pck.dados_sql_regra_ocor;
ie_excecao_w		varchar(1);
qt_ocor_w		integer;
ie_ocorrencia_w		pls_controle_estab.ie_ocorrencia%type := pls_obter_se_controle_estab('GO');

BEGIN

dados_retorno_w.ds_restricao := null;
dados_retorno_w.ds_tabelas := null;
dados_retorno_w.ds_campos := null;


-- tratamento para nao buscar a incidencia da selecao todas as vezes

if (coalesce(ie_incidencia_regra_p::text, '') = '') then
	-- busca a incidencia de toda a regra

	dados_retorno_w.ds_campos := 	dados_retorno_w.ds_campos || ', ' || pls_util_pck.enter_w ||
					'(pls_tipos_ocor_pck.obter_incidencia_regra_selecao(	regra.nr_seq_ocorrencia, ' || pls_util_pck.enter_w ||
					'							regra.nr_sequencia, ' || pls_util_pck.enter_w ||
					'							:nr_seq_lote_conta_pc, ' || pls_util_pck.enter_w ||
					'							:nr_seq_protocolo_pc,' || pls_util_pck.enter_w ||
					'							:nr_seq_lote_processo_pc,' || pls_util_pck.enter_w ||
					'							:nr_seq_conta_pc,' || pls_util_pck.enter_w ||
					'							:nr_seq_conta_proc_pc,' || pls_util_pck.enter_w ||
					'							:nr_seq_conta_mat_pc,' || pls_util_pck.enter_w ||
					'							:nr_seq_analise_pc,' || pls_util_pck.enter_w ||
					'							:cd_estabelecimento_pc,' || pls_util_pck.enter_w ||
					'							:ie_conta_sem_item_pc)) incidencia_selecao';

	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_lote_conta_pc', dados_consistencia_p.nr_seq_lote, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_protocolo_pc', dados_consistencia_p.nr_seq_protocolo, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_lote_processo_pc', dados_consistencia_p.nr_seq_lote_processo, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_conta_pc', dados_consistencia_p.nr_seq_conta, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_conta_proc_pc', dados_consistencia_p.nr_seq_conta_proc, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_conta_mat_pc', dados_consistencia_p.nr_seq_conta_mat, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_analise_pc', dados_consistencia_p.nr_seq_analise, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':cd_estabelecimento_pc', dados_forma_geracao_ocor_p.cd_estabelecimento, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(	':ie_conta_sem_item_pc', ie_conta_sem_item_p, bind_sql_valor_p);

else
	-- se for excecao, nao precisa usar uma funcao para obter a incidencia, pois a mesma ja existe

	dados_retorno_w.ds_campos := 	dados_retorno_w.ds_campos || ', ' || pls_util_pck.enter_w ||
					':ie_incidencia_sel incidencia_selecao';
	bind_sql_valor_p := sql_pck.bind_variable(	':ie_incidencia_sel', ie_incidencia_regra_p, bind_sql_valor_p);
end if;

-- se for excecao

if (dados_forma_geracao_ocor_p.ie_tipo_excecao IS NOT NULL AND dados_forma_geracao_ocor_p.ie_tipo_excecao::text <> '') then

	ie_excecao_w := 'S';
	
	-- excecao para regra filtra apenas o campo nr_seq_combinada

	if (dados_forma_geracao_ocor_p.ie_tipo_excecao = 'ER') then
		-- Adiciona a restricao para buscar as regras de excecao realacionadas a regra que esta sendo verificada;

		dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
						'and	regra.nr_seq_ocorrencia is not null ' || pls_util_pck.enter_w ||
						'and	regra.nr_seq_combinada = :nr_seq_combinada ';
		bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_combinada', dados_forma_geracao_ocor_p.nr_seq_combinada, bind_sql_valor_p);
	end if;

	-- excecao geral filtra apenas o campo nr_seq_ocorrencia

	if (dados_forma_geracao_ocor_p.ie_tipo_excecao = 'EG') then
		-- Adiciona a restricao para pegar apenas as regras de excecao geral da ocorrencia.

		dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
						'and	regra.nr_seq_ocorrencia = :nr_seq_ocorrencia ' || pls_util_pck.enter_w ||
						'and	regra.nr_seq_combinada is null ';
		bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_ocorrencia', dados_forma_geracao_ocor_p.nr_seq_ocorrencia, bind_sql_valor_p);
	end if;

	-- Restricao para evitar de processar uma regra invalida de excecao se nao os registros ficam como sendo invalidos na tabela de selecao.

	-- Foi criada a variavel para nao necessitar escrever a restricao em dois lugares diferentes.

	dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
					'and	(regra.ie_utiliza_filtro = ''N'' or ' || pls_util_pck.enter_w ||
					'	((regra.ie_utiliza_filtro = ''S'' or val.cd_validacao = 1) and ' || pls_util_pck.enter_w ||
					'	exists ( ' || pls_util_pck.enter_w ||
					'		select	0 ' || pls_util_pck.enter_w ||
					'		from	pls_oc_cta_filtro filtro ' || pls_util_pck.enter_w ||
					'		where	filtro.nr_seq_oc_cta_comb = regra.nr_sequencia ' || pls_util_pck.enter_w ||
					'		and	filtro.ie_situacao = ''A''))) ';
else
	ie_excecao_w := 'N';

	-- se o tipo de excecao for nulo e for informada uma ocorrencia, significa que deve apenas ser consistida a ocorrencia em questao

	if (dados_forma_geracao_ocor_p.nr_seq_ocorrencia IS NOT NULL AND dados_forma_geracao_ocor_p.nr_seq_ocorrencia::text <> '') then
		-- Adiciona a restricao pelo evento da geracao;

		dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
						'and	regra.nr_seq_ocorrencia = :nr_seq_ocorrencia ';
		bind_sql_valor_p := sql_pck.bind_variable(	':nr_seq_ocorrencia', dados_forma_geracao_ocor_p.nr_seq_ocorrencia, bind_sql_valor_p);
	end if;
end if;

-- filtra a excecao S ou N

dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
				'and	regra.ie_excecao = :ie_excecao ';
bind_sql_valor_p := sql_pck.bind_variable(	':ie_excecao', ie_excecao_w, bind_sql_valor_p);

-- Verificar o evento da analise para obtencao das regra para ocorrencias geradas no evento da analise.

if (dados_forma_geracao_ocor_p.cd_acao_analise IS NOT NULL AND dados_forma_geracao_ocor_p.cd_acao_analise::text <> '') then
	if (dados_forma_geracao_ocor_p.cd_acao_analise	= 10) then
		select 	count(1)
		into STRICT	qt_ocor_w
		from	pls_acao_analise	a,
			pls_acao_analise_ocor	o
		where	a.nr_sequencia	= o.nr_seq_acao_analise
		and	a.cd_acao	= 10  LIMIT 1;
		
		if (qt_ocor_w	> 0) then
			-- Quando for para gerar as ocorrencias devido a alguma acao executada na analise deve ser acessada a tabela de acao da analise e verificar quais as ocorrencias que devem ser geradas novamente.

			dados_retorno_w.ds_tabelas :=	dados_retorno_w.ds_tabelas || ', ' || pls_util_pck.enter_w ||
							'	pls_acao_analise		acao, ' || pls_util_pck.enter_w ||
							'	pls_acao_analise_ocor		acao_ocor ';

			-- Ligar as tabelas para verificar se a ocorrencia deve ser verificada nesta acao da analise.

			dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
							'and	acao.cd_acao = :cd_acao_analise ' || pls_util_pck.enter_w ||
							'and	acao_ocor.nr_seq_acao_analise = acao.nr_sequencia ' || pls_util_pck.enter_w ||
							'and	ocor.nr_sequencia = acao_ocor.nr_seq_ocorrencia ';
			bind_sql_valor_p := sql_pck.bind_variable(	':cd_acao_analise', dados_forma_geracao_ocor_p.cd_acao_analise, bind_sql_valor_p);
		end if;
	else
		-- Quando for para gerar as ocorrencias devido a alguma acao executada na analise deve ser acessada a tabela de acao da analise e verificar quais as ocorrencias que devem ser geradas novamente.

		dados_retorno_w.ds_tabelas :=	dados_retorno_w.ds_tabelas || ', ' || pls_util_pck.enter_w ||
						'	pls_acao_analise		acao, ' || pls_util_pck.enter_w ||
						'	pls_acao_analise_ocor		acao_ocor ';

		-- Ligar as tabelas para verificar se a ocorrencia deve ser verificada nesta acao da analise.

		dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
						'and	acao.cd_acao = :cd_acao_analise ' || pls_util_pck.enter_w ||
						'and	acao_ocor.nr_seq_acao_analise = acao.nr_sequencia ' || pls_util_pck.enter_w ||
						'and	ocor.nr_sequencia = acao_ocor.nr_seq_ocorrencia ';
		bind_sql_valor_p := sql_pck.bind_variable(	':cd_acao_analise', dados_forma_geracao_ocor_p.cd_acao_analise, bind_sql_valor_p);
	end if;
end if;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------- DAQUI PARA BAIXO VAO AS RETRICOES QUE DEVEM SER FEITAS SOMENTE PARA REGRAS BOAS E EXCECOES GERAIS. --------------------------------------------------

---------------------------------------------------- E FEITO DESTA MANEIRA PORQUE UMA EXCECAO DE REGRA JA TEVE NA REGRA PAI OS DADOS ABAIXO FILTRADOS ----------------------------------------------------

----------------------------------------------------  POR ISSO QUE E ACRESCENTADO UM AND COM O TIPO DE EXCECAO DIFERENTE DE EXCECAO DA REGRA EM CADA IF ---------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Verificar o estabelecimento de onde as regras devem buscadas.

if ((dados_forma_geracao_ocor_p.cd_estabelecimento IS NOT NULL AND dados_forma_geracao_ocor_p.cd_estabelecimento::text <> '') and
	 coalesce(dados_forma_geracao_ocor_p.ie_tipo_excecao, 'X') != 'ER') and (ie_ocorrencia_w = 'S') then
	-- Adiciona a restricao pelo estabelecimento da geracao;

	dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
					'and	regra.cd_estabelecimento = :cd_estabelecimento ';
	bind_sql_valor_p := sql_pck.bind_variable(	':cd_estabelecimento', dados_forma_geracao_ocor_p.cd_estabelecimento, bind_sql_valor_p);
end if;

-- Verificar o evento de geracao da ocorrencia

if ((dados_forma_geracao_ocor_p.ie_evento IS NOT NULL AND dados_forma_geracao_ocor_p.ie_evento::text <> '') and
	 coalesce(dados_forma_geracao_ocor_p.ie_tipo_excecao, 'X') != 'ER') then
	-- Adiciona a restricao pelo evento da geracao;

	dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
					'and	regra.ie_evento = :ie_evento ';
	bind_sql_valor_p := sql_pck.bind_variable(	':ie_evento', dados_forma_geracao_ocor_p.ie_evento, bind_sql_valor_p);
end if;

-- Verificar o evento pelo portal web para obtencao da regra para ocorrencias geradas no portal.

if ((dados_forma_geracao_ocor_p.ie_portal_web IS NOT NULL AND dados_forma_geracao_ocor_p.ie_portal_web::text <> '') and
	 coalesce(dados_forma_geracao_ocor_p.ie_tipo_excecao, 'X') != 'ER') then
	-- Adiciona a restricao pelo evento do portal para a geracao;

	dados_retorno_w.ds_restricao :=	dados_retorno_w.ds_restricao || pls_util_pck.enter_w ||
					'and	regra.ie_portal_web in (''A'', :ie_portal_web) ';
	bind_sql_valor_p := sql_pck.bind_variable(	':ie_portal_web', dados_forma_geracao_ocor_p.ie_portal_web, bind_sql_valor_p);
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_tipos_ocor_pck.obter_restricao_regra ( dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, ie_incidencia_regra_p text, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, ie_conta_sem_item_p text, bind_sql_valor_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
