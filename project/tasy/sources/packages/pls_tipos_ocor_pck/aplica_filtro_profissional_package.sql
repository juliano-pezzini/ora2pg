-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_tipos_ocor_pck.aplica_filtro_profissional ( ie_considera_selecao_p boolean, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: gerencia a aplicacao do filtro de profissional
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
Nao incluir restricoes nessa procedure, ela e responsavel apenas  por passar no cursor
dos filtros e incluir na selecao das contas que devem ter a ocorrencia gerada.

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


tb_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_proc_w	pls_util_cta_pck.t_number_table;
tb_seq_conta_mat_w	pls_util_cta_pck.t_number_table;
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_guia_referencia_w	pls_util_cta_pck.t_varchar2_table_20;
tb_seq_segurado_w	pls_util_cta_pck.t_number_table;
tb_dt_item_w		pls_util_cta_pck.t_date_table;
tb_dt_item_hora_ini_w	pls_util_cta_pck.t_date_table;
tb_dt_item_hora_fim_w	pls_util_cta_pck.t_date_table;
tb_dt_item_dia_ini_w	pls_util_cta_pck.t_date_table;
tb_dt_item_dia_fim_w	pls_util_cta_pck.t_date_table;
tb_ie_origem_proced_w	pls_util_cta_pck.t_number_table;
tb_cd_procedimento_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_material_w	pls_util_cta_pck.t_number_table;

dados_filtro_prof_w	pls_tipos_ocor_pck.dados_filtro_prof;
ds_select_w		varchar(8000);
valor_bind_w		sql_pck.t_dado_bind;
dados_restricao_w	pls_tipos_ocor_pck.dados_select;
dados_restricao_proc_w	pls_tipos_ocor_pck.dados_select;
dados_restricao_mat_w	pls_tipos_ocor_pck.dados_select;
cursor_w		sql_pck.t_cursor;
ie_considera_selecao_w	boolean;

c_filtro CURSOR(	nr_seq_filtro_pc	pls_oc_cta_filtro.nr_sequencia%type,
			ie_medico_pc		pls_oc_cta_filtro_prof.ie_medico%type) FOR
	SELECT	a.nr_sequencia,
		a.cd_medico,
		a.ie_medico_cooperado,
		a.nr_seq_conselho,
		a.nr_seq_grau_partic,
		a.ie_medico,
		a.nr_seq_cbo_saude
	from	pls_oc_cta_filtro_prof a
	where	a.nr_seq_oc_cta_filtro	= nr_seq_filtro_pc
	and	a.ie_medico		= ie_medico_pc
	and	a.ie_situacao = 'A';

-- Tipos de profissionais cadastrados.

cs_tipo_filtro CURSOR(	nr_seq_filtro_pc	pls_oc_cta_filtro.nr_sequencia%type) FOR
	SELECT	distinct x.ie_medico ie_tipo_filtro
	from	pls_oc_cta_filtro_prof x
	where	x.nr_seq_oc_cta_filtro = nr_seq_filtro_pc
	and	x.ie_situacao = 'A';

BEGIN
ie_considera_selecao_w := ie_considera_selecao_p;
-- Se nao tiver informacoes da regra nao sera possivel aplicar os filtros.

if (dados_filtro_p.nr_sequencia IS NOT NULL AND dados_filtro_p.nr_sequencia::text <> '') then

	-- Buscar os tipos de profissionais cadastrados para este filtro.

	for	rw_tipo_filtro_w in cs_tipo_filtro(dados_filtro_p.nr_sequencia) loop

		-- Atualizar o campo auxiliar que sera utilizado para sinalizar os registros que foram processados

		CALL CALL CALL CALL CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar( 'F', nr_id_transacao_p, dados_filtro_p, dados_regra_p);

		-- Passar para todos os filtros da regra.

		for	r_c_filtro_w in c_filtro(dados_filtro_p.nr_sequencia, rw_tipo_filtro_w.ie_tipo_filtro) loop

			-- Atualizar a variavel com os dados do filtro

			dados_filtro_prof_w.nr_sequencia		:= r_c_filtro_w.nr_sequencia;
			dados_filtro_prof_w.cd_medico               	:= r_c_filtro_w.cd_medico;
			dados_filtro_prof_w.ie_medico_cooperado     	:= r_c_filtro_w.ie_medico_cooperado;
			dados_filtro_prof_w.nr_seq_conselho         	:= r_c_filtro_w.nr_seq_conselho;
			dados_filtro_prof_w.nr_seq_grau_partic      	:= r_c_filtro_w.nr_seq_grau_partic;
			dados_filtro_prof_w.ie_medico			:= r_c_filtro_w.ie_medico;
			dados_filtro_prof_w.nr_seq_cbo_saude		:= r_c_filtro_w.nr_seq_cbo_saude;

			begin
				-- so respeita a incidencia da regra PM para filtros que nao sao excecao

				-- um filtro de excecao ira atingir somente a sua incidencia e jamais sera PM

				if	(dados_regra_p.ie_incidencia_selecao = 'PM' AND dados_filtro_p.ie_processo_excecao = 'N') then
					-- restricao para o filtro de procedimento

					valor_bind_w := pls_tipos_ocor_pck.obter_restricao_profissional(	dados_regra_p, dados_filtro_p, dados_filtro_prof_w, 'PROC', valor_bind_w);
					-- restricao para o filtro de material

					valor_bind_w := pls_tipos_ocor_pck.obter_restricao_profissional(	dados_regra_p, dados_filtro_p, dados_filtro_prof_w, 'MAT', valor_bind_w);
				else
					-- restricao para todas as outras situacoes

					valor_bind_w := pls_tipos_ocor_pck.obter_restricao_profissional(	dados_regra_p, dados_filtro_p, dados_filtro_prof_w, null, valor_bind_w);
				end if;

				-- Montar o select padrao juntamente as restricoes.

				valor_bind_w := pls_tipos_ocor_pck.obter_select_filtro(	ie_considera_selecao_w, nr_id_transacao_p, dados_consistencia_p, dados_regra_p, dados_forma_geracao_ocor_p, dados_filtro_p, dados_restricao_w, dados_restricao_proc_w, dados_restricao_mat_w, cd_estabelecimento_p, valor_bind_w);

				-- executa o comando sql com os respectivos binds

				valor_bind_w := sql_pck.executa_sql_cursor(	ds_select_w, valor_bind_w);

				loop
					fetch cursor_w bulk collect into	tb_seq_conta_w, tb_seq_conta_proc_w,
										tb_seq_conta_mat_w, tb_guia_referencia_w,
										tb_seq_segurado_w, tb_dt_item_w,
										tb_dt_item_hora_ini_w, tb_dt_item_hora_fim_w,
										tb_dt_item_dia_ini_w, tb_dt_item_dia_fim_w,
										tb_ie_origem_proced_w, tb_cd_procedimento_w,
										tb_nr_seq_material_w, tb_seq_selecao_w
					limit pls_util_pck.qt_registro_transacao_w;
					exit when tb_seq_conta_w.count = 0;

					-- Insere todos os registros das listas na tabela de selecao

					CALL CALL CALL CALL CALL pls_tipos_ocor_pck.gerencia_selecao_filtro(	'F', tb_seq_conta_w,
									tb_seq_conta_proc_w, tb_seq_conta_mat_w,
									tb_guia_referencia_w, tb_seq_segurado_w,
									tb_dt_item_w, tb_dt_item_hora_ini_w,
									tb_dt_item_hora_fim_w, tb_dt_item_dia_ini_w,
									tb_dt_item_dia_fim_w, tb_ie_origem_proced_w,
									tb_cd_procedimento_w, tb_nr_seq_material_w,
									tb_seq_selecao_w, nr_id_transacao_p,
									'S', nm_usuario_p,
									dados_filtro_p, dados_regra_p);
				end loop;
				close cursor_w;

			exception
				when others then

				if (cursor_w%isopen) then
					close cursor_w;
				end if;

				-- Tratar erro gerado no sql dinamico, sera inserido registro no log e abortado o processo exibindo mensagem de erro.

				CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(	dados_regra_p, ds_select_w,
										nr_id_transacao_p, nm_usuario_p);
			end;
		end loop;--c_filtro

		-- Atualizar o campo definitivo que sera utilizado para sinalizar os registros que foram processados

		CALL CALL CALL CALL CALL pls_tipos_ocor_pck.atualiza_campo_valido(	'F', nr_id_transacao_p, dados_filtro_p, dados_regra_p, 'S');
		-- para cada tipo de prestador o filtro deve ser considerado como E por isso e setado true aqui diretamente.

		ie_considera_selecao_w := true;
	end loop;
	-- Atualizar o campo definitivo que sera utilizado para sinalizar os registros que foram processados somente para regras boas

	CALL CALL CALL CALL CALL pls_tipos_ocor_pck.atualiza_campo_valido(	'F', nr_id_transacao_p, dados_filtro_p, dados_regra_p, 'F', 'S');
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tipos_ocor_pck.aplica_filtro_profissional ( ie_considera_selecao_p boolean, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
