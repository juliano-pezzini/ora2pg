-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_tipos_ocor_pck.obter_restricao_padrao_filtro ( ie_considera_selecao_p boolean, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, valor_bind_p INOUT sql_pck.t_dado_bind, ie_tipo_tabela_p text default null) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Retornar as restricoes padrao que serao aplicadas durante o processamentos dos
filtros. Essa rotina e utilizada em todas as procedures dos filtros, inclusive na que trata os
filtros padroes.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


dados_restricao_w		pls_tipos_ocor_pck.dados_select;
dados_restricao_selecao_w	pls_tipos_ocor_pck.dados_select;
ds_alias_w			varchar(20);


BEGIN
-- Inicializar o retorno

dados_restricao_w.ds_campos	:= null;
dados_restricao_w.ds_tabelas	:= null;
dados_restricao_w.ds_restricao	:= null;

-- Verificacoes dos parametros, caso tenha valor informado sera adicionado a restricao para o mesmo.

-- Sempre esta verificacao por primeiro.

if (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then

	-- obtem o alias da tabela

	ds_alias_w := pls_tipos_ocor_pck.obter_alias_tab(	dados_filtro_p.ie_processo_excecao, dados_regra_p.ie_incidencia_selecao,
					dados_filtro_p.ie_incidencia_selecao, ie_tipo_tabela_p);

	-- Verifica a data de inicio e fim de vigencia

	-- se ambas forem informadas faz um between, senao testa pelo maior ou menor logo abaixo no else

	if (dados_regra_p.dt_inicio_vigencia IS NOT NULL AND dados_regra_p.dt_inicio_vigencia::text <> '' AND dados_regra_p.dt_fim_vigencia IS NOT NULL AND dados_regra_p.dt_fim_vigencia::text <> '') then
		-- A data de atendimento da conta deve ser maior ou igual a data de inicio de vigencia da regra

		dados_restricao_w.ds_restricao := 	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.dt_atendimento_conta between :dt_inicio_vigencia and fim_dia(:dt_fim_vigencia) ';
		valor_bind_p := sql_pck.bind_variable(	':dt_inicio_vigencia', dados_regra_p.dt_inicio_vigencia, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(	':dt_fim_vigencia', dados_regra_p.dt_fim_vigencia, valor_bind_p);

	elsif (dados_regra_p.dt_inicio_vigencia IS NOT NULL AND dados_regra_p.dt_inicio_vigencia::text <> '') then
		-- A data de atendimento da conta deve ser maior ou igual a data de inicio de vigencia da regra

		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.dt_atendimento_conta >= :dt_inicio_vigencia ';
		valor_bind_p := sql_pck.bind_variable(	':dt_inicio_vigencia', dados_regra_p.dt_inicio_vigencia, valor_bind_p);

	elsif (dados_regra_p.dt_fim_vigencia IS NOT NULL AND dados_regra_p.dt_fim_vigencia::text <> '') then
		-- A data de atendimento da conta deve ser maior ou igual a data de inicio de vigencia da regra

		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.dt_atendimento_conta <= fim_dia(:dt_fim_vigencia) ';
		valor_bind_p := sql_pck.bind_variable(	':dt_fim_vigencia', dados_regra_p.dt_fim_vigencia, valor_bind_p);
	end if;

		-- se for processamento de regras para contas sem itens, obviamente que restringe para trazer contas sem itens

	if (dados_regra_p.ie_conta_sem_item = 'S') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	(select	count(1)' || pls_util_pck.enter_w ||
							'	 from	pls_conta_proc procx1 ' || pls_util_pck.enter_w ||
							'	 where	procx1.nr_seq_conta = ' || ds_alias_w || '.nr_seq_conta) = 0' || pls_util_pck.enter_w ||
							'and	(select	count(1)' || pls_util_pck.enter_w ||
							'	 from	pls_conta_mat matx1 ' || pls_util_pck.enter_w ||
							'	 where	matx1.nr_seq_conta = ' || ds_alias_w || '.nr_seq_conta) = 0';
	end if;

	-- se nao for para considerar a selecao, aplica os filtros padroes

	-- caso contrario, restringe somente pelo que ja esta informado na tabela de selecao

	if (ie_considera_selecao_p = false) then

		-- Se for para filtrar por estabelecimento sera verificado o estabelecimento do protocolo apenas.

		if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and 	' || ds_alias_w || '.cd_estabelecimento = :cd_estabelecimento';
			valor_bind_p := sql_pck.bind_variable(	':cd_estabelecimento', cd_estabelecimento_p, valor_bind_p);
		end if;

		-- Se houver numero do lote informado buscar os protocolos do lote.

		if (dados_consistencia_p.nr_seq_lote IS NOT NULL AND dados_consistencia_p.nr_seq_lote::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.nr_seq_lote_conta = :nr_seq_lote_conta';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_lote_conta', dados_consistencia_p.nr_seq_lote, valor_bind_p);
		end if;

		-- Se houver protocolo informado buscar apenas aquele protocolo.

		if (dados_consistencia_p.nr_seq_protocolo IS NOT NULL AND dados_consistencia_p.nr_seq_protocolo::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.nr_seq_protocolo = :nr_seq_protocolo';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_protocolo', dados_consistencia_p.nr_seq_protocolo, valor_bind_p);
		end if;

		-- Se for infromado o lote da funcao OPS - Producao - Processo contas medicas entao busca apenas as contas que estiverem no lote.

		if (dados_consistencia_p.nr_seq_lote_processo IS NOT NULL AND dados_consistencia_p.nr_seq_lote_processo::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and     exists (select 1 ' || pls_util_pck.enter_w ||
								'		 from   pls_cta_lote_proc_conta processo ' || pls_util_pck.enter_w ||
								'		 where  processo.nr_seq_lote_processo = :nr_seq_lote_processo ' || pls_util_pck.enter_w ||
								'		 and    processo.nr_seq_conta = ' || ds_alias_w || '.nr_seq_conta)';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_lote_processo', dados_consistencia_p.nr_seq_lote_processo, valor_bind_p);
		end if;

		-- Se houver conta informada so ira consistir a conta e seus itens.

		if (dados_consistencia_p.nr_seq_conta IS NOT NULL AND dados_consistencia_p.nr_seq_conta::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.nr_seq_conta = :nr_seq_conta';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta', dados_consistencia_p.nr_seq_conta, valor_bind_p);
		end if;

		-- Se for informado o procedimento entao ira consistir somente aquele procedimento. Comum nos itens da analise durante a execucao de acoes como aceite ou ajuste de valores.

		if (dados_consistencia_p.nr_seq_conta_proc IS NOT NULL AND dados_consistencia_p.nr_seq_conta_proc::text <> '') then
			-- se for incidencia de procedimento, filtra direto, senao faz um exists (caso seja incidencia por conta ou por material)

			-- nao considera quando se trabalha somente com materiais

			if	((dados_regra_p.ie_incidencia_selecao in ('P', 'PM')) and (coalesce(ie_tipo_tabela_p, 'X') != 'MAT')) then
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.nr_seq_conta_proc = :nr_seq_conta_proc';
			else
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	exists (select	1 ' || pls_util_pck.enter_w ||
									'		from	pls_conta_proc procx ' || pls_util_pck.enter_w ||
									'		where	procx.nr_sequencia = :nr_seq_conta_proc ' || pls_util_pck.enter_w ||
									'		and	procx.nr_seq_conta = ' || ds_alias_w || '.nr_seq_conta)';
			end if;
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta_proc', dados_consistencia_p.nr_seq_conta_proc, valor_bind_p);
		end if;

		-- Se for informado o material entao ira consistir somente aquele material. Comum nos itens da analise durante a execucao de acoes como aceite ou ajuste de valores.

		if (dados_consistencia_p.nr_seq_conta_mat IS NOT NULL AND dados_consistencia_p.nr_seq_conta_mat::text <> '') then
			-- se for incidencia de material, filtra direto, senao faz um exists (caso seja incidencia por conta ou por procedimento)

			-- nao considera quando se trabalha somente com procedimentos

			if	((dados_regra_p.ie_incidencia_selecao in ('M', 'PM')) and (coalesce(ie_tipo_tabela_p, 'X') != 'PROC')) then
				dados_restricao_w.ds_restricao := 	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.nr_seq_conta_mat = :nr_seq_conta_mat';
			else
				dados_restricao_w.ds_restricao := 	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	exists (select	1 ' || pls_util_pck.enter_w ||
									'		from	pls_conta_mat matx ' || pls_util_pck.enter_w ||
									'		where	matx.nr_sequencia = :nr_seq_conta_mat ' || pls_util_pck.enter_w ||
									'		and	matx.nr_seq_conta = ' || ds_alias_w || '.nr_seq_conta)';
			end if;
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_conta_mat', dados_consistencia_p.nr_seq_conta_mat, valor_bind_p);
		end if;

		-- Se houver analise informada buscar apenas aquela analise.

		if (dados_consistencia_p.nr_seq_analise IS NOT NULL AND dados_consistencia_p.nr_seq_analise::text <> '') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.nr_seq_analise = :nr_seq_analise';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_analise', dados_consistencia_p.nr_seq_analise, valor_bind_p);
		end if;

		-- Liberacao de Ocorrencias X Guia XML

		-- Sempre que for importacao do XML ou digitacao de contas pelo portal, deve ser verificado se nao existe liberacao para ocorrencia para a guia.

		if	((dados_forma_geracao_ocor_p.ie_evento = 'IMP') or (dados_forma_geracao_ocor_p.ie_evento = 'PW' and dados_forma_geracao_ocor_p.ie_portal_web = 'CG')) then

			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	not exists(	select	1' || pls_util_pck.enter_w ||
								'			from	pls_guia_lib_ocor_web lib_guia' || pls_util_pck.enter_w ||
								'			where	lib_guia.nr_seq_guia = ' || ds_alias_w || '.nr_seq_guia' || pls_util_pck.enter_w ||
								'			and	lib_guia.nr_seq_ocorrencia = :nr_seq_ocorrencia' || pls_util_pck.enter_w ||
								'			and	lib_guia.dt_inicio_vigencia <= sysdate' || pls_util_pck.enter_w ||
								'			and	lib_guia.dt_fim_vigencia is null' || pls_util_pck.enter_w ||
								'			union all' || pls_util_pck.enter_w ||
								'			select	1' || pls_util_pck.enter_w ||
								'			from	pls_guia_lib_ocor_web lib_guia' || pls_util_pck.enter_w ||
								'			where	lib_guia.nr_seq_guia = ' || ds_alias_w || '.nr_seq_guia' || pls_util_pck.enter_w ||
								'			and	lib_guia.nr_seq_ocorrencia = :nr_seq_ocorrencia' || pls_util_pck.enter_w ||
								'			and	lib_guia.dt_inicio_vigencia <= sysdate' || pls_util_pck.enter_w ||
								'			and	lib_guia.dt_fim_vigencia >= sysdate' || pls_util_pck.enter_w ||
								'		   )';
			valor_bind_p := sql_pck.bind_variable(	':nr_seq_ocorrencia', dados_regra_p.nr_seq_ocorrencia, valor_bind_p);
		end if;
	end if;

	-- obtem as restricoes relacionadas a tabela de selecao

	valor_bind_p := pls_tipos_ocor_pck.obter_restricao_reg_selecao(	ie_considera_selecao_p, dados_filtro_p.ie_processo_excecao, nr_id_transacao_p, dados_regra_p.ie_excecao, dados_filtro_p.ie_excecao, dados_filtro_p.nr_sequencia, dados_regra_p.ie_incidencia_selecao, dados_filtro_p.ie_incidencia_selecao, valor_bind_p, ie_tipo_tabela_p);
	-- concatena o retorno acima

	dados_restricao_w.ds_campos	:= dados_restricao_w.ds_campos || dados_restricao_selecao_w.ds_campos;
	dados_restricao_w.ds_tabelas	:= dados_restricao_w.ds_tabelas || dados_restricao_selecao_w.ds_tabelas;
	dados_restricao_w.ds_restricao	:= dados_restricao_w.ds_restricao || dados_restricao_selecao_w.ds_restricao;
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_tipos_ocor_pck.obter_restricao_padrao_filtro ( ie_considera_selecao_p boolean, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, dados_consistencia_p pls_tipos_ocor_pck.dados_consistencia, dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_forma_geracao_ocor_p pls_tipos_ocor_pck.dados_forma_geracao_ocor, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, valor_bind_p INOUT sql_pck.t_dado_bind, ie_tipo_tabela_p text default null) FROM PUBLIC;
