-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_tipos_ocor_pck.obter_restricao_procedimento ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_filtro_proc_p pls_tipos_ocor_pck.dados_filtro_proc, ie_tipo_tabela_p text, valor_bind_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Monta as restricoes e binds dos campos de filtro de procedimento.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


dados_restricao_w	pls_tipos_ocor_pck.dados_select;
ds_alias_w		varchar(5);


BEGIN
-- Inicializar o retorno

dados_restricao_w.ds_campos	:= null;
dados_restricao_w.ds_tabelas	:= null;
dados_restricao_w.ds_restricao	:= null;

if (dados_filtro_proc_p.nr_sequencia > 0) then

	-- obtem o alias da tabela

	ds_alias_w := pls_tipos_ocor_pck.obter_alias_tab(	dados_filtro_p.ie_processo_excecao, dados_regra_p.ie_incidencia_selecao,
					dados_filtro_p.ie_incidencia_selecao, ie_tipo_tabela_p);

	--Codigo do procedimento

	if (dados_filtro_proc_p.cd_procedimento IS NOT NULL AND dados_filtro_proc_p.cd_procedimento::text <> '') then

		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.ie_origem_proced = :ie_origem_proced' || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.cd_procedimento = :cd_procedimento';

		valor_bind_p := sql_pck.bind_variable(	':ie_origem_proced', dados_filtro_proc_p.ie_origem_proced, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(	':cd_procedimento', dados_filtro_proc_p.cd_procedimento, valor_bind_p);
	end if;

	-- Area procedimento

	if (dados_filtro_proc_p.cd_area_procedimento IS NOT NULL AND dados_filtro_proc_p.cd_area_procedimento::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	exists (select	1 ' || pls_util_pck.enter_w ||
							'		from	estrutura_procedimento_v p4' || pls_util_pck.enter_w ||
							'		where	p4.ie_origem_proced = ' || ds_alias_w || '.ie_origem_proced' || pls_util_pck.enter_w ||
							'		and	p4.cd_procedimento = ' || ds_alias_w || '.cd_procedimento' || pls_util_pck.enter_w ||
							'		and	p4.cd_area_procedimento = :cd_area_procedimento' || pls_util_pck.enter_w ||
							'		)';

		valor_bind_p := sql_pck.bind_variable(	':cd_area_procedimento', dados_filtro_proc_p.cd_area_procedimento, valor_bind_p);
	end if;

	-- Especialidade

	if (dados_filtro_proc_p.cd_especialidade IS NOT NULL AND dados_filtro_proc_p.cd_especialidade::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	exists (select	1 ' || pls_util_pck.enter_w ||
							'		from	estrutura_procedimento_v p3' || pls_util_pck.enter_w ||
							'		where	p3.ie_origem_proced = ' || ds_alias_w || '.ie_origem_proced' || pls_util_pck.enter_w ||
							'		and	p3.cd_procedimento = ' || ds_alias_w || '.cd_procedimento' || pls_util_pck.enter_w ||
							'		and	p3.cd_especialidade = :cd_especialidade' || pls_util_pck.enter_w ||
							'		)';

		valor_bind_p := sql_pck.bind_variable(	':cd_especialidade', dados_filtro_proc_p.cd_especialidade, valor_bind_p);
	end if;

	-- Grupo

	if (dados_filtro_proc_p.cd_grupo_proc IS NOT NULL AND dados_filtro_proc_p.cd_grupo_proc::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	exists (select	1 ' || pls_util_pck.enter_w ||
							'		from	estrutura_procedimento_v p2' || pls_util_pck.enter_w ||
							'		where	p2.ie_origem_proced = ' || ds_alias_w || '.ie_origem_proced' || pls_util_pck.enter_w ||
							'		and	p2.cd_procedimento = ' || ds_alias_w || '.cd_procedimento' || pls_util_pck.enter_w ||
							'		and	p2.cd_grupo_proc = :cd_grupo_proc' || pls_util_pck.enter_w ||
							'		)';

		valor_bind_p := sql_pck.bind_variable(	':cd_grupo_proc', dados_filtro_proc_p.cd_grupo_proc, valor_bind_p);
	end if;

	-- tipo de despesa

	if (dados_filtro_proc_p.ie_tipo_desp_proc IS NOT NULL AND dados_filtro_proc_p.ie_tipo_desp_proc::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.ie_tipo_despesa = :ie_tipo_despesa';

		valor_bind_p := sql_pck.bind_variable(	':ie_tipo_despesa', dados_filtro_proc_p.ie_tipo_desp_proc, valor_bind_p);
	end if;

	-- Grupo receita

	if (dados_filtro_proc_p.nr_seq_grupo_rec IS NOT NULL AND dados_filtro_proc_p.nr_seq_grupo_rec::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	exists (select	1 ' || pls_util_pck.enter_w ||
							'		from	procedimento p1' || pls_util_pck.enter_w ||
							'		where	p1.ie_origem_proced = ' || ds_alias_w || '.ie_origem_proced' || pls_util_pck.enter_w ||
							'		and	p1.cd_procedimento = ' || ds_alias_w || '.cd_procedimento' || pls_util_pck.enter_w ||
							'		and	p1.nr_seq_grupo_rec = :nr_seq_grupo_rec' || pls_util_pck.enter_w ||
							'		)';

		valor_bind_p := sql_pck.bind_variable(	':nr_seq_grupo_rec', dados_filtro_proc_p.nr_seq_grupo_rec, valor_bind_p);
	end if;

	-- Dia semana

	if (dados_filtro_proc_p.dt_dia_semana IS NOT NULL AND dados_filtro_proc_p.dt_dia_semana::text <> '') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			--aaschlote 23/03/2015 OS 862545 - Tratamento para os dias de trabalho

			if (dados_filtro_proc_p.dt_dia_semana <> 9) then
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.dt_dia_semana_imp = :dt_dia_semana';
			else
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.dt_dia_semana_imp between 2 and 6';
			end if;
		else
			--aaschlote 23/03/2015 OS 862545 - Tratamento para os dias de trabalho

			if (dados_filtro_proc_p.dt_dia_semana <> 9) then
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.dt_dia_semana = :dt_dia_semana';

			else
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.dt_dia_semana between 2 and 6';
			end if;
		end if;

		if (dados_filtro_proc_p.dt_dia_semana <> 9) then
			valor_bind_p := sql_pck.bind_variable(	':dt_dia_semana', dados_filtro_proc_p.dt_dia_semana, valor_bind_p);
		end if;
	end if;

	-- Feriado

	if (dados_filtro_proc_p.ie_feriado = 'S') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	exists	(select	1' || pls_util_pck.enter_w ||
								'		from	feriado xy' || pls_util_pck.enter_w ||
								'		where	xy.cd_estabelecimento = :cd_estabelecimento' || pls_util_pck.enter_w ||
								'		and	xy.dt_feriado = ' || ds_alias_w || '.dt_procedimento_imp_trunc)';
		else
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	exists	(select	1' || pls_util_pck.enter_w ||
								'		from	feriado xy' || pls_util_pck.enter_w ||
								'		where	xy.cd_estabelecimento = :cd_estabelecimento' || pls_util_pck.enter_w ||
								'		and	xy.dt_feriado = ' || ds_alias_w || '.dt_procedimento_trunc)';
		end if;

		valor_bind_p := sql_pck.bind_variable(	':cd_estabelecimento', dados_regra_p.cd_estabelecimento, valor_bind_p);
	end if;

	-- Tipo feriado

	if (dados_filtro_proc_p.ie_tipo_feriado IS NOT NULL AND dados_filtro_proc_p.ie_tipo_feriado::text <> '') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	exists	(select	1' || pls_util_pck.enter_w ||
								'		from	feriado xz' || pls_util_pck.enter_w ||
								'		where	xz.cd_estabelecimento = :cd_estabelecimento' || pls_util_pck.enter_w ||
								'		and	xz.dt_feriado = ' || ds_alias_w || '.dt_procedimento_imp_trunc' || pls_util_pck.enter_w ||
								'		and	xz.ie_tipo_feriado = :ie_tipo_feriado)';
		else
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	exists	(select	1' || pls_util_pck.enter_w ||
								'		from	feriado xz' || pls_util_pck.enter_w ||
								'		where	xz.cd_estabelecimento = :cd_estabelecimento' || pls_util_pck.enter_w ||
								'		and	xz.dt_feriado = ' || ds_alias_w || '.dt_procedimento_trunc' || pls_util_pck.enter_w ||
								'		and	xz.ie_tipo_feriado = :ie_tipo_feriado)';
		end if;

		valor_bind_p := sql_pck.bind_variable(	':cd_estabelecimento', dados_regra_p.cd_estabelecimento, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(	':ie_tipo_feriado', dados_filtro_proc_p.ie_tipo_feriado, valor_bind_p);
	end if;

	-- Hora inicial

	if (dados_filtro_proc_p.hr_inicial IS NOT NULL AND dados_filtro_proc_p.hr_inicial::text <> '') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.hr_inicio_proc_imp >= :hr_inicial';
		else
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.hr_inicio_proc >= :hr_inicial';
		end if;

		valor_bind_p := sql_pck.bind_variable(	':hr_inicial', to_date(to_char(dados_filtro_proc_p.hr_inicial,'hh24:mi:ss'),'hh24:mi:ss'), valor_bind_p, sql_pck.b_hora);
	end if;

	-- Hora final

	if (dados_filtro_proc_p.hr_final IS NOT NULL AND dados_filtro_proc_p.hr_final::text <> '') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.hr_fim_proc_imp <= :hr_final';
		else
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.hr_fim_proc <= :hr_final';
		end if;

		valor_bind_p := sql_pck.bind_variable(	':hr_final', to_date(to_char(dados_filtro_proc_p.hr_final,'hh24:mi:ss'),'hh24:mi:ss'), valor_bind_p, sql_pck.b_hora);
	end if;

	-- Valor minimo

	if (dados_filtro_proc_p.vl_minimo_item IS NOT NULL AND dados_filtro_proc_p.vl_minimo_item::text <> '') then
		--Quando for importacao XML ignoramos o tipo de consistencia de valor pois na importacao XML so existe a consistencia para valor apresentado

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and	' || ds_alias_w || '.vl_procedimento_imp <= :vl_minimo';
		else
			-- Se for valor calculado

			if (dados_filtro_proc_p.ie_consistencia_valor = 'C') then
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.vl_procedimento <= :vl_minimo';
			-- Se for valor apresentado

			else
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.vl_procedimento_imp <= :vl_minimo';
			end if;
		end if;

		-- passado como varchar2, pois como number estava gerando erro de conversao por conta do context

		valor_bind_p := sql_pck.bind_variable(	':vl_minimo', to_char(dados_filtro_proc_p.vl_minimo_item), valor_bind_p);
	end if;

	-- Valor maximo

	if (dados_filtro_proc_p.vl_max_item IS NOT NULL AND dados_filtro_proc_p.vl_max_item::text <> '') then
		--Quando for importacao XML ignoramos o tipo de consistencia de valor pois na importacao XML so existe a consistencia para valor apresentado

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.vl_procedimento_imp >= :vl_maximo';
		else
			-- Se for valor calculado

			if (dados_filtro_proc_p.ie_consistencia_valor = 'C') then
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.vl_procedimento >= :vl_maximo';
			-- Se for valor apresentado

			else
				dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
									'and	' || ds_alias_w || '.vl_procedimento_imp >= :vl_maximo';
			end if;
		end if;
		-- passado como varchar2, pois como number estava gerando erro de conversao por conta do context

		valor_bind_p := sql_pck.bind_variable(	':vl_maximo', to_char(dados_filtro_proc_p.vl_max_item), valor_bind_p);
	end if;

	-- Grupo de servico

	if (dados_filtro_proc_p.nr_seq_grupo_servico IS NOT NULL AND dados_filtro_proc_p.nr_seq_grupo_servico::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and exists (	select	1' || pls_util_pck.enter_w ||
							'		from	pls_grupo_servico_tm grupox' || pls_util_pck.enter_w ||
							'		where	grupox.nr_seq_grupo_servico = :nr_seq_grupo' || pls_util_pck.enter_w ||
							'		and	grupox.ie_origem_proced = ' || ds_alias_w || '.ie_origem_proced' || pls_util_pck.enter_w ||
							'		and	grupox.cd_procedimento = ' || ds_alias_w || '.cd_procedimento)';

		valor_bind_p := sql_pck.bind_variable(	':nr_seq_grupo', dados_filtro_proc_p.nr_seq_grupo_servico, valor_bind_p);
	end if;

	-- Estrutura

	if (dados_filtro_proc_p.nr_seq_estrutura IS NOT NULL AND dados_filtro_proc_p.nr_seq_estrutura::text <> '') then

		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
					'and	exists(	select	1 ' || pls_util_pck.enter_w ||
					'		from	pls_estrutura_ocor_tm est '|| pls_util_pck.enter_w ||
					'		where	est.nr_seq_estrutura = :nr_seq_estrutura '|| pls_util_pck.enter_w ||
					'		and	est.cd_procedimento = '||ds_alias_w||'.cd_procedimento '|| pls_util_pck.enter_w ||
					'		and	est.ie_origem_proced = '||ds_alias_w||'.ie_origem_proced'|| pls_util_pck.enter_w ||
					'	) ';

		valor_bind_p := sql_pck.bind_variable(	':nr_seq_estrutura', dados_filtro_proc_p.nr_seq_estrutura, valor_bind_p);
	end if;

	-- Via de acesso

	if (dados_filtro_proc_p.ie_via_acesso IS NOT NULL AND dados_filtro_proc_p.ie_via_acesso::text <> '') then
		-- se for importacao XML

		if (dados_regra_p.ie_evento = 'IMP') then
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and 	' || ds_alias_w || '.ie_via_acesso_imp = :ie_via_acesso_imp';
		else
			dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
								'and 	' || ds_alias_w || '.ie_via_acesso = :ie_via_acesso';
		end if;

		valor_bind_p := sql_pck.bind_variable(	':ie_via_acesso', dados_filtro_proc_p.ie_via_acesso, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(	':ie_via_acesso_imp', dados_filtro_proc_p.ie_via_acesso_imp, valor_bind_p);
	end if;

	-- Prestador de alto custo

	if (dados_filtro_proc_p.ie_prestador_alto_custo = 'S') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							'and	' || ds_alias_w || '.ie_alto_custo = ''S''';
	end if;
	
	-- Pacote PTU

	if (dados_filtro_proc_p.id_pacote_ptu = 'S') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							' and ' || ds_alias_w || '.ie_pacote_ptu = ''S''';
	end if;
	
	if (dados_filtro_proc_p.tp_rede_min IS NOT NULL AND dados_filtro_proc_p.tp_rede_min::text <> '') then
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							' and	exists(	select	1 ' || pls_util_pck.enter_w ||
							' from	pls_conta_proc_regra cpr '|| pls_util_pck.enter_w ||
							' where	cpr.tp_rede_min = :tp_rede_min '|| pls_util_pck.enter_w ||
							' and cpr.nr_Sequencia = ' || ds_alias_w || '.nr_sequencia' ||
							' ) ';
		
		valor_bind_p := sql_pck.bind_variable(	':tp_rede_min', dados_filtro_proc_p.tp_rede_min, valor_bind_p);
	end if;
	


	
	if	((dados_filtro_proc_p.ie_acres_urg_emer in ('S', 'N')) and (dados_regra_p.ie_evento in ('CC', 'PTU')))then	
		
		
		dados_restricao_w.ds_restricao :=	dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
							' and	exists(	select	1 ' || pls_util_pck.enter_w ||
							' from	pls_conta_proc_regra cpr '|| pls_util_pck.enter_w ||
							' where	nvl(cpr.ie_acres_urg_emer,''N'') = :ie_acres_urg_emer '|| pls_util_pck.enter_w ||
							' and cpr.nr_Sequencia = ' || ds_alias_w || '.nr_sequencia' ||
							' ) ';

		
		valor_bind_p := sql_pck.bind_variable(	':ie_acres_urg_emer', dados_filtro_proc_p.ie_acres_urg_emer, valor_bind_p);				

		
	end if;

	
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_tipos_ocor_pck.obter_restricao_procedimento ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_filtro_proc_p pls_tipos_ocor_pck.dados_filtro_proc, ie_tipo_tabela_p text, valor_bind_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
