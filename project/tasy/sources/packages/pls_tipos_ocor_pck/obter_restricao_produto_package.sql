-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_tipos_ocor_pck.obter_restricao_produto ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_filtro_prod_p pls_tipos_ocor_pck.dados_filtro_prod, ie_tipo_tabela_p text, valor_bind_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Monta as restricoes e binds dos campos de filtro de produto
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
 ------------------------------------------------------------------------------------------------------------------

 usuario OS XXXXXX 01/01/2000 -
 Alteracao:	Descricao da alteracao.
Motivo:	Descricao do motivo.
 ------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


dados_restricao_w	pls_tipos_ocor_pck.dados_select;
ds_alias_w		varchar(5);
ds_alias_benef_w	varchar(5);
ds_select_prod_w	varchar(500);
ds_filtro_prod_w	varchar(2000);


BEGIN
-- Inicializar o retorno

dados_restricao_w.ds_campos	:= null;
dados_restricao_w.ds_tabelas	:= null;
dados_restricao_w.ds_restricao	:= null;
ds_filtro_prod_w	:= null;
ds_alias_benef_w	:= 'bfx';

-- obtem o alias da tabela

ds_alias_w := pls_tipos_ocor_pck.obter_alias_tab(	dados_filtro_p.ie_processo_excecao, dados_regra_p.ie_incidencia_selecao,
				dados_filtro_p.ie_incidencia_selecao, ie_tipo_tabela_p);

-- Montar o subselect base.

ds_select_prod_w := 	'and	exists (' || pls_util_pck.enter_w||
			'		select	1 ' || pls_util_pck.enter_w||
			'		from	pls_segurado_conta_v ' || ds_alias_benef_w || pls_util_pck.enter_w||
			'		where	' || ds_alias_benef_w || '.nr_sequencia = ' || ds_alias_w || '.nr_seq_segurado ';

-- Produto

if (dados_filtro_prod_p.nr_seq_plano IS NOT NULL AND dados_filtro_prod_p.nr_seq_plano::text <> '') then
	ds_filtro_prod_w :=	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	' || ds_alias_benef_w || '.nr_seq_plano = :nr_seq_plano ';

	valor_bind_p := sql_pck.bind_variable(	':nr_seq_plano', dados_filtro_prod_p.nr_seq_plano, valor_bind_p);
end if;

-- Formacao de preco

if (dados_filtro_prod_p.ie_preco IS NOT NULL AND dados_filtro_prod_p.ie_preco::text <> '') then
	ds_filtro_prod_w :=	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	' || ds_alias_benef_w || '.ie_preco = :ie_preco ';

	valor_bind_p := sql_pck.bind_variable(	':ie_preco', dados_filtro_prod_p.ie_preco, valor_bind_p);
end if;

-- Grupo de produto

if (dados_filtro_prod_p.nr_seq_grupo_produto IS NOT NULL AND dados_filtro_prod_p.nr_seq_grupo_produto::text <> '') then

	ds_filtro_prod_w := 	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	exists	(select	1' || pls_util_pck.enter_w ||
				'		from	pls_preco_produto x ' || pls_util_pck.enter_w ||
				'		where	x.nr_seq_plano = ' || ds_alias_benef_w || '.nr_seq_plano ' || pls_util_pck.enter_w ||
				'		and	x.nr_seq_grupo = :nr_seq_grupo_produto)';

	valor_bind_p := sql_pck.bind_variable(	':nr_seq_grupo_produto', dados_filtro_prod_p.nr_seq_grupo_produto, valor_bind_p);
end if;

-- Acomodacao

if (dados_filtro_prod_p.nr_seq_tipo_acomodacao IS NOT NULL AND dados_filtro_prod_p.nr_seq_tipo_acomodacao::text <> '') then

	ds_filtro_prod_w := 	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	exists	(select	1' || pls_util_pck.enter_w ||
				'		from	pls_plano_acomodacao x ' || pls_util_pck.enter_w ||
				'		where	x.nr_seq_plano = ' || ds_alias_benef_w || '.nr_seq_plano ' || pls_util_pck.enter_w ||
				'		and	x.nr_seq_tipo_acomodacao = :nr_seq_tipo_acomodacao)';

	valor_bind_p := sql_pck.bind_variable(	':nr_seq_tipo_acomodacao', dados_filtro_prod_p.nr_seq_tipo_acomodacao, valor_bind_p);
end if;

-- Categoria

if (dados_filtro_prod_p.nr_seq_categoria IS NOT NULL AND dados_filtro_prod_p.nr_seq_categoria::text <> '') then

	ds_filtro_prod_w := 	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	exists	(select	1' || pls_util_pck.enter_w ||
				'		from	pls_plano_acomodacao y ' || pls_util_pck.enter_w ||
				'		where	y.nr_seq_plano = ' || ds_alias_benef_w || '.nr_seq_plano ' || pls_util_pck.enter_w ||
				'		and	y.nr_seq_categoria = :nr_seq_categoria)';

	valor_bind_p := sql_pck.bind_variable(	':nr_seq_categoria', dados_filtro_prod_p.nr_seq_categoria, valor_bind_p);
end if;

-- Regulamentacao

if (dados_filtro_prod_p.ie_regulamentacao IS NOT NULL AND dados_filtro_prod_p.ie_regulamentacao::text <> '') then
		ds_filtro_prod_w :=	ds_filtro_prod_w || pls_util_pck.enter_w ||
				'and	' || ds_alias_benef_w || '.ie_regulamentacao = :ie_regulamentacao ';

	valor_bind_p := sql_pck.bind_variable(	':ie_regulamentacao', dados_filtro_prod_p.ie_regulamentacao, valor_bind_p);
end if;

-- So monta o select se o filtro for em branco,  caso ele esteja em branco nem monta a restricao.

if (ds_filtro_prod_w IS NOT NULL AND ds_filtro_prod_w::text <> '') then

	dados_restricao_w.ds_restricao  := 	pls_util_pck.enter_w || dados_restricao_w.ds_restricao || pls_util_pck.enter_w ||
						ds_select_prod_w || pls_util_pck.enter_w || ds_filtro_prod_w ||'		)';
end if;


return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_tipos_ocor_pck.obter_restricao_produto ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_filtro_p pls_tipos_ocor_pck.dados_filtro, dados_filtro_prod_p pls_tipos_ocor_pck.dados_filtro_prod, ie_tipo_tabela_p text, valor_bind_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
