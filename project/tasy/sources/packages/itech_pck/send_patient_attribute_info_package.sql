-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE itech_pck.send_patient_attribute_info ( cd_pessoa_fisica_p text, nm_usuario_p text, log_sequence_number_p text default 0, file_name_p text default null, cd_establishment_p bigint default 1) AS $body$
DECLARE

    filename_w  varchar(255);
    nr_prescricao_w prescr_procedimento.nr_prescricao%type;
    nr_atendimento_w atendimento_paciente.nr_atendimento%type;
    nr_seq_interno_w prescr_procedimento.nr_seq_interno%type;
    is_inf_rec_w    varchar(1);
	nr_prontuario_w pessoa_fisica.nr_prontuario%type;

    c05 CURSOR FOR
    SELECT  count(*) over () total_count_row,
            a.abo_system,
            a.rh_system,
            CASE WHEN coalesce(a.abo_system::text, '') = '' THEN  '0'  ELSE '1' END  blood_type_flag
    from    bft_patient_v a
    where   patient_id = cd_pessoa_fisica_p  LIMIT 1;

    r_patien_info_count c05%rowtype;

    c06 CURSOR FOR
	SELECT 	coalesce(a.infection_records,'0') infection_records,
            coalesce(a.infection_group,'0') infection_group,
            coalesce(a.infection_code, ' ') infection_code,
            coalesce(to_char(a.date_of_infection , 'YYYYMMDD'), ' ') date_of_infection,
            coalesce(a.infection_name, ' ') infection_name,
            coalesce(a.current_status , ' ')  current_status
    from    (
                SELECT  count(*) over () infection_records,
                            a.cd_tipo_infeccao infection_group,
                            a.cd_doenca infection_code,
                            coalesce(a.dt_exame, a.dt_registro) date_of_infection,
                            obter_desc_cid_doenca(a.cd_doenca) infection_name,
                            case
                                when(coalesce(dt_fim::text, '') = '' and a.ie_nega_infeccao  <> 'S') then '+'
                                when ((a.dt_fim IS NOT NULL AND a.dt_fim::text <> '') and (clock_timestamp()  <  a.dt_fim) and a.ie_nega_infeccao  <> 'S') then '-'
                                when(coalesce(a.ie_nega_infeccao, 'N') = 'S') then ' '
                            end  current_status
                from    	historico_infeccao a
                left outer join tipo_infeccao b
                on  	    a.cd_tipo_infeccao = b.nr_sequencia
                where	coalesce(a.dt_inativacao::text, '') = ''
                and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
                and     a.cd_pessoa_fisica = cd_pessoa_fisica_p
            ) a;

    c07 CURSOR FOR
    SELECT  obter_sinal_vital(a.encounter_id, 'ALTURA') patient_height,
            obter_sinal_vital(a.encounter_id, 'PESO') patient_weight,
			CASE WHEN obter_inf_saude_mulher(a.encounter_id, 'P')='N' THEN  '0' WHEN obter_inf_saude_mulher(a.encounter_id, 'P')='S' THEN  '2' END  patient_pregnant_flag,
			CASE WHEN obter_inf_saude_mulher(a.encounter_id, 'PW')='N' THEN  ' '  ELSE obter_inf_saude_mulher(a.encounter_id, 'PW') END  patient_pregnant_week
    from    bft_encounter_v a
    where   a.encounter_id = nr_atendimento_w;
    r_count c06%rowtype;


BEGIN

    PERFORM set_config('itech_pck.log_sequence_number_w', log_sequence_number_p, false);
    filename_w := null;
    PERFORM set_config('itech_pck.ds_line_w', null, false);

    select  itech_pck.get_directory_event_code('1T')
    into STRICT  current_setting('itech_pck.cd_integartion_event_w')::philips_json
;


    PERFORM set_config('itech_pck.control_code_w', current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['control_code'].value_of(), false);
    PERFORM set_config('itech_pck.log_code_w', current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_log'].value_of(), false);
    PERFORM set_config('itech_pck.nr_seq_evento_int_w', current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['integration_event_code'].value_of(), false);
    PERFORM set_config('itech_pck.event_index_error_code_w', current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_index_error'].value_of(), false);
    if (log_sequence_number_p > 0) then
      begin
        CALL CALL itech_pck.delete_error_file( file_name_p, current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_data_error'].value_of(), current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_index_error'].value_of(), current_setting('itech_pck.log_code_w')::varchar(5));
      exception
      when others then
        PERFORM set_config('itech_pck.ds_log_message_w', 'Error occured while deleting the file from error folder  for'
                            || 'Patient attribute information'
                            || '.'
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Integration name - Patient attribute information'
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Time of faliure : '
                            || clock_timestamp()
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Patient Id'
                            || cd_pessoa_fisica_p
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'file Name'
                            || file_name_p, false);

          record_integration_call_log(nm_usuario_p, nm_usuario_p, clock_timestamp(), 'Patient attribute information',
          'Patient attribute information','E', 'E', null, current_setting('itech_pck.ds_log_message_w')::varchar(32767), null,
          current_setting('itech_pck.ds_log_message_w')::varchar(32767), file_name_p, current_setting('itech_pck.log_sequence_number_w')::integration_message_log.nr_seq_int_call_log%type, cd_pessoa_fisica_p, current_setting('itech_pck.nr_seq_evento_int_w')::integration_call_log.nr_seq_evento_int%type);
      end;
    end if;

    begin

      select    coalesce(max(a.nr_prescricao), 0),
                coalesce(max(a.nr_atendimento), 0),
                coalesce(max(b.nr_prontuario), 0)
      into STRICT      nr_prescricao_w,
                nr_atendimento_w,
                nr_prontuario_w
      from      prescr_medica a,
                pessoa_fisica b
      where     a.cd_pessoa_fisica = b.cd_pessoa_fisica
      and       a.cd_pessoa_fisica = cd_pessoa_fisica_p;

      select    max(nr_seq_interno)
      into STRICT      nr_seq_interno_w
      from      prescr_procedimento
      where     nr_prescricao = nr_prescricao_w;

      CALL itech_pck.itech_common_header('1', '1T', nr_prescricao_w, nr_atendimento_w, nr_seq_interno_w);

      for r_c05 in c05
      loop
        begin
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c05.abo_system,2,'R');
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c05.rh_system,1,'L');
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c05.blood_type_flag,1,'L');
        end;
      end loop;

        select  CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END 
        into STRICT    is_inf_rec_w
        from    historico_infeccao a,
                tipo_infeccao b
        where   a.cd_tipo_infeccao = b.nr_sequencia
        and	    coalesce(a.dt_inativacao::text, '') = ''
        and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
        and     a.cd_pessoa_fisica = cd_pessoa_fisica_p;
		
		if is_inf_rec_w = 'N' then
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text('00000',5,'L','0');
		else
			open c06;
				fetch c06 into r_count;
				if (c06%notfound) then
					CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(0, 5, 'L', '0'); -- ALG_NUM
				else
					CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_count.infection_records, 5, 'L', '0'); -- ALG_NUM
				end if;
			close c06;
		--Append infection record information
			for r_c06 in c06
			loop
			  begin
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c06.infection_group,4,'R',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c06.infection_code,4,'R',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c06.date_of_infection,8,'R', ' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c06.infection_name,20,'R',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c06.current_status,1,'R', ' ');
			  end;
			end loop;
		end if;
	

      for r_c07 in c07
      loop
        begin
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(replace(to_char(r_c07.patient_height), ',', '.'),8,'R',' ');
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(replace(to_char(r_c07.patient_weight),',', '.'),8,'R',' ');
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c07.patient_pregnant_flag,1,'R',' ');
          CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(r_c07.patient_pregnant_week,2,'R',' ');
        end;
      end loop;

      if (file_name_p IS NOT NULL AND file_name_p::text <> '') then
        filename_w := file_name_p;
      else
        generate_int_serial_number(nr_prescricao_w, current_setting('itech_pck.control_code_w')::varchar(5), cd_establishment_p, nm_usuario_p, current_setting('itech_pck.filename_sequence_w')::int_serial_number.nr_serial%type, current_setting('itech_pck.nr_seq_evento_int_w')::integration_call_log.nr_seq_evento_int%type);
        filename_w := 'HABBI'||current_setting('itech_pck.control_code_w')::varchar(5)||to_char(clock_timestamp(),'YYYYMMDD')||to_char(clock_timestamp(),'HH24MISS')||lpad(to_char(current_setting('itech_pck.filename_sequence_w')::int_serial_number.nr_serial%type), 4, '0')||'.dat';
      end if;
      CALL CALL CALL itech_pck.generate_file(current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_data'].value_of(), filename_w, current_setting('itech_pck.ds_line_w')::varchar(32767)); --create a data file
      PERFORM set_config('itech_pck.ds_line_w', null, false);
      CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL itech_pck.append_text(filename_w,length(filename_w),'L');
      CALL CALL CALL itech_pck.generate_file(current_setting('itech_pck.cd_integartion_event_w')::philips_json.get['cd_event_index'].value_of(), filename_w, current_setting('itech_pck.ds_line_w')::varchar(32767)); --create an index file
	  PERFORM set_config('itech_pck.ds_log_message_w', itech_pck.get_log_message(filename_w, current_setting('itech_pck.control_code_w')::varchar(5), 'BI', nr_prontuario_w, nr_prescricao_w, nm_usuario_p), false);
      CALL CALL itech_pck.save_log(current_setting('itech_pck.log_code_w')::varchar(5), current_setting('itech_pck.log_file_name_w')::varchar(255), current_setting('itech_pck.ds_log_message_w')::varchar(32767));
    exception
    when others then
      PERFORM set_config('itech_pck.ds_log_message_w', 'File generation failed for data and index folder for '
                            || 'Patient attribute information'
                            || '.'
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Integration name - Patient attribute information'
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Time of faliure : '
                            || clock_timestamp()
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'Patient Id'
                            || cd_pessoa_fisica_p
                            || current_setting('itech_pck.ds_line_w')::varchar(32767)
                            || 'file Name'
                            || file_name_p, false);

          record_integration_call_log(nm_usuario_p, nm_usuario_p, clock_timestamp(), 'Patient attribute information', 'Patient attribute information',
          'E', 'E', null, current_setting('itech_pck.ds_log_message_w')::varchar(32767), null,
          current_setting('itech_pck.ds_log_message_w')::varchar(32767), file_name_p, current_setting('itech_pck.log_sequence_number_w')::integration_message_log.nr_seq_int_call_log%type, cd_pessoa_fisica_p, current_setting('itech_pck.nr_seq_evento_int_w')::integration_call_log.nr_seq_evento_int%type);
          CALL CALL itech_pck.save_log(current_setting('itech_pck.log_code_w')::varchar(5), current_setting('itech_pck.log_file_name_w')::varchar(255), current_setting('itech_pck.ds_log_message_w')::varchar(32767));
      end;
	-- Updating Tasy Log 
    PERFORM set_config('itech_pck.ds_script_w', 'itech_pck.send_patient_attribute_info ('
                  || current_setting('itech_pck.ds_guampa_w')::varchar(10)||cd_pessoa_fisica_p||current_setting('itech_pck.ds_guampa_w')::varchar(10)||','
                  || current_setting('itech_pck.ds_guampa_w')::varchar(10)||':nm_exec_user' ||current_setting('itech_pck.ds_guampa_w')::varchar(10) ||','
                  || ':nr_seq_int_call_log'||',' 
                  || current_setting('itech_pck.ds_guampa_w')::varchar(10)||filename_w||current_setting('itech_pck.ds_guampa_w')::varchar(10)||','
                  || cd_establishment_p
                  || ');', false);
    record_integration_call_log(nm_usuario_p, nm_usuario_p, clock_timestamp(), 'Patient attribute information',
    'Patient attribute information', 'T', 'E', current_setting('itech_pck.ds_script_w')::integration_call_log.ds_resend_script%type, current_setting('itech_pck.ds_log_message_w')::varchar(32767), 
    current_setting('itech_pck.ds_log_message_w')::varchar(32767), null, filename_w, current_setting('itech_pck.log_sequence_number_w')::integration_message_log.nr_seq_int_call_log%type, cd_pessoa_fisica_p, current_setting('itech_pck.nr_seq_evento_int_w')::integration_call_log.nr_seq_evento_int%type);
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE itech_pck.send_patient_attribute_info ( cd_pessoa_fisica_p text, nm_usuario_p text, log_sequence_number_p text default 0, file_name_p text default null, cd_establishment_p bigint default 1) FROM PUBLIC;
