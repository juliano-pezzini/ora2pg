-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

CREATE OR REPLACE PROCEDURE pls_regra_via_acesso_pck.pls_obtem_novo_proc_ref ( dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc_ref, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, i_p INOUT integer, nr_seq_conta_proc_table_p INOUT dbms_sql.number_table, nr_seq_proc_ref_table_p INOUT dbms_sql.number_table) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina responsavel por obter os procedimentos junto a seus novos procedimentos de referencia.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_proc_ref_w	pls_conta_proc.nr_seq_proc_ref%type;
			

BEGIN

if (dados_conta_proc_p.nr_seq_participante_hi IS NOT NULL AND dados_conta_proc_p.nr_seq_participante_hi::text <> '') then -- NR_SEQ_PARTICIPANTE_HI = participante que gerou o honorario individual
	
	if (dados_conta_proc_p.nr_seq_proc_ref_partic IS NOT NULL AND dados_conta_proc_p.nr_seq_proc_ref_partic::text <> '') then
		nr_seq_conta_proc_table_p(i_p)	:= dados_conta_proc_p.nr_seq_conta_proc;
		nr_seq_proc_ref_table_p(i_p)	:= dados_conta_proc_p.nr_seq_proc_ref_partic;	

		i_p := i_p + 1;	
	end if;	
elsif (dados_conta_proc_p.ie_tipo_guia = '6') then	-- Guia de Honorario Individual	
	SELECT * FROM pls_regra_via_acesso_pck.pls_obtem_proc_ref_hi(dados_conta_proc_p, nm_usuario_p, cd_estabelecimento_p, i_p, nr_seq_conta_proc_table_p, nr_seq_proc_ref_table_p) INTO STRICT _ora2pg_r;
 i_p := _ora2pg_r.i_p; nr_seq_conta_proc_table_p := _ora2pg_r.nr_seq_conta_proc_table_p; nr_seq_proc_ref_table_p := _ora2pg_r.nr_seq_proc_ref_table_p;
elsif (dados_conta_proc_p.ie_tipo_guia = '5') then	-- Guia de Resumo de Internacao	
	SELECT * FROM pls_regra_via_acesso_pck.pls_obtem_proc_ref_intern(dados_conta_proc_p, nm_usuario_p, cd_estabelecimento_p, i_p, nr_seq_conta_proc_table_p, nr_seq_proc_ref_table_p) INTO STRICT _ora2pg_r;
 i_p := _ora2pg_r.i_p; nr_seq_conta_proc_table_p := _ora2pg_r.nr_seq_conta_proc_table_p; nr_seq_proc_ref_table_p := _ora2pg_r.nr_seq_proc_ref_table_p;
elsif (dados_conta_proc_p.ie_tipo_guia = '4') then	-- Guia de SP/SADT
	SELECT * FROM pls_regra_via_acesso_pck.pls_obtem_proc_ref_spsadt(dados_conta_proc_p, nm_usuario_p, cd_estabelecimento_p, i_p, nr_seq_conta_proc_table_p, nr_seq_proc_ref_table_p) INTO STRICT _ora2pg_r;
 i_p := _ora2pg_r.i_p; nr_seq_conta_proc_table_p := _ora2pg_r.nr_seq_conta_proc_table_p; nr_seq_proc_ref_table_p := _ora2pg_r.nr_seq_proc_ref_table_p;	
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_regra_via_acesso_pck.pls_obtem_novo_proc_ref ( dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc_ref, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, i_p INOUT integer, nr_seq_conta_proc_table_p INOUT dbms_sql.number_table, nr_seq_proc_ref_table_p INOUT dbms_sql.number_table) FROM PUBLIC;
