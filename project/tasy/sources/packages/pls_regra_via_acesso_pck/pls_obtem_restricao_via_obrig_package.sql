-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

CREATE OR REPLACE FUNCTION pls_regra_via_acesso_pck.pls_obtem_restricao_via_obrig ( ie_opcao_p text, dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc, dados_regra_p pls_regra_via_acesso_pck.dados_regra, cursor_p integer, ie_tipo_item_p text) RETURNS varchar AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina responsavel por obter as restricoes e binds para aplicacao das regras de via de acesso obrigatoria.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 

/* IE_OPCAO_P
	* RESTRICAO
	* BIND 
*/
/* IE_TIPO_ITEM_P
	* CP - conta proc
	* P - Participante
*/
ds_restricao_w		varchar(4000);
ds_alias_w		varchar(5);


BEGIN

ds_restricao_w := null;

if (ie_tipo_item_p = 'CP') then
	ds_alias_w := 'cp.';
else
	ds_alias_w := 'ccp.';
end if;

-- NR_SEQ_PRESTADOR
if (dados_regra_p.nr_seq_prestador IS NOT NULL AND dados_regra_p.nr_seq_prestador::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then	
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'nr_seq_prestador_prot = :nr_seq_prestador 		' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':nr_seq_prestador', dados_regra_p.nr_seq_prestador);
	end if;
end if;

-- CD_PROCEDIMENTO
if (dados_regra_p.cd_procedimento IS NOT NULL AND dados_regra_p.cd_procedimento::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'cd_procedimento = :cd_procedimento 			' || pls_util_pck.enter_w ||
						    ' and ' || ds_alias_w || 'ie_origem_proced = :ie_origem_proced 			' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':cd_procedimento', dados_regra_p.cd_procedimento);
		dbms_sql.bind_variable(cursor_p, ':ie_origem_proced', dados_regra_p.ie_origem_proced);
	end if;
end if;

-- CD_GRUPO_PROC
if (dados_regra_p.cd_grupo_proc IS NOT NULL AND dados_regra_p.cd_grupo_proc::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'cd_grupo_proc = :cd_grupo_proc 				' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':cd_grupo_proc', dados_regra_p.cd_grupo_proc);
	end if;
end if;

-- CD_ESPECIALIDADE
if (dados_regra_p.cd_especialidade IS NOT NULL AND dados_regra_p.cd_especialidade::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then	
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'cd_especialidade = :cd_especialidade 			' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':cd_especialidade', dados_regra_p.cd_especialidade);
	end if;
end if;

-- CD_AREA_PROCEDIMENTO
if (dados_regra_p.cd_area_procedimento IS NOT NULL AND dados_regra_p.cd_area_procedimento::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then	
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'cd_area_procedimento = :cd_area_procedimento 		' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':cd_area_procedimento', dados_regra_p.cd_area_procedimento);
	end if;
end if;

-- DT_INICIO_VIGENCIA 
if (dados_regra_p.dt_inicio_vigencia IS NOT NULL AND dados_regra_p.dt_inicio_vigencia::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then		
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'dt_procedimento_trunc >= :dt_inicio_vigencia		' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':dt_inicio_vigencia', dados_regra_p.dt_inicio_vigencia);
	end if;
end if;

-- DT_FIM_VIGENCIA 
if (dados_regra_p.dt_fim_vigencia IS NOT NULL AND dados_regra_p.dt_fim_vigencia::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then		
		ds_restricao_w := ds_restricao_w || ' and' || ds_alias_w || 'dt_procedimento_trunc <= :dt_fim_vigencia			' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':dt_fim_vigencia', dados_regra_p.dt_fim_vigencia);
	end if;
end if;

-- NR_SEQ_GRUPO_SERVICO
if (dados_regra_p.nr_seq_grupo_servico IS NOT NULL AND dados_regra_p.nr_seq_grupo_servico::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then	
		
		if (pls_util_cta_pck.usar_novo_agrup = 'S') then
			
			ds_restricao_w := ds_restricao_w ||
				'and exists	(select	1 ' || pls_util_pck.enter_w ||
				'		from	pls_grupo_servico_tm grupo ' || pls_util_pck.enter_w ||
				'		where	grupo.nr_seq_grupo_servico = :nr_seq_grupo_servico ' || pls_util_pck.enter_w ||
				'		and	grupo.ie_origem_proced = ' || ds_alias_w || 'ie_origem_proced ' || pls_util_pck.enter_w ||
				'		and	grupo.cd_procedimento = ' || ds_alias_w || 'cd_procedimento ' || pls_util_pck.enter_w ||
				'		)'|| pls_util_pck.enter_w;

		else
			ds_restricao_w := ds_restricao_w ||
				'and	0 <	(select	count(1) ' || pls_util_pck.enter_w ||
				'		from	table(pls_grupos_pck.obter_procs_grupo_servico(:nr_seq_grupo_servico, ' || ds_alias_w || 'ie_origem_proced ,' || ds_alias_w || 'cd_procedimento )) grupo ' || pls_util_pck.enter_w ||
				'		)'|| pls_util_pck.enter_w;
		end if;
	else
		dbms_sql.bind_variable(cursor_p, ':nr_seq_grupo_servico', dados_regra_p.nr_seq_grupo_servico);
	end if;	
end if;	

-- IE_ORIGEM_CONTA
if (dados_regra_p.ie_origem_conta IS NOT NULL AND dados_regra_p.ie_origem_conta::text <> '') then
	if (ie_opcao_p = 'RESTRICAO') then
		ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'ie_origem_conta = :ie_origem_conta 			' || pls_util_pck.enter_w;
	else
		dbms_sql.bind_variable(cursor_p, ':ie_origem_conta', dados_regra_p.ie_origem_conta);
	end if;
end if;

if (ie_tipo_item_p = 'CP') then	

	-- IE_TIPO_GUIA
	if (dados_regra_p.ie_tipo_guia IS NOT NULL AND dados_regra_p.ie_tipo_guia::text <> '') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w := ds_restricao_w || ' and cp.ie_tipo_guia = :ie_tipo_guia 					' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':ie_tipo_guia', dados_regra_p.ie_tipo_guia);
		end if;
	end if;
	
	--IE_CONSIDERAR_HORARIO
	if (dados_regra_p.ie_considerar_horario = 'S') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w := ds_restricao_w || ' and to_char(cp.dt_procedimento_trunc,''dd/mm/yyyy'') = to_char(:dt_procedimento_p,''dd/mm/yyyy'')	' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':dt_procedimento_p', dados_conta_proc_p.dt_procedimento_trunc);
		end if;
		
		
		-- HR_INICIO_PROC
		if (dados_conta_proc_p.hr_inicio_proc IS NOT NULL AND dados_conta_proc_p.hr_inicio_proc::text <> '') then
			if (ie_opcao_p = 'RESTRICAO') then
				ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'hr_inicio_proc = :hr_inicio_proc 				' || pls_util_pck.enter_w;
			else
				dbms_sql.bind_variable(cursor_p, ':hr_inicio_proc', dados_conta_proc_p.hr_inicio_proc);
			end if;
		else
			ds_restricao_w	:= ds_restricao_w || ' and ' || ds_alias_w || 'hr_inicio_proc is null 						' || pls_util_pck.enter_w;
		end if;
		
		-- HR_FIM_PROC
		--criada A CONSISTENCIA PELA DATA FIM DO PROCEDIMENTO SOLICITACAO rODRIGO UL OS 704677
		if (dados_regra_p.ie_considera_data_fim	= 'S') then
			if (dados_conta_proc_p.hr_fim_proc IS NOT NULL AND dados_conta_proc_p.hr_fim_proc::text <> '') then		
				if (ie_opcao_p = 'RESTRICAO') then		
					ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_w || 'hr_fim_proc = :hr_fim_proc 				' || pls_util_pck.enter_w;
				else
					dbms_sql.bind_variable(cursor_p, ':hr_fim_proc', dados_conta_proc_p.hr_fim_proc);
				end if;
			else
				ds_restricao_w	:= ds_restricao_w || ' and ' || ds_alias_w || 'hr_fim_proc is null 						' || pls_util_pck.enter_w;

			end if;
		end if;
	elsif (dados_regra_p.ie_considerar_horario = 'N') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w := ds_restricao_w || ' and pls_obter_minutos_intervalo(cp.dt_inicio_proc,:dt_procedimento_p,:qt_minuto) = ''S'' ' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':dt_procedimento_p', dados_conta_proc_p.dt_inicio_proc);
			dbms_sql.bind_variable(cursor_p, ':qt_minuto', dados_regra_p.qt_horario);
		end if;
	end if;
	
	--IE_PROC_REF_VIA
	if (dados_regra_p.ie_proc_ref_via = 'S') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w := ds_restricao_w || ' and	cp.nr_seq_proc_ref	is null ' || pls_util_pck.enter_w;
		end if;
	end if;

	-- IE_REGRA
	if (dados_regra_p.ie_regra	= 'M') then
		if (ie_opcao_p = 'RESTRICAO') then	
			ds_restricao_w := ds_restricao_w || ' and pls_obter_med_grau_part_exec(cp.nr_sequencia ,''P'', ''M'') = :cd_medico_executor ' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':cd_medico_executor', dados_conta_proc_p.cd_medico_executor);
		end if;
	elsif (dados_regra_p.ie_regra	= 'MP') then
		if (ie_opcao_p = 'RESTRICAO') then		
			ds_restricao_w := ds_restricao_w || ' and pls_obter_med_grau_part_exec(cp.nr_sequencia, ''P'', ''M'') = :cd_medico_executor ' || pls_util_pck.enter_w||
							    ' and pls_obter_med_grau_part_exec(cp.nr_sequencia, ''P'', ''G'') = :nr_seq_grau_partic  ' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':cd_medico_executor', dados_conta_proc_p.cd_medico_executor);
			dbms_sql.bind_variable(cursor_p, ':nr_seq_grau_partic', dados_conta_proc_p.nr_seq_grau_partic);
		end if;
	elsif (dados_regra_p.ie_regra	= 'MG') then
		if (ie_opcao_p = 'RESTRICAO') then	
			ds_restricao_w	:= ds_restricao_w || ' and (cp.ie_tipo_guia in (''5'',''6'') or cp.ie_tipo_guia = :ie_tipo_guia) ' || pls_util_pck.enter_w;
		else
			dbms_sql.bind_variable(cursor_p, ':ie_tipo_guia', dados_conta_proc_p.ie_tipo_guia);
		end if;
	end if;
end if;

return ds_restricao_w;
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_regra_via_acesso_pck.pls_obtem_restricao_via_obrig ( ie_opcao_p text, dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc, dados_regra_p pls_regra_via_acesso_pck.dados_regra, cursor_p integer, ie_tipo_item_p text) FROM PUBLIC;
