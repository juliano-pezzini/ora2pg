-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

CREATE OR REPLACE PROCEDURE pls_regra_via_acesso_pck.pls_obtem_proc_obrig_via ( dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, i_p INOUT integer, nr_seq_conta_proc_table_p INOUT dbms_sql.number_table, nr_seq_regra_via_table_p INOUT dbms_sql.number_table) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Rotina responsavel por obter os procedimentos que terao a via de acesso obrigatoria (IE_VIA_OBRIGATORIA = 'S').
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 			
			
nr_seq_regra_via_w	pls_regra_via_acesso.nr_sequencia%type;
nr_seq_regra_w		pls_regra_via_acesso.nr_sequencia%type;
ie_via_obrigatoria_w	pls_regra_via_acesso.ie_via_obrigatoria%type;
			
dados_regra_w		pls_regra_via_acesso_pck.dados_regra;
			
ie_excecao_w		varchar(1);

ie_via_obrig_regra_w	pls_regra_via_acesso.ie_via_obrigatoria%type;
ie_proc_ref_via_w	pls_parametros.ie_proc_ref_via%type;

qt_proc_conta_w		integer;
		
/* Obs: nao e necessario transformar este SELECT em um SELECT DINAMICO porque ate entao (27/02/2014) a quantidade de regras de via obrigatoria e muito pequena. (Na Unimed Litoral existe apenas uma regra.) */

C01 CURSOR(	nr_seq_prestador_pc	pls_protocolo_conta.nr_seq_prestador%type,
		cd_procedimento_pc	procedimento.cd_procedimento%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type,		
		cd_grupo_proc_pc	procedimento.cd_grupo_proc%type,
		cd_especialidade_pc	pls_conta_proc_v.cd_especialidade%type,
		ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
		ie_origem_conta_pc	pls_conta.ie_origem_conta%type,
		cd_area_procedimento_pc	pls_conta_proc_v.cd_area_procedimento%type,		
		dt_procedimento_pc	pls_conta_proc.dt_procedimento%type)FOR		
	SELECT	a.nr_sequencia nr_seq_regra,
		a.nr_seq_prestador,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.cd_area_procedimento,	
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,		
		a.nr_seq_grupo_servico,	
		a.ie_origem_conta,
		a.ie_tipo_guia,		
		a.ie_regra,
		a.qt_procedimento,
		coalesce(a.ie_via_obrigatoria,'N') ie_via_obrigatoria,
		coalesce(a.ie_considera_data_fim,'S') ie_considera_data_fim,
		coalesce(a.ie_considerar_horario,'S') ie_considerar_horario,
		coalesce(a.qt_horario,0) qt_horario,
		a.ie_tipo_qt_horario ie_tipo_qt_horario
	from	pls_regra_via_acesso	a
	where	a.ie_situacao = 'A'
	and	((coalesce(a.nr_seq_prestador::text, '') = '') 	or (a.nr_seq_prestador 	= nr_seq_prestador_pc))
	and	((coalesce(a.cd_procedimento::text, '') = '') 	or (a.cd_procedimento	= cd_procedimento_pc AND a.ie_origem_proced = ie_origem_proced_pc))
	and	((coalesce(a.cd_grupo_proc::text, '') = '') 	or (a.cd_grupo_proc 	= cd_grupo_proc_pc))
	and	((coalesce(a.cd_especialidade::text, '') = '') 	or (a.cd_especialidade	= cd_especialidade_pc))	
	and	((coalesce(a.ie_tipo_guia::text, '') = '') 	or (a.ie_tipo_guia 	= ie_tipo_guia_pc))
	and	((coalesce(a.ie_origem_conta::text, '') = '') 	or (a.ie_origem_conta	= ie_origem_conta_pc))
	and	((coalesce(a.cd_area_procedimento::text, '') = '') or (a.cd_area_procedimento = cd_area_procedimento_pc))
	and	dt_procedimento_pc between  coalesce(dt_inicio_vigencia,dt_procedimento_pc) and coalesce(dt_fim_vigencia,dt_procedimento_pc)
	and	((coalesce(a.nr_seq_grupo_servico::text, '') = '') or (exists (	SELECT	1
								from	table(pls_grupos_pck.obter_procs_grupo_servico(a.nr_seq_grupo_servico, ie_origem_proced_pc,cd_procedimento_pc)) grupo)))
	order 	by a.cd_area_procedimento desc,
		a.cd_especialidade desc,
		a.cd_grupo_proc desc,
		a.cd_procedimento desc,
		a.nr_seq_grupo_servico desc,
		coalesce(nr_seq_prestador,0) desc;
		
C02 CURSOR(	nr_seq_prestador_pc	pls_protocolo_conta.nr_seq_prestador%type,
		cd_procedimento_pc	procedimento.cd_procedimento%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type,		
		cd_grupo_proc_pc	procedimento.cd_grupo_proc%type,
		cd_especialidade_pc	pls_conta_proc_v.cd_especialidade%type,
		ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
		ie_origem_conta_pc	pls_conta.ie_origem_conta%type,
		cd_area_procedimento_pc	pls_conta_proc_v.cd_area_procedimento%type,		
		dt_procedimento_pc	pls_conta_proc.dt_procedimento%type)FOR		
	SELECT	a.nr_sequencia nr_seq_regra,
		a.nr_seq_prestador,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.cd_area_procedimento,	
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,		
		a.nr_seq_grupo_servico,	
		a.ie_origem_conta,
		a.ie_tipo_guia,		
		a.ie_regra,
		a.qt_procedimento,
		coalesce(a.ie_via_obrigatoria,'N') ie_via_obrigatoria,
		coalesce(a.ie_considera_data_fim,'S') ie_considera_data_fim,
		coalesce(a.ie_considerar_horario,'S') ie_considerar_horario,
		coalesce(a.qt_horario,0) qt_horario,
		a.ie_tipo_qt_horario ie_tipo_qt_horario
	from	pls_regra_via_acesso	a
	where	a.ie_situacao = 'A'
	and	((coalesce(a.nr_seq_prestador::text, '') = '') 	or (a.nr_seq_prestador 	= nr_seq_prestador_pc))
	and	((coalesce(a.cd_procedimento::text, '') = '') 	or (a.cd_procedimento	= cd_procedimento_pc AND a.ie_origem_proced = ie_origem_proced_pc))
	and	((coalesce(a.cd_grupo_proc::text, '') = '') 	or (a.cd_grupo_proc 	= cd_grupo_proc_pc))
	and	((coalesce(a.cd_especialidade::text, '') = '') 	or (a.cd_especialidade	= cd_especialidade_pc))	
	and	((coalesce(a.ie_tipo_guia::text, '') = '') 	or (a.ie_tipo_guia 	= ie_tipo_guia_pc))
	and	((coalesce(a.ie_origem_conta::text, '') = '') 	or (a.ie_origem_conta	= ie_origem_conta_pc))
	and	((coalesce(a.cd_area_procedimento::text, '') = '') or (a.cd_area_procedimento = cd_area_procedimento_pc))
	and	dt_procedimento_pc between  coalesce(dt_inicio_vigencia,dt_procedimento_pc) and coalesce(dt_fim_vigencia,dt_procedimento_pc)
	and	((coalesce(a.nr_seq_grupo_servico::text, '') = '') or (exists (	SELECT	1
								from	pls_grupo_servico_tm grupo
								where	grupo.nr_seq_grupo_servico = a.nr_seq_grupo_servico
								and	grupo.ie_origem_proced = ie_origem_proced_pc
								and	grupo.cd_procedimento = cd_procedimento_pc)))
	order 	by a.cd_area_procedimento desc,
		a.cd_especialidade desc,
		a.cd_grupo_proc desc,
		a.cd_procedimento desc,
		a.nr_seq_grupo_servico desc,
		coalesce(nr_seq_prestador,0) desc;		
		
BEGIN

/* IMPORTANTE:
As regras devem ser verificadas primeiramente para cada um dos procedimentos que estao entrando nesta procedure.
Para cada um dos procedimentos que se encaixarem na regra, devera ser verificada a quantidade de procedimentos semelhantes que tambem se encaixam na regra.
O procedimento somente tera o campo IE_VIA_OBRIGATORIA alterado para 'S' se o mesmo passar pelo cursor C01 e a quantidade de procedimentos semelhantes for maior que a quantidade informada na regra.	

Obs: Houve a necessidade de deixar as restricoes de regra no cursor C01 pois as regras devem ser comparadas tanto com os procedimentos que estao entrando nesta procedure, como para contabilizar os procedimentos semelhantes ao verificar a quantidade. */
ie_via_obrigatoria_w := 'N';
-- Cursor de regras de via de acesso obrigatorios
--Considerar procedimento de ref para via acesso
ie_proc_ref_via_w := pls_regra_via_acesso_pck.pls_obter_proc_ref_via(cd_estabelecimento_p);

if (pls_util_cta_pck.usar_novo_agrup = 'S') then

	for r_c02_w in C02(	dados_conta_proc_p.nr_seq_prestador_prot,
				dados_conta_proc_p.cd_procedimento,
				dados_conta_proc_p.ie_origem_proced,
				dados_conta_proc_p.cd_grupo_proc,
				dados_conta_proc_p.cd_especialidade,
				dados_conta_proc_p.ie_tipo_guia,
				dados_conta_proc_p.ie_origem_conta,
				dados_conta_proc_p.cd_area_procedimento,			
				dados_conta_proc_p.dt_procedimento_trunc) loop
		begin	
		-- Verifica se existe alguma regra de excecao para a regra de via de acesso
		ie_excecao_w := pls_regra_via_acesso_pck.pls_se_excecao_via_acesso(r_c02_w.nr_seq_regra, dados_conta_proc_p.ie_origem_conta);
	
		
		if (ie_excecao_w = 'N') then		
			-- Atribui os valores para os campos do type DADOS_REGRA		
			dados_regra_w.nr_seq_prestador		:= r_c02_w.nr_seq_prestador;
			dados_regra_w.cd_procedimento		:= r_c02_w.cd_procedimento;
			dados_regra_w.ie_origem_proced		:= r_c02_w.ie_origem_proced;
			dados_regra_w.cd_grupo_proc		:= r_c02_w.cd_grupo_proc;
			dados_regra_w.cd_especialidade		:= r_c02_w.cd_especialidade;
			dados_regra_w.cd_area_procedimento	:= r_c02_w.cd_area_procedimento;
			dados_regra_w.dt_inicio_vigencia	:= r_c02_w.dt_inicio_vigencia;
			dados_regra_w.dt_fim_vigencia		:= r_c02_w.dt_fim_vigencia;	
			dados_regra_w.nr_seq_grupo_servico	:= r_c02_w.nr_seq_grupo_servico;	
			dados_regra_w.ie_origem_conta		:= r_c02_w.ie_origem_conta;					
			dados_regra_w.ie_tipo_guia		:= r_c02_w.ie_tipo_guia;
			dados_regra_w.ie_regra			:= r_c02_w.ie_regra;
			dados_regra_w.qt_procedimento		:= r_c02_w.qt_procedimento;	
			dados_regra_w.ie_considera_data_fim	:= r_c02_w.ie_considera_data_fim;
			dados_regra_w.ie_considerar_horario	:= r_c02_w.ie_considerar_horario;
			dados_regra_w.qt_horario		:= r_c02_w.qt_horario;
			dados_regra_w.ie_tipo_qt_horario	:= r_c02_w.ie_tipo_qt_horario;
			dados_regra_w.ie_proc_ref_via		:= ie_proc_ref_via_w;
			ie_via_obrig_regra_w	:= r_c02_w.ie_via_obrigatoria;
			qt_proc_conta_w		:= 0;	
			
			
			if (r_c02_w.ie_tipo_qt_horario = 'H') then
				dados_regra_w.qt_minuto := coalesce(r_c02_w.qt_horario,0) * 60;
			elsif (r_c02_w.ie_tipo_qt_horario = 'M') then
				dados_regra_w.qt_minuto := coalesce(r_c02_w.qt_horario,0);
			end if;	
			
			-- Se a aplicacao da regra for diferente de "Mesma guia" ou o tipo de guia for diferente de resumo de internacao, entao...
			if	(r_c02_w.ie_regra != 'MG') or -- 'MG' = Mesma guia
				(dados_conta_proc_p.ie_tipo_guia != '5') then -- '5' = Guia de Resumo de Internacao	
				-- Obtem a quantidade de procedimentos que se encaixa na regra
				qt_proc_conta_w	:= pls_regra_via_acesso_pck.pls_obtem_qt_proc_obrig(dados_conta_proc_p, dados_regra_w, nm_usuario_p, cd_estabelecimento_p);				
				
			else	--Verifica as contas de resumo de internacao onde existe conta proc diferente com mesmo medico executor ou prestador executor	
			
				-- Obtem a quantidade de procedimentos que se encaixa na regra
				qt_proc_conta_w := pls_regra_via_acesso_pck.pls_obtem_qt_proc_obrig_intern(dados_conta_proc_p, dados_regra_w, nm_usuario_p, cd_estabelecimento_p);					
			end if;	
			
			if (qt_proc_conta_w >= dados_regra_w.qt_procedimento) then
				nr_seq_regra_w := r_c02_w.nr_seq_regra;
				exit;
			end if;		
		end if;	
		end;
	end loop;
else
	for r_c01_w in C01(	dados_conta_proc_p.nr_seq_prestador_prot,
				dados_conta_proc_p.cd_procedimento,
				dados_conta_proc_p.ie_origem_proced,
				dados_conta_proc_p.cd_grupo_proc,
				dados_conta_proc_p.cd_especialidade,
				dados_conta_proc_p.ie_tipo_guia,
				dados_conta_proc_p.ie_origem_conta,
				dados_conta_proc_p.cd_area_procedimento,			
				dados_conta_proc_p.dt_procedimento_trunc) loop
		begin	
		-- Verifica se existe alguma regra de excecao para a regra de via de acesso
		ie_excecao_w := pls_regra_via_acesso_pck.pls_se_excecao_via_acesso(r_c01_w.nr_seq_regra, dados_conta_proc_p.ie_origem_conta);
		
		if (ie_excecao_w = 'N') then		
			-- Atribui os valores para os campos do type DADOS_REGRA		
			dados_regra_w.nr_seq_prestador		:= r_C01_w.nr_seq_prestador;
			dados_regra_w.cd_procedimento		:= r_C01_w.cd_procedimento;
			dados_regra_w.ie_origem_proced		:= r_C01_w.ie_origem_proced;
			dados_regra_w.cd_grupo_proc		:= r_C01_w.cd_grupo_proc;
			dados_regra_w.cd_especialidade		:= r_C01_w.cd_especialidade;
			dados_regra_w.cd_area_procedimento	:= r_C01_w.cd_area_procedimento;
			dados_regra_w.dt_inicio_vigencia	:= r_C01_w.dt_inicio_vigencia;
			dados_regra_w.dt_fim_vigencia		:= r_C01_w.dt_fim_vigencia;	
			dados_regra_w.nr_seq_grupo_servico	:= r_C01_w.nr_seq_grupo_servico;	
			dados_regra_w.ie_origem_conta		:= r_C01_w.ie_origem_conta;					
			dados_regra_w.ie_tipo_guia		:= r_C01_w.ie_tipo_guia;
			dados_regra_w.ie_regra			:= r_C01_w.ie_regra;
			dados_regra_w.qt_procedimento		:= r_C01_w.qt_procedimento;	
			dados_regra_w.ie_considera_data_fim	:= r_c01_w.ie_considera_data_fim;
			dados_regra_w.ie_considerar_horario	:= r_c01_w.ie_considerar_horario;
			dados_regra_w.qt_horario		:= r_c01_w.qt_horario;
			dados_regra_w.ie_tipo_qt_horario	:= r_c01_w.ie_tipo_qt_horario;
			dados_regra_w.ie_proc_ref_via		:= ie_proc_ref_via_w;
			ie_via_obrig_regra_w	:= r_C01_w.ie_via_obrigatoria;
			qt_proc_conta_w		:= 0;	
					
			-- Se a aplicacao da regra for diferente de "Mesma guia" ou o tipo de guia for diferente de resumo de internacao, entao...
			if	(r_c01_w.ie_regra != 'MG') or -- 'MG' = Mesma guia
				(dados_conta_proc_p.ie_tipo_guia != '5') then -- '5' = Guia de Resumo de Internacao	
				-- Obtem a quantidade de procedimentos que se encaixa na regra
				
				qt_proc_conta_w	:= pls_regra_via_acesso_pck.pls_obtem_qt_proc_obrig(dados_conta_proc_p, dados_regra_w, nm_usuario_p, cd_estabelecimento_p);
			else	--Verifica as contas de resumo de internacao onde existe conta proc diferente com mesmo medico executor ou prestador executor	
			
				-- Obtem a quantidade de procedimentos que se encaixa na regra
				qt_proc_conta_w := pls_regra_via_acesso_pck.pls_obtem_qt_proc_obrig_intern(dados_conta_proc_p, dados_regra_w, nm_usuario_p, cd_estabelecimento_p);					
			end if;	
			
			if (qt_proc_conta_w >= dados_regra_w.qt_procedimento) then
				nr_seq_regra_w := r_C01_w.nr_seq_regra;
				exit;
			end if;		
		end if;	
		end;
	end loop;
end if;

if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
	ie_via_obrigatoria_w := ie_via_obrig_regra_w;
end if;

if (ie_via_obrigatoria_w = 'S') then
	
	nr_seq_conta_proc_table_p(i_p)	:= dados_conta_proc_p.nr_seq_conta_proc;
	nr_seq_regra_via_table_p(i_p)   := nr_seq_regra_w;

	i_p := i_p + 1;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_regra_via_acesso_pck.pls_obtem_proc_obrig_via ( dados_conta_proc_p pls_regra_via_acesso_pck.c_dados_proc, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, i_p INOUT integer, nr_seq_conta_proc_table_p INOUT dbms_sql.number_table, nr_seq_regra_via_table_p INOUT dbms_sql.number_table) FROM PUBLIC;
