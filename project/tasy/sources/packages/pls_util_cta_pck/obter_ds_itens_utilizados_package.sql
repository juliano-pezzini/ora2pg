-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_util_cta_pck.obter_ds_itens_utilizados ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, ie_origem_proced_p procedimento.ie_origem_proced%type, cd_procedimento_p procedimento.cd_procedimento%type, nr_seq_material_p pls_material.nr_sequencia%type, ie_tipo_item_p pls_conta_autor_utilizada_v.ie_tipo_item%type, ds_separador_p text) RETURNS varchar AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Obter a descricao dos itens que foram executados para determinada guia e item especificado.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


current_setting('pls_util_cta_pck.ds_sql_w')::varchar(4000)	varchar(4000);

var_cur_w	integer;
current_setting('pls_util_cta_pck.var_exec_w')::integer	integer;
current_setting('pls_util_cta_pck.var_retorno_w')::integer	integer;

nr_seq_conta_w	pls_conta_v.nr_sequencia%type;
ds_retorno_w	varchar(4000);


BEGIN

if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then

	
	PERFORM set_config('pls_util_cta_pck.ds_sql_w', 'select	distinct ca.nr_seq_conta ' || pls_util_pck.enter_w ||
			'from	pls_conta_autor_utilizada_v ca ' || pls_util_pck.enter_w ||
			'where	ca.nr_seq_guia = :nr_seq_guia ', false);
	
	if (ie_tipo_item_p IS NOT NULL AND ie_tipo_item_p::text <> '') then

		PERFORM set_config('pls_util_cta_pck.ds_sql_w', current_setting('pls_util_cta_pck.ds_sql_w')::varchar(4000) || pls_util_pck.enter_w ||
				'and	ca.ie_tipo_item	= :ie_tipo_item ', false);
	end if;

	-- Sempre que for informado um proceidmento em especifico busca apenas as contas que contam este procedimento informado.

	if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') then

		PERFORM set_config('pls_util_cta_pck.ds_sql_w', current_setting('pls_util_cta_pck.ds_sql_w')::varchar(4000) || pls_util_pck.enter_w ||
				'and	ca.ie_origem_proced	= :ie_origem_proced ' || pls_util_pck.enter_w ||
				'and	ca.cd_procedimento	= :cd_procedimento ', false);
	end if;

	-- Sempre que for informado um material em especifico busca apenas as contas que tiveram este material informado.

	if (nr_seq_material_p IS NOT NULL AND nr_seq_material_p::text <> '') then

		PERFORM set_config('pls_util_cta_pck.ds_sql_w', current_setting('pls_util_cta_pck.ds_sql_w')::varchar(4000) || pls_util_pck.enter_w ||
				'and	ca.nr_seq_material	= :nr_seq_material ', false);
	end if;

	
	var_cur_w := dbms_sql.open_cursor;
	dbms_sql.parse(var_cur_w, current_setting('pls_util_cta_pck.ds_sql_w')::varchar(4000), dbms_sql.native);

	-- Atualizar os valores das binds informadas no sql dinamico.

	-- A guia e sempre filtrada, sem ele nenhum registro sera retornado, o select so e executado quando ela tem valor informado.

	dbms_sql.bind_variable(var_cur_w, ':nr_seq_guia', nr_seq_guia_p);

	-- se foi informado o tipo de item.

	if (ie_tipo_item_p IS NOT NULL AND ie_tipo_item_p::text <> '') then

		dbms_sql.bind_variable(var_cur_w, ':ie_tipo_item', ie_tipo_item_p);
	end if;

	-- se for informado o procedimento

	if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') then

		dbms_sql.bind_variable(var_cur_w, ':ie_origem_proced', ie_origem_proced_p);
		dbms_sql.bind_variable(var_cur_w, ':cd_procedimento', cd_procedimento_p);
	end if;

	-- se for informado o material

	if (nr_seq_material_p IS NOT NULL AND nr_seq_material_p::text <> '') then

		dbms_sql.bind_variable(var_cur_w, ':nr_seq_material', nr_seq_material_p);
	end if;

	-- Preparar o retorno da execucao do select.

	dbms_sql.define_column(var_cur_w, 1, nr_seq_conta_w);

	-- Executar o select

	PERFORM set_config('pls_util_cta_pck.var_exec_w', dbms_sql.execute(var_cur_w), false);

	-- Varrer o retorno enquanto for encontrado um resutaldo valido.

	loop
	-- Realizar o fetch da linha atual na variavel, se nao houver mais linhas para realizar o fecth e retornado zero, e o exit when trata de encerrar o loop.

	PERFORM set_config('pls_util_cta_pck.var_retorno_w', dbms_sql.fetch_rows(var_cur_w), false);
	exit when current_setting('pls_util_cta_pck.var_retorno_w')::integer = 0;

		-- Obter o valor atual do retorno.

		dbms_sql.column_value(var_cur_w, 1, nr_seq_conta_w);

		-- Se for a primeira conta a passar nao colocar o separador, caso contrario e colocado o separador para diferenciar os registros

		if (coalesce(ds_retorno_w::text, '') = '' or ds_retorno_w = '') then

			ds_retorno_w := nr_seq_conta_w;
		else
			ds_retorno_w := substr(ds_retorno_w || ds_separador_p || nr_seq_conta_w, 1, 4000);
		end if;
	end loop; -- Itens filtrados
	-- Fechar o cursor que foi aberto para filtrar os itens

	dbms_sql.close_cursor(var_cur_w);

	return ds_retorno_w;
end if;

-- Se nao tem a guia nao retorna nada.

return null;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_util_cta_pck.obter_ds_itens_utilizados ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, ie_origem_proced_p procedimento.ie_origem_proced%type, cd_procedimento_p procedimento.cd_procedimento%type, nr_seq_material_p pls_material.nr_sequencia%type, ie_tipo_item_p pls_conta_autor_utilizada_v.ie_tipo_item%type, ds_separador_p text) FROM PUBLIC;
