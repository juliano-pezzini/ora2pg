-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_mens_processo_pck.gerar_taxa_emissao_boleto ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, ie_taxa_emissao_boleto_p pls_contrato_pagador.ie_taxa_emissao_boleto%type, nr_parcela_p pls_mensalidade.nr_parcela%type, nr_seq_pagador_fin_p pls_contrato_pagador_fin.nr_sequencia%type, dt_referencia_p pls_mensalidade.dt_referencia%type) AS $body$
DECLARE


vl_taxa_emissao_w	pls_regra_emissao_boleto.vl_taxa_emissao%type;
cd_tipo_portador_w	pls_contrato_pagador_fin.cd_tipo_portador%type;
cd_portador_w		pls_contrato_pagador_fin.cd_portador%type;

qt_segurado_w		integer;
nr_indice_w		integer;
vl_taxa_benef_w		pls_mensalidade_seg_item.vl_item%type;
vl_diferenca_w		pls_mensalidade_seg_item.vl_item%type;

C01 CURSOR FOR
	SELECT	vl_taxa_emissao
	from	pls_regra_emissao_boleto
	where	ie_situacao	= 'A'
	and	((cd_tipo_portador = cd_tipo_portador_w) or (coalesce(cd_tipo_portador::text, '') = ''))
	and	((cd_portador = cd_portador_w) or (coalesce(cd_portador::text, '') = ''))
	and	dt_referencia_p between dt_inicio_vigencia_ref and dt_fim_vigencia_ref
	and	((ie_primeira_mensalidade = 'N' AND nr_parcela_p > 1) or (ie_primeira_mensalidade = 'S'))
	order by coalesce(ie_primeira_mensalidade,'N'),
		coalesce(cd_portador,0),
		coalesce(cd_tipo_portador,0);

--Cursor para quando for destacado

C02 CURSOR(	nr_seq_mensalidade_pc	pls_mensalidade.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_mensalidade_seg,
		null nr_seq_preco_pre
	from	pls_mensalidade_segurado a
	where	a.nr_seq_mensalidade	= nr_seq_mensalidade_pc
	and	exists (SELECT	1
			from	pls_mensalidade_seg_item x
			where	a.nr_sequencia = x.nr_seq_mensalidade_seg)
	and	ie_taxa_emissao_boleto_p = 'D'
	
union all

	select	b.nr_sequencia nr_seq_mensalidade_seg,
		a.nr_sequencia nr_seq_preco_pre
	from	pls_mensalidade_seg_item	a,
		pls_mensalidade_segurado	b
	where	b.nr_sequencia		= a.nr_seq_mensalidade_seg
	and	a.ie_tipo_item		= '1'
	and	b.nr_seq_mensalidade	= nr_seq_mensalidade_pc
	and	ie_taxa_emissao_boleto_p = 'E';

BEGIN
vl_taxa_emissao_w	:= 0;
nr_indice_w		:= 0;

select	max(cd_tipo_portador),
	max(cd_portador)
into STRICT	cd_tipo_portador_w,
	cd_portador_w
from	pls_contrato_pagador_fin
where	nr_sequencia	= nr_seq_pagador_fin_p;

for r_c01_w in C01 loop
	begin
	vl_taxa_emissao_w	:= r_c01_w.vl_taxa_emissao;
	end;
end loop;

if (vl_taxa_emissao_w > 0) then
	--Se for destacado, ira ratear o valor para todos os beneficiarios da mensalidade

	if (ie_taxa_emissao_boleto_p = 'D') then
		select	count(1)
		into STRICT	qt_segurado_w
		from	pls_mensalidade_segurado a
		where	a.nr_seq_mensalidade	= nr_seq_mensalidade_p
		and	exists (SELECT	1
				from	pls_mensalidade_seg_item x
				where	a.nr_sequencia = x.nr_seq_mensalidade_seg);
	elsif (ie_taxa_emissao_boleto_p = 'E') then --Se for embutido, ira ratear o valor entre os beneficiarios que tem preco pre
		select	count(b.nr_sequencia)
		into STRICT	qt_segurado_w
		from	pls_mensalidade_seg_item	a,
			pls_mensalidade_segurado	b
		where	b.nr_sequencia		= a.nr_seq_mensalidade_seg
		and	a.ie_tipo_item		= '1'
		and	b.nr_seq_mensalidade	= nr_seq_mensalidade_p;
	end if;
	
	if (qt_segurado_w > 0) then
		vl_taxa_benef_w	:= round((vl_taxa_emissao_w/qt_segurado_w)::numeric,2);
		
		for r_c02_w in C02(nr_seq_mensalidade_p) loop
			begin
			vl_diferenca_w	:= 0;
			nr_indice_w	:= nr_indice_w + 1;
			if (nr_indice_w = qt_segurado_w) then
				vl_diferenca_w	:= vl_taxa_emissao_w - (vl_taxa_benef_w * qt_segurado_w);
			end if;
			
			if (ie_taxa_emissao_boleto_p = 'D') then
				insert	into	pls_mensalidade_seg_item(	nr_sequencia, nr_seq_mensalidade_seg, nr_seq_lote,
						dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
						ie_tipo_item, vl_item, ie_tipo_mensalidade
						)
					values (	nextval('pls_mensalidade_seg_item_seq'), r_c02_w.nr_seq_mensalidade_seg, nr_seq_lote_p,
						clock_timestamp(), clock_timestamp(), current_setting('pls_mens_processo_pck.nm_usuario_w')::usuario.nm_usuario%type, current_setting('pls_mens_processo_pck.nm_usuario_w')::usuario.nm_usuario%type,
						'17', vl_taxa_benef_w+vl_diferenca_w, 'P'
						);
			elsif (ie_taxa_emissao_boleto_p = 'E') then
				update	pls_mensalidade_seg_item
				set	vl_item		= vl_item + (vl_taxa_benef_w+vl_diferenca_w),
					vl_taxa_boleto	= (vl_taxa_benef_w+vl_diferenca_w)
				where	nr_sequencia	= r_c02_w.nr_seq_preco_pre;
			end if;
			end;
		end loop;
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mens_processo_pck.gerar_taxa_emissao_boleto ( nr_seq_lote_p pls_lote_mensalidade.nr_sequencia%type, nr_seq_mensalidade_p pls_mensalidade.nr_sequencia%type, ie_taxa_emissao_boleto_p pls_contrato_pagador.ie_taxa_emissao_boleto%type, nr_parcela_p pls_mensalidade.nr_parcela%type, nr_seq_pagador_fin_p pls_contrato_pagador_fin.nr_sequencia%type, dt_referencia_p pls_mensalidade.dt_referencia%type) FROM PUBLIC;
