-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Procedure salvar as declaraes de nascidos vivos e declarao de bito na tabela para envio de dados ANS



CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.inserir_nasc_vivo_arquivo_xml ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type ) AS $body$
DECLARE


tb_nr_decl_nasc_vivo_w		pls_util_cta_pck.t_varchar2_table_20;
tb_nr_declaracao_obito_w	pls_util_cta_pck.t_varchar2_table_20;
tb_nr_seq_guia_tiss_w		pls_util_cta_pck.t_number_table;
nr_declaracao_obito_w		pls_diagnost_conta_obito.nr_declaracao_obito%type;
index_w				integer;

C01 CURSOR( nr_seq_lote_pc	pls_monitor_tiss_lote.nr_sequencia%type ) FOR
	SELECT	nr_decl_nasc_vivo,
		nr_sequencia
	from (
		SELECT	distinct substr(pls_gerencia_envio_ans_pck.obter_informacao_alter_varchar(b.nr_seq_conta, 'DN', replace(a.nr_decl_nasc_vivo,'-','')),1,11) nr_decl_nasc_vivo,
			b.nr_sequencia
		FROM pls_monitor_tiss_guia b
LEFT OUTER JOIN pls_diagnostico_nasc_vivo a ON (b.nr_seq_conta = a.nr_seq_conta)
WHERE b.nr_seq_lote_monitor 	= nr_seq_lote_pc ) alias4

	where 	(nr_decl_nasc_vivo IS NOT NULL AND nr_decl_nasc_vivo::text <> '');


C02 CURSOR( nr_seq_lote_pc	pls_monitor_tiss_lote.nr_sequencia%type ) FOR
	SELECT 	nr_declaracao_obito,
		nr_sequencia
	from (
		SELECT	distinct substr(pls_gerencia_envio_ans_pck.obter_informacao_alter_varchar(b.nr_seq_conta, 'DO', replace(a.nr_declaracao_obito,'-','')),1,11) nr_declaracao_obito,
			b.nr_sequencia
		FROM pls_monitor_tiss_guia b
LEFT OUTER JOIN pls_diagnost_conta_obito a ON (b.nr_seq_conta = a.nr_seq_conta)
WHERE b.nr_seq_lote_monitor 	= nr_seq_lote_pc ) alias4
	where	(nr_declaracao_obito IS NOT NULL AND nr_declaracao_obito::text <> '');


BEGIN

--Carrega as declares de nascido vivos

open C01( nr_seq_lote_p );
loop
	tb_nr_decl_nasc_vivo_w.delete;
	tb_nr_seq_guia_tiss_w.delete;

	fetch  C01 bulk collect into tb_nr_decl_nasc_vivo_w, tb_nr_seq_guia_tiss_w
	limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

	exit when tb_nr_decl_nasc_vivo_w.count = 0;

	forall i in tb_nr_decl_nasc_vivo_w.first .. tb_nr_decl_nasc_vivo_w.last

		insert into pls_monitor_tiss_nasc_vivo(
			nr_sequencia,nr_declaracao, nr_seq_guia_monitor,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec
		) values (
			nextval('pls_monitor_tiss_nasc_vivo_seq'), tb_nr_decl_nasc_vivo_w(i), tb_nr_seq_guia_tiss_w(i),
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p);
	commit;
end loop;
close C01;

--Carrega as declaraes de bito

open C02( nr_seq_lote_p );
loop
	tb_nr_declaracao_obito_w.delete;
	tb_nr_seq_guia_tiss_w.delete;

	fetch  C02 bulk collect into tb_nr_declaracao_obito_w, tb_nr_seq_guia_tiss_w
	limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

	exit when tb_nr_declaracao_obito_w.count = 0;

	forall i in tb_nr_declaracao_obito_w.first .. tb_nr_declaracao_obito_w.last
		insert into 	pls_monitor_tiss_obito(
			nr_sequencia, nr_declaracao, nr_seq_guia_monitor,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec
		) values (
			nextval('pls_monitor_tiss_obito_seq'), tb_nr_declaracao_obito_w(i), tb_nr_seq_guia_tiss_w(i),
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p);
	commit;
end loop;
close C02;

tb_nr_declaracao_obito_w.delete;
tb_nr_seq_guia_tiss_w.delete;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.inserir_nasc_vivo_arquivo_xml ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type ) FROM PUBLIC;
