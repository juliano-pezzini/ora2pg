-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.selecionar_conta_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


tb_ins_conta_seq_w	pls_util_cta_pck.t_number_table;
tb_ins_cta_val_seq_w	pls_util_cta_pck.t_number_table;
tb_ins_tiss_alt_seq_w	pls_util_cta_pck.t_number_table;
tb_ins_cta_rec_seq_w	pls_util_cta_pck.t_number_table;
tb_ins_cta_disc_seq_w	pls_util_cta_pck.t_number_table;
tb_ins_tipo_evento_w	pls_util_cta_pck.t_varchar2_table_15;

tb_upd_conta_seq_w	pls_util_cta_pck.t_number_table;
tb_upd_cta_val_seq_w	pls_util_cta_pck.t_number_table;
tb_upd_tiss_alt_seq_w	pls_util_cta_pck.t_number_table;
tb_upd_cta_rec_seq_w	pls_util_cta_pck.t_number_table;
tb_upd_cta_disc_seq_w	pls_util_cta_pck.t_number_table;
tb_upd_tipo_evento_w	pls_util_cta_pck.t_varchar2_table_15;
tb_ins_conta_glosa_w		pls_util_cta_pck.t_varchar2_table_1;
tb_upd_conta_glosa_w		pls_util_cta_pck.t_varchar2_table_1;

ie_tipo_evento_w	pls_monitor_tiss_alt.ie_tipo_evento%type;
ie_gerar_w		varchar(1) := 'S';

qt_registro_ins_w		integer;
qt_registro_upd_w		integer;
ie_fornec_lote_w		pls_monitor_tiss_lote.ie_fornec_direto%type;

c01 CURSOR(	nr_seq_lote_pc			pls_monitor_tiss_lote.nr_sequencia%type,
		dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
		dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
		ie_permite_rec_glosa_pc		pls_monitor_tiss_param.ie_permite_rec_glosa%type,
		cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type) FOR
	SELECT	/*+ PARALLEL(e)*/ e.nr_seq_conta,
		(SELECT 	max(p.nr_sequencia)
		from 		pls_monitor_tiss_cta_val p
		where 		p.nr_seq_conta 		= e.nr_seq_conta
		and		p.nr_seq_lote_monitor 	= nr_seq_lote_pc) nr_seq_cta_val,
		max(e.nr_sequencia) nr_seq_tiss_alt,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc,
		pls_obter_se_conta_glosada(e.nr_seq_conta) ie_conta_glosada,
		coalesce((	select	max(ie_fornec_direto)
			from 	pls_protocolo_conta a, 
				pls_conta b 
			where 	a.nr_sequencia = b.nr_seq_protocolo 
			and 	b.nr_sequencia = e.nr_seq_conta
		),'N')  ie_fornec_direto
	from	pls_monitor_tiss_alt 	e
	where	e.dt_evento between dt_inicio_pc and dt_fim_pc
	and	e.ie_status in ('P', 'N') -- P = Pendente / N = Negado pela ANS
	and	e.ie_tipo_evento in ('CC','FC','PC')
	and	ie_permite_rec_glosa_pc = 'N'
	group by
		e.nr_seq_conta,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc
	
union all

	select	/*+ PARALLEL(e)*/ e.nr_seq_conta,
		(select 	max(p.nr_sequencia)
		from 		pls_monitor_tiss_cta_val p
		where 		p.nr_seq_conta 		= e.nr_seq_conta
		and		p.nr_seq_lote_monitor 	= nr_seq_lote_pc) nr_seq_cta_val,
		max(e.nr_sequencia) nr_seq_tiss_alt,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc,
		pls_obter_se_conta_glosada(e.nr_seq_conta) ie_conta_glosada,
		coalesce((	select	max(ie_fornec_direto) 
			from 	pls_protocolo_conta a, 
				pls_conta b 
			where 	a.nr_sequencia = b.nr_seq_protocolo 
			and 	b.nr_sequencia = e.nr_seq_conta
		),'N')  ie_fornec_direto
	from	pls_monitor_tiss_alt 	e
	where	e.dt_evento between dt_inicio_pc and dt_fim_pc
	and	e.ie_status in ('P', 'N') -- P = Pendente / N = Negado pela ANS
	and	e.ie_tipo_evento not in ('AV', 'AD','FR')
	and	ie_permite_rec_glosa_pc = 'S'
	group by
		e.nr_seq_conta,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc;

c02 CURSOR(	nr_seq_lote_pc			pls_monitor_tiss_lote.nr_sequencia%type,
		dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
		dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
		ie_permite_rec_glosa_pc		pls_monitor_tiss_param.ie_permite_rec_glosa%type,
		cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type) FOR
	SELECT	/*+ PARALLEL(e)*/ e.nr_seq_conta,
		(SELECT	max(p.nr_sequencia)
		 from 	pls_monitor_tiss_cta_val p
		 where 	p.nr_seq_conta 		= e.nr_seq_conta
		 and	p.nr_seq_lote_monitor 	= nr_seq_lote_pc) nr_seq_cta_val,
		max(e.nr_sequencia) nr_seq_tiss_alt,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc,
		pls_obter_se_conta_glosada(e.nr_seq_conta) ie_conta_glosada,
		coalesce((	select	max(ie_fornec_direto)
			from 	pls_protocolo_conta a, 
				pls_conta b 
			where 	a.nr_sequencia = b.nr_seq_protocolo 
			and 	b.nr_sequencia = e.nr_seq_conta
		),'N') ie_fornec_direto
	from	pls_monitor_tiss_alt 	e
	where	e.dt_evento between dt_inicio_pc and dt_fim_pc
	and	e.ie_status in ('P', 'N') -- P = Pendente / N = Negado pela ANS
	and	e.ie_tipo_evento in ('CC','FC','PC')
	and	e.cd_estabelecimento = cd_estabelecimento_pc
	and	ie_permite_rec_glosa_pc = 'N'
	group by
		e.nr_seq_conta,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc
	
union all

	select	/*+ PARALLEL(e)*/ e.nr_seq_conta,
		(select	max(p.nr_sequencia)
		 from 	pls_monitor_tiss_cta_val p
		 where 	p.nr_seq_conta 		= e.nr_seq_conta
		 and	p.nr_seq_lote_monitor 	= nr_seq_lote_pc) nr_seq_cta_val,
		max(e.nr_sequencia) nr_seq_tiss_alt,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc,
		pls_obter_se_conta_glosada(e.nr_seq_conta) ie_conta_glosada,
		coalesce((	select	max(ie_fornec_direto) 
			from 	pls_protocolo_conta a, 
				pls_conta b 
			where 	a.nr_sequencia = b.nr_seq_protocolo 
			and 	b.nr_sequencia = e.nr_seq_conta
		),'N')  ie_fornec_direto
	from	pls_monitor_tiss_alt 	e
	where	e.dt_evento between dt_inicio_pc and dt_fim_pc
	and	e.ie_status in ('P', 'N') -- P = Pendente / N = Negado pela ANS
	and	e.ie_tipo_evento not in ('AV', 'AD','FR')
	and	e.cd_estabelecimento = cd_estabelecimento_pc
	and	ie_permite_rec_glosa_pc = 'S'
	group by
		e.nr_seq_conta,
		e.nr_seq_conta_rec,
		e.nr_seq_conta_disc;

BEGIN
qt_registro_ins_w := 0;
qt_registro_upd_w := 0;

select coalesce(max(ie_fornec_direto),'N')
into STRICT	ie_fornec_lote_w
from	pls_monitor_tiss_lote
where 	nr_sequencia = nr_seq_lote_p;

if (current_setting('pls_gerencia_envio_ans_pck.ie_controla_estab_w')::pls_controle_estab.ie_monitoramento_ans%type = 'S') then

	for c02_w in c02(nr_seq_lote_p, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_ini_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_fim_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.ie_permite_rec_glosa_w')::pls_monitor_tiss_param.ie_permite_rec_glosa%type, cd_estabelecimento_p) loop

		if ( (ie_fornec_lote_w = 'S' AND c02_w.ie_fornec_direto = 'S') or(ie_fornec_lote_w = 'N' AND c02_w.ie_fornec_direto = 'N')) then

			select	max(ie_tipo_evento)
			into STRICT	ie_tipo_evento_w
			from	pls_monitor_tiss_alt
			where	nr_sequencia = c02_w.nr_seq_tiss_alt;
		
			--para nao inserir registros de pagamento no fornecimento direto. Somente devem entrar registros de fechamento de conta

			if ( (ie_fornec_lote_w = 'N') or (ie_fornec_lote_w = 'S' and ie_tipo_evento_w !='PC')) then
	
				ie_gerar_w := pls_gerencia_envio_ans_pck.obter_se_envia_pagamento(ie_tipo_evento_w, c02_w.nr_seq_conta, cd_estabelecimento_p);

				-- Tratamento realizado para no envio do pagamento para atendimento

				-- em rede prpria. Foi feito o tratamento na gerao do log

				-- sendo assim, nem gera o log nesses casos, porm para os logs j gerados

				-- esse tratamento torna-se necessrio.

				-- Retirar isso aqui depois de 10/2017

				if (ie_gerar_w = 'S') then
					-- separa para fazer insert ou update

					if (coalesce(c02_w.nr_seq_cta_val::text, '') = '') then
						tb_ins_conta_seq_w(qt_registro_ins_w) := c02_w.nr_seq_conta;
						tb_ins_cta_val_seq_w(qt_registro_ins_w) := c02_w.nr_seq_cta_val;
						tb_ins_tiss_alt_seq_w(qt_registro_ins_w) := c02_w.nr_seq_tiss_alt;
						tb_ins_cta_rec_seq_w(qt_registro_ins_w) := c02_w.nr_seq_conta_rec;
						tb_ins_cta_disc_seq_w(qt_registro_ins_w) := c02_w.nr_seq_conta_disc;
						tb_ins_tipo_evento_w(qt_registro_ins_w) := ie_tipo_evento_w;
						tb_ins_conta_glosa_w(qt_registro_ins_w) := c02_w.ie_conta_glosada;

						qt_registro_ins_w := qt_registro_ins_w + 1;
					else
						tb_upd_conta_seq_w(qt_registro_upd_w) := c02_w.nr_seq_conta;
						tb_upd_cta_val_seq_w(qt_registro_upd_w) := c02_w.nr_seq_cta_val;
						tb_upd_tiss_alt_seq_w(qt_registro_upd_w) := c02_w.nr_seq_tiss_alt;
						tb_upd_cta_rec_seq_w(qt_registro_upd_w) := c02_w.nr_seq_conta_rec;
						tb_upd_cta_disc_seq_w(qt_registro_upd_w) := c02_w.nr_seq_conta_disc;
						tb_upd_tipo_evento_w(qt_registro_upd_w) := ie_tipo_evento_w;
						tb_upd_conta_glosa_w(qt_registro_upd_w) := c02_w.ie_conta_glosada;

						qt_registro_upd_w := qt_registro_upd_w + 1;
					end if;

					-- se j atingiu a quantidade de registros manda para o banco de dados

					if ( qt_registro_ins_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer ) then

						-- se tiver algo para inserir

						if (tb_ins_conta_seq_w.count > 0) then
							forall i in tb_ins_conta_seq_w.first..tb_ins_conta_seq_w.last
								insert into pls_monitor_tiss_cta_val(
									nr_sequencia, nr_seq_conta,
									dt_evento,
									ie_tipo_evento,
									nr_seq_lote_monitor, ie_conta_atualizada,
									nr_seq_cta_alt, ie_glosa,
									nm_usuario_nrec, dt_atualizacao_nrec,
									nm_usuario, dt_atualizacao,
									nr_seq_conta_rec, nr_seq_conta_disc
								) values (
									nextval('pls_monitor_tiss_cta_val_seq'), tb_ins_conta_seq_w(i),
									(SELECT max(z.dt_evento)
									from	pls_monitor_tiss_alt z
									where	z.nr_sequencia = tb_ins_tiss_alt_seq_w(i)),
									tb_ins_tipo_evento_w(i),
									nr_seq_lote_p, 'N',
									tb_ins_tiss_alt_seq_w(i), tb_ins_conta_glosa_w(i),
									nm_usuario_p, clock_timestamp(),
									nm_usuario_p, clock_timestamp(),
									tb_ins_cta_rec_seq_w(i),tb_ins_cta_disc_seq_w(i) );
							commit;

							tb_ins_conta_seq_w.delete;
							tb_ins_cta_val_seq_w.delete;
							tb_ins_tiss_alt_seq_w.delete;
							tb_ins_cta_rec_seq_w.delete;
							tb_ins_cta_disc_seq_w.delete;
							tb_ins_tipo_evento_w.delete;
							tb_ins_conta_glosa_w.delete;
							qt_registro_ins_w := 0;
						end if;
					end if;

					-- se j atingiu a quantidade de registros manda para o banco de dados

					if ( qt_registro_upd_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer ) then

						-- se tiver algo para atualizar

						if (tb_upd_cta_val_seq_w.count > 0) then
							forall i in tb_upd_cta_val_seq_w.first..tb_upd_cta_val_seq_w.last
								update	pls_monitor_tiss_cta_val
								set	dt_evento			= (	SELECT 	max(z.dt_evento)
														from	pls_monitor_tiss_alt z
														where	z.nr_sequencia = tb_upd_tiss_alt_seq_w(i)),
									ie_tipo_evento			= tb_upd_tipo_evento_w(i),
									ie_conta_atualizada		= 'N',
									nr_seq_cta_alt			= tb_upd_tiss_alt_seq_w(i),
									ie_glosa 			= tb_upd_conta_glosa_w(i),
									nm_usuario			= nm_usuario_p,
									dt_atualizacao			= clock_timestamp(),
									nr_seq_conta_rec		= tb_upd_cta_rec_seq_w(i),
									nr_seq_conta_disc		= tb_upd_cta_disc_seq_w(i)
								where	nr_sequencia 			= tb_upd_cta_val_seq_w(i);

							commit;

							tb_upd_conta_seq_w.delete;
							tb_upd_cta_val_seq_w.delete;
							tb_upd_tiss_alt_seq_w.delete;
							tb_upd_cta_rec_seq_w.delete;
							tb_upd_cta_disc_seq_w.delete;
							tb_upd_tipo_evento_w.delete;
							tb_upd_conta_glosa_w.delete;
							qt_registro_upd_w := 0;
						end if;
					end if;
				end if;
			
			end if;
			
		end if;
	end loop;
else
	for c01_w in c01(nr_seq_lote_p, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_ini_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_fim_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.ie_permite_rec_glosa_w')::pls_monitor_tiss_param.ie_permite_rec_glosa%type, cd_estabelecimento_p) loop

	
		if ( (ie_fornec_lote_w = 'S' AND c01_w.ie_fornec_direto = 'S') or(ie_fornec_lote_w = 'N' AND c01_w.ie_fornec_direto = 'N')) then
		
			select	max(ie_tipo_evento)
			into STRICT	ie_tipo_evento_w
			from	pls_monitor_tiss_alt
			where	nr_sequencia = c01_w.nr_seq_tiss_alt;
		
			--para nao inserir registros de pagamento no fornecimento direto. Somente devem entrar registros de fechamento de conta

			if ( (ie_fornec_lote_w = 'N') or (ie_fornec_lote_w = 'S' and ie_tipo_evento_w !='PC')) then
			
				ie_gerar_w := pls_gerencia_envio_ans_pck.obter_se_envia_pagamento(ie_tipo_evento_w, c01_w.nr_seq_conta, cd_estabelecimento_p);

				-- Tratamento realizado para no envio do pagamento para atendimento

				-- em rede prpria. Foi feito o tratamento na gerao do log

				-- sendo assim, nem gera o log nesses casos, porm para os logs j gerados

				-- esse tratamento torna-se necessrio.

				-- Retirar isso aqui depois de 10/2017

				if (ie_gerar_w = 'S') then
					-- separa para fazer insert ou update

					if (coalesce(c01_w.nr_seq_cta_val::text, '') = '') then
						tb_ins_conta_seq_w(qt_registro_ins_w) := c01_w.nr_seq_conta;
						tb_ins_cta_val_seq_w(qt_registro_ins_w) := c01_w.nr_seq_cta_val;
						tb_ins_tiss_alt_seq_w(qt_registro_ins_w) := c01_w.nr_seq_tiss_alt;
						tb_ins_cta_rec_seq_w(qt_registro_ins_w) := c01_w.nr_seq_conta_rec;
						tb_ins_cta_disc_seq_w(qt_registro_ins_w) := c01_w.nr_seq_conta_disc;
						tb_ins_tipo_evento_w(qt_registro_ins_w) := ie_tipo_evento_w;
						tb_ins_conta_glosa_w(qt_registro_ins_w) := c01_w.ie_conta_glosada;

						qt_registro_ins_w := qt_registro_ins_w + 1;
					else
						tb_upd_conta_seq_w(qt_registro_upd_w) := c01_w.nr_seq_conta;
						tb_upd_cta_val_seq_w(qt_registro_upd_w) := c01_w.nr_seq_cta_val;
						tb_upd_tiss_alt_seq_w(qt_registro_upd_w) := c01_w.nr_seq_tiss_alt;
						tb_upd_cta_rec_seq_w(qt_registro_upd_w) := c01_w.nr_seq_conta_rec;
						tb_upd_cta_disc_seq_w(qt_registro_upd_w) := c01_w.nr_seq_conta_disc;
						tb_upd_tipo_evento_w(qt_registro_upd_w) := ie_tipo_evento_w;
						tb_upd_conta_glosa_w(qt_registro_upd_w) := c01_w.ie_conta_glosada;

						qt_registro_upd_w := qt_registro_upd_w + 1;
					end if;

					-- se j atingiu a quantidade de registros manda para o banco de dados

					if ( qt_registro_ins_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer ) then

						-- se tiver algo para inserir

						if (tb_ins_conta_seq_w.count > 0) then
							forall i in tb_ins_conta_seq_w.first..tb_ins_conta_seq_w.last
								insert into pls_monitor_tiss_cta_val(
									nr_sequencia, nr_seq_conta,
									dt_evento,
									ie_tipo_evento,
									nr_seq_lote_monitor, ie_conta_atualizada,
									nr_seq_cta_alt, ie_glosa,
									nm_usuario_nrec, dt_atualizacao_nrec,
									nm_usuario, dt_atualizacao,
									nr_seq_conta_rec, nr_seq_conta_disc
								) values (
									nextval('pls_monitor_tiss_cta_val_seq'), tb_ins_conta_seq_w(i),
									(SELECT max(z.dt_evento)
									from	pls_monitor_tiss_alt z
									where	z.nr_sequencia = tb_ins_tiss_alt_seq_w(i)),
									tb_ins_tipo_evento_w(i),
									nr_seq_lote_p, 'N',
									tb_ins_tiss_alt_seq_w(i), tb_ins_conta_glosa_w(i),
									nm_usuario_p, clock_timestamp(),
									nm_usuario_p, clock_timestamp(),
									tb_ins_cta_rec_seq_w(i),tb_ins_cta_disc_seq_w(i) );
							commit;

							tb_ins_conta_seq_w.delete;
							tb_ins_cta_val_seq_w.delete;
							tb_ins_tiss_alt_seq_w.delete;
							tb_ins_cta_rec_seq_w.delete;
							tb_ins_cta_disc_seq_w.delete;
							tb_ins_conta_glosa_w.delete;
							qt_registro_ins_w := 0;
						end if;
					end if;

					-- se j atingiu a quantidade de registros manda para o banco de dados

					if ( qt_registro_upd_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer ) then

						-- se tiver algo para atualizar

						if (tb_upd_cta_val_seq_w.count > 0) then
							forall i in tb_upd_cta_val_seq_w.first..tb_upd_cta_val_seq_w.last
								update	pls_monitor_tiss_cta_val
								set	dt_evento			= (	SELECT 	max(z.dt_evento)
														from	pls_monitor_tiss_alt z
														where	z.nr_sequencia = tb_upd_tiss_alt_seq_w(i)),
									ie_tipo_evento			= tb_upd_tipo_evento_w(i),
									ie_conta_atualizada		= 'N',
									nr_seq_cta_alt			= tb_upd_tiss_alt_seq_w(i),
									ie_glosa 			= tb_upd_conta_glosa_w(i),
									nm_usuario			= nm_usuario_p,
									dt_atualizacao			= clock_timestamp(),
									nr_seq_conta_rec		= tb_upd_cta_rec_seq_w(i),
									nr_seq_conta_disc		= tb_upd_cta_disc_seq_w(i)
								where	nr_sequencia 			= tb_upd_cta_val_seq_w(i);

							commit;

							tb_upd_conta_seq_w.delete;
							tb_upd_cta_val_seq_w.delete;
							tb_upd_tiss_alt_seq_w.delete;
							tb_upd_cta_rec_seq_w.delete;
							tb_upd_cta_disc_seq_w.delete;
							tb_upd_conta_glosa_w.delete;
							qt_registro_upd_w := 0;
						end if;
					end if;
				end if;
			end if;
		end if;
	end loop;
end if;

-- se tiver algo que sobrou para inserir

if (tb_ins_conta_seq_w.count > 0) then
	forall i in tb_ins_conta_seq_w.first..tb_ins_conta_seq_w.last
		insert into pls_monitor_tiss_cta_val(
			nr_sequencia, nr_seq_conta,
			dt_evento,
			ie_tipo_evento,
			nr_seq_lote_monitor, ie_conta_atualizada,
			nr_seq_cta_alt, ie_glosa,
			nm_usuario_nrec, dt_atualizacao_nrec,
			nm_usuario, dt_atualizacao,
			nr_seq_conta_rec, nr_seq_conta_disc
		) values (
			nextval('pls_monitor_tiss_cta_val_seq'), tb_ins_conta_seq_w(i),
			(SELECT max(z.dt_evento)
			from	pls_monitor_tiss_alt z
			where	z.nr_sequencia = tb_ins_tiss_alt_seq_w(i)),
			tb_ins_tipo_evento_w(i),
			nr_seq_lote_p, 'N',
			tb_ins_tiss_alt_seq_w(i), tb_ins_conta_glosa_w(i),
			nm_usuario_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(),
			tb_ins_cta_rec_seq_w(i),tb_ins_cta_disc_seq_w(i));
	commit;

	tb_ins_conta_seq_w.delete;
	tb_ins_cta_val_seq_w.delete;
	tb_ins_tiss_alt_seq_w.delete;
	tb_ins_cta_rec_seq_w.delete;
	tb_ins_cta_disc_seq_w.delete;
	tb_ins_conta_glosa_w.delete;
end if;

-- se tiver algo para atualizar

if (tb_upd_cta_val_seq_w.count > 0) then
	forall i in tb_upd_cta_val_seq_w.first..tb_upd_cta_val_seq_w.last
		update	pls_monitor_tiss_cta_val
		set	dt_evento			= (	SELECT 	max(z.dt_evento)
								from	pls_monitor_tiss_alt z
								where	z.nr_sequencia = tb_upd_tiss_alt_seq_w(i)),
			ie_tipo_evento			= tb_upd_tipo_evento_w(i),
			ie_conta_atualizada		= 'N',
			nr_seq_cta_alt			= tb_upd_tiss_alt_seq_w(i),
			ie_glosa 			= tb_upd_conta_glosa_w(i),
			nm_usuario			= nm_usuario_p,
			dt_atualizacao			= clock_timestamp(),
			nr_seq_conta_rec		= tb_upd_cta_rec_seq_w(i),
			nr_seq_conta_disc		= tb_upd_cta_disc_seq_w(i)
		where	nr_sequencia 			= tb_upd_cta_val_seq_w(i);

	commit;

	tb_upd_conta_seq_w.delete;
	tb_upd_cta_val_seq_w.delete;
	tb_upd_tiss_alt_seq_w.delete;
	tb_upd_cta_rec_seq_w.delete;
	tb_upd_cta_disc_seq_w.delete;
	tb_upd_conta_glosa_w.delete;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.selecionar_conta_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
