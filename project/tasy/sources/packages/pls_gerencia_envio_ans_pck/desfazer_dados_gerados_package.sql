-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.desfazer_dados_gerados ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) AS $body$
DECLARE


tb_mon_tiss_cta_val_w			pls_util_cta_pck.t_number_table;
tb_nr_sequencia_w			pls_util_cta_pck.t_number_table;
nr_seq_processo_exec_w	pls_monitor_tiss_processo.nr_sequencia%type;
ds_erro_w		pls_monitor_tiss_processo.ds_erro%type;
tb_seq_w		pls_util_cta_pck.t_number_table;

c01 CURSOR(nr_seq_lote_pc	pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_monitor_tiss_cta_val a
	where	nr_seq_lote_monitor = nr_seq_lote_pc;

C02 CURSOR(nr_seq_lote_pc	pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_monit_cta_nao_sel_exc
	where	nr_seq_lote_monitor = nr_seq_lote_pc;
	
 --ajusta para pendentes os registros agrupados de pagamento de recurso de glosa

 c_reg_agrupados CURSOR FOR
  SELECT  	a.nr_sequencia
  from 		pls_monitor_tiss_alt a
  where  	dt_evento between dt_mes_competencia_ini_w and dt_mes_competencia_fim_w
  and 		ie_status = 'AG';


BEGIN

-- grava o log de processo que sinaliza a ao que foi feita

nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	nr_seq_lote_p, 6, nm_usuario_p, null, nr_seq_processo_exec_w);

begin
	-- abre o cursor e apaga o que foi gerado

	open c01(nr_seq_lote_p);
	loop
		tb_mon_tiss_cta_val_w.delete;

		fetch c01 bulk collect into tb_mon_tiss_cta_val_w
		limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

		exit when tb_mon_tiss_cta_val_w.count = 0;

		forall i in tb_mon_tiss_cta_val_w.first..tb_mon_tiss_cta_val_w.last
			delete	FROM pls_monitor_tiss_inc_val
			where	nr_seq_cta_val	= tb_mon_tiss_cta_val_w(i);
		commit;

		forall i in tb_mon_tiss_cta_val_w.first..tb_mon_tiss_cta_val_w.last
			delete	FROM pls_monitor_tiss_alt_guia
			where	nr_seq_cta_val	= tb_mon_tiss_cta_val_w(i);
		commit;

		forall i in tb_mon_tiss_cta_val_w.first..tb_mon_tiss_cta_val_w.last
			delete	FROM pls_monitor_tiss_mat_val
			where	nr_seq_cta_val	= tb_mon_tiss_cta_val_w(i);
		commit;

		forall i in tb_mon_tiss_cta_val_w.first..tb_mon_tiss_cta_val_w.last
			delete	FROM pls_monitor_tiss_proc_val
			where	nr_seq_cta_val	= tb_mon_tiss_cta_val_w(i);
		commit;

		forall i in tb_mon_tiss_cta_val_w.first..tb_mon_tiss_cta_val_w.last
			delete	FROM pls_monitor_tiss_cta_val
			where	nr_sequencia	= tb_mon_tiss_cta_val_w(i);
		commit;
	end loop;
	close c01;

	Open C02(nr_seq_lote_p);
	loop
		tb_nr_sequencia_w.delete;

		fetch C02 bulk collect into tb_nr_sequencia_w
		limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

		exit when tb_nr_sequencia_w.count = 0;

		forall i in tb_nr_sequencia_w.first .. tb_nr_sequencia_w.last
			delete	FROM pls_monit_cta_nao_sel_exc
			where	nr_sequencia = tb_nr_sequencia_w(i);
		commit;
	end loop;

	delete	FROM pls_monitor_tiss_inc_val
	where	nr_seq_lote_monitor = nr_seq_lote_p;

	tb_mon_tiss_cta_val_w.delete;
	tb_nr_sequencia_w.delete;

	--aaschlote 14/04/2015 OS 871474

	CALL pls_atualizar_lote_monit_tiss(nr_seq_lote_p);

	-- Atualizar os valores totais do lote

	CALL pls_gerencia_envio_ans_pck.atualiza_valores_totais_lote(	nr_seq_lote_p, nm_usuario_p, 'Z');

	update 	pls_monitor_tiss_lote
	set	ie_status 	= 'U',
		dt_atualizacao 	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia 	= nr_seq_lote_p;
	commit;

	open c_reg_agrupados;
	loop
	tb_seq_w.delete;

	fetch c_reg_agrupados bulk collect into tb_seq_w
	limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

	exit when tb_seq_w.count = 0;

	forall i in tb_seq_w.first .. tb_seq_w.last
		update   pls_monitor_tiss_alt set
		ie_status = 'P',
		dt_atualizacao = clock_timestamp(),
		nm_usuario = nm_usuario_p
		where  nr_sequencia = tb_seq_w(i);
		commit;
	end loop;
	close c_reg_agrupados;
	commit;
	
exception
when others then
	-- pega o erro

	ds_erro_w := substr(sqlerrm, 0, 4000);

	-- grava o erro que ocorreu

	nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	null, null, nm_usuario_p, ds_erro_w, nr_seq_processo_exec_w);

	-- exibe a mensagem do erro para o usurio

	CALL wheb_mensagem_pck.exibir_mensagem_abort(324928, 'ERRO=' || ds_erro_w, -20012);
end;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.desfazer_dados_gerados ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) FROM PUBLIC;
