-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.alimenta_data_conta_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
qt_registro_w			integer;
tb_sequencia_w			pls_util_cta_pck.t_number_table;
tb_dt_cancelamento_conta_w	pls_util_cta_pck.t_date_table;
tb_dt_conta_fechada_w		pls_util_cta_pck.t_date_table;
tb_dt_pagamento_previsto_w	pls_util_cta_pck.t_date_table;
tb_dt_conta_fechada_recurso_w	pls_util_cta_pck.t_date_table;
tb_dt_pagamento_recurso_w	pls_util_cta_pck.t_date_table;
nr_seq_conta_anterior_w pls_conta.nr_sequencia%type := null;


c_item_data CURSOR(	dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
			dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
			ie_permite_rec_glosa_pc		pls_monitor_tiss_param.ie_permite_rec_glosa%type) FOR
	SELECT	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
		e.dt_evento,
		e.nr_sequencia nr_seq_tiss_alt,
		(SELECT	max(z.dt_pagamento_previsto)
		 from	pls_monitor_tiss_cta_val z
		 where	z.nr_seq_conta = e.nr_seq_conta
		 and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
		(select	max(z.dt_conta_fechada)
		 from	pls_monitor_tiss_cta_val z
		 where	z.nr_seq_conta = e.nr_seq_conta
		 and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
		e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'S'
	and	e.ie_tipo_evento in ('AD','AV','CC','FC','PC','PD')
	
union all

	select	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
		e.dt_evento,
		e.nr_sequencia nr_seq_tiss_alt,
		(select	max(z.dt_pagamento_previsto)
		 from	pls_monitor_tiss_cta_val z
		 where	z.nr_seq_conta = e.nr_seq_conta
		 and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
		(select	max(z.dt_conta_fechada)
		 from	pls_monitor_tiss_cta_val z
		 where	z.nr_seq_conta = e.nr_seq_conta
		 and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
		e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'N'
	and	e.ie_tipo_evento in ('AD','AV','CC','FC','PC','PD')
	order by nr_seq_conta, dt_evento desc, nr_seq_tiss_alt;

c_item_data_recurso CURSOR(	dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
							dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
							ie_permite_rec_glosa_pc		pls_monitor_tiss_param.ie_permite_rec_glosa%type) FOR
	SELECT	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
			e.dt_evento,
			e.nr_sequencia nr_seq_tiss_alt,
			(	SELECT	max(z.dt_pagamento_previsto)
				from	pls_monitor_tiss_cta_val z
				where	z.nr_seq_conta = e.nr_seq_conta
				and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
			(	select	max(z.dt_conta_fechada)
				from	pls_monitor_tiss_cta_val z
				where	z.nr_seq_conta = e.nr_seq_conta
				and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
			e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'S'
	and	e.ie_tipo_evento = 'FR'
	
union all

	select	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
			e.dt_evento,
			e.nr_sequencia nr_seq_tiss_alt,
		(	select	max(z.dt_pagamento_previsto)
			from	pls_monitor_tiss_cta_val z
			where	z.nr_seq_conta = e.nr_seq_conta
			and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
		(	select	max(z.dt_conta_fechada)
			from	pls_monitor_tiss_cta_val z
			where	z.nr_seq_conta = e.nr_seq_conta
			and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
			e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'N'
	and	e.ie_tipo_evento = 'FR'
	order by nr_seq_conta, dt_evento desc, nr_seq_tiss_alt;

c_item_data_pag_recurso CURSOR(	dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
							dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
							ie_permite_rec_glosa_pc		pls_monitor_tiss_param.ie_permite_rec_glosa%type) FOR
	SELECT	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
			e.dt_evento,
			e.nr_sequencia nr_seq_tiss_alt,
			(	SELECT	max(z.dt_pagamento_previsto)
				from	pls_monitor_tiss_cta_val z
				where	z.nr_seq_conta = e.nr_seq_conta
				and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
			(	select	max(z.dt_conta_fechada)
				from	pls_monitor_tiss_cta_val z
				where	z.nr_seq_conta = e.nr_seq_conta
				and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
			e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'S'
	and	e.ie_tipo_evento = 'PR'
	
union all

	select	/*+ PARALLEL(e)*/ e.ie_tipo_evento,
			e.dt_evento,
			e.nr_sequencia nr_seq_tiss_alt,
		(	select	max(z.dt_pagamento_previsto)
			from	pls_monitor_tiss_cta_val z
			where	z.nr_seq_conta = e.nr_seq_conta
			and	(z.dt_pagamento_previsto IS NOT NULL AND z.dt_pagamento_previsto::text <> '')) dt_pagamento_previsto,
		(	select	max(z.dt_conta_fechada)
			from	pls_monitor_tiss_cta_val z
			where	z.nr_seq_conta = e.nr_seq_conta
			and	(z.dt_conta_fechada IS NOT NULL AND z.dt_conta_fechada::text <> '')) dt_conta_fechada,
			e.nr_seq_conta
	from	pls_monitor_tiss_alt 	e
	where	e.nr_sequencia in (select x.nr_sequencia
                            from pls_monitor_tiss_cta_val y,
                                 pls_monitor_tiss_alt x
                            where x.ie_status in ('P', 'N')
                                 and x.dt_evento between dt_inicio_pc and dt_fim_pc
                                and  y.nr_seq_lote_monitor = nr_seq_lote_p
                                and y.nr_seq_conta = x.nr_seq_conta
								and y.ie_conta_atualizada = 'S')
	and	ie_permite_rec_glosa_pc = 'N'
	and	e.ie_tipo_evento = 'PR'
	order by nr_seq_conta, dt_evento desc, nr_seq_tiss_alt;

BEGIN

qt_registro_w := 0;

	-- busca todos os itens da conta que precisam da data

	for r_c_item_data_w in c_item_data(current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_ini_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_fim_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.ie_permite_rec_glosa_w')::pls_monitor_tiss_param.ie_permite_rec_glosa%type) loop

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			tb_sequencia_w(qt_registro_w) := r_c_item_data_w.nr_seq_conta;
			tb_dt_cancelamento_conta_w(qt_registro_w) := null;
			tb_dt_conta_fechada_w(qt_registro_w) := null;
			tb_dt_pagamento_previsto_w(qt_registro_w) := null;
			tb_dt_conta_fechada_recurso_w(qt_registro_w) := null;
			tb_dt_pagamento_recurso_w(qt_registro_w) := null;
		end if;

		--Cancelamento de conta mdica

		if ( r_c_item_data_w.ie_tipo_evento = 'CC' ) then
			tb_dt_cancelamento_conta_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		--Fechamento da conta mdica

		elsif ( r_c_item_data_w.ie_tipo_evento = 'FC' ) then
			tb_dt_conta_fechada_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		--Pagamento da conta mdica

		elsif ( r_c_item_data_w.ie_tipo_evento = 'PC' ) then
			tb_dt_pagamento_previsto_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		-- Fechamento do recurso de glosa

		elsif ( r_c_item_data_w.ie_tipo_evento = 'FR' ) then
			tb_dt_conta_fechada_recurso_w(qt_registro_w) := r_c_item_data_w.dt_evento;
			tb_dt_conta_fechada_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		-- Pagamento do recurso de glosa

		elsif ( r_c_item_data_w.ie_tipo_evento = 'PR' ) then
			tb_dt_pagamento_recurso_w(qt_registro_w) := r_c_item_data_w.dt_evento;
			tb_dt_pagamento_previsto_w(qt_registro_w) := r_c_item_data_w.dt_evento;
		elsif ( r_c_item_data_w.ie_tipo_evento = 'PD' ) then
			tb_dt_pagamento_recurso_w(qt_registro_w) := r_c_item_data_w.dt_evento;
			tb_dt_pagamento_previsto_w(qt_registro_w) := r_c_item_data_w.dt_evento;
		--Alterao de valor

		elsif ( r_c_item_data_w.ie_tipo_evento = 'AV' ) then
			tb_dt_pagamento_previsto_w(qt_registro_w) := r_c_item_data_w.dt_pagamento_previsto;
			tb_dt_conta_fechada_w(qt_registro_w) 	  := r_c_item_data_w.dt_conta_fechada;
		end if;

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			-- se atingiu a quantidade de registros manda para o banco

			if (qt_registro_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer) then

				-- atualiza

				CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
							tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
							tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
							nm_usuario_p, 'C');
				-- Limpa as variveis

				SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;
				qt_registro_w := 0;
			else
				qt_registro_w := qt_registro_w + 1;
			end if;
		end if;

		nr_seq_conta_anterior_w := r_c_item_data_w.nr_seq_conta;
	end loop;

	-- atualiza se sobrou algo para atualizar

	CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
				tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
				tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
				nm_usuario_p, 'C');
	-- Limpa as variveis

	SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;

	-- busca todos os itens da conta que precisam da data

	for r_c_item_data_w in c_item_data_recurso(current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_ini_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_fim_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.ie_permite_rec_glosa_w')::pls_monitor_tiss_param.ie_permite_rec_glosa%type) loop

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			tb_sequencia_w(qt_registro_w) := r_c_item_data_w.nr_seq_conta;
			tb_dt_cancelamento_conta_w(qt_registro_w) := null;
			tb_dt_conta_fechada_w(qt_registro_w) := null;
			tb_dt_pagamento_previsto_w(qt_registro_w) := null;
			tb_dt_conta_fechada_recurso_w(qt_registro_w) := null;
			tb_dt_pagamento_recurso_w(qt_registro_w) := null;
		end if;

		-- Fechamento do recurso de glosa

		if ( r_c_item_data_w.ie_tipo_evento = 'FR' ) then
			tb_dt_conta_fechada_recurso_w(qt_registro_w) := r_c_item_data_w.dt_evento;
			tb_dt_conta_fechada_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		end if;

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			-- se atingiu a quantidade de registros manda para o banco

			if (qt_registro_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer) then

				-- atualiza

				CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
							tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
							tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
							nm_usuario_p, 'FR');
				-- Limpa as variveis

				SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;
				qt_registro_w := 0;
			else
				qt_registro_w := qt_registro_w + 1;
			end if;
		end if;

		nr_seq_conta_anterior_w := r_c_item_data_w.nr_seq_conta;
	end loop;

	-- atualiza se sobrou algo para atualizar

	CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
				tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
				tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
				nm_usuario_p, 'FR');
	-- Limpa as variveis

	SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;

	-- busca todos os itens da conta que precisam da data

	nr_seq_conta_anterior_w := null;
	for r_c_item_data_w in c_item_data_pag_recurso(current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_ini_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.dt_mes_competencia_fim_w')::pls_monitor_tiss_lote.dt_mes_competencia%type, current_setting('pls_gerencia_envio_ans_pck.ie_permite_rec_glosa_w')::pls_monitor_tiss_param.ie_permite_rec_glosa%type) loop

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			tb_sequencia_w(qt_registro_w) := r_c_item_data_w.nr_seq_conta;
			tb_dt_cancelamento_conta_w(qt_registro_w) := null;
			tb_dt_conta_fechada_w(qt_registro_w) := null;
			tb_dt_pagamento_previsto_w(qt_registro_w) := null;
			tb_dt_conta_fechada_recurso_w(qt_registro_w) := null;
			tb_dt_pagamento_recurso_w(qt_registro_w) := null;
		end if;

		if ( r_c_item_data_w.ie_tipo_evento = 'PR' ) then
			tb_dt_pagamento_recurso_w(qt_registro_w) := r_c_item_data_w.dt_evento;
			tb_dt_pagamento_previsto_w(qt_registro_w) := r_c_item_data_w.dt_evento;

		end if;

		if (r_c_item_data_w.nr_seq_conta != nr_seq_conta_anterior_w or coalesce(nr_seq_conta_anterior_w::text, '') = '')  then
			-- se atingiu a quantidade de registros manda para o banco

			if (qt_registro_w >= current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer) then

				-- atualiza

				CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
							tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
							tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
							nm_usuario_p, 'PR');
				-- Limpa as variveis

				SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;
				qt_registro_w := 0;
			else
				qt_registro_w := qt_registro_w + 1;
			end if;
		end if;

		nr_seq_conta_anterior_w := r_c_item_data_w.nr_seq_conta;
	end loop;


	-- atualiza se sobrou algo para atualizar

	CALL pls_gerencia_envio_ans_pck.atualizar_data_conta( 	nr_seq_lote_p, tb_sequencia_w, tb_dt_cancelamento_conta_w,
				tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w,
				tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w,
				nm_usuario_p, 'PR');
	-- Limpa as variveis

	SELECT * FROM pls_gerencia_envio_ans_pck.limpar_data_conta_update(	tb_sequencia_w, tb_dt_cancelamento_conta_w, tb_dt_conta_fechada_w, tb_dt_pagamento_previsto_w, tb_dt_conta_fechada_recurso_w, tb_dt_pagamento_recurso_w) INTO STRICT _ora2pg_r;
 	tb_sequencia_w := _ora2pg_r.tb_sequencia_p; tb_dt_cancelamento_conta_w := _ora2pg_r.tb_dt_cancelamento_conta_p; tb_dt_conta_fechada_w := _ora2pg_r.tb_dt_conta_fechada_p; tb_dt_pagamento_previsto_w := _ora2pg_r.tb_dt_pagamento_previsto_p; tb_dt_conta_fechada_recurso_w := _ora2pg_r.tb_dt_conta_fechada_recurso_p; tb_dt_pagamento_recurso_w := _ora2pg_r.tb_dt_pagamento_recurso_p;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.alimenta_data_conta_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
