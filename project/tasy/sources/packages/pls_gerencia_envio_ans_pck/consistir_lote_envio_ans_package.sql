-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.consistir_lote_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


dt_inicio_w			pls_monitor_tiss_lote.dt_mes_competencia%type;
dt_fim_w			pls_monitor_tiss_lote.dt_mes_competencia%type;
dt_mes_compt_min_w		pls_monitor_tiss_lote.dt_mes_competencia%type;
dt_geracao_w			pls_monitor_tiss_lote.dt_geracao_lote%type;
nr_seq_lote_monitor_w		pls_monitor_tiss_lote.nr_sequencia%type;

qt_retorno_w			integer;
qt_conta_fechamento_w		integer;
qt_registro_w			integer := 0;

tb_nr_seq_cta_val_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_cta_proc_val_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_cta_mat_val_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_lote_w		pls_util_cta_pck.t_number_table;
tb_cd_inconsistencia_w		pls_util_cta_pck.t_varchar2_table_20;


BEGIN
-- Todas validaes a nivel de lote so sobre a competencia anterior

-- Obtem a primeira competencia enviada pelo Tasy, caso a competencia atual

-- Seja igual a menor competencia enviada pelo Tasy, no faz nenhum validao

select	trunc(min(dt_mes_competencia),'mm')
into STRICT	dt_mes_compt_min_w
from	pls_monitor_tiss_lote;

select	trunc(dt_mes_competencia, 'mm')
into STRICT	dt_inicio_w
from	pls_monitor_tiss_lote
where	nr_sequencia = nr_seq_lote_p;

if (dt_mes_compt_min_w < dt_inicio_w) then

	dt_inicio_w := trunc(add_months(dt_inicio_w,-1),'mm');

	dt_fim_w := fim_mes(dt_inicio_w);

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_lote_monitor_w
	from	pls_monitor_tiss_lote a
	where	a.dt_mes_competencia between dt_inicio_w and dt_fim_w
	and	exists (	SELECT	1
				from	pls_monitor_tiss_cta_val x
				where	x.nr_seq_lote_monitor = a.nr_sequencia);

	if (nr_seq_lote_monitor_w IS NOT NULL AND nr_seq_lote_monitor_w::text <> '') then

		select	dt_geracao_lote
		into STRICT	dt_geracao_w
		from	pls_monitor_tiss_lote
		where	nr_sequencia = nr_seq_lote_monitor_w;

		select	count(1)
		into STRICT	qt_retorno_w
		from	pls_monitor_tiss_lote_com
		where	nr_seq_lote_monitor = nr_seq_lote_monitor_w;

		if (qt_retorno_w = 0) or (coalesce(dt_geracao_w::text, '') = '') then
			select	count(1)
			into STRICT	qt_conta_fechamento_w
			from	pls_monitor_tiss_cta_val
			where	nr_seq_lote_monitor = nr_seq_lote_monitor_w
			and	ie_tipo_evento = 'FC';

		else
			select	count(1)
			into STRICT	qt_conta_fechamento_w
			from	pls_monitor_tiss_guia a
			where	a.nr_seq_lote_monitor = nr_seq_lote_monitor_w
			and	a.ie_tipo_evento_alt = 'FC'
			and	exists (	SELECT	1
						from	pls_monitor_tiss_guia_ret x
						where	a.nr_sequencia = x.nr_seq_guia_monitor);

			if (qt_conta_fechamento_w = 0) then
				select	count(1)
				into STRICT	qt_conta_fechamento_w
				from	pls_monitor_tiss_guia a
				where	a.nr_seq_lote_monitor = nr_seq_lote_monitor_w
				and	coalesce(a.dt_pagamento_previsto::text, '') = ''
				and	exists (	SELECT	1
							from	pls_monitor_tiss_guia_ret x
							where	a.nr_sequencia = x.nr_seq_guia_monitor);
			end if;
		end if;

		if (qt_conta_fechamento_w > 0) then
			tb_nr_seq_cta_val_w(qt_registro_w)	:= null;
			tb_nr_seq_cta_proc_val_w(qt_registro_w)	:= null;
			tb_nr_seq_cta_mat_val_w(qt_registro_w)	:= null;
			tb_nr_seq_lote_w(qt_registro_w)		:= nr_seq_lote_p;
			tb_cd_inconsistencia_w(qt_registro_w)	:= 'INC037';
			qt_registro_w := qt_registro_w + 1;
		end if;
	else
		tb_nr_seq_cta_val_w(qt_registro_w)	:= null;
		tb_nr_seq_cta_proc_val_w(qt_registro_w)	:= null;
		tb_nr_seq_cta_mat_val_w(qt_registro_w)	:= null;
		tb_nr_seq_lote_w(qt_registro_w)		:= nr_seq_lote_p;
		tb_cd_inconsistencia_w(qt_registro_w)	:= 'INC038';
		qt_registro_w := qt_registro_w + 1;
	end if;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_lote_monitor_w
	from	pls_monitor_tiss_lote a
	where	a.dt_mes_competencia between dt_inicio_w and dt_fim_w
	and	a.ie_status not in ('U', 'LG');

	if (nr_seq_lote_monitor_w IS NOT NULL AND nr_seq_lote_monitor_w::text <> '') then
		tb_nr_seq_cta_val_w(qt_registro_w)	:= null;
		tb_nr_seq_cta_proc_val_w(qt_registro_w)	:= null;
		tb_nr_seq_cta_mat_val_w(qt_registro_w)	:= null;
		tb_nr_seq_lote_w(qt_registro_w)		:= nr_seq_lote_p;
		tb_cd_inconsistencia_w(qt_registro_w)	:= 'INC043';
		qt_registro_w := qt_registro_w + 1;
	end if;

	CALL CALL CALL pls_gerencia_envio_ans_pck.gravar_inconsistencia(tb_nr_seq_cta_val_w, tb_nr_seq_cta_proc_val_w, tb_nr_seq_cta_mat_val_w, tb_cd_inconsistencia_w, tb_nr_seq_lote_w, nm_usuario_p);

	tb_nr_seq_cta_val_w.delete;
	tb_nr_seq_cta_proc_val_w.delete;
	tb_nr_seq_cta_mat_val_w.delete;
	tb_nr_seq_lote_w.delete;
	tb_cd_inconsistencia_w.delete;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.consistir_lote_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
