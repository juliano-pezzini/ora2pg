-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Procedure que controla a consistncia das contas mdicas



CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.consistir_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_tipo_chamada_p text default 'consistencia_delphi') AS $body$
DECLARE



tb_nr_seq_cta_val_w	pls_util_cta_pck.t_number_table;
qt_registro_w		integer := 0;
nr_seq_processo_w	pls_monitor_tempo_lote.nr_sequencia%type;
nr_seq_processo_exec_w	pls_monitor_tiss_processo.nr_sequencia%type;
ds_erro_w		pls_monitor_tiss_processo.ds_erro%type;

C01 CURSOR(	nr_seq_lote_pc		pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT 	nr_sequencia
	from 	pls_monitor_tiss_cta_val
	where	nr_seq_lote_monitor = nr_seq_lote_pc;

BEGIN
-- somente grava o log quando for chamada diretamente do Delphi

if (ie_tipo_chamada_p = 'consistencia_delphi') then
	-- grava o log de processo que sinaliza a ao que foi feita

	nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	nr_seq_lote_p, 4, nm_usuario_p, null, nr_seq_processo_exec_w);
end if;

begin
	nr_seq_processo_w := pls_gerencia_envio_ans_pck.grava_log_tempo_processo(	nr_seq_lote_p, 'Limpando as inconsistncias do lote', 'I', nm_usuario_p, nr_seq_processo_w);

	qt_registro_w := 0;
	-- Percorre todas as contas que sero consistidas

	for	r_C01_w in C01( nr_seq_lote_p ) loop

		tb_nr_seq_cta_val_w(qt_registro_w) := r_C01_w.nr_sequencia;
		qt_registro_w := qt_registro_w + 1;

		if ( qt_registro_w >= pls_util_pck.qt_registro_transacao_w ) then
			CALL CALL pls_gerencia_envio_ans_pck.limpar_inconsistencias( tb_nr_seq_cta_val_w, nr_seq_lote_p);
			qt_registro_w := 0;
			tb_nr_seq_cta_val_w.delete;
		end if;
	end loop;

	--Limpar todas as inconsistncias j geradas para o lote

	CALL CALL pls_gerencia_envio_ans_pck.limpar_inconsistencias( tb_nr_seq_cta_val_w, nr_seq_lote_p);
	tb_nr_seq_cta_val_w.delete;

	nr_seq_processo_w := pls_gerencia_envio_ans_pck.grava_log_tempo_processo(	null, null, 'F', null, nr_seq_processo_w);

	-- Consistir informaes do lote

	CALL pls_gerencia_envio_ans_pck.consistir_lote_envio_ans( nr_seq_lote_p, nm_usuario_p);

	--Consistar as contas

	CALL pls_gerencia_envio_ans_pck.consistir_contas_envio_ans( nr_seq_lote_p, nm_usuario_p);

	--Consistir os procedimentos

	CALL pls_gerencia_envio_ans_pck.consistir_proc_envio_ans( nr_seq_lote_p, nm_usuario_p);

	--Consistir os materiais

	CALL pls_gerencia_envio_ans_pck.consistir_materiais_envio_ans( nr_seq_lote_p, nm_usuario_p);

	--Atualizar o status da conta e do lote, para identificar se ficou com inconsistncias

	CALL pls_gerencia_envio_ans_pck.atualizar_status_lote( nr_seq_lote_p, nm_usuario_p);

exception
when others then
	-- pega o erro

	ds_erro_w := substr(sqlerrm, 0, 4000);

	-- grava o erro que ocorreu

	nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	nr_seq_lote_p, 4, nm_usuario_p, ds_erro_w, nr_seq_processo_exec_w);

	-- exibe a mensagem do erro para o usurio

	CALL wheb_mensagem_pck.exibir_mensagem_abort(324928, 'ERRO=' || ds_erro_w, -20012);
end;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.consistir_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_tipo_chamada_p text default 'consistencia_delphi') FROM PUBLIC;
