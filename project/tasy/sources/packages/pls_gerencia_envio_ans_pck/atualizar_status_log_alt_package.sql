-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




-- Atualizar status dos logs de alterao para controlar o que foi aprovado ou negado pela ANS



CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.atualizar_status_log_alt ( nr_seq_monitor_ret_p pls_monitor_tiss_lote_ret.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type ) AS $body$
DECLARE


tb_seq_guia_w			pls_util_cta_pck.t_number_table;
tb_nr_seq_cta_val_w		pls_util_cta_pck.t_number_table;
nr_seq_lote_monitor_w		pls_monitor_tiss_lote_ret.nr_seq_lote_monitor%type;
nr_seq_lote_monitor_arq_w	pls_monitor_tiss_arquivo.nr_sequencia%type;
nm_arquivo_w			pls_monitor_tiss_lote_ret.nm_arquivo%type;
dt_inicio_w			pls_monitor_tiss_lote_ret.dt_mes_competencia%type;
dt_fim_w			pls_monitor_tiss_lote_ret.dt_mes_competencia%type;
nr_seq_arquivo_w	pls_monitor_tiss_lote_ret.nr_seq_arquivo%type;
cd_glosa_w		pls_monitor_tiss_glosa.cd_glosa%type;

-- retorna tudo o que foi negado pela ANS

C01 CURSOR( 	nr_seq_monitor_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type,
		nr_seq_lote_monitor_arq_pc	pls_monitor_tiss_arquivo.nr_sequencia%type) FOR
	SELECT 	z.nr_sequencia
	from 	pls_monitor_tiss_guia_ret 	b,
		pls_monitor_tiss_alt_guia 	a,
		pls_monitor_tiss_alt 		z,
		pls_monitor_tiss_guia		d
	where 	b.nr_seq_lote_monitor_ret 	= nr_seq_monitor_ret_pc
	and	d.nr_seq_arq_monitor		= nr_seq_lote_monitor_arq_pc
	and	a.nr_seq_guia_monitor		= b.nr_seq_guia_monitor
	and	z.nr_sequencia 			= a.nr_seq_cta_alt
	and	a.nr_seq_guia_monitor		= d.nr_sequencia;

C02 CURSOR( 	nr_seq_monitor_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type,
		nr_seq_lote_monitor_arq_pc	pls_monitor_tiss_arquivo.nr_sequencia%type) FOR
	SELECT 	z.nr_sequencia
	from 	pls_monitor_tiss_lote_ret 	c,
		pls_monitor_tiss_alt_guia 	a,
		pls_monitor_tiss_alt 		z,
		pls_monitor_tiss_guia	 	d
	where 	c.nr_sequencia 			= nr_seq_monitor_ret_pc
	and	d.nr_seq_arq_monitor		= nr_seq_lote_monitor_arq_pc
	and	a.nr_seq_lote_monitor		= c.nr_seq_lote_monitor
	and	z.nr_sequencia 			= a.nr_seq_cta_alt
	and	a.nr_seq_guia_monitor		= d.nr_sequencia
	and	z.ie_status 			= 'PR';

-- retorna tudo o que foi negado pela ANS para fazer a alterao na chave

C03 CURSOR( 	nr_seq_monitor_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type,
		nr_seq_lote_monitor_arq_pc	pls_monitor_tiss_arquivo.nr_sequencia%type) FOR
	SELECT 	a.nr_seq_chave_guia
	from 	pls_monitor_tiss_guia_ret b,
		pls_monitor_tiss_guia a
	where 	b.nr_seq_lote_monitor_ret 	= nr_seq_monitor_ret_pc
	and	a.nr_sequencia 			= b.nr_seq_guia_monitor
	and	a.nr_seq_arq_monitor		= nr_seq_lote_monitor_arq_pc;

C04 CURSOR(	nr_seq_lote_pc		pls_monitor_tiss_lote.nr_sequencia%type,
		dt_inicio_pc		pls_monitor_tiss_lote.dt_mes_competencia%type,
		dt_fim_pc		pls_monitor_tiss_lote.dt_mes_competencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_monitor_tiss_alt a,
		pls_monitor_tiss_cta_val b
	where	b.nr_seq_conta = a.nr_seq_conta
	and	b.nr_seq_lote_monitor = nr_seq_lote_pc
	and	a.dt_evento between dt_inicio_pc and dt_fim_pc
	order by a.nr_seq_conta;

C05 CURSOR(	nr_seq_monitor_ret_pc		pls_monitor_tiss_lote_ret.nr_sequencia%type,
		nr_seq_lote_pc			pls_monitor_tiss_lote.nr_sequencia%type,
		dt_inicio_pc			pls_monitor_tiss_lote.dt_mes_competencia%type,
		dt_fim_pc			pls_monitor_tiss_lote.dt_mes_competencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_monitor_tiss_alt a,
		pls_monitor_tiss_guia b,
		pls_monitor_tiss_guia_ret c
	where	b.nr_sequencia = c.nr_seq_guia_monitor
	and	b.nr_seq_conta = a.nr_seq_conta
	and	b.nr_seq_lote_monitor = nr_seq_lote_pc
	and	c.nr_seq_lote_monitor_ret = nr_seq_monitor_ret_pc
	and	a.dt_evento between dt_inicio_pc and dt_fim_pc
	order by a.nr_seq_conta;

C06 CURSOR FOR
	SELECT	nr_seq_cta_alt
	from	w_guias_exclusao;


BEGIN

select	max(c.nr_seq_lote_monitor),
	trunc(max(dt_mes_competencia),'mm'),
	fim_mes(max(dt_mes_competencia)),
	max(nr_seq_arquivo)
into STRICT	nr_seq_lote_monitor_w,
	dt_inicio_w,
	dt_fim_w,
	nr_seq_arquivo_w
from	pls_monitor_tiss_lote_ret c
where	c.nr_sequencia = nr_seq_monitor_ret_p;

-- se tem lote vinculado

if (nr_seq_lote_monitor_w IS NOT NULL AND nr_seq_lote_monitor_w::text <> '') then
	select	coalesce(ie_tipo_lote,'0')
	into STRICT	current_setting('pls_gerencia_envio_ans_pck.ie_tipo_lote_w')::pls_monitor_tiss_lote.ie_tipo_lote%type
	from	pls_monitor_tiss_lote
	where	nr_sequencia = nr_seq_lote_monitor_w;

	select	max(cd_glosa)
	into STRICT	cd_glosa_w
	from	pls_monitor_tiss_glosa
	where	nr_seq_lote_monitor_ret	= nr_seq_monitor_ret_p;

	--5001 - MENSAGEM ELETRNICA FORA DO PADRO TISS

	--5002 - NO FOI POSSVEL VALIDAR O ARQUIVO XML

	--5007 - MENSAGEM INCONSISTENTE OU INCOMPLETA

	--5014 - CDIGO HASH INVLIDO. MENSAGEM PODE ESTAR CORROMPIDA

	--5025-DATA DE REGISTRO DA TRANSAO INVLIDA

	--5026-HORA DE REGISTRO DA TRANSAO INVLIDA

	if	((cd_glosa_w <> '5001') and (cd_glosa_w <> '5002') and (cd_glosa_w <> '5007') and (cd_glosa_w <> '5014') and (cd_glosa_w <> '5025') and (cd_glosa_w <> '5026') and (cd_glosa_w <> '5044') and (cd_glosa_w <> '5045') and (cd_glosa_w <> '5046') or (coalesce(cd_glosa_w::text, '') = '')) then

		if (current_setting('pls_gerencia_envio_ans_pck.ie_tipo_lote_w')::pls_monitor_tiss_lote.ie_tipo_lote%type = '1') then
			EXECUTE 'truncate table w_guias_exclusao';

			open C04(nr_seq_lote_monitor_w, dt_inicio_w, dt_fim_w);
			loop
				tb_nr_seq_cta_val_w.delete;

				fetch C04 bulk collect into tb_nr_seq_cta_val_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_nr_seq_cta_val_w.count = 0;

				forall i in tb_nr_seq_cta_val_w.first .. tb_nr_seq_cta_val_w.last
					insert	into	w_guias_exclusao(	nr_sequencia, nr_seq_cta_alt)
						values (	nextval('w_guias_exclusao_seq'), tb_nr_seq_cta_val_w(i));
				commit;
			end loop;

			if (C04%ISOPEN) then
				close C04;
			end if;

			open C05(nr_seq_monitor_ret_p, nr_seq_lote_monitor_w, dt_inicio_w, dt_fim_w);
			loop
				tb_nr_seq_cta_val_w.delete;

				fetch C05 bulk collect into tb_nr_seq_cta_val_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_nr_seq_cta_val_w.count = 0;

				forall i in tb_nr_seq_cta_val_w.first .. tb_nr_seq_cta_val_w.last
					delete	FROM w_guias_exclusao
					where	nr_seq_cta_alt = tb_nr_seq_cta_val_w(i);
				commit;
			end loop;

			if (C05%ISOPEN) then
				close C05;
			end if;

			open C06;
			loop
				tb_nr_seq_cta_val_w.delete;

				fetch C06 bulk collect into tb_nr_seq_cta_val_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_nr_seq_cta_val_w.count = 0;

				forall i in tb_nr_seq_cta_val_w.first .. tb_nr_seq_cta_val_w.last
					update	pls_monitor_tiss_alt
					set	ie_status = 'P'
					where	nr_sequencia = tb_nr_seq_cta_val_w(i);
				commit;
			end loop;
		elsif (current_setting('pls_gerencia_envio_ans_pck.ie_tipo_lote_w')::pls_monitor_tiss_lote.ie_tipo_lote%type = '2') then
			select	UPPER(replace(nm_arquivo,'ZTE','XTE'))
			into STRICT	nm_arquivo_w
			from	pls_monitor_tiss_lote_ret
			where	nr_sequencia	= nr_seq_monitor_ret_p;

			-- busca o lote do arquivo

			select	max(b.nr_sequencia)
			into STRICT	nr_seq_lote_monitor_arq_w
			from	pls_monitor_tiss_lote a,
				pls_monitor_tiss_arquivo b
			where	a.ie_status		= 'LG'
			and	b.nr_seq_lote_monitor	= a.nr_sequencia
			and	b.nm_arquivo		= nm_arquivo_w;

			open C03( nr_seq_monitor_ret_p,nr_seq_lote_monitor_arq_w );
			loop
				tb_seq_guia_w.delete;

				fetch C03 bulk collect into tb_seq_guia_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_seq_guia_w.count = 0;

				-- manda para o banco

				forall i in tb_seq_guia_w.first .. tb_seq_guia_w.last

					update 	pls_moni_tiss_chave_guia a
					set	a.ie_status = 'N',
						a.dt_atualizacao = clock_timestamp(),
						a.nm_usuario 	= nm_usuario_p
					where	a.nr_sequencia = tb_seq_guia_w(i);
				commit;

				end loop;
			close C03;
		else
			select	UPPER(replace(nm_arquivo,'ZTE','XTE'))
			into STRICT	nm_arquivo_w
			from	pls_monitor_tiss_lote_ret
			where	nr_sequencia	= nr_seq_monitor_ret_p;

			-- busca o lote do arquivo

			select	max(b.nr_sequencia)
			into STRICT	nr_seq_lote_monitor_arq_w
			from	pls_monitor_tiss_lote a,
				pls_monitor_tiss_arquivo b
			where	a.ie_status		= 'LG'
			and	b.nr_seq_lote_monitor	= a.nr_sequencia
			and	b.nm_arquivo		= nm_arquivo_w;

			open C01( nr_seq_monitor_ret_p,nr_seq_lote_monitor_arq_w );
			loop
				tb_seq_guia_w.delete;

				fetch C01 bulk collect into tb_seq_guia_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_seq_guia_w.count = 0;

				-- manda para o banco

				forall i in tb_seq_guia_w.first .. tb_seq_guia_w.last

					update 	pls_monitor_tiss_alt a
					set	a.ie_status = 'N',
						a.dt_atualizacao = clock_timestamp(),
						a.nm_usuario 	= nm_usuario_p
					where	a.nr_sequencia = tb_seq_guia_w(i);
				commit;

				end loop;
			close C01;

			open C02( nr_seq_monitor_ret_p,nr_seq_lote_monitor_arq_w );
			loop
				tb_seq_guia_w.delete;

				fetch C02 bulk collect into tb_seq_guia_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_seq_guia_w.count = 0;

				-- manda para o banco

				forall i in tb_seq_guia_w.first .. tb_seq_guia_w.last

					update 	pls_monitor_tiss_alt a
					set	a.ie_status = 'A',
						a.dt_atualizacao = clock_timestamp(),
						a.nm_usuario 	= nm_usuario_p
					where	a.nr_sequencia = tb_seq_guia_w(i);
				commit;

				end loop;
			close C02;

			open C03( nr_seq_monitor_ret_p,nr_seq_lote_monitor_arq_w );
			loop
				tb_seq_guia_w.delete;

				fetch C03 bulk collect into tb_seq_guia_w
				limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

				exit when tb_seq_guia_w.count = 0;

				-- manda para o banco

				forall i in tb_seq_guia_w.first .. tb_seq_guia_w.last

					update 	pls_moni_tiss_chave_guia a
					set	a.ie_status = 'N',
						a.dt_atualizacao = clock_timestamp(),
						a.nm_usuario 	= nm_usuario_p
					where	a.nr_sequencia = tb_seq_guia_w(i);
				commit;

				end loop;
			close C03;
		end if;
	else
		--Chama a rotina abaixo para quando o arquivo foi rejeitado na ANS

		CALL pls_gerencia_envio_ans_pck.atualizar_status_rej_log_alt(nr_seq_monitor_ret_p, nr_seq_lote_monitor_w, nm_usuario_p, current_setting('pls_gerencia_envio_ans_pck.ie_tipo_lote_w')::pls_monitor_tiss_lote.ie_tipo_lote%type);
	end if;

end if;

CALL pls_gerencia_envio_ans_pck.consiste_registros_ret_ans( nr_seq_monitor_ret_p, nm_usuario_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.atualizar_status_log_alt ( nr_seq_monitor_ret_p pls_monitor_tiss_lote_ret.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type ) FROM PUBLIC;
