-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.desfazer_prep_base_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


tb_seq_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_w		pls_util_cta_pck.t_number_table;
ie_status_w		pls_monitor_tiss_lote.ie_status%type;
nr_seq_processo_exec_w	pls_monitor_tiss_processo.nr_sequencia%type;
ds_erro_w		pls_monitor_tiss_processo.ds_erro%type;

c_contas CURSOR(	nr_seq_lote_pc	pls_monitor_tiss_cta_val.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_monitor_tiss_guia a
	where	a.nr_seq_lote_monitor = nr_seq_lote_pc;

c_arqus CURSOR(	nr_seq_lote_pc	pls_monitor_tiss_cta_val.nr_sequencia%type) FOR
	SELECT	distinct a.nr_seq_arq_monitor
	from	pls_monitor_tiss_guia a
	where	a.nr_seq_lote_monitor = nr_seq_lote_pc;

c_chaves CURSOR(	nr_seq_lote_pc	pls_monitor_tiss_cta_val.nr_sequencia%type) FOR
	SELECT	a.nr_seq_chave_guia
	from	pls_monitor_tiss_guia a
	where	a.nr_seq_lote_monitor = nr_seq_lote_pc
	and	not exists (	SELECT	1
				from	pls_monitor_tiss_guia x
				where	x.nr_seq_chave_guia = a.nr_seq_chave_guia
				and	x.nr_seq_lote_monitor <> nr_seq_lote_pc);

c_vinc_ret CURSOR(	nr_seq_lote_pc	pls_monitor_tiss_cta_val.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia
	from	pls_monitor_tiss_guia a,
		pls_monitor_tiss_alt_guia b
	where	a.nr_seq_lote_monitor = nr_seq_lote_pc
	and	b.nr_seq_guia_monitor = a.nr_sequencia;

-- pega tudo do ms para setar para pendente

c_log_tiss CURSOR(	nr_seq_lote_pc	pls_monitor_tiss_cta_val.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_monitor_tiss_alt_guia b,
		pls_monitor_tiss_alt a
	where	b.nr_seq_lote_monitor = nr_seq_lote_pc
	and	a.nr_sequencia = b.nr_seq_cta_alt;


BEGIN

-- grava o log de processo que sinaliza a ao que foi feita

nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	nr_seq_lote_p, 5, nm_usuario_p, null, nr_seq_processo_exec_w);

begin
	select	max(ie_status)
	into STRICT	ie_status_w
	from	pls_monitor_tiss_lote
	where 	nr_sequencia  = nr_seq_lote_p;

	-- s pode limpar tudo se estiver com este status, caso contrrio coisa muito ruins podem acontecer

	if (ie_status_w = 'PE') then

		-- apaga as demais dependncias das contas

		open c_contas(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			fetch c_contas bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_obito
				where	nr_seq_guia_monitor = tb_seq_w(i);
			commit;

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_nasc_vivo
				where	nr_seq_guia_monitor = tb_seq_w(i);
			commit;

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_diag
				where	nr_seq_guia_monitor = tb_seq_w(i);
			commit;

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_mat
				where	nr_seq_guia_monitor = tb_seq_w(i);
			commit;

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete 	from pls_monitor_tiss_proc
				where	nr_seq_guia_monitor = tb_seq_w(i);
			commit;

		end loop;
		close c_contas;

		-- seta tudo do ms para pendente

		open c_log_tiss(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			fetch c_log_tiss bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			forall i in tb_seq_w.first .. tb_seq_w.last
				update 	pls_monitor_tiss_alt set
					ie_status = 'P',
					dt_atualizacao = clock_timestamp(),
					nm_usuario = nm_usuario_p
				where	nr_sequencia = tb_seq_w(i);
			commit;
		end loop;
		close c_log_tiss;

		-- apaga os arquivos

		open c_arqus(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			fetch c_arqus bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			-- tira o vnculo com as contas

			forall i in tb_seq_w.first .. tb_seq_w.last
				update	pls_monitor_tiss_guia set
					nr_seq_arq_monitor  = NULL
				where	nr_seq_arq_monitor = tb_seq_w(i)
				and	nr_seq_lote_monitor = nr_seq_lote_p;
			commit;

			-- apaga o arquivo

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_arquivo
				where	nr_sequencia = tb_seq_w(i);
			commit;

			end loop;
		close c_arqus;

		-- apaga os futuros retornos das contas enviadas para a ANS

		open c_vinc_ret(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			fetch c_vinc_ret bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			-- tira o vnculo com as contas

			forall i in tb_seq_w.first .. tb_seq_w.last
				update	pls_monitor_tiss_alt_guia set
					nr_seq_guia_monitor  = NULL
				where	nr_sequencia = tb_seq_w(i);
			commit;

			end loop;
		close c_vinc_ret;

		-- apaga as contas

		open c_contas(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			fetch c_contas bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			-- apaga as contas

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_monitor_tiss_guia
				where	nr_sequencia = tb_seq_w(i);
			commit;
		end loop;
		close c_contas;

		-- apaga as chaves das contas enviadas para a ANS

		open c_chaves(nr_seq_lote_p);
		loop
			tb_seq_w.delete;

			-- os dois deletes devem obrigatoriamente ficar aqui dentro e nessa ordem

			-- seno ocorrero problemas de integridade.


			fetch c_chaves bulk collect into tb_seq_w
			limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

			exit when tb_seq_w.count = 0;

			-- apaga a chave

			forall i in tb_seq_w.first .. tb_seq_w.last
				delete from pls_moni_tiss_chave_guia
				where	nr_sequencia = tb_seq_w(i);
			commit;

			end loop;
		close c_chaves;

		delete	FROM pls_monitor_tiss_arquivo
		where	nr_seq_lote_monitor = nr_seq_lote_p;

		-- Atualiza o status do lote para dizer que deu Erro na gerao do mesmo.

		-- lotes com esse status podem ter a preparao do arquivo desfeita

		update	pls_monitor_tiss_lote set
			ie_status  = 'LE',
			dt_atualizacao  = clock_timestamp(),
			dt_geracao_lote  = NULL,
			nm_usuario = nm_usuario_p
		where 	nr_sequencia  = nr_seq_lote_p;

		commit;
	end if;
exception
when others then
	-- pega o erro

	ds_erro_w := substr(sqlerrm, 0, 4000);

	-- grava o erro que ocorreu

	nr_seq_processo_exec_w := pls_gerencia_envio_ans_pck.grava_processo(	null, null, nm_usuario_p, ds_erro_w, nr_seq_processo_exec_w);

	-- exibe a mensagem do erro para o usurio

	CALL wheb_mensagem_pck.exibir_mensagem_abort(324928, 'ERRO=' || ds_erro_w, -20012);
end;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.desfazer_prep_base_envio_ans ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
