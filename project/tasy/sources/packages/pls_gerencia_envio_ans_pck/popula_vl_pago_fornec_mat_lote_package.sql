-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_envio_ans_pck.popula_vl_pago_fornec_mat_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type) AS $body$
DECLARE


tb_seq_w	pls_util_cta_pck.t_number_table;
tb_seq_fornec_w	pls_util_cta_pck.t_number_table;
tb_vl_pago_w	pls_util_cta_pck.t_number_table;
tb_pago_exec_w	pls_util_cta_pck.t_number_table;
tb_glosa_exec_w	pls_util_cta_pck.t_number_table;
tb_qt_lib_w	pls_util_cta_pck.t_number_table;

qt_registro_upd_w	integer;
tb_seq_upd_w		pls_util_cta_pck.t_number_table;
tb_vl_pago_upd_w	pls_util_cta_pck.t_number_table;
tb_pago_exec_upd_w	pls_util_cta_pck.t_number_table;
tb_glosa_exec_upd_w	pls_util_cta_pck.t_number_table;
tb_qt_lib_upd_w		pls_util_cta_pck.t_number_table;

-- retorna todos os valores pagos para os fornecedores

-- a condio que informa se foi ou no pago  feita na rotina popula_dados_adic_mat_lote atravs das datas

C01 CURSOR(	nr_seq_lote_pc		pls_monitor_tiss_lote.nr_sequencia%type) FOR
	SELECT	c.nr_sequencia,
		(SELECT sum(a.vl_liberado)
		from  	pls_conta_medica_resumo  a
		where 	a.nr_seq_conta_mat = c.nr_seq_conta_mat
		and 	a.nr_seq_prestador_pgto = c.nr_seq_prest_fornec) vl_pago_fornecedor,
		c.vl_liberado,
		c.vl_glosa,
		c.nr_seq_prest_fornec,
		c.qt_liberado
	from 	pls_monitor_tiss_cta_val f,
		pls_monitor_tiss_mat_val c
	where 	f.nr_seq_lote_monitor = nr_seq_lote_pc
	and 	f.ie_conta_atualizada = 'S'
	and 	c.nr_seq_cta_val = f.nr_sequencia;
BEGIN

-- atualiza os registros

open C01(nr_seq_lote_p);
loop
	tb_seq_w.delete;
	tb_vl_pago_w.delete;
	tb_pago_exec_w.delete;
	tb_glosa_exec_w.delete;
	tb_seq_fornec_w.delete;
	tb_qt_lib_w.delete;

	fetch C01 bulk collect into 	tb_seq_w, tb_vl_pago_w, tb_pago_exec_w,
					tb_glosa_exec_w, tb_seq_fornec_w, tb_qt_lib_w
	limit current_setting('pls_gerencia_envio_ans_pck.qt_registro_transacao_w')::integer;

	exit when tb_seq_w.count = 0;

	qt_registro_upd_w := 0;
	-- percorre para consistir os dados

	for i in tb_seq_w.first .. tb_seq_w.last loop

		-- restrio retirada do select por motivos de performance

		if ((tb_seq_fornec_w(i) IS NOT NULL AND (tb_seq_fornec_w(i))::text <> '')) then

			if (tb_vl_pago_w(i) > 0) then
				tb_qt_lib_w(i)	:= 0;
			end if;

			tb_seq_upd_w(qt_registro_upd_w) := tb_seq_w(i);
			tb_vl_pago_upd_w(qt_registro_upd_w) := tb_vl_pago_w(i);
			tb_pago_exec_upd_w(qt_registro_upd_w) := tb_pago_exec_w(i);
			tb_glosa_exec_upd_w(qt_registro_upd_w) := tb_glosa_exec_w(i);
			tb_qt_lib_upd_w(qt_registro_upd_w) := tb_qt_lib_w(i);

			qt_registro_upd_w := qt_registro_upd_w + 1;
		end if;
	end loop;

	-- manda para o banco

	forall i in tb_seq_upd_w.first .. tb_seq_upd_w.last
		update 	pls_monitor_tiss_mat_val set
			vl_pago_fornecedor = tb_vl_pago_upd_w(i),
			vl_liberado 	   = (coalesce(tb_pago_exec_upd_w(i), 0) - coalesce(tb_vl_pago_upd_w(i), 0)),
			qt_liberado	   = tb_qt_lib_upd_w(i)
		where	nr_sequencia = tb_seq_upd_w(i);
	commit;

	tb_seq_upd_w.delete;
	tb_vl_pago_upd_w.delete;
	tb_pago_exec_upd_w.delete;
	tb_glosa_exec_upd_w.delete;
end loop;
close C01;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_envio_ans_pck.popula_vl_pago_fornec_mat_lote ( nr_seq_lote_p pls_monitor_tiss_lote.nr_sequencia%type) FROM PUBLIC;
