-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_desf_fechar_conta ( nr_seq_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


	ctb_doc_w			ctb_documento%rowtype;
	cd_empresa_w			empresa.cd_empresa%type;
	vl_contabil_w			pls_conta_proc.vl_liberado%type;
	ie_consiste_recalculo_w		pls_parametro_contabil.ie_consiste_recalculo%type;
	ie_forma_contab_taxa_pgto_w	pls_parametro_contabil.ie_forma_contab_taxa_pgto%type;
	ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_lote_ajuste_prod%type;
	ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	nm_atributo_w			w_movimento_contabil.nm_atributo%type;
	nm_atributo_ww			w_movimento_contabil.nm_atributo%type;
	ie_inseriu_w			varchar(1);
	dt_referencia_w			timestamp;
	dt_referencia_month_w		timestamp;

	-- Obtem as informacoes para contabilizacao instantanea de provisao de producao medica.
	c_valores_prov_prod CURSOR FOR
		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm,
			a.ie_tipo_protocolo,
			a.nr_sequencia 	nr_doc_analitico,
			b.nr_sequencia	nr_seq_doc_compl,
			c.nr_sequencia	nr_documento,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info,
			count(case e.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	ctb_documento 		e,
			pls_conta_medica_resumo	d,
			pls_conta_proc		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_proc
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	ie_status_prov_pagto_w 	= 'F'
		and	e.nm_tabela 		= 'PLS_CONTA_MEDICA_RESUMO'
		and	e.nm_atributo		in ('VL_LIBERADO', 'VL_GLOSA', 'VL_AJUSTADO', 'VL_TAXA_PAGAMENTO')
		and	e.nr_documento 		= a.nr_sequencia
		and	e.nr_seq_doc_compl 	= b.nr_sequencia
		and	e.nr_doc_analitico	= d.nr_sequencia
		and	e.cd_tipo_lote_contabil = 40
		and	e.nr_seq_info		in (36, 24)
		and	coalesce(e.ds_origem, 'X') 	<> 'ESTORNO'
		group by d.nr_sequencia,
			d.nr_seq_conta,
			d.vl_apresentado,
			d.vl_calculado,
			d.vl_liberado,
			d.vl_taxa_adm,
			d.vl_taxa_adm_co,
			d.vl_taxa_adm_mat,
			d.vl_glosa,
			a.ie_tipo_protocolo,
			a.nr_sequencia,
			b.nr_sequencia,
			c.nr_sequencia,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info
		
union all

		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm,
			a.ie_tipo_protocolo,
			a.nr_sequencia 	nr_doc_analitico,
			b.nr_sequencia	nr_seq_doc_compl,
			c.nr_sequencia	nr_documento,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info,
			count(case e.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	ctb_documento 		e,
			pls_conta_medica_resumo	d,
			pls_conta_mat		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_mat
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	ie_status_prov_pagto_w 	= 'F'
		and	e.nm_tabela 		= 'PLS_CONTA_MEDICA_RESUMO'
		and	e.nm_atributo		in ('VL_LIBERADO', 'VL_GLOSA', 'VL_AJUSTADO', 'VL_TAXA_PAGAMENTO') 
		and	e.nr_documento 		= a.nr_sequencia
		and	e.nr_seq_doc_compl 	= b.nr_sequencia
		and	e.nr_doc_analitico	= d.nr_sequencia
		and	e.cd_tipo_lote_contabil = 40
		and	e.nr_seq_info		in (36, 24)
		and	coalesce(e.ds_origem, 'X') 	<> 'ESTORNO'
		group by d.nr_sequencia,
			d.nr_seq_conta,
			d.vl_apresentado,
			d.vl_calculado,
			d.vl_liberado,
			d.vl_taxa_adm,
			d.vl_taxa_adm_co,
			d.vl_taxa_adm_mat,
			d.vl_glosa,
			a.ie_tipo_protocolo,
			a.nr_sequencia,
			b.nr_sequencia,
			c.nr_sequencia,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info;
		
	vet_valores_prov_prod		c_valores_prov_prod%rowtype;

	-- Cursor especifico para o valor de ajuste quando o parametro contabil "Status da conta medica" for "Todas as contas medicas com status diferente de cancelada"
	c_ajuste CURSOR FOR
		SELECT	p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			d.cd_tipo_lote_contabil,
			d.nr_seq_info,
			coalesce((	SELECT	max(r.vl_liberado)
				from	pls_conta_medica_resumo	r
				where	p.nr_sequencia		= r.nr_seq_conta_proc
				and	b.nr_sequencia		= r.nr_seq_conta),0) - coalesce(p.vl_provisao,0) vl_ajuste,
			count(case d.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	ctb_documento		d,
			pls_conta_proc		p,
			pls_conta		b,
			pls_protocolo_conta	a
		where	p.nr_seq_conta 		= b.nr_sequencia
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	p.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento 	= cd_estabelecimento_p
		and (ie_status_prov_pagto_w	= 'NC' or a.ie_tipo_protocolo = 'F')
		and	a.ie_tipo_protocolo				in ('C', 'F')
		and	b.ie_status					not in ('C', 'U')
		and	a.ie_situacao					not in ('RE', 'I')
		and	p.ie_status 					not in ('D', 'M')
		and	ie_lote_ajuste_prod_w 				= 'P'
		and	d.nr_documento 		= a.nr_sequencia
		and	d.nr_seq_doc_compl 	= b.nr_sequencia
		and	d.nr_doc_analitico	= p.nr_sequencia
		and	d.cd_tipo_lote_contabil = 40
		and	d.nr_seq_info		= 36
		and	d.nm_tabela		= 'PLS_CONTA_PROC'
		and	d.nm_atributo		= 'VL_AJUSTADO'
		and	coalesce(d.ds_origem, 'X') 	<> 'ESTORNO'
		and	((ie_consiste_recalculo_w <> 'S')
		or ('P' not in (	select	coalesce(max(x.ie_tipo_relacao),'X')
					from	pls_prestador	x
					where	x.nr_sequencia	= b.nr_seq_prestador_exec)))
		group by p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			d.cd_tipo_lote_contabil,
			d.nr_seq_info,
			p.vl_provisao,
			b.nr_Sequencia
		
union all

		select 	p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			d.cd_tipo_lote_contabil,
			d.nr_seq_info,
			coalesce((	select	max(r.vl_liberado)
				from	pls_conta_medica_resumo	r
				where	p.nr_sequencia		= r.nr_seq_conta_proc
				and	b.nr_sequencia		= r.nr_seq_conta),0) - coalesce(p.vl_provisao,0) vl_ajuste,
			count(case d.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	ctb_documento		d,
			pls_conta_mat		p,
			pls_conta		b,
			pls_protocolo_conta	a
		where	b.nr_sequencia		= p.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	p.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and (ie_status_prov_pagto_w	= 'NC' or a.ie_tipo_protocolo = 'F')
		and	a.ie_tipo_protocolo				in ('C', 'F')
		and	b.ie_status					not in ('C', 'U')
		and	a.ie_situacao 					not in ('RE','I')
		and	p.ie_status 					not in ('D','M')
		and	ie_lote_ajuste_prod_w 				= 'P'
		and	d.nr_documento 		= a.nr_sequencia
		and	d.nr_seq_doc_compl 	= b.nr_sequencia
		and	d.nr_doc_analitico	= p.nr_sequencia
		and	d.cd_tipo_lote_contabil = 40
		and	d.nr_seq_info		= 36
		and	d.nm_tabela		= 'PLS_CONTA_MAT'
		and	d.nm_atributo		= 'VL_AJUSTADO'
		and	((ie_consiste_recalculo_w <> 'S')
		or ('P' not in (	select	coalesce(max(x.ie_tipo_relacao),'X')
					from	pls_prestador	x
					where	x.nr_sequencia	= b.nr_seq_prestador_exec)))
		group by p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			d.cd_tipo_lote_contabil,
			d.nr_seq_info,
			p.vl_provisao,
			b.nr_sequencia;

	vet_ajuste	c_ajuste%rowtype;

	-- Obtem as informacoes para contabilizacao instantanea de provisao de coparticipacao
	c_prov_copart CURSOR FOR
		SELECT	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) vl_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info,
			'CTB_ONLINE_ESTORNO' ds_estorno,
			count(case e.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			ctb_documento 			e,
			pls_protocolo_conta 		x
		where	a.nr_sequencia					= b.nr_seq_conta
		and	b.nr_sequencia					= c.nr_seq_conta_copartic
		and	a.nr_sequencia					= b.nr_seq_conta
		and	x.nr_sequencia					= a.nr_seq_protocolo
		and	d.nr_sequencia					= a.nr_seq_plano
		and	coalesce(c.vl_coparticipacao,0)			> 0
		and	a.ie_status					in ('F','S')
		and	((x.ie_tipo_protocolo				in ('C','I','F')
		and	b.ie_status_coparticipacao			in ('D','S'))
		or (x.ie_tipo_protocolo				= 'R'
		and	b.ie_status_coparticipacao			<> 'N'))
		and	e.nr_doc_analitico				= c.nr_sequencia
		and	e.nr_seq_doc_compl				= a.nr_sequencia
		and	e.nr_documento					= x.nr_sequencia
		and	e.nm_tabela					= 'PLS_CONTA_COPARTIC_CONTAB'
		and	e.nm_atributo					= 'VL_COPARTICIPACAO'
		and	coalesce(e.ds_origem, 'X') 				not in ('CTB_ONLINE_ESTORNO', 'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO')
		and	x.cd_estabelecimento				= cd_estabelecimento_p
		and	a.nr_sequencia  				= nr_seq_conta_p
		group by c.nr_sequencia,
			c.vl_coparticipacao,
			a.nr_sequencia,
			x.nr_sequencia,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info
		
union all

		SELECT	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) vl_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info,
			'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO' ds_estorno,
			count(case e.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			ctb_documento			e,
			pls_protocolo_conta 		x
		where	a.nr_sequencia					= b.nr_seq_conta
		and	b.nr_sequencia					= c.nr_seq_conta_copartic
		and	a.nr_sequencia					= b.nr_seq_conta
		and	x.nr_sequencia					= a.nr_seq_protocolo
		and	d.nr_sequencia					= a.nr_seq_plano
		and	a.ie_status					in ('F','S') -- Conta fechada
		and	coalesce(b.ie_estorno_custo,'N')			= 'S'
		and	((x.ie_tipo_protocolo				in ('C','I','F')
		and	b.ie_status_coparticipacao			in ('D','S'))
		or (x.ie_tipo_protocolo				= 'R'))
		and	e.nr_doc_analitico				= c.nr_sequencia
		and	e.nr_seq_doc_compl				= a.nr_sequencia
		and	e.nr_documento					= x.nr_sequencia
		and	e.nm_tabela					= 'PLS_CONTA_COPARTIC_CONTAB'
		and	e.nm_atributo					= 'VL_COPARTICIPACAO'
		and	coalesce(e.ds_origem, 'X') 				not in ('CTB_ONLINE_ESTORNO', 'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO')
		and	coalesce(c.vl_coparticipacao,0)			< 0
		and	x.cd_estabelecimento				= cd_estabelecimento_p
		and	a.nr_sequencia  				= nr_seq_conta_p
		group by c.nr_sequencia,
			c.vl_coparticipacao,
			a.nr_sequencia,
			x.nr_sequencia,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info
		
union all

		select	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) * -1 vl_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info,
			'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO' ds_estorno,
			count(case e.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			ctb_documento			e,
			pls_protocolo_conta 		x
		where	a.nr_sequencia					= b.nr_seq_conta
		and	b.nr_sequencia					= c.nr_seq_conta_copartic
		and	a.nr_sequencia					= b.nr_seq_conta
		and	x.nr_sequencia					= a.nr_seq_protocolo
		and	d.nr_sequencia					= a.nr_seq_plano
		and	b.ie_status_coparticipacao 			= 'F'
		and	a.ie_status					in ('F','S') -- Conta fechada
		and	coalesce(b.ie_estorno_custo,'N')			= 'N'
		and	x.ie_tipo_protocolo				in ('C','I','R','F')
		and	(b.dt_fechamento_discussao IS NOT NULL AND b.dt_fechamento_discussao::text <> '')
		and	e.nr_doc_analitico				= c.nr_sequencia
		and	e.nr_seq_doc_compl				= a.nr_sequencia
		and	e.nr_documento					= x.nr_sequencia
		and	e.nm_tabela					= 'PLS_CONTA_COPARTIC_CONTAB'
		and	e.nm_atributo					= 'VL_COPARTICIPACAO'
		and	coalesce(e.ds_origem, 'X') 				not in ('CTB_ONLINE_ESTORNO', 'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO')
		and	x.cd_estabelecimento				= cd_estabelecimento_p	
		and	a.nr_sequencia					= nr_seq_conta_p
		group by c.nr_sequencia,
			c.vl_coparticipacao,
			a.nr_sequencia,
			x.nr_sequencia,
			e.nm_tabela,
			e.nm_atributo,
			e.cd_tipo_lote_contabil,
			e.nr_seq_info;

	vet_prov_copart 	c_prov_copart%rowtype;

	c_itens_intercambio CURSOR FOR
		SELECT	'P' ie_proc_mat,
			p.nr_sequencia nr_seq_item,
			d.nm_tabela,
			d.nm_atributo,
			(coalesce(p.vl_liberado,0) + coalesce(p.vl_glosa,0)) vl_item,
			coalesce(p.vl_glosa,0) vl_glosa,
			coalesce(pls_obter_dados_conta_proc(p.nr_sequencia,'VTA'),0) vl_avisado,
			d.ds_origem,
			d.nr_seq_info,
			d.cd_tipo_lote_contabil,
			count(case d.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_conta_proc p,
			pls_conta b,
			pls_protocolo_conta a,
			ctb_documento d
		where	b.nr_sequencia 					= p.nr_seq_conta
		and	a.nr_sequencia 					= b.nr_seq_protocolo
		and	p.nr_seq_conta					= nr_seq_conta_p
		and	a.cd_estabelecimento				= cd_estabelecimento_p
		and	p.nr_sequencia					= d.nr_doc_analitico
		and	b.nr_sequencia					= d.nr_seq_doc_compl
		and	a.nr_sequencia					= d.nr_documento
		and	d.cd_tipo_lote_contabil = 33
		and	d.nr_seq_info		in (23, 24, 91, 92, 93)
		and	d.nm_tabela		in ('PLS_CONTA_PROC')
		and	d.nm_atributo 		in ('VL_SOMA_PROC', 'VL_SOMA_PROC_MENOR', 'VL_SOMA_PROC_MAIOR', 'VL_NAO_AVIS_PROC', 'VL_GLOSA')
		and	coalesce(d.ds_origem, 'X')	<> 'ESTORNO'
		group by p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			p.vl_liberado,
			p.vl_glosa,
			p.nr_sequencia,
			d.ds_origem,
			d.nr_seq_info,
			d.cd_tipo_lote_contabil
		
union

		SELECT	'M' ie_proc_mat,
			p.nr_sequencia nr_seq_item,
			d.nm_tabela,
			d.nm_atributo,
			(coalesce(p.vl_liberado,0) + coalesce(p.vl_glosa,0)) vl_item,
			coalesce(p.vl_glosa,0) vl_glosa,
			coalesce(pls_obter_dados_conta_proc(p.nr_sequencia,'VTA'),0) vl_avisado,
			d.ds_origem,
			d.nr_seq_info,
			d.cd_tipo_lote_contabil,
			count(case d.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_conta_mat p,
			pls_conta b,
			pls_protocolo_conta a,
			ctb_documento d
		where	b.nr_sequencia 					= p.nr_seq_conta
		and	a.nr_sequencia 					= b.nr_seq_protocolo
		and	p.nr_seq_conta					= nr_seq_conta_p
		and	a.cd_estabelecimento				= cd_estabelecimento_p
		and	p.nr_sequencia					= d.nr_doc_analitico
		and	b.nr_sequencia					= d.nr_seq_doc_compl
		and	a.nr_sequencia					= d.nr_documento
		and	d.cd_tipo_lote_contabil = 33
		and	d.nr_seq_info		in (23, 24, 91, 92, 93)
		and	d.nm_tabela		in ('PLS_CONTA_MAT')
		and	d.nm_atributo 		in ('VL_SOMA_MAT', 'VL_SOMA_MAT_MENOR', 'VL_SOMA_MAT_MAIOR', 'VL_NAO_AVIS_MAT', 'VL_GLOSA')
		and	coalesce(d.ds_origem, 'X')	<> 'ESTORNO'
		group by p.nr_sequencia,
			d.nm_tabela,
			d.nm_atributo,
			p.vl_liberado,
			p.vl_glosa,
			p.nr_sequencia,
			d.ds_origem,
			d.nr_seq_info,
			d.cd_tipo_lote_contabil;

	vet_itens_intercambio c_itens_intercambio%rowtype;

	c_prov_fat CURSOR FOR
		SELECT	CASE WHEN f.ie_status_faturamento_new='C' THEN -1 WHEN f.ie_status_faturamento_new='N' THEN -1 WHEN f.ie_status_faturamento_new='U' THEN -1  ELSE 1 END  * coalesce(e.vl_provisao,0) vl_provisao,
			CASE WHEN f.ie_status_faturamento_new='C' THEN -1 WHEN f.ie_status_faturamento_new='N' THEN -1 WHEN f.ie_status_faturamento_new='U' THEN -1  ELSE 1 END  * coalesce(e.vl_administracao,0) vl_administracao,
			CASE WHEN f.ie_status_faturamento_new='C' THEN -1 WHEN f.ie_status_faturamento_new='N' THEN -1 WHEN f.ie_status_faturamento_new='U' THEN -1  ELSE 1 END  * CASE WHEN s.ie_tipo_segurado='I' THEN (pls_obter_vl_pag_fat_pos(e.nr_sequencia,'T', null))::numeric  WHEN s.ie_tipo_segurado='H' THEN (pls_obter_vl_pag_fat_pos(e.nr_sequencia,'T', null))::numeric   ELSE 0 END  vl_diferenca,
			CASE WHEN f.ie_status_faturamento_new='C' THEN -1 WHEN f.ie_status_faturamento_new='N' THEN -1 WHEN f.ie_status_faturamento_new='U' THEN -1  ELSE 1 END  * (coalesce(e.vl_custo_operacional,0) - coalesce(e.vl_administracao,0)) vl_reembolso,
			CASE WHEN f.ie_status_faturamento_new='C' THEN -1 WHEN f.ie_status_faturamento_new='N' THEN -1 WHEN f.ie_status_faturamento_new='U' THEN -1  ELSE 1 END  * (coalesce(e.vl_custo_operacional,0) - coalesce(e.vl_provisao,0)) vl_ajuste,
			g.nr_documento,
			g.nr_seq_doc_compl,
			g.nr_doc_analitico,
			g.nm_tabela,
			g.nm_atributo,
			g.cd_tipo_lote_contabil,
			g.nr_seq_info,
			count(case g.ie_situacao_ctb when 'P' then 1 end) qt_pendente
		from	pls_log_pos_estabelecido		f,
			pls_conta_pos_estab_contab 		e,
			pls_conta_pos_estabelecido		c,
			pls_conta				b,
			pls_protocolo_conta			a,
			pls_segurado				s,
			ctb_documento				g
		where	c.nr_sequencia				= f.nr_seq_conta_pos
		and	b.nr_sequencia				= f.nr_seq_conta
		and	f.nr_seq_conta_pos			= e.nr_seq_conta_pos
		and	b.nr_sequencia				= nr_seq_conta_p
		and	a.nr_sequencia				= b.nr_seq_protocolo
		and	s.nr_sequencia 				= b.nr_seq_segurado
		and	g.nr_documento				= c.nr_sequencia
		and	g.nr_seq_doc_compl			= e.nr_sequencia
		and	g.nr_doc_analitico 			= f.nr_sequencia
		and	coalesce(f.ie_tipo_registro,'H') 		= 'H' -- Historico
		and	((coalesce(f.ie_status_faturamento_ant,'X') 	in ('C','N','U','X')
		and	f.ie_status_faturamento_new 		in ('L','P'))
		or (coalesce(f.ie_status_faturamento_ant, 'X')	= 'P'
		and	f.ie_status_faturamento_new		= 'L'))
		and	a.cd_estabelecimento			= cd_estabelecimento_p
		and	a.ie_situacao				<> 'RE'
		and	coalesce(c.ie_situacao,'A')			= 'A'
		and     coalesce(c.ie_status_faturamento, 'A') 	<> 'A'
		and	coalesce((	SELECT	max(r.ie_situacao)
				from	pls_conta_medica_resumo r
				where	b.nr_sequencia	= r.nr_seq_conta
				and	r.nr_sequencia	= e.nr_seq_conta_resumo),'X')	<> 'I'
		group by f.ie_status_faturamento_new,
			e.vl_provisao,
			e.vl_administracao,
			s.ie_tipo_segurado,
			e.nr_sequencia,
			e.vl_custo_operacional,
			g.nr_documento,
			g.nr_seq_doc_compl,
			g.nr_doc_analitico,
			g.nm_tabela,
			g.nm_atributo,
			g.cd_tipo_lote_contabil,
			g.nr_seq_info;

	vet_prov_fat c_prov_fat%rowtype;

	
BEGIN

	select	coalesce(max(ie_forma_contab_taxa_pgto),'N'),
		coalesce(max(ie_status_prov_pagto),'NC'),
		max(coalesce(ie_lote_ajuste_prod,'R')),
		max(coalesce(ie_consiste_recalculo,'N'))
	into STRICT	ie_forma_contab_taxa_pgto_w,
		ie_status_prov_pagto_w,
		ie_lote_ajuste_prod_w,
		ie_consiste_recalculo_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p;

	select	max(nr_seq_protocolo)
	into STRICT	nr_seq_protocolo_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	select 	max(a.dt_mes_competencia)
	into STRICT	dt_referencia_w
	from	pls_protocolo_conta	a,
		pls_conta		b
	where 	a.nr_sequencia = b.nr_seq_protocolo
	and	b.nr_sequencia = nr_seq_conta_p;

	dt_referencia_month_w	:= trunc(dt_referencia_w,'month');

	select	max(cd_empresa)
	into STRICT	cd_empresa_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	open c_prov_copart;
	loop
	fetch c_prov_copart into
		vet_prov_copart;
	EXIT WHEN NOT FOUND; /* apply on c_prov_copart */
		begin
		if (coalesce(vet_prov_copart.vl_contabil, 0) <> 0) then

			-- Se o movimento original ainda nao foi contabilizado, deleta ele ao inves de gerar um movimento de estorno 
			if (vet_prov_copart.qt_pendente > 0) then
				delete 	FROM ctb_documento
				where	nr_documento 			= nr_seq_protocolo_w
				and	nr_seq_doc_compl 		= nr_seq_conta_p
				and	nr_doc_analitico 		= vet_prov_copart.nr_sequencia
				and 	nm_tabela 			= vet_prov_copart.nm_tabela
				and	nm_atributo 			= vet_prov_copart.nm_atributo
				and	cd_tipo_lote_contabil		= vet_prov_copart.cd_tipo_lote_contabil
				and	nr_seq_info 			= vet_prov_copart.nr_seq_info
				and	ie_situacao_ctb 		= 'P'
				and	coalesce(ds_origem, 'X') 		not in ('CTB_ONLINE_ESTORNO', 'MOVIMENTO_ESTORNO CTB_ONLINE_ESTORNO');
			else
				CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
										pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
										42,
										null,
										41,
										vet_prov_copart.nr_seq_protocolo,
										vet_prov_copart.nr_seq_conta,
										vet_prov_copart.nr_sequencia,
										vet_prov_copart.vl_contabil * -1, -- Inverte o valor pois e um estorno
										vet_prov_copart.nm_tabela,
										vet_prov_copart.nm_atributo,
										nm_usuario_p,
										'P',
										vet_prov_copart.ds_estorno);

				select 	*
				into STRICT	ctb_doc_w
				from (SELECT 	*
					from   	ctb_documento a
					where 	a.nr_documento 		= vet_prov_copart.nr_seq_protocolo
					and	a.nr_seq_doc_compl	= vet_prov_copart.nr_seq_conta
					and	a.nr_doc_analitico	= vet_prov_copart.nr_sequencia
					and	a.cd_tipo_lote_Contabil = 42
					and	a.ie_situacao_ctb 	= 'P'
					order by nr_sequencia desc LIMIT 1) alias0 LIMIT 1;

				CALL pls_contab_onl_lote_fin_pck.contabiliza_documento(ctb_doc_w, nm_usuario_p);
			end if;
		end if;
		end;
	end loop;
	close c_prov_copart;

	open c_valores_prov_prod;
		loop
		fetch c_valores_prov_prod into	
			vet_valores_prov_prod;
		EXIT WHEN NOT FOUND; /* apply on c_valores_prov_prod */
			begin
			-- Se o movimento original ainda nao foi contabilizado, deleta ele ao inves de gerar um movimento de estorno 
			if (vet_valores_prov_prod.qt_pendente > 0) then
				delete 	FROM ctb_documento
				where	nr_documento 			= nr_seq_protocolo_w
				and	nr_seq_doc_compl 		= nr_seq_conta_p
				and	nr_doc_analitico 		= vet_valores_prov_prod.nr_sequencia
				and 	nm_tabela 			= vet_valores_prov_prod.nm_tabela
				and	nm_atributo 			= vet_valores_prov_prod.nm_atributo
				and	cd_tipo_lote_contabil		= vet_valores_prov_prod.cd_tipo_lote_contabil
				and	nr_seq_info 			= vet_valores_prov_prod.nr_seq_info
				and	ie_situacao_ctb 		= 'P'
				and	coalesce(ds_origem, 'X') 		<> 'ESTORNO';
			else
				if (vet_valores_prov_prod.nm_atributo = 'VL_LIBERADO' and vet_valores_prov_prod.vl_provisao <> 0) then
					ie_inseriu_w := 'S';

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											36,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_valores_prov_prod.nr_sequencia,
											vet_valores_prov_prod.vl_provisao * -1, --Inverte o valor pois e um estorno
											'PLS_CONTA_MEDICA_RESUMO',
											vet_valores_prov_prod.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');

				elsif (vet_valores_prov_prod.nm_atributo = 'VL_GLOSA' and vet_valores_prov_prod.vl_glosa <> 0) then
					ie_inseriu_w := 'S';

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											24,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_valores_prov_prod.nr_sequencia,
											vet_valores_prov_prod.vl_glosa * -1, --Inverte o valor pois e um estorno
											'PLS_CONTA_MEDICA_RESUMO',
											vet_valores_prov_prod.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');

				elsif (vet_valores_prov_prod.nm_atributo = 'VL_AJUSTADO' and vet_valores_prov_prod.vl_ajuste <> 0
					and	ie_lote_ajuste_prod_w 	= 'P'
					and	vet_valores_prov_prod.ie_tipo_protocolo <> 'F') then
					ie_inseriu_w := 'S';

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											36,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_valores_prov_prod.nr_sequencia,
											vet_valores_prov_prod.vl_ajuste * -1, --Inverte o valor pois e um estorno
											'PLS_CONTA_MEDICA_RESUMO',
											vet_valores_prov_prod.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');

				elsif (vet_valores_prov_prod.nm_atributo = 'VL_TAXA_PAGAMENTO' and vet_valores_prov_prod.vl_taxa_adm <> 0
					and coalesce(ie_forma_contab_taxa_pgto_w,'N') <> 'N') then
					ie_inseriu_w := 'S';

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											36,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_valores_prov_prod.nr_sequencia,
											vet_valores_prov_prod.vl_taxa_adm * -1, --Inverte o valor pois e um estorno
											'PLS_CONTA_MEDICA_RESUMO',
											vet_valores_prov_prod.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');
				end if;
				if (coalesce(ie_inseriu_w, 'N') = 'S') then
					select 	*
					into STRICT 	ctb_doc_w
					from (SELECT 	*
						from   	ctb_documento a
						where 	a.nr_documento 		= nr_seq_protocolo_w
						and	a.nr_seq_doc_compl	= nr_seq_conta_p
						and	a.nr_doc_analitico	= vet_valores_prov_prod.nr_sequencia
						and	a.cd_tipo_lote_contabil = 40
						and	a.ie_situacao_ctb 	= 'P'
						order by nr_sequencia desc) alias2 LIMIT 1;

					CALL pls_contab_onl_lote_fin_pck.contabiliza_documento(ctb_doc_w, nm_usuario_p);
					ie_inseriu_w := 'N';
				end if;
			end if;
			end;
		end loop;
		close c_valores_prov_prod;

	open c_ajuste;
		loop
		fetch c_ajuste into
			vet_ajuste;
		EXIT WHEN NOT FOUND; /* apply on c_ajuste */
			begin

			if (coalesce(vet_ajuste.vl_ajuste, 0) > 0) then
				-- Se o movimento original ainda nao foi contabilizado, deleta ele ao inves de gerar um movimento de estorno 
				if (vet_ajuste.qt_pendente > 0) then
					delete 	FROM ctb_documento
					where	nr_documento 			= nr_seq_protocolo_w
					and	nr_seq_doc_compl 		= nr_seq_conta_p
					and	nr_doc_analitico 		= vet_ajuste.nr_sequencia
					and 	nm_tabela 			= vet_ajuste.nm_tabela
					and	nm_atributo 			= vet_ajuste.nm_atributo
					and	cd_tipo_lote_contabil		= vet_ajuste.cd_tipo_lote_contabil
					and	nr_seq_info 			= vet_ajuste.nr_seq_info
					and	ie_situacao_ctb 		= 'P'
					and	coalesce(ds_origem, 'X')		<> 'ESTORNO';
				else
					CALL ctb_concil_financeira_pck.ctb_gravar_documento( cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											36,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_ajuste.nr_sequencia,
											vet_ajuste.vl_ajuste * -1, --Inverte o valor pois e um estorno
											vet_ajuste.nm_tabela,
											'VL_AJUSTADO',
											nm_usuario_p);
				end if;
			end if;
			end;
		end loop;
	close c_ajuste;

	
	open c_itens_intercambio;
		loop
		fetch c_itens_intercambio into
			vet_itens_intercambio;
		EXIT WHEN NOT FOUND; /* apply on c_itens_intercambio */
			begin
			if (vet_itens_intercambio.qt_pendente > 0) then
				delete 	FROM ctb_documento
				where	nr_documento 			= nr_seq_protocolo_w
				and	nr_seq_doc_compl 		= nr_seq_conta_p
				and	nr_doc_analitico 		= vet_itens_intercambio.nr_seq_item
				and 	nm_tabela			= vet_itens_intercambio.nm_tabela
				and	nm_atributo 			= vet_itens_intercambio.nm_atributo
				and	cd_tipo_lote_contabil 		= vet_itens_intercambio.cd_tipo_lote_contabil
				and	nr_seq_info 			= vet_itens_intercambio.nr_seq_info
				and	ie_situacao_ctb 		= 'P'
				and	coalesce(ds_origem, 'X') 		<> 'ESTORNO';
			else
				if (vet_itens_intercambio.nm_atributo in ('VL_SOMA_PROC', 'VL_SOMA_MAT')) then
					if (vet_itens_intercambio.ds_origem in (11, 25)) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												23,
												nr_seq_protocolo_w,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_item * -1, -- Inverte o valor pois e estorno
												vet_itens_intercambio.nm_tabela,
												vet_itens_intercambio.nm_atributo,
												nm_usuario_p,
												'P',
												'ESTORNO');
					elsif (vet_itens_intercambio.ds_origem = 24) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												23,
												nr_seq_protocolo_w,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_avisado * -1, -- Inverte o valor pois e estorno
												vet_itens_intercambio.nm_tabela,
												vet_itens_intercambio.nm_atributo,
												nm_usuario_p,
												'P',
												'ESTORNO');
					end if;
				elsif (vet_itens_intercambio.nm_atributo = 'VL_GLOSA') then
					CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											33,
											null,
											24,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_itens_intercambio.nr_seq_item,
											vet_itens_intercambio.vl_glosa * -1, -- Inverte o valor pois e estorno
											vet_itens_intercambio.nm_tabela,
											vet_itens_intercambio.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');
				elsif (vet_itens_intercambio.nm_atributo in ('VL_SOMA_PROC_MENOR', 'VL_SOMA_MAT_MENOR')) then
					vl_contabil_w		:= vet_itens_intercambio.vl_item - vet_itens_intercambio.vl_avisado;

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											33,
											null,
											91,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_itens_intercambio.nr_seq_item,
											vl_contabil_w * -1, -- Inverte o valor pois e estorno
											vet_itens_intercambio.nm_tabela,
											vet_itens_intercambio.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');
				elsif (vet_itens_intercambio.nm_atributo in ('VL_SOMA_PROC_MAIOR', 'VL_SOMA_MAT_MAIOR')) then
					vl_contabil_w		:= vet_itens_intercambio.vl_avisado - vet_itens_intercambio.vl_item;

					CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											33,
											null,
											92,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_itens_intercambio.nr_seq_item,
											vl_contabil_w * -1, -- Inverte o valor pois e estorno
											vet_itens_intercambio.nm_tabela,
											vet_itens_intercambio.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');
				elsif (vet_itens_intercambio.nm_atributo in ('VL_NAO_AVIS_PROC', 'VL_NAO_AVIS_MAT')) then
					CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											33,
											null,
											93,
											nr_seq_protocolo_w,
											nr_seq_conta_p,
											vet_itens_intercambio.nr_seq_item,
											vet_itens_intercambio.vl_item * -1, -- Inverte o valor pois e estorno
											vet_itens_intercambio.nm_tabela,
											vet_itens_intercambio.nm_atributo,
											nm_usuario_p,
											'P',
											'ESTORNO');
				end if;
			end if;
			end;
		end loop;
	close c_itens_intercambio;

	open c_prov_fat;
	loop
	fetch c_prov_fat into
		vet_prov_fat;
	EXIT WHEN NOT FOUND; /* apply on c_prov_fat */
		begin
			if (vet_prov_fat.nm_atributo = 'VL_LIBERADO') then /* Provisao */
				vl_contabil_w		:= vet_prov_fat.vl_provisao;	

			elsif (vet_prov_fat.nm_atributo = 'VL_ADMINISTRACAO') then /* Taxa */
				vl_contabil_w		:= vet_prov_fat.vl_administracao;
				
			elsif (vet_prov_fat.nm_atributo = 'VL_DIFERENCA') then /* Diferenca */
				vl_contabil_w		:= vet_prov_fat.vl_diferenca;
			
			elsif (vet_prov_fat.nm_atributo = 'VL_REEMBOLSO') then /* Reembolso */
				vl_contabil_w		:= vet_prov_fat.vl_reembolso;
			
			elsif (vet_prov_fat.nm_atributo = 'VL_AJUSTE') then /* Ajuste */
				vl_contabil_w		:= vet_prov_fat.vl_ajuste;	
				nm_atributo_w		:= 'VL_AJUSTE';

			end if;	

			if (coalesce(vl_contabil_w, 0) <> 0) then
				if (vet_prov_fat.qt_pendente > 0) then
					delete 	FROM ctb_documento
					where	nr_documento 			= vet_prov_fat.nr_documento
					and	nr_seq_doc_compl 		= vet_prov_fat.nr_seq_doc_compl
					and	nr_doc_analitico 		= vet_prov_fat.nr_doc_analitico
					and 	nm_tabela 			= vet_prov_fat.nm_tabela
					and	nm_atributo 			= vet_prov_fat.nm_atributo
					and	cd_tipo_lote_contabil		= vet_prov_fat.cd_tipo_lote_contabil
					and	nr_seq_info 			= vet_prov_fat.nr_seq_info
					and	ie_situacao_ctb 		= 'P'
					and	coalesce(ds_origem, 'X') 		<> 'ESTORNO';
				else
				CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
										pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
										43,
										null,
										vet_prov_fat.nr_seq_info,
										vet_prov_fat.nr_documento,
										vet_prov_fat.nr_seq_doc_compl,
										vet_prov_fat.nr_doc_analitico,
										vl_contabil_w * -1, -- Inverte o valor pois e estorno
										vet_prov_fat.nm_tabela,
										vet_prov_fat.nm_atributo,
										nm_usuario_p,
										'P',
										'ESTORNO');

										
				select 	*
				into STRICT	ctb_doc_w
				from (SELECT *
					from   	ctb_documento a
					where 	a.nr_documento 		= vet_prov_fat.nr_documento
					and	a.nr_seq_doc_compl	= vet_prov_fat.nr_seq_doc_compl
					and	a.nr_doc_analitico	= vet_prov_fat.nr_doc_analitico
					and	a.cd_tipo_lote_contabil	= 43
					order by nr_sequencia desc) alias0 LIMIT 1;

				CALL pls_contab_onl_lote_fin_pck.contabiliza_documento(ctb_doc_w, nm_usuario_p);
				end if;
			end if;
			end;
	end loop;
	close c_prov_fat;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_desf_fechar_conta ( nr_seq_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
