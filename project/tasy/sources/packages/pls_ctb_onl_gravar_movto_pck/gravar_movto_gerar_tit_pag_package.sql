-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_tit_pag ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


	nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type := 0;
	ie_data_trib_prod_med_w		pls_parametro_contabil.ie_data_trib_prod_med%type;
	ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_lote_ajuste_prod%type;
	ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
	dt_referencia_month_w		timestamp;
	dt_referencia_w			timestamp;
	qt_movimento_w			bigint := 0;
	qt_outro_w			bigint;
	qt_prest_pgto_w			bigint;
	ie_tipo_movimento_w		varchar(2);


	c_pagamento CURSOR FOR
		SELECT	'P' ie_proc_mat, /*Procedimento*/
			a.dt_geracao_titulos dt_movimento,
			coalesce(d.vl_liberado,0) vl_contabil,
			coalesce(d.vl_glosa,0) vl_glosa,
			d.vl_liberado - CASE WHEN coalesce(d.vl_apresentado,0)=0 THEN coalesce(d.vl_calculado,0)  ELSE coalesce(d.vl_apresentado,0) END  vl_ajuste,
			b.nr_seq_protocolo nr_seq_doc,
			b.nr_sequencia nr_seq_doc_compl,
			d.nr_sequencia nr_doc_analitico,
			b.nr_sequencia nr_seq_conta,
			null nr_seq_conta_mat,
			c.nr_sequencia nr_seq_conta_proc
		FROM pls_periodo_pagamento x, pls_conta_proc c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_proc and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto and a.nr_seq_periodo	= x.nr_sequencia  and coalesce(d.ie_situacao,'A') 	= 'A' and a.ie_status		= 'D' and a.nr_sequencia		= nr_seq_lote_p
		
union all

		SELECT	'M' ie_proc_mat, /*Material*/
			a.dt_geracao_titulos dt_movimento,
			coalesce(d.vl_liberado,0) vl_contabil,
			coalesce(d.vl_glosa,0) vl_glosa,
			d.vl_liberado - CASE WHEN coalesce(d.vl_apresentado,0)=0 THEN coalesce(d.vl_calculado,0)  ELSE coalesce(d.vl_apresentado,0) END  vl_ajuste,
			b.nr_seq_protocolo nr_seq_doc,
			b.nr_sequencia nr_seq_doc_compl,
			d.nr_sequencia nr_doc_analitico,
			b.nr_sequencia nr_seq_conta,
			c.nr_sequencia nr_seq_conta_mat,
			null nr_seq_conta_proc
		FROM pls_periodo_pagamento x, pls_conta_mat c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_mat and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto and a.nr_seq_periodo	= x.nr_sequencia  and coalesce(d.ie_situacao,'A') 	= 'A' and a.ie_status		= 'D' and a.nr_sequencia		= nr_seq_lote_p;

	vet_pagamento	c_pagamento%rowtype;

	c_tipo_movimento CURSOR FOR
		SELECT	'C'
		
		
union

		SELECT	'G'
		
		where	ie_status_prov_pagto_w <> 'F'
		
union

		select	'A'
		
		where	ie_lote_ajuste_prod_w = 'R'
		and	vet_pagamento.vl_ajuste > 0;

	c_evento CURSOR FOR
		SELECT	coalesce(a.vl_movimento,0) vl_movimento,
			c.dt_geracao_titulos dt_competencia,
			'PLS_EVENTO_MOVIMENTO' nm_tabela,
			'VL_MOVIMENTO' nm_atributo,
			c.nr_sequencia nr_seq_tab_orig,
			b.nr_sequencia nr_seq_tab_compl,
			a.nr_sequencia nr_doc_analitico,
			b.nr_sequencia nr_seq_lote_evento,
			a.nr_sequencia nr_seq_evento
		from	pls_evento_movimento	a,
			pls_lote_evento		b,
			pls_lote_pagamento 	c,
			pls_periodo_pagamento 	x
		where	b.nr_sequencia		= a.nr_seq_lote
		and	c.nr_sequencia		= a.nr_seq_lote_pgto
		and	c.nr_seq_periodo	= x.nr_sequencia
		and	c.ie_status		= 'D'
		and	coalesce(b.nr_seq_lote_pgto_apropr,0) = 0
		and	coalesce(b.nr_seq_lote_ret_trib,0)	= 0
		and	c.nr_sequencia = nr_seq_lote_p
		
union all

		SELECT	coalesce(a.vl_movimento,0),
			c.dt_geracao_titulos dt_competencia,
			'PLS_EVENTO_MOVIMENTO' nm_tabela,
			'VL_MOVIMENTO' nm_atributo,
			c.nr_sequencia nr_seq_tab_orig,
			b.nr_sequencia nr_seq_tab_compl,
			a.nr_sequencia nr_doc_analitico,
			b.nr_sequencia nr_seq_lote_evento,
			a.nr_sequencia nr_seq_evento
		from	pls_evento_movimento	a,
			pls_lote_evento		b,
			pls_lote_pagamento 	c,
			pls_periodo_pagamento  	x
		where	b.nr_sequencia		= a.nr_seq_lote
		and	c.nr_sequencia		= b.nr_seq_pgto_desc_liq
		and	c.nr_seq_periodo	= x.nr_sequencia
		and	coalesce(b.nr_seq_lote_pgto_apropr,0) 	= 0
		and	coalesce(b.nr_seq_lote_ret_trib,0)		= 0
		and	c.ie_status				= 'D'
		and	coalesce(a.nr_seq_lote_pgto, 0) 		= 0
		and	c.nr_sequencia		= nr_seq_lote_p
		
union all

		select	coalesce(a.vl_movimento,0) * (-1),
			c.dt_geracao_titulos dt_competencia,
			'PLS_EVENTO_MOVIMENTO' nm_tabela,
			'VL_MOVIMENTO' nm_atributo,
			c.nr_sequencia nr_seq_tab_orig,
			b.nr_sequencia nr_seq_tab_compl,
			a.nr_sequencia nr_doc_analitico,
			b.nr_sequencia nr_seq_lote_evento,
			a.nr_sequencia nr_seq_evento
		from	pls_evento_movimento	a,
			pls_lote_evento		b,
			pls_lote_pagamento 	c,
			pls_periodo_pagamento  	x
		where	b.nr_sequencia		= a.nr_seq_lote
		and	c.nr_sequencia		= b.nr_seq_lote_pgto_apropr
		and	c.nr_seq_periodo	= x.nr_sequencia
		and	coalesce(b.nr_seq_lote_ret_trib,0)	= 0
		and	c.ie_status			= 'D'
		and	c.nr_sequencia		= nr_seq_lote_p;
		
	vet_evento		c_evento%rowtype;

	c_tributo CURSOR FOR
		SELECT	a.nr_sequencia nr_seq_pag_prest_venc_trib,
			a.vl_imposto vl_contabil,
			trunc(CASE WHEN ie_data_trib_prod_med_w='VE' THEN  				fim_mes(a.dt_imposto) WHEN ie_data_trib_prod_med_w='VT' THEN  b.dt_vencimento  ELSE e.dt_geracao_titulos END ) dt_movimento,
			'PLS_PAG_PREST_VENC_TRIB' nm_tabela,
			'VL_IMPOSTO' nm_atributo,
			e.nr_sequencia nr_seq_doc,
			b.nr_sequencia nr_seq_doc_compl,
			a.nr_sequencia nr_doc_analitico
		from	pls_pag_prest_venc_trib		a,
			pls_pag_prest_vencimento	b,
			pls_pagamento_prestador		d,
			pls_lote_pagamento		e,
			pls_periodo_pagamento  		x
		where	b.nr_sequencia	= a.nr_seq_vencimento
		and	d.nr_sequencia	= b.nr_seq_pag_prestador
		and	e.nr_sequencia	= d.nr_seq_lote
		and	e.nr_seq_periodo = x.nr_sequencia
		and	a.ie_pago_prev	!= 'R'
		and	not exists (	SELECT	1
					from 	pls_pag_item_trib       x,
						pls_pagamento_item      y
					where	y.nr_sequencia		= x.nr_seq_pagamento
					and	a.nr_sequencia		= x.nr_seq_venc_trib
					and	d.nr_sequencia		= y.nr_seq_pagamento )
		and	e.nr_sequencia	= nr_seq_lote_p
		
union all

		select	c.nr_sequencia nr_seq_pag_prest_venc_trib,
			b.vl_evento vl_contabil,
			trunc(CASE WHEN ie_data_trib_prod_med_w='VE' THEN  				fim_mes(c.dt_imposto) WHEN ie_data_trib_prod_med_w='VT' THEN  d.dt_vencimento  ELSE f.dt_geracao_titulos END ) dt_movimento,
			'PLS_PAGAMENTO_ITEM' nm_tabela,
			'VL_IMPOSTO' nm_atributo,
			e.nr_sequencia nr_seq_doc,
			b.nr_sequencia nr_seq_doc_compl,
			a.nr_sequencia nr_doc_analitico
		from	pls_pagamento_item 		a,
			pls_pag_item_trib 		b,
			pls_pag_prest_venc_trib		c,
			pls_pag_prest_vencimento	d,
			pls_pagamento_prestador		e,
			pls_lote_pagamento		f,
			pls_periodo_pagamento  		x
		where	a.nr_sequencia	= b.nr_seq_pagamento
		and	c.nr_sequencia	= b.nr_seq_venc_trib
		and	d.nr_sequencia	= c.nr_seq_vencimento
		and	e.nr_sequencia	= d.nr_seq_pag_prestador
		and	f.nr_sequencia	= e.nr_seq_lote
		and	e.nr_sequencia	= a.nr_seq_pagamento
		and	f.nr_seq_periodo = x.nr_sequencia
		and	c.ie_pago_prev	!= 'R'
		and	f.nr_sequencia	= nr_seq_lote_p;

	vet_tributo	c_tributo%rowtype;
	
BEGIN

	select	max(ie_data_trib_prod_med),
		max(coalesce(ie_status_prov_pagto,'NC')),
		max(coalesce(ie_lote_ajuste_prod,'R'))
	into STRICT	ie_data_trib_prod_med_w,
		ie_status_prov_pagto_w,
		ie_lote_ajuste_prod_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p;

	select 	max(dt_mes_competencia)
	into STRICT	dt_referencia_w
	from	pls_lote_pagamento
	where	nr_sequencia	= nr_seq_lote_p;

	dt_referencia_month_w := trunc(dt_referencia_w, 'MONTH');

	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PM'
	and	ie_tipo_movimentacao	!= '13'
	and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);


	pls_gerar_atualizacao_contabil(	dt_referencia_w,
					nm_usuario_p,
					cd_estabelecimento_p,
					41,
					'G',
					qt_movimento_w,
					nr_seq_atualizacao_w);
	open c_evento;
	loop
	fetch c_evento into	
		vet_evento;
	EXIT WHEN NOT FOUND; /* apply on c_evento */
		begin



		ctb_pls_atualizar_prod_eve_in(	vet_evento.nr_seq_lote_evento,
						vet_evento.nr_seq_evento,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						qt_movimento_w);

		CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
								pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
								41,
								null,		
								39,
								vet_evento.nr_seq_tab_orig,
								vet_evento.nr_seq_tab_compl,
								vet_evento.nr_doc_analitico,
								vet_evento.vl_movimento,
								vet_evento.nm_tabela,
								vet_evento.nm_atributo,
								nm_usuario_p);
		end;
	end loop;
	close c_evento;

	open c_pagamento;
	loop
	fetch c_pagamento into
		vet_pagamento;
	EXIT WHEN NOT FOUND; /* apply on c_pagamento */
		begin
			if (qt_outro_w > 0) then
				ctb_pls_atualizar_prod_med_in(	vet_pagamento.nr_seq_conta,
								vet_pagamento.nr_seq_conta_proc,
								vet_pagamento.nr_seq_conta_mat,
								nr_seq_atualizacao_w,
								nm_usuario_p,
								cd_estabelecimento_p,
								qt_movimento_w);
			end if;	

			if (qt_prest_pgto_w > 0) then
				ctb_pls_atualizar_prod_med_res(	vet_pagamento.nr_seq_conta,
								vet_pagamento.nr_seq_conta_proc,
								vet_pagamento.nr_seq_conta_mat,
								nr_seq_atualizacao_w,
								nm_usuario_p,
								cd_estabelecimento_p,
								qt_movimento_w,
								dt_referencia_w);						
			end if;
			open c_tipo_movimento;
				loop
				fetch c_tipo_movimento into
					ie_tipo_movimento_w;
				EXIT WHEN NOT FOUND; /* apply on c_tipo_movimento */
					begin
					if (ie_tipo_movimento_w = 'C') then /* Conta */
						if (coalesce(vet_pagamento.vl_contabil, 0) <> 0) then
							CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
													pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
													41,
													null,		
													36,
													vet_pagamento.nr_seq_doc,
													vet_pagamento.nr_seq_doc_compl,
													vet_pagamento.nr_doc_analitico,
													vet_pagamento.vl_contabil,
													'PLS_CONTA_MEDICA_RESUMO',
													'VL_LIBERADO',
													nm_usuario_p,
													'P',
													'C');
						end if;
					elsif (ie_tipo_movimento_w = 'G') then /* Glosa */
						if (coalesce(vet_pagamento.vl_glosa, 0) <> 0) then
							CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
													pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
													41,
													null,		
													24,
													vet_pagamento.nr_seq_doc,
													vet_pagamento.nr_seq_doc_compl,
													vet_pagamento.nr_doc_analitico,
													vet_pagamento.vl_glosa,
													'PLS_CONTA_MEDICA_RESUMO',
													'VL_GLOSA',
													nm_usuario_p,
													'P',
													'G');
						end if;
					elsif (ie_tipo_movimento_w = 'A') then /* Valor de ajuste */
						if (coalesce(vet_pagamento.vl_ajuste, 0) <> 0) then
							CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
													pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
													41,
													null,		
													36,
													vet_pagamento.nr_seq_doc,
													vet_pagamento.nr_seq_doc_compl,
													vet_pagamento.nr_doc_analitico,
													vet_pagamento.vl_ajuste,
													'PLS_CONTA_MEDICA_RESUMO',
													'VL_AJUSTE',
													nm_usuario_p,
													'P',
													'A');
						end if;
					end if;	
					end;
				end loop;
				close c_tipo_movimento;
		end;
	end loop;
	close c_pagamento;

	open c_tributo;
	loop
	fetch c_tributo into
		vet_tributo;
	EXIT WHEN NOT FOUND; /* apply on c_tributo */
		begin

			ctb_pls_atualizar_trib_pag_in(	nr_seq_lote_p,
							vet_tributo.nr_seq_pag_prest_venc_trib,
							nr_seq_atualizacao_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							qt_movimento_w);

			if (coalesce(vet_tributo.vl_contabil, 0) <> 0) then
				CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
										pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
										41,
										null,		
										40,
										vet_tributo.nr_seq_doc,
										vet_tributo.nr_seq_doc_compl,
										vet_tributo.nr_doc_analitico,
										vet_tributo.vl_contabil,
										vet_tributo.nm_tabela,
										vet_tributo.nm_atributo,
										nm_usuario_p);
			end if;
		end;
	end loop;
	close c_tributo;
	
	pls_gerar_atualizacao_contabil(	dt_referencia_w,
					nm_usuario_p,
					cd_estabelecimento_p,
					41,
					'A',
					qt_movimento_w,
					nr_seq_atualizacao_w);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_tit_pag ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
