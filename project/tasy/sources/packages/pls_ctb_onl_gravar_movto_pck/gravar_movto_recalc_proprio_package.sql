-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_recalc_proprio ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


	nr_seq_conta_w			pls_conta.nr_sequencia%type;
	cd_empresa_w			empresa.cd_empresa%type;
	nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type := 0;
	ie_consiste_recalculo_w		pls_parametro_contabil.ie_consiste_recalculo%type;
	ie_forma_contab_taxa_pgto_w	pls_parametro_contabil.ie_forma_contab_taxa_pgto%type;
	ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_lote_ajuste_prod%type;
	ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
	ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
	ie_tipo_relacao_w		pls_prestador.ie_tipo_relacao%type;
	ie_regra_recalculo_w		varchar(1);

	dt_referencia_w			timestamp;
	dt_ref_month_w			timestamp;
	qt_prest_pgto_w			bigint;
	qt_outro_w			bigint;
	qt_movimento_w			bigint := 0;

	c_contas CURSOR FOR
		SELECT	nr_seq_conta
		from	pls_conta_recalculo
		where	nr_seq_lote = nr_seq_lote_p;

	-- Obtem as informacoes para contabilizacao instantanea de provisao de producao medica.
	c_valores_prov_prod CURSOR FOR
		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm
		from	pls_conta_medica_resumo	d,
			pls_conta_proc		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_proc
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_w
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	= 'C'
		and	b.ie_status 		= 'F'
		and	a.ie_situacao 		not in ('RE','I')	
		and	c.ie_status 		not in ('D','M')
		and	d.ie_situacao		= 'A'
		and	d.ie_tipo_item		<> 'I'
		and	ie_status_prov_pagto_w = 'F'
		
union all

		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm
		from	pls_conta_medica_resumo	d,
			pls_conta_mat		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_mat
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_w
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	= 'C'
		and	b.ie_status 		= 'F'
		and	a.ie_situacao 		not in ('RE','I')	
		and	c.ie_status 		not in ('D','M')
		and	d.ie_situacao		= 'A'
		and	d.ie_tipo_item		<> 'I'
		and	ie_status_prov_pagto_w = 'F';
		
	vet_valores_prov_prod		c_valores_prov_prod%rowtype;

	-- Diferentes tipos de contabilizacao para a movimentacao de provisao de producao medica.
	c_itens_prov_prod CURSOR FOR
		SELECT 'VL_LIBERADO' nm_atributo,
			vet_valores_prov_prod.vl_provisao vl_item,
			36 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_provisao, 0) <> 0
		
union all

		SELECT 'VL_GLOSA' nm_atributo,
			vet_valores_prov_prod.vl_glosa vl_glosa,
			24 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_glosa,0) <> 0
		
union all

		select 'VL_AJUSTADO' nm_atributo,
			vet_valores_prov_prod.vl_ajuste vl_item,
			36 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_ajuste,0) > 0
		and	ie_lote_ajuste_prod_w 	= 'P'
		and	ie_tipo_protocolo_w 	<> 'F'
		
union all

		select	'VL_TAXA_PAGAMENTO' nm_atributo,
			vet_valores_prov_prod.vl_taxa_adm,
			36 nr_seq_info
		
		where	coalesce(ie_forma_contab_taxa_pgto_w,'N') <> 'N'
		and	coalesce(vet_valores_prov_prod.vl_taxa_adm, 0) <> 0;
		
	vet_itens_prov_prod	c_itens_prov_prod%rowtype;


	
BEGIN

	open c_contas;
	loop
	fetch c_contas into	
		nr_seq_conta_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas */
		begin

		select	nr_seq_protocolo
		into STRICT	nr_seq_protocolo_w
		from	pls_conta
		where	nr_sequencia	= nr_seq_conta_w;

		select 	max(a.dt_mes_competencia),
			max(a.ie_tipo_protocolo)
		into STRICT	dt_referencia_w,
			ie_tipo_protocolo_w
		from	pls_protocolo_conta	a,
			pls_conta		b
		where 	a.nr_sequencia = b.nr_seq_protocolo
		and	b.nr_sequencia = nr_seq_conta_w;

		dt_ref_month_w	:= trunc(dt_referencia_w,'month');

		select	coalesce(max(ie_forma_contab_taxa_pgto),'N'),
			coalesce(max(ie_status_prov_pagto),'NC'),
			max(coalesce(ie_consiste_recalculo,'N')),
			max(coalesce(ie_lote_ajuste_prod,'R'))
		into STRICT	ie_forma_contab_taxa_pgto_w,
			ie_status_prov_pagto_w,
			ie_consiste_recalculo_w,
			ie_lote_ajuste_prod_w
		from	pls_parametro_contabil
		where	cd_estabelecimento	= cd_estabelecimento_p;

		select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
			sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
		into STRICT	qt_prest_pgto_w,
			qt_outro_w
		from	pls_esquema_contabil
		where	ie_tipo_regra		= 'PP'
		and	cd_estabelecimento = cd_estabelecimento_p
		and	dt_ref_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_ref_month_w);

		select	max(cd_empresa)
		into STRICT	cd_empresa_w
		from	estabelecimento
		where	cd_estabelecimento	= cd_estabelecimento_p;

		select	nr_seq_prestador_exec
		into STRICT	nr_seq_prestador_exec_w
		from	pls_conta
		where	nr_sequencia = nr_seq_conta_w;

		select 	coalesce(max(ie_tipo_relacao), 'X')
		into STRICT 	ie_tipo_relacao_w
		from 	pls_prestador
		where 	nr_sequencia = nr_seq_prestador_exec_w;

		select	coalesce(max('S'), 'N')
		into STRICT	ie_regra_recalculo_w
		from	pls_regra_lote_recalculo
		where	cd_estabelecimento = cd_estabelecimento_p
		and	ie_tipo_regra = 1
		and	ie_situacao = 'A';
		
		if (qt_outro_w > 0) then
			pls_gerar_atualizacao_contabil(	dt_referencia_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							40,
							'G',
							qt_movimento_w,
							nr_seq_atualizacao_w);
				
			ctb_pls_atualizar_prov_prod_in( nr_seq_conta_w,
							null,
							null,
							nr_seq_atualizacao_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							qt_movimento_w);
							
			pls_gerar_atualizacao_contabil(	dt_referencia_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							40,
							'A',
							qt_movimento_w,
							nr_seq_atualizacao_w);
		end if;	

		if (qt_prest_pgto_w > 0) then

			pls_gerar_atualizacao_contabil(	dt_referencia_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							40,
							'G',
							qt_movimento_w,
							nr_seq_atualizacao_w);
				
			ctb_pls_atualiza_prov_prod_res( nr_seq_conta_w,
							null,
							null,
							nr_seq_atualizacao_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							cd_empresa_w,
							ie_status_prov_pagto_w,
							ie_lote_ajuste_prod_w,
							qt_movimento_w,
							dt_referencia_w);
							
			pls_gerar_atualizacao_contabil(	dt_referencia_w,
							nm_usuario_p,
							cd_estabelecimento_p,
							40,
							'A',
							qt_movimento_w,
							nr_seq_atualizacao_w);
		end if;
		
		if (ie_tipo_relacao_w = 'P' and ie_regra_recalculo_w = 'S') then
			open c_valores_prov_prod;
			loop
			fetch c_valores_prov_prod into	
				vet_valores_prov_prod;
			EXIT WHEN NOT FOUND; /* apply on c_valores_prov_prod */
				begin

				open c_itens_prov_prod;
				loop
				fetch c_itens_prov_prod into	
					vet_itens_prov_prod;
				EXIT WHEN NOT FOUND; /* apply on c_itens_prov_prod */
					begin
					CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
											pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
											40,
											null,
											vet_itens_prov_prod.nr_seq_info,
											nr_seq_protocolo_w,
											nr_seq_conta_w,
											vet_valores_prov_prod.nr_sequencia,
											vet_itens_prov_prod.vl_item,
											'PLS_CONTA_MEDICA_RESUMO',
											vet_itens_prov_prod.nm_atributo,
											nm_usuario_p);
					end;
				end loop;
				close c_itens_prov_prod;
				end;
			end loop;
			close c_valores_prov_prod;
		end if;
		end;
	end loop;
	close c_contas;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_recalc_proprio ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
