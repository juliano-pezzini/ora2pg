-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_fechar_conta ( nr_seq_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



	cd_empresa_w			empresa.cd_empresa%type;
	nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type := 0;
	vl_contabil_w			pls_conta_proc.vl_liberado%type;
	ie_consiste_recalculo_w		pls_parametro_contabil.ie_consiste_recalculo%type;
	ie_forma_contab_taxa_pgto_w	pls_parametro_contabil.ie_forma_contab_taxa_pgto%type;
	ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_lote_ajuste_prod%type;
	ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
	ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	ie_tipo_movimento_w		valor_dominio.vl_dominio%type;
	nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
	ie_tipo_relacao_w		pls_prestador.ie_tipo_relacao%type;
	ie_regra_recalculo_w		varchar(1);
	nm_atributo_w			w_movimento_contabil.nm_atributo%type;
	nm_atributo_ww			w_movimento_contabil.nm_atributo%type;

	dt_referencia_w			timestamp;
	dt_ref_month_w			timestamp;
	qt_prest_pgto_w			bigint;
	qt_outro_w			bigint;
	qt_movimento_w			bigint := 0;



	-- Obtem as informacoes para contabilizacao instantanea de provisao de producao medica.
	c_valores_prov_prod CURSOR FOR
		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm
		from	pls_conta_medica_resumo	d,
			pls_conta_proc		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_proc
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	= 'C'
		and	b.ie_status 		= 'F'
		and	a.ie_situacao 		not in ('RE','I')	
		and	c.ie_status 		not in ('D','M')
		and	d.ie_situacao		= 'A'
		and	d.ie_tipo_item		<> 'I'
		and	ie_status_prov_pagto_w = 'F'
		
union all

		SELECT	d.nr_sequencia,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w,'P') vl_provisao,
			coalesce(d.vl_glosa,0) vl_glosa,
			pls_obter_valor_prov_resumo(d.nr_seq_conta, d.nr_sequencia, d.vl_apresentado, d.vl_calculado, d.vl_liberado, d.vl_taxa_adm, d.vl_taxa_adm_co, d.vl_taxa_adm_mat, ie_forma_contab_taxa_pgto_w, 'A') vl_ajuste,
			coalesce(d.vl_taxa_adm,0) + coalesce(d.vl_taxa_adm_co,0) + coalesce(d.vl_taxa_adm_mat,0) vl_taxa_adm
		from	pls_conta_medica_resumo	d,
			pls_conta_mat		c,
			pls_conta		b,
			pls_protocolo_conta	a
		where	c.nr_sequencia		= d.nr_seq_conta_mat
		and	b.nr_sequencia		= d.nr_seq_conta
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	d.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	= 'C'
		and	b.ie_status 		= 'F'
		and	a.ie_situacao 		not in ('RE','I')	
		and	c.ie_status 		not in ('D','M')
		and	d.ie_situacao		= 'A'
		and	d.ie_tipo_item		<> 'I'
		and	ie_status_prov_pagto_w = 'F';
		
	vet_valores_prov_prod		c_valores_prov_prod%rowtype;

	-- Diferentes tipos de contabilizacao para a movimentacao de provisao de producao medica.
	c_itens_prov_prod CURSOR FOR
		SELECT 'VL_LIBERADO' nm_atributo,
			vet_valores_prov_prod.vl_provisao vl_item,
			36 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_provisao, 0) <> 0
		
union all

		SELECT 'VL_GLOSA' nm_atributo,
			vet_valores_prov_prod.vl_glosa vl_glosa,
			24 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_glosa,0) <> 0
		
union all

		select 'VL_AJUSTADO' nm_atributo,
			vet_valores_prov_prod.vl_ajuste vl_item,
			36 nr_seq_info
		
		where	coalesce(vet_valores_prov_prod.vl_ajuste,0) > 0
		and	ie_lote_ajuste_prod_w 	= 'P'
		and	ie_tipo_protocolo_w 	<> 'F'
		
union all

		select	'VL_TAXA_PAGAMENTO' nm_atributo,
			vet_valores_prov_prod.vl_taxa_adm,
			36 nr_seq_info
		
		where	coalesce(ie_forma_contab_taxa_pgto_w,'N') <> 'N'
		and	coalesce(vet_valores_prov_prod.vl_taxa_adm, 0) <> 0;
		
	vet_itens_prov_prod	c_itens_prov_prod%rowtype;

	/* Cursor especifico para o valor de ajuste quando o parametro contabil "Status da conta medica" for 
	"Todas as contas medicas com status diferente de cancelada". */
	c_ajuste CURSOR FOR
		SELECT	'PLS_CONTA_PROC' nm_tabela,
			p.nr_sequencia,
			coalesce((	SELECT	max(r.vl_liberado)
				from	pls_conta_medica_resumo	r
				where	p.nr_sequencia		= r.nr_seq_conta_proc
				and	b.nr_sequencia		= r.nr_seq_conta),0) - coalesce(p.vl_provisao,0) vl_ajuste
		from	pls_conta_proc		p,
			pls_conta		b,
			pls_protocolo_conta	a
		where	p.nr_seq_conta 		= b.nr_sequencia
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	p.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento 	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	in ('C', 'F')
		and (ie_status_prov_pagto_w	= 'NC' or a.ie_tipo_protocolo = 'F')
		and	b.ie_status		not in ('C', 'U')
		and	a.ie_situacao		not in ('RE', 'I')
		and	p.ie_status 		not in ('D', 'M')
		and	ie_lote_ajuste_prod_w 	= 'P'
		and	((ie_consiste_recalculo_w <> 'S')
		or ('P' not in (	select	coalesce(max(x.ie_tipo_relacao),'X')
					from	pls_prestador	x
					where	x.nr_sequencia	= b.nr_seq_prestador_exec)))
		
union all

		select 	'PLS_CONTA_MAT' nm_tabela,
			p.nr_sequencia,
			coalesce((	select	max(r.vl_liberado)
				from	pls_conta_medica_resumo	r
				where	p.nr_sequencia		= r.nr_seq_conta_proc
				and	b.nr_sequencia		= r.nr_seq_conta),0) - coalesce(p.vl_provisao,0) vl_ajuste
		from	pls_conta_mat		p,
			pls_conta		b,
			pls_protocolo_conta	a
		where	b.nr_sequencia		= p.nr_seq_conta
		and	a.nr_sequencia		= b.nr_seq_protocolo
		and	p.nr_seq_conta		= nr_seq_conta_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.ie_tipo_protocolo	in ('C', 'F')
		and (ie_status_prov_pagto_w	= 'NC' or a.ie_tipo_protocolo = 'F')
		and	b.ie_status		not in ('C', 'U')
		and	a.ie_situacao 		not in ('RE','I')
		and	p.ie_status 		not in ('D','M')
		and	ie_lote_ajuste_prod_w 	= 'P'
		and	((ie_consiste_recalculo_w <> 'S')
		or ('P' not in (	select	coalesce(max(x.ie_tipo_relacao),'X')
					from	pls_prestador	x
					where	x.nr_sequencia	= b.nr_seq_prestador_exec)));

	vet_ajuste		c_ajuste%rowtype;

	-- Obtem as informacoes para contabilizacao instantanea de provisao de coparticipacao.
	c_prov_copart CURSOR FOR
		SELECT	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) vl_contabil,
			c.dt_mes_competencia dt_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			'PLS_CONTA_COPARTIC_CONTAB' nm_tabela,
			'VL_COPARTICIPACAO' nm_atributo,
			null ds_estorno
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			pls_protocolo_conta 		x
		where	a.nr_sequencia			= b.nr_seq_conta
		and	b.nr_sequencia			= c.nr_seq_conta_copartic
		and	a.nr_sequencia			= b.nr_seq_conta
		and	x.nr_sequencia			= a.nr_seq_protocolo
		and	d.nr_sequencia			= a.nr_seq_plano
		and	coalesce(c.vl_coparticipacao,0)	> 0
		and	a.ie_status			in ('F','S')
		and	((x.ie_tipo_protocolo		in ('C','I','F')
		and	b.ie_status_coparticipacao	in ('D','S'))
		or (x.ie_tipo_protocolo		= 'R'
		and	b.ie_status_coparticipacao	<> 'N'))
		and	x.cd_estabelecimento		= cd_estabelecimento_p
		and	a.nr_sequencia  		= nr_seq_conta_p
		
union all

		SELECT	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) vl_contabil,
			b.dt_estorno dt_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			'PLS_CONTA_COPARTIC_CONTAB' nm_tabela,
			'VL_COPARTICIPACAO' nm_atributo,
			'MOVIMENTO_ESTORNO' ds_estorno
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			pls_protocolo_conta 		x
		where	a.nr_sequencia			= b.nr_seq_conta
		and	b.nr_sequencia			= c.nr_seq_conta_copartic
		and	a.nr_sequencia			= b.nr_seq_conta
		and	x.nr_sequencia			= a.nr_seq_protocolo
		and	d.nr_sequencia			= a.nr_seq_plano
		and	a.ie_status			in ('F','S') -- Conta fechada
		and	coalesce(b.ie_estorno_custo,'N')	= 'S'
		and	((x.ie_tipo_protocolo		in ('C','I','F')
		and	b.ie_status_coparticipacao	in ('D','S'))
		or (x.ie_tipo_protocolo		= 'R'))
		and	coalesce(c.vl_coparticipacao,0)	< 0
		and	x.cd_estabelecimento		= cd_estabelecimento_p
		and	a.nr_sequencia  		= nr_seq_conta_p
		
union all

		select	c.nr_sequencia,
			coalesce(c.vl_coparticipacao,0) * -1 vl_contabil,
			b.dt_fechamento_discussao dt_contabil,
			a.nr_sequencia nr_seq_conta,
			x.nr_sequencia nr_seq_protocolo,
			'PLS_CONTA_COPARTIC_CONTAB' nm_tabela,
			'VL_COPARTICIPACAO' nm_atributo,
			'MOVIMENTO_ESTORNO' ds_estorno
		from	pls_conta 			a,
			pls_conta_coparticipacao	b,
			pls_conta_copartic_contab	c,
			pls_plano			d,
			pls_protocolo_conta 		x
		where	a.nr_sequencia			= b.nr_seq_conta
		and	b.nr_sequencia			= c.nr_seq_conta_copartic
		and	a.nr_sequencia			= b.nr_seq_conta
		and	x.nr_sequencia			= a.nr_seq_protocolo
		and	d.nr_sequencia			= a.nr_seq_plano
		and	b.ie_status_coparticipacao 	= 'F'
		and	a.ie_status			in ('F','S') -- Conta fechada
		and	coalesce(b.ie_estorno_custo,'N')	= 'N'
		and	x.ie_tipo_protocolo		in ('C','I','R','F')
		and	(b.dt_fechamento_discussao IS NOT NULL AND b.dt_fechamento_discussao::text <> '')
		and	x.cd_estabelecimento		= cd_estabelecimento_p	
		and	a.nr_sequencia 			= nr_seq_conta_p;

	vet_prov_copart 	c_prov_copart%rowtype;

	c_itens_intercambio CURSOR FOR
		SELECT	'P' ie_proc_mat, /*Procedimento*/
			c.nr_sequencia nr_seq_item,
			(coalesce(c.vl_liberado,0) + coalesce(c.vl_glosa,0)) vl_item,
			coalesce(c.vl_glosa,0) vl_glosa,
			coalesce(pls_obter_dados_conta_proc(c.nr_sequencia,'VTA'),0) vl_avisado,
			trunc(a.dt_mes_competencia,'dd') dt_mes_competencia,
			b.nr_sequencia,
			b.nr_seq_protocolo,
			'PLS_CONTA_PROC' nm_tabela
		from	pls_protocolo_conta	a,
			pls_conta		b,
			pls_conta_proc		c
		where	a.nr_sequencia		= b.nr_seq_protocolo
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.ie_tipo_protocolo	= 'I'
		and	b.ie_status 		<> 'C'
		and	a.ie_situacao		!= 'RE'
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	b.nr_sequencia		= nr_seq_conta_p
		
union all

		SELECT	'M' ie_proc_mat, /*Material*/
			c.nr_sequencia nr_seq_item,
			(coalesce(c.vl_liberado,0) + coalesce(c.vl_glosa,0)) vl_item,
			coalesce(c.vl_glosa,0) vl_glosa,
			coalesce(pls_obter_dados_conta_mat(c.nr_sequencia,'VTA'),0) vl_avisado,
			trunc(a.dt_mes_competencia,'dd') dt_mes_competencia,
			b.nr_sequencia,
			b.nr_seq_protocolo,
			'PLS_CONTA_MAT' nm_tabela
		from	pls_protocolo_conta	a,
			pls_conta		b,
			pls_conta_mat		c
		where	a.nr_sequencia		= b.nr_seq_protocolo
		and	b.nr_sequencia		= c.nr_seq_conta
		and	a.ie_tipo_protocolo	= 'I'
		and	b.ie_status 		<> 'C'
		and	a.ie_situacao		!= 'RE'
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	b.nr_sequencia		= nr_seq_conta_p;

	vet_itens_intercambio	c_itens_intercambio%rowtype;

	/* Cursor feito com base no dominio 3976 PLS - Tipo de movimentacao contabil */

	c_tipo_movimento CURSOR FOR
		SELECT 	11 -- Contas medicas - Despesas de eventos realizados
		
		where	vet_itens_intercambio.vl_avisado = vet_itens_intercambio.vl_item
		
union all

		SELECT 	12 -- Contas medicas - Recuperacao/ressarcimento de eventos (Glosa)
		
		where	vet_itens_intercambio.vl_glosa > 0
		
union all

		select 	24 -- Contas medicas - Valor avisado a menor
		
		where	vet_itens_intercambio.vl_avisado < vet_itens_intercambio.vl_item
		and	vet_itens_intercambio.ie_proc_mat = 'P'
		and	exists (	select	1
					from	ptu_aviso_procedimento	a,
						ptu_nota_servico	s
					where	a.nr_sequencia		= s.nr_seq_aviso_procedimento
					and	s.nr_seq_conta_proc	= vet_itens_intercambio.nr_seq_item)
		
union

		select 	24 -- Contas medicas - Valor avisado a menor
		
		where	vet_itens_intercambio.vl_avisado < vet_itens_intercambio.vl_item
		and	vet_itens_intercambio.ie_proc_mat = 'M'
		and	exists (	select	1
					from	ptu_aviso_material	a,
						ptu_nota_servico	s
					where	a.nr_sequencia		= s.nr_seq_aviso_material
					and	s.nr_seq_conta_mat	= vet_itens_intercambio.nr_seq_item)
		
union

		select 	25 -- Contas medicas - Valor avisado a maior
		
		where	vet_itens_intercambio.vl_avisado > vet_itens_intercambio.vl_item
		
union

		select 	26 -- Contas medicas - Valor nao avisado PROC
		
		where	vet_itens_intercambio.ie_proc_mat = 'P'
		and	not exists (	select	1
					from	ptu_aviso_procedimento	a,
						ptu_nota_servico	s
					where	a.nr_sequencia		= s.nr_seq_aviso_procedimento
					and	s.nr_seq_conta_proc	= vet_itens_intercambio.nr_seq_item)
		
union

		select 26 -- Contas medicas - Valor nao avisado MAT;
		
		where	vet_itens_intercambio.ie_proc_mat = 'M'
		and	not exists (	select	1
					from	ptu_aviso_material	a,
						ptu_nota_servico	s
					where	a.nr_sequencia		= s.nr_seq_aviso_material
					and	s.nr_seq_conta_mat	= vet_itens_intercambio.nr_seq_item);

	
BEGIN

	select	nr_seq_protocolo
	into STRICT	nr_seq_protocolo_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	select 	max(a.dt_mes_competencia),
		max(a.ie_tipo_protocolo)
	into STRICT	dt_referencia_w,
		ie_tipo_protocolo_w
	from	pls_protocolo_conta	a,
		pls_conta		b
	where 	a.nr_sequencia = b.nr_seq_protocolo
	and	b.nr_sequencia = nr_seq_conta_p;

	dt_ref_month_w	:= trunc(dt_referencia_w,'month');

	select	coalesce(max(ie_forma_contab_taxa_pgto),'N'),
		coalesce(max(ie_status_prov_pagto),'NC'),
		max(coalesce(ie_consiste_recalculo,'N')),
		max(coalesce(ie_lote_ajuste_prod,'R'))
	into STRICT	ie_forma_contab_taxa_pgto_w,
		ie_status_prov_pagto_w,
		ie_consiste_recalculo_w,
		ie_lote_ajuste_prod_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p;

	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
		sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
	into STRICT	qt_prest_pgto_w,
		qt_outro_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		= 'PP'
	and	cd_estabelecimento = cd_estabelecimento_p
	and	dt_ref_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_ref_month_w);

	select	max(cd_empresa)
	into STRICT	cd_empresa_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estabelecimento_p;

	select	nr_seq_prestador_exec
	into STRICT	nr_seq_prestador_exec_w
	from	pls_conta
	where	nr_sequencia = nr_seq_conta_p;

	select 	coalesce(max(ie_tipo_relacao), 'X')
	into STRICT 	ie_tipo_relacao_w
	from 	pls_prestador
	where 	nr_sequencia = nr_seq_prestador_exec_w;

	select	coalesce(max('S'), 'N')
	into STRICT	ie_regra_recalculo_w
	from	pls_regra_lote_recalculo
	where	cd_estabelecimento = cd_estabelecimento_p
	and	ie_tipo_regra = 1
	and	ie_situacao = 'A';
	

	if (qt_outro_w > 0) then
		pls_gerar_atualizacao_contabil(	dt_referencia_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						40,
						'G',
						qt_movimento_w,
						nr_seq_atualizacao_w);
			
		ctb_pls_atualizar_prov_prod_in( nr_seq_conta_p,
						null,
						null,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						qt_movimento_w);
						
		pls_gerar_atualizacao_contabil(	dt_referencia_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						40,
						'A',
						qt_movimento_w,
						nr_seq_atualizacao_w);
	end if;	

	if (qt_prest_pgto_w > 0) then

		pls_gerar_atualizacao_contabil(	dt_referencia_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						40,
						'G',
						qt_movimento_w,
						nr_seq_atualizacao_w);
			
		ctb_pls_atualiza_prov_prod_res( nr_seq_conta_p,
						null,
						null,
						nr_seq_atualizacao_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						cd_empresa_w,
						ie_status_prov_pagto_w,
						ie_lote_ajuste_prod_w,
						qt_movimento_w,
						dt_referencia_w);
						
		pls_gerar_atualizacao_contabil(	dt_referencia_w,
						nm_usuario_p,
						cd_estabelecimento_p,
						40,
						'A',
						qt_movimento_w,
						nr_seq_atualizacao_w);
	end if;

	pls_gerar_atualizacao_contabil(	dt_referencia_w,
					nm_usuario_p,
					cd_estabelecimento_p,
					33,
					'G',
					qt_movimento_w,
					nr_seq_atualizacao_w);
		
	ctb_pls_atualizar_desp_interc(	null,
					nr_seq_conta_p,
					null,
					null,
					nr_seq_atualizacao_w,
					nm_usuario_p,
					cd_estabelecimento_p,
					qt_movimento_w);
					
	pls_gerar_atualizacao_contabil(	dt_referencia_w,
					nm_usuario_p,
					cd_estabelecimento_p,
					33,
					'A',
					qt_movimento_w,
					nr_seq_atualizacao_w);

	if	((ie_tipo_relacao_w <> 'P') or (ie_tipo_relacao_w = 'P' and ie_regra_recalculo_w = 'N')) then
		open c_valores_prov_prod;
		loop
		fetch c_valores_prov_prod into	
			vet_valores_prov_prod;
		EXIT WHEN NOT FOUND; /* apply on c_valores_prov_prod */
			begin
				
			open c_itens_prov_prod;
			loop
			fetch c_itens_prov_prod into	
				vet_itens_prov_prod;
			EXIT WHEN NOT FOUND; /* apply on c_itens_prov_prod */
				begin
				CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
										pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
										40,
										null,
										vet_itens_prov_prod.nr_seq_info,
										nr_seq_protocolo_w,
										nr_seq_conta_p,
										vet_valores_prov_prod.nr_sequencia,
										vet_itens_prov_prod.vl_item,
										'PLS_CONTA_MEDICA_RESUMO',
										vet_itens_prov_prod.nm_atributo,
										nm_usuario_p);

				end;
			end loop;
			close c_itens_prov_prod;
			end;
		end loop;
		close c_valores_prov_prod;
	end if;

	open c_ajuste;
	loop
	fetch c_ajuste into
		vet_ajuste;
	EXIT WHEN NOT FOUND; /* apply on c_ajuste */
		begin
		if (coalesce(vet_ajuste.vl_ajuste, 0) > 0) then
			CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
									pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
									40,
									null,
									36,
									nr_seq_protocolo_w,
									nr_seq_conta_p,
									vet_ajuste.nr_sequencia,
									vet_ajuste.vl_ajuste,
									vet_ajuste.nm_tabela,
									'VL_AJUSTADO',
									nm_usuario_p);
		end if;
		end;
	end loop;
	close c_ajuste;

	open c_prov_copart;
	loop
	fetch c_prov_copart into
		vet_prov_copart;
	EXIT WHEN NOT FOUND; /* apply on c_prov_copart */
		begin
		if (coalesce(vet_prov_copart.vl_contabil, 0) <> 0) then
			CALL ctb_concil_financeira_pck.ctb_gravar_documento(cd_estabelecimento_p,
									pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
									42,
									null,
									41,
									vet_prov_copart.nr_seq_protocolo,
									vet_prov_copart.nr_seq_conta,
									vet_prov_copart.nr_sequencia,
									vet_prov_copart.vl_contabil,
									vet_prov_copart.nm_tabela,
									vet_prov_copart.nm_atributo,
									nm_usuario_p,
									'P',
									vet_prov_copart.ds_estorno);
		end if;
		end;
	end loop;
	close c_prov_copart;

	open c_itens_intercambio;
	loop
	fetch c_itens_intercambio into
		vet_itens_intercambio;
	EXIT WHEN NOT FOUND; /* apply on c_itens_intercambio */
			begin
			open c_tipo_movimento;
			loop
			fetch c_tipo_movimento into
				ie_tipo_movimento_w;
			EXIT WHEN NOT FOUND; /* apply on c_tipo_movimento */
				begin

				/* Quando gravar os atributos "VL_SOMA_PROC" e "VL_SOMA_MAT" ira gravar o tipo do movimento no campo DS_ORIGEM
				para que seja possivel diferenciar qual valor deve ser contabilizado no estorno, se necessario */
				if (ie_tipo_movimento_w = 11) then
					if (vet_itens_intercambio.ie_proc_mat = 'P') then
						nm_atributo_w 	:= 'VL_SOMA_PROC';
					elsif (vet_itens_intercambio.ie_proc_mat = 'M') then
						nm_atributo_w 	:= 'VL_SOMA_MAT';
					end if;

					if (vet_itens_intercambio.vl_item <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												23,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_item,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_w,
												nm_usuario_p,
												'P',
												11);
					end if;
				elsif (ie_tipo_movimento_w = 12) then
					if (vet_itens_intercambio.vl_glosa <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												24,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_glosa,
												vet_itens_intercambio.nm_tabela,
												'VL_GLOSA',
												nm_usuario_p);
					end if;
				elsif (ie_tipo_movimento_w = 24) then
					if (vet_itens_intercambio.ie_proc_mat = 'P') then
						nm_atributo_w 	:= 'VL_SOMA_PROC';
						nm_atributo_ww 	:= 'VL_SOMA_PROC_MENOR';
					elsif (vet_itens_intercambio.ie_proc_mat = 'M') then
						nm_atributo_w 	:= 'VL_SOMA_MAT';
						nm_atributo_ww 	:= 'VL_SOMA_MAT_MENOR';
					end if;
					vl_contabil_w		:= vet_itens_intercambio.vl_item - vet_itens_intercambio.vl_avisado;

					if (vet_itens_intercambio.vl_avisado <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												23,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_avisado,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_w,
												nm_usuario_p,
												'P',
												24);
					end if;

					if (vl_contabil_w <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												91,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vl_contabil_w,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_ww,
												nm_usuario_p);
					end if;
				elsif (ie_tipo_movimento_w = 25) then
					vl_contabil_w		:= vet_itens_intercambio.vl_avisado - vet_itens_intercambio.vl_item;
					if (vet_itens_intercambio.ie_proc_mat = 'P') then
						nm_atributo_w 	:= 'VL_SOMA_PROC';
						nm_atributo_ww 	:= 'VL_SOMA_PROC_MAIOR';
					elsif (vet_itens_intercambio.ie_proc_mat = 'M') then
						nm_atributo_w 	:= 'VL_SOMA_MAT';
						nm_atributo_ww 	:= 'VL_SOMA_MAT_MAIOR';
					end if;

					if (vet_itens_intercambio.vl_item <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												24,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_item,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_w,
												nm_usuario_p,
												'P',
												25);
					end if;
										
					if (vl_contabil_w <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												92,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vl_contabil_w,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_ww,
												nm_usuario_p);
					end if;
				elsif (ie_tipo_movimento_w = 26) then

					if (vet_itens_intercambio.ie_proc_mat = 'P') then
						nm_atributo_w 	:= 'VL_NAO_AVIS_PROC';
					elsif (vet_itens_intercambio.ie_proc_mat = 'M') then
						nm_atributo_w 	:= 'VL_NAO_AVIS_MAT';
					end if;
					if (vet_itens_intercambio.vl_item <> 0) then
						CALL ctb_concil_financeira_pck.ctb_gravar_documento(	cd_estabelecimento_p,
												pkg_date_utils.start_of(clock_timestamp(), 'DAY'),
												33,
												null,
												93,
												vet_itens_intercambio.nr_seq_protocolo,
												nr_seq_conta_p,
												vet_itens_intercambio.nr_seq_item,
												vet_itens_intercambio.vl_item,
												vet_itens_intercambio.nm_tabela,
												nm_atributo_w,
												nm_usuario_p);
					end if;
				end if;
				end;
			end loop;
			close c_tipo_movimento;
		end;
	end loop;
	close c_itens_intercambio;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ctb_onl_gravar_movto_pck.gravar_movto_fechar_conta ( nr_seq_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
