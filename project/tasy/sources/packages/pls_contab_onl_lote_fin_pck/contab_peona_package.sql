-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_peona ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	cd_conta_deb_w			pls_peona_conta_contab.cd_conta_debito%type;
	cd_historico_deb_w		pls_peona_conta_contab.cd_historico_debito%type;
	cd_conta_cred_w			pls_peona_conta_contab.cd_conta_credito%type;
	cd_historico_cred_w		pls_peona_conta_contab.cd_historico_credito%type;
	cd_centro_custo_w		centro_custo.cd_centro_custo%type;
	ie_centro_custo_w		conta_contabil.ie_centro_custo%type;
	nm_agrupador_w			varchar(255);

	
BEGIN
	begin
	select	coalesce(cd_conta_debito, 'X'),
		coalesce(cd_historico_debito, 0),
		coalesce(cd_conta_credito, 'X'),
		coalesce(cd_historico_credito, 0)
	into STRICT    cd_conta_deb_w,
		cd_historico_deb_w,
		cd_conta_cred_w,
		cd_historico_cred_w
	from	pls_peona_conta_contab	b,
		pls_peona		a
	where	a.nr_sequencia		= b.nr_seq_peona
	and 	a.nr_sequencia 		= doc_p.nr_seq_doc_compl
	and     b.nr_sequencia 		= doc_p.nr_doc_analitico;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	if (cd_conta_deb_w = 'X' or cd_conta_cred_w = 'X' or cd_historico_deb_w = 0 or cd_historico_cred_w = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);

	vet_contas_contabeis_w(1)       := cd_conta_cred_w;
	vet_contas_contabeis_w(2)       := cd_conta_deb_w;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Numero de agrupamento */

	nm_agrupador_w	:= coalesce(trim(both obter_agrupador_contabil(35)),'NR_SEQ_PEONA');
	if (nm_agrupador_w = 'NR_SEQ_PEONA') then
		dados_contab_w.nr_seq_agrupamento	:= doc_p.nr_seq_doc_compl;
	end if;

	if (coalesce(dados_contab_w.nr_seq_agrupamento, 0) = 0) then
		dados_contab_w.nr_seq_agrupamento	:= doc_p.nr_seq_doc_compl;
	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		dados_contab_w.cd_historico := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		select	max(ie_centro_custo)
		into STRICT	ie_centro_custo_w
		from	conta_contabil
		where	cd_conta_contabil	= vet_contas_contabeis_w(i);

		if (ie_centro_custo_w = 'S') then
			pls_obter_centro_custo(	'R',
						null,
						doc_p.cd_estabelecimento,
						'',
						'',
						'',
						'',
						'',
						cd_centro_custo_w, 
						nr_seq_regra_cc_w);

			dados_contab_w.cd_centro_custo := cd_centro_custo_w;
		end if;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred    := vet_contas_contabeis_w(i);
			dados_contab_w.cd_historico     := cd_historico_cred_w;
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb     := vet_contas_contabeis_w(i);
			dados_contab_w.cd_historico     := cd_historico_deb_w;
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	/* Verifica se o movimento foi contabilizado em algum lote contabil, para realizar o update nos campos de lote contabil*/

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		if (coalesce(doc_p.ds_origem, 'X') <> 'ESTORNO') then
			update  pls_peona
			set     nr_lote_contabil    = doc_p.nr_lote_contabil
			where   nr_sequencia        = doc_p.nr_seq_doc_compl;
		end if;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_peona ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
