-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_ressarcimento ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE

									
	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	cd_conta_cred_w			pls_conta.cd_conta_cred%type;
	cd_conta_deb_w			pls_conta.cd_conta_deb%type;
	cd_historico_w			pls_processo_conta.cd_historico%type;
	nr_seq_processo_w		pls_processo.nr_sequencia%type;
	cd_abi_w			pls_processo.cd_abi%type;
	nr_processo_w			pls_processo.nr_processo%type;
	nm_prestador_w			pls_processo_prestador.nm_prestador%type;
	nr_seq_proc_gru_w		pls_processo_conta.nr_seq_proc_gru%type;
	nr_titulo_pagar_w		titulo_pagar.nr_titulo%type;
	ie_centro_custo_w		conta_contabil.ie_centro_custo%type;
	cd_centro_custo_w		w_movimento_contabil.cd_centro_custo%type;
	nr_seq_agrupamento_w		ctb_movimento.nr_seq_agrupamento%type;
	ie_retornou_w			varchar(1) := 'N';
	ds_conteudo_w			varchar(4000);
	ds_compl_historico_w		varchar(255);
	qt_atrib_hist_pad_w		integer;
	
BEGIN

	begin
	select 	cd_conta_deb,
		cd_conta_cred,
		cd_historico,
		nr_seq_processo,
		cd_abi,
		nr_processo,
		nm_prestador,
		nr_seq_proc_gru
	into STRICT	cd_conta_deb_w,
		cd_conta_cred_w,
		cd_historico_w,
		nr_seq_processo_w,
		cd_abi_w,
		nr_processo_w,
		nm_prestador_w,
		nr_seq_proc_gru_w
	from (SELECT  coalesce(b.cd_conta_deb, 'X') cd_conta_deb,
			coalesce(b.cd_conta_cred, 'X') cd_conta_cred,
			coalesce(b.cd_historico, 0) cd_historico,
			a.nr_sequencia nr_seq_processo,
			a.cd_abi cd_abi,
			a.nr_processo nr_processo,
			substr(pls_obter_desc_prest_processo(b.nr_seq_prestador),1,80) nm_prestador,
			b.nr_seq_proc_gru nr_seq_proc_gru
		from	pls_processo_conta	b,
			pls_processo		a
		where	a.nr_sequencia		= b.nr_seq_processo
		and	b.nr_sequencia      	= doc_p.nr_documento
		and	doc_p.nm_atributo	= 'VL_RESSARCIR'
		
union
	
		SELECT	coalesce(b.cd_conta_deferido_deb, 'X'),
			coalesce(b.cd_conta_deferido_cred, 'X'),
			coalesce(b.cd_historico_deferido, 0),
			a.nr_sequencia,
			a.cd_abi,
			a.nr_processo,
			substr(pls_obter_desc_prest_processo(b.nr_seq_prestador),1,80),
			b.nr_seq_proc_gru
		from	pls_processo_conta	b,
			pls_processo		a
		where	a.nr_sequencia		= b.nr_seq_processo
		and	b.nr_sequencia		= doc_p.nr_documento
		and	doc_p.nm_atributo 	= 'VL_DEFERIDO'
		and	b.vl_deferido > 0) alias10;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;


	/* Se nao houver informacoes de contas contabeis ou de historico, nao segue o processo */

	if (cd_conta_deb_w = 'X' or cd_conta_cred_w = 'X' or cd_historico_w = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;		
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1) := cd_conta_cred_w;
	vet_contas_contabeis_w(2) := cd_conta_deb_w;
	dados_contab_w.cd_historico := cd_historico_w;

	/* Numero de agrupamento */

	dados_contab_w.nr_seq_agrupamento   := nr_seq_processo_w;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		
		/* Numero do titulo */

		select	max(substr(pls_obter_dados_proc_gru(a.nr_sequencia, 'T'), 1, 255))
		into STRICT	nr_titulo_pagar_w
		from	pls_processo_gru	a
		where	a.nr_sequencia = nr_seq_proc_gru_w;

		/* Montagem do complemento historico */

		ds_conteudo_w	:= substr(	nr_seq_processo_w		||'#@'||
						cd_abi_w			||'#@'||
						nr_processo_w			||'#@'||
						nr_titulo_pagar_w		||'#@'||
						nm_prestador_w,1,4000);
									
		begin
		ds_compl_historico_w	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, dados_contab_w.cd_historico, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w	:= null;
		end;
		dados_contab_w.ds_compl_historico	:= substr(ds_compl_historico_w,1,255);

	end if;
	
	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', null, doc_p.cd_estabelecimento, '', '', '', '', '', cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
		dados_contab_w.cd_centro_custo := cd_centro_custo_w;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	/* Atualiza o movimento de origem com a informacao do numero do lote contabil 
	Ira sempre atualizar o numero do lote, nao removendo ele do processo.       */
	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		update	pls_processo a
		set	a.nr_lote_contabil  = doc_p.nr_lote_contabil
		where 	a.nr_sequencia      = ( SELECT  max(nr_seq_processo)
						from    pls_processo_conta b
						where   b.nr_sequencia = doc_p.nr_documento);
	end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_ressarcimento ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
