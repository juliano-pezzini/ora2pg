-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_comissao ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	cd_conta_deb_w			pls_comissao_benef_item.cd_conta_debito%type;
	cd_conta_cred_w			pls_comissao_benef_item.cd_conta_credito%type;
	cd_historico_w			pls_comissao_benef_item.cd_historico%type;
	nr_seq_item_w			pls_comissao_benef_item.nr_sequencia%type;
	nr_seq_vendedor_w		pls_vendedor.nr_sequencia%type;
	nr_titulo_w			pls_comissao_beneficiario.nr_titulo%type;
	nr_seq_lote_w			pls_lote_comissao.nr_sequencia%type;
	cd_centro_custo_w		centro_custo.cd_centro_custo%type;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
	ds_conteudo_w			varchar(4000);
	ds_compl_historico_w		varchar(2000);
	nm_agrupador_w			varchar(255);
	nm_vendedor_w			varchar(255);
	qt_atrib_hist_pad_w		integer;

	
BEGIN
	begin
	select 	coalesce(cd_conta_debito, 'X'),
		coalesce(cd_conta_credito, 'X'),
		coalesce(cd_historico, 0),
		nr_seq_item,
		nr_seq_vendedor,
		nr_titulo,
		nr_seq_lote
	into STRICT	cd_conta_deb_w,
		cd_conta_cred_w,
		cd_historico_w,
		nr_seq_item_w,
		nr_seq_vendedor_w,
		nr_titulo_w,
		nr_seq_lote_w
	from (SELECT	d.cd_conta_debito cd_conta_debito,
			d.cd_conta_credito cd_conta_credito,
			d.cd_historico cd_historico,
			d.nr_sequencia nr_seq_item,
			g.nr_sequencia nr_seq_vendedor,
			c.nr_titulo nr_titulo,
			a.nr_sequencia nr_seq_lote
		FROM pls_vendedor g, pls_segurado e, pls_comissao_beneficiario c, pls_comissao b, pls_lote_comissao a, pls_comissao_benef_item d
LEFT OUTER JOIN pls_plano f ON (d.nr_seq_plano = f.nr_sequencia)
WHERE a.nr_sequencia			= b.nr_seq_lote and g.nr_sequencia			= b.nr_seq_canal_venda and b.nr_sequencia			= c.nr_seq_comissao and c.nr_sequencia			= d.nr_seq_comissao_benef and e.nr_sequencia			= c.nr_seq_segurado  and doc_p.nr_documento 		= a.nr_sequencia and doc_p.nr_seq_doc_compl 		= b.nr_sequencia and doc_p.nr_doc_analitico 		= d.nr_sequencia and doc_p.nm_tabela 		= 'PLS_COMISSAO_BENEF_ITEM' and doc_p.nm_atributo	 	= 'VL_COMISSAO'
		
union all

		SELECT	c.cd_conta_deb cd_conta_debito,
			c.cd_conta_cred cd_conta_credito,
			c.cd_historico cd_historico,
			c.nr_sequencia nr_seq_item,
			d.nr_sequencia nr_seq_vendedor,
			c.nr_titulo nr_titulo,
			a.nr_sequencia nr_seq_lote
		from	pls_lote_comissao		a,
			pls_comissao			b,
			pls_repasse_lanc		c,
			pls_vendedor			d
		where	a.nr_sequencia			= b.nr_seq_lote
		and	d.nr_sequencia			= b.nr_seq_canal_venda
		and	b.nr_sequencia			= c.nr_seq_comissao
		and	doc_p.nr_documento 		= a.nr_sequencia
		and	doc_p.nr_seq_doc_compl 		= b.nr_sequencia 
		and	doc_p.nr_doc_analitico 		= d.nr_sequencia
		and	doc_p.nm_tabela			= 'PLS_REPASSE_LANC'
		and	doc_p.nm_atributo		= 'VL_LANCAMENTO') alias3;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	if (cd_conta_cred_w = 'X' or cd_conta_deb_w = 'X' or cd_historico_w = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Numero de agrupamento */

	nm_agrupador_w	:= coalesce(trim(both obter_agrupador_contabil(doc_p.cd_tipo_lote_contabil)),'NR_SEQ_REP_VEND');

	if (nm_agrupador_w = 'NR_SEQ_REP_MENS') then
		dados_contab_w.nr_seq_agrupamento	:=	nr_seq_item_w;
	elsif (nm_agrupador_w = 'NR_SEQ_REP_VEND') then
		dados_contab_w.nr_seq_agrupamento	:=	nr_seq_vendedor_w;
	else
		dados_contab_w.nr_seq_agrupamento	:=	nr_seq_lote_w;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w          := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1)       := cd_conta_cred_w;
	vet_contas_contabeis_w(2)       := cd_conta_deb_w;
	dados_contab_w.cd_historico     := cd_historico_w;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		if (coalesce(nr_seq_vendedor_w,0) <> 0) then
			select 	substr(obter_nome_pf_pj(cd_pessoa_fisica,cd_cgc),1,200)
			into STRICT 	nm_vendedor_w
			from 	pls_vendedor
			where 	nr_sequencia = nr_seq_vendedor_w;
		end if;

		ds_conteudo_w := substr(	to_char(null)						|| '#@' ||
						to_char(nr_titulo_w)					|| '#@' ||
						to_char(nm_vendedor_w)					|| '#@' ||
						to_char(null),1,4000);

		begin
		ds_compl_historico_w := substr(obter_compl_historico(24,cd_historico_w,ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w := null;
		end;

		dados_contab_w.ds_compl_historico := substr(ds_compl_historico_w,1,255);
	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', null, doc_p.cd_estabelecimento, '', '', '', '', '', cd_centro_custo_w, nr_seq_regra_cc_w, vet_contas_contabeis_w(i)) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;

		dados_contab_w.cd_centro_custo := cd_centro_custo_w;
		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		if (coalesce(doc_p.ds_origem, 'X') = 'ESTORNO') then
			nr_lote_contabil_w := 0;
		else
			nr_lote_contabil_w := doc_p.nr_lote_contabil;
		end if;

		update	pls_comissao_benef_item		a
		set	a.nr_lote_contabil		= nr_lote_contabil_w
		where	doc_p.nr_doc_analitico 		= a.nr_sequencia
		and	doc_p.nm_tabela			= 'PLS_COMISSAO_BENEF_ITEM';

		update	pls_repasse_lanc	a
		set	a.nr_lote_contabil		= nr_lote_contabil_w
		where	doc_p.nr_doc_analitico 		= a.nr_sequencia
		and	doc_p.nm_tabela			= 'PLS_REPASSE_LANC';

	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_comissao ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
