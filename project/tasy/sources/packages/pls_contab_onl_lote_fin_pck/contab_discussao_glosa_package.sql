-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_discussao_glosa ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE



	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	cd_conta_deb_w			pls_discussao_proc.cd_conta_deb%type;
	cd_conta_cred_w			pls_discussao_proc.cd_conta_cred%type;
	cd_conta_debito_w		pls_discussao_proc.cd_conta_deb%type;
	cd_conta_credito_w		pls_discussao_proc.cd_conta_cred%type;
	cd_conta_negado_deb_w		pls_discussao_proc.cd_conta_negado_deb%type;
	cd_conta_negado_cred_w		pls_discussao_proc.cd_conta_negado_cred%type;
	cd_historico_w			pls_discussao_proc.cd_historico%type;
	cd_historico_ww			pls_discussao_proc.cd_historico%type;
	cd_historico_negado_w		pls_discussao_proc.cd_historico_negado%type;
	cd_centro_custo_w		centro_custo.cd_centro_custo%type;
	cd_centro_custo_ww		centro_custo.cd_centro_custo%type;
	ie_centro_custo_w		conta_contabil.ie_centro_custo%type;
	nr_seq_conta_w			pls_conta.nr_sequencia%type;
	nr_seq_lote_contest_w		pls_lote_discussao.nr_seq_lote_contest%type;
	nr_fatura_w			ptu_fatura.nr_fatura%type;
	nr_ndr_w			ptu_fatura.nr_nota_credito_debito%type;
	nr_seq_ptu_fatura_w		pls_lote_contestacao.nr_seq_ptu_fatura%type;
	nr_seq_pls_fatura_w		pls_lote_contestacao.nr_seq_pls_fatura%type;
	nr_tit_pagar_origem_w		titulo_pagar.nr_titulo%type;
	nr_tit_rec_origem_w		titulo_receber.nr_titulo%type;
	nr_seq_plano_w			pls_plano.nr_sequencia%type;
	nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
	ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
	nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
	ds_conteudo_w			varchar(4000);
	ds_compl_historico_w		varchar(4000);
	nm_agrupador_w			varchar(255);
	ds_unimed_w			varchar(255);
	nr_pls_fatura_w			varchar(255);
	nr_pls_ndr_w			varchar(255);
	ie_proc_mat_w			varchar(1);
	qt_atrib_hist_pad_w		integer;

	
BEGIN
	begin
	select	cd_conta_deb,
		cd_conta_cred,
		cd_conta_negado_deb,
		cd_conta_negado_cred,
		cd_historico,
		cd_historico_negado,
		nr_seq_conta,
		nr_seq_segurado,
		cd_centro_custo,
		nr_seq_plano,
		nr_seq_lote_contest
	into STRICT	cd_conta_debito_w,
		cd_conta_credito_w,
		cd_conta_negado_deb_w,
		cd_conta_negado_cred_w,
		cd_historico_ww,
		cd_historico_negado_w,
		nr_seq_conta_w,
		nr_seq_segurado_w,
		cd_centro_custo_ww,
		nr_seq_plano_w,
		nr_seq_lote_contest_w
	from (SELECT	d.cd_conta_deb,
			d.cd_conta_cred,
			d.cd_conta_negado_deb,
			d.cd_conta_negado_cred,
			d.cd_historico,
			d.cd_historico_negado,
			e.nr_sequencia nr_seq_conta,
			e.nr_seq_segurado,
			d.cd_centro_custo,
			e.nr_seq_plano,
			a.nr_seq_lote_contest
		from	pls_conta_proc			f,
			pls_conta			e,
			pls_discussao_proc		d,
			pls_contestacao			c,
			pls_contestacao_discussao	b,
			pls_lote_discussao		a
		where	a.nr_sequencia		= b.nr_seq_lote
		and	c.nr_sequencia		= b.nr_seq_contestacao
		and	e.nr_sequencia		= c.nr_seq_conta
		and	b.nr_sequencia		= d.nr_seq_discussao
		and	f.nr_sequencia		= d.nr_seq_conta_proc
		and	doc_p.nr_documento	= a.nr_sequencia
		and	doc_p.nr_seq_doc_compl	= b.nr_sequencia
		and	doc_p.nr_doc_analitico	= d.nr_sequencia
		and	doc_p.nm_tabela		= 'PLS_DISCUSSAO_PROC'
		and	doc_p.nm_atributo	in ('VL_ACEITO', 'VL_NEGADO', 'VL_CONTESTADO')
		
union all

		SELECT	d.cd_conta_deb,
			d.cd_conta_cred,
			d.cd_conta_negado_deb,
			d.cd_conta_negado_cred,
			d.cd_historico,
			d.cd_historico_negado,
			e.nr_sequencia,
			e.nr_seq_segurado,
			d.cd_centro_custo,
			e.nr_seq_plano,
			a.nr_seq_lote_contest
		from	pls_conta_mat			f,
			pls_conta			e,
			pls_discussao_mat		d,
			pls_contestacao			c,
			pls_contestacao_discussao	b,
			pls_lote_discussao		a
		where	a.nr_sequencia		= b.nr_seq_lote
		and	c.nr_sequencia		= b.nr_seq_contestacao
		and	e.nr_sequencia		= c.nr_seq_conta
		and	b.nr_sequencia		= d.nr_seq_discussao
		and	f.nr_sequencia		= d.nr_seq_conta_mat
		and	doc_p.nr_documento	= a.nr_sequencia
		and	doc_p.nr_seq_doc_compl	= b.nr_sequencia
		and	doc_p.nr_doc_analitico	= d.nr_sequencia
		and	doc_p.nm_tabela		= 'PLS_DISCUSSAO_MAT'
		and	doc_p.nm_atributo	in ('VL_ACEITO', 'VL_NEGADO', 'VL_CONTESTADO')) alias2;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	if (doc_p.nm_atributo = 'VL_ACEITO') then
		cd_conta_deb_w		:= cd_conta_debito_w;
		cd_conta_cred_w		:= cd_conta_credito_w;
		cd_historico_w		:= cd_historico_ww;
	elsif (doc_p.nm_atributo in ('VL_NEGADO', 'VL_CONTESTADO')) then
		cd_conta_deb_w		:= cd_conta_negado_deb_w;
		cd_conta_cred_w		:= cd_conta_negado_cred_w;
		cd_historico_w		:= cd_historico_negado_w;
	end if;

	if (coalesce(cd_conta_deb_w, 'X') = 'X' or coalesce(cd_conta_cred_w, 'X') = 'X' or coalesce(cd_historico_w, 0) = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);

	vet_contas_contabeis_w(1)       := cd_conta_cred_w;
	vet_contas_contabeis_w(2)       := cd_conta_deb_w;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;
	dados_contab_w.cd_historico		:= cd_historico_w;

	/* Numero de agrupamento */

	nm_agrupador_w := coalesce(trim(both obter_agrupador_contabil(38)), 'NR_SEQ_CONTA');
	if (nm_agrupador_w = 'NR_SEQ_CONTA') then
		dados_contab_w.nr_seq_agrupamento	:= nr_seq_conta_w;
	end if;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
			select	max(a.nr_seq_ptu_fatura),
				max(a.nr_seq_pls_fatura)
			into STRICT	nr_seq_ptu_fatura_w,
				nr_seq_pls_fatura_w
			from	pls_lote_contestacao	a
			where	a.nr_sequencia	= nr_seq_lote_contest_w;
			
			nr_fatura_w	:= null;
			nr_ndr_w	:= null;
			nr_pls_fatura_w	:= null;
			nr_pls_ndr_w	:= null;
			
			if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then
				nr_fatura_w	:= substr(pls_obter_dados_ptu_fatura(nr_seq_ptu_fatura_w,'F'),1,255);
				nr_ndr_w	:= substr(pls_obter_dados_ptu_fatura(nr_seq_ptu_fatura_w,'NDC'),1,255);
			end if;
			
			if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then
				nr_pls_fatura_w	:= substr(pls_obter_dados_pls_fatura(nr_seq_pls_fatura_w,'PF'),1,255);
				nr_pls_ndr_w	:= substr(pls_obter_dados_pls_fatura(nr_seq_pls_fatura_w,'PN'),1,255);
			end if;
				
			ds_unimed_w	:= substr(pls_obter_dados_lote_contest(nr_seq_lote_contest_w,'UDF'),1,255);
			
			nr_tit_pagar_origem_w := somente_numero(pls_obter_titulos_contest_disc(nr_seq_lote_contest_w,'PF'));
			nr_tit_rec_origem_w := somente_numero(pls_obter_titulos_contest_disc(nr_seq_lote_contest_w,'RF'));
		end if;

		ds_conteudo_w	:= substr(	nr_seq_lote_contest_w	|| '#@' ||
						nr_fatura_w		|| '#@' ||
						nr_ndr_w		|| '#@' ||
						nr_pls_fatura_w		|| '#@' ||
						nr_pls_ndr_w		|| '#@' ||
						ds_unimed_w		|| '#@' ||
						nr_tit_pagar_origem_w	|| '#@' ||
						nr_tit_rec_origem_w,1,4000);

		begin
		ds_compl_historico_w	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, cd_historico_w, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w	:= null;
		end;

		dados_contab_w.ds_compl_historico := substr(ds_compl_historico_w,1,255);
	end if;

	/* Informacoes para a obtencao do centro de custo*/

	if (coalesce(nr_seq_plano_w::text, '') = '') then
		begin		
		select	b.ie_regulamentacao,
			b.nr_sequencia
		into STRICT	ie_regulamentacao_w,
			nr_seq_plano_w
		from	pls_segurado	a,
			pls_plano	b
		where	b.nr_sequencia	= a.nr_seq_plano
		and	a.nr_sequencia	= nr_seq_segurado_w;
		exception
		when others then
			ie_regulamentacao_w	:= null;
			nr_seq_plano_w		:= null;
		end;
	else
		begin		
		select	b.ie_regulamentacao
		into STRICT	ie_regulamentacao_w
		from	pls_plano	b
		where	b.nr_sequencia	= nr_seq_plano_w;
		exception
		when others then
			ie_regulamentacao_w	:= null;
		end;
	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := cd_centro_custo_ww;
		
		/* Centro de custo */

		select	ie_centro_custo
		into STRICT	ie_centro_custo_w
		from	conta_contabil
		where	cd_conta_contabil	= vet_contas_contabeis_w(i);

		if (ie_centro_custo_w = 'S') then
			if (coalesce(cd_centro_custo_w::text, '') = '') then
				pls_obter_centro_custo(	'D',
							nr_seq_plano_w,
							doc_p.cd_estabelecimento,
							'',
							'',
							ie_regulamentacao_w,
							nr_seq_segurado_w,
							'',
							cd_centro_custo_w, 
							nr_seq_regra_cc_w);
			end if;	
		else
					cd_centro_custo_w	:= null;
		end if;
		dados_contab_w.cd_centro_custo := cd_centro_custo_w;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred    := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb     := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	/* Verifica se o movimento foi contabilizado em algum lote contabil, para realizar o update nos campos de lote contabil*/

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		
		if (coalesce(doc_p.ds_origem, 'X') not in ('ESTORNO', 'CANCELAMENTO')) then
			nr_lote_contabil_w := doc_p.nr_lote_contabil;

			update	pls_lote_discussao a
			set	a.nr_lote_contabil 	= doc_p.nr_lote_contabil
			where	a.nr_sequencia 		= doc_p.nr_documento;	
		elsif (coalesce(doc_p.ds_origem, 'X') = 'ESTORNO') then
			nr_lote_contabil_w := 0;

			update	pls_lote_discussao a
			set	a.nr_lote_contabil 	= 0
			where	a.nr_sequencia 		= doc_p.nr_documento
			and	not exists (SELECT	1
						from	pls_contestacao_discussao	b,
							pls_discussao_mat		d
						where	a.nr_sequencia		= b.nr_seq_lote
						and	b.nr_sequencia		= d.nr_seq_discussao
						and	coalesce(d.nr_lote_contabil, 0) <> 0
						
union

						SELECT	1
						from	pls_contestacao_discussao	b,
							pls_discussao_proc		d
						where	a.nr_sequencia		= b.nr_seq_lote
						and	b.nr_sequencia		= d.nr_seq_discussao
						and	coalesce(d.nr_lote_contabil, 0) <> 0);

		end if;

		if (doc_p.nm_tabela = 'PLS_DISCUSSAO_PROC' and (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '')) then
			update  pls_discussao_proc
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_doc_analitico;
		elsif (doc_p.nm_tabela = 'PLS_DISCUSSAO_MAT' and (nr_lote_contabil_w IS NOT NULL AND nr_lote_contabil_w::text <> '')) then
			update  pls_discussao_mat
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_doc_analitico;
		end if;

		if (coalesce(doc_p.ds_origem, 'X') = 'CANCELAMENTO') then
			update	pls_lote_discussao a
			set	a.nr_lote_contabil_cancel	= doc_p.nr_lote_contabil
			where	a.nr_sequencia 			= doc_p.nr_documento;
		end if;


	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_discussao_glosa ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
