-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_tributo ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE

										
	dados_contab_w			        dados_contab;
	vet_contas_contabeis_w                  vet_contas_contabeis;
	nr_seq_prestador_w                      pls_prestador.nr_sequencia%type;
	nr_seq_prestador_pag_w                  pls_prestador.nr_sequencia%type;
	nr_seq_pag_prest_w                      pls_prestador.nr_sequencia%type;
	cd_pessoa_fisica_w                      pessoa_fisica.cd_pessoa_fisica%type;
	cd_cpf_prestador_w                      pessoa_fisica.nr_cpf%type;
	cd_cgc_prestador_w                      pls_prestador.cd_cgc%type;
	cd_cgc_prestador_pag_w                  pls_prestador.cd_cgc%type;
	cd_cpf_prestador_pag_w                  pessoa_fisica.nr_cpf%type;
	nm_prestador_pag_w                      pls_conta_medica_resumo.nm_prestador_pgto%type;
	nr_nota_fiscal_w                        nota_fiscal.nr_nota_fiscal%type;
	nr_seq_item_w                           pls_pag_prest_venc_trib.nr_sequencia%type;
	cd_conta_cred_w                         pls_conta.cd_conta_cred%type;
	cd_conta_deb_w                          pls_conta.cd_conta_deb%type;
	cd_historico_w                          pls_conta_proc.cd_historico%type;
	cd_tributo_w                            pls_pag_prest_venc_trib.cd_tributo%type;
	nr_seq_lote_w                           pls_lote_pagamento.nr_sequencia%type;
	dt_mes_competencia_w                    pls_lote_pagamento.dt_mes_competencia%type;
	nr_titulo_pagar_w                       titulo_pagar.nr_titulo%type;
	nr_titulo_receber_w                     titulo_receber.nr_titulo%type;
	nr_titulo_pag_trib_w                    titulo_pagar.nr_titulo%type;
	nr_seq_evento_w                         pls_pagamento_item.nr_seq_evento%type;
	nr_seq_regra_cc_w                       pls_regra_centro_custo.nr_sequencia%type;
	cd_centro_custo_w                       conta_contabil.cd_centro_custo%type;
	cd_centro_custo_ww                      conta_contabil.cd_centro_custo%type;
	ie_tipo_evento_w                        pls_evento.ie_tipo_evento%type;
	ie_centro_custo_w                       conta_contabil.ie_centro_custo%type;
	nr_lote_contabil_w                      lote_contabil.nr_lote_contabil%type;
	cd_cgc_cpf_prest_pagto_w                varchar(14);
	ds_tributo_w                            varchar(40); -- Conforme retornado pela funcao obter_desc_tributo
	nm_prestador_w                          varchar(255);
	ds_compl_historico_ww                   varchar(255);
	ds_conteudo_w                           varchar(4000);
	qt_atrib_hist_pad_w                     integer;

	
BEGIN

	/* Se nao for correspondente ao atributo/tabela deste select, nao desperdica recursos tentando realizar o mesmo */

	if (doc_p.nm_atributo not in ('VL_IMPOSTO', 'VL_TRIBUTO') or doc_p.nm_tabela not in ('PLS_PAG_PREST_VENC_TRIB', 'PLS_PP_BASE_ATUAL_TRIB', 'PLS_PAGAMENTO_ITEM')) then
		return;
	end if;

	begin
	select  nr_seq_item,
		cd_conta_deb,
		cd_conta_cred,
		cd_historico,
		cd_tributo,
		nr_seq_lote,
		dt_mes_competencia,
		nr_titulo,
		nr_titulo_receber,
		ds_tributo,
		nr_seq_prestador,
		nr_seq_evento,
		cd_centro_custo
	into STRICT    nr_seq_item_w,
		cd_conta_deb_w,
		cd_conta_cred_w,
		cd_historico_w,
		cd_tributo_w,
		nr_seq_lote_w,
		dt_mes_competencia_w,
		nr_titulo_pagar_w,
		nr_titulo_receber_w,
		ds_tributo_w,
		nr_seq_prestador_pag_w,
		nr_seq_evento_w,
		cd_centro_custo_ww
	from (	SELECT	a.nr_sequencia nr_seq_item,
				a.cd_conta_deb,
				a.cd_conta_cred,
				a.cd_historico,
				a.cd_tributo,
				e.nr_sequencia nr_seq_lote,
				e.dt_mes_competencia,
				b.nr_titulo,
				b.nr_titulo_receber,
				obter_desc_tributo(a.cd_tributo) ds_tributo,
				d.nr_seq_prestador,
				null nr_seq_evento,		
				null cd_centro_custo
				from	pls_pag_prest_venc_trib		a,
					pls_pag_prest_vencimento	b,
					pls_pagamento_prestador		d,
					pls_lote_pagamento		    e,
					pls_periodo_pagamento  		x
				where	b.nr_sequencia	            = a.nr_seq_vencimento
				and	d.nr_sequencia	            = b.nr_seq_pag_prestador
				and	e.nr_sequencia	            = d.nr_seq_lote
				and	e.nr_seq_periodo            = x.nr_sequencia
				and     doc_p.nr_documento          = e.nr_sequencia
				and     doc_p.nr_seq_doc_compl      = b.nr_sequencia
				and     doc_p.nr_doc_analitico      = a.nr_sequencia
				and     doc_p.nm_tabela             = 'PLS_PAG_PREST_VENC_TRIB'
				and     doc_p.nm_atributo           = 'VL_IMPOSTO'
				
union

				SELECT	c.nr_sequencia nr_seq_item,
					b.cd_conta_deb,
					b.cd_conta_cred,
					b.cd_historico,
					c.cd_tributo,
					f.nr_sequencia nr_seq_lote,
					f.dt_mes_competencia,
					d.nr_titulo,
					d.nr_titulo_receber,
					obter_desc_tributo(c.cd_tributo) ds_tributo,
					e.nr_seq_prestador,
					a.nr_seq_evento,
					b.cd_centro_custo
				from	pls_pagamento_item 		    a,
					pls_pag_item_trib 		    b,
					pls_pag_prest_venc_trib		c,
					pls_pag_prest_vencimento	d,
					pls_pagamento_prestador		e,
					pls_lote_pagamento		    f,
					pls_periodo_pagamento  		x
				where	a.nr_sequencia	            = b.nr_seq_pagamento
				and	c.nr_sequencia	            = b.nr_seq_venc_trib
				and	d.nr_sequencia  	        = c.nr_seq_vencimento
				and	e.nr_sequencia	            = d.nr_seq_pag_prestador
				and	f.nr_sequencia	            = e.nr_seq_lote
				and	e.nr_sequencia	            = a.nr_seq_pagamento
				and	f.nr_seq_periodo            = x.nr_sequencia
				and     doc_p.nr_documento          = e.nr_sequencia
				and     doc_p.nr_seq_doc_compl      = b.nr_sequencia
				and     doc_p.nr_doc_analitico      = a.nr_sequencia
				and     doc_p.nm_tabela             = 'PLS_PAGAMENTO_ITEM'
				and     doc_p.nm_atributo           = 'VL_IMPOSTO'
				
union

				select	r.nr_sequencia nr_seq_item,
					r.cd_conta_debito,
					r.cd_conta_credito,
					r.cd_historico,
					r.cd_tributo,
					l.nr_sequencia nr_seq_lote,
					l.dt_mes_competencia,
					t.nr_titulo_pagar nr_titulo,
					t.nr_titulo_receber,
					obter_desc_tributo(r.cd_tributo) ds_tributo,
					p.nr_sequencia nr_seq_prestador,
					i.nr_seq_evento,
					r.cd_centro_custo
				from	pls_pp_base_atual_trib		r,
					pls_pp_valor_trib_pessoa 	b,
					pls_pp_item_lote		    i,
					pls_pp_lote			        l,
					pls_pp_prestador		    t,
					pls_prestador			    p
				where	b.nr_sequencia		        = r.nr_seq_trib_pessoa
				and	l.nr_sequencia		        = r.nr_seq_lote
				and	i.nr_sequencia		        = r.nr_seq_item_lote
				and	p.nr_sequencia		        = b.nr_seq_prestador
				and	p.nr_sequencia		        = t.nr_seq_prestador
				and	l.nr_sequencia		        = t.nr_seq_lote
				and     doc_p.nr_documento          = l.nr_sequencia
				and     doc_p.nr_seq_doc_compl      = i.nr_sequencia
				and     doc_p.nr_doc_analitico      = r.nr_sequencia
				and     doc_p.nm_tabela             = 'PLS_PP_BASE_ATUAL_TRIB'
				and     doc_p.nm_atributo           = 'VL_TRIBUTO') alias3;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	if (coalesce(cd_conta_cred_w, 'X') = 'X' or coalesce(cd_conta_deb_w, 'X') = 'X' or coalesce(cd_historico_w, 0) = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Numero de agrupamento */

	dados_contab_w.nr_seq_agrupamento	    := nr_seq_lote_w;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		/* Obtem informacoes referentes ao prestador, utilizadas no complemento historico */

		if (doc_p.nm_tabela = 'PLS_PP_BASE_ATUAL_TRIB') then
			nr_seq_prestador_w := nr_seq_prestador_pag_w;
		else
			select	max(a.nr_seq_prestador),
				max(a.nr_sequencia)
			into STRICT	nr_seq_prestador_w,
				nr_seq_pag_prest_w
			from	pls_pag_prest_venc_trib		c,
				pls_pag_prest_vencimento	b,
				pls_pagamento_prestador		a
			where	a.nr_sequencia	= b.nr_seq_pag_prestador
			and	b.nr_sequencia	= c.nr_seq_vencimento
			and	c.nr_sequencia	= nr_seq_item_w;
		end if;

		if (coalesce(nr_seq_prestador_w,0) > 0) then
			select	max(a.cd_pessoa_fisica),
				max(a.cd_cgc)
			into STRICT	cd_pessoa_fisica_w,
				cd_cgc_prestador_w
			from	pls_prestador a
			where	a.nr_sequencia	= nr_seq_prestador_w;
			
			begin
			nm_prestador_w	:= substr(obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_prestador_w),1,255);
			exception
			when others then
				nm_prestador_w	:= null;
			end;
				
			select	max(nr_cpf)
			into STRICT	cd_cpf_prestador_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		end if;

		/* Obtem informacoes da nota fiscal e titulo a pagar, utilizadas no complemento historico */

		select	max(a.nr_nota_fiscal)
		into STRICT	nr_nota_fiscal_w
		from	nota_fiscal	a
		where	a.nr_seq_pgto_prest	= nr_seq_pag_prest_w;
		
		select	max(nr_titulo)
		into STRICT	nr_titulo_pag_trib_w
		from	titulo_pagar
		where	nr_seq_pls_venc_trib	= nr_seq_item_w;

		/* Obtem informacoes do prestador_pag, utilizadas no complemento historico */

		select	max(a.nr_sequencia),
			max(a.cd_cgc),
			max(	select	c.nr_cpf
				from	pessoa_fisica	c
				where	c.cd_pessoa_fisica = a.cd_pessoa_fisica) nr_cpf
		into STRICT	nr_seq_prestador_pag_w,
			cd_cgc_prestador_pag_w,
			cd_cpf_prestador_pag_w
		from	pls_prestador		a
		where	a.nr_sequencia = nr_seq_prestador_pag_w;

		if (coalesce(cd_cgc_prestador_pag_w, 'X') <> 'X') then
			nm_prestador_pag_w := substr(obter_razao_social(cd_cgc_prestador_pag_w),1,255);
		end if;
		
		cd_cgc_cpf_prest_pagto_w := coalesce(cd_cgc_prestador_pag_w, cd_cpf_prestador_pag_w);

		ds_conteudo_w	:= substr(	nr_seq_prestador_w		|| '#@' ||
						nm_prestador_w			|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						cd_cgc_prestador_w		|| '#@' ||
						cd_cpf_prestador_w		|| '#@' ||
						nr_nota_fiscal_w		|| '#@' ||
						nr_seq_lote_w			|| '#@' ||
						dt_mes_competencia_w		|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						nr_titulo_pagar_w		|| '#@' ||
						nr_titulo_receber_w		|| '#@' ||
						ds_tributo_w			|| '#@' ||
						nr_titulo_pag_trib_w		|| '#@' ||
						null				|| '#@' ||
						nr_seq_prestador_pag_w		|| '#@' ||
						cd_cgc_cpf_prest_pagto_w	|| '#@' ||
						nm_prestador_pag_w		|| '#@' ||
						nr_seq_evento_w			|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null,1,4000);

		begin
			ds_compl_historico_ww	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil,    cd_historico_w, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_ww	:= null;
		end;

		dados_contab_w.ds_compl_historico := ds_compl_historico_ww;

	end if;

	
	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas */

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1) := cd_conta_cred_w;
	vet_contas_contabeis_w(2) := cd_conta_deb_w;
	dados_contab_w.cd_historico := cd_historico_w;


	/* Informacoes do tipo evento, utilizado na obtencao do centro de custo */

	select	max(a.ie_tipo_evento)
	into STRICT	ie_tipo_evento_w
	from	pls_evento a
	where	a.nr_sequencia	= nr_seq_evento_w;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;
		ie_centro_custo_w := null;

		if (ie_tipo_evento_w = 'F' and coalesce(cd_centro_custo_ww, 0) <> 0) then
			select	ie_centro_custo
			into STRICT	ie_centro_custo_w
			from	conta_contabil
			where	cd_conta_contabil = vet_contas_contabeis_w(i);

			if (ie_centro_custo_w = 'S') then
				cd_centro_custo_w := cd_centro_custo_ww;
			end if;
		
		elsif (coalesce(cd_tributo_w::text, '') = '') then
			/* Centro de custo */

			SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', '', doc_p.cd_estabelecimento, '', '', '', '', null, cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
			dados_contab_w.cd_centro_custo := cd_centro_custo_w;
		end if;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		if (coalesce(doc_p.ds_origem,'X') = 'ESTORNO') then
			nr_lote_contabil_w := 0;
		else
			nr_lote_contabil_w := doc_p.nr_lote_contabil;
		end if;

		if (doc_p.nm_tabela = 'PLS_PAG_PREST_VENC_TRIB') then
			update	pls_pag_prest_venc_trib	a
			set	a.nr_lote_contabil	= nr_lote_contabil_w
			where	nr_sequencia		= doc_p.nr_doc_analitico;
		elsif (doc_p.nm_tabela = 'PLS_PAGAMENTO_ITEM') then
			update	pls_pag_prest_venc_trib	c
			set	c.nr_lote_contabil	= nr_lote_contabil_w
			where	c.nr_sequencia		= (	SELECT  b.nr_seq_venc_trib
								from    pls_pagamento_item 		a,
									pls_pag_item_trib 		b
								where   a.nr_sequencia	=  b.nr_seq_pagamento
								and     a.nr_sequencia   = doc_p.nr_doc_analitico);
		elsif (doc_p.nm_tabela = 'PLS_PP_BASE_ATUAL_TRIB') then
			update	pls_pp_base_atual_trib a
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   a.nr_sequencia      = doc_p.nr_doc_analitico;
		end if;

	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_tributo ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
