-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_provisao_prod ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_conta_w			pls_conta.nr_sequencia%type;
	nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	nr_seq_plano_w			pls_conta.nr_seq_plano%type;
	cd_conta_cred_w			pls_conta.cd_conta_cred%type;
	cd_conta_credito_w		pls_conta.cd_conta_cred%type;
	cd_conta_deb_w			pls_conta.cd_conta_deb%type;
	cd_conta_debito_w		pls_conta.cd_conta_deb%type;
	cd_conta_glosa_cred_w		pls_conta.cd_conta_glosa_cred%type;
	cd_conta_glosa_deb_w		pls_conta.cd_conta_glosa_deb%type;
	cd_historico_w			pls_conta_proc.cd_historico%type;
	cd_historico_ww			pls_conta_proc.cd_historico%type;
	cd_historico_glosa_w		pls_conta_proc.cd_historico_glosa%type;
	cd_historico_ajuste_w		pls_conta_medica_resumo.cd_historico_vl_ajuste%type;
	nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
	ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
	cd_centro_custo_w		w_movimento_contabil.cd_centro_custo%type;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	nr_nota_fiscal_w		pls_prot_conta_titulo.nr_nota_fiscal%type;
	cd_pessoa_fisica_w		pls_prestador.cd_pessoa_fisica%type;
	cd_cgc_prestador_w		pls_prestador.cd_cgc%type;
	cd_cpf_prestador_w		pessoa_fisica.nr_cpf%type;
	ie_estorno_corresp_pre_w	pls_parametro_contabil.ie_estorno_corresp_pre%type;
	nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
	ds_conteudo_w			varchar(4000);
	ds_estorno_w			varchar(4000);
	ds_compl_historico_w		varchar(255);
	nm_agrupador_w			varchar(255);
	nm_prestador_w			varchar(255);
	qt_atrib_hist_pad_w		integer;
		
	
BEGIN

	begin
	select	cd_conta_debito,
		cd_conta_credito,
		cd_historico,
		nr_seq_conta,
		nr_seq_segurado,
		nr_seq_protocolo,
		nr_seq_prestador,
		nr_seq_plano,
		cd_conta_glosa_deb,
		cd_conta_glosa_cred,
		cd_historico_glosa,
		cd_historico_ajuste,
		ie_regulamentacao,
		nr_nota_fiscal
	into STRICT    cd_conta_debito_w,
		cd_conta_credito_w,
		cd_historico_ww,
		nr_seq_conta_w,
		nr_seq_segurado_w,
		nr_seq_protocolo_w,
		nr_seq_prestador_w,
		nr_seq_plano_w,
		cd_conta_glosa_deb_w,
		cd_conta_glosa_cred_w,
		cd_historico_glosa_w,
		cd_historico_ajuste_w,
		ie_regulamentacao_w,
		nr_nota_fiscal_w
	from (SELECT	CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_debito,
			CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_credito,
			CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN  c.cd_historico_prov  ELSE d.cd_historico_prov END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado nr_seq_segurado,
			b.nr_seq_protocolo nr_seq_protocolo,
			d.nr_seq_prestador_pgto nr_seq_prestador,
			coalesce(b.nr_seq_plano, (	select	x.nr_sequencia
						from	pls_segurado	s,
							pls_plano	x
						where	x.nr_sequencia	= s.nr_seq_plano
						and	s.nr_sequencia	= b.nr_seq_segurado)) nr_seq_plano,
			CASE WHEN coalesce(	d.nr_seq_esquema_glosa,0)=0 THEN 					CASE WHEN 'S'='S' THEN c.cd_conta_glosa_deb  ELSE c.cd_conta_glosa_cred END   ELSE CASE WHEN 'S'='S' THEN d.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_cred END  END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(	d.nr_seq_esquema_glosa,0)=0 THEN 					CASE WHEN 'S'='S' THEN c.cd_conta_glosa_deb  ELSE c.cd_conta_glosa_cred END   ELSE CASE WHEN 'S'='S' THEN d.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_deb END  END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema_glosa,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			coalesce(d.cd_historico_vl_ajuste, c.cd_historico_ajuste) cd_historico_ajuste,
			coalesce(e.ie_regulamentacao, (	select	x.ie_regulamentacao
							from	pls_segurado	s,
								pls_plano	x
							where	x.nr_sequencia	= s.nr_seq_plano
							and	s.nr_sequencia	= b.nr_seq_segurado)) ie_regulamentacao,
			f.nr_nota_fiscal nr_nota_fiscal
			FROM pls_conta_medica_resumo d, pls_conta_proc c, pls_protocolo_conta a, pls_conta b
LEFT OUTER JOIN pls_plano e ON (b.nr_seq_plano = e.nr_sequencia)
LEFT OUTER JOIN pls_prot_conta_titulo f ON (b.nr_seq_prot_conta = f.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_proc and b.nr_sequencia		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= b.nr_seq_protocolo   and doc_p.nm_tabela		= 'PLS_CONTA_MEDICA_RESUMO' and a.nr_sequencia		= doc_p.nr_documento and b.nr_sequencia		= doc_p.nr_seq_doc_compl and d.nr_sequencia		= doc_p.nr_doc_analitico
			
union all

			SELECT	CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_debito,
				CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_credito,
				CASE WHEN coalesce(d.nr_seq_esquema_prov,0)=0 THEN  c.cd_historico_prov  ELSE d.cd_historico_prov END  cd_historico,
				b.nr_sequencia nr_seq_conta,
				b.nr_seq_segurado nr_seq_segurado,
				b.nr_seq_protocolo nr_seq_protocolo,
				d.nr_seq_prestador_pgto nr_seq_prestador,
				coalesce(b.nr_seq_plano, (	select	x.nr_sequencia
							from	pls_segurado	s,
								pls_plano	x
							where	x.nr_sequencia	= s.nr_seq_plano
							and	s.nr_sequencia	= b.nr_seq_segurado)) nr_seq_plano,
				CASE WHEN coalesce(	d.nr_seq_esquema_glosa,0)=0 THEN 						CASE WHEN 'S'='S' THEN c.cd_conta_glosa_deb  ELSE c.cd_conta_glosa_cred END   ELSE CASE WHEN 'S'='S' THEN d.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_cred END  END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
				CASE WHEN coalesce(	d.nr_seq_esquema_glosa,0)=0 THEN 						CASE WHEN 'S'='S' THEN c.cd_conta_glosa_deb  ELSE c.cd_conta_glosa_cred END   ELSE CASE WHEN 'S'='S' THEN d.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_deb END  END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
				CASE WHEN coalesce(d.nr_seq_esquema_glosa,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
				coalesce(d.cd_historico_vl_ajuste, c.cd_historico_ajuste) cd_historico_ajuste,
				coalesce(e.ie_regulamentacao, (	select	x.ie_regulamentacao
								from	pls_segurado	s,
									pls_plano	x
								where	x.nr_sequencia	= s.nr_seq_plano
								and	s.nr_sequencia	= b.nr_seq_segurado)) ie_regulamentacao,
				f.nr_nota_fiscal nr_nota_fiscal
			FROM pls_conta_medica_resumo d, pls_conta_mat c, pls_protocolo_conta a, pls_conta b
LEFT OUTER JOIN pls_plano e ON (b.nr_seq_plano = e.nr_sequencia)
LEFT OUTER JOIN pls_prot_conta_titulo f ON (b.nr_seq_prot_conta = f.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_mat and b.nr_sequencia		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= b.nr_seq_protocolo   and doc_p.nm_tabela         = 'PLS_CONTA_MEDICA_RESUMO' and a.nr_sequencia          = doc_p.nr_documento and b.nr_sequencia          = doc_p.nr_seq_doc_compl and d.nr_sequencia          = doc_p.nr_doc_analitico
			 
union all

			select  c.cd_conta_provisao_deb cd_conta_debito,
				c.cd_conta_provisao_cred cd_conta_credito,
				c.cd_historico_prov cd_historico,
				b.nr_sequencia nr_seq_conta,
				b.nr_seq_segurado nr_seq_segurado,
				b.nr_seq_protocolo nr_seq_protocolo,
				b.nr_seq_prestador_exec nr_seq_prestador,
				coalesce(b.nr_seq_plano, (	select	x.nr_sequencia
							from	pls_segurado	s,
								pls_plano	x
							where	x.nr_sequencia	= s.nr_seq_plano
							and	s.nr_sequencia	= b.nr_seq_segurado)) nr_seq_plano,
				null cd_conta_glosa_deb,
				null cd_conta_glosa_cred,
				null cd_historico_glosa,
				c.cd_historico_ajuste cd_historico_ajuste,
				coalesce(e.ie_regulamentacao, (	select	x.ie_regulamentacao
								from	pls_segurado	s,
									pls_plano	x
								where	x.nr_sequencia	= s.nr_seq_plano
								and	s.nr_sequencia	= b.nr_seq_segurado)) ie_regulamentacao,
				f.nr_nota_fiscal nr_nota_fiscal
			FROM pls_conta_proc c, pls_protocolo_conta a, pls_conta b
LEFT OUTER JOIN pls_plano e ON (b.nr_seq_plano = e.nr_sequencia)
LEFT OUTER JOIN pls_prot_conta_titulo f ON (b.nr_seq_prot_conta = f.nr_sequencia)
WHERE b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= b.nr_seq_protocolo   and doc_p.nm_tabela         = 'PLS_CONTA_PROC' and a.nr_sequencia          = doc_p.nr_documento and b.nr_sequencia          = doc_p.nr_seq_doc_compl and c.nr_sequencia          = doc_p.nr_doc_analitico
			 
union all

			select	c.cd_conta_provisao_deb cd_conta_debito,
				c.cd_conta_provisao_cred cd_conta_credito,
				c.cd_historico_prov cd_historico,
				b.nr_sequencia nr_seq_conta,
				b.nr_seq_segurado nr_seq_segurado,
				b.nr_seq_protocolo nr_seq_protocolo,
				b.nr_seq_prestador_exec nr_seq_prestador,
				coalesce(b.nr_seq_plano, (	select	x.nr_sequencia
							from	pls_segurado	s,
								pls_plano	x
							where	x.nr_sequencia	= s.nr_seq_plano
							and	s.nr_sequencia	= b.nr_seq_segurado)) nr_seq_plano,
				null cd_conta_glosa_deb,
				null cd_conta_glosa_cred,
				null cd_historico_glosa,
				c.cd_historico_ajuste cd_historico_ajuste,
				coalesce(e.ie_regulamentacao, (	select	x.ie_regulamentacao
								from	pls_segurado	s,
									pls_plano	x
								where	x.nr_sequencia	= s.nr_seq_plano
								and	s.nr_sequencia	= b.nr_seq_segurado)) ie_regulamentacao,
				f.nr_nota_fiscal nr_nota_fiscal
			FROM pls_conta_mat c, pls_protocolo_conta a, pls_conta b
LEFT OUTER JOIN pls_plano e ON (b.nr_seq_plano = e.nr_sequencia)
LEFT OUTER JOIN pls_prot_conta_titulo f ON (b.nr_seq_prot_conta = f.nr_sequencia)
WHERE b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= b.nr_seq_protocolo   and doc_p.nm_tabela         = 'PLS_CONTA_MAT' and a.nr_sequencia          = doc_p.nr_documento and b.nr_sequencia          = doc_p.nr_seq_doc_compl and c.nr_sequencia          = doc_p.nr_doc_analitico ) alias30;
	exception
	when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;	/*  Atribuicao das contas contabeis 
		Existe VL_TAXA_PGTO, mas nao e inserido na ctb_documento, portanto nao e tratado aqui */
	if (doc_p.nm_atributo = 'VL_GLOSA') then
		cd_conta_cred_w := coalesce(cd_conta_glosa_cred_w, 'X');
		cd_conta_deb_w  := coalesce(cd_conta_glosa_deb_w, 'X');
		cd_historico_w  := coalesce(cd_historico_glosa_w, 0);
	elsif (doc_p.nm_atributo in ('VL_LIBERADO', 'VL_PROVISAO')) then
		cd_conta_cred_w :=  coalesce(cd_conta_credito_w, 'X');
		cd_conta_deb_w  :=  coalesce(cd_conta_debito_w, 'X');
		cd_historico_w  :=  coalesce(cd_historico_ww, 0);
	elsif (doc_p.nm_atributo = 'VL_AJUSTADO') then
		cd_conta_cred_w :=  coalesce(cd_conta_credito_w,'X');
		cd_conta_deb_w  :=  coalesce(cd_conta_debito_w, 'X');
		cd_historico_w  :=  coalesce(cd_historico_ajuste_w, 0);
	end if;

	/* Se nao houver informacoes de contas contabeis ou de historico, nao segue o processo */

	if (coalesce(cd_conta_cred_w, 'X') = 'X' or coalesce(cd_conta_deb_w, 'X') = 'X' or coalesce(cd_historico_w, 0) = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w 		:= vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1) 	:= cd_conta_cred_w;
	vet_contas_contabeis_w(2) 	:= cd_conta_deb_w;
	dados_contab_w.cd_historico 	:= cd_historico_w;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;
	dados_contab_w.nr_seq_info_ctb		:= doc_p.nr_seq_info;
	dados_contab_w.nm_tabela		:= doc_p.nm_tabela;
	dados_contab_w.nm_atributo		:= doc_p.nm_atributo;
	dados_contab_w.nr_documento		:= doc_p.nr_documento;
	dados_contab_w.nr_seq_doc_compl		:= doc_p.nr_seq_doc_compl;
	dados_contab_w.nr_doc_analitico		:= doc_p.nr_doc_analitico;

	/* Obtem agrupador */

	nm_agrupador_w	:= coalesce(trim(both obter_agrupador_contabil(doc_p.cd_tipo_lote_contabil)), 'NR_SEQ_CONTA');
	if (nm_agrupador_w = 'NR_SEQ_CONTA') then
		dados_contab_w.nr_seq_agrupamento	:= nr_seq_conta_w;
	elsif (nm_agrupador_w = 'NR_SEQ_PROTOCOLO') then
		dados_contab_w.nr_seq_agrupamento	:= nr_seq_protocolo_w;
	end if;

	if (coalesce(dados_contab_w.nr_seq_agrupamento::text, '') = '') then
		dados_contab_w.nr_seq_agrupamento	:= nr_seq_conta_w;
	end if;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then

		/* Obtem informacoes da PF, PJ e nome do prestador. Utilizado no comeplemento historico*/

		if (coalesce(nr_seq_prestador_w, 0) <> 0) then
			select	a.cd_pessoa_fisica,
				a.cd_cgc
			into STRICT	cd_pessoa_fisica_w,
				cd_cgc_prestador_w
			from	pls_prestador	a
			where	a.nr_sequencia	= nr_seq_prestador_w;

			begin
				nm_prestador_w	:= substr(obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_prestador_w),1,255);
			exception
			when others then
				nm_prestador_w	:= null;
			end;

			select	max(nr_cpf)
			into STRICT	cd_cpf_prestador_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		end if;

		/* Informacoes para o ds_estornoo, que e utilizado no complemento historico*/

		select	max(coalesce(ie_estorno_corresp_pre, 'N'))
		into STRICT    ie_estorno_corresp_pre_w
		from	pls_parametro_contabil
		where	cd_estabelecimento	= doc_p.cd_estabelecimento;

		if (ie_estorno_corresp_pre_w = 'S') then
			ds_estorno_w 		:= substr(wheb_mensagem_pck.get_texto(1056252),1,255);
		end if;

		/* Montagem do complemento historico */

		ds_conteudo_w	:= substr(	nr_seq_prestador_w	||'#@'||
						nm_prestador_w 		||'#@'||
						nr_seq_protocolo_w	||'#@'||
						nr_seq_conta_w		||'#@'||
						cd_cgc_prestador_w	||'#@'||
						cd_cpf_prestador_w	||'#@'||
						nr_nota_fiscal_w	||'#@'||
						ds_estorno_w,1,4000);

		begin
			ds_compl_historico_w	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, dados_contab_w.cd_historico, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w	:= null;
		end;
		dados_contab_w.ds_compl_historico	:= substr(ds_compl_historico_w,1,255);

	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', nr_seq_plano_w, doc_p.cd_estabelecimento, '', '', ie_regulamentacao_w, nr_seq_segurado_w, null, cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X'), nr_seq_prestador_w) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
		dados_contab_w.cd_centro_custo := cd_centro_custo_w;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	/*  Se o valor for maior do que 0, ira gravar o numero do lote contabil.
		Se o valor for menor do que 0, ira gravar o lote contabil como zerado, pois foi realizado o estorno do movimento. */
	if (doc_p.vl_movimento >= 0) then
		nr_lote_contabil_w := doc_p.nr_lote_contabil;
	elsif (doc_p.vl_movimento < 0) then
		nr_lote_contabil_w := 0;
	end if;

		/*  Atualiza o movimento de origem com a informacao do numero do lote contabil 
			Utiliza o valor doc_p.nr_lote_contabil para verificar se foi feita a contabilizacao.  */
	if (coalesce(doc_p.nr_lote_contabil,0) <> 0) then
		if (doc_p.nm_tabela = 'PLS_CONTA_MEDICA_RESUMO') then
			update	pls_conta_medica_resumo	a
			set	a.nr_lote_contabil_prov		= doc_p.nr_lote_contabil
			where	a.nr_sequencia              = doc_p.nr_doc_analitico;
		elsif (doc_p.nm_tabela = 'PLS_CONTA_PROC') then
			update	pls_conta_proc	a
			set	a.nr_lote_contabil_prov		= nr_lote_contabil_w
			where	a.nr_sequencia              = doc_p.nr_doc_analitico;
		elsif (doc_p.nm_tabela = 'PLS_CONTA_MAT') then
			update	pls_conta_mat	a
			set	a.nr_lote_contabil_prov		= nr_lote_contabil_w
			where	a.nr_sequencia              = doc_p.nr_doc_analitico;
		end if;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_provisao_prod ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
