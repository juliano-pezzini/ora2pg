-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_reembolso ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_reembolso_w		pls_conta.nr_sequencia%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	cd_pf_documento_w		pessoa_fisica.cd_pessoa_fisica%type;
	cd_pj_documento_w		pessoa_juridica.cd_cgc%type;
	nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
	nr_seq_segurado_ww		pls_segurado.nr_sequencia%type;
	cd_pessoa_resp_credito_w	pessoa_fisica.cd_pessoa_fisica%type;
	nm_resp_credito_w		pessoa_fisica.nm_pessoa_fisica%type;
	nm_pessoa_documento_w		pessoa_fisica.nm_pessoa_fisica%type := '';
	nr_titulo_w			titulo_pagar.nr_titulo%type;
	cd_conta_cred_w			pls_conta.cd_conta_cred%type;
	cd_conta_deb_w			pls_conta.cd_conta_deb%type;
	cd_conta_glosa_cred_w		pls_conta.cd_conta_glosa_cred%type;
	cd_conta_glosa_deb_w		pls_conta.cd_conta_glosa_deb%type;
	cd_conta_copartic_cred_w	pls_conta_proc.cd_conta_copartic_cred%type;
	cd_conta_copartic_deb_w		pls_conta_proc.cd_conta_copartic_deb%type;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	ie_centro_custo_w		varchar(1);
	cd_centro_custo_w		centro_custo.cd_centro_custo%type;
	nr_seq_plano_w			pls_conta.nr_seq_plano%type;
	cd_historico_w			pls_conta_proc.cd_historico%type;
	cd_historico_glosa_w		pls_conta_proc.cd_historico_glosa%type;
	cd_historico_copartic_w		pls_conta_proc.cd_historico_copartic%type;
	nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
	ds_conteudo_w			varchar(4000);
	ds_compl_historico_w		varchar(255);
	qt_atrib_hist_pad_w		integer;

	
BEGIN
	select	        b.nr_sequencia,
			b.nr_seq_protocolo,
			b.cd_pessoa_fisica,
			b.cd_cgc,
			a.nr_seq_segurado,
			a.cd_pessoa_fisica,
			b.nr_seq_segurado
	into STRICT            nr_seq_reembolso_w,
			nr_seq_protocolo_w,
			cd_pf_documento_w,
			cd_pj_documento_w,
			nr_seq_segurado_w,
			cd_pessoa_resp_credito_w,
			nr_seq_segurado_ww
	from            pls_protocolo_conta	a,
			pls_conta		b
	where	        a.nr_sequencia		= b.nr_seq_protocolo
	and		a.nr_sequencia		= doc_p.nr_documento
	and             b.nr_sequencia		= doc_p.nr_seq_doc_compl;
		
	begin
	/* Obtem as contas contabeis */

	if (doc_p.nm_tabela = 'PLS_CONTA_PROC') then
		select  coalesce(cd_conta_cred, 'X'),
			coalesce(cd_conta_deb, 'X'),
			coalesce(cd_conta_glosa_cred, 'X'),
			coalesce(cd_conta_glosa_deb, 'X'),
			coalesce(cd_conta_copartic_cred, 'X'),
			coalesce(cd_conta_copartic_deb, 'X'),
			coalesce(cd_historico, 0),
			coalesce(cd_historico_glosa, 0),
			coalesce(cd_historico_copartic, 0)
		into STRICT    cd_conta_cred_w,
			cd_conta_deb_w,
			cd_conta_glosa_cred_w,
			cd_conta_glosa_deb_w,
			cd_conta_copartic_cred_w,
			cd_conta_copartic_deb_w,
			cd_historico_w,
			cd_historico_glosa_w,
			cd_historico_copartic_w
		from    pls_conta_proc
		where   nr_sequencia = doc_p.nr_doc_analitico;
	elsif (doc_p.nm_tabela = 'PLS_CONTA_MAT') then
		select  coalesce(cd_conta_cred, 'X'),
			coalesce(cd_conta_deb, 'X'),
			coalesce(cd_conta_glosa_cred, 'X'),
			coalesce(cd_conta_glosa_deb, 'X'),
			'X',
			'X',
			coalesce(cd_historico, 0),
			coalesce(cd_historico_glosa, 0),
			0
		into STRICT    cd_conta_cred_w,
			cd_conta_deb_w,
			cd_conta_glosa_cred_w,
			cd_conta_glosa_deb_w,
			cd_conta_copartic_cred_w,
			cd_conta_copartic_deb_w,
			cd_historico_w,
			cd_historico_glosa_w,
			cd_historico_copartic_w
		from    pls_conta_mat
		where   nr_sequencia = doc_p.nr_doc_analitico;
	end if;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	/* Se nao houver informacoes de contas contabeis ou de historico, nao segue o processo */

	if  (((cd_conta_cred_w = 'X' or cd_conta_deb_w = 'X' or cd_historico_w = 0) and doc_p.nm_atributo in ('VL_CALC_PROC', 'VL_CALC_MAT', 'VL_LIBERADO'))
	or ((cd_conta_glosa_cred_w = 'X' or cd_conta_glosa_deb_w = 'X' or cd_historico_glosa_w = 0) and doc_p.nm_atributo = 'VL_GLOSA')) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;
	dados_contab_w.cd_tipo_lote_contabil	:= doc_p.cd_tipo_lote_contabil;

	/* Numero de agrupamento */

	dados_contab_w.nr_seq_agrupamento	:= nr_seq_reembolso_w;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	if (doc_p.nm_atributo = 'VL_GLOSA') then
		vet_contas_contabeis_w(1)       := cd_conta_glosa_cred_w;
		vet_contas_contabeis_w(2)       := cd_conta_glosa_deb_w;
		dados_contab_w.cd_historico     := cd_historico_glosa_w;
	elsif (doc_p.nm_atributo = 'VL_COPARTICIPACAO') then
		vet_contas_contabeis_w(1)       := cd_conta_copartic_cred_w;
		vet_contas_contabeis_w(2)       := cd_conta_copartic_deb_w;
		dados_contab_w.cd_historico     := cd_historico_copartic_w;
	else
		vet_contas_contabeis_w(1)       := cd_conta_cred_w;
		vet_contas_contabeis_w(2)       := cd_conta_deb_w;
		dados_contab_w.cd_historico     := cd_historico_w;
	end if;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		/* Informacao utilizada no complemento historico*/

		begin
		nm_resp_credito_w	:= pls_obter_resp_credito_prot(nr_seq_protocolo_w, 'N');
		exception
		when others then
			nm_resp_credito_w	:= '';
		end;

		/* Nome da pessoa do documento do reembolso - Utilizado apenas no complemento historico*/

		if (coalesce(cd_pf_documento_w,'X') <> 'X') or (coalesce(cd_pj_documento_w,'X') <> 'X') then
			nm_pessoa_documento_w	:= obter_nome_pf_pj(cd_pf_documento_w, cd_pj_documento_w);					
		end if;

		/* Numero do titulo - Utilizado apenas no complemento historico*/

		select	max(a.nr_titulo)
		into STRICT	nr_titulo_w
		from	titulo_pagar		a
		where	a.nr_seq_reembolso	= nr_seq_protocolo_w;

		/* Montagem do complemento historico */

		ds_conteudo_w	:= substr(				nr_seq_protocolo_w			|| '#@' ||
									nr_seq_reembolso_w			|| '#@' ||
									nr_seq_segurado_w			|| '#@' ||
									cd_pessoa_resp_credito_w		|| '#@' ||
									cd_pf_documento_w			|| '#@' ||
									cd_pj_documento_w			|| '#@' ||
									nm_resp_credito_w			|| '#@' ||
									nm_pessoa_documento_w			|| '#@' ||
									null					|| '#@' ||
									nr_titulo_w, 1,4000);

		begin
		ds_compl_historico_w	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, dados_contab_w.cd_historico, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w	:= null;
		end;
		dados_contab_w.ds_compl_historico	:= substr(ds_compl_historico_w,1,255);
	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		nr_seq_plano_w := null;
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', nr_seq_plano_w, doc_p.cd_estabelecimento, '', '', '', nr_seq_segurado_ww, '', cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;

		dados_contab_w.cd_centro_custo := cd_centro_custo_w;
		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
				dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
				dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	/*  Se o valor for maior do que 0, ira gravar o numero do lote contabil.
		Se o valor for menor do que 0, ira gravar o lote contabil como zerado, pois foi realizado o estorno do movimento. */
	if (doc_p.vl_movimento >= 0) then
		nr_lote_contabil_w := doc_p.nr_lote_contabil;
	elsif (doc_p.vl_movimento < 0) then
		nr_lote_contabil_w := 0;
	end if;

	/*  Atualiza o movimento de origem com a informacao do numero do lote contabil 
		Ao gravar os movimentos de reembolso na CTB_DOCUMENTO, a forma de contabilizacao do reembolso e gravada no campo ds_origem.
		Utiliza o valor doc_p.nr_lote_contabil para verificar se foi feita a contabilizacao.  */
	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		
		/*  Para a pls_protocolo_conta e feito um tratamento especial, pois podem haver outros registros com lote contabil gravado
			Portanto, nao pode ser salvo como "0" por apenas uma proc/mat ter sofrido mudanca     */
		if (doc_p.vl_movimento >= 0) then
			update  pls_protocolo_conta a
			set     a.nr_lote_contabil          = nr_lote_contabil_w
			where   a.nr_sequencia              = doc_p.nr_documento;

			update  pls_protocolo_conta a
			set     a.nr_lote_contab_pag        = nr_lote_contabil_w
			where   a.nr_sequencia              = doc_p.nr_documento
			and     ((doc_p.ds_origem             = 'C')
			or	(doc_p.ds_origem = 'M' AND doc_p.nm_atributo = 'VL_GLOSA'));
		elsif (doc_p.vl_movimento < 0) then
			update  pls_protocolo_conta a
			set     a.nr_lote_contabil          = nr_lote_contabil_w
			where   a.nr_sequencia              = doc_p.nr_documento
			and     not exists (	SELECT  1
						from    pls_conta b,
							pls_conta_proc c
						where   b.nr_seq_protocolo  = a.nr_sequencia
						and     c.nr_seq_conta      = b.nr_sequencia
						and     coalesce(c.nr_lote_contabil, 0) <> 0
						
union

						SELECT  1
						from    pls_conta b,
							pls_conta_mat c
						where   b.nr_seq_protocolo  = a.nr_sequencia
						and     c.nr_seq_conta      = b.nr_sequencia
						and     coalesce(c.nr_lote_contabil, 0) <> 0);
			
			update  pls_protocolo_conta a
			set     a.nr_lote_contab_pag        = nr_lote_contabil_w
			where   a.nr_sequencia              = doc_p.nr_documento
			and     ((doc_p.ds_origem             = 'C')
			or	(doc_p.ds_origem = 'M' AND doc_p.nm_atributo = 'VL_GLOSA'))
			and     not exists (	SELECT  1
						from    pls_conta b,
							pls_conta_proc c
						where   b.nr_seq_protocolo  = a.nr_sequencia
						and     c.nr_seq_conta      = b.nr_sequencia
						and     coalesce(c.nr_lote_contab_pag, 0) <> 0
						
union

						SELECT  1
						from    pls_conta b,
							pls_conta_mat c
						where   b.nr_seq_protocolo  = a.nr_sequencia
						and     c.nr_seq_conta      = b.nr_sequencia
						and     coalesce(c.nr_lote_contab_pag, 0) <> 0);

		end if;

		update  pls_conta_proc a
		set     a.nr_lote_contabil          = nr_lote_contabil_w
		where   a.nr_sequencia              = doc_p.nr_doc_analitico
		and     doc_p.nm_tabela             = 'PLS_CONTA_PROC';

		update  pls_conta_mat a
		set     a.nr_lote_contabil          = nr_lote_contabil_w
		where   a.nr_sequencia              = doc_p.nr_doc_analitico
		and     doc_p.nm_tabela             = 'PLS_CONTA_MAT';

		update  pls_conta_proc a
		set     a.nr_lote_contab_pag        = nr_lote_contabil_w
		where   a.nr_sequencia              = doc_p.nr_doc_analitico
		and     doc_p.nm_tabela             = 'PLS_CONTA_PROC'
		and     ((doc_p.ds_origem             = 'C')
		or	(doc_p.ds_origem = 'M' AND doc_p.nm_atributo = 'VL_GLOSA'));

		update  pls_conta_mat a
		set     a.nr_lote_contab_pag        = nr_lote_contabil_w
		where   a.nr_sequencia              = doc_p.nr_doc_analitico
		and     doc_p.nm_tabela             = 'PLS_CONTA_MAT'
		and     ((doc_p.ds_origem             = 'C')
		or	(doc_p.ds_origem = 'M' AND doc_p.nm_atributo = 'VL_GLOSA'));
	end if;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_reembolso ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
