-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_desp_intercambio ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			dados_contab;
	vet_contas_contabeis_w		vet_contas_contabeis;
	nr_seq_item_w			pls_conta_proc.nr_sequencia%type;
	nr_seq_conta_w			pls_conta.nr_sequencia%type;
	nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
	nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
	nr_seq_fatura_w			pls_conta.nr_seq_fatura%type;
	nr_seq_plano_w			pls_conta.nr_seq_plano%type;
	nr_titulo_pagar_w		titulo_pagar.nr_titulo%type;
	cd_conta_cred_w			pls_conta.cd_conta_cred%type;
	cd_conta_deb_w			pls_conta.cd_conta_deb%type;
	cd_conta_glosa_cred_w		pls_conta.cd_conta_glosa_cred%type;
	cd_conta_glosa_deb_w		pls_conta.cd_conta_glosa_deb%type;
	cd_conta_cred_tx_inter_w	pls_conta_proc.cd_conta_cred_tx_inter%type;
	cd_conta_deb_tx_inter_w		pls_conta_proc.cd_conta_deb_tx_inter%type;
	cd_conta_cred_tx_inter_glosa_w	pls_conta_proc.cd_conta_cred_tx_inter_glosa%type;
	cd_conta_deb_tx_inter_glosa_w	pls_conta_proc.cd_conta_deb_tx_inter_glosa%type;
	cd_historico_w			pls_conta_proc.cd_historico%type;
	cd_historico_glosa_w		pls_conta_proc.cd_historico_glosa%type;
	cd_historico_tx_inter_w		pls_conta_proc.cd_historico_tx_inter%type;
	cd_historico_tx_inter_glosa_w	pls_conta_proc.cd_historico_tx_inter_glosa%type;
	ie_regulamentacao_w		pls_plano.ie_regulamentacao%type;
	nr_seq_agrupamento_w		pls_conta.nr_sequencia%type;
	nr_titulo_pagar_ndc_w		ptu_fatura.nr_titulo_ndc%type;
	cd_centro_custo_w		w_movimento_contabil.cd_centro_custo%type;
	nr_fatura_w			ptu_fatura.nr_fatura%type;
	nr_nota_credito_debito_w	ptu_fatura.nr_nota_credito_debito%type;
	nr_seq_regra_cc_w		pls_regra_centro_custo.nr_sequencia%type;
	nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
	ds_conteudo_w			varchar(4000);
	ds_compl_historico_w		varchar(255);
	nm_agrupador_w			varchar(255);
	ds_pessoa_titulo_w		varchar(255);
	qt_atrib_hist_pad_w		integer;

	
BEGIN
	begin
	select  nr_seq_item,
		nr_seq_conta,
		nr_seq_segurado,
		nr_seq_protocolo,
		nr_seq_fatura,
		nr_seq_plano
	into STRICT    nr_seq_item_w,
		nr_seq_conta_w,
		nr_seq_segurado_w,
		nr_seq_protocolo_w,
		nr_seq_fatura_w,
		nr_seq_plano_w
	from (SELECT	c.nr_sequencia nr_seq_item,
				b.nr_sequencia nr_seq_conta,
				b.nr_seq_segurado nr_seq_segurado,
				b.nr_seq_protocolo nr_seq_protocolo,
				b.nr_seq_fatura nr_seq_fatura,
				b.nr_seq_plano nr_seq_plano
			from	pls_protocolo_conta	a,
				pls_conta		b,
				pls_conta_proc		c
			where	a.nr_sequencia		= b.nr_seq_protocolo
			and	b.nr_sequencia		= c.nr_seq_conta
			and     doc_p.nm_tabela		= 'PLS_CONTA_PROC'
			and     a.nr_sequencia		= doc_p.nr_documento
			and     b.nr_sequencia		= doc_p.nr_seq_doc_compl
			and     c.nr_sequencia		= doc_p.nr_doc_analitico
			
union all

			SELECT	c.nr_sequencia nr_seq_item,
				b.nr_sequencia nr_seq_conta,
				b.nr_seq_segurado nr_seq_segurado,
				b.nr_seq_protocolo nr_seq_protocolo,
				b.nr_seq_fatura nr_seq_fatura,
				b.nr_seq_plano nr_seq_plano
			from	pls_protocolo_conta	a,
				pls_conta		    b,
				pls_conta_mat		c
			where	a.nr_sequencia		= b.nr_seq_protocolo
			and	b.nr_sequencia		= c.nr_seq_conta
			and     doc_p.nm_tabela		= 'PLS_CONTA_MAT'
			and     a.nr_sequencia		= doc_p.nr_documento
			and     b.nr_sequencia		= doc_p.nr_seq_doc_compl
			and     c.nr_sequencia		= doc_p.nr_doc_analitico) alias0;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	/* Obtem as contas contabeis */

	begin
	if (doc_p.nm_tabela = 'PLS_CONTA_PROC') then
		select  coalesce(cd_conta_cred, 'X'),
			coalesce(cd_conta_deb, 'X'),
			coalesce(cd_conta_glosa_cred, 'X'),
			coalesce(cd_conta_glosa_deb, 'X'),
			coalesce(cd_conta_cred_tx_inter, 'X'),
			coalesce(cd_conta_deb_tx_inter, 'X'),
			coalesce(cd_conta_cred_tx_inter_glosa, 'X'),
			coalesce(cd_conta_deb_tx_inter_glosa, 'X'),
			coalesce(cd_historico, 0),
			coalesce(cd_historico_glosa, 0),
			coalesce(cd_historico_tx_inter, 0),
			coalesce(cd_historico_tx_inter_glosa, 0)
		into STRICT    cd_conta_cred_w,
			cd_conta_deb_w,
			cd_conta_glosa_cred_w,
			cd_conta_glosa_deb_w,
			cd_conta_cred_tx_inter_w,
			cd_conta_deb_tx_inter_w,
			cd_conta_cred_tx_inter_glosa_w,
			cd_conta_deb_tx_inter_glosa_w,
			cd_historico_w,
			cd_historico_glosa_w,
			cd_historico_tx_inter_w,
			cd_historico_tx_inter_glosa_w
		from    pls_conta_proc
		where   nr_sequencia = doc_p.nr_doc_analitico;
	elsif (doc_p.nm_tabela = 'PLS_CONTA_MAT') then
		select  coalesce(cd_conta_cred, 'X'),
			coalesce(cd_conta_deb, 'X'),
			coalesce(cd_conta_glosa_cred, 'X'),
			coalesce(cd_conta_glosa_deb, 'X'),
			coalesce(cd_conta_cred_tx_inter, 'X'),
			coalesce(cd_conta_deb_tx_inter, 'X'),
			coalesce(cd_conta_cred_tx_inter_glosa, 'X'),
			coalesce(cd_conta_deb_tx_inter_glosa, 'X'),
			coalesce(cd_historico, 0),
			coalesce(cd_historico_glosa, 0),
			coalesce(cd_historico_tx_inter, 0),
			coalesce(cd_historico_tx_inter_glosa, 0)
		into STRICT    cd_conta_cred_w,
			cd_conta_deb_w,
			cd_conta_glosa_cred_w,
			cd_conta_glosa_deb_w,
			cd_conta_cred_tx_inter_w,
			cd_conta_deb_tx_inter_w,
			cd_conta_cred_tx_inter_glosa_w,
			cd_conta_deb_tx_inter_glosa_w,
			cd_historico_w,
			cd_historico_glosa_w,
			cd_historico_tx_inter_w,
			cd_historico_tx_inter_glosa_w
		from    pls_conta_mat
		where   nr_sequencia = doc_p.nr_doc_analitico;
	end if;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;
		
	/* Se nao houver informacoes de contas contabeis ou de historico, nao segue o processo */

	if  	(((cd_conta_cred_w = 'X' or cd_conta_deb_w = 'X' or cd_historico_w = 0) and (doc_p.nm_atributo in ('VL_SOMA_PROC', 'VL_SOMA_MAT', 'VL_NAO_AVIS_PROC', 'VL_NAO_AVIS_MAT')))
	or  	((cd_conta_glosa_cred_w = 'X' or cd_conta_glosa_deb_w = 'X' or cd_historico_glosa_w = 0) AND doc_p.nm_atributo = 'VL_GLOSA')
	or  	((cd_conta_cred_tx_inter_w = 'X' or cd_conta_deb_tx_inter_w = 'X' or cd_historico_tx_inter_w = 0) and (doc_p.nm_atributo in ('VL_SOMA_PROC_MENOR', 'VL_SOMA_MAT_MENOR')))
	or  	((cd_conta_cred_tx_inter_glosa_w = 'X' or cd_conta_deb_tx_inter_glosa_w = 'X' or cd_historico_tx_inter_glosa_w = 0) and (doc_p.nm_atributo in ('VL_SOMA_PROC_MAIOR', 'VL_SOMA_MAT_MAIOR')))) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas*/

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	if (doc_p.nm_atributo = 'VL_GLOSA') then
		vet_contas_contabeis_w(1)       := cd_conta_glosa_cred_w;
		vet_contas_contabeis_w(2)       := cd_conta_glosa_deb_w;
		dados_contab_w.cd_historico     := cd_historico_glosa_w;
	elsif (doc_p.nm_atributo in ('VL_SOMA_PROC', 'VL_SOMA_MAT', 'VL_NAO_AVIS_PROC', 'VL_NAO_AVIS_MAT')) then
		vet_contas_contabeis_w(1)       := cd_conta_cred_w;
		vet_contas_contabeis_w(2)       := cd_conta_deb_w;
		dados_contab_w.cd_historico     := cd_historico_w;
	elsif (doc_p.nm_atributo in ('VL_SOMA_PROC_MENOR', 'VL_SOMA_MAT_MENOR')) then
		vet_contas_contabeis_w(1)       := cd_conta_cred_tx_inter_w;
		vet_contas_contabeis_w(2)       := cd_conta_deb_tx_inter_w;
		dados_contab_w.cd_historico     := cd_historico_tx_inter_w;
	elsif (doc_p.nm_atributo in ('VL_SOMA_PROC_MAIOR', 'VL_SOMA_MAT_MAIOR')) then
		vet_contas_contabeis_w(1)       := cd_conta_cred_tx_inter_glosa_w;
		vet_contas_contabeis_w(2)       := cd_conta_deb_tx_inter_glosa_w;
		dados_contab_w.cd_historico     := cd_historico_tx_inter_glosa_w;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/*  Obtem o nr_titulo, que podera ser usado no agrupamento/complemento historico */

	select  max(nr_titulo)
	into STRICT    nr_titulo_pagar_w
	from    ptu_fatura
	where   nr_sequencia = nr_seq_fatura_w;

	/* Numero de agrupamento */

	nm_agrupador_w	:= coalesce(trim(both obter_agrupador_contabil(doc_p.cd_tipo_lote_contabil)),'NR_SEQ_CONTA');
	if (nm_agrupador_w = 'NR_SEQ_CONTA') then
		nr_seq_agrupamento_w	:= nr_seq_conta_w;
	elsif (nm_agrupador_w = 'NR_TITULO_PAGAR_FATURA') then
		nr_seq_agrupamento_w	:= nr_titulo_pagar_w;
	else
		nr_seq_agrupamento_w	:= null;
	end if;
	if (coalesce(nr_seq_agrupamento_w,0) = 0) then
		nr_seq_agrupamento_w	:= nr_seq_conta_w;
	end if;

	dados_contab_w.nr_seq_agrupamento := nr_seq_agrupamento_w;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		/*    Obtem nr_titulo_ndc, nr_fatura e nr_nota_credito_debito para o complemento historico*/

		select	max(nr_titulo_ndc),
			max(nr_fatura),
			max(nr_nota_credito_debito)
		into STRICT	nr_titulo_pagar_ndc_w,
			nr_fatura_w,
			nr_nota_credito_debito_w
		from	ptu_fatura
		where	nr_sequencia	= nr_seq_fatura_w;

		ds_pessoa_titulo_w	:= obter_pessoa_titulo_pagar(nr_titulo_pagar_w);
		/* Montagem do complemento historico */

		ds_conteudo_w	:= substr(	nr_seq_fatura_w			|| '#@' ||
						nr_titulo_pagar_w		|| '#@' ||
						ds_pessoa_titulo_w		|| '#@' ||
						nr_fatura_w			|| '#@' ||
						nr_nota_credito_debito_w	|| '#@' ||
						nr_titulo_pagar_ndc_w,1,4000);

		begin
		ds_compl_historico_w	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, dados_contab_w.cd_historico, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_w	:= null;
		end;
		dados_contab_w.ds_compl_historico	:= substr(ds_compl_historico_w,1,255);

	end if;
	/* Obtem o ie_regulamentacao, que sera utilizado no centro de custo */

	if (coalesce(nr_seq_plano_w::text, '') = '') then
		begin
		select	b.ie_regulamentacao,
			b.nr_sequencia
		into STRICT	ie_regulamentacao_w,
			nr_seq_plano_w
		from	pls_segurado a,
			pls_plano b
		where	b.nr_sequencia	= a.nr_seq_plano
		and	a.nr_sequencia	= nr_seq_segurado_w;
		exception
		when others then
			ie_regulamentacao_w := null;
			nr_seq_plano_w	:= null;
		end;
	else
		begin
		select	b.ie_regulamentacao
		into STRICT	ie_regulamentacao_w
		from	pls_plano b
		where	b.nr_sequencia	= nr_seq_plano_w;
		exception
		when others then
			ie_regulamentacao_w	:= null;
		end;
	end if;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', nr_seq_plano_w, doc_p.cd_estabelecimento, '', '', ie_regulamentacao_w, nr_seq_segurado_w, '', cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
		dados_contab_w.cd_centro_custo := cd_centro_custo_w;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;


	/* Verifica se o movimento foi contabilizado em algum lote contabil, para realizar o update nos campos de lote contabil*/

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
		if (coalesce(doc_p.ds_origem, 'X') = 'ESTORNO') then
			nr_lote_contabil_w := 0;

			update  pls_protocolo_conta a
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_documento
			and     not exists (   SELECT  1
							from    pls_conta b,
								pls_conta_proc c
							where   c.nr_seq_conta      = b.nr_sequencia
							and     b.nr_seq_protocolo  = a.nr_sequencia
							and     coalesce(c.nr_lote_contabil, 0) <> 0
							and     c.nr_sequencia <> doc_p.nr_doc_analitico
							
union

							SELECT  1
							from    pls_conta b,
								pls_conta_mat c
							where   c.nr_seq_conta      = b.nr_sequencia
							and     b.nr_seq_protocolo  = a.nr_sequencia
							and     coalesce(c.nr_lote_contabil, 0) <> 0
							and     c.nr_sequencia <> doc_p.nr_doc_analitico);
		else
			nr_lote_contabil_w := doc_p.nr_lote_contabil;

			update  pls_protocolo_conta a
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_documento;
		end if;

		if (doc_p.nm_tabela = 'PLS_CONTA_PROC') then
			update  pls_conta_proc
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_doc_analitico;
		elsif (doc_p.nm_tabela = 'PLS_CONTA_MAT') then
			update  pls_conta_mat
			set     nr_lote_contabil    = nr_lote_contabil_w
			where   nr_sequencia        = doc_p.nr_doc_analitico;
		end if;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_desp_intercambio ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
