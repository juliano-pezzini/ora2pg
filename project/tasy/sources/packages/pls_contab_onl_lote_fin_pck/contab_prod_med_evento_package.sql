-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_evento ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w				dados_contab;
	vet_contas_contabeis_w                  vet_contas_contabeis;
	nr_seq_evento_mvto_w                    pls_evento_movimento.nr_sequencia%type;
	cd_conta_cred_w                         pls_conta.cd_conta_cred%type;
	cd_conta_deb_w                          pls_conta.cd_conta_deb%type;
	cd_historico_w                          pls_conta_proc.cd_historico%type;
	nr_seq_prestador_w                      pls_evento_movimento.nr_seq_prestador%type;
	nr_seq_evento_w                         pls_evento_movimento.nr_seq_evento%type;
	nr_seq_lote_pgto_apropr_w               pls_lote_evento.nr_seq_lote_pgto_apropr%type;
	cd_centro_custo_ww                      conta_contabil.cd_centro_custo%type;
	cd_centro_custo_w                       conta_contabil.cd_centro_custo%type;
	nr_seq_lote_w                           pls_lote_pagamento.nr_sequencia%type;
	ds_evento_w                             pls_evento.ds_evento%type;
	cd_pessoa_fisica_w                      pls_prestador.cd_pessoa_fisica%type;
	cd_cgc_prestador_w                      pls_prestador.cd_cgc%type;
	cd_cpf_prestador_w                      pessoa_fisica.nr_cpf%type;
	nr_titulo_pagar_w                       pls_pag_prest_vencimento.nr_titulo%type;
	nr_titulo_receber_w                     pls_pag_prest_vencimento.nr_titulo_receber%type;
	ie_centro_custo_w                       conta_contabil.ie_centro_custo%type;
	cd_centro_custo_fixo_w                  conta_contabil.cd_centro_custo%type;
	nr_seq_regra_cc_w                       pls_regra_centro_custo.nr_sequencia%type;
	ds_compl_historico_w                    varchar(255);
	nm_prestador_w                          varchar(255);
	ds_conteudo_w                           varchar(4000);
	ds_compl_historico_ww                   varchar(4000);
	qt_atrib_hist_pad_w                     integer;

	
BEGIN

	/* Se nao for correspondente ao atributo/tabela deste select, nao desperdica recursos tentando realizar o mesmo */

	if (doc_p.nm_atributo not in ('VL_MOVIMENTO', 'VL_ITEM') or doc_p.nm_tabela not in ('PLS_EVENTO_MOVIMENTO', 'PLS_PP_ITEM_LOTE')) then
		return;
	end if;
	begin
	select  nr_sequencia,
		cd_conta_credito,
		cd_conta_debito,
		cd_historico,
		nr_seq_prestador,
		nr_seq_evento,
		nr_seq_lote_pgto_apropr,
		cd_centro_custo,
		nr_seq_lote
	into STRICT    nr_seq_evento_mvto_w,
		cd_conta_cred_w,
		cd_conta_deb_w,
		cd_historico_w,
		nr_seq_prestador_w,
		nr_seq_evento_w,
		nr_seq_lote_pgto_apropr_w,
		cd_centro_custo_ww,
		nr_seq_lote_w
	from (  SELECT	a.nr_sequencia,
			a.cd_conta_credito,
			a.cd_conta_debito,
			a.cd_historico,
			a.nr_seq_prestador,
			a.nr_seq_evento,
			b.nr_seq_lote_pgto_apropr,
			a.cd_centro_custo,
			c.nr_sequencia nr_seq_lote
			from	pls_evento_movimento	a,
				pls_lote_evento		    b,
				pls_lote_pagamento 	    c,
				pls_periodo_pagamento  	x
			where	b.nr_sequencia		    = a.nr_seq_lote
			and	c.nr_sequencia		    = a.nr_seq_lote_pgto
			and	c.nr_seq_periodo	    = x.nr_sequencia
			and     doc_p.nr_documento      = c.nr_sequencia
			and     doc_p.nr_seq_doc_compl  = b.nr_sequencia
			and     doc_p.nr_doc_analitico  = a.nr_sequencia
			and     doc_p.nm_tabela         = 'PLS_EVENTO_MOVIMENTO'
			and     doc_p.nm_atributo       = 'VL_MOVIMENTO'
			
union all

			SELECT	a.nr_sequencia,
				a.cd_conta_credito,
				a.cd_conta_debito,
				a.cd_historico,
				a.nr_seq_prestador,
				a.nr_seq_evento,
				b.nr_seq_lote_pgto_apropr,
				a.cd_centro_custo,
				c.nr_sequencia nr_seq_lote
			from	pls_evento_movimento	a,
				pls_lote_evento		    b,
				pls_lote_pagamento 	    c,
				pls_periodo_pagamento  	x
			where	b.nr_sequencia		    = a.nr_seq_lote
			and	c.nr_sequencia		    = b.nr_seq_pgto_desc_liq
			and	c.nr_seq_periodo	    = x.nr_sequencia
			and     doc_p.nr_documento      = c.nr_sequencia
			and     doc_p.nr_seq_doc_compl  = b.nr_sequencia
			and     doc_p.nr_doc_analitico  = a.nr_sequencia
			and     doc_p.nm_tabela         = 'PLS_EVENTO_MOVIMENTO'
			and     doc_p.nm_atributo       = 'VL_MOVIMENTO'
			
union all

			select	a.nr_sequencia,
				a.cd_conta_credito,
				a.cd_conta_debito,
				a.cd_historico,
				a.nr_seq_prestador,
				a.nr_seq_evento,
				b.nr_seq_lote_pgto_apropr,
				a.cd_centro_custo,
				c.nr_sequencia nr_seq_lote
			from	pls_evento_movimento	a,
				pls_lote_evento		    b,
				pls_lote_pagamento 	    c,
				pls_periodo_pagamento  	x
			where	b.nr_sequencia		    = a.nr_seq_lote
			and	c.nr_sequencia		    = b.nr_seq_lote_pgto_apropr
			and	c.nr_seq_periodo	    = x.nr_sequencia
			and     doc_p.nr_documento      = c.nr_sequencia
			and     doc_p.nr_seq_doc_compl  = b.nr_sequencia
			and     doc_p.nr_doc_analitico  = a.nr_sequencia
			and     doc_p.nm_tabela         = 'PLS_EVENTO_MOVIMENTO'
			and     doc_p.nm_atributo       = 'VL_MOVIMENTO'
			
union all

			select	a.nr_sequencia,
				a.cd_conta_credito,
				a.cd_conta_debito,
				a.cd_historico,
				a.nr_seq_prestador,
				a.nr_seq_evento,
				b.nr_seq_lote_pgto_apropr,
				a.cd_centro_custo,
				a.nr_seq_lote_pgto
			from	pls_evento_movimento	a,
				pls_lote_evento		    b
			where	b.nr_sequencia		    = a.nr_seq_lote
			and     doc_p.nr_documento      = b.nr_seq_lote_ret_trib
			and     doc_p.nr_seq_doc_compl  = b.nr_sequencia
			and     doc_p.nr_doc_analitico  = a.nr_sequencia
			and     doc_p.nm_tabela         = 'PLS_EVENTO_MOVIMENTO'
			and     doc_p.nm_atributo       = 'VL_MOVIMENTO'
			
union all

			select	a.nr_sequencia,
				a.cd_conta_credito,
				a.cd_conta_debito,
				a.cd_historico,
				a.nr_seq_prestador,
				a.nr_seq_evento,
				b.nr_seq_lote_pgto_apropr,
				a.cd_centro_custo,
				b.nr_sequencia nr_seq_lote
			from	pls_evento_movimento	a,
				pls_lote_evento		    b
			where	b.nr_sequencia		    = a.nr_seq_lote
			and     doc_p.nr_documento      = b.nr_sequencia
			and     doc_p.nr_seq_doc_compl  = a.nr_sequencia
			and     doc_p.nr_doc_analitico  = b.nr_seq_lote_ret_trib
			and     doc_p.nm_tabela         = 'PLS_EVENTO_MOVIMENTO'
			and     doc_p.nm_atributo       = 'VL_MOVIMENTO'
			
union all

			select	i.nr_sequencia,
				i.cd_conta_credito,
				i.cd_conta_debito,
				i.cd_historico,
				p.nr_sequencia nr_seq_prestador,
				e.nr_sequencia nr_seq_evento,
				null,
				coalesce(i.cd_centro_custo,z.cd_centro_custo) cd_centro_custo,
				l.nr_sequencia nr_seq_lote
			FROM pls_prestador p, pls_pp_lote l, pls_evento e, pls_pp_item_lote i
LEFT OUTER JOIN pls_pp_lanc_programado z ON (i.nr_seq_lanc_prog = z.nr_sequencia)
WHERE l.nr_sequencia		    = i.nr_seq_lote and p.nr_sequencia		    = i.nr_seq_prestador and e.nr_sequencia		    = i.nr_seq_evento  and doc_p.nr_documento      = l.nr_sequencia and doc_p.nr_seq_doc_compl  = e.nr_sequencia and doc_p.nr_doc_analitico  = i.nr_sequencia and doc_p.nm_tabela         = 'PLS_PP_ITEM_LOTE' and doc_p.nm_atributo       = 'VL_ITEM' ) alias1;
			exception when no_data_found then
			/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

			select 	obter_desc_expressao(950251)
			into STRICT	doc_p.ds_inconsistencia
			;
			return;
			end;

	if (coalesce(cd_conta_cred_w, 'X') = 'X' or coalesce(cd_conta_deb_w, 'X') = 'X' or coalesce(cd_historico_w, 0) = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Informacoes de agrupamento */

	dados_contab_w.nr_seq_agrupamento	:= nr_seq_lote_w;

	/* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;
	if (qt_atrib_hist_pad_w > 0) then
		/* Obtem o ds_evento, utilizado no complemento historico */

		select	max(ds_evento)
		into STRICT	ds_evento_w
		from	pls_evento
		where	nr_sequencia	= nr_seq_evento_w;

		/* Obtem as informacoes do prestador, utilizadas no complemento historico*/

		if (coalesce(nr_seq_prestador_w,0) > 0) then
			select	a.cd_pessoa_fisica,
				a.cd_cgc
			into STRICT	cd_pessoa_fisica_w,
				cd_cgc_prestador_w
			from	pls_prestador a
			where	a.nr_sequencia	= nr_seq_prestador_w;
			
			begin
			nm_prestador_w	:= substr(obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_prestador_w),1,255);
			exception
			when others then
				nm_prestador_w	:= null;
			end;
			
			select	max(nr_cpf)
			into STRICT	cd_cpf_prestador_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		end if;

		/* Obtem informacoes dos titulos a pagar e receber, utilizadas no complemento historico */

		if (coalesce(nr_seq_lote_pgto_apropr_w,0) = 0) then
						
			select	max(v.nr_titulo),
				max(v.nr_titulo_receber)
			into STRICT	nr_titulo_pagar_w,
				nr_titulo_receber_w
			from	pls_evento_movimento 		a,
				pls_pagamento_prestador		p,
				pls_pag_prest_vencimento	v,
				pls_lote_pagamento		l
			where	a.nr_seq_prestador 	= p.nr_seq_prestador
			and	a.nr_seq_lote_pgto 	= l.nr_sequencia
			and	l.nr_sequencia		= p.nr_seq_lote
			and	p.nr_sequencia		= v.nr_seq_pag_prestador
			and	a.nr_sequencia		= nr_seq_evento_mvto_w;
		
		else				
			select	max(v.nr_titulo),
				max(v.nr_titulo_receber)
			into STRICT	nr_titulo_pagar_w,
				nr_titulo_receber_w
			from	pls_evento_movimento		a,
				pls_pagamento_prestador		p,
				pls_pag_prest_vencimento	v,
				pls_lote_pagamento 		l,
				pls_lote_evento			b
			where	a.nr_seq_prestador 	= p.nr_seq_prestador
			and	b.nr_sequencia		= a.nr_seq_lote
			and	l.nr_sequencia		= b.nr_seq_lote_pgto_apropr
			and	l.nr_sequencia		= p.nr_seq_lote
			and	p.nr_sequencia		= v.nr_seq_pag_prestador
			and	a.nr_sequencia		= nr_seq_evento_mvto_w;
		end if;

		ds_conteudo_w	:= substr(	nr_seq_prestador_w		|| '#@' ||
						nm_prestador_w 			|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						cd_cgc_prestador_w	        || '#@' ||
						cd_cpf_prestador_w	        || '#@' ||
						null				|| '#@' ||
						nr_seq_lote_w			|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						nr_titulo_pagar_w	        || '#@' ||
						nr_titulo_receber_w	        || '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						nr_seq_evento_w			|| '#@' ||
						ds_evento_w			|| '#@' ||
						null				|| '#@' ||
						nr_seq_lote_pgto_apropr_w,1,4000);

		begin
			ds_compl_historico_ww	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil,    cd_historico_w, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_ww	:= null;
		end;
		
		ds_compl_historico_w	:= substr(ds_compl_historico_ww,1,255);
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas */

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1) := cd_conta_cred_w;
	vet_contas_contabeis_w(2) := cd_conta_deb_w;
	dados_contab_w.cd_historico := cd_historico_w;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Nesse lote especifico foi reutilizado o codigo do verifica_centro_custo, devido a variavel cd_centro_custo_ww, situacao unica deste lote*/

		select	max(ie_centro_custo),
			max(cd_centro_custo)
		into STRICT	ie_centro_custo_w,
			cd_centro_custo_fixo_w
		from	conta_contabil
		where	cd_conta_contabil	= vet_contas_contabeis_w(i);

		if (ie_centro_custo_w = 'S') then
			if (cd_centro_custo_fixo_w IS NOT NULL AND cd_centro_custo_fixo_w::text <> '') then
				dados_contab_w.cd_centro_custo	:= cd_centro_custo_fixo_w;
				if (cd_centro_custo_ww IS NOT NULL AND cd_centro_custo_ww::text <> '') then
					dados_contab_w.cd_centro_custo	:= cd_centro_custo_ww;
				end if;
			else
				/* Centro de custo */

				SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', '', doc_p.cd_estabelecimento, '', '', '', '', null, cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
				dados_contab_w.cd_centro_custo := cd_centro_custo_w;
			end if;
		end if;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	if (coalesce(doc_p.nr_lote_contabil, 0) <> 0) then
			if (doc_p.ds_origem = 'ESTORNO') then
				if (doc_p.nm_tabela = 'PLS_PP_ITEM_LOTE') then
					update  pls_pp_item_lote a
					set     nr_lote_contabil    = 0
					where   a.nr_sequencia      = doc_p.nr_doc_analitico;
				else
					update	pls_evento_movimento	a
					set	a.nr_lote_contabil	= 0
					where	nr_sequencia		= doc_p.nr_doc_analitico;
				end if;
				update	pls_lote_pagamento	a
				set	a.nr_lote_contabil	= 0
				where	nr_sequencia		= ( SELECT  max(nr_seq_lote_pgto)
				                                from    pls_evento_movimento b
				                                where   b.nr_sequencia  = doc_p.nr_doc_analitico)
				and     not exists ( select  max(nr_seq_lote_pgto)
				                                from    pls_evento_movimento b
				                                where   b.nr_sequencia  = doc_p.nr_doc_analitico
				                                and     b.nr_lote_contabil = doc_p.nr_lote_contabil);
			else

				if (doc_p.nm_tabela = 'PLS_PP_ITEM_LOTE') then
					update  pls_pp_item_lote a
					set     nr_lote_contabil    = doc_p.nr_lote_contabil
					where   a.nr_sequencia      = doc_p.nr_doc_analitico;
				else
					update	pls_evento_movimento	a
					set	a.nr_lote_contabil	= doc_p.nr_lote_contabil
					where	nr_sequencia		= doc_p.nr_doc_analitico;

					update	pls_lote_pagamento	a
					set	a.nr_lote_contabil	= doc_p.nr_lote_contabil
					where	nr_sequencia		= ( 	SELECT  max(nr_seq_lote_pgto)
										from    pls_evento_movimento b
										where   b.nr_sequencia  = doc_p.nr_doc_analitico);
				end if;
		 end if;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_evento ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
