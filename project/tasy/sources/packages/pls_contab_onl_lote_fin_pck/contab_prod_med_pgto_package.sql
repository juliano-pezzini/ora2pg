-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_pgto ( doc_p INOUT ctb_documento, nm_usuario_p text) AS $body$
DECLARE


	dados_contab_w			    dados_contab;
	vet_contas_contabeis_w              vet_contas_contabeis;
	nr_seq_lote_w                       pls_lote_pagamento.nr_sequencia%type;
	nr_seq_conta_w                      pls_conta.nr_sequencia%type;
	nr_seq_agrupamento_w                pls_lote_pagamento.nr_sequencia%type;
	cd_conta_cred_w                     pls_conta.cd_conta_cred%type;
	cd_conta_deb_w                      pls_conta.cd_conta_deb%type;
	cd_conta_cred_ww                    pls_conta.cd_conta_cred%type;
	cd_conta_deb_ww                     pls_conta.cd_conta_deb%type;
	cd_conta_ajuste_deb_w               pls_conta.cd_conta_deb%type;
	cd_conta_ajuste_cred_w              pls_conta.cd_conta_cred%type;
	cd_conta_glosa_deb_w                pls_conta.cd_conta_deb%type;
	cd_conta_glosa_cred_w               pls_conta.cd_conta_cred%type;
	cd_historico_ajuste_w               pls_conta_proc.cd_historico%type;
	cd_historico_ajuste_ww	            pls_conta_medica_resumo.cd_historico_vl_ajuste%type;
	cd_historico_glosa_w                pls_conta_proc.cd_historico%type;
	cd_historico_w                      pls_conta_proc.cd_historico%type;
	cd_historico_ww                     pls_conta_proc.cd_historico%type;
	nr_seq_plano_w                      pls_plano.nr_sequencia%type;
	ie_regulamentacao_w                 pls_plano.ie_regulamentacao%type;
	nr_seq_prestador_w                  pls_prestador.nr_sequencia%type;
	nr_seq_protocolo_w                  pls_protocolo_conta.nr_sequencia%type;
	cd_pessoa_fisica_w                  pls_prestador.cd_pessoa_fisica%type;
	cd_cgc_prestador_w                  pls_prestador.cd_cgc%type;
	cd_cpf_prestador_w                  pessoa_fisica.nr_cpf%type;
	cd_cgc_prestador_pag_w              pls_prestador.cd_cgc%type;
	cd_cpf_prestador_pag_w              pessoa_fisica.nr_cpf%type;
	nr_titulo_pagar_w                   titulo_pagar.nr_titulo%type;
	nr_titulo_receber_w                 titulo_receber.nr_titulo%type;
	nr_seq_pp_lote_w                    pls_pp_lote.nr_sequencia%type;
	nr_seq_regra_cc_w                   pls_regra_centro_custo.nr_sequencia%type;
	cd_centro_custo_w                   w_movimento_contabil.cd_centro_custo%type;
	nr_seq_prot_conta_w                 pls_protocolo_conta.nr_sequencia%type;
	nr_seq_item_w                       pls_conta_proc.nr_sequencia%type;
	nr_seq_segurado_w                   pls_segurado.nr_sequencia%type;
	dt_mes_competencia_w                pls_lote_pagamento.dt_mes_competencia%type;
	nr_nota_fiscal_mat_w                pls_prot_conta_titulo.nr_nota_fiscal%type;
	nr_nota_fiscal_w                    pls_prot_conta_titulo.nr_nota_fiscal%type;
	nr_seq_conta_resumo_w               pls_conta_medica_resumo.nr_sequencia%type;
	nr_seq_prestador_pgto_w             pls_conta_medica_resumo.nr_seq_prestador_pgto%type;
	nm_prestador_pgto_w                 pls_conta_medica_resumo.nm_prestador_pgto%type;
	ie_proc_mat_w                       varchar(1);
	ie_pagamento_novo_w                 varchar(1);
	cd_cgc_cpf_prest_pagto_w            varchar(14);
	nm_agrupador_w                      varchar(30);
	nm_prestador_w                      varchar(255);
	ds_compl_historico_w                varchar(255);
	ds_conteudo_w                       varchar(4000);
	ds_compl_historico_ww               varchar(4000);
	qt_prest_pgto_w                     bigint;
	qt_atrib_hist_pad_w                 integer;

	
BEGIN

	/* Se nao for correspondente ao atributo/tabela deste select, nao desperdica recursos tentando realizar o mesmo */

	if (doc_p.nm_atributo not in ('VL_LIBERADO', 'VL_GLOSA', 'VL_TX_INTERCAMBIO', 'VL_TX_INTERCAMBIO_GLOSA', 'VL_AJUSTE')) then
		return;
	end if;

	begin
	select  ie_proc_mat,
		nr_seq_item,
		cd_conta_contabil_deb,
		cd_conta_ajuste_deb,
		cd_conta_contabil_cred,
		cd_conta_ajuste_cred,
		cd_historico,
		nr_seq_conta,
		nr_seq_segurado,
		nr_seq_prot_conta,
		nr_seq_lote,
		nr_seq_pp_lote,
		dt_mes_competencia,
		cd_conta_glosa_deb,
		cd_conta_glosa_cred,
		cd_historico_glosa,
		cd_historico_vl_ajuste,
		nr_nota_fiscal,
		nr_seq_conta_resumo,
		nr_seq_plano,
		nr_seq_prestador_pgto,
		nm_prestador_pgto
	into STRICT    ie_proc_mat_w,
		nr_seq_item_w,
		cd_conta_deb_ww,
		cd_conta_ajuste_deb_w,
		cd_conta_cred_ww,
		cd_conta_ajuste_cred_w,
		cd_historico_ww,
		nr_seq_conta_w,
		nr_seq_segurado_w,
		nr_seq_prot_conta_w,
		nr_seq_lote_w,
		nr_seq_pp_lote_w,
		dt_mes_competencia_w,
		cd_conta_glosa_deb_w,
		cd_conta_glosa_cred_w,
		cd_historico_glosa_w,
		cd_historico_ajuste_w,
		nr_nota_fiscal_mat_w,
		nr_seq_conta_resumo_w,
		nr_seq_plano_w,
		nr_seq_prestador_pgto_w,
		nm_prestador_pgto_w
	from (SELECT	'P' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			a.nr_sequencia nr_seq_lote,
			null nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			null nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_periodo_pagamento x, pls_conta_proc c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_proc and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto and a.nr_seq_periodo	= x.nr_sequencia  and doc_p.nr_documento      = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia
		
union

		SELECT	'M' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,	
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			a.nr_sequencia nr_seq_lote,
			null nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			c.nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_periodo_pagamento x, pls_conta_mat c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_mat and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto and a.nr_seq_periodo	= x.nr_sequencia  and doc_p.nr_documento  = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia
		 
union

		select	'P' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,		
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			a.nr_sequencia nr_seq_lote,
			null nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			null nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_pagamento_prestador x, pls_conta_proc c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_proc and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto  and x.nr_seq_prestador	= d.nr_seq_prestador_pgto and x.nr_seq_lote		= d.nr_seq_lote_pgto and doc_p.nr_documento  = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia
		 
union

		select	'M' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,		
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,		
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			a.nr_sequencia nr_seq_lote,
			null nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa_deb, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			c.nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_pagamento_prestador x, pls_conta_mat c, pls_conta b, pls_lote_pagamento a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_mat and c.nr_seq_conta		= d.nr_seq_conta and b.nr_sequencia		= c.nr_seq_conta and a.nr_sequencia		= d.nr_seq_lote_pgto  and x.nr_seq_prestador	= d.nr_seq_prestador_pgto and x.nr_seq_lote		= d.nr_seq_lote_pgto and doc_p.nr_documento  = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia
		 
union

		select	'P' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,	
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			null nr_seq_lote,
			a.nr_sequencia nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			null nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_pp_item_lote i, pls_conta_proc c, pls_conta b, pls_pp_lote a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_proc and b.nr_sequencia		= c.nr_seq_conta and b.nr_sequencia		= d.nr_seq_conta and d.nr_sequencia		= i.nr_seq_resumo and b.nr_sequencia		= i.nr_seq_conta and a.nr_sequencia		= i.nr_seq_lote  and doc_p.nr_documento  = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia
		 
union

		select	'M' ie_proc_mat,
			c.nr_sequencia nr_seq_item,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_deb  ELSE d.cd_conta_deb END  cd_conta_contabil_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_deb  ELSE d.cd_conta_prov_deb END  cd_conta_ajuste_deb,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_cred  ELSE d.cd_conta_cred END  cd_conta_contabil_cred,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_conta_provisao_cred  ELSE d.cd_conta_prov_cred END  cd_conta_ajuste_cred,	
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico  ELSE d.cd_historico END  cd_historico,
			b.nr_sequencia nr_seq_conta,
			b.nr_seq_segurado,
			b.nr_seq_prot_conta,
			null nr_seq_lote,
			a.nr_sequencia nr_seq_pp_lote,
			a.dt_mes_competencia,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_deb  ELSE d.cd_conta_glosa_deb END  cd_conta_glosa, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN 				c.cd_conta_glosa_cred  ELSE d.cd_conta_glosa_cred END  cd_conta_glosa_cred, /* Se nao for esquema contabil, tem que inverter debito e credito */
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN c.cd_historico_glosa  ELSE d.cd_historico_glosa END  cd_historico_glosa,
			CASE WHEN coalesce(d.nr_seq_esquema,0)=0 THEN  c.cd_historico_ajuste  ELSE d.cd_historico_vl_ajuste END  cd_historico_vl_ajuste,
			c.nr_nota_fiscal,
			d.nr_sequencia nr_seq_conta_resumo,
			b.nr_seq_plano,
			d.nr_seq_prestador_pgto,
			d.nm_prestador_pgto
		FROM pls_pp_item_lote i, pls_conta_mat c, pls_conta b, pls_pp_lote a, pls_conta_medica_resumo d
LEFT OUTER JOIN pls_prestador p ON (d.nr_seq_prestador_pgto = p.nr_sequencia)
WHERE c.nr_sequencia		= d.nr_seq_conta_mat and b.nr_sequencia		= c.nr_seq_conta and b.nr_sequencia		= d.nr_seq_conta and d.nr_sequencia		= i.nr_seq_resumo and b.nr_sequencia		= i.nr_seq_conta and a.nr_sequencia		= i.nr_seq_lote  and doc_p.nr_documento  = b.nr_seq_protocolo and doc_p.nr_seq_doc_compl = b.nr_sequencia and doc_p.nr_doc_analitico = d.nr_sequencia ) alias54;
	exception when no_data_found then
	/* Salva a inconsistencia: "Nao foi possivel identificar o movimento de origem." */

	select 	obter_desc_expressao(950251)
	into STRICT	doc_p.ds_inconsistencia
	;
	return;
	end;

	/* Obtem o historico de ajuste a ser utilizado caso o select principal nao retorne informacao para este campo*/

	select	max(cd_historico_padrao)
	into STRICT	cd_historico_ajuste_ww
	from	pls_esquema_contabil
	where	ie_tipo_regra = 'PM'
	and	ie_tipo_movimentacao = '18'
	and	trunc(doc_p.dt_competencia,'month') between dt_inicio_vigencia and coalesce(dt_fim_vigencia, trunc(doc_p.dt_competencia,'month'));

	/* Verifica se o select retornou historico_vl_ajuste, caso contrario usa a informacao obtidas no select especifico*/

	if (coalesce(cd_historico_ajuste_w,0) = 0) then
		cd_historico_ajuste_w := cd_historico_ajuste_ww;
	end if;
	
	/* Utiliza as contas contabeis de acordo com o tipo de movimento */

	if (doc_p.nm_atributo = 'VL_LIBERADO') then
		cd_conta_cred_w     := coalesce(cd_conta_cred_ww, 'X');
		cd_conta_deb_w      := coalesce(cd_conta_deb_ww, 'X');
		cd_historico_w      := coalesce(cd_historico_ww, 0);
	elsif (doc_p.nm_atributo = 'VL_GLOSA') then
		cd_conta_cred_w     := coalesce(cd_conta_glosa_cred_w, 'X');
		cd_conta_deb_w      := coalesce(cd_conta_glosa_deb_w, 'X');
		cd_historico_w      := coalesce(cd_historico_glosa_w, 0);
	elsif (doc_p.nm_atributo = 'VL_AJUSTE') then
		cd_conta_cred_w     := coalesce(cd_conta_ajuste_cred_w, 'X');
		cd_conta_deb_w      := coalesce(cd_conta_ajuste_deb_w, 'X');
		cd_historico_w      := coalesce(cd_historico_ajuste_w, 0);
	else
		cd_conta_cred_w     := 'X';
		cd_conta_deb_w      := 'X';
		cd_historico_w      := 0;
	end if;

	/* Obtem informacoes referentes ao prestador pagamento */

	select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto
	into STRICT	qt_prest_pgto_w
	from	pls_esquema_contabil
	where	ie_tipo_regra		    = 'PM'
	and	ie_tipo_movimentacao	!= '13'
	and	cd_estabelecimento	    = doc_p.cd_estabelecimento
	and	trunc(doc_p.dt_competencia,'month') between dt_inicio_vigencia and coalesce(dt_fim_vigencia, trunc(doc_p.dt_competencia,'month'));

	/* Se nao houver informacoes de contas contabeis ou de historico, nao segue o processo */

	if (cd_conta_deb_w = 'X' or cd_conta_cred_w = 'X' or cd_historico_w = 0) then
		/* Salva a inconsistencia: "Conta nao encontrada" */

		select 	obter_desc_expressao(330747)
		into STRICT	doc_p.ds_inconsistencia
		;
		return;
	end if;

	/* Informacoes presentes no doc_p */

	dados_contab_w.dt_movimento             := doc_p.dt_competencia;
	dados_contab_w.vl_movimento             := doc_p.vl_movimento;
	dados_contab_w.cd_tipo_lote_contabil    := doc_p.cd_tipo_lote_contabil;
	dados_contab_w.cd_estabelecimento       := doc_p.cd_estabelecimento;

	/* Verifica se a movimentacao e referente ao pagamento novo*/

	ie_pagamento_novo_w		:= 'N';
	if (coalesce(nr_seq_pp_lote_w,0) <> 0) then
		nr_seq_lote_w		:= nr_seq_pp_lote_w;
		ie_pagamento_novo_w	:= 'S';
	end if;

	/* Obtem a sequencia de agrupamento */

	nm_agrupador_w		:= coalesce(trim(both obter_agrupador_contabil(doc_p.cd_tipo_lote_contabil)), 'NR_LOTE_PAGAMENTO');
	if (nm_agrupador_w = 'NR_SEQ_CONTA') then
		nr_seq_agrupamento_w	:= nr_seq_conta_w;
	elsif (nm_agrupador_w = 'NR_LOTE_PAGAMENTO') then
		nr_seq_agrupamento_w	:= nr_seq_lote_w;
	end if;
	if (coalesce(nr_seq_agrupamento_w,0) = 0) then
		nr_seq_agrupamento_w	:= nr_seq_lote_w;
	end if;
	dados_contab_w.nr_seq_agrupamento := nr_seq_agrupamento_w;

	/* Informacao da regulamentacao e plano, utilizada para obter o centro de custo */

	if (coalesce(nr_seq_plano_w::text, '') = '') then
		begin
		select	ie_regulamentacao,
			b.nr_sequencia
		into STRICT	ie_regulamentacao_w,
			nr_seq_plano_w
		from	pls_segurado a,
			pls_plano b
		where	b.nr_sequencia  = a.nr_seq_plano
		and	a.nr_sequencia	= nr_seq_segurado_w;
		exception
		when others then
			ie_regulamentacao_w	:= null;
			nr_seq_plano_w		:= null;
		end;
	else
		begin
		select	ie_regulamentacao
		into STRICT	ie_regulamentacao_w
		from	pls_plano b
		where	b.nr_sequencia  = nr_seq_plano_w;
		exception
		when others then
			ie_regulamentacao_w	:= null;
		end;
	end if;

   /* Verifica se existe algum atributo cadastrado para aquele historico, levando em consideracao o tipo de lote contabil e estabelecimento/empresa */

	select  count(1)
	into STRICT    qt_atrib_hist_pad_w
	from    historico_padrao_atributo   c,
		historico_padrao            b,
		estabelecimento             a
	where   a.cd_estabelecimento    = doc_p.cd_estabelecimento
	and     a.cd_empresa            = b.cd_empresa
	and     b.cd_historico          = c.cd_historico
	and     c.cd_historico          = cd_historico_w
	and     c.cd_tipo_lote_contabil = doc_p.cd_tipo_lote_contabil;

	if (qt_atrib_hist_pad_w > 0) then
		/* Seq do prestador e protocolo, utilizadas no complemento historico */

		select	a.nr_seq_protocolo,
			a.nr_seq_prestador_exec
		into STRICT	nr_seq_protocolo_w,
			nr_seq_prestador_w
		from	pls_conta a
		where	nr_sequencia	= nr_seq_conta_w;

		/* Informacoes do prestador, utilizadas no complemento historico */

		if (coalesce(nr_seq_prestador_w,0) > 0) then
			select	a.cd_pessoa_fisica,
				a.cd_cgc
			into STRICT	cd_pessoa_fisica_w,
				cd_cgc_prestador_w
			from	pls_prestador a
			where	a.nr_sequencia	= nr_seq_prestador_w;
			
			begin
			nm_prestador_w	:= substr(obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_prestador_w),1,255);
			exception
			when others then
				nm_prestador_w	:= null;
			end;
			
			select	max(nr_cpf)
			into STRICT	cd_cpf_prestador_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		end if;

		/* Informacoes da NF, utilizadas no complemento historico */

		select	max(nr_nota_fiscal)
		into STRICT	nr_nota_fiscal_w
		from	pls_prot_conta_titulo
		where	nr_sequencia	= nr_seq_prot_conta_w;

		/* Informacoes do prestador pagamento, utilizadas no complemento historico */

		select	max(b.cd_cgc),
			max(	select	c.nr_cpf
				from	pessoa_fisica	c
				where	c.cd_pessoa_fisica = b.cd_pessoa_fisica) nr_cpf
		into STRICT	cd_cgc_prestador_pag_w,
			cd_cpf_prestador_pag_w
		from	pls_prestador		b,
			pls_conta_medica_resumo	a
		where	b.nr_sequencia	= a.nr_seq_prestador_pgto
		and	a.nr_sequencia	= nr_seq_conta_resumo_w
		and	a.nr_seq_conta = nr_seq_conta_w;

		cd_cgc_cpf_prest_pagto_w := coalesce(cd_cgc_prestador_pag_w, cd_cpf_prestador_pag_w);

		/* Obtem informacoes do titulo a pagar/receber, de acordo com o tipo de pagamento utilizado (Prestadores/Producao medica)*/

		if (ie_pagamento_novo_w = 'S') then
			select	max(b.nr_titulo_pagar)
			into STRICT	nr_titulo_pagar_w
			from	pls_pp_prestador	b
			where	b.nr_seq_lote		= nr_seq_lote_w
			and	b.nr_seq_prestador	= nr_seq_prestador_pgto_w;

			select	max(b.nr_titulo_receber)
			into STRICT	nr_titulo_receber_w
			from	pls_pp_prestador	b
			where	b.nr_seq_lote		= nr_seq_lote_w
			and	b.nr_seq_prestador	= nr_seq_prestador_pgto_w;

		else
			select	max(b.nr_titulo)
			into STRICT	nr_titulo_pagar_w
			from	pls_pag_prest_vencimento b,
				pls_pagamento_prestador a
			where	a.nr_sequencia		= b.nr_seq_pag_prestador
			and	a.nr_seq_lote		= nr_seq_lote_w
			and	a.nr_seq_prestador	= nr_seq_prestador_pgto_w;

			select	max(b.nr_titulo_receber)
			into STRICT	nr_titulo_receber_w
			from	pls_pag_prest_vencimento b,
				pls_pagamento_prestador a
			where	a.nr_sequencia		= b.nr_seq_pag_prestador
			and	a.nr_seq_lote		= nr_seq_lote_w
			and	a.nr_seq_prestador	= CASE WHEN qt_prest_pgto_w=0 THEN nr_seq_prestador_w  ELSE nr_seq_prestador_pgto_w END;
		end if;

		ds_conteudo_w	:= substr(	nr_seq_prestador_w		|| '#@' ||
						nm_prestador_w 			|| '#@' ||
						nr_seq_protocolo_w		|| '#@' ||
						nr_seq_conta_w			|| '#@' ||
						cd_cgc_prestador_w		|| '#@' ||
						cd_cpf_prestador_w		|| '#@' ||
						nr_nota_fiscal_w		|| '#@' ||
						nr_seq_lote_w			|| '#@' ||
						dt_mes_competencia_w		|| '#@' ||
						null 				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						nr_titulo_pagar_w		|| '#@' ||
						nr_titulo_receber_w		|| '#@' ||
						null 				|| '#@' ||
						null				|| '#@' ||
						nr_nota_fiscal_mat_w		|| '#@' ||
						nr_seq_prestador_pgto_w		|| '#@' ||
						cd_cgc_cpf_prest_pagto_w	|| '#@' ||
						nm_prestador_pgto_w		|| '#@' ||
						null 				|| '#@' ||
						null				|| '#@' ||
						null				|| '#@' ||
						null,1,4000);
		
		begin
		ds_compl_historico_ww	:= substr(obter_compl_historico(doc_p.cd_tipo_lote_contabil, cd_historico_w, ds_conteudo_w),1,255);
		exception
		when others then
			ds_compl_historico_ww	:= null;
		end;

		dados_contab_w.ds_compl_historico := ds_compl_historico_ww;
	end if;

	/* Salva as contas contabeis em um vetor, pois sera feito um insert com cada uma delas */

	vet_contas_contabeis_w := vet_contas_contabeis();
	vet_contas_contabeis_w.extend(2);
	vet_contas_contabeis_w(1) := cd_conta_cred_w;
	vet_contas_contabeis_w(2) := cd_conta_deb_w;
	dados_contab_w.cd_historico := cd_historico_w;

	/* Para cada conta conta contabil no vetor, verifica o centro de custo */

	for i in 1..vet_contas_contabeis_w.count loop
		dados_contab_w.cd_centro_custo := null;
		dados_contab_w.cd_conta_cred := null;
		dados_contab_w.cd_conta_deb := null;
		cd_centro_custo_w := null;

		/* Centro de custo */

		SELECT * FROM pls_contab_onl_lote_fin_pck.verifica_centro_custo(  'D', nr_seq_plano_w, doc_p.cd_estabelecimento, '', '', ie_regulamentacao_w, nr_seq_segurado_w, null, cd_centro_custo_w, nr_seq_regra_cc_w, coalesce(vet_contas_contabeis_w(i), 'X')) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
		dados_contab_w.cd_centro_custo := cd_centro_custo_w;

		/* Segue a ordem das atribuicoes feitas no vetor */

		if (i = 1) then
			dados_contab_w.cd_conta_cred := vet_contas_contabeis_w(i);
		elsif (i = 2) then
			dados_contab_w.cd_conta_deb := vet_contas_contabeis_w(i);
		end if;

		dados_contab_w := pls_contab_onl_lote_fin_pck.contabiliza_movimento(dados_contab_w, nm_usuario_p);
		doc_p.nr_lote_contabil := dados_contab_w.nr_lote_contabil;
	end loop;

	if (coalesce(doc_p.nr_lote_contabil,0) <> 0) then
		if (coalesce(doc_p.ds_origem, 'X') = 'ESTORNO') then

			if (ie_pagamento_novo_w = 'N') then
				update	pls_pagamento_prestador	a
				set	a.nr_lote_contabil_cancel   = doc_p.nr_lote_contabil
				where	a.nr_seq_lote		        = ( SELECT      max(nr_seq_lote_pgto)
											from        pls_conta_medica_resumo b
											where       b.nr_sequencia  =   doc_p.nr_doc_analitico);
			else
				update  pls_pp_item_lote a
				set     nr_lote_contabil = doc_p.nr_lote_contabil
				where   a.nr_seq_resumo =  (	SELECT  max(b.nr_sequencia)
								from    pls_conta_medica_resumo b,
									pls_conta_mat c
								where   c.nr_sequencia = doc_p.nr_doc_analitico
								and     b.nr_seq_conta_mat = c.nr_sequencia
								and     b.nr_seq_conta = c.nr_seq_conta)
				and     ie_proc_mat_w = 'M';

				update  pls_pp_item_lote a
				set     nr_lote_contabil = doc_p.nr_lote_contabil
				where   a.nr_seq_resumo =  (	SELECT  max(b.nr_sequencia)
								from    pls_conta_medica_resumo b,
									pls_conta_proc c
								where   c.nr_sequencia = doc_p.nr_doc_analitico
								and     b.nr_seq_conta_proc = c.nr_sequencia
								and     b.nr_seq_conta = c.nr_seq_conta)
				and     ie_proc_mat_w = 'P';
				
			end if;


			update	pls_conta_mat a
			set	nr_lote_contab_pag	= 0
			where	a.nr_sequencia		= (	SELECT      max(nr_seq_conta_mat)
								from        pls_conta_medica_resumo b
								where       b.nr_sequencia  =   doc_p.nr_doc_analitico)
			and     ie_proc_mat_w         = 'M';

			update	pls_conta_proc a
			set	nr_lote_contab_pag	= 0
			where	a.nr_sequencia		= ( 	SELECT      max(nr_seq_conta_proc)
								from        pls_conta_medica_resumo b
								where       b.nr_sequencia  =   doc_p.nr_doc_analitico)
			and     ie_proc_mat_w         = 'P';

		else

			if (ie_pagamento_novo_w = 'N') then
				update	pls_lote_pagamento	a
				set	a.nr_lote_contabil	= doc_p.nr_lote_contabil
				where	a.nr_sequencia		= ( 	SELECT      max(nr_seq_lote_pgto)
									from        pls_conta_medica_resumo b
									where       b.nr_sequencia  =   doc_p.nr_doc_analitico);

				update	pls_pagamento_prestador	a
				set	a.nr_lote_contabil_cancel   	= 0
				where	a.nr_seq_lote			= ( 	SELECT      max(nr_seq_lote_pgto)
										from        pls_conta_medica_resumo b
										where       b.nr_sequencia  =   doc_p.nr_doc_analitico);
			else
				update  pls_pp_item_lote a
				set     nr_lote_contabil = 0
				where   a.nr_seq_resumo =  (	SELECT  max(b.nr_sequencia)
								from    pls_conta_medica_resumo b,
									pls_conta_mat c
								where   c.nr_sequencia = doc_p.nr_doc_analitico
								and     b.nr_seq_conta_mat = c.nr_sequencia
								and     b.nr_seq_conta = c.nr_seq_conta)
				and     ie_proc_mat_w = 'M';

				update  pls_pp_item_lote a
				set     nr_lote_contabil = 0
				where   a.nr_seq_resumo =  (	SELECT  max(b.nr_sequencia)
								from    pls_conta_medica_resumo b,
									pls_conta_proc c
								where   c.nr_sequencia = doc_p.nr_doc_analitico
								and     b.nr_seq_conta_proc = c.nr_sequencia
								and     b.nr_seq_conta = c.nr_seq_conta)
				and     ie_proc_mat_w = 'P';
			end if;

			update	pls_conta_mat a
			set	nr_lote_contab_pag	= doc_p.nr_lote_contabil
			where	a.nr_sequencia		= ( 	SELECT      max(nr_seq_conta_mat)
								from        pls_conta_medica_resumo b
								where       b.nr_sequencia  =   doc_p.nr_doc_analitico)
			and     ie_proc_mat_w         = 'M';

			update	pls_conta_proc a
			set	nr_lote_contab_pag	= doc_p.nr_lote_contabil
			where	a.nr_sequencia		= ( 	SELECT      max(nr_seq_conta_proc)
								from        pls_conta_medica_resumo b
								where       b.nr_sequencia  =   doc_p.nr_doc_analitico)
			and     ie_proc_mat_w         = 'P';
		end if;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_contab_onl_lote_fin_pck.contab_prod_med_pgto ( doc_p INOUT ctb_documento, nm_usuario_p text) FROM PUBLIC;
