-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_tit_pag_rec_pck.gerencia_valor_adiant_pago ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_referencia_inicio_p pls_pp_lote.dt_referencia_inicio%type, dt_referencia_fim_p pls_pp_lote.dt_referencia_fim%type, nr_seq_regra_p pls_evento_regra_adiant.nr_sequencia%type, nr_seq_evento_p pls_evento_regra_adiant.nr_seq_evento%type, nr_seq_prestador_p pls_evento_regra_adiant.nr_seq_prestador_dest%type, cd_pessoa_fisica_p pls_evento_regra_adiant.cd_pessoa_fisica%type, cd_cgc_p pls_evento_regra_adiant.cd_cgc%type, nr_seq_tipo_adiant_p pls_evento_regra_adiant.nr_seq_tipo_adiant%type, cd_centro_custo_p pls_evento_regra_adiant.cd_centro_custo%type, ie_desconto_cobranca_nf_p pls_evento_regra_adiant.ie_desconto_cobranca_nf%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
_ora2pg_r RECORD;
ie_regra_valida_w	varchar(1);
nr_seq_nota_w		nota_fiscal.nr_sequencia%type;
vl_saldo_w		adiantamento_pago.vl_saldo%type;
nr_contador_w		integer;

tb_nr_adiantamento_w	pls_util_cta_pck.t_number_table;
tb_vl_saldo_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_tipo_w	pls_util_cta_pck.t_number_table;
tb_nm_usuario_w		pls_util_cta_pck.t_varchar2_table_15;
tb_nr_seq_lote_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_evento_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_regra_w	pls_util_cta_pck.t_number_table;
tb_tb_nr_seq_nota_w	pls_util_cta_pck.t_number_table;
tb_cd_centro_custo_w	pls_util_cta_pck.t_number_table;

c_adiant CURSOR(	dt_referencia_inicio_pc		pls_pp_lote.dt_referencia_inicio%type,
			dt_referencia_fim_pc		pls_pp_lote.dt_referencia_fim%type,
			cd_pessoa_fisica_pc		pls_evento_regra_adiant.cd_pessoa_fisica%type,
			cd_cgc_pc			pls_evento_regra_adiant.cd_cgc%type)FOR
	SELECT	a.nr_adiantamento,
		a.vl_saldo,
		a.nr_seq_tipo
	from	adiantamento_pago a
	where 	a.cd_pessoa_fisica = cd_pessoa_fisica_pc
	and exists (	SELECT	1
			from	pls_pp_prestador_tmp x
			where	x.cd_pessoa_fisica = a.cd_pessoa_fisica)
	and	a.dt_adiantamento between dt_referencia_inicio_pc and dt_referencia_fim_pc
	and	a.vl_saldo > 0
	and not exists (	select	1
			from	titulo_pagar y
			where	y.nr_adiant_pago = a.nr_adiantamento)
	
union all

	select	a.nr_adiantamento,
		a.vl_saldo,
		a.nr_seq_tipo
	from	adiantamento_pago a
	where 	a.cd_cgc = cd_cgc_pc
	and exists (	select	1
			from	pls_pp_prestador_tmp x
			where	x.cd_cgc = a.cd_cgc)
	and	a.dt_adiantamento between dt_referencia_inicio_pc and dt_referencia_fim_pc
	and	a.vl_saldo > 0
	and not exists (	select	1
			from	titulo_pagar y
			where	y.nr_adiant_pago = a.nr_adiantamento);
	
BEGIN

-- chama para inicializar as variáveis
SELECT * FROM pls_pp_tit_pag_rec_pck.insere_adiantamento_item(	nr_contador_w, tb_nr_adiantamento_w, tb_vl_saldo_w, tb_nr_seq_tipo_w, tb_nm_usuario_w, tb_nr_seq_lote_w, tb_nr_seq_evento_w, tb_nr_seq_prestador_w, tb_nr_seq_regra_w, tb_tb_nr_seq_nota_w, tb_cd_centro_custo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_adiantamento_w := _ora2pg_r.tb_nr_adiantamento_p; tb_vl_saldo_w := _ora2pg_r.tb_vl_saldo_p; tb_nr_seq_tipo_w := _ora2pg_r.tb_nr_seq_tipo_p; tb_nm_usuario_w := _ora2pg_r.tb_nm_usuario_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_evento_w := _ora2pg_r.tb_nr_seq_evento_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_regra_w := _ora2pg_r.tb_nr_seq_regra_p; tb_tb_nr_seq_nota_w := _ora2pg_r.tb_tb_nr_seq_nota_p; tb_cd_centro_custo_w := _ora2pg_r.tb_cd_centro_custo_p;
				
-- varre todos os adiantamentos pagos verificando se a PF ou PJ vinculada a ele é de prestador, sem tem saldounindo os mesmo
for c_adiant_w in c_adiant(dt_referencia_inicio_p, dt_referencia_fim_p, cd_pessoa_fisica_p, cd_cgc_p) loop
	
	-- inicia a regra como não válida antes de verifica-la
	ie_regra_valida_w := 'N';	
	-- limpa o armazenamento da nota fiscal
	nr_seq_nota_w := null;
	-- limpa o armazenamento do valor do adiantamento/valor total da nota
	vl_saldo_w := 0;
	
	-- se a regra está com tipo de adiantamento em branco então qualquer adiantamento pago é valido, pois a regra em branco é totalmente abrangente
	if (coalesce(nr_seq_tipo_adiant_p::text, '') = '') then
		ie_regra_valida_w := 'S';
		
	-- se chegou a este if é porque o tipo de adiantamento da regra está informado, se o tipo de adiantamento estiver em branco, no adiantamento pago, então qualquer regra é valida, pois adiantamento pago com tipo em branco é aceito por qualquer regra
	elsif (coalesce(c_adiant_w.nr_seq_tipo::text, '') = '') then
		ie_regra_valida_w := 'S';
		
	-- se chegou a este if é porque o tipo de adiantamento da regra está informado e o tipo de adiantamento no adiantamento pago também está informado, portanto ambos devem ser iguais para que a regra seja válida
	elsif (nr_seq_tipo_adiant_p = c_adiant_w.nr_seq_tipo) then
		ie_regra_valida_w := 'S';
	end if;
	
	-- se o tipo de adiantamento é valido (regra X adiantamento)
	if (ie_regra_valida_w = 'S') then
	
		-- se o campo 'Desconto do evento adiantamento' da regra for 'Cobrança nota fiscal OPM' então busca o valor total da nota fiscal
		if (ie_desconto_cobranca_nf_p = 'OPM') then
		
			select	max(n.nr_sequencia)
			into STRICT	nr_seq_nota_w
			from	pls_conta_medica_resumo x,
				pls_conta_mat d,
				nota_fiscal n,
				nota_fiscal_adiant_pago y
			where	x.nr_seq_prestador_pgto = nr_seq_prestador_p
			and	coalesce(x.nr_seq_pp_lote::text, '') = ''
			and	d.nr_sequencia = x.nr_seq_conta_mat
			and	n.nr_sequencia = d.nr_seq_nota_fiscal
			and	(n.nr_nota_fiscal IS NOT NULL AND n.nr_nota_fiscal::text <> '')
			and	y.nr_sequencia_nf = n.nr_sequencia
			and	y.nr_adiantamento = c_adiant_w.nr_adiantamento
			and not exists (	SELECT 	1
					from	pls_pp_item_lote w
					where	w.nr_seq_prestador = x.nr_seq_prestador_pgto
					and	w.nr_adiantamento = y.nr_adiantamento);
					
			-- só vai buscar a nf pelos procedimentos caso não ter encontrado na busca anterior
			if (coalesce(nr_seq_nota_w::text, '') = '') then
				select	max(n.nr_sequencia)
				into STRICT	nr_seq_nota_w
				from	pls_conta_medica_resumo x,
					pls_conta_proc d,
					nota_fiscal n,
					nota_fiscal_adiant_pago y
				where	x.nr_seq_prestador_pgto = nr_seq_prestador_p
				and	coalesce(x.nr_seq_pp_lote::text, '') = ''
				and	d.nr_sequencia = x.nr_seq_conta_proc
				and	n.nr_sequencia = d.nr_seq_nota_fiscal
				and	(n.nr_nota_fiscal IS NOT NULL AND n.nr_nota_fiscal::text <> '')
				and	y.nr_sequencia_nf = n.nr_sequencia
				and	y.nr_adiantamento = c_adiant_w.nr_adiantamento
				and not exists ( SELECT 	1
						from	pls_pp_item_lote w
						where	w.nr_seq_prestador = x.nr_seq_prestador_pgto
						and	w.nr_adiantamento = y.nr_adiantamento);
			end if;
			
			-- se encontrou uma nota então passa a utilizar o valor total da nota e não utilizará o saldo do adiantamento pago
			if (nr_seq_nota_w IS NOT NULL AND nr_seq_nota_w::text <> '') then
				select	max(vl_total_nota)
				into STRICT	vl_saldo_w
				from	nota_fiscal
				where	nr_sequencia = nr_seq_nota_w;
			end if;
		end if;
		
		-- se não obteve uma nota fiscal então o valor do saldo será o obtido no saldo da função adiantamento pago, caso contrário, será o valor total da nota
		if (coalesce(nr_seq_nota_w::text, '') = '') then
			vl_saldo_w := c_adiant_w.vl_saldo;
		end if;
		
		-- armazena em tables para enviar ao banco a cada 'X' registros
		tb_nr_adiantamento_w(nr_contador_w) := c_adiant_w.nr_adiantamento;
		tb_vl_saldo_w(nr_contador_w) := c_adiant_w.vl_saldo;
		tb_nr_seq_tipo_w(nr_contador_w) := c_adiant_w.nr_seq_tipo;
		tb_nm_usuario_w(nr_contador_w) := nm_usuario_p;
		tb_nr_seq_lote_w(nr_contador_w) := nr_seq_lote_p;
		tb_nr_seq_evento_w(nr_contador_w) := nr_seq_evento_p;
		tb_nr_seq_prestador_w(nr_contador_w) := nr_seq_prestador_p;
		tb_nr_seq_regra_w(nr_contador_w) := nr_seq_regra_p;
		tb_tb_nr_seq_nota_w(nr_contador_w) := nr_seq_nota_w;
		tb_cd_centro_custo_w(nr_contador_w) := cd_centro_custo_p;
		
		-- se atingiu a quantidade manda para o banco
		if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then
			SELECT * FROM pls_pp_tit_pag_rec_pck.insere_adiantamento_item(	nr_contador_w, tb_nr_adiantamento_w, tb_vl_saldo_w, tb_nr_seq_tipo_w, tb_nm_usuario_w, tb_nr_seq_lote_w, tb_nr_seq_evento_w, tb_nr_seq_prestador_w, tb_nr_seq_regra_w, tb_tb_nr_seq_nota_w, tb_cd_centro_custo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_adiantamento_w := _ora2pg_r.tb_nr_adiantamento_p; tb_vl_saldo_w := _ora2pg_r.tb_vl_saldo_p; tb_nr_seq_tipo_w := _ora2pg_r.tb_nr_seq_tipo_p; tb_nm_usuario_w := _ora2pg_r.tb_nm_usuario_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_evento_w := _ora2pg_r.tb_nr_seq_evento_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_regra_w := _ora2pg_r.tb_nr_seq_regra_p; tb_tb_nr_seq_nota_w := _ora2pg_r.tb_tb_nr_seq_nota_p; tb_cd_centro_custo_w := _ora2pg_r.tb_cd_centro_custo_p;
		else
			nr_contador_w := nr_contador_w + 1;
		end if;
	end if;
end loop;

SELECT * FROM pls_pp_tit_pag_rec_pck.insere_adiantamento_item(	nr_contador_w, tb_nr_adiantamento_w, tb_vl_saldo_w, tb_nr_seq_tipo_w, tb_nm_usuario_w, tb_nr_seq_lote_w, tb_nr_seq_evento_w, tb_nr_seq_prestador_w, tb_nr_seq_regra_w, tb_tb_nr_seq_nota_w, tb_cd_centro_custo_w) INTO STRICT _ora2pg_r;
 	nr_contador_w := _ora2pg_r.nr_contador_p; tb_nr_adiantamento_w := _ora2pg_r.tb_nr_adiantamento_p; tb_vl_saldo_w := _ora2pg_r.tb_vl_saldo_p; tb_nr_seq_tipo_w := _ora2pg_r.tb_nr_seq_tipo_p; tb_nm_usuario_w := _ora2pg_r.tb_nm_usuario_p; tb_nr_seq_lote_w := _ora2pg_r.tb_nr_seq_lote_p; tb_nr_seq_evento_w := _ora2pg_r.tb_nr_seq_evento_p; tb_nr_seq_prestador_w := _ora2pg_r.tb_nr_seq_prestador_p; tb_nr_seq_regra_w := _ora2pg_r.tb_nr_seq_regra_p; tb_tb_nr_seq_nota_w := _ora2pg_r.tb_tb_nr_seq_nota_p; tb_cd_centro_custo_w := _ora2pg_r.tb_cd_centro_custo_p;
				
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_tit_pag_rec_pck.gerencia_valor_adiant_pago ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_referencia_inicio_p pls_pp_lote.dt_referencia_inicio%type, dt_referencia_fim_p pls_pp_lote.dt_referencia_fim%type, nr_seq_regra_p pls_evento_regra_adiant.nr_sequencia%type, nr_seq_evento_p pls_evento_regra_adiant.nr_seq_evento%type, nr_seq_prestador_p pls_evento_regra_adiant.nr_seq_prestador_dest%type, cd_pessoa_fisica_p pls_evento_regra_adiant.cd_pessoa_fisica%type, cd_cgc_p pls_evento_regra_adiant.cd_cgc%type, nr_seq_tipo_adiant_p pls_evento_regra_adiant.nr_seq_tipo_adiant%type, cd_centro_custo_p pls_evento_regra_adiant.cd_centro_custo%type, ie_desconto_cobranca_nf_p pls_evento_regra_adiant.ie_desconto_cobranca_nf%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
