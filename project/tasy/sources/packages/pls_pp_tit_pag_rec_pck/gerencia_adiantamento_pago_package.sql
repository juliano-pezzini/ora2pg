-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_tit_pag_rec_pck.gerencia_adiantamento_pago ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
ie_regra_valida_w		varchar(1);

c_regra CURSOR( nr_seq_lote_pc		pls_pp_lote.nr_sequencia%type ) FOR
	SELECT 	b.nr_sequencia nr_seq_regra,
		b.nr_seq_evento,
		b.nr_ordem_execucao,
		b.dt_inicio_vigencia_ref,
		b.dt_fim_vigencia_ref,
		b.ie_tipo_pessoa,
		b.cd_pessoa_fisica,
		b.cd_cgc,
		b.nr_seq_tipo_adiant,
		d.nr_seq_prestador_pgto nr_seq_prestador_dest,
		b.cd_centro_custo,
		coalesce(b.ie_desconto_cobranca_nf,'N') ie_desconto_cobranca_nf
	from	pls_evento_regra_adiant b,
		pls_evento a,
		pls_pp_prestador_tmp d
	where	b.nr_seq_evento = a.nr_sequencia
	and	a.ie_situacao = 'A'
	and	d.nr_seq_prestador = b.nr_seq_prestador_dest
	and exists (	SELECT	1
			from	pls_pp_lote_prest_event c
			where	c.nr_seq_lote = nr_seq_lote_pc
			and	c.nr_seq_evento = b.nr_seq_evento
			and	c.nr_seq_prestador = d.nr_seq_prestador_pgto)
	order by nr_ordem_execucao desc,
		nr_seq_evento,
		nr_seq_regra;
		
BEGIN

-- obtém alguns dados do lote
CALL pls_pp_lote_pagamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

-- abre o cursor com as regras de adiantamento pago
for r_c_regra_w in c_regra( nr_seq_lote_p ) loop

	-- inicia a regra como não válida antes de verifica-la
	ie_regra_valida_w := 'N';
	
	-- se a data de início estiver entre o período do lote é válida
	if (r_c_regra_w.dt_inicio_vigencia_ref between pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w and pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w)  then
		ie_regra_valida_w := 'S';
		
	-- se a data de fim estiver entre o período do lote é válida
	elsif (r_c_regra_w.dt_fim_vigencia_ref between pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w and pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w) then
		ie_regra_valida_w := 'S';
		
	-- se a data inicio for menor que a data inicial do lote e a data fim for maior que a data de fim do lote
	elsif (r_c_regra_w.dt_inicio_vigencia_ref <= pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w) and (r_c_regra_w.dt_fim_vigencia_ref >= pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w) then
		ie_regra_valida_w := 'S';
	end if;
	
	-- se a vigência da regra for válida para o lote
	if (ie_regra_valida_w = 'S') then
		CALL pls_pp_tit_pag_rec_pck.gerencia_valor_adiant_pago( 	nr_seq_lote_p, pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w, pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w,
						r_c_regra_w.nr_seq_regra, r_c_regra_w.nr_seq_evento, r_c_regra_w.nr_seq_prestador_dest, 
						r_c_regra_w.cd_pessoa_fisica, r_c_regra_w.cd_cgc, r_c_regra_w.nr_seq_tipo_adiant, 
						r_c_regra_w.cd_centro_custo, r_c_regra_w.ie_desconto_cobranca_nf, nm_usuario_p);
	end if;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_tit_pag_rec_pck.gerencia_adiantamento_pago ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
