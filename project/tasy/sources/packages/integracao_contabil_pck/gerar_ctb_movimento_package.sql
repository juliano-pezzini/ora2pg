-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE integracao_contabil_pck.gerar_ctb_movimento ( nr_lote_contabil_p text, dt_mes_referencia_p timestamp, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_movimento_p timestamp, nr_seq_agrupamento_p bigint, cd_conta_debito_p text, cd_conta_credito_p text, vl_movimento_p bigint, cd_centro_custo_p text, cd_historico_p text, ds_compl_historico_p text, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


	nr_lote_contabil_w			bigint;
	nr_seq_mes_ref_w			bigint;
	nr_seq_movimento_w		bigint;
	dt_referencia_w			timestamp;
	cd_tipo_lote_w			bigint;
	cd_historico_w			varchar(10);

	cd_conta_credito_w		varchar(20);
	cd_conta_debito_w			varchar(20);
	cd_conta_credito_ww		varchar(20);
	cd_conta_debito_ww		varchar(20);
	cd_centro_custo_w			varchar(20);
	cd_centro_custo_ww		varchar(20);
	ds_erro_w			varchar(255);
	cd_classif_debito_w		varchar(40);
	cd_classif_credito_w		varchar(40);
	cd_empresa_conta_w		smallint;
	qt_reg_w				bigint;
	ie_regra_conta_w		ctb_regra_exp_imp.ie_regra_conta%type;
	ie_regra_hist_padrao_w	ctb_regra_exp_imp.ie_regra_hist_padrao%type;
	cd_empresa_w			varchar(255);
	cd_estabelecimento_w	ctb_regra_exp_imp.cd_estabelecimento%type;
	ie_conta_estab_w		ctb_regra_exp_imp.ie_conta_estab%type;
	ie_regra_centro_w		ctb_regra_exp_imp.ie_regra_centro%type;

	
BEGIN

	dt_referencia_w		:= trunc(dt_mes_referencia_p,'mm');
	cd_conta_debito_ww	:= replace(cd_conta_debito_p,' ','');
	cd_conta_credito_ww	:= replace(cd_conta_credito_p,' ','');
	cd_centro_custo_ww	:= replace(cd_centro_custo_p,' ','');

	select	count(*),
			max(b.ie_regra_conta),
			max(b.ie_regra_hist_padrao),
			max(obter_empresa_estab(a.cd_estabelecimento)),
			max(a.cd_estabelecimento),
			coalesce(max(ie_conta_estab), 'N')
	into STRICT	qt_reg_w,
			ie_regra_conta_w,
			ie_regra_hist_padrao_w,
			cd_empresa_w,
			cd_estabelecimento_w,
			ie_conta_estab_w
	from	ctb_regra_exp_imp b,
			lote_contabil a
	where	a.nr_lote_contabil		= nr_lote_contabil_p
	and		a.cd_estabelecimento	= b.cd_estabelecimento
	and		upper(b.nm_objeto)		= upper('INTEGRACAO_CONTABIL_PCK');

	select	coalesce(max(cd_historico),0)
	into STRICT	cd_historico_w
	from	historico_padrao
	where	cd_empresa	= cd_empresa_p
	and	coalesce(cd_sistema_contabil,cd_historico)	= cd_historico_p;

	if (qt_reg_w = 1)then
		if (ie_regra_hist_padrao_w = 'SISCONT') then

			select	min(cd_historico)
			into STRICT	cd_historico_w
			from	historico_padrao
			where	somente_numero(cd_sistema_contabil) = cd_historico_p
			and		cd_empresa = cd_empresa_w
			and		ie_situacao = 'A';

		end if;
	end if;

	if (cd_historico_w = 0) then
		ds_erro_w	:= substr('Não existe o histórico: ' || cd_historico_p || ' cadastrado/vinculado no Tasy.',1,255);
	end if;

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_mes_ref_w
	from	ctb_mes_ref
	where	cd_empresa		= cd_empresa_p
	and		dt_referencia		= dt_referencia_w;

	if (nr_seq_mes_ref_w = 0) then
		ds_erro_w	:= substr('Não existe o mês: ' || to_char(dt_referencia_w,'dd/mm/yyyy') || ' cadastrado' || chr(13) || chr(10) ||
					'na empresa: ' || cd_empresa_p || ' na base do Tasy.',1,255);
	end if;
	/* tipo de lote digitação */

	select	max(campo_numerico(coalesce(vl_parametro, vl_parametro_padrao)))
	into STRICT	cd_tipo_lote_w
	from	funcao_parametro
	where	cd_funcao = 923
	and	nr_sequencia = 3;

	select	coalesce(max(nr_lote_contabil),0)
	into STRICT	nr_lote_contabil_w
	from	lote_contabil
	where	nr_lote_externo	= nr_lote_contabil_p;

	if (coalesce(ds_erro_w,'X') = 'X') and (nr_lote_contabil_w = 0) then

		select	coalesce(max(nr_lote_contabil),0) + 1
		into STRICT	nr_lote_contabil_w
		from	lote_contabil;

		begin
		insert into lote_contabil(
			nr_lote_contabil,
			dt_referencia,
			cd_tipo_lote_contabil,
			dt_atualizacao,
			nm_usuario,
			cd_estabelecimento,
			ie_situacao,
			vl_debito,
			vl_credito,
			dt_integracao,
			dt_atualizacao_saldo,
			dt_consistencia,
			nm_usuario_original,
			nr_seq_mes_ref,
			ie_encerramento,
			ds_observacao,
			nr_lote_externo)
		values (	nr_lote_contabil_w,
			dt_referencia_w,
			cd_tipo_lote_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_estabelecimento_p,
			'A', 0, 0,
			null,
			null,
			null,
			'IntegrSen',
			nr_seq_mes_ref_w,
			'N',
			'Lote gerado através de integração',
			nr_lote_contabil_p);
		exception when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
		end;
	end if;

if (qt_reg_w = 1) then

	if (ie_regra_conta_w = 'CLASSIF') then

		if (ie_conta_estab_w = 'S') then

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	cd_classificacao	= cd_conta_debito_w
			and	substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p), 1, 1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	cd_classificacao	= cd_conta_credito_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

		else
			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	cd_classificacao	= cd_conta_debito_w
			and		cd_empresa			= cd_empresa_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	cd_classificacao	= cd_conta_credito_w
			and		cd_empresa		= cd_empresa_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

		end if;

	elsif (ie_regra_conta_w = 'CSP') then

		if (ie_conta_estab_w	= 'S') then

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	replace(cd_classificacao, '.', '')	= cd_conta_debito_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	replace(cd_classificacao, '.', '')	= cd_conta_credito_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

		else

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	replace(cd_classificacao,'.','')	= cd_conta_debito_w
			and		cd_empresa		= cd_empresa_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	replace(cd_classificacao,'.','')	= cd_conta_credito_w
			and		cd_empresa		= cd_empresa_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

		end if;

	elsif (ie_regra_conta_w = 'SISCONT') then


		if (ie_conta_estab_w = 'S') then

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	cd_sistema_contabil	= cd_conta_debito_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	cd_sistema_contabil	= cd_conta_credito_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S'
			and (substr(obter_se_conta_contab_estab(cd_conta_contabil, cd_estabelecimento_w), 1, 1) = 'S');

		else

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_debito_w
			from	conta_contabil
			where	cd_sistema_contabil	= cd_conta_debito_w
			and	cd_empresa		= cd_empresa_w
			and	substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

			select	min(cd_conta_contabil)
			into STRICT	cd_conta_credito_w
			from	conta_contabil
			where	cd_sistema_contabil	= cd_conta_credito_w
			and		cd_empresa			= cd_empresa_w
			and		substr(obter_se_conta_vigente(cd_conta_contabil, dt_movimento_p),1,1) = 'S';

		end if;

	end if;

end if;

	if (coalesce(cd_conta_debito_ww,'X') <> 'X') then

		select	max(cd_conta_contabil)
		into STRICT	cd_conta_debito_w
		from	conta_contabil
		where	coalesce(cd_sistema_contabil,cd_conta_contabil)	= cd_conta_debito_ww;

		if (coalesce(cd_conta_debito_w,'X') = 'X') then
			ds_erro_w	:= substr('Conta contábil não cadastrada/vinculada no Tasy: (' || cd_conta_debito_ww||')',1,255);
		else
			begin
			select	max(cd_empresa)
			into STRICT	cd_empresa_conta_w
			from	conta_contabil
			where	cd_conta_contabil = cd_conta_debito_w;

			if (cd_empresa_conta_w <> cd_empresa_p) then
				ds_erro_w	:= substr('A empresa ('||cd_empresa_conta_w||') da conta contábil: (' || cd_conta_debito_ww||')'||
							' não corresponde a empresa do movimento (' ||cd_empresa_p||')',1,255);
			end if;
			end;
		end if;
	end if;

	if (coalesce(cd_conta_credito_ww,'X') <> 'X') then

		select	max(cd_conta_contabil)
		into STRICT	cd_conta_credito_w
		from	conta_contabil
		where	coalesce(cd_sistema_contabil,cd_conta_contabil)	= cd_conta_credito_ww;

		if (coalesce(cd_conta_credito_w,'X') = 'X') then
			ds_erro_w	:= substr('Conta contábil não cadastrada/vinculada no Tasy: (' || cd_conta_credito_ww||')',1,255);
		else
			begin

			select	max(cd_empresa)
			into STRICT	cd_empresa_conta_w
			from	conta_contabil
			where	cd_conta_contabil = cd_conta_credito_w;

			if (cd_empresa_conta_w <> cd_empresa_p) then
				ds_erro_w	:= substr('A empresa ('||cd_empresa_conta_w||') da conta contábil: (' || cd_conta_credito_ww||')'||
							' não corresponde a empresa do movimento (' ||cd_empresa_p||')',1,255);

			end if;
			end;
		end if;
	end if;


	if (coalesce(ds_erro_w,'X') = 'X') then
		begin
		nr_seq_movimento_w	:= null;

		if (coalesce(cd_conta_debito_w,'0') <> '0') then
			cd_classif_debito_w	:= ctb_obter_classif_conta(cd_conta_debito_w, null, dt_movimento_p);
			select	max(nr_sequencia)
			into STRICT	nr_seq_movimento_w
			from	ctb_movimento
			where	nr_lote_contabil	= nr_lote_contabil_w
			and		dt_movimento		= dt_movimento_p
			and		cd_conta_debito		= cd_conta_debito_w
			and		cd_historico		= cd_historico_w;
		end if;

		if (coalesce(cd_conta_credito_w,'0') <> '0') then
			cd_classif_credito_w	:= ctb_obter_classif_conta(cd_conta_credito_w, null, dt_movimento_p);
			select	max(nr_sequencia)
			into STRICT	nr_seq_movimento_w
			from	ctb_movimento
			where	nr_lote_contabil	= nr_lote_contabil_w
			and		dt_movimento		= dt_movimento_p
			and		cd_conta_credito	= cd_conta_credito_w
			and		cd_historico		= cd_historico_w;
		end if;

		if (coalesce(nr_seq_movimento_w::text, '') = '') then
			begin

			select	nextval('ctb_movimento_seq')
			into STRICT 	nr_seq_movimento_w
			;

			insert into ctb_movimento(
				nr_sequencia,
				nr_lote_contabil,
				nr_seq_mes_ref,
				dt_movimento,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				cd_historico,
				cd_conta_debito,
				cd_conta_credito,
				ds_compl_historico,
				nr_seq_agrupamento,
				ie_revisado,
				cd_estabelecimento,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				cd_classif_debito,
				cd_classif_credito)
			values (	nr_seq_movimento_w,
				nr_lote_contabil_w,
				nr_seq_mes_ref_w,
				dt_movimento_p,
				vl_movimento_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_historico_w,
				cd_conta_debito_w,
				cd_conta_credito_w,
				ds_compl_historico_p,
				coalesce(nr_seq_agrupamento_p,0),
				'N',
				null,
				'IntegrSen',
				clock_timestamp(),
				cd_classif_debito_w,
				cd_classif_credito_w);

			if (coalesce(ds_erro_w,'X') = 'X') then

				select	max(cd_centro_custo)
				into STRICT	cd_centro_custo_w
				from	centro_custo
				where	cd_estabelecimento	= cd_estabelecimento_p
				and		coalesce(cd_sistema_contabil,cd_centro_custo) = cd_centro_custo_ww;

				if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
					begin
					select	count(*),
							max(b.ie_regra_centro)
					into STRICT	qt_reg_w,
							ie_regra_centro_w
					from	ctb_regra_exp_imp b,
							lote_contabil a
					where	a.nr_lote_contabil	= nr_lote_contabil_p
					and		a.cd_estabelecimento	= b.cd_estabelecimento
					and		upper(b.nm_objeto)		= upper('INTEGRACAO_CONTABIL_PCK');

				if (qt_reg_w = 1) then
					if (ie_regra_centro_w = 'CLASSIF') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	cd_classificacao	= cd_centro_custo_w
						and	cd_estabelecimento	= cd_estabelecimento_w;
					elsif (ie_regra_centro_w = 'CSP') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	replace(cd_classificacao,'.','')	= cd_centro_custo_w
						and	cd_estabelecimento			= cd_estabelecimento_w;
					elsif (ie_regra_centro_w = 'SISCONT') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	cd_sistema_contabil	= cd_centro_custo_w
						and		cd_estabelecimento	= cd_estabelecimento_w;
					end if;
				end if;


					insert into ctb_movto_centro_custo(
						nr_sequencia,
						nr_seq_movimento,
						cd_centro_custo,
						dt_atualizacao,
						nm_usuario,
						vl_movimento,
						pr_rateio)
					values (	nextval('ctb_movto_centro_custo_seq'),
						nr_seq_movimento_w,
						cd_centro_custo_w,
						clock_timestamp(),
						nm_usuario_p,
						vl_movimento_p,
						100);
					exception when others then
						ds_erro_w	:= sqlerrm(SQLSTATE);
						ds_erro_w	:= substr('Erro ao gerar o movto por centro de custo: ' || ds_erro_w,1,255);
					end;
				elsif (coalesce(cd_centro_custo_w::text, '') = '') and (cd_centro_custo_ww IS NOT NULL AND cd_centro_custo_ww::text <> '') then
					ds_erro_w	:= substr('Centro de custo não cadastrado/vinculado no Tasy: ' || cd_centro_custo_p,1,255);
				end if;
			end if;
			exception when others then
				ds_erro_w	:= substr(sqlerrm(SQLSTATE),1,255);
				ds_erro_w	:= substr(ds_erro_w || ' Erro ao gerar movto contabil',1,255);
			end;
		elsif (coalesce(nr_seq_movimento_w,0) <> 0) then
			begin
			update	ctb_movimento
			set	vl_movimento	= vl_movimento + coalesce(vl_movimento_p,0)
			where	nr_sequencia	= nr_seq_movimento_w;


			select	max(cd_centro_custo)
			into STRICT	cd_centro_custo_w
			from	centro_custo
			where	cd_estabelecimento	= cd_estabelecimento_p
			and	coalesce(cd_sistema_contabil,cd_centro_custo) = cd_centro_custo_ww;

			if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
				begin

				select	count(*),
						max(b.ie_regra_centro)
				into STRICT	qt_reg_w,
						ie_regra_centro_w
				from	ctb_regra_exp_imp b,
						lote_contabil a
				where	a.nr_lote_contabil	= nr_lote_contabil_p
				and		a.cd_estabelecimento	= b.cd_estabelecimento
				and		upper(b.nm_objeto)		= upper('INTEGRACAO_CONTABIL_PCK');

				if (qt_reg_w = 1) then
					if (ie_regra_centro_w = 'CLASSIF') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	cd_classificacao	= cd_centro_custo_w
						and	cd_estabelecimento	= cd_estabelecimento_w;
					elsif (ie_regra_centro_w = 'CSP') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	replace(cd_classificacao,'.','')	= cd_centro_custo_w
						and	cd_estabelecimento			= cd_estabelecimento_w;
					elsif (ie_regra_centro_w = 'SISCONT') then
						select	min(cd_centro_custo)
						into STRICT	cd_centro_custo_w
						from	centro_custo
						where	cd_sistema_contabil	= cd_centro_custo_w
						and	cd_estabelecimento	= cd_estabelecimento_w;
					end if;
				end if;

				insert into ctb_movto_centro_custo(
							nr_sequencia,
							nr_seq_movimento,
							cd_centro_custo,
							dt_atualizacao,
							nm_usuario,
							vl_movimento,
							pr_rateio)
				values (		nextval('ctb_movto_centro_custo_seq'),
							nr_seq_movimento_w,
							cd_centro_custo_w,
							clock_timestamp(),
							nm_usuario_p,
							vl_movimento_p,
							100);
				exception when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					ds_erro_w	:= substr('Erro ao gerar o movto por centro de custo: ' || ds_erro_w,1,255);
				end;
			elsif (coalesce(cd_centro_custo_w::text, '') = '') and (cd_centro_custo_ww IS NOT NULL AND cd_centro_custo_ww::text <> '') then
				ds_erro_w	:= substr('Centro de custo não cadastrado/vinculado no Tasy: ' || cd_centro_custo_p,1,255);
			end if;
			end;
		end if;
		end;

	end if;


	ds_erro_p	:= ds_erro_w;
/*	commit;*/

	end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE integracao_contabil_pck.gerar_ctb_movimento ( nr_lote_contabil_p text, dt_mes_referencia_p timestamp, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_movimento_p timestamp, nr_seq_agrupamento_p bigint, cd_conta_debito_p text, cd_conta_credito_p text, vl_movimento_p bigint, cd_centro_custo_p text, cd_historico_p text, ds_compl_historico_p text, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;
