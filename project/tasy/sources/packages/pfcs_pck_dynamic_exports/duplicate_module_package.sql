-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pfcs_pck_dynamic_exports.duplicate_module ( nr_seq_module_p bigint ) AS $body$
DECLARE

        nm_module_w           	varchar(100);
        ds_fields_w             varchar(1000);
        nr_seq_dynamic_module_w bigint;
        ds_fields_list_w        nested_table;


BEGIN
            open current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dynamic_module')::CURSOR(nr_sequencia_p(nr_seq_module_p);
                loop
                    fetch current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dynamic_module')::CURSOR(nr_sequencia_p into ds_fields_w;
                    EXIT WHEN NOT FOUND; /* apply on current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dynamic_module')::CURSOR(nr_sequencia_p */

                    ds_fields_w := regexp_replace(regexp_replace(ds_fields_w, '(;;{1})', ';null;'), '(;;{1})',';null;');

                    select cd_registro bulk collect into STRICT ds_fields_list_w
                    from 
                        table(lista_pck.obter_lista_char(ds_fields_w, ';'));

                    nm_module_w := ds_fields_list_w(9);
                    
					if nm_module_w = 'null' then
                        nm_module_w := obter_desc_expressao((ds_fields_list_w(2))::numeric );
                    end if;

					ds_fields_list_w(9) := 'COPY_' || nm_module_w;

                    for i in ds_fields_list_w.FIRST .. ds_fields_list_w.LAST
					loop
                        if (ds_fields_list_w(i) = 'null') then
                            ds_fields_list_w(i) := null;
                        end if;
                    end loop;

                    ds_fields_list_w(13) := 'N';
                    ds_fields_list_w(15) := 'D';

                    CALL pfcs_pck_dynamic_exports.insert_table_data('PFCS_DYNAMIC_MODULE', ds_fields_list_w);
                end loop;
            close current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dynamic_module')::CURSOR(nr_sequencia_p;

            select nr_sequencia
                into STRICT nr_seq_dynamic_module_w
                from (
                    SELECT nr_sequencia
                        from pfcs_dynamic_module 
                        order by dt_atualizacao desc) alias0 LIMIT 1;

            open current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dashboard')::CURSOR(nr_seq_dynamic_module_p(nr_seq_module_p);
                loop
                    fetch current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dashboard')::CURSOR(nr_seq_dynamic_module_p into ds_fields_w;
                    EXIT WHEN NOT FOUND; /* apply on current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dashboard')::CURSOR(nr_seq_dynamic_module_p */

                    ds_fields_w := regexp_replace(regexp_replace(ds_fields_w, '(;;{1})', ';null;'), '(;;{1})',';null;');

                    select cd_registro bulk collect into STRICT ds_fields_list_w
                    from 
                        table(lista_pck.obter_lista_char(ds_fields_w, ';'));

                    for i in ds_fields_list_w.FIRST .. ds_fields_list_w.LAST loop
                        if (ds_fields_list_w(i) = 'null') then
                            ds_fields_list_w(i) := null;
                        end if;
                    end loop;

                    ds_fields_list_w(11) := 'D';
                    ds_fields_list_w(13) := nr_seq_dynamic_module_w;

                    CALL pfcs_pck_dynamic_exports.insert_table_data('PFCS_DASHBOARD', ds_fields_list_w);
					
                end loop;
            close current_setting('pfcs_pck_dynamic_exports.cur_pfcs_dashboard')::CURSOR(nr_seq_dynamic_module_p;
            open current_setting('pfcs_pck_dynamic_exports.cur_pfcs_card')::CURSOR(nr_seq_dynamic_module_p(nr_seq_module_p);
                loop
                    fetch current_setting('pfcs_pck_dynamic_exports.cur_pfcs_card')::CURSOR(nr_seq_dynamic_module_p into ds_fields_w;
                    EXIT WHEN NOT FOUND; /* apply on current_setting('pfcs_pck_dynamic_exports.cur_pfcs_card')::CURSOR(nr_seq_dynamic_module_p */

                    ds_fields_w := regexp_replace(regexp_replace(ds_fields_w, '(;;{1})', ';null;'), '(;;{1})',';null;');

                    select cd_registro bulk collect into STRICT ds_fields_list_w
                    from 
                        table(lista_pck.obter_lista_char(ds_fields_w, ';'));

                    for i in ds_fields_list_w.FIRST .. ds_fields_list_w.LAST loop
                        if (ds_fields_list_w(i) = 'null') then
                            ds_fields_list_w(i) := null;
                        end if;
                    end loop;

                    ds_fields_list_w(15) := 'D';
                    ds_fields_list_w(24) := nr_seq_dynamic_module_w;

                    CALL pfcs_pck_dynamic_exports.insert_table_data('PFCS_CARD', ds_fields_list_w);
                end loop;
            close current_setting('pfcs_pck_dynamic_exports.cur_pfcs_card')::CURSOR(nr_seq_dynamic_module_p;
            open cur_pfcs_card_indicator(nr_seq_module_p);
                loop
                    fetch cur_pfcs_card_indicator into ds_fields_w;
                    EXIT WHEN NOT FOUND; /* apply on cur_pfcs_card_indicator */

                    ds_fields_w := regexp_replace(regexp_replace(ds_fields_w, '(;;{1})', ';null;'), '(;;{1})',';null;');

                    select cd_registro bulk collect into STRICT ds_fields_list_w
                    from 
                        table(lista_pck.obter_lista_char(ds_fields_w, ';'));

                    for i in ds_fields_list_w.FIRST .. ds_fields_list_w.LAST loop
                        if (ds_fields_list_w(i) = 'null') then
                            ds_fields_list_w(i) := null;
                        end if;
                    end loop;

                    ds_fields_list_w(6) := 'D';
                    ds_fields_list_w(13) := nr_seq_dynamic_module_w;

                    CALL pfcs_pck_dynamic_exports.insert_table_data('PFCS_CARD_INDICATOR', ds_fields_list_w);
                end loop;
            close cur_pfcs_card_indicator;
        END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_dynamic_exports.duplicate_module ( nr_seq_module_p bigint ) FROM PUBLIC;
