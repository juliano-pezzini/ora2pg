-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- retorna os dados da regra que ira decidir se a conta precisa ser aberta



CREATE OR REPLACE FUNCTION pls_cta_gera_hono_indiv_pck.obter_regra_abertura_conta ( ie_tipo_guia_p pls_conta.ie_tipo_guia%type, ie_origem_conta_p pls_conta.ie_origem_conta%type, ie_tipo_item_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_prestador_p pls_proc_participante.nr_seq_prestador%type) RETURNS DADOS_REGRA_ABERTURA_CONTA AS $body$
DECLARE


dados_regra_w 	dados_regra_abertura_conta;
ie_valido_w	varchar(1) := 'S';

-- cursor feito para retornar o ultimo registro (pega a regra mais restritiva, pois o order by tem desc)

C01 CURSOR(	ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
			ie_origem_conta_pc		pls_conta.ie_origem_conta%type, 
			cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
			nr_seq_prestador_pc		pls_proc_participante.nr_seq_prestador%type) is
	with query_tmp as (
			SELECT	a.nr_sequencia,
				coalesce(a.ie_prestador_partic, 'N') ie_prestador_partic,
				coalesce(a.ie_guia_informada,'N') ie_guia_informada,
				coalesce(a.ie_tipo_guia,' ') ie_tipo_guia_order,
				coalesce(a.ie_origem_protocolo,' ') ie_origem_protocolo_order,
				a.nr_seq_grupo_servico,
				coalesce(a.ie_gerar_participante,'N') ie_gerar_participante,
				(	SELECT 	count(1)
					from	pls_exc_regra_conta_auto b
					where 	b.nr_seq_regra = a.nr_sequencia
					and 	b.nr_seq_prestador = nr_seq_prestador_pc) qt_excecao
			from	pls_regra_conta_autom	a
			where	a.cd_estabelecimento 	= cd_estabelecimento_pc
			-- tipo de guia e obrigatorio

			and	a.ie_tipo_guia		= ie_tipo_guia_pc
			-- origem da conta e opcional

			and	((a.ie_origem_protocolo   = ie_origem_conta_pc) or (coalesce(a.ie_origem_protocolo::text, '') = ''))
			and	a.ie_situacao		= 'A'
			and	a.ie_gerar_conta	= 'S'
			and (coalesce(a.ie_exec_cirurgica::text, '') = '' or a.ie_exec_cirurgica = 'N')
			--Essa restricao da regra e apenas para materiais, ou seja, se tver como sim, a regra apenas e aplicavel a materiais com informacao de prestador fornecedor OS1220139

			and	((ie_prestador_fornec = 'N') or (coalesce(ie_prestador_fornec::text, '') = ''))
			order by
				ie_tipo_guia_order desc,
				ie_origem_protocolo_order desc,
				ie_prestador_partic desc,
				ie_guia_informada desc,
				nr_seq_grupo_servico
			)
	select	nr_sequencia,
		ie_prestador_partic,
		ie_guia_informada,
		nr_seq_grupo_servico,
		ie_gerar_participante,
		qt_excecao
	from	query_tmp LIMIT 1;
	
-- cursor feito para retornar o ultimo registro (pega a regra mais restritiva, pois o order by tem desc)

C02 CURSOR(	ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
		ie_origem_conta_pc	pls_conta.ie_origem_conta%type, 
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) is
	with query_tmp as (
			SELECT	a.nr_sequencia,
				coalesce(a.ie_tipo_guia,' ') ie_tipo_guia_order,
				coalesce(a.ie_origem_protocolo,' ') ie_origem_protocolo_order
			from	pls_regra_conta_autom	a
			where	a.cd_estabelecimento 	= cd_estabelecimento_pc
			-- tipo de guia e obrigatorio

			and	a.ie_tipo_guia		= ie_tipo_guia_pc
			-- origem da conta e opcional

			and	((a.ie_origem_protocolo   = ie_origem_conta_pc) or (coalesce(a.ie_origem_protocolo::text, '') = ''))
			and	a.ie_situacao		= 'A'
			and	a.ie_gerar_conta	= 'S'
			--Para abertura de materais, pre-requisito que ie_prestador_fornec esteja com essa restricao como 'S' OS1220139

			and 	ie_prestador_fornec = 'S'
			and	coalesce(nr_seq_grupo_servico::text, '') = ''
			order by
				ie_tipo_guia_order desc,
				ie_origem_protocolo_order desc
			)
	SELECT	nr_sequencia  
	from	query_tmp LIMIT 1;

BEGIN

if (ie_tipo_item_p = 'P') then
	-- obtem os dados se existir registros

	
	for r_C01_w in C01( ie_tipo_guia_p, ie_origem_conta_p, cd_estabelecimento_p, nr_seq_prestador_p) loop
		
		
		
		if (r_C01_w.qt_excecao = 0) then
			ie_valido_w := 'S';				
			if (r_C01_w.nr_seq_grupo_servico IS NOT NULL AND r_C01_w.nr_seq_grupo_servico::text <> '') then
				ie_valido_w := pls_se_grupo_preco_servico(r_C01_w.nr_seq_grupo_servico, cd_procedimento_p, ie_origem_proced_p);
			end if;
			
			if (ie_valido_w = 'S') then
			
				--Para abertura de procedimentos, e preciso verificar ainda se tem alguma regra de excecao			

				dados_regra_w.nr_sequencia := r_C01_w.nr_sequencia;
				dados_regra_w.ie_prestador_partic := r_C01_w.ie_prestador_partic;
				dados_regra_w.ie_guia_informada := r_C01_w.ie_guia_informada;
				dados_regra_w.ie_gerar_participante := r_C01_w.ie_gerar_participante;
			end if;
		end if;
			
	end loop;
else
	-- obtem os dados se existir registros

	for r_C02_w in C02(ie_tipo_guia_p, ie_origem_conta_p, cd_estabelecimento_p) loop
		dados_regra_w.nr_sequencia := r_C02_w.nr_sequencia;
		dados_regra_w.ie_prestador_partic := null;
		dados_regra_w.ie_guia_informada := null;
		dados_regra_w.ie_gerar_participante := 'N';
	end loop;
end if;
	
return dados_regra_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_cta_gera_hono_indiv_pck.obter_regra_abertura_conta ( ie_tipo_guia_p pls_conta.ie_tipo_guia%type, ie_origem_conta_p pls_conta.ie_origem_conta%type, ie_tipo_item_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_prestador_p pls_proc_participante.nr_seq_prestador%type) FROM PUBLIC;
