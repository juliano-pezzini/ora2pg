-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_gera_hono_indiv_pck.gera_conta_material ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

				
nr_seq_conta_mat_w 		pls_conta_mat.nr_sequencia%type;
ds_sql_conta_w 			varchar(2000);
ds_filtro_conta_w		varchar(500);
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
ie_tipo_guia_convertido_w 	pls_conta.ie_tipo_guia%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
var_cur_w			integer;
var_exec_w			integer;
var_retorno_w			integer;

dados_regra_w			dados_regra_abertura_conta;
nr_seq_conta_anterior_w 	pls_conta.nr_sequencia%type;
ie_credenciado_w		varchar(1);
ie_cooperado_ativo_w		varchar(1);

nr_seq_novo_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
nr_seq_nova_conta_w		pls_conta.nr_sequencia%type;
ie_gerou_novo_registro_w	varchar(1);
nr_seq_protocolo_anterior_w	pls_protocolo_conta.nr_sequencia%type;
ie_tipo_guia_anterior_w		pls_conta.ie_tipo_guia%type;

C01 CURSOR(	nr_seq_conta_mat_pc	pls_conta_mat.nr_sequencia%type,
		cd_estabelecimento_p	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	b.nr_seq_conta,
		b.nr_seq_prest_fornec nr_seq_prestador_exec, --Deve abrir a nova conta setando o prestador fornecedor como executor da mesma
		b.nr_seq_protocolo,
		b.cd_guia_referencia,
		b.nr_seq_segurado,
		b.nr_sequencia 		nr_seq_conta_mat,
		dt_atendimento_conta	dt_material,
		dt_inicio_atend,
		dt_fim_atend,
		cd_guia,
		nr_seq_grau_partic_conta nr_seq_grau_partic,
		cd_medico_executor,
		nr_seq_cbo_saude
	from	pls_conta_mat_v	b
	where	b.nr_sequencia		= nr_seq_conta_mat_pc
	and	b.ie_status <> 'D'
	and 	coalesce(nr_seq_mat_ref::text, '') = '';
	
BEGIN
	
-- filtro por lote

ds_filtro_conta_w := '';
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	ds_filtro_conta_w := ds_filtro_conta_w || 'and a.nr_seq_lote_conta = :nr_seq_lote_conta ';
end if;
-- filtro por protocolo

if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	ds_filtro_conta_w := ds_filtro_conta_w || 'and a.nr_seq_protocolo = :nr_seq_protocolo_conta ';
end if;
-- filtro por lote de processo

if (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then
	ds_filtro_conta_w := ds_filtro_conta_w || 'and	exists (select	1 ' ||
						  '		from	pls_cta_lote_proc_conta p ' ||
						  '		where	p.nr_seq_lote_processo = :nr_seq_lote_processo ' ||
						  '		and	p.nr_seq_conta = a.nr_seq_conta)';
end if;
-- filtro por conta

if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	ds_filtro_conta_w := ds_filtro_conta_w || 'and a.nr_seq_conta = :nr_seq_conta ';
-- filtro por procedimento

elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
	ds_filtro_conta_w := ds_filtro_conta_w || 'and a.nr_sequencia = :nr_seq_conta_mat ';
end if;
-- obtem todas as contas e procedimentos 

ds_sql_conta_w := 'select	a.nr_seq_conta, ' ||
		  '		a.nr_sequencia nr_seq_conta_mat, ' ||
		  '		a.ie_tipo_guia, ' ||
		  '		a.ie_origem_conta ' ||		
		  'from		pls_conta_mat_v	a ' ||
		  'where	a.ie_tipo_guia			in (''4'',''5'') ' ||
		  'and 		a.ie_status_protocolo 		in (''1'', ''2'', ''5'') ' ||
		  'and 		a.ie_status_conta 		in (''A'', ''L'', ''P'', ''U'') ' ||
		  'and		a.nr_seq_conta_referencia 	is null ' ||
		  'and		a.ie_situacao_protocolo		in (''D'',''T'') '||
		  'and		a.nr_seq_prest_fornec_mat is not null '||
		  'and		a.ie_status 			!= ''D'' ' ||
		  ds_filtro_conta_w ||
		  ' order by 	a.nr_seq_conta';

var_cur_w := dbms_sql.open_cursor;
dbms_sql.parse(var_cur_w, ds_sql_conta_w, 1);

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_lote_conta', nr_seq_lote_p);
end if;
if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_protocolo_conta', nr_seq_protocolo_p);
end if;
if (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_lote_processo', nr_seq_lote_processo_p);
end if;
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_conta', nr_seq_conta_p);
elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_conta_mat', nr_seq_conta_mat_p);
end if;

dbms_sql.define_column(var_cur_w, 1, nr_seq_conta_w);
dbms_sql.define_column(var_cur_w, 2, nr_seq_conta_mat_w);
dbms_sql.define_column(var_cur_w, 3, ie_tipo_guia_w, 2);
dbms_sql.define_column(var_cur_w, 4, ie_origem_conta_w, 1);

var_exec_w := dbms_sql.execute(var_cur_w);
nr_seq_conta_anterior_w := null;

-- todas as contas e materiais	

loop
var_retorno_w := dbms_sql.fetch_rows(var_cur_w);
exit when var_retorno_w = 0;

	dbms_sql.column_value(var_cur_w, 1, nr_seq_conta_w);
	dbms_sql.column_value(var_cur_w, 2, nr_seq_conta_mat_w);
	dbms_sql.column_value(var_cur_w, 3, ie_tipo_guia_w);
	dbms_sql.column_value(var_cur_w, 4, ie_origem_conta_w);
	
	-- Para abertura de materiais, sempre ira gerar ou vincular a uma conta existente cujo tipo de guia e SP/SADT

	ie_tipo_guia_convertido_w := 4;
	
	-- so faz a busca dos dados da regra caso tenha mudado de conta, pois como trazemos procedimentos junto nao e preciso verificar a cada registro

	if (coalesce(nr_seq_conta_anterior_w::text, '') = '' or nr_seq_conta_anterior_w != nr_seq_conta_w) then
		-- obtem os dados da regra de abertura de conta

		dados_regra_w := pls_cta_gera_hono_indiv_pck.obter_regra_abertura_conta(	ie_tipo_guia_w,
								ie_origem_conta_w,
								'M',
								cd_estabelecimento_p,
								null,
								null,
								null);
	end if;
	
	-- se retornou dados da regra de abertura de conta segue adiante, senao tudo acaba aqui

	if (dados_regra_w.nr_sequencia IS NOT NULL AND dados_regra_w.nr_sequencia::text <> '') then
	
	
		nr_seq_protocolo_anterior_w := null;
		ie_tipo_guia_anterior_w := null;
		
		-- faz todas as verificacaes para abrir ou nao a conta

		for r_C01_w in C01(nr_seq_conta_mat_w, cd_estabelecimento_p) loop
				
			ie_gerou_novo_registro_w := 'N';
			-- se mudou o protocolo ou a guia executa de novo, caso contrario nao precisa fazer nada

			if (coalesce(nr_seq_protocolo_anterior_w::text, '') = '' or
				 nr_seq_protocolo_anterior_w != r_C01_w.nr_seq_protocolo or
				 coalesce(ie_tipo_guia_anterior_w::text, '') = '' or
				 ie_tipo_guia_anterior_w != ie_tipo_guia_convertido_w) then
				 
				-- verificar para gerar ou buscar o protocolo

				SELECT * FROM pls_cta_gera_hono_indiv_pck.gera_protocolo_abert_conta(	r_C01_w.nr_seq_protocolo, ie_tipo_guia_convertido_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_novo_protocolo_w, ie_gerou_novo_registro_w) INTO STRICT nr_seq_novo_protocolo_w, ie_gerou_novo_registro_w;
			end if;
			
			-- verificar para gerar ou buscar a conta

			SELECT * FROM pls_cta_gera_hono_indiv_pck.gera_conta_abert_conta_mat(	r_C01_w.nr_seq_conta, nr_seq_novo_protocolo_w, r_C01_w.nr_seq_segurado, r_C01_w.cd_guia, r_C01_w.nr_seq_prestador_exec, r_C01_w.nr_seq_grau_partic, r_C01_w.cd_medico_executor, ie_tipo_guia_convertido_w, r_C01_w.nr_seq_cbo_saude, nm_usuario_p, cd_estabelecimento_p, dados_regra_w, nr_seq_nova_conta_w, ie_gerou_novo_registro_w) INTO STRICT nr_seq_nova_conta_w, ie_gerou_novo_registro_w;
													
			-- verificar para gerar o material

			ie_gerou_novo_registro_w := pls_cta_gera_hono_indiv_pck.gera_mat_abert_conta(	nr_seq_nova_conta_w, r_C01_w.nr_seq_conta_mat, r_C01_w.dt_material, r_C01_w.dt_inicio_atend, r_C01_w.dt_fim_atend, nm_usuario_p, ie_gerou_novo_registro_w);
																	
			-- so cancela o material se foi gerado um novo material

			if (ie_gerou_novo_registro_w = 'S') then
				-- cancela o material que foi aberto se a regra permitir

				CALL pls_cta_gera_hono_indiv_pck.cancela_mat_abert_conta( r_C01_w.nr_seq_conta,
							  r_C01_w.nr_seq_conta_mat,
							  r_C01_w.dt_material,
							  nm_usuario_p);
			end if;
			
			nr_seq_protocolo_anterior_w := r_C01_w.nr_seq_protocolo;
			ie_tipo_guia_anterior_w := ie_tipo_guia_convertido_w;
			
			commit;

		end loop;
	end if;
	-- armazena a conta para utilizar na comparacao acima.

	nr_seq_conta_anterior_w := nr_seq_conta_w;
end loop;
dbms_sql.close_cursor(var_cur_w);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_gera_hono_indiv_pck.gera_conta_material ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
