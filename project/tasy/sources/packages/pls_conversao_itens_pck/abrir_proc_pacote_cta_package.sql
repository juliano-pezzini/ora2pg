-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conversao_itens_pck.abrir_proc_pacote_cta (nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

	
tb_insere_proc_w	table_insere_proc_abert_pct;
tb_upd_proc_w		table_atualiza_proc_abert_pct;
tb_upd_mat_w		table_atualiza_mat_abert_pct;
tb_insere_mat_w		table_insere_mat_abert_pct;
ind_ins_proc_w		integer := 0;
ind_upd_proc_w		integer := 0;
ind_ins_mat_w		integer := 0;
ind_upd_mat_w		integer := 0;
qt_registro_w		integer := 0;
nr_seq_pacote_w		pls_pacote_tipo_acomodacao.nr_seq_composicao%type;
nr_seq_composicao_w	pls_pacote_tipo_acomodacao.nr_seq_composicao%type;
ie_abrir_pacote_fat_w	pls_pacote_tipo_acomodacao.ie_abrir_pacote_fat%type;
ie_classificacao_w	procedimento.ie_classificacao%type;
vl_negociado_w		pls_pacote_procedimento.vl_negociado%type;


--Cursor que retorna distintamente as contas que necessitam serem processadas

c00 CURSOR FOR
	SELECT 	conta.nr_sequencia		nr_seq_conta,
		conta.ie_tipo_guia		ie_tipo_guia,			
		conta.nr_seq_prestador_exec	nr_seq_prestador_exec,	
		conta.nr_seq_prestador_solic	nr_seq_prestador_solic,	
		conta.nr_seq_prestador_prot	nr_seq_prestador_prot,	
		conta.cd_medico_executor	cd_medico_exec,	
		conta.cd_medico_solicitante	cd_medico_solicitante,	
		conta.dt_atendimento		dt_atendimento_referencia,	
		conta.ie_tipo_protocolo         ie_tipo_protocolo,
		CASE WHEN pls_obter_se_cooperado_ativo( conta.cd_medico_executor, conta.dt_atendimento, null)='S' THEN  'C'  ELSE 'N' END  ie_medico_exec_coope,
		CASE WHEN pls_obter_se_cooperado_ativo( conta.cd_medico_solicitante, conta.dt_atendimento, null)='S' THEN  'C'  ELSE 'N' END  ie_medico_solic_coope		
	from	pls_conta_v conta
	where 	conta.nr_sequencia in ( SELECT 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_sequencia	= nr_seq_conta_p
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_protocolo = nr_seq_protocolo_p
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_lote_conta	= nr_seq_lote_p
					and	p.ie_status		in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_analise	= nr_seq_analise_p
					and	p.ie_status	 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo 	in ('1','2','3','5')	
					
union all

					select	p.nr_sequencia
					from	pls_conta_v		p
					where	coalesce(nr_seq_conta_p::text, '') = ''
					and	coalesce(nr_seq_protocolo_p::text, '') = ''
					and	coalesce(nr_seq_lote_p::text, '') = ''
					and	coalesce(nr_seq_analise_p::text, '') = ''
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					and	exists (select	1
							from	pls_cta_lote_proc_conta lote
							where	lote.nr_seq_lote_processo = nr_seq_lote_processo_p
							and	lote.nr_seq_conta  = p.nr_sequencia)	
				);

C01 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  coalesce(b.vl_negociado, 0)	vl_negociado,
                b.cd_procedimento	cd_procedimento,
                b.ie_origem_proced	ie_origem_proced,
                coalesce(b.qt_procedimento,1) qt_procedimento,
                b.nr_sequencia		nr_seq_proc,
		b.ie_via_acesso,
		b.cd_medico,
		b.nr_seq_cbo_saude,
		CASE WHEN b.ie_via_acesso='M' THEN  50 WHEN b.ie_via_acesso='D' THEN  70  ELSE 100 END  tx_item,
		b.nr_seq_grau_partic_ent
        from    pls_pacote_composicao	a,
		pls_pacote_procedimento	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (a.dt_inicio_vigencia <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (a.dt_fim_vigencia >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     b.ie_estrutura    	= 'S'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));

C02 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  coalesce(b.vl_negociado,0)	vl_negociado,
                b.cd_material		cd_material,
                b.ie_situacao		ie_situacao,
                coalesce(b.qt_material,1) qt_material,
                b.nr_sequencia		nr_seq_mat,
                b.nr_seq_material	nr_seq_material
        from    pls_pacote_composicao	a,
		pls_pacote_material	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (a.dt_inicio_vigencia <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (a.dt_fim_vigencia >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));
	
/*Retorna os procedimentos que obtiveram regra de pacote e caso tiver marcado para abrir pacote, entao prossegue. Caso Tiver regra  e existirem itens que apontem para ele(nr_seq_proc_pct) , 
entao quer dizer que ja abriu pacote anteriormente e esta tudo correto, nao precisando percorrer esses itens no cursor*/

C03 CURSOR(nr_seq_conta_pc		pls_conta.nr_sequencia%type)FOR
	SELECT	a.nr_sequencia 			nr_seq_conta_proc,
		a.nr_seq_regra_pct_fat		nr_seq_regra_pct_fat,
		a.dt_procedimento_referencia	dt_procedimento_referencia,
		a.dt_inicio_proc			dt_inicio_proc,
		a.dt_fim_proc			dt_fim_proc,
		coalesce(a.qt_procedimento_imp,0) 	qt_procedimento,
		coalesce(a.tx_item,100) 		tx_item,
		b.nr_seq_pacote,
		b.nr_seq_composicao,
		b.ie_abrir_pacote_fat
	from	pls_conta_proc a,
		pls_pacote_tipo_acomodacao b
	where	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
	and	nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_regra_pct_fat = b.nr_sequencia
	and	ie_status not in ('M', 'D')
	and	b.ie_abrir_pacote_fat = 'S'
	and	(b.nr_seq_composicao IS NOT NULL AND b.nr_seq_composicao::text <> '')
	and (	SELECT count(1)
			from	pls_conta_proc c
			where	nr_seq_conta = nr_seq_conta_pc
			and	ie_status = 'M'
			and	nr_seq_proc_pct = a.nr_sequencia) = 0
	and (	select count(1)
			from	pls_conta_mat d
			where 	nr_Seq_conta = nr_seq_conta_pc
			and	ie_status = 'M'
			and	nr_seq_proc_pct = a.nr_sequencia) = 0;
BEGIN

	for r_c00_w in c00 loop
	
		--Verifica todos os procedimentos obtam a regra para cada um deles. Caso ja tenha obtido uma regra anteriormente e for diferente da obtida agora ou os registros lanaados na conta naquela ocasiao forem divergentes do atual momento

		--da regra obtida entao necessita atualizar as informaaaes, exluados lanaamentos anteriores e lanaando novamente conforme a regra.

		CALL pls_conversao_itens_pck.consistir_aplic_regra_abertura(r_c00_w.nr_seq_conta, nm_usuario_p, cd_estabelecimento_p);

		for r_c03_w in c03(r_c00_w.nr_seq_conta) loop
			
			select max(nr_seq_composicao),
				max(ie_abrir_pacote_fat)
			into STRICT    nr_seq_composicao_w,
				ie_abrir_pacote_fat_w
			from    pls_pacote_tipo_acomodacao
			where   nr_sequencia    = r_c03_w.nr_seq_regra_pct_fat;
		
				
			for	r_C01_w in C01(nr_seq_composicao_w, r_c03_w.dt_procedimento_referencia, r_C00_w.nr_seq_prestador_exec, r_c00_w.ie_tipo_guia) loop
				select  max(ie_classificacao)
				into STRICT    ie_classificacao_w
				from    procedimento
				where   cd_procedimento = r_C01_w.cd_procedimento
				and     ie_origem_proced = r_C01_w.ie_origem_proced;

				select  count(1)
				into STRICT    qt_registro_w
				from    pls_conta_proc
				where   nr_seq_conta            = nr_seq_conta_p
				and     cd_procedimento         = r_C01_w.cd_procedimento
				and     ie_origem_proced        = r_C01_w.ie_origem_proced
				and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
				and	nr_seq_proc_pct		= r_c03_w.nr_seq_conta_proc;

				vl_negociado_w := dividir_Sem_round((r_C01_w.vl_negociado * r_c01_w.tx_item)::numeric, 100);	
				
				if (qt_registro_w = 0)     then
				
					tb_insere_proc_w.nr_sequencia(ind_ins_proc_w)		:= r_c01_w.nr_seq_proc;
					tb_insere_proc_w.dt_procedimento(ind_ins_proc_w)	:= r_c03_w.dt_procedimento_referencia;
					tb_insere_proc_w.dt_inicio_proc(ind_ins_proc_w)		:= r_c03_w.dt_inicio_proc;
					tb_insere_proc_w.dt_fim_proc(ind_ins_proc_w)		:= r_c03_w.dt_fim_proc;
					tb_insere_proc_w.qt_procedimento_imp(ind_ins_proc_w)	:= r_C01_w.qt_procedimento * r_c03_w.qt_procedimento;
					tb_insere_proc_w.vl_unitario_imp(ind_ins_proc_w)	:= dividir_Sem_round(vl_negociado_w, (r_C01_w.qt_procedimento));
					tb_insere_proc_w.vl_procedimento_imp(ind_ins_proc_w)	:= vl_negociado_w * r_c03_w.qt_procedimento;
					tb_insere_proc_w.nr_seq_pacote(ind_ins_proc_w)		:= nr_seq_pacote_w;
					tb_insere_proc_w.cd_procedimento(ind_ins_proc_w)	:= r_C01_w.cd_procedimento;
					tb_insere_proc_w.nr_seq_conta(ind_ins_proc_w)		:= r_c00_w.nr_seq_conta;
					tb_insere_proc_w.ie_origem_proced(ind_ins_proc_w)	:= r_C01_w.ie_origem_proced;
					tb_insere_proc_w.vl_liberado(ind_ins_proc_w)		:= vl_negociado_w * r_c03_w.qt_procedimento;
					tb_insere_proc_w.vl_procedimento(ind_ins_proc_w)	:= vl_negociado_w * r_c03_w.qt_procedimento;
					tb_insere_proc_w.qt_procedimento(ind_ins_proc_w)	:= r_C01_w.qt_procedimento * r_c03_w.qt_procedimento;
					tb_insere_proc_w.vl_unitario(ind_ins_proc_w)		:= dividir_sem_round(vl_negociado_w, r_C01_w.qt_procedimento);
					tb_insere_proc_w.ie_tipo_despesa(ind_ins_proc_w)	:= ie_classificacao_w;
					tb_insere_proc_w.tx_item(ind_ins_proc_w)		:= r_c01_w.tx_item;
					tb_insere_proc_w.nr_seq_regra_pct_fat(ind_ins_proc_w)	:= r_c03_w.nr_seq_regra_pct_fat;
					tb_insere_proc_w.nr_seq_proc_pct(ind_ins_proc_w)	:= r_c03_w.nr_seq_conta_proc;
					tb_insere_proc_w.ie_medico_exec_coope(ind_ins_proc_w) := r_c00_w.ie_medico_exec_coope;
					tb_insere_proc_w.ie_medico_solic_coope(ind_ins_proc_w):= r_c00_w.ie_medico_solic_coope;
					tb_insere_proc_w.ie_via_acesso(ind_ins_proc_w)		:= r_c01_w.ie_via_acesso;	
				
				else
					tb_upd_proc_w.qt_procedimento_imp(ind_upd_proc_w) 	:= r_C01_w.qt_procedimento * r_c03_w.qt_procedimento;
					tb_upd_proc_w.vl_unitario_imp(ind_upd_proc_w)		:= dividir_Sem_round(vl_negociado_w, r_C01_w.qt_procedimento);
					tb_upd_proc_w.vl_procedimento_imp(ind_upd_proc_w)	:= vl_negociado_w * r_c03_w.qt_procedimento;
					tb_upd_proc_w.vl_procedimento(ind_upd_proc_w)		:= vl_negociado_w * r_c03_w.qt_procedimento;
					tb_upd_proc_w.nr_seq_conta(ind_upd_proc_w)           	:= nr_seq_conta_p;
					tb_upd_proc_w.cd_procedimento(ind_upd_proc_w)        	:= r_C01_w.cd_procedimento;
					tb_upd_proc_w.ie_origem_proced(ind_upd_proc_w)       	:= r_C01_w.ie_origem_proced;
					tb_upd_proc_w.nr_seq_regra_pct_fat(ind_upd_proc_w)   	:= r_c03_w.nr_seq_regra_pct_fat;
					tb_upd_proc_w.nr_seq_proc_pct(ind_upd_proc_w)		:= r_c03_w.nr_seq_conta_proc;
					tb_upd_proc_w.ie_via_acesso(ind_ins_proc_w)		:= r_c01_w.ie_via_acesso;
					
				end if;
				
				--Se as estruturas contiverem um quantidade de registros superior ao valor pra-definido, entao persiste no banco

				if ( ind_upd_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					 tb_upd_proc_w := pls_conversao_itens_pck.upd_proc_abertura_pct( tb_upd_proc_w, nm_usuario_p);	
					ind_upd_proc_w	:= 0;					
				else
					ind_upd_proc_w := ind_upd_proc_w + 1;						
				end if;
				
				
				if ( ind_ins_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					tb_insere_proc_w := pls_conversao_itens_pck.insere_proc_abertura_pct(tb_insere_proc_w, nm_usuario_p);
					ind_ins_proc_w	:= 0;					
				else
					ind_ins_proc_w := ind_ins_proc_w + 1;						
				end if;
			
			end loop;
			
			for	r_C02_w in C02(nr_seq_composicao_w, r_c03_w.dt_procedimento_referencia, r_c00_w.nr_seq_prestador_exec, r_c00_w.ie_tipo_guia) loop

				select  count(1)
				into STRICT    qt_registro_w
				from    pls_conta_mat
				where   nr_seq_conta            = nr_seq_conta_p
				and     nr_seq_material         = r_C02_w.nr_seq_material
				and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
				and	nr_seq_proc_pct		= r_c03_w.nr_seq_conta_proc;

				if (qt_registro_w = 0)     then
										
					tb_insere_mat_w.qt_material_imp(ind_ins_mat_w)	:= (r_C02_w.qt_material * r_c03_w.qt_procedimento);	
					tb_insere_mat_w.vl_unitario_imp(ind_ins_mat_w)	:= dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material);
					tb_insere_mat_w.vl_material_imp(ind_ins_mat_w)	:= (r_C02_w.vl_negociado * r_c03_w.qt_procedimento);
					tb_insere_mat_w.nr_seq_pacote(ind_ins_mat_w)	:= nr_seq_pacote_w;
					tb_insere_mat_w.cd_material(ind_ins_mat_w)	:= r_C02_w.cd_material;
					tb_insere_mat_w.nr_seq_conta(ind_ins_mat_w)	:= nr_seq_conta_p;
					tb_insere_mat_w.vl_liberado(ind_ins_mat_w)	:= r_C02_w.vl_negociado * r_c03_w.qt_procedimento;
					tb_insere_mat_w.vl_material(ind_ins_mat_w)	:= r_C02_w.vl_negociado * r_c03_w.qt_procedimento;
					tb_insere_mat_w.qt_material(ind_ins_mat_w)	:= r_C02_w.qt_material * r_c03_w.qt_procedimento;
					tb_insere_mat_w.vl_unitario(ind_ins_mat_w)	:= dividir_sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material);
					tb_insere_mat_w.ie_tipo_despesa(ind_ins_mat_w)	:= ie_classificacao_w;
					tb_insere_mat_w.nr_Seq_material(ind_ins_mat_w)	:= r_C02_w.nr_seq_material;
					tb_insere_mat_w.dt_atendimento(ind_ins_mat_w)	:=  r_c03_w.dt_procedimento_referencia;
					tb_insere_mat_w.nr_seq_proc_pct(ind_ins_mat_w)	:= r_c03_w.nr_seq_conta_proc;
					tb_insere_mat_w.dt_inicio_atend(ind_ins_mat_w)	:= r_c03_w.dt_inicio_proc;
					tb_insere_mat_w.dt_fim_atend(ind_ins_mat_w)	:= r_c03_w.dt_fim_proc;
					tb_insere_mat_w.nr_sequencia(ind_ins_mat_w)	:= r_C02_w.nr_seq_mat;
					tb_insere_mat_w.nr_seq_regra_pct_fat(ind_ins_mat_w) := r_c03_w.nr_seq_regra_pct_fat;
					tb_insere_mat_w.ie_medico_exec_coope(ind_ins_mat_w) := r_c00_w.ie_medico_exec_coope;
					tb_insere_mat_w.ie_medico_solic_coope(ind_ins_mat_w):= r_c00_w.ie_medico_solic_coope;	
					
					if ( ind_ins_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
						 tb_insere_mat_w := pls_conversao_itens_pck.insere_mat_abertura_pct( tb_insere_mat_w, nm_usuario_p);
						ind_ins_mat_w := 0;
					else
						ind_ins_mat_w := ind_ins_mat_w + 1;
					end if;
					
				else
				
					tb_upd_mat_w.qt_material_imp(ind_upd_mat_w) 	:= r_C02_w.qt_material * r_c03_w.qt_procedimento;
					tb_upd_mat_w.vl_unitario_imp(ind_upd_mat_w)	:= dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material);		
					tb_upd_mat_w.vl_material_imp(ind_upd_mat_w)	:= r_C02_w.vl_negociado * r_c03_w.qt_procedimento;	
					tb_upd_mat_w.vl_material(ind_upd_mat_w)		:= r_C02_w.vl_negociado * r_c03_w.qt_procedimento;
					tb_upd_mat_w.nr_seq_conta(ind_upd_mat_w)	:= nr_seq_conta_p;
					tb_upd_mat_w.nr_seq_material(ind_upd_mat_w)     := r_C02_w.nr_seq_material;
					tb_upd_mat_w.nr_seq_regra_pct_fat(ind_upd_mat_w):= r_c03_w.nr_seq_regra_pct_fat;
					tb_upd_mat_w.nr_seq_proc_pct(ind_upd_mat_w)	:= r_c03_w.nr_seq_conta_proc;		
					
					if ( ind_upd_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
						tb_upd_mat_w := pls_conversao_itens_pck.upd_mat_abertura_pct(tb_upd_mat_w, nm_usuario_p);
						ind_upd_mat_w := 0;
					else
						ind_upd_mat_w := ind_upd_mat_w + 1;
					end if;
					
				end if;
				
			end loop; -- C02

		end loop;
		
	end loop;

	 tb_upd_proc_w := pls_conversao_itens_pck.upd_proc_abertura_pct( tb_upd_proc_w, nm_usuario_p);
	tb_insere_proc_w := pls_conversao_itens_pck.insere_proc_abertura_pct(tb_insere_proc_w, nm_usuario_p);
	tb_upd_mat_w := pls_conversao_itens_pck.upd_mat_abertura_pct(tb_upd_mat_w, nm_usuario_p);
	 tb_insere_mat_w := pls_conversao_itens_pck.insere_mat_abertura_pct( tb_insere_mat_w, nm_usuario_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conversao_itens_pck.abrir_proc_pacote_cta (nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
