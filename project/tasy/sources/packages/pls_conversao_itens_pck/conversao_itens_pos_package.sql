-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conversao_itens_pck.conversao_itens_pos ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_registros_excluir_w		pls_util_cta_pck.t_number_table;
ie_insere_particpante_w		varchar(1);
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
qt_participantes_w		integer := 0;
ind_exclusao_w			integer := 0;
qt_registros_w			integer := 0;
ie_ato_cooperado_w		pls_conta_proc.ie_ato_cooperado%type;
qt_liberada_w			pls_conta_proc.qt_procedimento%type;
qt_procedimentos_w		pls_conta_proc.qt_procedimento%type;
dt_procedimento_w		pls_conta_proc.dt_procedimento_referencia%type;
dt_inicio_proc_w		pls_conta_proc.dt_inicio_proc%type;
dt_fim_proc_w			pls_conta_proc.dt_fim_proc%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
ie_repassa_medico_w		pls_conta_proc.ie_repassa_medico%type;
nr_seq_honorario_crit_w		pls_conta_proc.nr_seq_honorario_crit%type;
ie_criterio_horario_w		pls_conta_proc.ie_criterio_horario%type;
nr_seq_regra_cooperado_w	pls_conta_proc.nr_seq_regra_cooperado%type;
tx_item_w			pls_conta_proc.tx_item%type;
cd_medico_proc_w		pls_proc_participante.cd_medico%type;
nr_seq_grau_partic_anest_w	pls_proc_participante.nr_seq_grau_partic%type;
tb_proc_lancar_w		table_dados_lanc_item_proc;
tb_participantes_w		table_dados_lanc_partic;	
tb_insere_participantes_w	table_dados_lanc_partic;
tb_seq_proc_w			pls_util_cta_pck.t_number_table;
tb_seq_regra_w			pls_util_cta_pck.t_number_table;
tb_seq_conta_w			pls_util_cta_pck.t_number_table;
tb_seq_limpar_w			pls_util_cta_pck.t_number_table;
tb_ajuste_fat_w			pls_util_cta_pck.t_number_table;
nr_seq_regra_w 			pls_conv_item_fat.nr_sequencia%type;
ind2_w				integer := 0;
ind_w				integer := 0;
i_limpar_w			integer := 0;
ie_atualizar_w			varchar(1) := 'S';
ie_atualizar_final_w		varchar(1) := 'S';
cd_procedimento_ant_w		procedimento.cd_procedimento%type;
ie_origem_proced_ant_w		procedimento.ie_origem_proced%type;
dt_procedimento_ant_w		pls_conta_proc.dt_procedimento%type;
tx_item_ant_w			pls_conta_proc.tx_item%type;
nr_seq_analise_ant_w		pls_analise_conta.nr_sequencia%type;
dt_alteracao_estrutura_w	pls_conv_item_fat.dt_alteracao_estrutura%type;
dt_atualizacao_nrec_w		pls_conta_proc.dt_atualizacao_nrec%type;
							
c_itens_lancar CURSOR(nr_seq_regra_pc	pls_conv_item_fat.nr_sequencia%type) FOR
	SELECT	ie_origem_proced,
		cd_procedimento,
		nr_seq_grau_partic,
		ie_qt_item_princ
	from	pls_conv_item_conv
	where	nr_seq_regra	= nr_seq_regra_pc;
	
--Cursor de procedimentos na conta(Item principal da regra)				

c_item_princ CURSOR( 	nr_seq_analise_pc	pls_conta.nr_seq_analise%type,
			nr_seq_regra_pc		pls_conv_item_fat.nr_sequencia%type) FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_desc_grau_anest,
		a.nr_seq_regra,
		a.nr_seq_grupo_material,
		( SELECT count(1)
		  from	pls_conv_item_fat_exce b
		  where	b.nr_seq_regra = a.nr_seq_regra) qt_regra_excecao
	from	pls_conv_item_princ	a
	where	a.nr_seq_regra		= nr_seq_regra_pc
	and	exists (select	1
			from	pls_conta_proc_v	x
			where	x.nr_seq_analise	= nr_seq_analise_pc
			and	x.ie_status		in ('L','S')
			and	x.cd_procedimento	= a.cd_procedimento
			and	x.ie_origem_proced	= a.ie_origem_proced);		

c_outros_Procedimentos CURSOR(	cd_procedimento_pc	pls_conta_proc.cd_procedimento%type,
				ie_origem_proced_pc	pls_conta_proc.ie_origem_proced%type,
				nr_seq_analise_pc	pls_analise_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		nr_seq_grau_partic_conta
	from	pls_conta_proc_v
	where	nr_seq_analise			= nr_seq_analise_pc
	and	ie_status			in ('L','S')
	and	cd_procedimento			= cd_procedimento_pc
	and	ie_origem_proced		= ie_origem_proced_pc
	and	dt_procedimento_trunc		= dt_procedimento_w
	and	tx_item				= tx_item_w
	and	nr_sequencia			<> nr_seq_conta_proc_w;	
		
--Percorre os procedimentos da conta que ainda nao tem regra de conversao

c_proc_conta CURSOR(	nr_seq_conta_p	pls_conta.nr_sequencia%type) FOR
	SELECT 	nr_sequencia,
		nr_seq_regra_conv,
		cd_procedimento,
		ie_origem_proced
	from	pls_conta_proc
	where	nr_seq_conta = nr_seq_conta_p
	and 	coalesce(nr_seq_regra_conv::text, '') = ''
	and	ie_status not in ('D','M');
			
c_proc_conta_regra CURSOR(	nr_seq_conta_p	pls_conta.nr_sequencia%type) FOR
	SELECT 	nr_sequencia,
		nr_seq_regra_conv,
		cd_procedimento,
		ie_origem_proced,
		dt_atualizacao_nrec
	from	pls_conta_proc
	where	nr_seq_conta = nr_seq_conta_p
	and	ie_status not in ('D','M')
	and	(nr_seq_regra_conv IS NOT NULL AND nr_seq_regra_conv::text <> '');			
			
--Cursor que retorna distintamente as contas que necessitam serem processadas

C_contas CURSOR FOR
	SELECT 	nr_sequencia,
		nr_seq_ajuste_fat,
		coalesce(nr_seq_prestador_exec,nr_seq_prestador) nr_seq_prestador_exec,
		ie_tipo_guia,
		cd_medico_executor,
		cd_medico_solicitante,
		nr_seq_prestador_solic,
		dt_atendimento,
		nr_seq_analise,
		nr_seq_prestador_prot,
		nr_seq_congenere_seg,
		nr_seq_segurado,
		nr_seq_grau_partic,
		ie_tipo_protocolo,
		ie_origem_conta,
		nr_seq_contrato,
		nr_seq_intercambio,
		CASE WHEN  pls_obter_se_cooperado_ativo(cd_medico_executor, dt_atendimento, null)='S' THEN  'C'  ELSE 'N' END  ie_medico_exec_coope,
		CASE WHEN  pls_obter_se_cooperado_ativo(cd_medico_solicitante, dt_atendimento, null)='S' THEN  'C'  ELSE 'N' END  ie_medico_solic_coope,
	       ( SELECT  max(plano.ie_preco)
		 from 	pls_plano plano,
		 	pls_segurado seg
		 where	conta.nr_seq_segurado = seg.nr_sequencia
		 and	seg.nr_seq_plano 	= plano.nr_sequencia) ie_preco
	from	pls_conta_v conta
	where 	conta.nr_sequencia in ( select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_sequencia	= nr_seq_conta_p
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_protocolo = nr_seq_protocolo_p
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_lote_conta	= nr_seq_lote_p
					and	p.ie_status		in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_sequencia
					from	pls_conta_v	p
					where	p.nr_seq_analise	= nr_seq_analise_p
					and	p.ie_status	 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo 	in ('1','2','3','5')	
					
union all

					select	p.nr_sequencia
					from	pls_conta_v		p
					where	coalesce(nr_seq_conta_p::text, '') = ''
					and	coalesce(nr_seq_protocolo_p::text, '') = ''
					and	coalesce(nr_seq_lote_p::text, '') = ''
					and	coalesce(nr_seq_analise_p::text, '') = ''
					and	p.ie_status 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					and	exists (select	1
							from	pls_cta_lote_proc_conta lote
							where	lote.nr_seq_lote_processo = nr_seq_lote_processo_p
							and	lote.nr_seq_conta  = p.nr_sequencia)	
				);
	

--Cursor com informaaaes detalhadas para o item principal da regra	

C00 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		cd_procedimento_pc	pls_conta_proc.cd_procedimento%type,
		ie_origem_proced_pc	pls_conta_proc.ie_origem_proced%type) FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		tx_item,
		trunc(dt_procedimento_referencia,'dd') dt_procedimento
	from	pls_conta_proc
	where	nr_seq_conta		= nr_seq_conta_pc
	and	ie_status		in ('L','S')
	and	cd_procedimento		= cd_procedimento_pc
	and	ie_origem_proced	= ie_origem_proced_pc
	and	coalesce(nr_seq_regra_conv::text, '') = ''
	group by cd_procedimento,
		ie_origem_proced,
		tx_item,
		trunc(dt_procedimento_referencia,'dd');
	
c_grupo_mat CURSOR(nr_seq_grupo_material_pc	pls_preco_material.nr_seq_grupo%type) FOR
	SELECT	nr_seq_material
	from	pls_preco_material
	where	nr_seq_grupo = nr_seq_grupo_material_pc
	and	(nr_seq_material IS NOT NULL AND nr_seq_material::text <> '');		
				
BEGIN

	--Primeiramente verifica os itens com regra de conversao antiga para ver se apenas mantera os mesmos ou caso contrario, limpa a seq de conversao

	for r_contas in C_contas loop
	
		nr_seq_regra_w := null;
		--Percorre os procedimentos da conta que tem regra de conversao antiga.  Nao considera os procedimentos lanaados por regra

		for r_proc_conta in c_proc_conta_regra(r_contas.nr_sequencia) loop
	
			--Verifica primeiramente se a regra antiga(r_proc_conta.nr_seq_regra_conv) ainda a valida para a conta em questao.

			nr_seq_regra_w := pls_conversao_itens_pck.obter_seq_regra_conv(	r_contas.dt_atendimento, r_contas.nr_seq_contrato, r_contas.nr_seq_intercambio,
							r_contas.nr_seq_prestador_prot, r_contas.nr_seq_congenere_seg, r_contas.nr_seq_analise,
							nm_usuario_p, r_proc_conta.cd_procedimento, r_proc_conta.ie_origem_proced,
							r_proc_conta.nr_seq_regra_conv);
			
			if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				
				-- O campo dt_alteracao_estrutura a atualizado cada vez que 

				-- for feito alguma aaao sobre as tabelas filhas da regra, seja

				-- exclusao, inclusao ou alteraaao, sendo assim, se essa data for superior

				-- a data que o item foi criado, a regra sofreu alteraaao, logo, precisa

				-- ser atualizado os registros da conta

				select	max(dt_alteracao_estrutura)
				into STRICT	dt_alteracao_estrutura_w
				from	pls_conv_item_fat
				where	nr_sequencia = nr_seq_regra_w;
				
				select	max(a.dt_atualizacao_nrec)
				into STRICT	dt_atualizacao_nrec_w
				from	pls_conta_proc a
				where	a.nr_seq_conta = r_contas.nr_sequencia
				and	a.nr_seq_regra_conv = nr_seq_regra_w
				and	a.ie_status = 'M'
				and	exists (SELECT	1
						from	pls_conv_item_conv x
						where	x.nr_seq_regra = nr_seq_regra_w
						and	x.cd_procedimento = a.cd_procedimento
						and	x.ie_origem_proced = a.ie_origem_proced);
				
				if	(dt_alteracao_estrutura_w IS NOT NULL AND dt_alteracao_estrutura_w::text <> '' AND dt_alteracao_estrutura_w > dt_atualizacao_nrec_w) or (coalesce(dt_atualizacao_nrec_w::text, '') = '') then
					ie_atualizar_w := 'S';
				end if;
			else
				ie_atualizar_w := 'S';
			end if;
			
			if (ie_atualizar_w = 'S') then
				ie_atualizar_final_w := 'S';
				tb_seq_limpar_w(i_limpar_w) := r_proc_conta.nr_sequencia;
				tb_ajuste_fat_w(i_limpar_w):= r_contas.nr_seq_ajuste_fat;
				
				if (i_limpar_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
					--Gerencia limpeza de regra de lanaamento anterior que nao a mais valida.

					SELECT * FROM pls_conversao_itens_pck.excluir_reg_lanc_anteriores(tb_seq_limpar_w, tb_ajuste_fat_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_seq_limpar_w := _ora2pg_r.tb_seq_item_p; tb_ajuste_fat_w := _ora2pg_r.nr_seq_ajuste_fat_p;
					i_limpar_w := 0;
				else
					i_limpar_w := i_limpar_w + 1;
				end if;
			
			end if;
	
		end loop;
	
	end loop;

	--Caso sobrarem registros nas estruturas, persiste no banco

	SELECT * FROM pls_conversao_itens_pck.excluir_reg_lanc_anteriores(tb_seq_limpar_w, tb_ajuste_fat_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_seq_limpar_w := _ora2pg_r.tb_seq_item_p; tb_ajuste_fat_w := _ora2pg_r.nr_seq_ajuste_fat_p;
	
	for r_contas in C_contas loop
		
		--Se a conta tiver 10 procedimentos, necessita percorrer 10 vezes a obteaao de regra. apenas para isso a

		-- a utilidade desse cursor

		for r_proc_conta in c_proc_conta(r_contas.nr_sequencia) loop
				
			nr_seq_regra_w := null;
			
			--Apenas para pas-estabelecido

			if (r_contas.ie_preco in (2, 3)) then
						
				--Obtam regra de conversao para fazer as devidas verificaaaes posteriores e lanaar itens caso tudo estiver ok

				nr_seq_regra_w := pls_conversao_itens_pck.obter_seq_regra_conv(	r_contas.dt_atendimento, r_contas.nr_seq_contrato, r_contas.nr_seq_intercambio,
									r_contas.nr_seq_prestador_prot, r_contas.nr_seq_congenere_seg, r_contas.nr_seq_analise,
									nm_usuario_p, r_proc_conta.cd_procedimento, r_proc_conta.ie_origem_proced,
									null);
									
				if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then					
					--Se chegar aqui com valor 'N' significa que o item ja tinha regra anteriormente e todos os procedimentos que devem ser lanaados pela regra estao

					--presentes na respectiva conta(apenas considerando procedimentos com status faturamento manual)

					if (ie_atualizar_final_w = 'S') then
						
						cd_procedimento_ant_w := 0;
						ie_origem_proced_ant_w := 0;
						dt_procedimento_ant_w := clock_timestamp();
						tx_item_ant_w := 100;
						nr_seq_analise_ant_w := null;
						
						--Percorre o cursor de itens na conta(Item principal da regra).

						for r_item_princ in c_item_princ(r_contas.nr_seq_analise, nr_seq_regra_w) loop
							--Percorre cursor com informaaaes dos procedimentos

							for r_C00_w in C00(nr_seq_conta_p, r_item_princ.cd_procedimento, r_item_princ.ie_origem_proced) loop								
								--Busca o procedimento

								select	max(x.nr_sequencia)
								into STRICT	nr_seq_conta_proc_w
								from	pls_conta_proc_v	x
								where	x.nr_seq_conta			= nr_seq_conta_p
								and	x.ie_status			in ('L','S')
								and	coalesce(x.nr_seq_regra_conv::text, '') = ''
								and	x.cd_procedimento		= r_C00_w.cd_procedimento
								and	x.ie_origem_proced		= r_C00_w.ie_origem_proced
								and	dt_procedimento_trunc		= r_C00_w.dt_procedimento
								and	x.tx_item			= r_C00_w.tx_item;
								
								if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
									--Busca os dados do procedimento

									select	qt_procedimento,
										trunc(dt_procedimento_referencia,'dd'),
										dt_inicio_proc,
										dt_fim_proc,
										ie_tipo_despesa,
										ie_repassa_medico,
										nr_seq_honorario_crit,
										ie_criterio_horario,
										tx_item,
										( 	select 	count(1)
											from	pls_proc_participante	a
											where	a.nr_seq_conta_proc	= nr_seq_conta_proc_w)
									into STRICT	qt_liberada_w,
										dt_procedimento_w,
										dt_inicio_proc_w,
										dt_fim_proc_w,
										ie_tipo_despesa_w,
										ie_repassa_medico_w,
										nr_seq_honorario_crit_w,
										ie_criterio_horario_w,
										tx_item_w,
										qt_participantes_w
									from	pls_conta_proc
									where	nr_sequencia	= nr_seq_conta_proc_w;
								end if;
								
								ie_insere_particpante_w	:= 'N';
								/*	O funcionamento a baixo foi mantido em relaaao ao que ja estava definido na pls_lancar_item_proc_pos. Tais regras foram baseadas em necessidades da
									USJRP e por tal motivo alam de ser algo estabilizado, foi mantido o funcionamento
								
									Funcionamento da regra quando campo desconsidera participante estiver marcado:
																	
									Obs:	1) Se o item tiver mais de um participante e entao prossegue com lanaamento, caso tiver anestesista entre os participantes
										do item da conta que corresponda ao item principal da regra
										
										2)Se Sa tiver um participante na conta e este for o anestesista, entao nao lanaa nada.
										
										3)Se nao tiver participantes, poram existir um grau de participaaao que corresponda ao grau de participaaao informado na conta,  entao nao 
										sera lanaado nada. Caso nao existir grau de participaaao correspondente ao informado na conta, entao nao lanaa o anestesista e o item correpondente, poram
										segue normalmente com o lanaamento dos procedimentos a serem lanaados, cadastrados na regra.
								*/

								if (r_item_princ.ie_desc_grau_anest = 'S') then
									
									--Se tiver mais de participante no item, entao verifica se existe um anestesista.

									if (qt_participantes_w > 1) then
										select	count(1)
										into STRICT	qt_participantes_w
										from	pls_proc_participante	a,
											pls_grau_participacao	b
										where	a.nr_seq_grau_partic	= b.nr_sequencia
										and	a.nr_seq_conta_proc	= nr_seq_conta_proc_w
										and	b.ie_anestesista	= 'S';
										
										--Se tiver, entao deve criar um anestesista

										if (qt_participantes_w > 0) then
											ie_insere_particpante_w	:= 'S';
										end if;
										
									--Se tiver um participante na conta, entao verifica se ele a anestesista

									elsif (qt_participantes_w = 1) then	
										
										--Se for anestesista, entao nao faz nada

										select	count(1)
										into STRICT	qt_participantes_w
										from	pls_proc_participante	a,
											pls_grau_participacao	b
										where	a.nr_seq_grau_partic	= b.nr_sequencia
										and	a.nr_seq_conta_proc	= nr_seq_conta_proc_w
										and	b.ie_anestesista	= 'S';
										
										if (qt_participantes_w > 0) then
											nr_seq_conta_proc_w	:= null;
										end if;
										
									elsif (qt_participantes_w	= 0 ) then
										
										select	count(1)
										into STRICT	qt_participantes_w
										from	pls_grau_participacao	b
										where	r_contas.nr_seq_grau_partic = b.nr_sequencia
										and	b.ie_anestesista	= 'S';
							
										if (qt_participantes_w > 0) then
											nr_seq_conta_proc_w	:= null;
										end if;
						
									end if;
								end if;
								
								if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
						
									for r_itens_lancar in c_itens_lancar(r_item_princ.nr_seq_regra) loop
																		
										--Busca os dados do madico participante

										select	max(cd_medico)
										into STRICT	cd_medico_proc_w
										from	pls_proc_participante
										where	nr_seq_conta_proc	= nr_seq_conta_proc_w
										and	nr_seq_grau_partic	= r_itens_lancar.nr_seq_grau_partic
										and	(cd_medico IS NOT NULL AND cd_medico::text <> '');
										
										if (coalesce(cd_medico_proc_w::text, '') = '') then
											select	max(cd_medico)
											into STRICT	cd_medico_proc_w
											from	pls_proc_participante
											where	nr_seq_conta_proc	= nr_seq_conta_proc_w
											and	(cd_medico IS NOT NULL AND cd_medico::text <> '');				
										end if;
										
										if (coalesce(cd_medico_proc_w::text, '') = '') then
											cd_medico_proc_w	:= r_contas.cd_medico_executor;
										end if;
										
										if (coalesce(cd_medico_proc_w::text, '') = '') then
											cd_medico_proc_w	:= r_contas.cd_medico_solicitante;
										end if;
									
										--Tratamento de duplicidade

										select	count(1)
										into STRICT	qt_registros_w
										from	pls_conta_proc_v	x
										where	x.nr_seq_analise		= r_contas.nr_seq_analise
										and	x.cd_procedimento		= r_itens_lancar.cd_procedimento
										and	x.ie_origem_proced		= r_itens_lancar.ie_origem_proced
										and	x.nr_seq_regra_conv		= r_item_princ.nr_seq_regra
										and	dt_procedimento_trunc		= dt_procedimento_w
										and	tx_item				= tx_item_w
										and	((coalesce(r_itens_lancar.nr_seq_grau_partic::text, '') = '') or ( exists (SELECT	1
																			from	pls_proc_participante a
																			where	a.nr_seq_conta_proc	= x.nr_sequencia
																			and	a.nr_seq_grau_partic	= r_itens_lancar.nr_seq_grau_partic)));
										
										if (qt_registros_w = 0) and
											((cd_procedimento_ant_w <> r_itens_lancar.cd_procedimento) or (ie_origem_proced_ant_w <> r_itens_lancar.ie_origem_proced) or (dt_procedimento_ant_w <> dt_procedimento_w) or (tx_item_ant_w <> tx_item_w) or (nr_seq_analise_ant_w <> r_contas.nr_seq_analise)) then
											
											--Insere o registro de procedimento

											select CASE WHEN r_itens_lancar.ie_qt_item_princ='N' THEN 1  ELSE qt_liberada_w END
											into STRICT	qt_procedimentos_w
											;
											
											--Define o ato cooperado

											pls_obter_tipo_ato_cooperado(	r_itens_lancar.cd_procedimento, r_itens_lancar.ie_origem_proced, nr_seq_conta_proc_w,
															'P', r_contas.nr_seq_prestador_exec, r_contas.nr_seq_prestador_solic,
															r_contas.nr_seq_prestador_prot, null, r_contas.ie_medico_solic_coope,	
															r_contas.ie_medico_exec_coope, null, r_contas.ie_tipo_protocolo, 
															r_contas.ie_tipo_guia,	ie_tipo_despesa_w, null, 
															nr_seq_regra_cooperado_w, ie_ato_cooperado_w);
											
											if (r_contas.ie_origem_conta	= 'A')   and (coalesce(ie_ato_cooperado_w::text, '') = '') then
												ie_ato_cooperado_w := '1';
											end if;
									
											tb_proc_lancar_w.nr_sequencia(ind_w) 		:= null;		
											tb_proc_lancar_w.nr_seq_conta(ind_w) 		:= nr_seq_conta_p;		
											tb_proc_lancar_w.cd_procedimento(ind_w) 	:= r_itens_lancar.cd_procedimento;		
											tb_proc_lancar_w.ie_origem_proced(ind_w)	:= r_itens_lancar.ie_origem_proced;	
											tb_proc_lancar_w.qt_procedimento(ind_w) 	:= qt_procedimentos_w;		
											tb_proc_lancar_w.qt_procedimento_imp(ind_w) 	:= qt_procedimentos_w;	
											tb_proc_lancar_w.ie_status(ind_w) 		:= 'M';		
											tb_proc_lancar_w.nr_seq_proc_princ(ind_w) 	:= nr_seq_conta_proc_w;	
											tb_proc_lancar_w.ie_situacao(ind_w) 		:= 'D';		
											tb_proc_lancar_w.nr_seq_regra_conv(ind_w) 	:= r_item_princ.nr_seq_regra;	
											tb_proc_lancar_w.ie_apenas_pagamento(ind_w) 	:= 'N';	
											tb_proc_lancar_w.dt_procedimento(ind_w) 	:= dt_procedimento_w;		
											tb_proc_lancar_w.dt_inicio_proc(ind_w) 		:= dt_inicio_proc_w;		
											tb_proc_lancar_w.dt_fim_proc(ind_w) 		:= dt_fim_proc_w;		
											tb_proc_lancar_w.ie_repassa_medico(ind_w) 	:= ie_repassa_medico_w;	
											tb_proc_lancar_w.nr_seq_honorario_crit(ind_w) 	:= nr_seq_honorario_crit_w;	
											tb_proc_lancar_w.ie_criterio_horario(ind_w) 	:= ie_criterio_horario_w;	
											tb_proc_lancar_w.tx_item(ind_w) 		:= tx_item_w;	
											tb_proc_lancar_w.nr_seq_regra_cooperado(ind_w) 	:= nr_seq_regra_cooperado_w;
											tb_proc_lancar_w.ie_ato_cooperado(ind_w) 	:= ie_ato_cooperado_w;
											
												--Insere o registro de participante

											if (r_itens_lancar.nr_seq_grau_partic IS NOT NULL AND r_itens_lancar.nr_seq_grau_partic::text <> '') then
												
												tb_participantes_w.nr_seq_conta_proc(ind_w)  	 := null;
												tb_participantes_w.cd_procedimento(ind_w)	 := r_itens_lancar.cd_procedimento;
												tb_participantes_w.ie_origem_proced(ind_w)	 := r_itens_lancar.ie_origem_proced;
												tb_participantes_w.nr_seq_conta_proc_princ(ind_w):= nr_seq_conta_proc_w;
												tb_participantes_w.nr_seq_grau_partic(ind_w)	 := r_itens_lancar.nr_seq_grau_partic;
												tb_participantes_w.qt_liberada(ind_w)		 := qt_procedimentos_w;
												tb_participantes_w.cd_medico(ind_w)		 := cd_medico_proc_w;
														
											end if;
											
											if (ind_w > pls_util_cta_pck.qt_registro_transacao_w) then
											
												 tb_proc_lancar_w := pls_conversao_itens_pck.inserir_proc_conv_itens_pos( tb_proc_lancar_w, nm_usuario_p);
												tb_participantes_w := pls_conversao_itens_pck.insere_partic_conv_itens(tb_participantes_w, nm_usuario_p);
												
												ind_exclusao_w := 0;
												ind_w := 0;
											else
												ind_w := ind_w + 1;
											end if;
											
											cd_procedimento_ant_w := r_itens_lancar.cd_procedimento;
											ie_origem_proced_ant_w := r_itens_lancar.ie_origem_proced;
											dt_procedimento_ant_w := dt_procedimento_w;
											tx_item_ant_w := tx_item_w;
											nr_seq_analise_ant_w := r_contas.nr_seq_analise;
										end if;
										
										update 	pls_conta_proc
										set	nr_seq_regra_conv	= r_item_princ.nr_seq_regra,
											dt_atualizacao		= clock_timestamp(),
											nm_usuario		= nm_usuario_p
										where	nr_sequencia 		= nr_seq_conta_proc_w;
										
										select	count(1)
										into STRICT	qt_registros_w
										from	pls_conta_proc_v
										where	nr_seq_analise			= r_contas.nr_seq_analise
										and	ie_status			in ('L','S')
										and	cd_procedimento			= r_item_princ.cd_procedimento
										and	ie_origem_proced		= r_item_princ.ie_origem_proced
										and	dt_procedimento_trunc		= dt_procedimento_w
										and	tx_item				= tx_item_w
										and	nr_sequencia			<> nr_seq_conta_proc_w;
										
										if (qt_registros_w > 0) then
											for r_C03_w in c_outros_Procedimentos(	r_item_princ.cd_procedimento,r_item_princ.ie_origem_proced,
																r_contas.nr_seq_analise) loop
												qt_participantes_w	:= 0;
												if (r_item_princ.ie_desc_grau_anest = 'S') then
													select	count(1)
													into STRICT	qt_participantes_w
													from	pls_grau_participacao	b
													where	r_c03_w.nr_seq_grau_partic_conta = b.nr_sequencia
													and	b.ie_anestesista		= 'S';
												end if;
									
												if (qt_participantes_w = 0) then
													update 	pls_conta_proc
													set	nr_seq_regra_conv	= r_item_princ.nr_seq_regra,
														dt_atualizacao		= clock_timestamp(),
														nm_usuario		= nm_usuario_p
													where	nr_sequencia		= r_C03_w.nr_sequencia;
												end if;
											end loop;
										end if;

										if (qt_registros_w = 0) then
											if (r_item_princ.nr_seq_grupo_material IS NOT NULL AND r_item_princ.nr_seq_grupo_material::text <> '') then
												for r_c05_w in c_grupo_mat(r_item_princ.nr_seq_grupo_material) loop
												
													update	pls_conta_mat	x
													set	x.nr_seq_regra_conv	= r_item_princ.nr_seq_regra,
														dt_atualizacao		= clock_timestamp(),
														nm_usuario		= nm_usuario_p
													where	x.nr_seq_conta		in (	SELECT	a.nr_sequencia
																		from	pls_conta	a
																		where	a.nr_seq_analise	= r_contas.nr_seq_analise)
													and	x.nr_seq_material	= r_c05_w.nr_seq_material
													and	coalesce(x.nr_seq_regra_conv::text, '') = ''  LIMIT 1; --Apenas em 1 item do material
												end loop;
											end if;
										end if;
									
									end loop;
								
									--Caso necessite lanaar anestesista

									if ( ie_insere_particpante_w = 'S') then
																									
										tb_seq_proc_w(ind2_w)		:= nr_seq_conta_proc_w;
										tb_seq_regra_w(ind2_w)		:= r_item_princ.nr_seq_regra;
										tb_seq_conta_w(ind2_w)		:= nr_seq_conta_p;
														
										select	max(a.cd_medico),
											max(a.nr_seq_grau_partic)
										into STRICT	cd_medico_proc_w,
											nr_seq_grau_partic_anest_w
										from	pls_proc_participante	a,
											pls_grau_participacao	b
										where	a.nr_seq_grau_partic	= b.nr_sequencia
										and	a.nr_seq_conta_proc	= nr_seq_conta_proc_w
										and	b.ie_anestesista	= 'S';
										
										tb_insere_participantes_w.nr_seq_conta_proc(ind2_w)  	 := null;
										tb_insere_participantes_w.nr_seq_conta_proc_princ(ind2_w) := nr_seq_conta_proc_w;
										tb_insere_participantes_w.cd_procedimento(ind2_w)	 := r_C00_w.cd_procedimento;
										tb_insere_participantes_w.ie_origem_proced(ind2_w)	 := r_C00_w.ie_origem_proced;
										tb_insere_participantes_w.nr_seq_grau_partic(ind2_w)	 := nr_seq_grau_partic_anest_w;
										tb_insere_participantes_w.qt_liberada(ind2_w)		 := 0;
										tb_insere_participantes_w.cd_medico(ind2_w)		 := cd_medico_proc_w;
									
										if (ind2_w > pls_util_cta_pck.qt_registro_transacao_w) then
															
											SELECT * FROM pls_conversao_itens_pck.inserir_proc_conv_item_pos_seq(	tb_seq_proc_w, tb_seq_regra_w, tb_seq_conta_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_seq_proc_w := _ora2pg_r.tb_seq_proc_p; tb_seq_regra_w := _ora2pg_r.tb_seq_regra_p; tb_seq_conta_w := _ora2pg_r.tb_seq_conta_p;
																
											 tb_insere_participantes_w := pls_conversao_itens_pck.insere_partic_conv_itens( tb_insere_participantes_w, nm_usuario_p);
																
											ind2_w := 0;
											ind_exclusao_w := 0;
										else
											ind2_w := ind2_w + 1;
										end if;
																			
									end if;
								end if;
							end loop; --cursor C00
						end loop;

					end if;
										
				end if; -- if obteve regra
			end if;
		end loop; -- Cursor c_proc_conta
	end loop; --cursor c_contas
	
	 tb_proc_lancar_w := pls_conversao_itens_pck.inserir_proc_conv_itens_pos( tb_proc_lancar_w, nm_usuario_p);
	SELECT * FROM pls_conversao_itens_pck.inserir_proc_conv_item_pos_seq(tb_seq_proc_w, tb_seq_regra_w, tb_seq_conta_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_seq_proc_w := _ora2pg_r.tb_seq_proc_p; tb_seq_regra_w := _ora2pg_r.tb_seq_regra_p; tb_seq_conta_w := _ora2pg_r.tb_seq_conta_p;
	tb_insere_participantes_w := pls_conversao_itens_pck.insere_partic_conv_itens(tb_insere_participantes_w, nm_usuario_p);
	tb_participantes_w := pls_conversao_itens_pck.insere_partic_conv_itens(tb_participantes_w, nm_usuario_p);

end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conversao_itens_pck.conversao_itens_pos ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_analise_pos_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
