-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conversao_itens_pck.insere_proc_abertura_pct ( tb_insere_proc_p INOUT table_insere_proc_abert_pct, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


tb_seq_proc_w			pls_util_cta_pck.t_number_table;
nr_seq_regra_cooperado_proc_w	pls_conta_proc.nr_seq_regra_cooperado%type;
ie_ato_cooperado_proc_w		pls_conta_proc.ie_ato_cooperado%type;	
ind_w				integer := 0;
tb_seq_proc_recalc_w		pls_util_cta_pck.t_number_table;
tb_seq_regra_w			pls_util_cta_pck.t_number_table;
tb_ie_ato_w			pls_util_cta_pck.t_varchar2_table_1;
nr_seq_novo_proc_w 		pls_conta_proc.nr_sequencia%type;
ie_med_solic_coop_w		varchar(1);	
ie_med_exec_coop_w 		varchar(1);
ie_tipo_despesa_w		pls_conta_proc_v.ie_tipo_despesa%type;	
nr_seq_prestador_exec_w		pls_conta_proc_v.nr_seq_prestador_exec%type;	
nr_seq_prestador_solic_w	pls_conta_proc_v.nr_seq_prestador_solic%type;
nr_seq_prestador_prot_w		pls_conta_proc_v.nr_seq_prestador_prot%type;	
cd_procedimento_w		pls_conta_proc_v.cd_procedimento%type;	
ie_origem_proced_w		pls_conta_proc_v.ie_origem_proced%type;	
ie_tipo_protocolo_w		pls_conta_proc_v.ie_tipo_protocolo%type;	
ie_tipo_guia_w			pls_conta_proc_v.ie_tipo_guia%type;		
nr_seq_conta_w			pls_conta_proc_v.nr_seq_conta%type;

qt_reg integer := 0;

BEGIN

	if (tb_insere_proc_p.nr_sequencia.count > 0 ) then
				
		forall i in tb_insere_proc_p.nr_sequencia.first..tb_insere_proc_p.nr_sequencia.last
			insert  into pls_conta_proc(nr_sequencia, ie_via_acesso, ie_tecnica_utilizada,
				dt_procedimento, dt_inicio_proc, dt_fim_proc,
				tx_item, nr_seq_setor_atend, qt_procedimento_imp,
				vl_unitario_imp, vl_procedimento_imp, ie_status,
				nr_seq_proc_princ, nr_seq_pacote, cd_procedimento,
				nm_usuario, dt_atualizacao, nm_usuario_nrec,
				dt_atualizacao_nrec, ie_situacao, nr_seq_conta,
				ie_origem_proced,vl_liberado,vl_procedimento,
				qt_procedimento,vl_unitario,ie_tipo_despesa,
				nr_seq_regra_pct_fat, ie_lanc_manual_pos, nr_seq_proc_pct)
			values (	 nextval('pls_conta_proc_seq'), null, null,
				tb_insere_proc_p.dt_procedimento(i), tb_insere_proc_p.dt_inicio_proc(i), tb_insere_proc_p.dt_fim_proc(i),
				CASE WHEN tb_insere_proc_p.ie_tipo_despesa(i)='1' THEN  tb_insere_proc_p.tx_item(i)  ELSE 100 END , null, tb_insere_proc_p.qt_procedimento_imp(i),
				tb_insere_proc_p.vl_unitario_imp(i), tb_insere_proc_p.vl_procedimento_imp(i) , 'M',
				null, tb_insere_proc_p.nr_seq_pacote(i), tb_insere_proc_p.cd_procedimento(i),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), 'I', tb_insere_proc_p.nr_seq_conta(i),
				tb_insere_proc_p.ie_origem_proced(i), tb_insere_proc_p.vl_liberado(i), tb_insere_proc_p.vl_procedimento(i),
				tb_insere_proc_p.qt_procedimento(i), tb_insere_proc_p.vl_unitario(i), tb_insere_proc_p.ie_tipo_despesa(i),
				tb_insere_proc_p.nr_seq_regra_pct_fat(i), 'S', tb_insere_proc_p.nr_seq_proc_pct(i)
			)returning nr_sequencia bulk collect into tb_seq_proc_w;
			
		tb_seq_proc_w := pls_cta_proc_mat_regra_pck.cria_registro_regra_proc_p_t(tb_seq_proc_w, nm_usuario_p);
		-- pega os itens sem o sequencial tiss de cada conta, e gera o mesmo

		tb_seq_proc_w := pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_proc_t(tb_seq_proc_w, nm_usuario_p);
			
		--Necessario atualizar informaaao de ato cooperado, entao com os novos procedimentos inseridos faz esse trabalho

		for i in tb_seq_proc_w.first..tb_seq_proc_w.last loop
			
			select	a.ie_tipo_despesa,
				a.nr_seq_prestador_exec,
				a.nr_seq_prestador_solic,
				a.nr_seq_prestador_prot,
				a.cd_procedimento,
				a.ie_origem_proced,
				a.ie_tipo_protocolo,
				a.ie_tipo_guia,
				a.nr_seq_conta	
			into STRICT	ie_tipo_despesa_w,	
			        nr_seq_prestador_exec_w,	
			        nr_seq_prestador_solic_w,
			        nr_seq_prestador_prot_w,	
			        cd_procedimento_w,	
			        ie_origem_proced_w,	
			        ie_tipo_protocolo_w,	
			        ie_tipo_guia_w,		
			        nr_seq_conta_w		
			from	pls_conta_proc_v 	a
			where	nr_sequencia 	= tb_seq_proc_w(i);
			
				
				CALL pls_gravar_log_conta(	nr_seq_conta_w, tb_seq_proc_w(i), null,
				'Procedimento '||tb_seq_proc_w(i)||' gerado a partir da abertura de pacote! ', nm_usuario_p);
							
				--Define o ato cooperado	

						
				qt_reg := tb_insere_proc_p.ie_medico_solic_coope.count;
						
				nr_seq_novo_proc_w := tb_seq_proc_w(i);
				ie_med_solic_coop_w:= tb_insere_proc_p.ie_medico_solic_coope(ind_w);
				ie_med_exec_coop_w := tb_insere_proc_p.ie_medico_exec_coope(ind_w);
	
				pls_obter_tipo_ato_cooperado(	cd_procedimento_w, ie_origem_proced_w, nr_seq_novo_proc_w,
								'P', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, 
								nr_seq_prestador_prot_w, null, ie_med_solic_coop_w,	
								ie_med_exec_coop_w, null, ie_tipo_protocolo_w, 
								ie_tipo_guia_w, ie_tipo_despesa_w, null,
								nr_seq_regra_cooperado_proc_w, ie_ato_cooperado_proc_w);
							
				tb_seq_proc_recalc_w(ind_w)	:= tb_seq_proc_w(i);
				tb_seq_regra_w(ind_w)		:= nr_seq_regra_cooperado_proc_w;
				tb_ie_ato_w(ind_w)		:= ie_ato_cooperado_proc_w;
				ind_w := ind_w + 1;

		end loop;
			
		if (tb_seq_proc_w.count > 0) then
		
			forall j in tb_seq_proc_recalc_w.first..tb_seq_proc_recalc_w.last
				update 	pls_conta_proc
				set	nr_seq_regra_cooperado	= tb_seq_regra_w(j),
					ie_ato_cooperado	= tb_ie_ato_w(j)
				where	nr_sequencia 		= tb_seq_proc_recalc_w(j);
		
		end if;
		
		commit;
	end if;
	tb_insere_proc_p.ie_medico_exec_coope.delete;
	tb_insere_proc_p.ie_medico_solic_coope.delete;
	tb_insere_proc_p.nr_sequencia.delete; 		
	tb_insere_proc_p.dt_procedimento.delete; 	
	tb_insere_proc_p.dt_inicio_proc.delete;		
	tb_insere_proc_p.dt_fim_proc.delete;		
	tb_insere_proc_p.qt_procedimento_imp.delete; 	
	tb_insere_proc_p.vl_unitario_imp.delete;		
	tb_insere_proc_p.vl_procedimento_imp.delete; 	
	tb_insere_proc_p.nr_seq_pacote.delete;	 	
	tb_insere_proc_p.cd_procedimento.delete;		
	tb_insere_proc_p.nr_seq_conta.delete;		
	tb_insere_proc_p.ie_origem_proced.delete;	
	tb_insere_proc_p.vl_liberado.delete;		
	tb_insere_proc_p.vl_procedimento.delete;		
	tb_insere_proc_p.qt_procedimento.delete;		
	tb_insere_proc_p.vl_unitario.delete;		
	tb_insere_proc_p.ie_tipo_despesa.delete;		
	tb_insere_proc_p.tx_item.delete;
	tb_insere_proc_p.nr_seq_regra_pct_fat.delete;	
	tb_insere_proc_p.nr_seq_proc_pct.delete;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conversao_itens_pck.insere_proc_abertura_pct ( tb_insere_proc_p INOUT table_insere_proc_abert_pct, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
