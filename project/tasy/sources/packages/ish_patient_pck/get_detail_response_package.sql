-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ish_patient_pck.get_detail_response ( nr_sequencia_p bigint) AS $body$
DECLARE



nr_seq_regra_w			intpd_eventos_sistema.nr_seq_regra_conv%type;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;

pessoa_fisica_w			pessoa_fisica%rowtype;
person_name_w			person_name%rowtype;
priv_localizacao_paciente_w   priv_localizacao_paciente%rowtype;

pessoa_fisica_paroquia_w		pessoa_fisica_paroquia%rowtype;
pessoa_classif_w			pessoa_classif%rowtype;
pessoa_fisica_idioma_w		pessoa_fisica_idioma%rowtype;
pf_codigo_externo_w		pf_codigo_externo%rowtype;
pf_forma_tratamento_w		pf_forma_tratamento%rowtype;

ie_tipo_complemento_w		compl_pessoa_fisica.ie_tipo_complemento%type;
nr_seq_tipo_compl_adic_w		compl_pessoa_fisica.nr_seq_tipo_compl_adic%type;
ds_complemento_w			compl_pessoa_fisica.ds_complemento%type;

ds_erro_w			varchar(4000);
dt_atualizacao_w			timestamp;
nm_usuario_w			varchar(15);
usernametasy_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w			varchar(15);
i				integer;

nr_seq_doc_origem_w		intpd_fila_transmissao.nr_seq_documento%type;
xml_w				xml;
addphones_w			xml;
addresses_w			xml;
patientdata_w			xml;
ds_xml_w				text;

nr_seq_hcm_seg_hea_w		hcm_segmento.nr_sequencia%type;
nr_seq_hcm_patienten_w		hcm_patienten.nr_sequencia%type;
nr_seq_hcm_seg_pat_w		hcm_segmento.nr_sequencia%type;
nr_seq_mensagem_w		hcm_segmento.nr_seq_mensagem%type;
nr_seq_hcm_seg_pmr_w		hcm_segmento.nr_sequencia%type;
nr_seq_hcm_mensagem_w		hcm_segmento.nr_seq_mensagem%type;
oldpatno_w			hcm_pat_zusammenfuhrung.oldpatno%type;
qt_erro_w				bigint;
ds_endereco_w			varchar(255);
ie_new_patient_w		boolean := false;
ie_regra_pront_w		funcao_parametro.vl_parametro_padrao%type;

c01 CURSOR FOR
SELECT	*
from	xmltable('/PatientData' passing patientdata_w columns
	client	varchar(3)	path	'Client',
	patientid	varchar(10)	path	'Patientid',
	--chkdigitpat	varchar2(1)	path	'Chkdigitpat',--	no!

	extpatid	varchar(20)	path	'ExtPatId',
	institution	varchar(4)	path	'Institution',--	no!
	--inststext	varchar2(15)	path	'InstStext',--	no!

	lastnamepat	varchar(30)	path	'LastNamePat',
	stdlnamepat	varchar(30)	path	'StdLnamePat',
	frstnamepat	varchar(30)	path	'FrstNamePat',
	stdfnamepat	varchar(30)	path	'StdFnamePat',
	birthname	varchar(30)	path	'BirthName',
	stdbnamepat	varchar(30)	path	'StdBnamePat',
	dob	varchar(10)	path	'Dob',
	birthctry	varchar(3)	path	'Birthctry',
	--birthctryiso	varchar2(2)	path	'BirthctryIso',--	no!

	--birthctrytext	varchar2(15)	path	'BirthctryText',--	no!

	birthplace	varchar(25)	path	'Birthplace',
	sex	varchar(1)	path	'Sex',
	sexext	varchar(1)	path	'SexExt',
	--sexstext	varchar2(10)	path	'SexStext',

	pseudo	varchar(30)	path	'Pseudo',
	--formaddrs	varchar2(2)	path	'FormAddrs',--	no!

	--formaddrsstxt	varchar2(5)	path	'FormAddrsStxt',--	no!

	--formaddrstxt	varchar2(25)	path	'FormAddrsTxt',--	no!

	title	varchar(15)	path	'Title',
	affix	varchar(15)	path	'Affix',
	prefix	varchar(15)	path	'Prefix',
	fullnamepat	varchar(30)	path	'FullNamePat',
	pataddrno	varchar(10)	path	'PatAddrNo',--	tbd!
	--pataddr2no	varchar2(10)	path	'PatAddr2No',--	tbd!

	marstat	varchar(1)	path	'MarStat',
	marstattext	varchar(6)	path	'MarStatText',
	reldenom	varchar(2)	path	'RelDenom',
	reldenomstxt	varchar(4)	path	'RelDenomStxt',
	--reldenomtext	varchar2(25)	path	'RelDenomText',

	nationality	varchar(3)	path	'Nationality',
	--nationalityiso	varchar2(2)	path	'NationalityIso',

	--nationtext	varchar2(15)	path	'NationText',

	patlangu	varchar(1)	path	'PatLangu',
	--patlanguiso	varchar2(2)	path	'PatLanguIso',

	--langutext	varchar2(16)	path	'LanguText',

	organdonor	varchar(1)	path	'OrganDonor',
	vip	varchar(1)	path	'Vip',
	expired	varchar(1)	path	'Expired',
	dtodeathfrom	varchar(10)	path	'DtODeathFrom',
	tmodeathfrom	varchar(8)	path	'TmODeathFrom',
	dtodeathto	varchar(10)	path	'DtODeathTo',
	tmodeathto	varchar(8)	path	'TmODeathTo',
	cofdeath	varchar(3)	path	'COfDeath',
	--cofdeathtxt	varchar2(20)	path	'COfDeathtxt',

	emergadm	varchar(1)	path	'EmergAdm',
	--quickadm	varchar2(1)	path	'QuickAdm',--	tbd!

	--nonresident	varchar2(1)	path	'NonResident',--	no!

	--inactive	varchar2(1)	path	'Inactive',--	no!

	publistblock	varchar(1)	path	'Publistblock',
	religlist	varchar(1)	path	'ReligList',
	parish	varchar(80)	path	'Parish',
	parishdistrict	varchar(11)	path	'ParishDistrict',
	parishtext	varchar(20)	path	'ParishText',
	race	varchar(2)	path	'Race',
	--racetext	varchar2(15)	path	'RaceText',

	ssn	varchar(20)	path	'Ssn',
	--doctype	varchar2(2)	path	'DocType',--	no!

	--doctypetext	varchar2(15)	path	'DocTypeText',--	no!

	--docno	varchar2(15)	path	'DocNo',--	no!

	occupation	varchar(25)	path	'Occupation',
	employerid	varchar(10)	path	'Employerid',
	empname	varchar(30)	path	'EmpName',
	empaddrno	varchar(10)	path	'EmpAddrNo',--	no!
	contactp1lname	varchar(30)	path	'Contactp1Lname',
	contactp1fname	varchar(30)	path	'Contactp1Fname',
	contactp1relsh	varchar(1)	path	'Contactp1Relsh',
	contactp1relint	varchar(1)	path	'Contactp1Relint',
	contactp1reltxt	varchar(15)	path	'Contactp1Reltxt',
	contactp1lglrep	varchar(1)	path	'Contactp1Lglrep',
	contactp1extid	varchar(20)	path	'Contactp1Extid',--	tbd!
	contactp1addrno	varchar(10)	path	'Contactp1Addrno',--	tbd!
	contactp2lname	varchar(30)	path	'Contactp2Lname',
	contactp2fname	varchar(30)	path	'Contactp2Fname',
	contactp2relsh	varchar(1)	path	'Contactp2Relsh',
	contactp2relint	varchar(1)	path	'Contactp2Relint',
	contactp2reltxt	varchar(15)	path	'Contactp2Reltxt',
	contactp2lglrep	varchar(1)	path	'Contactp2Lglrep',
	contactp2extid	varchar(20)	path	'Contactp2Extid',
	contactp2addrno	varchar(10)	path	'Contactp2Addrno',--	tbd!
	--famphys	varchar2(10)	path	'FamPhys',--	no!

	refphys	varchar(10)	path	'RefPhys',
	refphys2	varchar(10)	path	'RefPhys2',
	--user1	varchar2(20)	path	'User1',--	tbd!

	--user2	varchar2(20)	path	'User2',--	tbd!

	--user3	varchar2(10)	path	'User3',--	tbd!

	--user4	varchar2(10)	path	'User4',--	tbd!

	--user5	varchar2(50)	path	'User5',--	tbd!

	--user6	varchar2(1)	path	'User6',--	tbd!

	creationdate	varchar(10)	path	'CreationDate',
	creationuser	varchar(12)	path	'CreationUser',
	updatedate	varchar(10)	path	'UpdateDate',
	updateuser	varchar(12)	path	'UpdateUser',
	cancelind	varchar(1)	path	'CancelInd',
	canceluser	varchar(12)	path	'CancelUser',
	canceldate	varchar(10)	path	'CancelDate',
	employedsince	varchar(10)	path	'EmployedSince',--	no!
	--unknowndob	varchar2(1)	path	'UnknownDob',--	no!

	--istatbirthpl	varchar2(6)	path	'IstatBirthpl',--	tbd!

	--taxnumber	varchar2(20)	path	'Taxnumber',--	tbd!

	--taxnumberindic	varchar2(1)	path	'TaxnumberIndic',--	tbd!

	--stpcode	varchar2(16)	path	'Stpcode',--	tbd!

	--stpcodeexpiry	varchar2(10)	path	'StpcodeExpiry',--	tbd!

	--consentpersdata	varchar2(1)	path	'ConsentPersdata',--	tbd!

	--birthrank	varchar2(1)	path	'BirthRank',--	tbd!

	--flagextorderer	varchar2(1)	path	'FlagExtOrderer',--	tbd!

	--dthloc	varchar2(2)	path	'DthLoc',--	tbd!

	--postdisphys	varchar2(10)	path	'PostDisPhys',--	tbd!

	--postdisphysoutp	varchar2(10)	path	'PostDisPhysOutp',--	tbd!

	--lastnamepatlong	varchar2(70)	path	'LastNamePatLong',--	no!

	--stdlnamepatlong	varchar2(80)	path	'StdLnamePatLong',--	no!

	--frstnamepatlong	varchar2(70)	path	'FrstNamePatLong',--	no!

	--stdfnamepatlong	varchar2(80)	path	'StdFnamePatLong',--	no!

	--birthnamelong	varchar2(70)	path	'BirthNameLong',--	no!

	--stdbnamepatlong	varchar2(80)	path	'StdBnamePatLong',--	no!

	titleaca2	varchar(4)	path	'TitleAca2',
	titleaca2txt	varchar(20)	path	'TitleAca2txt'
	--sexspecialization	varchar2(1)	path	'SexSpecialization',--	tbd!

	--sexspecializationtxt	varchar2(60)	path	'SexSpecializationTxt',--	tbd!

	)
where	length(patientid) > 0

union all

SELECT	*
from	xmltable('/PatientData' passing patientdata_w columns
	client	varchar(3)	path	'CLIENT',
	patientid	varchar(10)	path	'PATIENTID',
	--chkdigitpat	varchar2(1)	path	'CHKDIGITPAT',--	no!

	extpatid	varchar(20)	path	'EXT_PAT_ID',
	institution	varchar(4)	path	'INSTITUTION',--	no!
	--inststext	varchar2(15)	path	'INST_STEXT',--	no!

	lastnamepat	varchar(30)	path	'LAST_NAME_PAT',
	stdlnamepat	varchar(30)	path	'STD_LNAME_PAT',
	frstnamepat	varchar(30)	path	'FRST_NAME_PAT',
	stdfnamepat	varchar(30)	path	'STD_FNAME_PAT',
	birthname	varchar(30)	path	'BIRTH_NAME',
	stdbnamepat	varchar(30)	path	'STD_BNAME_PAT',
	dob	varchar(10)	path	'DOB',
	birthctry	varchar(3)	path	'BIRTHCTRY',
	--birthctryiso	varchar2(2)	path	'BIRTHCTRY_ISO',--	no!

	--birthctrytext	varchar2(15)	path	'BIRTHCTRY_TEXT',--	no!

	birthplace	varchar(25)	path	'BIRTHPLACE',
	sex	varchar(1)	path	'SEX',
	sexext	varchar(1)	path	'SEX_EXT',
	--sexstext	varchar2(10)	path	'SEX_STEXT',

	pseudo	varchar(30)	path	'PSEUDO',
	--formaddrs	varchar2(2)	path	'FORM_ADDRS',--	no!

	--formaddrsstxt	varchar2(5)	path	'FORM_ADDRS_STXT',--	no!

	--formaddrstxt	varchar2(25)	path	'FORM_ADDRS_TXT',--	no!

	title	varchar(15)	path	'TITLE',
	affix	varchar(15)	path	'AFFIX',
	prefix	varchar(15)	path	'PREFIX',
	fullnamepat	varchar(30)	path	'FULL_NAME_PAT',
	pataddrno	varchar(10)	path	'PAT_ADDR_NO',--	tbd!
	--pataddr2no	varchar2(10)	path	'PAT_ADDR2_NO',--	tbd!

	marstat	varchar(1)	path	'MAR_STAT',
	marstattext	varchar(6)	path	'MAR_STAT_TEXT',
	reldenom	varchar(2)	path	'REL_DENOM',
	reldenomstxt	varchar(4)	path	'REL_DENOM_STXT',
	--reldenomtext	varchar2(25)	path	'REL_DENOM_TEXT',

	nationality	varchar(3)	path	'NATIONALITY',
	--nationalityiso	varchar2(2)	path	'NATIONALITY_ISO',

	--nationtext	varchar2(15)	path	'NATION_TEXT',

	patlangu	varchar(1)	path	'PAT_LANGU',
	--patlanguiso	varchar2(2)	path	'PAT_LANGU_ISO',

	--langutext	varchar2(16)	path	'LANGU_TEXT',

	organdonor	varchar(1)	path	'ORGAN_DONOR',
	vip	varchar(1)	path	'VIP',
	expired	varchar(1)	path	'EXPIRED',
	dtodeathfrom	varchar(10)	path	'DT_O_DEATH_FROM',
	tmodeathfrom	varchar(8)	path	'TM_O_DEATH_FROM',
	dtodeathto	varchar(10)	path	'DT_O_DEATH_TO',
	tmodeathto	varchar(8)	path	'TM_O_DEATH_TO',
	cofdeath	varchar(3)	path	'C_OF_DEATH',
	--cofdeathtxt	varchar2(20)	path	'C_OF_DEATHTXT',

	emergadm	varchar(1)	path	'EMERG_ADM',
	--quickadm	varchar2(1)	path	'QUICK_ADM',--	tbd!

	--nonresident	varchar2(1)	path	'NON_RESIDENT',--	no!

	--inactive	varchar2(1)	path	'INACTIVE',--	no!

	publistblock	varchar(1)	path	'PUBLISTBLOCK',
	religlist	varchar(1)	path	'RELIG_LIST',
	parish	varchar(80)	path	'PARISH',
	parishdistrict	varchar(11)	path	'PARISH_DISTRICT',
	parishtext	varchar(20)	path	'PARISH_TEXT',
	race	varchar(2)	path	'RACE',
	--racetext	varchar2(15)	path	'RACE_TEXT',

	ssn	varchar(20)	path	'SSN',
	--doctype	varchar2(2)	path	'DOC_TYPE',--	no!

	--doctypetext	varchar2(15)	path	'DOC_TYPE_TEXT',--	no!

	--docno	varchar2(15)	path	'DOC_NO',--	no!

	occupation	varchar(25)	path	'OCCUPATION',
	employerid	varchar(10)	path	'EMPLOYERID',
	empname	varchar(30)	path	'EMP_NAME',
	empaddrno	varchar(10)	path	'EMP_ADDR_NO',--	no!
	contactp1lname	varchar(30)	path	'CONTACTP1_LNAME',
	contactp1fname	varchar(30)	path	'CONTACTP1_FNAME',
	contactp1relsh	varchar(1)	path	'CONTACTP1_RELSH',
	contactp1relint	varchar(1)	path	'CONTACTP1_RELINT',
	contactp1reltxt	varchar(15)	path	'CONTACTP1_RELTXT',
	contactp1lglrep	varchar(1)	path	'CONTACTP1_LGLREP',
	contactp1extid	varchar(20)	path	'CONTACTP1_EXTID',--	tbd!
	contactp1addrno	varchar(10)	path	'CONTACTP1_ADDRNO',--	tbd!
	contactp2lname	varchar(30)	path	'CONTACTP2_LNAME',
	contactp2fname	varchar(30)	path	'CONTACTP2_FNAME',
	contactp2relsh	varchar(1)	path	'CONTACTP2_RELSH',
	contactp2relint	varchar(1)	path	'CONTACTP2_RELINT',
	contactp2reltxt	varchar(15)	path	'CONTACTP2_RELTXT',
	contactp2lglrep	varchar(1)	path	'CONTACTP2_LGLREP',
	contactp2extid	varchar(20)	path	'CONTACTP2_EXTID',
	contactp2addrno	varchar(10)	path	'CONTACTP2_ADDRNO',--	tbd!
	--famphys	varchar2(10)	path	'FAM_PHYS',--	no!

	refphys	varchar(10)	path	'REF_PHYS',
	refphys2	varchar(10)	path	'REF_PHYS2',
	--user1	varchar2(20)	path	'USER1',--	tbd!

	--user2	varchar2(20)	path	'USER2',--	tbd!

	--user3	varchar2(10)	path	'USER3',--	tbd!

	--user4	varchar2(10)	path	'USER4',--	tbd!

	--user5	varchar2(50)	path	'USER5',--	tbd!

	--user6	varchar2(1)	path	'USER6',--	tbd!

	creationdate	varchar(10)	path	'CREATION_DATE',
	creationuser	varchar(12)	path	'CREATION_USER',
	updatedate	varchar(10)	path	'UPDATE_DATE',
	updateuser	varchar(12)	path	'UPDATE_USER',
	cancelind	varchar(1)	path	'CANCEL_IND',
	canceluser	varchar(12)	path	'CANCEL_USER',
	canceldate	varchar(10)	path	'CANCEL_DATE',
	employedsince	varchar(10)	path	'EMPLOYED_SINCE',--	no!
	--unknowndob	varchar2(1)	path	'UNKNOWN_DOB',--	no!

	--istatbirthpl	varchar2(6)	path	'ISTAT_BIRTHPL',--	tbd!

	--taxnumber	varchar2(20)	path	'TAXNUMBER',--	tbd!

	--taxnumberindic	varchar2(1)	path	'TAXNUMBER_INDIC',--	tbd!

	--stpcode	varchar2(16)	path	'STPCODE',--	tbd!

	--stpcodeexpiry	varchar2(10)	path	'STPCODE_EXPIRY',--	tbd!

	--consentpersdata	varchar2(1)	path	'CONSENT_PERSDATA',--	tbd!

	--birthrank	varchar2(1)	path	'BIRTH_RANK',--	tbd!

	--flagextorderer	varchar2(1)	path	'FLAG_EXT_ORDERER',--	tbd!

	--dthloc	varchar2(2)	path	'DTH_LOC',--	tbd!

	--postdisphys	varchar2(10)	path	'POST_DIS_PHYS',--	tbd!

	--postdisphysoutp	varchar2(10)	path	'POST_DIS_PHYS_OUTP',--	tbd!

	--lastnamepatlong	varchar2(70)	path	'LAST_NAME_PAT_LONG',--	no!

	--stdlnamepatlong	varchar2(80)	path	'STD_LNAME_PAT_LONG',--	no!

	--frstnamepatlong	varchar2(70)	path	'FRST_NAME_PAT_LONG',--	no!

	--stdfnamepatlong	varchar2(80)	path	'STD_FNAME_PAT_LONG',--	no!

	--birthnamelong	varchar2(70)	path	'BIRTH_NAME_LONG',--	no!

	--stdbnamepatlong	varchar2(80)	path	'STD_BNAME_PAT_LONG',--	no!

	titleaca2	varchar(4)	path	'TITLE_ACA2',
	titleaca2txt	varchar(20)	path	'TITLE_ACA2TXT'
	--sexspecialization	varchar2(1)	path	'SEX_SPECIALIZATION',--	tbd!

	--sexspecializationtxt	varchar2(60)	path	'SEX_SPECIALIZATION_TXT',--	tbd!

	)
where	length(patientid) > 0;

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	a.*,
	somente_numero(a.seqno) ordem
from	xmltable('/AddPhones/item' passing addphones_w columns
	addrno		varchar(10)	path	'AddrNo',		-- compl_pessoa_fisica	-> nr_endereco
	seqno		varchar(3)	path	'SeqNo',		-- compl_pessoa_fisica  	-> nr_sequencia
	phoneno		varchar(30)	path	'Phoneno',	-- compl_pessoa_fisica	-> nr_telefone
	extension		varchar(10)	path	'Extension'	-- compl_pessoa_fisica 	-> nr_ramal

	) a
where	length(phoneno) > 0
and	addrno = c01_w.pataddrno

union all

SELECT	a.*,
	somente_numero(a.seqno) ordem
from	xmltable('/AddPhones/item' passing addphones_w columns
	addrno		varchar(10)	path	'ADDR_NO',	-- compl_pessoa_fisica	-> nr_endereco
	seqno		varchar(3)	path	'SEQ_NO',	-- compl_pessoa_fisica  	-> nr_sequencia
	phoneno		varchar(30)	path	'PHONE_NO',	-- compl_pessoa_fisica	-> nr_telefone
	extension		varchar(10)	path	'EXTENSION'	-- compl_pessoa_fisica 	-> nr_ramal

	) a
where	length(phoneno) > 0
and	addrno = c01_w.pataddrno
order by ordem;

c02_w	c02%rowtype;

c03 CURSOR FOR
SELECT	a.*,
	somente_numero(a.addrno) ordem,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.occupation END  occupation,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.employerid END  employerid,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.empname END  empname,
	substr(CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1fname || ' ' || c01_w.contactp1lname WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2fname || c01_w.contactp2lname END ,1,255) contactpname,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1lglrep WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2lglrep END  contactplglrep,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1relsh WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2relsh END  contactprelsh,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  'EMP' WHEN a.addrno=c01_w.contactp1addrno THEN  'CT1' WHEN a.addrno=c01_w.contactp2addrno THEN  'CT2' WHEN a.addrno=c01_w.pataddrno THEN  'PAT'  ELSE 'OTH' END  ds_tipo,
	CASE WHEN a.addrno=c01_w.pataddrno THEN  0 WHEN a.addrno=c01_w.contactp1addrno THEN  1 WHEN a.addrno=c01_w.contactp2addrno THEN  2  ELSE 9 END  ie_ordem,
	coalesce(CASE WHEN a.addrno=c01_w.empaddrno THEN  2 WHEN a.addrno=c01_w.contactp1addrno THEN  CASE WHEN c01_w.contactp1relsh='X' THEN  3 END  WHEN a.addrno=c01_w.contactp2addrno THEN  CASE WHEN c01_w.contactp2relsh='X' THEN  3 END  WHEN a.addrno=c01_w.pataddrno THEN  1 END ,9) ie_tipo_complemento
from	xmltable('/Addresses/item' passing addresses_w columns
	addrno		varchar(10)	path	'AddrNo',	-- compl_pessoa_fisica	-> nr_endereco
	country		varchar(3)	path	'Country',	-- compl_pessoa_fisica 	-> nr_seq_pais
	countryiso	varchar(2)	path	'CountryIso',	-- compl_pessoa_fisica	->
	countrytext	varchar(15)	path	'CountryText',	-- compl_pessoa_fisica 	->
	region		varchar(3)	path	'Region',	-- compl_pessoa_fisica	-> sg_estado
	regiontext	varchar(20)	path	'RegionText',	-- compl_pessoa_fisica 	->
	pcd		varchar(10)	path	'Pcd',	-- compl_pessoa_fisica	-> cd_cep
	city		varchar(40)	path	'City',	-- compl_pessoa_fisica 	-> ds_municipio
	district	varchar(40)	path	'District',	-- compl_pessoa_fisica 	-> ds_bairro
	strno		varchar(40)	path	'StrNo',	-- compl_pessoa_fisica 	-> ds_endereco
	phoneno		varchar(30)	path	'Phoneno',	-- compl_pessoa_fisica	-> nr_telefone
	extension	varchar(10)	path	'Extension',	-- compl_pessoa_fisica 	-> nr_ramal
	faxno		varchar(30)	path	'Faxno',	-- compl_pessoa_fisica 	-> ds_fax
	faxextension	varchar(10)	path	'Faxextension',	-- compl_pessoa_fisica 	-> nr_ddd_fax
	building	varchar(10)	path	'Building',	-- compl_pessoa_fisica 	-> ds_complemento
	floor		varchar(10)	path	'Floor',	-- compl_pessoa_fisica 	-> ds_complemento
	unit		varchar(10)	path	'Unit',	-- compl_pessoa_fisica 	-> ds_complemento
	email		varchar(241)	path	'EMail',	-- compl_pessoa_fisica 	-> ds_email
	houseno		varchar(10)	path	'HouseNo',	-- compl_pessoa_fisica 	-> ds_complemento
	addrstring	varchar(50)	path	'AddrString',	-- compl_pessoa_fisica 	-> ds_bairro
	stdstreet	varchar(40)	path	'StdStreet',	-- compl_pessoa_fisica 	-> ds_fonetica
	strsup		varchar(40)	path	'StrSup',	--compl_pessoa_fisica 	-> ds_complemento
	streetlong	varchar(60)	path	'Streetlong',	-- compl_pessoa_fisica 	-> ds_endereco
	stdstreetlong	varchar(60)	path	'Stdstreetlong', 	-- compl_pessoa_fisica 	-> ds_endereco
	contactp1relint	varchar(1)	path	'Contactp1relint',	-- compl_pessoa_fisica 	-> nr_seq_parentesco
	contactp1extid	varchar(20)	path	'Contactp1extid',	-- compl_pessoa_fisica 	-> cd_pessoa_fisica_ref
	strsuppl1	varchar(60)	path	'StrSuppl1',	--compl_pessoa_fisica 	-> ds_complemento
   	stdcomunitycode	varchar(30)	path	'stdcomunitycode'	--compl_pessoa_fisica 	-> nr_seq_comunity_code

	) a
where	somente_numero(a.addrno) > 0

union all

SELECT	a.*,
	somente_numero(a.addrno) ordem,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.occupation END  occupation,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.employerid END  employerid,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.empname END  empname,
	substr(CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1fname || ' ' || c01_w.contactp1lname WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2fname || c01_w.contactp2lname END ,1,255) contactpname,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1lglrep WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2lglrep END  contactplglrep,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1relsh WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2relsh END  contactprelsh,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  'EMP' WHEN a.addrno=c01_w.contactp1addrno THEN  'CT1' WHEN a.addrno=c01_w.contactp2addrno THEN  'CT2' WHEN a.addrno=c01_w.pataddrno THEN  'PAT'  ELSE 'OTH' END  ds_tipo,
	CASE WHEN a.addrno=c01_w.pataddrno THEN  0 WHEN a.addrno=c01_w.contactp1addrno THEN  1 WHEN a.addrno=c01_w.contactp2addrno THEN  2  ELSE 9 END  ie_ordem,
	coalesce(CASE WHEN a.addrno=c01_w.empaddrno THEN  2 WHEN a.addrno=c01_w.contactp1addrno THEN  CASE WHEN c01_w.contactp1relsh='X' THEN  3 END  WHEN a.addrno=c01_w.contactp2addrno THEN  CASE WHEN c01_w.contactp2relsh='X' THEN  3 END  WHEN a.addrno=c01_w.pataddrno THEN  1 END ,9) ie_tipo_complemento
from	xmltable('/Addresses/item' passing addresses_w columns
	addrno		varchar(10)	path	'ADDR_NO',	-- compl_pessoa_fisica	-> nr_endereco
	country		varchar(3)	path	'COUNTRY',	-- compl_pessoa_fisica 	-> nr_seq_pais
	countryiso	varchar(2)	path	'COUNTRY_ISO',	-- compl_pessoa_fisica	->
	countrytext	varchar(15)	path	'COUNTRY_TEXT',	-- compl_pessoa_fisica 	->
	region		varchar(3)	path	'REGION',	-- compl_pessoa_fisica	-> sg_estado
	regiontext	varchar(20)	path	'REGION_TEXT',	-- compl_pessoa_fisica 	->
	pcd		varchar(10)	path	'PCD',	-- compl_pessoa_fisica	-> cd_cep
	city		varchar(40)	path	'CITY',	-- compl_pessoa_fisica 	-> ds_municipio
	district	varchar(40)	path	'DISTRICT',	-- compl_pessoa_fisica 	-> ds_bairro
	strno		varchar(40)	path	'STR_NO',	-- compl_pessoa_fisica 	-> ds_endereco
	phoneno		varchar(30)	path	'PHONENO',	-- compl_pessoa_fisica	-> nr_telefone
	extension	varchar(10)	path	'EXTENSION',	-- compl_pessoa_fisica 	-> nr_ramal
	faxno		varchar(30)	path	'FAXNO',	-- compl_pessoa_fisica 	-> ds_fax
	faxextension	varchar(10)	path	'FAXEXTENSION',	-- compl_pessoa_fisica 	-> nr_ddd_fax
	building	varchar(10)	path	'BUILDING',	-- compl_pessoa_fisica 	-> ds_complemento
	floor		varchar(10)	path	'FLOOR',	-- compl_pessoa_fisica 	-> ds_complemento
	unit		varchar(10)	path	'UNIT',	-- compl_pessoa_fisica 	-> ds_complemento
	email		varchar(241)	path	'E_MAIL',	-- compl_pessoa_fisica 	-> ds_email
	houseno		varchar(10)	path	'HOUSE_NO',	-- compl_pessoa_fisica 	-> ds_complemento
	addrstring	varchar(50)	path	'ADDR_STRING',	-- compl_pessoa_fisica 	-> ds_complemento
	stdstreet	varchar(40)	path	'STD_STREET',	--compl_pessoa_fisica 	-> ds_fonetica
	strsup		varchar(40)	path	'STR_SUP',	-- compl_pessoa_fisica 	-> ds_fonetica
	streetlong	varchar(60)	path	'STREET_LONG',	--compl_pessoa_fisica 	-> ds_complemento
	stdstreetlong	varchar(60)	path	'STD_STREET_LONG',	-- compl_pessoa_fisica 	-> ds_endereco
	contactp1relint varchar(1)	path	'CONTACTP1_RELINT',	-- compl_pessoa_fisica 	-> nr_seq_parentesco
	contactp1extid	varchar(20)	path	'CONTACTP1_EXTID',	-- compl_pessoa_fisica 	-> cd_pessoa_fisica_ref
	strsuppl1	varchar(60)	path	'STR_SUPPL1',	--compl_pessoa_fisica 	-> ds_complemento
  	stdcomunitycode	varchar(30)	path	'stdcomunitycode'	--compl_pessoa_fisica 	-> nr_seq_comunity_code

	) a
where	somente_numero(a.addrno) > 0
order by ordem;

c03_w	c03%rowtype;

ie_status_w			intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';
nr_seq_agrupador_w		intpd_fila_transmissao.nr_seq_agrupador%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
reg_integracao_p		gerar_int_padrao.reg_integracao;
nr_localidade_w			cep_localidade.nr_localidade%type;


BEGIN
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);

begin
delete	FROM intpd_log_recebimento
where	nr_seq_fila = nr_sequencia_p;

select	a.nr_seq_documento,
	coalesce(b.ie_conversao,'I'),
	b.nr_seq_sistema,
	b.nr_seq_projeto_xml,
	b.nr_seq_regra_conv,
	a.ds_xml_retorno,
	a.nr_seq_agrupador
into STRICT	nr_seq_doc_origem_w,
	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w,
	ds_xml_w,
	nr_seq_agrupador_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;
exception
when others then
	null;
end;

ish_converter_response(nr_sequencia_p, ds_xml_w, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		ie_response_procedure = 'S'
	where	nr_sequencia = nr_sequencia_p;
else
	begin
	select	a.addphones,
		a.addresses,
		a.patientdata
	into STRICT	addphones_w,
		addresses_w,
		patientdata_w
	from	xmltable(
			xmlnamespaces(
			'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:PatientGetdetailResponse' passing xml_w columns
		addphones xmltype path 'AddPhones',
		addresses xmltype path 'Addresses',
		patientdata xmltype path 'PatientData') a;

	open c01;
	loop
	fetch c01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		begin

        intpd_processar_atributo(reg_integracao_w,'NM_USUARIO_NREC',coalesce(c01_w.creationuser,c01_w.updateuser),'N', usernametasy_w);

		--verificar se a mesma ja esta cadastrada na base

		select	max(a.cd_pessoa_fisica)
		into STRICT	cd_pessoa_fisica_w
		from	pf_codigo_externo a
		where	a.cd_pessoa_fisica_externo = c01_w.patientid
		and	a.ie_tipo_codigo_externo = 'ISH'
		and	exists (SELECT 1
			from	pessoa_fisica x
			where	x.cd_pessoa_fisica = a.cd_pessoa_fisica);

		if (coalesce(cd_pessoa_fisica_w,'NULL') <> 'NULL') then
			select	*
			into STRICT	pessoa_fisica_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		else
			pessoa_fisica_w.cd_pessoa_fisica	:=	null;
		end if;
		exception
		when others then
			begin
			pf_codigo_externo_w.cd_pessoa_fisica	:=	null;
			pessoa_fisica_w.cd_pessoa_fisica	:=	null;
			end;
		end;
		
		if (substr(coalesce(ish_obter_se_reg_alterado(nr_sequencia_p, c01_w.creationuser, c01_w.updateuser),'S'),1,1) = 'S') then
			--faz o lock dos registros relacionados a este paciente na fila.

			CALL ish_lock_fila('81',c01_w.patientid);

			nm_usuario_w		:=	usernametasy_w;
			begin
			dt_atualizacao_w		:=	to_date(c01_w.updatedate,'yyyy-mm-dd');
			exception
			when others then
				dt_atualizacao_w	:=	clock_timestamp();
			end;

			nm_usuario_nrec_w		:=	usernametasy_w;
			begin
			dt_atualizacao_nrec_w	:=	to_date(c01_w.creationdate,'yyyy-mm-dd');
			exception
			when others then
				dt_atualizacao_nrec_w	:=	null;
			end;

      begin
      select	*
      into STRICT	person_name_w
      from	person_name
      where	nr_sequencia = pessoa_fisica_w.nr_seq_person_name;
      exception
      when others then
        person_name_w.nr_sequencia	:=	null;
      end;

      reg_integracao_w.nm_tabela		:=	'PERSON_NAME';
      reg_integracao_w.nm_elemento	:=	'PatientData';
      reg_integracao_w.nr_seq_visao	:=	0;

      intpd_processar_atributo(reg_integracao_w, 'DS_FAMILY_NAME', c01_w.lastnamepat, 'N', person_name_w.ds_family_name);
      intpd_processar_atributo(reg_integracao_w, 'DS_GIVEN_NAME', c01_w.frstnamepat, 'N', person_name_w.ds_given_name);
      intpd_processar_atributo(reg_integracao_w, 'DS_COMPONENT_NAME_1', c01_w.prefix, 'N', person_name_w.ds_component_name_1);
      intpd_processar_atributo(reg_integracao_w, 'DS_COMPONENT_NAME_3', c01_w.affix, 'N', person_name_w.ds_component_name_3);

      if (reg_integracao_w.qt_reg_log = 0) then
        begin
        if (coalesce(person_name_w.nr_sequencia::text, '') = '') then
          begin
          select	nextval('person_name_seq')
          into STRICT	person_name_w.nr_sequencia
;

          person_name_w.dt_atualizacao	:=	dt_atualizacao_w;
          person_name_w.dt_atualizacao_nrec	:=	clock_timestamp();
          person_name_w.nm_usuario		:=	nm_usuario_w;
          person_name_w.nm_usuario_nrec	:=	nm_usuario_w;
          person_name_w.ds_type		:=	'main';

          insert into person_name values (person_name_w.*);

          pessoa_fisica_w.nr_seq_person_name	:=	person_name_w.nr_sequencia;
          end;
        else
          update	person_name
          set	row = person_name_w
          where	nr_sequencia = person_name_w.nr_sequencia;
        end if;
        end;
      end if;

      --intpd_processar_atributo(reg_integracao_w, 'DS_NACIONALIDADE', c01_w.birthctrytext,	'N', nacionalidade_w.ds_nacionalidade);


      reg_integracao_w.nm_tabela		:=	'PESSOA_FISICA';
      reg_integracao_w.nm_elemento	:=	'PatientData';
      reg_integracao_w.nr_seq_visao	:=	0;

      begin
      pessoa_fisica_w.dt_nascimento	:=	to_date(c01_w.dob,'yyyy-mm-dd');
      exception
      when others then
        pessoa_fisica_w.dt_nascimento	:=	null;
      end;

      intpd_processar_atributo(reg_integracao_w, 'IE_SEXO', c01_w.sexext, 'S', pessoa_fisica_w.ie_sexo);
      intpd_processar_atributo(reg_integracao_w, 'DS_APELIDO', c01_w.pseudo, 'N', pessoa_fisica_w.ds_apelido);

      if (length(c01_w.title) > 0) then
        begin
        begin
        select	*
        into STRICT	pf_forma_tratamento_w
        from	pf_forma_tratamento
        where	upper(ds_forma_tratamento) = upper(c01_w.title)  LIMIT 1;
        exception
        when others then
          begin
          if (reg_integracao_w.qt_reg_log = 0) then
            begin
            select	nextval('pf_forma_tratamento_seq')
            into STRICT	pf_forma_tratamento_w.nr_sequencia
;

            pf_forma_tratamento_w.dt_atualizacao		:=	clock_timestamp();
            pf_forma_tratamento_w.nm_usuario		:=	nm_usuario_w;
            pf_forma_tratamento_w.dt_atualizacao_nrec	:=	clock_timestamp();
            pf_forma_tratamento_w.nm_usuario_nrec	:=	nm_usuario_w;
            pf_forma_tratamento_w.ie_situacao		:=	'A';
            pf_forma_tratamento_w.ds_forma_tratamento	:=	c01_w.title;
            pf_forma_tratamento_w.ds_sigla		:=	c01_w.title;


            insert into pf_forma_tratamento values (pf_forma_tratamento_w.*);
            end;
          end if;
          end;
        end;
        pessoa_fisica_w.nr_seq_forma_trat	:=	pf_forma_tratamento_w.nr_sequencia;
        end;
      end if;

      intpd_processar_atributo(reg_integracao_w, 'NM_PESSOA_FISICA', c01_w.fullnamepat, 'N', pessoa_fisica_w.nm_pessoa_fisica);
      intpd_processar_atributo(reg_integracao_w, 'IE_ESTADO_CIVIL', c01_w.marstattext, 'S', pessoa_fisica_w.ie_estado_civil);
      intpd_processar_atributo(reg_integracao_w, 'CD_RELIGIAO', c01_w.reldenomstxt, 'S', pessoa_fisica_w.cd_religiao);
      intpd_processar_atributo(reg_integracao_w, 'CD_NACIONALIDADE', c01_w.nationality, 'S', pessoa_fisica_w.cd_nacionalidade);
      --intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_NOME_SOLTEIRO', c01_w.birthname, 'N', pessoa_fisica_w.nr_seq_nome_solteiro);

      intpd_processar_atributo(reg_integracao_w, 'DS_FONETICA', c01_w.stdbnamepat, 'N', pessoa_fisica_w.ds_fonetica);
      intpd_processar_atributo(reg_integracao_w, 'CD_NACIONALIDADE', c01_w.birthctry, 'S', pessoa_fisica_w.cd_nacionalidade);

      begin
      select	max(cd_cep)
      into STRICT	nr_localidade_w
      from	cep_localidade_v
      where	upper(nm_localidade) = upper(c01_w.birthplace);

      intpd_processar_atributo(reg_integracao_w, 'NR_CEP_CIDADE_NASC', nr_localidade_w, 'N', pessoa_fisica_w.nr_cep_cidade_nasc);
      exception
      when others then
        intpd_processar_atributo(reg_integracao_w, 'NR_CEP_CIDADE_NASC', c01_w.birthplace, 'S', pessoa_fisica_w.nr_cep_cidade_nasc);
      end;

      --intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_FORMA_TRAT', c01_w.titleaca2txt, 'S', pessoa_fisica_w.nr_seq_forma_trat);

      intpd_processar_atributo(reg_integracao_w, 'IE_GRAU_INSTRUCAO', c01_w.titleaca2, 'S', pessoa_fisica_w.ie_grau_instrucao);

      if (c01_w.organdonor = 'X') then
        pessoa_fisica_w.ie_doador	:=	'S';
      else
        pessoa_fisica_w.ie_doador	:=	'N';
      end if;

      intpd_processar_atributo(reg_integracao_w, 'CD_CID_DIRETA', c01_w.cofdeath, 'S', pessoa_fisica_w.cd_cid_direta);
      intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_COR_PELE', c01_w.race, 'S', pessoa_fisica_w.nr_seq_cor_pele);
      intpd_processar_atributo(reg_integracao_w, 'CD_RFC', c01_w.ssn, 'N', pessoa_fisica_w.cd_rfc);

      begin
      pessoa_fisica_w.dt_obito	:=	to_date(c01_w.dtodeathfrom || c01_w.tmodeathfrom,'yyyy-mm-ddhh24:mi:ss');
      exception
      when others then
        pessoa_fisica_w.dt_obito	:=	null;
      end;

      pessoa_fisica_w.nm_usuario			:= nm_usuario_w;
      pessoa_fisica_w.dt_atualizacao		:= dt_atualizacao_w;
      --pessoa_fisica_w.nm_usuario_nrec		:= nm_usuario_nrec_w; Comentado OS 1961125, somente deve atualizar o nrec na criacao da PF

      --pessoa_fisica_w.dt_atualizacao_nrec	:= dt_atualizacao_nrec_w;


      select	coalesce(max(vl_parametro),'BASE')
	  into STRICT	ie_regra_pront_w
	  from	funcao_parametro
	  where	cd_funcao	= 0
	  and	nr_sequencia	= 120;

      if (coalesce(pessoa_fisica_w.nr_prontuario::text, '') = '' and
		ie_regra_pront_w = 'BASE') then

        select	nextval('prontuario_seq')
        into STRICT	pessoa_fisica_w.nr_prontuario
;
      end if;

      if (reg_integracao_w.qt_reg_log = 0) then
        begin
        if (coalesce(pessoa_fisica_w.cd_pessoa_fisica, 'NULL') <> 'NULL') then
          update	pessoa_fisica
          set	row = pessoa_fisica_w
          where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;
        else
          begin
          select	nextval('pessoa_fisica_seq')
          into STRICT	pessoa_fisica_w.cd_pessoa_fisica
;

          pessoa_fisica_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
          pessoa_fisica_w.dt_atualizacao_nrec	:= dt_atualizacao_nrec_w;

          pessoa_fisica_w.ie_tipo_pessoa		:= '2';

          insert into pessoa_fisica values (pessoa_fisica_w.*);
          ie_new_patient_w	:= true;

          select	nextval('pf_codigo_externo_seq')
          into STRICT	pf_codigo_externo_w.nr_sequencia
;

          pf_codigo_externo_w.cd_pessoa_fisica		:= pessoa_fisica_w.cd_pessoa_fisica;
          pf_codigo_externo_w.cd_pessoa_fisica_externo	:= c01_w.patientid;
          pf_codigo_externo_w.nm_usuario			:= nm_usuario_w;
          pf_codigo_externo_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
          pf_codigo_externo_w.dt_atualizacao			:= dt_atualizacao_w;
          pf_codigo_externo_w.dt_atualizacao_nrec		:= dt_atualizacao_nrec_w;
          pf_codigo_externo_w.ie_tipo_codigo_externo	:= 'ISH';

          insert into pf_codigo_externo values (pf_codigo_externo_w.*);
          end;
        end if;
        end;
      end if;

      /*'Exclui os registros com idioma diferente do registrado no IS-H'*/


      delete	FROM pessoa_fisica_idioma
      where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;

      reg_integracao_w.nm_tabela	:=	'PESSOA_FISICA_IDIOMA';
      reg_integracao_w.nm_elemento	:=	'PatientData';
      reg_integracao_w.nr_seq_visao	:=	0;

      if (coalesce(c01_w.patlangu,'NULL') <> 'NULL') then
        begin
        intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_IDIOMA', c01_w.patlangu, 'S', pessoa_fisica_idioma_w.nr_seq_idioma);

        begin
        select	*
        into STRICT	pessoa_fisica_idioma_w
        from	pessoa_fisica_idioma
        where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
        and	nr_seq_idioma = pessoa_fisica_idioma_w.nr_seq_idioma  LIMIT 1;
        exception
        when others then
          begin
          if (reg_integracao_w.qt_reg_log = 0) then
            begin
            select	nextval('pessoa_fisica_idioma_seq')
            into STRICT	pessoa_fisica_idioma_w.nr_sequencia
;

            intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_IDIOMA', c01_w.patlangu, 'S', pessoa_fisica_idioma_w.nr_seq_idioma);
            pessoa_fisica_idioma_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
            pessoa_fisica_idioma_w.ie_fluencia		:=	'A';
            pessoa_fisica_idioma_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
            pessoa_fisica_idioma_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
            pessoa_fisica_idioma_w.nm_usuario		:=	nm_usuario_w;
            pessoa_fisica_idioma_w.dt_atualizacao		:=	dt_atualizacao_w;

            if (pessoa_fisica_idioma_w.nr_seq_idioma IS NOT NULL AND pessoa_fisica_idioma_w.nr_seq_idioma::text <> '') then
              insert into pessoa_fisica_idioma values (pessoa_fisica_idioma_w.*);
            end if;
            end;
          end if;
          end;
        end;
        end;
      end if;

      reg_integracao_w := ish_patient_pck.gerar_pessoa_classif(reg_integracao_w, pessoa_fisica_w.cd_pessoa_fisica, 'VIP', c01_w.vip, nr_seq_regra_w, ie_conversao_w, nm_usuario_w, dt_atualizacao_w);
      reg_integracao_w := ish_patient_pck.gerar_pessoa_classif(reg_integracao_w, pessoa_fisica_w.cd_pessoa_fisica, 'PUBLISTBLOCK', c01_w.publistblock, nr_seq_regra_w, ie_conversao_w, nm_usuario_w, dt_atualizacao_w);
      reg_integracao_w := ish_patient_pck.gerar_pessoa_classif(reg_integracao_w, pessoa_fisica_w.cd_pessoa_fisica, 'RELIGLIST', c01_w.religlist, nr_seq_regra_w, ie_conversao_w, nm_usuario_w, dt_atualizacao_w);

      /*
      atendimento_paciente_w.cd_pessoa_fisica	:= pessoa_fisica_w.cd_pessoa_fisica;
      atendimento_paciente_w.cd_medico_preferencia	:= intpd_conv('ATENDIMENTO_PACIENTE', 'CD_MEDICO_PREFERENCIA', c01_w.refphys, nr_seq_regra_w, ie_conversao_w, 'I');
      atendimento_paciente_w.nm_usuario		:= usernametasy;
      atendimento_paciente_w.dt_atualizacao		:= sysdate;
      */


      reg_integracao_w.nm_tabela		:=	'ATENDIMENTO_PACIENTE';
      reg_integracao_w.nm_elemento	:=	'PatientData';
      reg_integracao_w.nr_seq_visao	:=	0;

      /*
      if	(c01_w.emergadm = 'X') then
        intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_ATENDIMENTO', 'EMERGADM', 'S', atendimento_paciente_w.ie_tipo_atendimento);
      else
        intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_ATENDIMENTO', 1, 'N', atendimento_paciente_w.ie_tipo_atendimento);
      end if;
      */


    --	intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO_REFERIDO', c01_w.refphys2, 'S', atendimento_paciente_w.cd_medico_referido);


      if (length(c01_w.parish) > 0) and (reg_integracao_w.qt_reg_log = 0) then
        begin
        begin
        select	*
        into STRICT	pessoa_fisica_paroquia_w
        from	pessoa_fisica_paroquia
        where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
        and	nm_paroquia = c01_w.parish  LIMIT 1;
        exception
        when others then
          pessoa_fisica_paroquia_w.nr_sequencia	:=	null;
        end;

        reg_integracao_w.nm_tabela		:=	'PESSOA_FISICA_PAROQUIA';
        reg_integracao_w.nm_elemento	:=	'PatientData';
        reg_integracao_w.nr_seq_visao	:=	0;

        intpd_processar_atributo(reg_integracao_w, 'NM_PAROQUIA ', c01_w.parish, 'N', pessoa_fisica_paroquia_w.nm_paroquia);
        intpd_processar_atributo(reg_integracao_w, 'DS_ENDERECO ', c01_w.parishdistrict, 'N', pessoa_fisica_paroquia_w.ds_endereco);
        intpd_processar_atributo(reg_integracao_w, 'DS_OBSERVACAO ', c01_w.parishtext, 'N', pessoa_fisica_paroquia_w.ds_observacao);

        if (coalesce(pessoa_fisica_paroquia_w.nr_sequencia::text, '') = '') then
          begin
          select	nextval('pessoa_fisica_paroquia_seq')
          into STRICT	pessoa_fisica_paroquia_w.nr_sequencia
;

          pessoa_fisica_paroquia_w.cd_pessoa_fisica 	:= pessoa_fisica_w.cd_pessoa_fisica;
          pessoa_fisica_paroquia_w.nm_usuario		:= nm_usuario_w;
          pessoa_fisica_paroquia_w.dt_atualizacao		:= dt_atualizacao_w;

          insert into pessoa_fisica_paroquia values (pessoa_fisica_paroquia_w.*);
          end;
        else
          update	pessoa_fisica_paroquia
          set	row = pessoa_fisica_paroquia_w
          where	nr_sequencia = pessoa_fisica_paroquia_w.nr_sequencia;
        end if;
        end;
      end if;

      --a.ie_tipo_complemento = '3' /*responsavel */

      --and a.ie_tipo_complemento = '2' /*comercial*/

      --and a.ie_tipo_complemento = '9' /*adicional*/

      --nr_seq_tipo_compl_adic 8 /*responsavel legal*/


	  delete from atend_convenio_end_cob
	  where		  cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;

      delete	FROM compl_pessoa_fisica			
      where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;

      open c03;
      loop
      fetch c03 into
        c03_w;
      EXIT WHEN NOT FOUND; /* apply on c03 */
        begin
        reg_integracao_w.nm_tabela		:=	'COMPL_PESSOA_FISICA';
        reg_integracao_w.nm_elemento	:=	'PatientData';
        reg_integracao_w.nr_seq_visao	:=	0;

        ie_tipo_complemento_w		:=	null;
        nr_seq_tipo_compl_adic_w	:=	null;

        if (c03_w.ds_tipo in ('PAT')) then
          ie_tipo_complemento_w		:=	'1';
          nr_seq_tipo_compl_adic_w	:=	null;
        elsif (c03_w.ds_tipo in ('CT1','CT2')) then
          begin
          ie_tipo_complemento_w	:=	somente_numero(
                    intpd_conv(
                      'COMPL_PESSOA_FISICA',
                      'IE_TIPO_COMPLEMENTO',
                      c03_w.contactprelsh,
                      reg_integracao_w.nr_seq_regra_conversao,
                      reg_integracao_w.ie_conversao,
                      'I'));

          if	((ie_tipo_complemento_w > 0) and (ie_tipo_complemento_w not in (9))) then
            intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_COMPLEMENTO', c03_w.contactprelsh, 'S', ie_tipo_complemento_w);
            nr_seq_tipo_compl_adic_w	:=	null;
          else
            ie_tipo_complemento_w	:=	9;
            intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_COMPL_ADIC', c03_w.contactprelsh, 'S', nr_seq_tipo_compl_adic_w);

            if (coalesce(nr_seq_tipo_compl_adic_w::text, '') = '') then
              begin
              select	a.ds_valor
              into STRICT	nr_seq_tipo_compl_adic_w
              from	intpd_eventos_valores a,
                intpd_fila_transmissao b
              where	b.nr_sequencia = nr_sequencia_p
              and	b.nr_seq_evento_sistema = a.nr_seq_evento_sistema
              and	a.nm_elemento	= 'COMPL_PESSOA_FISICA'
              and	a.nm_atributo	= 'NR_SEQ_TIPO_COMPL_ADIC'
              and	a.ie_situacao = 'A'
              and	a.ie_vazio = 'S'  LIMIT 1;
              exception
              when others then
                nr_seq_tipo_compl_adic_w :=null;
              end;							
            end if;
          end if;
          end;
        end if;

        ds_complemento_w :=	substr(
          replace(c03_w.building,';','.') || ';' ||
          replace(c03_w.floor,';','.') || ';' ||
          replace(c03_w.unit,';','.') || ';' ||
          replace(c03_w.houseno,';','.'),1,40);

        if (ie_tipo_complemento_w = 1) then
          ds_endereco_w	:= c03_w.streetlong;
        else
          ds_endereco_w	:= c03_w.strno;
        end if;


          reg_integracao_w := ish_patient_pck.gerar_compl_pessoa_fisica(
          reg_integracao_w,  --> reg_integracao_p in out gerar_int_padrao.reg_integracao_conv,
          pessoa_fisica_w.cd_pessoa_fisica,  --> cd_pessoa_fisica_p in varchar2,
          ie_tipo_complemento_w,  --> ie_tipo_complemento_p in number,
          nr_seq_tipo_compl_adic_w,  --> nr_seq_tipo_compl_adic_p in number,
          c03_w.occupation,  --> cd_profissao_p in varchar2,
          c03_w.employerid,  --> cd_empresa_refer_p in varchar2,
          c03_w.contactpname,  --> nm_contato_p in varchar2,
          c03_w.phoneno,  --> nr_telefone_p in varchar2,
          c03_w.extension,  --> nr_ramal_p in varchar2,
          c03_w.faxno,  --> ds_fax_p in varchar2,
          c03_w.faxextension,  --> nr_ddd_fax_p in varchar2,
          c03_w.country,  --> nr_seq_pais_p in number,
          c03_w.region,  --> sg_estado_p in varchar2,
          c03_w.pcd,  --> cd_cep_p in varchar2,
          c03_w.city,  --> ds_municipio_p in varchar2,
          c03_w.district,  --> ds_bairro_p in varchar2,
          ds_endereco_w /*c03_w.streetlong*/
,  --> ds_endereco_p in varchar2,
          c03_w.houseno,  --> ds_compl_end nr_endereco_p in varchar2,
          c03_w.strsuppl1,  --> ds_complemento_p in varchar2,
          c03_w.email,  --> ds_email_p in varchar2,
          c03_w.stdstreet, c03_w.strsup, c03_w.contactp1relint, c03_w.contactp1extid, nm_usuario_w /*--> nm_usuario_p in varchar2*/
, c03_w.addrno, c03_w.ds_tipo, c01_w.institution, c01_w.client, c01_w.employedsince, c03_w.empname);
        end;
      end loop;
      close c03;

      /* SO 2166819
      open c02;
      loop
      fetch c02 into
        c02_w;
      exit when c02%notfound;
        begin
        reg_integracao_w.nm_tabela		:=	'COMPL_PESSOA_FISICA';
        reg_integracao_w.nm_elemento	:=	'PatientData';
        reg_integracao_w.nr_seq_visao	:=	0;

        update	compl_pessoa_fisica
        set	nr_telefone_celular = trim(c02_w.phoneno)
        where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
        and	ie_tipo_complemento = 1;
        
        exit;
        end;
      end loop;
      close c02;
      */


      if (c01_w.cancelind = 'X') and (pessoa_fisica_w.cd_pessoa_fisica IS NOT NULL AND pessoa_fisica_w.cd_pessoa_fisica::text <> '') and (reg_integracao_w.qt_reg_log = 0) then
          begin
            begin
              select  *
              into STRICT    priv_localizacao_paciente_w
              from    priv_localizacao_paciente
              where   cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica  LIMIT 1;
            exception
            when others then
              begin
                select  nextval('priv_localizacao_paciente_seq')
                into STRICT    priv_localizacao_paciente_w.nr_sequencia
;

                reg_integracao_w.nm_tabela  :=	'PRIV_LOCALIZACAO_PACIENTE';
                reg_integracao_w.nm_elemento  :=	'PatientData';
                priv_localizacao_paciente_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
                intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.canceluser, 'N', priv_localizacao_paciente_w.nm_usuario);
                intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_NREC', c01_w.canceluser, 'N', priv_localizacao_paciente_w.nm_usuario_nrec);
	              priv_localizacao_paciente_w.dt_atualizacao	:= coalesce(to_date(c01_w.canceldate,'yyyy-mm-dd'), clock_timestamp());
                priv_localizacao_paciente_w.dt_atualizacao_nrec	:= coalesce(to_date(c01_w.canceldate,'yyyy-mm-dd'), clock_timestamp());
                priv_localizacao_paciente_w.dt_inicio_bloqueio  := coalesce(to_date(c01_w.canceldate,'yyyy-mm-dd'), clock_timestamp());
                priv_localizacao_paciente_w.dt_fim_bloqueio := null;

                insert into priv_localizacao_paciente values (priv_localizacao_paciente_w.*);
              end;
            end;
					exception
					when others then
						ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
						--nao foi possivel excluir o paciente. codigo: #@cd_pessoa_fisica#@ erro: #@ds_erro#@

						reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=
											substr(	wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1032866,
														Vl_Macros_P => 'CD_PESSOA_FISICA='|| pessoa_fisica_w.cd_pessoa_fisica ||
														';DS_ERRO='||ds_erro_w),1,4000);
						reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;
					end;
			end if;
		end if;
		end;
	end loop;
	close c01;

	/*'Merge - Acerto de duplicidade'*/


	if (nr_seq_doc_origem_w IS NOT NULL AND nr_seq_doc_origem_w::text <> '') and (pessoa_fisica_w.cd_pessoa_fisica IS NOT NULL AND pessoa_fisica_w.cd_pessoa_fisica::text <> '') and (reg_integracao_w.qt_reg_log = 0) then
		begin
		
		begin
		select	nr_seq_segmento
		into STRICT	nr_seq_hcm_seg_pat_w
		from	hcm_patienten
		where	nr_sequencia = nr_seq_doc_origem_w;
		
		select	nr_seq_mensagem
		into STRICT	nr_seq_hcm_mensagem_w
		from	hcm_segmento
		where	nr_sequencia = nr_seq_hcm_seg_pat_w;

		begin
		select	nr_sequencia
		into STRICT	nr_seq_hcm_seg_pmr_w
		from	hcm_segmento
		where	nr_seq_mensagem = nr_seq_hcm_mensagem_w
		and	ie_tipo = 'PMR'  LIMIT 1;
		exception
		when others then
			nr_seq_hcm_seg_pmr_w	:=	null;
		end;

		select	oldpatno
		into STRICT	oldpatno_w
		from	hcm_pat_zusammenfuhrung
		where	nr_seq_segmento = nr_seq_hcm_seg_pmr_w;
		exception
		when others then
			oldpatno_w	:=	null;
		end;

		if (somente_numero(oldpatno_w) > 0) then
			begin
			begin
			select	*
			into STRICT	pf_codigo_externo_w
			from	pf_codigo_externo
			where	cd_pessoa_fisica_externo = oldpatno_w
			and	ie_tipo_codigo_externo = 'ISH'  LIMIT 1;
			exception
			when others then
				pf_codigo_externo_w.cd_pessoa_fisica	:=	null;
			end;

			if (pf_codigo_externo_w.cd_pessoa_fisica IS NOT NULL AND pf_codigo_externo_w.cd_pessoa_fisica::text <> '') then
				nm_usuario_w		:=	coalesce(usernametasy_w, current_setting('ish_patient_pck.usernametasy')::varchar(15));
				dt_atualizacao_w	:=	clock_timestamp();

				--Primeiro precisa executar como ie_acao_p = R para verificar os registros a serem transferidos.

				acertar_duplic_pessoa_fisica(
					pf_codigo_externo_w.cd_pessoa_fisica,	--cd_pessoa_origem_p varchar2,
					pessoa_fisica_w.cd_pessoa_fisica,	--cd_pessoa_destino_p varchar2,
					'R', 				-- ie_acao_p varchar2,
					nm_usuario_w,			--nm_usuario_p varchar2,
					'S',				--ie_desab_trigger_p varchar2,
					dt_atualizacao_w,			--dt_acerto_p date,
					qt_erro_w,			--qt_erro_p out number,
					1				--ie_altera_cpfrg_p number default 1
					);

				--Depois executa como ie_acao_p = T para transferir os dados.

				acertar_duplic_pessoa_fisica(
					pf_codigo_externo_w.cd_pessoa_fisica,	--cd_pessoa_origem_p varchar2,
					pessoa_fisica_w.cd_pessoa_fisica,	--cd_pessoa_destino_p varchar2,
					'T', 				-- ie_acao_p varchar2,
					nm_usuario_w,			--nm_usuario_p varchar2,
					'S',				--ie_desab_trigger_p varchar2,
					dt_atualizacao_w,			--dt_acerto_p date,
					qt_erro_w,			--qt_erro_p out number,
					1				--ie_altera_cpfrg_p number default 1
					);
			end if;
			end;
		end if;
		end;
	end if;

	if (reg_integracao_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/


		rollback;
		ie_new_patient_w	:= false;
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ie_response_procedure = 'S',
			ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status = 'S',
			ie_response_procedure = 'S',
			ds_log  = NULL,
			nr_doc_externo = pessoa_fisica_w.cd_pessoa_fisica
		where	nr_sequencia = nr_sequencia_p;
	end if;

	reg_integracao_w := gerar_int_padrao.gravar_log(reg_integracao_w);
	exception
	when others then
		begin
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;
		ie_new_patient_w	:= false;
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ie_response_procedure = 'S',
			ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		end;
	end;
end if;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;

commit;

if (ie_new_patient_w) then
	reg_integracao_p.ie_operacao	:=	'A';
	reg_integracao_p.nr_prontuario	:=	pessoa_fisica_w.nr_prontuario;
	reg_integracao_p.ie_funcionario	:=	'N';

	CALL gerar_int_padrao.set_executando_recebimento('N');
	reg_integracao_p.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
	reg_integracao_p.patientno		:=	c01_w.patientid;
	reg_integracao_p => reg_integracao_p := gerar_int_padrao.gravar_integracao(ie_evento_p => '12', nr_seq_documento_p => pessoa_fisica_w.cd_pessoa_fisica, nm_usuario_p => pessoa_fisica_w.nm_usuario, reg_integracao_p => reg_integracao_p); /*os 1756800*/

	CALL gerar_int_padrao.set_executando_recebimento('S');

	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_patient_pck.get_detail_response ( nr_sequencia_p bigint) FROM PUBLIC;
