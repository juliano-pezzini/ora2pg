-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_filtro_regra_event_rgl_pck.aplica_filtro_procedimento ( ie_considera_selecao_p INOUT boolean, qt_filtro_processado_p INOUT integer, ie_tipo_regra_p pls_pp_cta_combinada.ie_tipo_regra%type, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, ie_excecao_p pls_pp_cta_filtro.ie_excecao%type, nr_seq_filtro_p pls_pp_cta_filtro.nr_sequencia%type, dt_inicio_vigencia_p pls_pp_cta_combinada.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_pp_cta_combinada.dt_fim_vigencia%type, nr_seq_analise_rec_p pls_analise_conta.nr_sequencia%type, nr_seq_prot_rec_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_cta_rec_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
_ora2pg_r RECORD;
dados_restricao_w	varchar(10000);
valor_bind_w		sql_pck.t_dado_bind;
ds_campos_w		varchar(500);
ds_tabela_w		varchar(500);
ds_select_w		varchar(32000);
cursor_w		sql_pck.t_cursor;

tb_seq_conta_rec_w		pls_util_cta_pck.t_number_table;
tb_seq_resumo_rec_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_proc_rec_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_mat_rec_w		pls_util_cta_pck.t_number_table;
tb_dt_ref_rec_w			pls_util_cta_pck.t_date_table;
tb_seq_selecao_w		pls_util_cta_pck.t_number_table;
tb_ie_exame_coleta_rec_w	pls_util_cta_pck.t_varchar2_table_1;

ie_registro_valido_w		boolean;
tb_seq_conta_rec_ger_w		pls_util_cta_pck.t_number_table;
tb_seq_resumo_rec_ger_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_proc_rec_ger_w	pls_util_cta_pck.t_number_table;
tb_seq_conta_mat_rec_ger_w	pls_util_cta_pck.t_number_table;
tb_seq_selecao_ger_w		pls_util_cta_pck.t_number_table;
qt_reg_w			integer;

c_filtro CURSOR(nr_seq_filtro_pc	pls_pp_cta_filtro.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.ie_origem_proced,
		a.cd_procedimento,
		a.nr_seq_grupo_servico,
		a.ie_tipo_despesa_proc,
		a.ie_taxa_coleta
	from	pls_pp_cta_filtro_proc a
	where	a.nr_seq_pp_cta_filtro = nr_seq_filtro_pc
	and	a.ie_situacao = 'A';

BEGIN

ie_registro_valido_w := true;

-- se nao tiver informacoes da regra nao sera possivel aplicar os filtros

if (nr_seq_filtro_p IS NOT NULL AND nr_seq_filtro_p::text <> '') then
	
	qt_filtro_processado_p := 0;
	-- abrir vetor com todas as combinacoes de filtro da regra 

	for r_c_filtro_w in c_filtro(nr_seq_filtro_p) loop
	
		-- somente a primeira vez que passar no cursor atualiza apos isto nao atualiza mais

		if (qt_filtro_processado_p = 0) then
			-- atualizar o campo auxiliar que sera utilizado para sinalizar os registros que foram processados

			CALL CALL CALL CALL CALL pls_filtro_regra_event_rgl_pck.atualiza_campo_auxiliar(nr_id_transacao_p, nr_seq_filtro_p, ie_excecao_p);
		end if;
		
		begin
			-- restricao para todas as outras situacoes

			SELECT * FROM pls_filtro_regra_event_rgl_pck.obter_restricao_procedimento(	r_c_filtro_w.cd_area_procedimento, r_c_filtro_w.cd_especialidade, r_c_filtro_w.cd_grupo_proc, r_c_filtro_w.ie_origem_proced, r_c_filtro_w.cd_procedimento, r_c_filtro_w.nr_seq_grupo_servico, r_c_filtro_w.ie_tipo_despesa_proc, nr_seq_filtro_p, valor_bind_w) INTO STRICT _ora2pg_r;
 ds_campos_w := _ora2pg_r.ds_campos_p; ds_tabela_w := _ora2pg_r.ds_tabela_p; valor_bind_w := _ora2pg_r.valor_bind_p;
			-- montar o select padrao juntamente as restricoes

			valor_bind_w := pls_filtro_regra_event_rgl_pck.obter_select_filtro(	ie_considera_selecao_p, ie_tipo_regra_p, nr_id_transacao_p, ie_excecao_p, nr_seq_filtro_p, dt_inicio_vigencia_p, dt_fim_vigencia_p, nr_seq_analise_rec_p, nr_seq_prot_rec_p, nr_seq_cta_rec_p, cd_estabelecimento_p, ds_campos_w, ds_tabela_w, dados_restricao_w, valor_bind_w);
			-- executa o comando sql com os respectivos binds

			valor_bind_w := sql_pck.executa_sql_cursor(ds_select_w, valor_bind_w);
			
			loop
				fetch cursor_w bulk collect into tb_seq_conta_rec_w, tb_seq_resumo_rec_w, tb_seq_conta_proc_rec_w,
								 tb_seq_conta_mat_rec_w, tb_dt_ref_rec_w, tb_seq_selecao_w,
								 tb_ie_exame_coleta_rec_w
				limit pls_util_pck.qt_registro_transacao_w;
				exit when tb_seq_conta_rec_w.count = 0;
				
				-- limpa as tabelas e reinicia o contador a cada qt_registro_transacao_w

				tb_seq_conta_rec_ger_w.delete;
				tb_seq_conta_proc_rec_ger_w.delete;
				tb_seq_conta_mat_rec_ger_w.delete;
				tb_seq_selecao_ger_w.delete;
				qt_reg_w := 0;
				
				for i in tb_seq_conta_rec_w.first..tb_seq_conta_rec_w.last loop

					-- verifica se o registro e valido, feito isso para nao utilizar function em clausula where do cursor

					ie_registro_valido_w := pls_filtro_regra_event_rgl_pck.ie_reg_valido_fil_proce(r_c_filtro_w.ie_taxa_coleta,
											tb_ie_exame_coleta_rec_w(i));
											
					-- se o registro for valido alimenta as tabelas que serao passadas para serem inseridas/atualizadas no banco

					if (ie_registro_valido_w) then
						tb_seq_conta_rec_ger_w(qt_reg_w) := tb_seq_conta_rec_w(i);
						tb_seq_resumo_rec_ger_w(qt_reg_w) := tb_seq_resumo_rec_w(i);
						tb_seq_conta_proc_rec_ger_w(qt_reg_w) := tb_seq_conta_proc_rec_w(i);
						tb_seq_conta_mat_rec_ger_w(qt_reg_w) := tb_seq_conta_mat_rec_w(i);
						tb_seq_selecao_ger_w(qt_reg_w) := tb_seq_selecao_w(i);
						qt_reg_w := qt_reg_w + 1;
					end if;
				end loop;
				
				-- insere/atualiza todos os registros das listas na tabela de selecao

				CALL CALL CALL CALL CALL pls_filtro_regra_event_rgl_pck.gerencia_selecao_filtro(nr_id_transacao_p, nr_seq_filtro_p, ie_tipo_regra_p,
							ie_excecao_p, tb_seq_conta_rec_ger_w, tb_seq_resumo_rec_ger_w,
							tb_seq_conta_proc_rec_ger_w, tb_seq_conta_mat_rec_ger_w, tb_seq_selecao_ger_w,
							'S');
			end loop;
			close cursor_w;
		exception
			when others then
			-- se deu algo e o cursor esta aberto fecha ele

			if (cursor_w%isopen) then
				close cursor_w;
			end if;
			-- Tratar erro gerado no sql dinamico, sera inserido registro no log e abortado o processo exibindo mensagem de erro.

			CALL CALL CALL CALL CALL CALL pls_filtro_regra_event_rgl_pck.trata_erro_sql_dinamico(null, ds_select_w, null,
						nm_usuario_p, 'S');
		end;
		qt_filtro_processado_p := qt_filtro_processado_p + 1;
	end loop;
	
	-- se processou algum filtro e ainda nao deve ser considerada a tabela de selecao sinaliza para utilizar ela

	if (qt_filtro_processado_p > 0) then
		-- atualizar o campo definitivo que sera utilizado para sinalizar os registros que foram processados

		CALL CALL CALL CALL CALL pls_filtro_regra_event_rgl_pck.atualiza_campo_valido(nr_id_transacao_p, nr_seq_filtro_p, ie_excecao_p);
		-- seta para utilizar a tabela de selecao

		ie_considera_selecao_p := true;
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_filtro_regra_event_rgl_pck.aplica_filtro_procedimento ( ie_considera_selecao_p INOUT boolean, qt_filtro_processado_p INOUT integer, ie_tipo_regra_p pls_pp_cta_combinada.ie_tipo_regra%type, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, ie_excecao_p pls_pp_cta_filtro.ie_excecao%type, nr_seq_filtro_p pls_pp_cta_filtro.nr_sequencia%type, dt_inicio_vigencia_p pls_pp_cta_combinada.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_pp_cta_combinada.dt_fim_vigencia%type, nr_seq_analise_rec_p pls_analise_conta.nr_sequencia%type, nr_seq_prot_rec_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_cta_rec_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
