-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_obj_plussoft_pck.obter_tabela_preco_produtos ( nr_contrato_p pls_contrato.nr_contrato%type, pr_desconto_p bigint, cd_pessoa_fisica_p text, nr_seq_plano_p pls_plano.nr_sequencia%type, qt_idade_faixa_p bigint, qt_vidas_p bigint, ie_tipo_estipulante_p text) RETURNS SETOF T_TABELA_PRECO_PRODUTO_DATA AS $body$
DECLARE

					
linha_w				t_tabela_preco_produto_row;
qt_registro_w			bigint;
var_permite_manutencao_w	varchar(20);
var_perc_maximo_w		varchar(20);
ie_erro_w			varchar(1);
current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type			usuario.nm_usuario%type;
vl_perc_max_regra_desc_w	pls_regra_desc_man_preco.tx_desconto%type;

--Verifica regra de tabela de preco
current_setting('pls_obj_plussoft_pck.c01')::CURSOR CURSOR(	nr_seq_plano_pc		pls_plano.nr_sequencia%type) FOR
	SELECT	nr_seq_tabela
	from	pls_regra_simulador_web
	where	nr_seq_plano = nr_seq_plano_pc
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	clock_timestamp() between pls_util_pck.obter_dt_vigencia_null(dt_inicio_vigencia,'I') and pls_util_pck.obter_dt_vigencia_null(dt_fim_vigencia,'F');

--Verifica uma tabela de preco apenas do plano	
current_setting('pls_obj_plussoft_pck.c02')::CURSOR CURSOR(	nr_seq_plano_pc		pls_plano.nr_sequencia%type,
		nr_seq_tabela_pc	pls_tabela_preco.nr_sequencia%type,
		qt_vidas_pc		bigint) FOR
	SELECT	b.nr_seq_plano,
		a.nr_protocolo_ans,
		a.ds_plano,
		a.nm_fantasia,
		a.cd_scpa,
		c.nr_seq_tabela,
		c.qt_idade_inicial,
		c.qt_idade_final,
		c.qt_vidas_inicial,
		c.qt_vidas_final,
		c.vl_preco_atual,
		d.nr_sequencia nr_seq_faixa_item,
		b.nm_tabela
	FROM pls_faixa_etaria_item d, pls_plano_preco c, pls_plano a, pls_tabela_preco b
LEFT OUTER JOIN pls_regra_vidas_proposta e ON (b.nr_sequencia = e.nr_seq_tabela)
WHERE a.nr_sequencia 	= nr_seq_plano_pc and b.nr_seq_plano	= a.nr_sequencia and b.nr_sequencia	= nr_seq_tabela_pc and c.nr_seq_tabela = b.nr_sequencia and b.nr_seq_faixa_etaria = d.nr_seq_faixa_etaria and c.qt_idade_inicial = d.qt_idade_inicial and c.qt_idade_final = d.qt_idade_final  and ((coalesce(qt_vidas_pc::text, '') = '')
	or (coalesce(e.nr_seq_tabela::text, '') = '')
	or (qt_vidas_pc between e.qt_minima_vidas and e.qt_maxima_vidas));

--Verifica todas as tabelas de preco do plano
C03 CURSOR(	nr_seq_plano_pc		pls_plano.nr_sequencia%type,
		qt_vidas_pc		bigint) FOR
	SELECT	b.nr_seq_plano,
		a.nr_protocolo_ans,
		a.ds_plano,
		a.nm_fantasia,
		a.cd_scpa,
		c.nr_seq_tabela,
		c.qt_idade_inicial,
		c.qt_idade_final,
		c.qt_vidas_inicial,
		c.qt_vidas_final,
		c.vl_preco_atual,
		coalesce(d.nr_sequencia,999) nr_seq_faixa_item,
		b.nm_tabela
	FROM pls_plano_preco c, pls_plano a, pls_tabela_preco b
LEFT OUTER JOIN pls_faixa_etaria_item d ON (b.nr_seq_faixa_etaria = d.nr_seq_faixa_etaria)
WHERE a.nr_sequencia 	= nr_seq_plano_pc and b.nr_seq_plano	= a.nr_sequencia and c.nr_seq_tabela = b.nr_sequencia  and (c.qt_idade_inicial = d.qt_idade_inicial
	or	coalesce(c.qt_idade_inicial,0) = 0) and (c.qt_idade_final = d.qt_idade_final 
	or	coalesce(c.qt_idade_final,999) = 999);
	
--Verifica planos e tabelas de preco vinculados ao contrato 
C04 CURSOR(	nr_contrato_pc		pls_contrato.nr_contrato%type) FOR
	SELECT	a.nr_sequencia nr_seq_contrato,
		b.nr_seq_plano,
		c.nr_protocolo_ans,
		c.ds_plano,
		c.nm_fantasia,
		c.cd_scpa,
		b.nr_seq_tabela,
		d.qt_idade_inicial,
		d.qt_idade_final,
		d.qt_vidas_inicial,
		d.qt_vidas_final,
		d.vl_preco_atual,
		coalesce(e.nr_sequencia,999) nr_seq_faixa_item,
		f.nm_tabela
	FROM pls_plano_preco d, pls_plano c, pls_contrato_plano b, pls_contrato a, pls_tabela_preco f
LEFT OUTER JOIN pls_faixa_etaria_item e ON (f.nr_seq_faixa_etaria = e.nr_seq_faixa_etaria)
WHERE a.nr_contrato = nr_contrato_pc and b.nr_seq_plano = c.nr_sequencia and b.ie_situacao = 'A' and b.nr_seq_contrato = a.nr_sequencia and f.nr_seq_plano = c.nr_sequencia and f.nr_sequencia = b.nr_seq_tabela  and d.nr_seq_tabela = f.nr_sequencia and (d.qt_idade_inicial = e.qt_idade_inicial
	or    	coalesce(d.qt_idade_inicial,0) = 0) and (d.qt_idade_final = e.qt_idade_final 
	or    	coalesce(d.qt_idade_final,999) = 999);
BEGIN
--Encontra o usuario
begin
select  max(nm_usuario)
into STRICT  current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
from  usuario
where  cd_pessoa_fisica = cd_pessoa_fisica_p
and  ie_situacao = 'A';
exception
when others then
  PERFORM set_config('pls_obj_plussoft_pck.nm_usuario_w', null, false);
end;

ie_erro_w := 'N';
Obter_Param_Usuario(1315, 1, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, var_permite_manutencao_w);
Obter_Param_Usuario(1315, 3, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, var_perc_maximo_w);
vl_perc_max_regra_desc_w := pls_obter_max_desconto_tabela(null, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_tipo_estipulante_p);

if (coalesce(pr_desconto_p,0) > 0) then
	if (coalesce(var_permite_manutencao_w,'N') = 'N') then
		linha_w.ds_mensagem := wheb_mensagem_pck.get_texto(1110369);
		RETURN NEXT linha_w;
		ie_erro_w := 'S';
	elsif (coalesce((var_perc_maximo_w)::numeric ,0) < coalesce(pr_desconto_p,0)) and (var_perc_maximo_w IS NOT NULL AND var_perc_maximo_w::text <> '') then
		linha_w.ds_mensagem := wheb_mensagem_pck.get_texto(1110370);
		RETURN NEXT linha_w;
		ie_erro_w := 'S';
	elsif (coalesce(vl_perc_max_regra_desc_w, 0) < coalesce(pr_desconto_p, 0)) and (vl_perc_max_regra_desc_w IS NOT NULL AND vl_perc_max_regra_desc_w::text <> '') then
		linha_w.ds_mensagem := wheb_mensagem_pck.get_texto(1110371);
		RETURN NEXT linha_w;
		ie_erro_w := 'S';
	end if;
end if;

if (ie_erro_w = 'N') then
	--Primeiro verifica se a consulta eh para um plano especifico
	if (nr_seq_plano_p IS NOT NULL AND nr_seq_plano_p::text <> '') then
		begin
		--Verifica se existe regra
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_regra_simulador_web
		where	nr_seq_plano = nr_seq_plano_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	clock_timestamp() between pls_util_pck.obter_dt_vigencia_null(dt_inicio_vigencia,'I') and pls_util_pck.obter_dt_vigencia_null(dt_fim_vigencia,'F');
		
		--Verifica se existe regra
		if (qt_registro_w > 0) then
			--verifica regra do produto
			for r_C01_w in current_setting('pls_obj_plussoft_pck.c01')::CURSOR(nr_seq_plano_p) loop
				--Verifica faixas de preco para a tabela de preco definida para o plano
				for r_C02_w in current_setting('pls_obj_plussoft_pck.c02')::CURSOR(nr_seq_plano_p, r_C01_w.nr_seq_tabela, qt_vidas_p) loop
					linha_w.nr_seq_plano 		:= r_C02_w.nr_seq_plano;
					linha_w.nr_protocolo_ans 	:= r_C02_w.nr_protocolo_ans;
					linha_w.ds_plano 		:= r_C02_w.ds_plano;
					linha_w.nm_fantasia 		:= r_C02_w.nm_fantasia;
					linha_w.cd_scpa  		:= r_C02_w.cd_scpa;
					linha_w.nr_seq_tabela 		:= r_C02_w.nr_seq_tabela;
					linha_w.nm_tabela 		:= r_C02_w.nm_tabela;
					linha_w.qt_idade_inicial 	:= r_C02_w.qt_idade_inicial;
					linha_w.qt_idade_final 		:= r_C02_w.qt_idade_final;
					linha_w.qt_vidas_inicial 	:= r_C02_w.qt_vidas_inicial;
					linha_w.qt_vidas_final 		:= r_C02_w.qt_vidas_final;
					linha_w.vl_atual 		:= r_C02_w.vl_preco_atual - round(((r_C02_w.vl_preco_atual * coalesce(pr_desconto_p,0)) / 100),2);
					linha_w.nr_seq_faixa_item	:= r_C02_w.nr_seq_faixa_item;
					RETURN NEXT linha_w;
				end loop;
			end loop;
		else
			--Verifica faixas de preco para a tabela de preco definida para o plano
			for r_C03_w in C03(nr_seq_plano_p, qt_vidas_p) loop
				linha_w.nr_seq_plano 		:= r_C03_w.nr_seq_plano;
				linha_w.nr_protocolo_ans 	:= r_C03_w.nr_protocolo_ans;
				linha_w.ds_plano 		:= r_C03_w.ds_plano;
				linha_w.nm_fantasia 		:= r_C03_w.nm_fantasia;
				linha_w.cd_scpa  		:= r_C03_w.cd_scpa;
				linha_w.nr_seq_tabela 		:= r_C03_w.nr_seq_tabela;
				linha_w.nm_tabela 		:= r_C03_w.nm_tabela;
				linha_w.qt_idade_inicial 	:= r_C03_w.qt_idade_inicial;
				linha_w.qt_idade_final 		:= r_C03_w.qt_idade_final;
				linha_w.qt_vidas_inicial 	:= r_C03_w.qt_vidas_inicial;
				linha_w.qt_vidas_final 		:= r_C03_w.qt_vidas_final;
				linha_w.vl_atual 		:= r_C03_w.vl_preco_atual - round(((r_C03_w.vl_preco_atual * coalesce(pr_desconto_p,0)) / 100),2);
				linha_w.nr_seq_faixa_item	:= r_C03_w.nr_seq_faixa_item;
				RETURN NEXT linha_w;
			end loop;
		end if;
		
		exception
		when others then
			linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110368) || ' ' || sqlerrm(SQLSTATE) ,1,255);
			RETURN NEXT linha_w;
		end;
	--Depois verifica se sao planos de determinado contrato
	elsif (nr_contrato_p IS NOT NULL AND nr_contrato_p::text <> '') then
		begin
		--Verifica se existe o contrato
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_contrato
		where	nr_contrato = nr_contrato_p;
		
		--Verifica se existe o contrato
		if (qt_registro_w > 0) then
			--Verifica planos e tabelas de preco vinculadas ao contrato
			for r_C04_w in C04(nr_contrato_p) loop
				linha_w.nr_seq_contrato		:= r_C04_w.nr_seq_contrato;
				linha_w.nr_contrato		:= nr_contrato_p;
				linha_w.nr_seq_plano 		:= r_C04_w.nr_seq_plano;
				linha_w.nr_protocolo_ans 	:= r_C04_w.nr_protocolo_ans;
				linha_w.ds_plano 		:= r_C04_w.ds_plano;
				linha_w.nm_fantasia 		:= r_C04_w.nm_fantasia;
				linha_w.cd_scpa  		:= r_C04_w.cd_scpa;
				linha_w.nr_seq_tabela 		:= r_C04_w.nr_seq_tabela;
				linha_w.nm_tabela 		:= r_C04_w.nm_tabela;
				linha_w.qt_idade_inicial 	:= r_C04_w.qt_idade_inicial;
				linha_w.qt_idade_final 		:= r_C04_w.qt_idade_final;
				linha_w.qt_vidas_inicial 	:= r_C04_w.qt_vidas_inicial;
				linha_w.qt_vidas_final 		:= r_C04_w.qt_vidas_final;
				linha_w.vl_atual 		:= r_C04_w.vl_preco_atual - round(((r_C04_w.vl_preco_atual * coalesce(pr_desconto_p,0)) / 100),2);
				linha_w.nr_seq_faixa_item	:= r_C04_w.nr_seq_faixa_item;
				RETURN NEXT linha_w;
			end loop;
		else
			linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110372, 'NR_CONTRATO='||nr_contrato_p) ,1,255);
			RETURN NEXT linha_w;
		end if;
		exception
		when others then
			linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110367, 'NR_CONTRATO='||nr_contrato_p||';DS_ERRO='||sqlerrm(SQLSTATE)) ,1,255);
			RETURN NEXT linha_w;
		end;
	--Caso contrario apenas apesenta uma linha com erro
	else
		linha_w.ds_mensagem := wheb_mensagem_pck.get_texto(1110373);
		RETURN NEXT linha_w;
	end if;
end if;
--nao retorna nada
return;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_obj_plussoft_pck.obter_tabela_preco_produtos ( nr_contrato_p pls_contrato.nr_contrato%type, pr_desconto_p bigint, cd_pessoa_fisica_p text, nr_seq_plano_p pls_plano.nr_sequencia%type, qt_idade_faixa_p bigint, qt_vidas_p bigint, ie_tipo_estipulante_p text) FROM PUBLIC;
