-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_obj_plussoft_pck.gerar_contratacao ( nr_seq_proposta_p pls_proposta_adesao.nr_sequencia%type, ie_nota_titulo_p pls_contrato_pagador_fin.ie_geracao_nota_titulo%type, cd_pessoa_usuario_p pessoa_fisica.cd_pessoa_fisica%type, nr_contrato_p INOUT pls_contrato.nr_contrato%type, ie_resultado_p INOUT bigint, ds_mensagem_erro_p INOUT text) AS $body$
DECLARE

				
nr_contrato_w			pls_contrato.nr_contrato%type;
current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint		pls_contrato.nr_sequencia%type;
ie_tipo_proposta_w		pls_proposta_adesao.ie_tipo_proposta%type;
current_setting('pls_obj_plussoft_pck.cd_estabelecimento_w')::smallint		estabelecimento.cd_estabelecimento%type;
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
ie_status_w			pls_proposta_adesao.ie_status%type;
current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type			usuario.nm_usuario%type;

--beneficiarios contratados da proposta
current_setting('pls_obj_plussoft_pck.c01')::CURSOR CURSOR(	nr_seq_proposta_pc				pls_proposta_adesao.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia					nr_seq_segurado,
		pls_obter_dados_segurado(b.nr_sequencia,'CS')	ie_situacao,
		c.nr_contrato
	from	pls_proposta_beneficiario 	a,
		pls_segurado			b,
		pls_contrato			c
	where	a.nr_seq_proposta 		= nr_seq_proposta_pc
	and	b.nr_seq_pessoa_proposta 	= a.nr_sequencia
	and	c.nr_sequencia			= b.nr_seq_contrato;

current_setting('pls_obj_plussoft_pck.c02')::CURSOR CURSOR FOR
	SELECT 	nr_sequencia
	from 	pls_contrato_pagador
	where 	nr_seq_contrato = current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint;
BEGIN
--Inicializa OK
ie_resultado_p := 0;

--Encontra o usuario
begin
select	max(nm_usuario)
into STRICT	current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
from	usuario
where	cd_pessoa_fisica = cd_pessoa_usuario_p
and	ie_situacao = 'A';
exception
when others then
	PERFORM set_config('pls_obj_plussoft_pck.nm_usuario_w', null, false);
end;

--Verifica estabelecimento
begin
select	max(cd_estabelecimento)
into STRICT	current_setting('pls_obj_plussoft_pck.cd_estabelecimento_w')::smallint
from	pls_proposta_adesao
where	nr_sequencia = nr_seq_proposta_p;
exception
when others then
	PERFORM set_config('pls_obj_plussoft_pck.cd_estabelecimento_w', null, false);
end;

if (current_setting('pls_obj_plussoft_pck.cd_estabelecimento_w')::(smallint IS NOT NULL AND smallint::text <> '')) then
	--Verifica o tipo da proposta
	begin
	select	max(ie_tipo_proposta),
		max(ie_status)
	into STRICT	ie_tipo_proposta_w,
		ie_status_w
	from	pls_proposta_adesao
	where	nr_sequencia = nr_seq_proposta_p;
	exception
	when others then
		ie_tipo_proposta_w := null;
	end;
	
	if (ie_tipo_proposta_w IS NOT NULL AND ie_tipo_proposta_w::text <> '') then
		if (ie_status_w = 'T') then
			--1 - divergencia
			ie_resultado_p := 1;
			ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1110464);
		else
			--Gerar contratacao
			begin
			CALL pls_proposta_gerar_contrato( nr_seq_proposta_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, current_setting('pls_obj_plussoft_pck.cd_estabelecimento_w')::smallint);
			exception
			when others then
				--1 - divergencia
				ie_resultado_p := 1;
				ds_mensagem_erro_p := substr(wheb_mensagem_pck.get_texto(1110467) || ' ' || sqlerrm(SQLSTATE) ,1,255);
			end;
			
			--Caso proposta tenha gerado um novo contrato
			begin
			select	max(nr_contrato),
				max(nr_sequencia)
			into STRICT	nr_contrato_w,
				current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint
			from	pls_contrato
			where	nr_seq_proposta = nr_seq_proposta_p;
			exception
			when others then
				nr_contrato_w := null;
			end;
			
			/*	2               adesao a um contrato existente
				5               Inclusao de SCA a contrato existente
				8               Migracao + adesao a um contrato existente
				4               Migracao a um contrato existente
				9               Adaptacao de um contrato existente	*/
			if	((ie_tipo_proposta_w in ('2','5','8','4','9')) and (ie_resultado_p = 0)) then
				--beneficiarios contratados da proposta
				for r_c01_w in current_setting('pls_obj_plussoft_pck.c01')::CURSOR(nr_seq_proposta_p) loop
					--Apenas beneficiarios que estejam na situacao (adesao em aberto, Migracao em aberto)
					if (r_c01_w.ie_situacao in ('D','M')) then
						--Busca o contrato
						if (coalesce(nr_contrato_w::text, '') = '') then
							nr_contrato_w := r_c01_w.nr_contrato;
						end if;
						--Liberar beneficiario
						begin
						CALL pls_gerar_valor_segurado(	null,
										r_c01_w.nr_seq_segurado,
										'L',
										current_setting('pls_obj_plussoft_pck.cd_estabelecimento_w')::smallint,
										current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
										'S',
										null,
										'S',
										'S',
										'S',
										'S'	);
						exception
						when others then
							--1 - divergencia
							ie_resultado_p := 1;
							if (coalesce(ds_mensagem_erro_p::text, '') = '') then
								ds_mensagem_erro_p := substr(wheb_mensagem_pck.get_texto(1110468, 'DS_ERRO='||sqlerrm(SQLSTATE)),1,255);
							else
								ds_mensagem_erro_p := ds_mensagem_erro_p || substr(' ' || wheb_mensagem_pck.get_texto(1110468, 'DS_ERRO='||sqlerrm(SQLSTATE)) ,1,255);
							end if;
							
						end;
					end if;
				end loop;
			else
			/*	1               adesao a um contrato novo
				6               adesao a um contrato novo a partir de um contrato
				7               Migracao + adesao a um contrato novo
				3               Migracao a um contrato novo
			*/
			--Necessario aprovar o contrato, rotina aprovar_contrato
				if ((ie_nota_titulo_p IS NOT NULL AND ie_nota_titulo_p::text <> '') and (current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::(bigint IS NOT NULL AND bigint::text <> ''))) then
					open current_setting('pls_obj_plussoft_pck.c02')::CURSOR;
					loop
					fetch current_setting('pls_obj_plussoft_pck.c02')::into CURSOR
						nr_seq_pagador_w;
					EXIT WHEN NOT FOUND; /* apply on current_setting('pls_obj_plussoft_pck.c02')::CURSOR */
						begin
							update	pls_contrato_pagador_fin
							set	ie_geracao_nota_titulo = CASE WHEN ie_nota_titulo_p=1 THEN 'NT' WHEN ie_nota_titulo_p=2 THEN 'T' END ,
								nm_usuario  = current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
								dt_atualizacao = clock_timestamp()
							where 	nr_seq_pagador = nr_seq_pagador_w;
						end;
					end loop;
					close current_setting('pls_obj_plussoft_pck.c02')::CURSOR;
				end if;
			end if;
		end if;
	else
		--1 - divergencia
		ie_resultado_p := 1;
		ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1110468);
	end if;
else
	--1 - divergencia
	ie_resultado_p := 1;
	ds_mensagem_erro_p := wheb_mensagem_pck.get_texto(1110329);
end if;

nr_contrato_p := nr_contrato_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obj_plussoft_pck.gerar_contratacao ( nr_seq_proposta_p pls_proposta_adesao.nr_sequencia%type, ie_nota_titulo_p pls_contrato_pagador_fin.ie_geracao_nota_titulo%type, cd_pessoa_usuario_p pessoa_fisica.cd_pessoa_fisica%type, nr_contrato_p INOUT pls_contrato.nr_contrato%type, ie_resultado_p INOUT bigint, ds_mensagem_erro_p INOUT text) FROM PUBLIC;
