-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

/*
procedure obter_faixa_etaria(		nr_seq_tabela_p		in	number,
					qt_idade_p		in	number,
					nr_seq_plano_preco_p	out	number,
					vl_preco_p		out	number) is
					
qt_idade_w				number(10,0);
nr_seq_plano_preco_w			number(10,0);
nr_seq_plano_preco_atual_w		number(10,0);
qt_idade_inicial_w			number(10,0);
vl_preco_w				number(15,2);
vl_preco_atual_w			number(15,2);

cursor c02 is		-- select das faixas etarias
select	a.nr_sequencia,
	a.qt_idade_inicial,
	a.vl_preco_atual
from	pls_plano_preco a
where	a.nr_seq_tabela		= nr_seq_tabela_p
order 	by a.qt_idade_inicial desc;

begin

begin
qt_idade_w		:= qt_idade_p;
if	(qt_idade_w < 0) then
	qt_idade_w	:= 0;
end if;

-- Verificar em qual faixa etaria o segurado se encaixa
nr_seq_plano_preco_atual_w			:= 0;
vl_preco_atual_w				:= 0;

open c02;
loop
fetch c02 into
	nr_seq_plano_preco_w,
	qt_idade_inicial_w,
	vl_preco_w;
exit when c02%notfound or nvl(nr_seq_plano_preco_atual_w,0) > 0;
	if	(qt_idade_w >= qt_idade_inicial_w) then
		nr_seq_plano_preco_atual_w	:= nr_seq_plano_preco_w;
		vl_preco_atual_w		:= vl_preco_w;
	end if;
end loop;
close c02;

nr_seq_plano_preco_p	:= nr_seq_plano_preco_atual_w;
vl_preco_p		:= vl_preco_atual_w;

exception
when others then
	nr_seq_plano_preco_p	:= null;
	vl_preco_p		:= null;
end;

end obter_faixa_etaria;
*/
--Obter dados do produto
CREATE OR REPLACE FUNCTION pls_obj_plussoft_pck.obter_taxas_adicionais ( nr_seq_plano_p pls_plano.nr_sequencia%type, nr_contrato_p pls_contrato.nr_contrato%type) RETURNS SETOF T_TABELA_PRODUTO_DATA AS $body$
DECLARE


linha_w			t_tabela_produto_row;
qt_registro_w		bigint;

--Verifica taxa de inscricao para o contrato 
current_setting('pls_obj_plussoft_pck.c01')::CURSOR CURSOR(	nr_contrato_pc		pls_contrato.nr_contrato%type) FOR
	SELECT	distinct b.vl_inscricao,
		b.nr_seq_contrato,
		b.tx_inscricao,
		b.qt_parcela_inicial,
		b.qt_parcela_final,
		wheb_mensagem_pck.get_texto(1110322) nm_taxa
	from	pls_contrato 		a,
		pls_regra_inscricao 	b
	where	a.nr_contrato = nr_contrato_pc
	and	b.nr_seq_contrato = a.nr_sequencia
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(b.dt_fim_vigencia,clock_timestamp()),'dd');
	
--Verifica taxa de inscricao para o plano
current_setting('pls_obj_plussoft_pck.c02')::CURSOR CURSOR(	nr_seq_plano_pc		pls_plano.nr_sequencia%type) FOR
	SELECT	distinct b.vl_inscricao,
		b.nr_seq_plano,
		b.tx_inscricao,
		b.qt_parcela_inicial,
		b.qt_parcela_final,
		wheb_mensagem_pck.get_texto(1110374) nm_taxa,
		a.nr_protocolo_ans
	from	pls_plano 		a,
		pls_regra_inscricao 	b
	where	a.nr_sequencia = b.nr_seq_plano
	and	b.nr_seq_plano = nr_seq_plano_pc
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(b.dt_fim_vigencia,clock_timestamp()),'dd');
	
--Verifica taxa de cartao para o contrato 
C03 CURSOR(	nr_contrato_pc		pls_contrato.nr_contrato%type) FOR
	SELECT	b.nr_seq_contrato,
		b.nr_sequencia nr_seq_taxa_cart,
		b.vl_via_adicional,
		b.tx_via_adicional,
		b.nr_via_inicial,
		b.nr_via_final,
		wheb_mensagem_pck.get_texto(1110560) nm_taxa
	from	pls_contrato 		a,
		pls_regra_segurado_cart	b
	where	a.nr_contrato = nr_contrato_pc
	and	b.nr_seq_contrato = a.nr_sequencia
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(b.dt_fim_vigencia,clock_timestamp()),'dd');

--Verifica taxa de cartao para o plano
C04 CURSOR(	nr_seq_plano_pc		pls_plano.nr_sequencia%type) FOR
	SELECT	b.nr_seq_plano,
		b.nr_sequencia nr_seq_taxa_cart,
		b.vl_via_adicional,
		b.tx_via_adicional,
		b.nr_via_inicial,
		b.nr_via_final,
		wheb_mensagem_pck.get_texto(1110560) nm_taxa,
		a.nr_protocolo_ans
	from	pls_plano 		a,
		pls_regra_segurado_cart	b
	where	a.nr_sequencia = b.nr_seq_plano
	and	b.nr_seq_plano = nr_seq_plano_pc
	and	trunc(clock_timestamp(),'dd') between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp()),'dd') and trunc(coalesce(b.dt_fim_vigencia,clock_timestamp()),'dd');
BEGIN
--Verifica se foi informado o contrato
if (nr_contrato_p IS NOT NULL AND nr_contrato_p::text <> '') then
	--Verifica se existe o contrato
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_contrato
	where	nr_contrato = nr_contrato_p;
	--Verifica se existe o contrato
	if (qt_registro_w > 0) then
		--Verifica contratos com esse Numero
		for r_C01_w in current_setting('pls_obj_plussoft_pck.c01')::CURSOR(nr_contrato_p) loop
			--Taxa de inscricao
			linha_w.nr_seq_contrato	 := r_C01_w.nr_seq_contrato;
			linha_w.nr_seq_taxa_insc := null;
			linha_w.vl_inscricao	 := r_C01_w.vl_inscricao;
			linha_w.tx_inscricao	 := r_C01_w.tx_inscricao;
			linha_w.nm_taxa		 := r_C01_w.nm_taxa;
			linha_w.parc_ini_tx_insc := r_C01_w.qt_parcela_inicial;
			linha_w.parc_fin_tx_insc := r_C01_w.qt_parcela_final;
			linha_w.parc_ini_tx_cart := null;
			linha_w.parc_fin_tx_cart := null;
			linha_w.nr_seq_taxa_cart := null;
			linha_w.vl_via_adicional := null;
			linha_w.tx_via_adicional := null;
	
			--Registros referente a taxas de inscricao vinculadas ao contrato
			RETURN NEXT linha_w;
		end loop;
		--Verifica contratos com esse Numero
		for r_C03_w in C03(nr_contrato_p) loop
			--Taxa de cartao
			linha_w.nr_seq_contrato	 := r_C03_w.nr_seq_contrato;
			linha_w.nr_seq_taxa_cart := r_C03_w.nr_seq_taxa_cart;
			linha_w.vl_via_adicional := r_C03_w.vl_via_adicional;
			linha_w.tx_via_adicional := r_C03_w.tx_via_adicional;
			linha_w.nm_taxa		 := r_C03_w.nm_taxa;
			linha_w.parc_ini_tx_cart := r_C03_w.nr_via_inicial;
			linha_w.parc_fin_tx_cart := r_C03_w.nr_via_final;
			linha_w.parc_ini_tx_insc := null;
			linha_w.parc_fin_tx_insc := null;
			linha_w.vl_inscricao	 := null;
			linha_w.tx_inscricao	 := null;
			linha_w.nr_seq_taxa_insc := null;
	
			--Registros referente a taxas de inscricao vinculadas ao contrato
			RETURN NEXT linha_w;
		end loop;
	else
		linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110377, 'NR_CONTRATO='||nr_contrato_p) ,1,255);
		RETURN NEXT linha_w;
	end if;
	--Verifica se foi informado o plano
	if (nr_seq_plano_p IS NOT NULL AND nr_seq_plano_p::text <> '') then
		--Verifica se existe o produto
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_plano
		where	nr_sequencia = nr_seq_plano_p;
		--Verifica se existe o produto
		if (qt_registro_w > 0) then
			--Verifica produtos com esse Numero
			for r_C02_w in current_setting('pls_obj_plussoft_pck.c02')::CURSOR(nr_seq_plano_p) loop
				--Taxa de inscricao
				linha_w.nr_seq_produto	 := r_C02_w.nr_seq_plano;
				linha_w.nr_protocolo_ans := r_C02_w.nr_protocolo_ans;
				linha_w.nr_seq_taxa_insc := null;
				linha_w.vl_inscricao	 := r_C02_w.vl_inscricao;
				linha_w.tx_inscricao	 := r_C02_w.tx_inscricao;
				linha_w.nm_taxa		 := r_C02_w.nm_taxa;
				linha_w.parc_ini_tx_insc := r_C02_w.qt_parcela_inicial;
				linha_w.parc_fin_tx_insc := r_C02_w.qt_parcela_final;
				linha_w.parc_ini_tx_cart := null;
				linha_w.parc_fin_tx_cart := null;
				linha_w.nr_seq_taxa_cart := null;
				linha_w.vl_via_adicional := null;
				linha_w.tx_via_adicional := null;
				
				--Registros referente a taxas de inscricao vinculadas ao contrato
				RETURN NEXT linha_w;
			end loop;
			--Verifica produtos com esse Numero
			for r_C04_w in C04(nr_seq_plano_p) loop
				--Taxa de cartao
				linha_w.nr_seq_produto	 := r_C04_w.nr_seq_plano;
				linha_w.nr_protocolo_ans := r_C04_w.nr_protocolo_ans;
				linha_w.nr_seq_taxa_cart := r_C04_w.nr_seq_taxa_cart;
				linha_w.vl_via_adicional := r_C04_w.vl_via_adicional;
				linha_w.tx_via_adicional := r_C04_w.tx_via_adicional;
				linha_w.nm_taxa		 := r_C04_w.nm_taxa;
				linha_w.parc_ini_tx_cart := r_C04_w.nr_via_inicial;
				linha_w.parc_fin_tx_cart := r_C04_w.nr_via_final;
				linha_w.parc_ini_tx_insc := null;
				linha_w.parc_fin_tx_insc := null;
				linha_w.vl_inscricao	 := null;
				linha_w.tx_inscricao	 := null;
				linha_w.nr_seq_taxa_insc := null;
		
				--Registros referente a taxas de inscricao vinculadas ao contrato
				RETURN NEXT linha_w;
			end loop;
		else
			linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110412) ,1,255);
			RETURN NEXT linha_w;
		end if;
	end if;

--Verifica se foi informado o plano
elsif (nr_seq_plano_p IS NOT NULL AND nr_seq_plano_p::text <> '') then
	--Verifica se existe o produto
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_plano
	where	nr_sequencia = nr_seq_plano_p;
	--Verifica se existe o produto
	if (qt_registro_w > 0) then
		--Verifica produtos com esse Numero
		for r_C02_w in current_setting('pls_obj_plussoft_pck.c02')::CURSOR(nr_seq_plano_p) loop
			--Taxa de inscricao
			linha_w.nr_seq_produto	 := r_C02_w.nr_seq_plano;
			linha_w.nr_protocolo_ans := r_C02_w.nr_protocolo_ans;
			linha_w.nr_seq_taxa_insc := null;
			linha_w.vl_inscricao	 := r_C02_w.vl_inscricao;
			linha_w.tx_inscricao	 := r_C02_w.tx_inscricao;
			linha_w.nm_taxa		 := r_C02_w.nm_taxa;
			linha_w.parc_ini_tx_insc := r_C02_w.qt_parcela_inicial;
			linha_w.parc_fin_tx_insc := r_C02_w.qt_parcela_final;
			linha_w.parc_ini_tx_cart := null;
			linha_w.parc_fin_tx_cart := null;
			linha_w.nr_seq_taxa_cart := null;
			linha_w.vl_via_adicional := null;
			linha_w.tx_via_adicional := null;
			
			--Registros referente a taxas de inscricao vinculadas ao contrato
			RETURN NEXT linha_w;
		end loop;
		--Verifica produtos com esse Numero
		for r_C04_w in C04(nr_seq_plano_p) loop
			--Taxa de cartao
			linha_w.nr_seq_produto	 := r_C04_w.nr_seq_plano;
			linha_w.nr_protocolo_ans := r_C04_w.nr_protocolo_ans;
			linha_w.nr_seq_taxa_cart := r_C04_w.nr_seq_taxa_cart;
			linha_w.vl_via_adicional := r_C04_w.vl_via_adicional;
			linha_w.tx_via_adicional := r_C04_w.tx_via_adicional;
			linha_w.nm_taxa		 := r_C04_w.nm_taxa;
			linha_w.parc_ini_tx_cart := r_C04_w.nr_via_inicial;
			linha_w.parc_fin_tx_cart := r_C04_w.nr_via_final;
			linha_w.parc_ini_tx_insc := null;
			linha_w.parc_fin_tx_insc := null;
			linha_w.vl_inscricao	 := null;
			linha_w.tx_inscricao	 := null;
			linha_w.nr_seq_taxa_insc := null;
	
			--Registros referente a taxas de inscricao vinculadas ao contrato
			RETURN NEXT linha_w;
		end loop;
	else
		linha_w.ds_mensagem := substr(wheb_mensagem_pck.get_texto(1110412) ,1,255);
		RETURN NEXT linha_w;
	end if;
end if;
--nao retorna nada
return;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_obj_plussoft_pck.obter_taxas_adicionais ( nr_seq_plano_p pls_plano.nr_sequencia%type, nr_contrato_p pls_contrato.nr_contrato%type) FROM PUBLIC;
