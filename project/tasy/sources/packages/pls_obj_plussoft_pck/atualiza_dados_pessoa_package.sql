-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_obj_plussoft_pck.atualiza_dados_pessoa (	--Dados Pessoa
 cd_pessoa_fisica_p INOUT pessoa_fisica.cd_pessoa_fisica%type, cd_cgc_p INOUT pessoa_juridica.cd_cgc%type, nm_pessoa_fisica_p pessoa_fisica.nm_pessoa_fisica%type, ds_razao_social_p pessoa_juridica.ds_razao_social%type, nm_abreviado_p pessoa_fisica.nm_abreviado%type, nm_fantasia_p pessoa_juridica.nm_fantasia%type, ie_tipo_pessoa_p text, ie_sexo_p pessoa_fisica.ie_sexo%type, ie_estado_civil_p pessoa_fisica.ie_estado_civil%type, nr_ddi_telefone_res_p text, nr_ddd_telefone_res_p text, nr_telefone_res_p text, ds_fone_adic_p text, nr_ddi_celular_p text, nr_ddd_celular_p text, nr_telefone_celular_p text, nr_ddi_telefone_com_p text, nr_ddd_telefone_com_p text, nr_telefone_com_p text, ds_email_pf_p text, ds_email_pj_p text, --Endereco residencial
 ie_tipo_complemento_res_p text, cd_cep_res_p text, ds_pais_res_p text, sg_estado_res_p text, ds_municipio_res_p text, ds_tipo_logradouro_res_p text, ds_endereco_res_p text, nr_endereco_res_p text, ds_complemento_res_p text, cd_municipio_ibge_res_p text, ds_bairro_res_p text, ie_endereco_pagador_res_p text, --Endereco Comercial
 ie_tipo_complemento_com_p text, cd_cep_com_p text, ds_pais_com_p text, sg_estado_com_p text, ds_municipio_com_p text, ds_tipo_logradouro_com_p text, ds_endereco_com_p text, nr_endereco_com_p text, ds_complemento_com_p text, cd_municipio_ibge_com_p text, ds_bairro_com_p text, ie_endereco_pagador_com_p text, --Inf Adicionais
 nr_identidade_p text, nr_inscricao_estadual_p text, nr_cpf_p text, dt_nascimento_p text, ds_cargo_p text, ds_observacao_pf_p text, ds_observacao_pj_p text, ds_status_p text, --Compl_pessoa
 nr_seq_vendedor_p pls_vendedor.nr_sequencia%type, cd_pessoa_vendedor_p pessoa_fisica.cd_pessoa_fisica%type, nr_seq_agente_motivador_p pls_agente_motivador.nr_sequencia%type, nr_seq_origem_agente_p pls_agente_motivador_orig.nr_sequencia%type, nr_seq_segurado_indic_p pls_solicitacao_comercial.nr_seq_segurado_indic%type, cd_pessoa_indicacao_p pls_solicitacao_comercial.cd_pessoa_indicacao%type, ds_observacao_p pls_solicitacao_comercial.ds_observacao%type, ds_naturalidade_p text, cd_nacionalidade_p text, ie_grau_instrucao_p text, nr_pis_pasep_p text, nr_cartao_nac_sus_p text, dt_emissao_ci_p timestamp, ds_orgao_emissor_ci_p text, sg_emissora_ci_p text, nm_pais_p text, cd_declaracao_nasc_vivo_p text, nm_contato_p text, nm_mae_p text, nr_seq_renda_p text, cd_pessoa_usuario_p pessoa_fisica.cd_pessoa_fisica%type, --Parametros de saida
 ie_retorno_p INOUT bigint, ds_mensagem_erro_p INOUT text) AS $body$
DECLARE

/*  IE_RETORNO_P : 0 - Operacao realizada     1 - Erro  */
				
ie_retorno_w			smallint;
qt_registro_w			bigint;
qt_registros_w			bigint;
nr_sequencia_w			bigint;
ds_mensagem_erro_w		varchar(255);
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
ds_pais_res_w			pais.nr_sequencia%type;
ds_tipo_logradouro_res_w	sus_tipo_logradouro.cd_tipo_logradouro%type;
cd_municipio_ibge_res_w		sus_municipio.cd_municipio_ibge%type;
cd_municipio_ibge_nat_w		sus_municipio.cd_municipio_ibge%type;
ds_pais_com_w			pais.nr_sequencia%type;
nr_pais_ci_w			pais.nr_sequencia%type;
ds_tipo_logradouro_com_w	sus_tipo_logradouro.cd_tipo_logradouro%type;
cd_municipio_ibge_com_w		sus_municipio.cd_municipio_ibge%type;
cd_tipo_pessoa_w		pessoa_juridica.cd_tipo_pessoa%type;
nr_seq_logradouro_w		bigint;
ie_retorno_lead_w		smallint;
cd_nacionalidade_w		nacionalidade.cd_nacionalidade%type;
ds_pais_compl_w			pais.nr_sequencia%type;
nr_seq_pf_renda_w		bigint;
nr_seq_renda_w			bigint;
qt_registro_pf_renda_w		bigint;
nm_abreviado_w			varchar(255);
vl_parametro_w			varchar(2);
qt_retorno_w			bigint;
cgc_valido_w			varchar(1);
nr_seq_pj_estab_w		bigint;
current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type			usuario.nm_usuario%type;
qt_registro_lead_w		bigint;
nr_seq_vendedor_solic_w		pls_solicitacao_vendedor.nr_sequencia%type;
cd_pf_vendedor_vinculado_w	pls_vendedor.cd_pessoa_fisica%type;
ie_status_w			pls_solicitacao_comercial.ie_status%type;
nr_seq_solic_comercial_w	pls_solicitacao_comercial.nr_sequencia%type;
nr_seq_vendedor_vinc_novo_w	pls_vendedor.nr_sequencia%type;
tag_pais_w	varchar(15);


BEGIN
-- Inicializa como Operacao nao realizada ate concretizar a transacao
ie_retorno_w := 0;
ds_mensagem_erro_w := '';

--Encontra o usuario
begin
select	max(nm_usuario)
into STRICT	current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
from	usuario
where	cd_pessoa_fisica = cd_pessoa_usuario_p
and	ie_situacao = 'A';
exception
when others then
	PERFORM set_config('pls_obj_plussoft_pck.nm_usuario_w', null, false);
end;

--Pais residencial
begin
select	max(nr_sequencia)
into STRICT	ds_pais_res_w
from	pais
where	nm_pais = ds_pais_res_p;
exception
when others then
	ds_pais_res_w := null;
end;
--Pais comercial
begin
select	max(nr_sequencia)
into STRICT	ds_pais_com_w
from	pais
where	nm_pais = ds_pais_com_p;
exception
when others then
	ds_pais_com_w := null;
end;
--Pais
begin
select	max(nr_sequencia)
into STRICT	nr_pais_ci_w
from	pais
where	nm_pais = nm_pais_p;
exception
when others then
	nr_pais_ci_w := null;
end;
--Logradouro residencial
begin
select	max(cd_tipo_logradouro)
into STRICT	ds_tipo_logradouro_res_w
from	sus_tipo_logradouro
where	upper(ds_tipo_logradouro) = upper(ds_tipo_logradouro_res_p);
exception
when others then
	ds_tipo_logradouro_res_w := null;
end;
--Logradouro comercial
begin
	if (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
		select	max(nr_sequencia)
		into STRICT	ds_tipo_logradouro_com_w
		from	cns_tipo_logradouro
		where	ds_tipo_logradouro = ds_tipo_logradouro_com_p;
	else
		select	max(cd_tipo_logradouro)
		into STRICT	ds_tipo_logradouro_com_w
		from	sus_tipo_logradouro
		where	upper(ds_tipo_logradouro) = upper(ds_tipo_logradouro_com_p);
	end if;
exception
when others then
	ds_tipo_logradouro_com_w := null;
end;

--IBGE residencial
begin
	select	cd_municipio_ibge
	into STRICT	cd_municipio_ibge_res_w
	from	sus_municipio
	where	cd_municipio_ibge = cd_municipio_ibge_res_p;
exception
when others then
	cd_municipio_ibge_res_w := null;
end;
--IBGE Comercial
begin
	select	cd_municipio_ibge
	into STRICT	cd_municipio_ibge_com_w
	from	sus_municipio
	where	cd_municipio_ibge = cd_municipio_ibge_com_p;
exception
when others then
	cd_municipio_ibge_com_w := null;
end;

--Pais residencial
begin
select	max(nr_sequencia)
into STRICT	ds_pais_compl_w
from	pais
where	nm_pais = nm_pais_p;
exception
when others then
	ds_pais_compl_w := null;
end;
--Naturalidade (CD_MUNICIPIO_IBGE)
begin
select	cd_municipio_ibge
into STRICT	cd_municipio_ibge_nat_w
from	sus_municipio
where	cd_municipio_ibge = ds_naturalidade_p;
exception
when others then
	cd_municipio_ibge_nat_w := null;
end;
--Nacionalidade
begin
select	cd_nacionalidade
into STRICT	cd_nacionalidade_w
from	nacionalidade
where	cd_nacionalidade = cd_nacionalidade_p;
exception
when others then
	cd_nacionalidade_w := null;
end;
--Renda
begin
select 	nr_sequencia
into STRICT	nr_seq_renda_w
from 	renda
where 	nr_sequencia = nr_seq_renda_p;
exception
when others then
	nr_seq_renda_w := null;
end;

if (coalesce(nm_abreviado_p::text, '') = '')  then
	nm_abreviado_w := substr(pls_gerar_nome_abreviado(coalesce(nm_pessoa_fisica_p, ds_razao_social_p)),1,80);
else
	nm_abreviado_w := nm_abreviado_p;
end if;

if (cd_pessoa_vendedor_p IS NOT NULL AND cd_pessoa_vendedor_p::text <> '') then
	begin
		select 	count(1)
		into STRICT	qt_registro_w
		from 	pls_vendedor
		where 	cd_pessoa_fisica = cd_pessoa_vendedor_p;
		
		if (qt_registro_w = 0) then
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110551),1,255);
		end if;
	exception
	when others then
		--Erro
		ie_retorno_w := 1;
		ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110551),1,255);
		rollback;
	end;
end if;
	
if (ie_retorno_w = 1) then
	goto final;
end if;

select	max(ds_locale)
into STRICT	tag_pais_w
from	user_locale 
where	nm_user = obter_usuario_ativo;

--PF
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then
	select	count(1)
	into STRICT	qt_registro_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_p;

	--Verifica se existe PF
	if (qt_registro_w > 0) then
		cd_cgc_p := null;
		--Caso PF exista chamar rotina que gera as solicitacoes de alteracao cadastral
		SELECT * FROM pls_obj_plussoft_pck.salvar_alteracoes_pf(	cd_pessoa_fisica_p, nm_pessoa_fisica_p, nm_abreviado_w, ie_sexo_p, ie_estado_civil_p, nr_ddi_telefone_res_p, nr_ddd_telefone_res_p, nr_telefone_res_p, ds_fone_adic_p, nr_ddi_celular_p, nr_ddd_celular_p, nr_telefone_celular_p, nr_ddi_telefone_com_p, nr_ddd_telefone_com_p, nr_telefone_com_p, ds_email_pf_p, ie_tipo_complemento_res_p, cd_cep_res_p, ds_pais_res_w, sg_estado_res_p, ds_municipio_res_p, ds_tipo_logradouro_res_w, ds_endereco_res_p, nr_endereco_res_p, ds_complemento_res_p, cd_municipio_ibge_res_w, ds_bairro_res_p, ie_endereco_pagador_res_p, ie_tipo_complemento_com_p, cd_cep_com_p, ds_pais_com_w, sg_estado_com_p, ds_municipio_com_p, ds_tipo_logradouro_com_w, ds_endereco_com_p, nr_endereco_com_p, ds_complemento_com_p, cd_municipio_ibge_com_w, ds_bairro_com_p, ie_endereco_pagador_com_p, nr_identidade_p, nr_inscricao_estadual_p, nr_cpf_p, dt_nascimento_p, ds_cargo_p, ds_observacao_pf_p, nr_pais_ci_w, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, cd_municipio_ibge_nat_w, ie_retorno_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_w, ds_mensagem_erro_w;
		if (ie_retorno_w = 1) then
			goto final;
		end if;
		
		SELECT * FROM pls_obj_plussoft_pck.salvar_alteracoes_pf_pj_compl(	cd_pessoa_fisica_p, cd_cgc_p, nr_seq_vendedor_p, nr_seq_agente_motivador_p, nr_seq_origem_agente_p, nr_seq_segurado_indic_p, cd_pessoa_indicacao_p, ds_observacao_p, cd_municipio_ibge_nat_w, cd_nacionalidade_w, ie_grau_instrucao_p, nr_pis_pasep_p, nr_cartao_nac_sus_p, dt_emissao_ci_p, ds_orgao_emissor_ci_p, sg_emissora_ci_p, nr_pais_ci_w, cd_declaracao_nasc_vivo_p, nm_contato_p, nm_mae_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_retorno_w, ds_mensagem_erro_w) INTO STRICT 	cd_pessoa_fisica_p, cd_cgc_p, ie_retorno_w, ds_mensagem_erro_w;
		if (ie_retorno_w = 1) then
			goto final;
		end if;
		
		if (nr_seq_renda_w IS NOT NULL AND nr_seq_renda_w::text <> '') then
			begin
			select	count(*)
			into STRICT	qt_registro_pf_renda_w
			from 	pessoa_fisica_renda
			where	cd_pessoa_fisica = cd_pessoa_fisica_p;
		
			if (qt_registro_pf_renda_w > 0) then
				update	pessoa_fisica_renda
				set	nr_seq_renda 	= nr_seq_renda_w,
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
				where	cd_pessoa_fisica = cd_pessoa_fisica_p;
			else
				select	nextval('pessoa_fisica_renda_seq')
				into STRICT	nr_seq_pf_renda_w
				;
				
				insert 	into pessoa_fisica_renda(nr_sequencia, dt_atualizacao, nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, cd_pessoa_fisica, 
					nr_seq_renda)
				values (nr_seq_pf_renda_w, clock_timestamp(), current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, 
					clock_timestamp(), current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, cd_pessoa_fisica_p, 
					nr_seq_renda_w);
			end if;
			
			commit;
			--Sucesso
			exception
			when others then
				--Erro
				ie_retorno_w := 1;
				ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110552, 'DS_ERRO='||sqlerrm(SQLSTATE)) ,1,255);
				rollback;
			end;
		else
			update	pessoa_fisica_renda
			set	nr_seq_renda 	 = NULL,
				dt_atualizacao 	= clock_timestamp(),
				nm_usuario	= current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
			where	cd_pessoa_fisica = cd_pessoa_fisica_p;
		end if;
	--Caso nao exista cadastra uma nova PF
	else
		Obter_Param_Usuario(1220, 1, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
		
		if (vl_parametro_w = 'N') and (nr_cpf_p IS NOT NULL AND nr_cpf_p::text <> '') then
			select 	count(*)
			into STRICT	qt_retorno_w
			from 	pessoa_fisica
			where 	nr_cpf = nr_cpf_p;
			
			if (qt_retorno_w > 0) then
				ie_retorno_w := 1;
				ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110553, 'NR_CPF='||nr_cpf_p) ,1,255);
				goto final;
			end if;
		end if;

		Obter_Param_Usuario(1220, 43, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
		
		if (vl_parametro_w = 'N') and (nr_cartao_nac_sus_p IS NOT NULL AND nr_cartao_nac_sus_p::text <> '') then
			select 	count(*)
			into STRICT	qt_retorno_w
			from 	pessoa_fisica
			where 	nr_cartao_nac_sus = nr_cartao_nac_sus_p;
			
			if (qt_retorno_w > 0) then
				ie_retorno_w := 1;
				ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110554, 'NR_CARTAO_SUS='||nr_cartao_nac_sus_p) ,1,255);
				goto final;
			end if;
		end if;
	
		select	nextval('pessoa_fisica_seq')
		into STRICT	cd_pessoa_fisica_w
		;
		
		begin
		--Nova PF
		insert into pessoa_fisica(
			cd_pessoa_fisica,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nm_pessoa_fisica,
			nm_abreviado,
			dt_nascimento,
			ie_sexo,
			nr_cpf,
			nr_identidade,
			ie_tipo_pessoa,
			ie_estado_civil,
			nr_ddi_celular,
			nr_ddd_celular,
			nr_telefone_celular,
			nr_inscricao_estadual,
			ds_observacao,
			dt_emissao_ci,
			sg_emissora_ci,
			ds_orgao_emissor_ci,
			nr_seq_pais,
			cd_estabelecimento,
			cd_municipio_ibge
			)
		values (cd_pessoa_fisica_w,
			current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
			clock_timestamp(),
			current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
			clock_timestamp(),
			substr(nm_pessoa_fisica_p,1,60),
			substr(nm_abreviado_p,1,80),
			to_date(dt_nascimento_p, 'dd/mm/yyyy'),
			substr(upper(ie_sexo_p),1,1),
			substr(nr_cpf_p,1,11),
			substr(nr_identidade_p,1,15),
			1,
			substr(ie_estado_civil_p,1,2),
			substr(nr_ddi_celular_p,1,3),
			substr(nr_ddd_celular_p,1,3),
			substr(nr_telefone_celular_p,1,40),
			substr(nr_inscricao_estadual_p,1,20),
			substr(ds_observacao_p,1,2000),
			dt_emissao_ci_p,
			substr(sg_emissora_ci_p,1,2),
			substr(ds_orgao_emissor_ci_p,1,40),
			nr_pais_ci_w,
			1,
			cd_municipio_ibge_nat_w
			);
			
		--Verifica se existe algum dado de complemento Residencial (COMPLEMENTO 1)  
		if	(	(cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and 	--Pessoa fisica
			 (	(nr_ddi_telefone_res_p IS NOT NULL AND nr_ddi_telefone_res_p::text <> '') or  	--DDI
				(nr_ddd_telefone_res_p IS NOT NULL AND nr_ddd_telefone_res_p::text <> '') or 	--DDD
				(nr_telefone_res_p IS NOT NULL AND nr_telefone_res_p::text <> '') or     	--Telefone	
				(ds_email_pf_p IS NOT NULL AND ds_email_pf_p::text <> '') or	     	--Email
				(cd_cep_res_p IS NOT NULL AND cd_cep_res_p::text <> '') or		-- CEP	
				(ds_pais_res_p IS NOT NULL AND ds_pais_res_p::text <> '') or		-- PAIS
				(sg_estado_res_p IS NOT NULL AND sg_estado_res_p::text <> '') or		-- Estado
				(ds_municipio_res_p IS NOT NULL AND ds_municipio_res_p::text <> '') or	--Municipio
				(ds_tipo_logradouro_res_p IS NOT NULL AND ds_tipo_logradouro_res_p::text <> '') or --Logradouro
				(ds_endereco_res_p IS NOT NULL AND ds_endereco_res_p::text <> '') or	--Endereco
				(nr_endereco_res_p IS NOT NULL AND nr_endereco_res_p::text <> '') or	--Numero
				(ds_complemento_res_p IS NOT NULL AND ds_complemento_res_p::text <> '') or	--Complemento
				(cd_municipio_ibge_res_p IS NOT NULL AND cd_municipio_ibge_res_p::text <> '') or	--IBGE
				(ds_bairro_res_p IS NOT NULL AND ds_bairro_res_p::text <> ''))		--Bairro
				) then
			
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_sequencia_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
			
			if (tag_pais_w = 'de_DE')then
				insert into compl_pessoa_fisica(nr_sequencia,
					cd_pessoa_fisica,
					ie_tipo_complemento,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nm_usuario,
					dt_atualizacao,
					ds_endereco,
					ds_bairro,
					cd_municipio_ibge,
					cd_cep,
					sg_estado,
					nr_telefone,
					nr_ddi_telefone,
					nr_ddd_telefone,
					ds_email,
					ds_municipio,
					cd_tipo_logradouro,
					ds_compl_end,
					ds_complemento,
					nr_seq_pais
					)
				values (nr_sequencia_w,
					cd_pessoa_fisica_w,
					1,
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					substr(ds_endereco_res_p,1,100),
					substr(ds_bairro_res_p,1,80),
					cd_municipio_ibge_res_w,
					substr(cd_cep_res_p,1,15),
					substr(sg_estado_res_p,1,2),
					substr(nr_telefone_res_p,1,15),
					substr(nr_ddi_telefone_res_p,1,15),
					substr(nr_ddd_telefone_res_p,1,15),
					substr(ds_email_pf_p,1,255),
					substr(ds_municipio_res_p,1,40),
					ds_tipo_logradouro_res_w,
					nr_endereco_res_p,
					substr(ds_complemento_res_p,1,40),
					ds_pais_res_w);
			else
				insert into compl_pessoa_fisica(nr_sequencia,
					cd_pessoa_fisica,
					ie_tipo_complemento,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nm_usuario,
					dt_atualizacao,
					ds_endereco,
					ds_bairro,
					cd_municipio_ibge,
					cd_cep,
					sg_estado,
					nr_telefone,
					nr_ddi_telefone,
					nr_ddd_telefone,
					ds_email,
					ds_municipio,
					cd_tipo_logradouro,
					nr_endereco,
					ds_complemento,
					nr_seq_pais
					)
				values (nr_sequencia_w,
					cd_pessoa_fisica_w,
					1,
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					substr(ds_endereco_res_p,1,100),
					substr(ds_bairro_res_p,1,80),
					cd_municipio_ibge_res_w,
					substr(cd_cep_res_p,1,15),
					substr(sg_estado_res_p,1,2),
					substr(nr_telefone_res_p,1,15),
					substr(nr_ddi_telefone_res_p,1,15),
					substr(nr_ddd_telefone_res_p,1,15),
					substr(ds_email_pf_p,1,255),
					substr(ds_municipio_res_p,1,40),
					ds_tipo_logradouro_res_w,
					nr_endereco_res_p,
					substr(ds_complemento_res_p,1,40),
					ds_pais_res_w);
			end if;
		end if;
					
		--Verifica se existe algum dado de complemento Comercial(COMPLEMENTO 2)
		if	(	(cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and 	--Pessoa fisica
			 (	(nr_ddi_telefone_com_p IS NOT NULL AND nr_ddi_telefone_com_p::text <> '') or  	--DDI
				(nr_ddd_telefone_com_p IS NOT NULL AND nr_ddd_telefone_com_p::text <> '') or 	--DDD
				(nr_telefone_com_p IS NOT NULL AND nr_telefone_com_p::text <> '') or     	--Telefone	
				(cd_cep_com_p IS NOT NULL AND cd_cep_com_p::text <> '') or		-- CEP	
				(ds_pais_com_p IS NOT NULL AND ds_pais_com_p::text <> '') or		-- PAIS
				(sg_estado_com_p IS NOT NULL AND sg_estado_com_p::text <> '') or		-- Estado
				(ds_municipio_com_p IS NOT NULL AND ds_municipio_com_p::text <> '') or	--Municipio
				(ds_tipo_logradouro_com_p IS NOT NULL AND ds_tipo_logradouro_com_p::text <> '') or --Logradouro
				(ds_endereco_com_p IS NOT NULL AND ds_endereco_com_p::text <> '') or	--Endereco
				(nr_endereco_com_p IS NOT NULL AND nr_endereco_com_p::text <> '') or	--Numero
				(ds_complemento_com_p IS NOT NULL AND ds_complemento_com_p::text <> '') or	--Complemento
				(cd_municipio_ibge_com_p IS NOT NULL AND cd_municipio_ibge_com_p::text <> '') or	--IBGE
				(ds_bairro_com_p IS NOT NULL AND ds_bairro_com_p::text <> ''))		--Bairro
				) then
			
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_sequencia_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
			
			if (tag_pais_w = 'de_DE')then
				insert into compl_pessoa_fisica(nr_sequencia,
					cd_pessoa_fisica,
					ie_tipo_complemento,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nm_usuario,
					dt_atualizacao,
					ds_endereco,
					ds_bairro,
					cd_municipio_ibge,
					cd_cep,
					sg_estado,
					nr_telefone,
					nr_ddi_telefone,
					nr_ddd_telefone,
					ds_municipio,
					cd_tipo_logradouro,
					ds_compl_end,
					ds_complemento,
					nr_seq_pais
					)
				values (nr_sequencia_w,
					cd_pessoa_fisica_w,
					2,
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					substr(ds_endereco_com_p,1,100),
					substr(ds_bairro_com_p,1,80),
					cd_municipio_ibge_com_w,
					substr(cd_cep_com_p,1,15),
					substr(sg_estado_com_p,1,2),
					substr(nr_telefone_com_p,1,15),
					substr(nr_ddi_telefone_com_p,1,15),
					substr(nr_ddd_telefone_com_p,1,15),
					substr(ds_municipio_com_p,1,40),
					ds_tipo_logradouro_com_w,
					nr_endereco_com_p,
					substr(ds_complemento_com_p,1,40),
					ds_pais_com_w);
			else
				insert into compl_pessoa_fisica(nr_sequencia,
					cd_pessoa_fisica,
					ie_tipo_complemento,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nm_usuario,
					dt_atualizacao,
					ds_endereco,
					ds_bairro,
					cd_municipio_ibge,
					cd_cep,
					sg_estado,
					nr_telefone,
					nr_ddi_telefone,
					nr_ddd_telefone,
					ds_municipio,
					cd_tipo_logradouro,
					nr_endereco,
					ds_complemento,
					nr_seq_pais
					)
				values (nr_sequencia_w,
					cd_pessoa_fisica_w,
					2,
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					substr(ds_endereco_com_p,1,100),
					substr(ds_bairro_com_p,1,80),
					cd_municipio_ibge_com_w,
					substr(cd_cep_com_p,1,15),
					substr(sg_estado_com_p,1,2),
					substr(nr_telefone_com_p,1,15),
					substr(nr_ddi_telefone_com_p,1,15),
					substr(nr_ddd_telefone_com_p,1,15),
					substr(ds_municipio_com_p,1,40),
					ds_tipo_logradouro_com_w,
					nr_endereco_com_p,
					substr(ds_complemento_com_p,1,40),
					ds_pais_com_w);
			end if;
		end if;

		if (ie_retorno_w = 1) then
			goto final;
		end if;
		commit;
		--Sucesso
		cd_pessoa_fisica_p := cd_pessoa_fisica_w;
		exception
		when others then
			--Erro
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110552, 'DS_ERRO=' || sqlerrm(SQLSTATE)) ,1,255);
			rollback;
		end;
	end if;
	
	if (ie_retorno_w = 1) then
		goto final;
	end if;
	
	select	count(1)
	into STRICT	qt_registro_lead_w
	from 	pls_solicitacao_comercial
	where 	cd_pf_vinculado  =  cd_pessoa_fisica_p
	and	ie_status = 'PE';

	select 	max(nr_sequencia)
	into STRICT	nr_seq_vendedor_vinc_novo_w
	from 	pls_vendedor
	where 	cd_pessoa_fisica = cd_pessoa_vendedor_p;
	
	if 	(cd_pessoa_vendedor_p IS NOT NULL AND cd_pessoa_vendedor_p::text <> '' AND qt_registro_lead_w > 0) then
		select 	max(b.nr_sequencia),
			max(c.cd_pessoa_fisica),
			max(a.ie_status),
			max(a.nr_sequencia)
		into STRICT	nr_seq_vendedor_solic_w,
			cd_pf_vendedor_vinculado_w,
			ie_status_w,
			nr_seq_solic_comercial_w
		FROM pls_solicitacao_comercial a
LEFT OUTER JOIN pls_solicitacao_vendedor b ON (a.nr_sequencia = b.nr_seq_solicitacao)
LEFT OUTER JOIN pls_vendedor c ON (b.nr_seq_vendedor_canal = c.nr_sequencia)
WHERE a.cd_pf_vinculado = cd_pessoa_fisica_p   and (coalesce(b.nr_sequencia::text, '') = ''
		or    	clock_timestamp() between coalesce(b.dt_inicio_vigencia,clock_timestamp()) and coalesce(b.dt_fim_vigencia,clock_timestamp())) and a.ie_status = 'PE';

		if (coalesce(cd_pf_vendedor_vinculado_w,0) <> cd_pessoa_vendedor_p) then
			if (nr_seq_vendedor_solic_w IS NOT NULL AND nr_seq_vendedor_solic_w::text <> '') then
				update	pls_solicitacao_vendedor
				set 	dt_fim_vigencia = clock_timestamp(),
					nm_usuario = current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					dt_atualizacao = clock_timestamp()
				where 	nr_sequencia = nr_seq_vendedor_solic_w;
			end if;
			
			insert 	into 	pls_solicitacao_vendedor(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								cd_estabelecimento,
								nr_seq_solicitacao,
								dt_inicio_vigencia,
								nr_seq_vendedor_canal)
				values (nextval('pls_solicitacao_vendedor_seq'),
								clock_timestamp(),
								current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
								clock_timestamp(),
								current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
								1,
								nr_seq_solic_comercial_w,
								clock_timestamp(),
								nr_seq_vendedor_vinc_novo_w);
		end if;
	else
		if (upper(ds_status_p) = 'LEAD') then
			SELECT * FROM pls_obj_plussoft_pck.pls_gerar_lead_pf_pj(	cd_pessoa_fisica_p, null, nr_seq_vendedor_vinc_novo_w, nr_seq_agente_motivador_p, nr_seq_origem_agente_p, nr_seq_segurado_indic_p, cd_pessoa_indicacao_p, null, ds_observacao_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, 'A', ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;
			if (ie_retorno_lead_w =1) then
				ie_retorno_w := 1;
				ds_mensagem_erro_w := ds_mensagem_erro_w;
			end if;
		end if;
	end if;

	if (upper(ds_status_p) = 'PROSPECT') then
		SELECT * FROM pls_obj_plussoft_pck.gerar_proposta_comercial(cd_pessoa_fisica_p, null, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;
	end if;
--PJ
elsif (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
	select	count(1)
	into STRICT	qt_registro_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_p;
	
	--Verifica se tem logradouro
	begin
	select	max(nr_sequencia)
	into STRICT	nr_seq_logradouro_w
	from	cns_tipo_logradouro
	where	upper(ds_tipo_logradouro) like upper(ds_tipo_logradouro_com_p);
	exception
	when others then
		nr_seq_logradouro_w := null;
	end;

	select 	max(nr_sequencia)
	into STRICT	nr_seq_vendedor_vinc_novo_w
	from 	pls_vendedor
	where 	cd_pessoa_fisica = cd_pessoa_vendedor_p;
	
	if (nr_seq_vendedor_p IS NOT NULL AND nr_seq_vendedor_p::text <> '') then
		nr_seq_vendedor_vinc_novo_w := nr_seq_vendedor_p;
	end if;
	
	--Verifica se existe PJ
	if (qt_registro_w > 0) then
		Begin
		
			--Caso PJ exista chamar rotina que gera as solicitacoes de alteracao cadastral	/*
			SELECT * FROM pls_obj_plussoft_pck.salvar_alteracoes_pj(	cd_cgc_p, ds_razao_social_p, nm_fantasia_p, nr_ddi_telefone_com_p, nr_ddd_telefone_com_p, nr_telefone_com_p, ds_email_pj_p, ie_tipo_complemento_com_p, cd_cep_com_p, ds_pais_com_w, sg_estado_com_p, ds_municipio_com_p, nr_seq_logradouro_w, ds_endereco_com_p, nr_endereco_com_p, ds_complemento_com_p, cd_municipio_ibge_com_w, ds_bairro_com_p, nr_inscricao_estadual_p, ds_observacao_pj_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, substr(nm_abreviado_w,1,18), ie_retorno_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_w, ds_mensagem_erro_w;
			if (ie_retorno_w = 1) then
				goto final;
			end if;
			
			SELECT * FROM pls_obj_plussoft_pck.salvar_alteracoes_pf_pj_compl( cd_pessoa_fisica_p, cd_cgc_p, nr_seq_vendedor_vinc_novo_w, nr_seq_agente_motivador_p, nr_seq_origem_agente_p, nr_seq_segurado_indic_p, cd_pessoa_indicacao_p, ds_observacao_p, cd_municipio_ibge_nat_w, cd_nacionalidade_w, ie_grau_instrucao_p, nr_pis_pasep_p, nr_cartao_nac_sus_p, dt_emissao_ci_p, ds_orgao_emissor_ci_p, sg_emissora_ci_p, nr_pais_ci_w, cd_declaracao_nasc_vivo_p, nm_contato_p, nm_mae_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_retorno_w, ds_mensagem_erro_w) INTO STRICT  cd_pessoa_fisica_p, cd_cgc_p, ie_retorno_w, ds_mensagem_erro_w;
			if (ie_retorno_w = 1) then
				goto final;
			end if;
			
		exception
		when others then
			--Erro
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr('Falha ao cadastrar nova PJ : ' || sqlerrm(SQLSTATE) ,1,255);
			rollback;
		end;
		
	--Caso nao exista cadastra uma nova PJ
	else
	
		Obter_Param_Usuario(6, 5, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
		
		if (vl_parametro_w = 'S') and (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
			cgc_valido_w := obter_se_cnpj_valido(cd_cgc_p);
			
			if (coalesce(cgc_valido_w,'N') = 'N') then
				ie_retorno_w := 1;
				ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110360) || cd_cgc_p ,1,255);
				goto final;
			end if;
		end if;
		
		--Tipo PJ
		select 	max(cd_tipo_pessoa)
		into STRICT	cd_tipo_pessoa_w
		from 	tipo_pessoa_juridica
		where 	ie_situacao = 'A';
		
		begin
		insert into pessoa_juridica(
				cd_cgc,
				cd_tipo_pessoa,
				cd_cep,
				ds_bairro,
				ds_complemento,
				ds_endereco,
				ds_municipio,
				ds_razao_social,
				ie_situacao,
				nr_ddi_telefone,
				nr_ddd_telefone,
				nr_endereco,
				nr_telefone,
				sg_estado,
				dt_atualizacao,
				nm_fantasia,
				nr_inscricao_estadual,
				ds_observacao,
				ds_email,
				nr_seq_pais,
				cd_municipio_ibge,
				ie_prod_fabric,
				nm_usuario,
				ds_nome_abrev,
				nr_seq_tipo_logradouro)
			values ( cd_cgc_p,
				cd_tipo_pessoa_w,
				substr(coalesce(cd_cep_com_p,'000000000000'),1,15),
				substr(ds_bairro_com_p,1,40),
				substr(ds_complemento_com_p,1,255),
				substr(coalesce(ds_endereco_com_p,' '),1,40),
				substr(coalesce(ds_municipio_com_p,' '),1,40),
				substr(coalesce(ds_razao_social_p,' '),1,80),
				'A',
				substr(nr_ddi_telefone_com_p,1,3),
				substr(nr_ddd_telefone_com_p,1,3),
				substr(nr_endereco_com_p,1,10),
				substr(nr_telefone_com_p,1,15),
				substr(coalesce(sg_estado_com_p,'IN'),1,15),
				clock_timestamp(),
				substr(coalesce(nm_fantasia_p,' '),1,80),
				substr(nr_inscricao_estadual_p,1,20),
				substr(ds_observacao_pj_p,1,4000),
				substr(ds_email_pj_p,1,60),
				ds_pais_com_w,
				cd_municipio_ibge_com_w,
				'N',
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				substr(nm_abreviado_w,1,18),
				ds_tipo_logradouro_com_w);
	
		select	nextval('pessoa_juridica_estab_seq')
		into STRICT	nr_seq_pj_estab_w
		;
		
		insert into pessoa_juridica_estab(
				nr_sequencia,
				cd_cgc,
				ds_email,
				ie_conta_dif_nf,
				cd_estabelecimento,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_atualizacao,
				nm_usuario)
			values ( nr_seq_pj_estab_w,
				cd_cgc_p,
				substr(ds_email_pj_p,1,60),
				'N',
				1,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type);
				
		commit;

		exception
		when others then
			--Erro
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr('Falha ao cadastrar nova PJ : ' || sqlerrm(SQLSTATE) ,1,255);
			rollback;
		end;
	end if;

	--Verifica se nao gerou nenhuma excessao ate o momento.
	if (ie_retorno_w = 0) then
		select	count(1)
		into STRICT	qt_registro_lead_w
		from 	pls_solicitacao_comercial
		where 	cd_cgc  =  cd_cgc_p
		and	ie_status = 'PE';
		
		select 	max(nr_sequencia)
		into STRICT	nr_seq_vendedor_vinc_novo_w
		from 	pls_vendedor
		where 	cd_pessoa_fisica = cd_pessoa_vendedor_p;
		
		if 	(cd_pessoa_vendedor_p IS NOT NULL AND cd_pessoa_vendedor_p::text <> '' AND qt_registro_lead_w > 0) then
			select	count(1)
			into STRICT	qt_registros_w
			from 	pls_solicitacao_comercial a,
				pls_solicitacao_vendedor b
			where 	a.cd_cgc = cd_cgc_p
			and   	b.nr_seq_solicitacao = a.nr_sequencia
			and	a.ie_status = 'PE';
			
			if (qt_registros_w > 0 ) then
				select 	max(b.nr_sequencia),
					max(c.cd_pessoa_fisica),
					max(a.ie_status),
					max(a.nr_sequencia)
				into STRICT	nr_seq_vendedor_solic_w,
					cd_pf_vendedor_vinculado_w,
					ie_status_w,
					nr_seq_solic_comercial_w
				from 	pls_solicitacao_comercial a,
					pls_solicitacao_vendedor b,
					pls_vendedor c
				where 	a.cd_cgc = cd_cgc_p
				and   	b.nr_seq_solicitacao = a.nr_sequencia
				and  	b.nr_seq_vendedor_canal = c.nr_sequencia
				and (coalesce(b.nr_sequencia::text, '') = ''
				or    	clock_timestamp() between coalesce(b.dt_inicio_vigencia,clock_timestamp()) and coalesce(b.dt_fim_vigencia,clock_timestamp()))
				and	a.ie_status = 'PE';
			else
				select 	max(a.ie_status),
					max(a.nr_sequencia)
				into STRICT	ie_status_w,
					nr_seq_solic_comercial_w
				from 	pls_solicitacao_comercial a
				where 	a.cd_cgc = cd_cgc_p
				and	a.ie_status = 'PE';
			end if;

			if (cd_pf_vendedor_vinculado_w <> cd_pessoa_vendedor_p or qt_registros_w = 0) then
				if (qt_registros_w > 0) then
					update	pls_solicitacao_vendedor
					set 	dt_fim_vigencia = clock_timestamp(),
						nm_usuario = current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
						dt_atualizacao = clock_timestamp()
					where 	nr_sequencia = nr_seq_vendedor_solic_w;
				end if;

				insert 	into 	pls_solicitacao_vendedor(nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_estabelecimento,
									nr_seq_solicitacao,
									dt_inicio_vigencia,
									nr_seq_vendedor_canal)
					values (nextval('pls_solicitacao_vendedor_seq'),
									clock_timestamp(),
									current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
									clock_timestamp(),
									current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
									1,
									nr_seq_solic_comercial_w,
									clock_timestamp(),
									nr_seq_vendedor_vinc_novo_w);
			end if;
		else
			if (upper(ds_status_p) = 'LEAD') then
				SELECT * FROM pls_obj_plussoft_pck.pls_gerar_lead_pf_pj(	null, cd_cgc_p, coalesce(nr_seq_vendedor_p,nr_seq_vendedor_vinc_novo_w), nr_seq_agente_motivador_p, nr_seq_origem_agente_p, nr_seq_segurado_indic_p, cd_pessoa_indicacao_p, nr_telefone_celular_p, ds_observacao_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, 'A', ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;

				if (ie_retorno_lead_w =1) then
					ie_retorno_w := 1;
					ds_mensagem_erro_w := ds_mensagem_erro_w;
				end if;
			elsif (upper(ds_status_p) = 'PROSPECT') then
				SELECT * FROM pls_obj_plussoft_pck.gerar_proposta_comercial(null, cd_cgc_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;
			end if;
		end if;
	end if;
--Nova PF
else
	begin
	Obter_Param_Usuario(1220, 1, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
	
	if (vl_parametro_w = 'N') then
		select 	count(*)
		into STRICT	qt_retorno_w
		from 	pessoa_fisica
		where 	nr_cpf = nr_cpf_p;
		if (qt_retorno_w > 0) then
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110553, 'NR_CPF='||nr_cpf_p) ,1,255);
			goto final;
		end if;
	end if;
	
	Obter_Param_Usuario(1220, 43, obter_perfil_ativo, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
		
	if (vl_parametro_w = 'N') and (nr_cartao_nac_sus_p IS NOT NULL AND nr_cartao_nac_sus_p::text <> '') then
		select 	count(*)
		into STRICT	qt_retorno_w
		from 	pessoa_fisica
		where 	nr_cartao_nac_sus = nr_cartao_nac_sus_p;
			
		if (qt_retorno_w > 0) then
			ie_retorno_w := 1;
			ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110554, 'NR_CARTAO_SUS='||nr_cartao_nac_sus_p) ,1,255);
			goto final;
		end if;
	end if;
	
	select	nextval('pessoa_fisica_seq')
	into STRICT	cd_pessoa_fisica_w
	;
	
	--Nova PF	
	insert into pessoa_fisica(
		cd_pessoa_fisica,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nm_pessoa_fisica,
		nm_abreviado,
		dt_nascimento,
		ie_sexo,
		nr_cpf,
		nr_identidade,
		ie_tipo_pessoa,
		ie_estado_civil,
		nr_ddi_celular,
		nr_ddd_celular,
		nr_telefone_celular,
		nr_inscricao_estadual,
		ds_observacao,
		dt_emissao_ci,
		sg_emissora_ci,
		ds_orgao_emissor_ci,
		nr_seq_pais,
		cd_estabelecimento,
		nr_cartao_nac_sus,
		cd_nacionalidade,
		cd_cargo,
		nr_pis_pasep,
		ie_grau_instrucao,
		cd_declaracao_nasc_vivo,
		cd_municipio_ibge
		)
	values (cd_pessoa_fisica_w,
		current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
		clock_timestamp(),
		current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
		clock_timestamp(),
		substr(nm_pessoa_fisica_p,1,60),
		substr(nm_abreviado_w,1,80),
		to_date(dt_nascimento_p, 'dd/mm/yyyy'),
		substr(upper(ie_sexo_p),1,1),
		substr(nr_cpf_p,1,11),
		substr(nr_identidade_p,1,15),
		1,
		substr(ie_estado_civil_p,1,2),
		substr(nr_ddi_celular_p,1,3),
		substr(nr_ddd_celular_p,1,3),
		substr(nr_telefone_celular_p,1,40),
		substr(nr_inscricao_estadual_p,1,20),
		substr(ds_observacao_p,1,2000),
		dt_emissao_ci_p,
		substr(sg_emissora_ci_p,1,2),
		substr(ds_orgao_emissor_ci_p,1,40),
		nr_pais_ci_w,
		1,
		nr_cartao_nac_sus_p,
		cd_nacionalidade_w,
		ds_cargo_p,
		nr_pis_pasep_p,
		ie_grau_instrucao_p,
		cd_declaracao_nasc_vivo_p,
		cd_municipio_ibge_nat_w);
		
		if (nr_seq_renda_w IS NOT NULL AND nr_seq_renda_w::text <> '') then
			begin
			select	count(*)
			into STRICT	qt_registro_pf_renda_w
			from 	pessoa_fisica_renda
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
			if (qt_registro_pf_renda_w > 0) then
				update	pessoa_fisica_renda
				set	nr_seq_renda 	= nr_seq_renda_w,
					dt_atualizacao 	= clock_timestamp(),
					nm_usuario	= current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
			else
				select	nextval('pessoa_fisica_renda_seq')
				into STRICT	nr_seq_pf_renda_w
				;
				
				insert 	into pessoa_fisica_renda(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, cd_pessoa_fisica, nr_seq_renda)
					values (nr_seq_pf_renda_w, clock_timestamp(), current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, clock_timestamp(), current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, cd_pessoa_fisica_w, nr_seq_renda_w);
			end if;
			
			commit;
			--Sucesso
			exception
			when others then
				--Erro
				ie_retorno_w := 1;
				ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110552, 'DS_ERRO='||sqlerrm(SQLSTATE)) ,1,255);
				rollback;
			end;
		end if;
		
	--Verifica se existe algum dado de complemento Residencial (COMPLEMENTO 1)
	if	(	(cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and 	--Pessoa fisica
		 (	(nr_ddi_telefone_res_p IS NOT NULL AND nr_ddi_telefone_res_p::text <> '') or  	--DDI
			(nr_ddd_telefone_res_p IS NOT NULL AND nr_ddd_telefone_res_p::text <> '') or 	--DDD
			(nr_telefone_res_p IS NOT NULL AND nr_telefone_res_p::text <> '') or     	--Telefone	
			(ds_email_pf_p IS NOT NULL AND ds_email_pf_p::text <> '') or	     	--Email
			(cd_cep_res_p IS NOT NULL AND cd_cep_res_p::text <> '') or		-- CEP	
			(ds_pais_res_p IS NOT NULL AND ds_pais_res_p::text <> '') or		-- PAIS
			(sg_estado_res_p IS NOT NULL AND sg_estado_res_p::text <> '') or		-- Estado
			(ds_municipio_res_p IS NOT NULL AND ds_municipio_res_p::text <> '') or	--Municipio
			(ds_tipo_logradouro_res_p IS NOT NULL AND ds_tipo_logradouro_res_p::text <> '') or --Logradouro
			(ds_endereco_res_p IS NOT NULL AND ds_endereco_res_p::text <> '') or	--Endereco
			(nr_endereco_res_p IS NOT NULL AND nr_endereco_res_p::text <> '') or	--Numero
			(ds_complemento_res_p IS NOT NULL AND ds_complemento_res_p::text <> '') or	--Complemento
			(cd_municipio_ibge_res_p IS NOT NULL AND cd_municipio_ibge_res_p::text <> '') or	--IBGE
			(ds_bairro_res_p IS NOT NULL AND ds_bairro_res_p::text <> ''))		--Bairro
			) then
		
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_sequencia_w
		from	compl_pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		
		if (tag_pais_w = 'de_DE') then
			insert into compl_pessoa_fisica(nr_sequencia,
				cd_pessoa_fisica,
				ie_tipo_complemento,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nm_usuario,
				dt_atualizacao,
				ds_endereco,
				ds_bairro,
				cd_municipio_ibge,
				cd_cep,
				sg_estado,
				nr_telefone,
				nr_ddi_telefone,
				nr_ddd_telefone,
				ds_email,
				ds_municipio,
				cd_tipo_logradouro,
				ds_compl_end,
				ds_complemento,
				nr_seq_pais
				)
			values (nr_sequencia_w,
				cd_pessoa_fisica_w,
				1,
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				substr(ds_endereco_res_p,1,100),
				substr(ds_bairro_res_p,1,80),
				cd_municipio_ibge_res_w,
				substr(cd_cep_res_p,1,15),
				substr(sg_estado_res_p,1,2),
				substr(nr_telefone_res_p,1,15),
				substr(nr_ddi_telefone_res_p,1,15),
				substr(nr_ddd_telefone_res_p,1,15),
				substr(ds_email_pf_p,1,255),
				substr(ds_municipio_res_p,1,40),
				ds_tipo_logradouro_res_w,
				nr_endereco_res_p,
				substr(ds_complemento_res_p,1,40),
				ds_pais_res_w);
		else
			insert into compl_pessoa_fisica(nr_sequencia,
				cd_pessoa_fisica,
				ie_tipo_complemento,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nm_usuario,
				dt_atualizacao,
				ds_endereco,
				ds_bairro,
				cd_municipio_ibge,
				cd_cep,
				sg_estado,
				nr_telefone,
				nr_ddi_telefone,
				nr_ddd_telefone,
				ds_email,
				ds_municipio,
				cd_tipo_logradouro,
				nr_endereco,
				ds_complemento,
				nr_seq_pais
				)
			values (nr_sequencia_w,
				cd_pessoa_fisica_w,
				1,
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				substr(ds_endereco_res_p,1,100),
				substr(ds_bairro_res_p,1,80),
				cd_municipio_ibge_res_w,
				substr(cd_cep_res_p,1,15),
				substr(sg_estado_res_p,1,2),
				substr(nr_telefone_res_p,1,15),
				substr(nr_ddi_telefone_res_p,1,15),
				substr(nr_ddd_telefone_res_p,1,15),
				substr(ds_email_pf_p,1,255),
				substr(ds_municipio_res_p,1,40),
				ds_tipo_logradouro_res_w,
				nr_endereco_res_p,
				substr(ds_complemento_res_p,1,40),
				ds_pais_res_w);
		end if;
	end if;
				
	--Verifica se existe algum dado de complemento Comercial(COMPLEMENTO 2)
	if	(	(cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and 	--Pessoa fisica
		 (	(nr_ddi_telefone_com_p IS NOT NULL AND nr_ddi_telefone_com_p::text <> '') or  	--DDI
			(nr_ddd_telefone_com_p IS NOT NULL AND nr_ddd_telefone_com_p::text <> '') or 	--DDD
			(nr_telefone_com_p IS NOT NULL AND nr_telefone_com_p::text <> '') or     	--Telefone	
			(cd_cep_com_p IS NOT NULL AND cd_cep_com_p::text <> '') or		-- CEP	
			(ds_pais_com_p IS NOT NULL AND ds_pais_com_p::text <> '') or		-- PAIS
			(sg_estado_com_p IS NOT NULL AND sg_estado_com_p::text <> '') or		-- Estado
			(ds_municipio_com_p IS NOT NULL AND ds_municipio_com_p::text <> '') or	--Municipio
			(ds_tipo_logradouro_com_p IS NOT NULL AND ds_tipo_logradouro_com_p::text <> '') or --Logradouro
			(ds_endereco_com_p IS NOT NULL AND ds_endereco_com_p::text <> '') or	--Endereco
			(nr_endereco_com_p IS NOT NULL AND nr_endereco_com_p::text <> '') or	--Numero
			(ds_complemento_com_p IS NOT NULL AND ds_complemento_com_p::text <> '') or	--Complemento
			(cd_municipio_ibge_com_p IS NOT NULL AND cd_municipio_ibge_com_p::text <> '') or	--IBGE
			(ds_bairro_com_p IS NOT NULL AND ds_bairro_com_p::text <> ''))		--Bairro
			) then
		
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_sequencia_w
		from	compl_pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		
		if (tag_pais_w = 'de_DE')then
			insert into compl_pessoa_fisica(nr_sequencia,
				cd_pessoa_fisica,
				ie_tipo_complemento,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nm_usuario,
				dt_atualizacao,
				ds_endereco,
				ds_bairro,
				cd_municipio_ibge,
				cd_cep,
				sg_estado,
				nr_telefone,
				nr_ddi_telefone,
				nr_ddd_telefone,
				ds_municipio,
				cd_tipo_logradouro,
				ds_compl_end,
				ds_complemento,
				nr_seq_pais
				)
			values (nr_sequencia_w,
				cd_pessoa_fisica_w,
				2,
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				substr(ds_endereco_com_p,1,100),
				substr(ds_bairro_com_p,1,80),
				cd_municipio_ibge_com_w,
				substr(cd_cep_com_p,1,15),
				substr(sg_estado_com_p,1,2),
				substr(nr_telefone_com_p,1,15),
				substr(nr_ddi_telefone_com_p,1,15),
				substr(nr_ddd_telefone_com_p,1,15),
				substr(ds_municipio_com_p,1,40),
				ds_tipo_logradouro_com_w,
				nr_endereco_com_p,
				substr(ds_complemento_com_p,1,40),
				ds_pais_com_w);
		else
			insert into compl_pessoa_fisica(nr_sequencia,
				cd_pessoa_fisica,
				ie_tipo_complemento,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nm_usuario,
				dt_atualizacao,
				ds_endereco,
				ds_bairro,
				cd_municipio_ibge,
				cd_cep,
				sg_estado,
				nr_telefone,
				nr_ddi_telefone,
				nr_ddd_telefone,
				ds_municipio,
				cd_tipo_logradouro,
				nr_endereco,
				ds_complemento,
				nr_seq_pais
				)
			values (nr_sequencia_w,
				cd_pessoa_fisica_w,
				2,
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
				clock_timestamp(),
				substr(ds_endereco_com_p,1,100),
				substr(ds_bairro_com_p,1,80),
				cd_municipio_ibge_com_w,
				substr(cd_cep_com_p,1,15),
				substr(sg_estado_com_p,1,2),
				substr(nr_telefone_com_p,1,15),
				substr(nr_ddi_telefone_com_p,1,15),
				substr(nr_ddd_telefone_com_p,1,15),
				substr(ds_municipio_com_p,1,40),
				ds_tipo_logradouro_com_w,
				nr_endereco_com_p,
				substr(ds_complemento_com_p,1,40),
				ds_pais_com_w);
		end if;
	end if;
	
	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (nm_mae_p IS NOT NULL AND nm_mae_p::text <> '') then
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_sequencia_w
		from	compl_pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		
		insert into compl_pessoa_fisica(nr_sequencia,
			cd_pessoa_fisica,
			ie_tipo_complemento,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nm_usuario,
			dt_atualizacao,
			nm_contato
			)
		values (nr_sequencia_w,
			cd_pessoa_fisica_w,
			5,
			current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
			clock_timestamp(),
			current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
			clock_timestamp(),
			nm_mae_p);
	end if;
	
	if (ie_retorno_w = 1) then
		goto final;
	end if;
	
	commit;
	--Sucesso
	cd_pessoa_fisica_p := cd_pessoa_fisica_w;
	exception
	when others then
		--Erro
		ie_retorno_w := 1;
		ds_mensagem_erro_w := substr(wheb_mensagem_pck.get_texto(1110552, 'DS_ERRO='||sqlerrm(SQLSTATE)) ,1,255);
		rollback;
	end;
	
	if (ie_retorno_w = 0) then
		select	count(1)
		into STRICT	qt_registro_lead_w
		from 	pls_solicitacao_comercial
		where 	cd_pf_vinculado  =  cd_pessoa_fisica_p
		and	ie_status = 'PE';

		select 	max(nr_sequencia)
		into STRICT	nr_seq_vendedor_vinc_novo_w
		from 	pls_vendedor
		where 	cd_pessoa_fisica = cd_pessoa_vendedor_p;
		
		if 	(cd_pessoa_vendedor_p IS NOT NULL AND cd_pessoa_vendedor_p::text <> '' AND qt_registro_lead_w > 0) then
			select 	max(b.nr_sequencia),
				max(c.cd_pessoa_fisica),
				max(a.ie_status),
				max(a.nr_sequencia)
			into STRICT	nr_seq_vendedor_solic_w,
				cd_pf_vendedor_vinculado_w,
				ie_status_w,
				nr_seq_solic_comercial_w
			from 	pls_solicitacao_comercial a,
				pls_solicitacao_vendedor b,
				pls_vendedor c
			where 	a.cd_pf_vinculado = cd_pessoa_fisica_p
			and   	b.nr_seq_solicitacao = a.nr_sequencia
			and  	b.nr_seq_vendedor_canal = c.nr_sequencia
			and (coalesce(b.nr_sequencia::text, '') = ''
			or    	clock_timestamp() between b.dt_inicio_vigencia and coalesce(b.dt_fim_vigencia,clock_timestamp()))
			and	a.ie_status = 'PE';
			
			if (cd_pf_vendedor_vinculado_w <> cd_pessoa_vendedor_p) then
				update	pls_solicitacao_vendedor
				set 	dt_fim_vigencia = clock_timestamp(),
					nm_usuario = current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
					dt_atualizacao = clock_timestamp()
				where 	nr_sequencia = nr_seq_vendedor_solic_w;
				
				insert 	into 	pls_solicitacao_vendedor(nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_estabelecimento,
									nr_seq_solicitacao,
									dt_inicio_vigencia,
									nr_seq_vendedor_canal)
					values (nextval('pls_solicitacao_vendedor_seq'),
									clock_timestamp(),
									current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
									clock_timestamp(),
									current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type,
									1,
									nr_seq_solic_comercial_w,
									clock_timestamp(),
									nr_seq_vendedor_vinc_novo_w);
			end if;
		else
			if (upper(ds_status_p) = 'LEAD') then
				SELECT * FROM pls_obj_plussoft_pck.pls_gerar_lead_pf_pj(	cd_pessoa_fisica_p, null, nr_seq_vendedor_vinc_novo_w, nr_seq_agente_motivador_p, nr_seq_origem_agente_p, nr_seq_segurado_indic_p, cd_pessoa_indicacao_p, null, ds_observacao_p, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, 'A', ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;

				if (ie_retorno_lead_w =1) then
					ie_retorno_w := 1;
					ds_mensagem_erro_w := ds_mensagem_erro_w;
				end if;
			end if;
		end if;
		
		if (upper(ds_status_p) = 'PROSPECT') then
			SELECT * FROM pls_obj_plussoft_pck.gerar_proposta_comercial(cd_pessoa_fisica_p, null, current_setting('pls_obj_plussoft_pck.nm_usuario_w')::usuario.nm_usuario%type, ie_retorno_lead_w, ds_mensagem_erro_w) INTO STRICT ie_retorno_lead_w, ds_mensagem_erro_w;

			if (ie_retorno_lead_w = 1) then
				ie_retorno_w := 1;
			end if;
		end if;
	end if;
	
end if;

<<FINAL>>
--Retorno
ie_retorno_p := ie_retorno_w;
--Mensagem
ds_mensagem_erro_p := ds_mensagem_erro_w;
if (ie_retorno_w = 1) then
	rollback;
else
	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obj_plussoft_pck.atualiza_dados_pessoa ( cd_pessoa_fisica_p INOUT pessoa_fisica.cd_pessoa_fisica%type, cd_cgc_p INOUT pessoa_juridica.cd_cgc%type, nm_pessoa_fisica_p pessoa_fisica.nm_pessoa_fisica%type, ds_razao_social_p pessoa_juridica.ds_razao_social%type, nm_abreviado_p pessoa_fisica.nm_abreviado%type, nm_fantasia_p pessoa_juridica.nm_fantasia%type, ie_tipo_pessoa_p text, ie_sexo_p pessoa_fisica.ie_sexo%type, ie_estado_civil_p pessoa_fisica.ie_estado_civil%type, nr_ddi_telefone_res_p text, nr_ddd_telefone_res_p text, nr_telefone_res_p text, ds_fone_adic_p text, nr_ddi_celular_p text, nr_ddd_celular_p text, nr_telefone_celular_p text, nr_ddi_telefone_com_p text, nr_ddd_telefone_com_p text, nr_telefone_com_p text, ds_email_pf_p text, ds_email_pj_p text,  ie_tipo_complemento_res_p text, cd_cep_res_p text, ds_pais_res_p text, sg_estado_res_p text, ds_municipio_res_p text, ds_tipo_logradouro_res_p text, ds_endereco_res_p text, nr_endereco_res_p text, ds_complemento_res_p text, cd_municipio_ibge_res_p text, ds_bairro_res_p text, ie_endereco_pagador_res_p text,  ie_tipo_complemento_com_p text, cd_cep_com_p text, ds_pais_com_p text, sg_estado_com_p text, ds_municipio_com_p text, ds_tipo_logradouro_com_p text, ds_endereco_com_p text, nr_endereco_com_p text, ds_complemento_com_p text, cd_municipio_ibge_com_p text, ds_bairro_com_p text, ie_endereco_pagador_com_p text,  nr_identidade_p text, nr_inscricao_estadual_p text, nr_cpf_p text, dt_nascimento_p text, ds_cargo_p text, ds_observacao_pf_p text, ds_observacao_pj_p text, ds_status_p text,  nr_seq_vendedor_p pls_vendedor.nr_sequencia%type, cd_pessoa_vendedor_p pessoa_fisica.cd_pessoa_fisica%type, nr_seq_agente_motivador_p pls_agente_motivador.nr_sequencia%type, nr_seq_origem_agente_p pls_agente_motivador_orig.nr_sequencia%type, nr_seq_segurado_indic_p pls_solicitacao_comercial.nr_seq_segurado_indic%type, cd_pessoa_indicacao_p pls_solicitacao_comercial.cd_pessoa_indicacao%type, ds_observacao_p pls_solicitacao_comercial.ds_observacao%type, ds_naturalidade_p text, cd_nacionalidade_p text, ie_grau_instrucao_p text, nr_pis_pasep_p text, nr_cartao_nac_sus_p text, dt_emissao_ci_p timestamp, ds_orgao_emissor_ci_p text, sg_emissora_ci_p text, nm_pais_p text, cd_declaracao_nasc_vivo_p text, nm_contato_p text, nm_mae_p text, nr_seq_renda_p text, cd_pessoa_usuario_p pessoa_fisica.cd_pessoa_fisica%type,  ie_retorno_p INOUT bigint, ds_mensagem_erro_p INOUT text) FROM PUBLIC;
