-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_obj_plussoft_pck.gerar_proposta_adesao ( nr_seq_lista_benef_p bigint, nr_seq_lista_sca_p bigint, --pls_proposta_adesao
 ie_tipo_proposta_p pls_proposta_adesao.ie_tipo_proposta%type, nr_seq_contrato_p pls_proposta_adesao.nr_seq_contrato%type, ie_tipo_contratacao_p pls_proposta_adesao.ie_tipo_contratacao%type, dt_inicio_proposta_p pls_proposta_adesao.dt_inicio_proposta%type, nr_seq_bonificacao_p bigint, nr_seq_motivo_cancel_p pls_proposta_adesao.nr_seq_motivo_cancel%type, cd_estipulante_p pls_proposta_adesao.cd_estipulante%type, cd_cgc_estipulante_p pls_proposta_adesao.cd_cgc_estipulante%type, nr_seq_vendedor_pf_p pls_proposta_adesao.nr_seq_vendedor_pf%type, nr_seq_vendedor_canal_p pls_proposta_adesao.nr_seq_vendedor_canal%type, --pls_proposta_plano
 nr_seq_plano_p pls_proposta_plano.nr_seq_plano%type, --pls_proposta_pagador
 dt_dia_vencimento_p pls_proposta_pagador.dt_dia_vencimento%type, cd_pagador_p pls_proposta_pagador.cd_pagador%type, cd_cgc_pagador_p pls_proposta_pagador.cd_cgc_pagador%type, ds_email_p pls_proposta_pagador.ds_email%type, nr_seq_classif_itens_p pls_proposta_pagador.nr_seq_classif_itens%type, nr_seq_dia_vencimento_p pls_proposta_pagador.nr_seq_dia_vencimento%type, nr_seq_forma_cobranca_p pls_proposta_pagador.nr_seq_forma_cobranca%type, cd_banco_p pls_proposta_pagador.cd_banco%type, cd_agencia_bancaria_p pls_proposta_pagador.cd_agencia_bancaria%type, cd_conta_p pls_proposta_pagador.cd_conta%type, cd_condicao_pagamento_p pls_proposta_pagador.cd_condicao_pagamento%type, ie_endereco_boleto_p pls_proposta_pagador.ie_endereco_boleto%type, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_vig_pag_p pls_proposta_pagador.dt_inicio_vigencia%type, nr_seq_tabela_p pls_proposta_plano.nr_seq_tabela%type, nr_seq_agente_motivador_p pls_agente_motivador.nr_sequencia%type, nr_seq_origem_agente_p pls_agente_motivador_orig.nr_seq_agente_motivador%type, nr_seq_segurado_indic_p pls_solicitacao_comercial.nr_seq_segurado_indic%type, cd_pessoa_indicacao_p pls_solicitacao_comercial.cd_pessoa_indicacao%type, ds_erro_p INOUT text, nr_seq_proposta_p INOUT bigint) AS $body$
DECLARE


nr_seq_proposta_w		bigint;
nr_seq_proposta_plano_w		bigint;
nr_seq_pagador_w		bigint;
current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type		bigint;
nr_seq_benef_pro_tit_w		bigint;
nr_seq_tabela_w			bigint;
nr_seq_tab_sca_w		bigint;
nr_seq_motivo_inclusao_w	pls_proposta_beneficiario.nr_seq_motivo_inclusao%type;
dt_dia_vencimento_w		pls_regra_dia_vencimento.dt_dia_vencimento%type;
current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint		bigint;
nr_seq_plano_w			bigint;
nr_seq_titular_contrato_w	bigint;
current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type	pls_indicacao_venda.nr_sequencia%type;
qt_registro_w			bigint;

--beneficiarios titulares da proposta
current_setting('pls_obj_plussoft_pck.c01')::CURSOR CURSOR(	nr_seq_lista_benef_pc	bigint) FOR
	SELECT	nr_sequencia,
		nr_item,
		cd_pessoa_fisica,
		nr_seq_parentesco,
		dt_nascimento,
		ie_nascido_plano,
		nr_seq_titular_contrato,
		nr_seq_titular_prop,
		nr_seq_regra_carencia
	from	w_plussoft_benef_proposta
	where	nr_sequencia = nr_seq_lista_benef_pc
	and	coalesce(nr_titular_solic::text, '') = ''
	order by nr_item asc;

--beneficiarios dependentes da proposta
current_setting('pls_obj_plussoft_pck.c02')::CURSOR CURSOR(	nr_seq_lista_benef_pc	bigint) FOR
	SELECT	nr_sequencia,
		nr_item,
		cd_pessoa_fisica,
		nr_seq_parentesco,
		dt_nascimento,
		ie_nascido_plano,
		nr_titular_solic
	from	w_plussoft_benef_proposta
	where	nr_sequencia = nr_seq_lista_benef_pc
	and	(nr_titular_solic IS NOT NULL AND nr_titular_solic::text <> '')
	order by nr_item asc;
	
--Lista de SCA
C03 CURSOR(	nr_seq_lista_sca_pc	bigint) FOR
	SELECT	nr_sequencia,
		nr_item,
		nr_seq_plano_sca,
		nr_seq_tabela_sca
	from	w_plussoft_plano_proposta
	where	nr_sequencia = nr_seq_lista_sca_pc
	order by nr_item asc;
	
BEGIN
--Caso exista a proposta de adesao
if (nr_seq_proposta_p IS NOT NULL AND nr_seq_proposta_p::text <> '') then
	null;
else
	--Insere a proposta de adesao
	begin
	if (nr_seq_tabela_p IS NOT NULL AND nr_seq_tabela_p::text <> '') then
		nr_seq_tabela_w := nr_seq_tabela_p;
	else
		begin
			select	max(nr_seq_tabela)
			into STRICT	nr_seq_tabela_w
			from	pls_regra_simulador_web
			where	nr_seq_plano = nr_seq_plano_p
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	clock_timestamp() between pls_util_pck.obter_dt_vigencia_null(dt_inicio_vigencia,'I') and pls_util_pck.obter_dt_vigencia_null(dt_fim_vigencia,'F');
		exception
		when others then
			nr_seq_tabela_w := null;
		end;
	end if;
	
	--Gera a proposta de adesao
	select	nextval('pls_proposta_adesao_seq')
	into STRICT	nr_seq_proposta_w
	;
	--Insere a proposta de adesao
	insert	into	pls_proposta_adesao(	nr_sequencia,		ie_tipo_proposta,	nr_seq_contrato,
			ie_tipo_contratacao,	dt_inicio_proposta,
			nr_seq_motivo_cancel,	cd_estipulante,		cd_cgc_estipulante,
			nr_seq_vendedor_pf,	nr_seq_vendedor_canal,	cd_estabelecimento,
			dt_atualizacao, 	nm_usuario,		dt_atualizacao_nrec,
			nm_usuario_nrec,	ie_status,		nr_seq_agente_motivador,
			nr_seq_origem_agente)
	values (		nr_seq_proposta_w,	ie_tipo_proposta_p,	nr_seq_contrato_p,
			ie_tipo_contratacao_p,	dt_inicio_proposta_p,
			nr_seq_motivo_cancel_p,	cd_estipulante_p,	cd_cgc_estipulante_p,
			nr_seq_vendedor_pf_p,	nr_seq_vendedor_canal_p,cd_estabelecimento_p,
			clock_timestamp(),		nm_usuario_p,		clock_timestamp(),
			nm_usuario_p,		'U',			nr_seq_agente_motivador_p,
			nr_seq_origem_agente_p);
			
	if (cd_pessoa_indicacao_p IS NOT NULL AND cd_pessoa_indicacao_p::text <> '') then
		select	nextval('pls_indicacao_venda_seq')
		into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type
		;
				
		insert 	into 	pls_indicacao_venda(	nr_sequencia, 			cd_estabelecimento, 		dt_atualizacao,
				nm_usuario, 			dt_atualizacao_nrec, 		nm_usuario_nrec,
				nr_seq_proposta, 		cd_pessoa_fisica)
		values (		current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type,	1,				clock_timestamp(),
				'plusoft',			clock_timestamp(),			'plusoft',
				nr_seq_proposta_w,		cd_pessoa_indicacao_p);
	end if;
			
	if (ie_tipo_proposta_p = 2) then
		select 	nr_sequencia
		into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint
		from 	pls_contrato
		where 	nr_contrato = nr_seq_contrato_p;
		
		CALL pls_proposta_dados_contrato(nr_seq_proposta_w,	current_setting('pls_obj_plussoft_pck.nr_seq_contrato_w')::bigint, null,'plusoft');
	else
			
		--Adiciona produto a proposta
		select	nextval('pls_proposta_plano_seq')
		into STRICT	nr_seq_proposta_plano_w
		;
		--Insere produto
		insert into 	pls_proposta_plano(	nr_sequencia,		nr_seq_proposta,	nr_seq_plano,
				ie_principal,		dt_atualizacao, 	nm_usuario,
				dt_atualizacao_nrec, 	nm_usuario_nrec,	nr_seq_tabela)
		values (		nr_seq_proposta_plano_w,nr_seq_proposta_w,	nr_seq_plano_p,
				'S',			clock_timestamp(), 		nm_usuario_p,
				clock_timestamp(), 		nm_usuario_p,		nr_seq_tabela_w);

	end if;
	
	--Gera o pagador
	if (nr_seq_dia_vencimento_p IS NOT NULL AND nr_seq_dia_vencimento_p::text <> '') then
		begin
			select	dt_dia_vencimento
			into STRICT	dt_dia_vencimento_w
			from	pls_regra_dia_vencimento
			where	nr_sequencia = nr_seq_dia_vencimento_p;
		exception
		when others then
			dt_dia_vencimento_w := null;
		end;
	end if;
	
	if (ie_tipo_proposta_p = 2) then
		select 	max(nr_sequencia)
		into STRICT	nr_seq_pagador_w
		from 	pls_proposta_pagador
		where 	nr_seq_proposta = nr_seq_proposta_w;
	else
		select	nextval('pls_proposta_pagador_seq')
		into STRICT	nr_seq_pagador_w
		;

		--Insere o pagador
		insert	into	pls_proposta_pagador(	nr_sequencia,			nr_seq_proposta,		dt_dia_vencimento,
				cd_pagador,			cd_cgc_pagador,			nr_seq_classif_itens,
				nr_seq_dia_vencimento,		nr_seq_forma_cobranca,		cd_banco,
				cd_agencia_bancaria,		cd_conta,			cd_condicao_pagamento,
				ie_endereco_boleto,		dt_atualizacao, 		nm_usuario,
				dt_atualizacao_nrec,		nm_usuario_nrec, 		ds_email,
				dt_inicio_vigencia)
		values (	nr_seq_pagador_w,		nr_seq_proposta_w,		coalesce(dt_dia_vencimento_w,dt_dia_vencimento_p),
				cd_pagador_p,			cd_cgc_pagador_p,		nr_seq_classif_itens_p,
				nr_seq_dia_vencimento_p,	nr_seq_forma_cobranca_p,	cd_banco_p,
				cd_agencia_bancaria_p,		cd_conta_p,			cd_condicao_pagamento_p,
				ie_endereco_boleto_p,		clock_timestamp(), 			nm_usuario_p,
				clock_timestamp(),			nm_usuario_p,			ds_email_p,
				dt_inicio_vig_pag_p);
	end if;
	
	--Gera os beneficiarios titulares
	for r_c01_w in current_setting('pls_obj_plussoft_pck.c01')::CURSOR(nr_seq_lista_benef_p) loop
	
		if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
			begin
			select	nr_seq_motivo_inclusao
			into STRICT	nr_seq_motivo_inclusao_w
			from	pls_parametros
			where	cd_estabelecimento = cd_estabelecimento_p;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
			end;
			
			if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
			end if;
		end if;
		
		if (ie_tipo_proposta_p = 2) then
			select 	max(nr_seq_tabela),
				max(nr_seq_plano)
			into STRICT	nr_seq_tabela_w,
				nr_Seq_plano_w
			from 	pls_proposta_plano
			where 	nr_seq_proposta = nr_seq_proposta_w;
		else
			nr_seq_plano_w := nr_seq_plano_p;
		end if;
		
		select	nextval('pls_proposta_beneficiario_seq')
		into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type
		;

		if (ie_tipo_proposta_p = 2) then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_titular_contrato_w
			from 	pls_segurado a,
				pls_contrato b
			where 	a.nr_seq_contrato = b.nr_sequencia
			and     coalesce(a.nr_seq_titular::text, '') = ''
			and     b.nr_contrato = nr_seq_contrato_p
			and (coalesce(a.dt_rescisao::text, '') = '' 
			or 	a.dt_rescisao > clock_timestamp());
		else
			nr_seq_titular_contrato_w := r_c01_w.nr_seq_titular_contrato;
		end if;
	
		insert	into	pls_proposta_beneficiario(	nr_sequencia, 				nr_seq_proposta, 		cd_beneficiario,
				dt_atualizacao, 			nm_usuario, 			dt_atualizacao_nrec,
				nm_usuario_nrec, 			nr_seq_pagador, 		nr_seq_plano,
				nr_seq_titular, 			nr_seq_parentesco, 		nr_seq_tabela,
				nr_seq_titular_contrato,		nr_seq_motivo_inclusao,		ie_taxa_inscricao,
				ie_nascido_plano)
		values ( 	current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type,		nr_seq_proposta_w, 		r_c01_w.cd_pessoa_fisica,
				clock_timestamp(), 				nm_usuario_p, 			clock_timestamp(),
				nm_usuario_p, 				nr_seq_pagador_w, 		nr_seq_plano_w,
				null, 					r_c01_w.nr_seq_parentesco, 	nr_seq_tabela_w,
				nr_seq_titular_contrato_w,		nr_seq_motivo_inclusao_w,	'S',
				r_c01_w.ie_nascido_plano);

		--Guarda o beneficiario gerado na proposta
		update	w_plussoft_benef_proposta
		set	nr_seq_benef_prop = current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type
		where	nr_sequencia = r_c01_w.nr_sequencia
		and	nr_item = r_c01_w.nr_item;
		
		if (nr_seq_segurado_indic_p IS NOT NULL AND nr_seq_segurado_indic_p::text <> '') then
			select 	count(*)
			into STRICT	qt_registro_w
			from 	pls_indicacao_venda
			where	nr_seq_segurado_prop = current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type;
					
			if (qt_registro_w = 0) then
				select	nextval('pls_indicacao_venda_seq')
				into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type
				;
						
				insert 	into 	pls_indicacao_venda(	nr_sequencia, 			cd_estabelecimento, 		dt_atualizacao,
						nm_usuario, 			dt_atualizacao_nrec, 		nm_usuario_nrec,
						nr_seq_segurado_prop, 		nr_seq_segurado, 		nr_seq_segurado_indicacao)
				values (		current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type,	1,				clock_timestamp(),
						'plusoft',			clock_timestamp(),			'plusoft',
						current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type,	nr_seq_segurado_indic_p,	nr_seq_segurado_indic_p);
			else
				update	pls_indicacao_venda
				set	nr_seq_segurado = nr_seq_segurado_indic_p,
					nr_seq_segurado_indicacao = nr_seq_segurado_indic_p,
					dt_atualizacao = clock_timestamp(),
					nm_usuario = 'plusoft'
				where	nr_seq_segurado_prop = current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type;
				end if;
		end if;

	
		
		if (coalesce(r_c01_w.nr_seq_regra_carencia,0) > 0) then
			CALL pls_inserir_carencia_regra(current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type, null, null, null, r_c01_w.nr_seq_regra_carencia, nm_usuario_p);
		end if;
				
		--Gerar SCA por beneficiario da proposta
		for r_c03_w in C03(nr_seq_lista_sca_p) loop
			--Busca tabela de preco padrao da regra de simulador de preco cadastrada para o produto/sca
			begin
			select	max(nr_seq_tabela)
			into STRICT	nr_seq_tab_sca_w
			from	pls_regra_simulador_web
			where	nr_seq_plano = r_c03_w.nr_seq_plano_sca
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	clock_timestamp() between pls_util_pck.obter_dt_vigencia_null(dt_inicio_vigencia,'I') and pls_util_pck.obter_dt_vigencia_null(dt_fim_vigencia,'F');
			exception
			when others then
				nr_seq_tab_sca_w := null;
			end;
			
			insert into pls_sca_vinculo(	nr_sequencia,dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
					nr_seq_benef_proposta, nr_seq_plano, nr_seq_tabela, nr_seq_vendedor_canal, nr_seq_vendedor_pf,
					dt_inicio_vigencia)
			values (	nextval('pls_sca_vinculo_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type, r_c03_w.nr_seq_plano_sca, coalesce(r_c03_w.nr_seq_tabela_sca, nr_seq_tab_sca_w), null, null,
					dt_inicio_proposta_p);
		end loop;--C03
	end loop;--C01
	--Gera os beneficiarios dependentes
	for r_c02_w in current_setting('pls_obj_plussoft_pck.c02')::CURSOR(nr_seq_lista_benef_p) loop
		--Procura o titular inserido
		begin
		select	max(nr_seq_benef_prop)
		into STRICT	nr_seq_benef_pro_tit_w
		from	w_plussoft_benef_proposta
		where	nr_sequencia 	= r_c02_w.nr_sequencia
		and	nr_item 	= r_c02_w.nr_titular_solic;
		exception
		when others then
			nr_seq_benef_pro_tit_w := null;
		end;

		if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
			begin
			select	nr_seq_motivo_inclusao
			into STRICT	nr_seq_motivo_inclusao_w
			from	pls_parametros
			where	cd_estabelecimento = cd_estabelecimento_p;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
			end;
			
			if (coalesce(nr_seq_motivo_inclusao_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(194711);
			end if;
		end if;
		
		select	nextval('pls_proposta_beneficiario_seq')
		into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type
		;

		insert	into	pls_proposta_beneficiario(	nr_sequencia, 			nr_seq_proposta, 		cd_beneficiario,
				dt_atualizacao, 		nm_usuario, 			dt_atualizacao_nrec,
				nm_usuario_nrec, 		nr_seq_pagador, 		nr_seq_plano,
				nr_seq_titular, 		nr_seq_parentesco, 		nr_seq_tabela,
				nr_seq_titular_contrato,	nr_seq_motivo_inclusao,		ie_taxa_inscricao,
				ie_nascido_plano)
		values ( 	current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type,	nr_seq_proposta_w, 		r_c02_w.cd_pessoa_fisica,
				clock_timestamp(), 			nm_usuario_p, 			clock_timestamp(),
				nm_usuario_p, 			nr_seq_pagador_w, 		nr_seq_plano_p,
				nr_seq_benef_pro_tit_w, 	r_c02_w.nr_seq_parentesco, 	nr_seq_tabela_w,
				null,				nr_seq_motivo_inclusao_w,	'S',
				r_c02_w.ie_nascido_plano);
		
		if (nr_seq_segurado_indic_p IS NOT NULL AND nr_seq_segurado_indic_p::text <> '') then
			select	nextval('pls_indicacao_venda_seq')
			into STRICT	current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type
			;
			
			insert 	into 	pls_indicacao_venda(	nr_sequencia, 			cd_estabelecimento, 		dt_atualizacao,
					nm_usuario, 			dt_atualizacao_nrec, 		nm_usuario_nrec,
					nr_seq_segurado_prop, 		nr_seq_segurado, 		nr_seq_segurado_indicacao)
			values (		current_setting('pls_obj_plussoft_pck.nr_seq_indicacao_venda_w')::pls_indicacao_venda.nr_sequencia%type,	1,				clock_timestamp(),
					'plusoft',			clock_timestamp(),			'plusoft',
					current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type,	nr_seq_segurado_indic_p,	nr_seq_segurado_indic_p);
		end if;
		
		--Gerar SCA por beneficiario da proposta
		for r_c03_w in C03(nr_seq_lista_sca_p) loop
			--Busca tabela de preco padrao da regra de simulador de preco cadastrada para o produto/sca
			begin
			select	max(nr_seq_tabela)
			into STRICT	nr_seq_tab_sca_w
			from	pls_regra_simulador_web
			where	nr_seq_plano = r_c03_w.nr_seq_plano_sca
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	clock_timestamp() between pls_util_pck.obter_dt_vigencia_null(dt_inicio_vigencia,'I') and pls_util_pck.obter_dt_vigencia_null(dt_fim_vigencia,'F');
			exception
			when others then
				nr_seq_tab_sca_w := null;
			end;
			
			insert into pls_sca_vinculo(	nr_sequencia,dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
					nr_seq_benef_proposta, nr_seq_plano, nr_seq_tabela, nr_seq_vendedor_canal, nr_seq_vendedor_pf)
			values (	nextval('pls_sca_vinculo_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					current_setting('pls_obj_plussoft_pck.nr_seq_proposta_benef_w')::pls_proposta_beneficiario.nr_sequencia%type, r_c03_w.nr_seq_plano_sca, coalesce(r_c03_w.nr_seq_tabela_sca, nr_seq_tab_sca_w), null, null);
		end loop;--C03
	end loop;--C02
	
	if (nr_seq_bonificacao_p IS NOT NULL AND nr_seq_bonificacao_p::text <> '') then
		ds_erro_p := pls_obj_plussoft_pck.gerar_bonificacao_proposta(nr_seq_proposta_w, nr_seq_bonificacao_p, nm_usuario_p, ds_erro_p);
	end if;
	
	--Se deu tudo certo commita as informacoes
	commit;
	nr_seq_proposta_p := nr_seq_proposta_w;
	exception
	when others then
		rollback;
		ds_erro_p := substr('Falha ao gerar proposta : ' || sqlerrm(SQLSTATE) ,1,255);
	end;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obj_plussoft_pck.gerar_proposta_adesao ( nr_seq_lista_benef_p bigint, nr_seq_lista_sca_p bigint,  ie_tipo_proposta_p pls_proposta_adesao.ie_tipo_proposta%type, nr_seq_contrato_p pls_proposta_adesao.nr_seq_contrato%type, ie_tipo_contratacao_p pls_proposta_adesao.ie_tipo_contratacao%type, dt_inicio_proposta_p pls_proposta_adesao.dt_inicio_proposta%type, nr_seq_bonificacao_p bigint, nr_seq_motivo_cancel_p pls_proposta_adesao.nr_seq_motivo_cancel%type, cd_estipulante_p pls_proposta_adesao.cd_estipulante%type, cd_cgc_estipulante_p pls_proposta_adesao.cd_cgc_estipulante%type, nr_seq_vendedor_pf_p pls_proposta_adesao.nr_seq_vendedor_pf%type, nr_seq_vendedor_canal_p pls_proposta_adesao.nr_seq_vendedor_canal%type,  nr_seq_plano_p pls_proposta_plano.nr_seq_plano%type,  dt_dia_vencimento_p pls_proposta_pagador.dt_dia_vencimento%type, cd_pagador_p pls_proposta_pagador.cd_pagador%type, cd_cgc_pagador_p pls_proposta_pagador.cd_cgc_pagador%type, ds_email_p pls_proposta_pagador.ds_email%type, nr_seq_classif_itens_p pls_proposta_pagador.nr_seq_classif_itens%type, nr_seq_dia_vencimento_p pls_proposta_pagador.nr_seq_dia_vencimento%type, nr_seq_forma_cobranca_p pls_proposta_pagador.nr_seq_forma_cobranca%type, cd_banco_p pls_proposta_pagador.cd_banco%type, cd_agencia_bancaria_p pls_proposta_pagador.cd_agencia_bancaria%type, cd_conta_p pls_proposta_pagador.cd_conta%type, cd_condicao_pagamento_p pls_proposta_pagador.cd_condicao_pagamento%type, ie_endereco_boleto_p pls_proposta_pagador.ie_endereco_boleto%type, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_vig_pag_p pls_proposta_pagador.dt_inicio_vigencia%type, nr_seq_tabela_p pls_proposta_plano.nr_seq_tabela%type, nr_seq_agente_motivador_p pls_agente_motivador.nr_sequencia%type, nr_seq_origem_agente_p pls_agente_motivador_orig.nr_seq_agente_motivador%type, nr_seq_segurado_indic_p pls_solicitacao_comercial.nr_seq_segurado_indic%type, cd_pessoa_indicacao_p pls_solicitacao_comercial.cd_pessoa_indicacao%type, ds_erro_p INOUT text, nr_seq_proposta_p INOUT bigint) FROM PUBLIC;
