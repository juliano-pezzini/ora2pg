-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_demonstrativo_analise_pck.obter_se_conta_paga ( ie_tipo_prestador_p pls_web_param_geral.ie_prest_demonstrativo%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type) RETURNS varchar AS $body$
DECLARE


qt_registros_w		integer;
qt_registros_lote_w	integer;
qt_registros_pagos_w	integer;
ie_funcao_pagamento_w	pls_parametro_pagamento.ie_funcao_pagamento%type;


BEGIN

-- primeiro ira verificar na funcao atual do pagamento

if (ie_tipo_prestador_p = 'PA') then

	-- Conta a quantidade de registros com dados de pagamento

	-- Conta a quantidade de registros com dados de pagamento e com lote de gerado

	select	coalesce(sum(qt),0),
		coalesce(sum(qt_pgto),0)
	into STRICT	qt_registros_w,
		qt_registros_lote_w
	from (	
		SELECT	count(1) qt,
			count(a.nr_seq_lote_pgto) qt_pgto
		from	pls_conta_medica_resumo	a,
			pls_conta_proc		b
		where	a.nr_seq_conta		= b.nr_seq_conta
		and	a.nr_seq_conta_proc	= b.nr_sequencia
		and	b.nr_seq_conta		= nr_seq_conta_p
		and 	a.ie_situacao		= 'A'
		and	a.ie_tipo_item		<> 'I'
		
union all

		SELECT	count(1) qt,
			count(a.nr_seq_lote_pgto) qt_pgto
		from	pls_conta_medica_resumo	a,
			pls_conta_mat		b
		where	a.nr_seq_conta		= b.nr_seq_conta
		and	a.nr_seq_conta_mat	= b.nr_sequencia
		and	b.nr_seq_conta		= nr_seq_conta_p
		and 	a.ie_situacao 		= 'A'
		and	a.ie_tipo_item		<> 'I') alias9;

elsif (ie_tipo_prestador_p = 'PP') then

	--Conta a quantidade de registros com dados de pagamento

	--Conta a quantidade de registros com dados de pagamento e com lote de gerado

	select	coalesce(sum(qt),0),
		coalesce(sum(qt_pgto),0)
	into STRICT	qt_registros_w,
		qt_registros_lote_w
	from (	
		SELECT	count(1) qt,
			count(a.nr_seq_lote_pgto) qt_pgto
		from	pls_conta_medica_resumo	a,
			pls_conta_proc		b
		where	a.nr_seq_conta		= b.nr_seq_conta
		and	a.nr_seq_conta_proc	= b.nr_sequencia
		and	a.nr_seq_prestador_pgto	= nr_seq_prestador_p
		and	b.nr_seq_conta		= nr_seq_conta_p
		and 	a.ie_situacao = 'A'
		and	a.ie_tipo_item <> 'I'
		
union all

		SELECT	count(1) qt,
			count(a.nr_seq_lote_pgto) qt_pgto
		from	pls_conta_medica_resumo	a,
			pls_conta_mat		b
		where	a.nr_seq_conta		= b.nr_seq_conta
		and	a.nr_seq_conta_mat	= b.nr_sequencia
		and	a.nr_seq_prestador_pgto	= nr_seq_prestador_p
		and	b.nr_seq_conta		= nr_seq_conta_p
		and 	a.ie_situacao = 'A'
		and	a.ie_tipo_item <> 'I') alias9;
end if;

--Verificar se todos os registros ja foram gerados lote de pagamentos

if (qt_registros_lote_w = qt_registros_w) and (qt_registros_w > 0) then

	if (ie_tipo_prestador_p = 'PA') then

		select	coalesce(sum(coalesce(qt,0)),0)
		into STRICT	qt_registros_pagos_w
		from (	
			SELECT	1 qt
			from	pls_conta_medica_resumo	a,
				pls_conta_proc		b
			where	a.nr_seq_conta		= b.nr_seq_conta
			and	a.nr_seq_conta_proc	= b.nr_sequencia
			and	b.nr_seq_conta		= nr_seq_conta_p
			and 	a.ie_situacao = 'A'
			and	a.ie_tipo_item <> 'I'
			and	exists (	SELECT	1
					from	pls_pagamento_item		v,
						pls_pag_prest_vencimento	y,
						titulo_pagar			z
					where	a.nr_seq_pag_item		= v.nr_sequencia
					and	v.nr_seq_pagamento		= y.nr_seq_pag_prestador
					and	z.nr_titulo			= y.nr_titulo
					and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> ''))
			
union all

			select	1 qt
			from	pls_conta_medica_resumo	a,
				pls_conta_mat		b
			where	a.nr_seq_conta		= b.nr_seq_conta
			and	a.nr_seq_conta_mat	= b.nr_sequencia
			and	b.nr_seq_conta		= nr_seq_conta_p
			and 	a.ie_situacao = 'A'
			and	a.ie_tipo_item <> 'I'
			and	exists (	select	1
					from	pls_pagamento_item		v,
						pls_pag_prest_vencimento	y,
						titulo_pagar			z
					where	a.nr_seq_pag_item		= v.nr_sequencia
					and	v.nr_seq_pagamento		= y.nr_seq_pag_prestador
					and	z.nr_titulo			= y.nr_titulo
					and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> ''))) alias10;

	elsif (ie_tipo_prestador_p = 'PP') then

		select	coalesce(sum(coalesce(qt,0)),0)
		into STRICT	qt_registros_pagos_w
		from (	SELECT	1 qt
			from	pls_conta_medica_resumo	a,
				pls_conta_proc		b
			where	a.nr_seq_conta		= b.nr_seq_conta
			and	a.nr_seq_conta_proc	= b.nr_sequencia
			and	a.nr_seq_prestador_pgto	= nr_seq_prestador_p
			and	b.nr_seq_conta		= nr_seq_conta_p
			and 	a.ie_situacao = 'A'
			and	a.ie_tipo_item <> 'I'
			and	exists (	select	1
					from	pls_pagamento_item		v,
						pls_pag_prest_vencimento	y,
						titulo_pagar			z
					where	a.nr_seq_pag_item		= v.nr_sequencia
					and	v.nr_seq_pagamento		= y.nr_seq_pag_prestador
					and	z.nr_titulo			= y.nr_titulo
					and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> ''))
			
union all

			SELECT	1 qt
			from	pls_conta_medica_resumo	a,
				pls_conta_mat		b
			where	a.nr_seq_conta		= b.nr_seq_conta
			and	a.nr_seq_conta_mat	= b.nr_sequencia
			and	a.nr_seq_prestador_pgto	= nr_seq_prestador_p
			and	b.nr_seq_conta		= nr_seq_conta_p
			and 	a.ie_situacao = 'A'
			and	a.ie_tipo_item <> 'I'
			and	exists (	select	1
					from	pls_pagamento_item		v,
						pls_pag_prest_vencimento	y,
						titulo_pagar			z
					where	a.nr_seq_pag_item		= v.nr_sequencia
					and	v.nr_seq_pagamento		= y.nr_seq_pag_prestador
					and	z.nr_titulo			= y.nr_titulo
					and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> ''))) alias8;
	end if;

	if (qt_registros_pagos_w	= qt_registros_w) then
		return 'S';
	end if;
end if;

ie_funcao_pagamento_w := pls_pp_lote_pagamento_pck.obter_funcao_pagamento_prod(null);

-- caso nao tenha encontrado na funcao atual e o parametro for a funcao OPS - Pagamentos de Producao Medica(nova)

-- entao verifica tambem no novo pagamento

if (ie_funcao_pagamento_w = '2') then
	if (ie_tipo_prestador_p = 'PA') then

		-- quantidade de registros na conta medica resumo para a conta

		select	count(1) qt
		into STRICT	qt_registros_w
		from	pls_conta_medica_resumo	a
		where	a.nr_seq_conta = nr_seq_conta_p
		and 	a.ie_situacao = 'A'
		and	a.ie_tipo_item <> 'I';

		-- quantidade de registros nos itens do pagamento que ja tiveram titulo pago ou que nao tenha sido gerado o titulo

		-- mas esteja com a data de geracao do titulo no lote (prestadores que nao tiveram titulo pois ficaram com saldo negativo ou zerado)

		select	count(1) qt
		into STRICT	qt_registros_pagos_w
		from	pls_pp_item_lote a
		where	a.ie_tipo_item = '1'
		and	a.nr_seq_conta = nr_seq_conta_p
		and	exists (	SELECT	1
				from	pls_pp_prestador x,
					titulo_pagar z
				where	x.nr_seq_lote = a.nr_seq_lote
				and	x.nr_seq_prestador = a.nr_seq_prestador
				and	z.nr_titulo = x.nr_titulo_pagar
				and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> '')
				
union all

				SELECT	1
				from	pls_pp_lote z,
					pls_pp_prestador x
				where	z.nr_sequencia = a.nr_seq_lote
				and	(z.dt_geracao_titulo IS NOT NULL AND z.dt_geracao_titulo::text <> '')
				and	x.nr_seq_lote = a.nr_seq_lote
				and	x.nr_seq_prestador = a.nr_seq_prestador
				and	coalesce(x.nr_titulo_pagar::text, '') = '');

	elsif (ie_tipo_prestador_p = 'PP') then

		-- quantidade de registros na conta medica resumo para a conta

		select	count(1) qt
		into STRICT	qt_registros_w
		from	pls_conta_medica_resumo	a
		where	a.nr_seq_conta = nr_seq_conta_p
		and	a.nr_seq_prestador_pgto	= nr_seq_prestador_p
		and 	a.ie_situacao = 'A'
		and	a.ie_tipo_item <> 'I';

		-- quantidade de registros nos itens do pagamento que ja tiveram titulo pago ou que nao tenha sido gerado o titulo

		-- mas esteja com a data de geracao do titulo no lote (prestadores que nao tiveram titulo pois ficaram com saldo negativo ou zerado)

		select	count(1) qt
		into STRICT	qt_registros_pagos_w
		from	pls_conta_medica_resumo	b,
			pls_pp_item_lote a
		where	b.nr_seq_conta = nr_seq_conta_p
		and	b.nr_seq_prestador_pgto = nr_seq_prestador_p
		and	a.nr_seq_resumo = b.nr_sequencia
		and	a.nr_seq_conta = nr_seq_conta_p
		and	a.nr_seq_prestador = nr_seq_prestador_p
		and	a.ie_tipo_item = '1'
		and	exists (	SELECT	1
				from	pls_pp_prestador x,
					titulo_pagar z
				where	x.nr_seq_lote = a.nr_seq_lote
				and	x.nr_seq_prestador = a.nr_seq_prestador
				and	z.nr_titulo = x.nr_titulo_pagar
				and	(z.dt_liquidacao IS NOT NULL AND z.dt_liquidacao::text <> '')
				
union all

				SELECT	1
				from	pls_pp_lote z,
					pls_pp_prestador x
				where	z.nr_sequencia = a.nr_seq_lote
				and	(z.dt_geracao_titulo IS NOT NULL AND z.dt_geracao_titulo::text <> '')
				and	x.nr_seq_lote = a.nr_seq_lote
				and	x.nr_seq_prestador = a.nr_seq_prestador
				and	coalesce(x.nr_titulo_pagar::text, '') = '');
	end if;

	-- se existe a mesma quantidade de registros pagos e registros na resumo

	if (qt_registros_pagos_w = qt_registros_w) then
		return 'S';
	end if;
end if;

return 'N';

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_demonstrativo_analise_pck.obter_se_conta_paga ( ie_tipo_prestador_p pls_web_param_geral.ie_prest_demonstrativo%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type) FROM PUBLIC;
