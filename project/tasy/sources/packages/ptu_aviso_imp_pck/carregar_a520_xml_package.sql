-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Carregar o arquivo A520 de XML
CREATE OR REPLACE PROCEDURE ptu_aviso_imp_pck.carregar_a520_xml ( nr_seq_lote_p ptu_aviso_arq_xml.nr_seq_lote%type, nm_usuario_p usuario.nm_usuario%type, qt_arq_imp_p bigint default 1) AS $body$
DECLARE


-- Contar guias
nr_spsadt_w			bigint;
nr_internacao_w			bigint;
nr_honorario_w			bigint;
nr_consulta_w			bigint;
-- Cabecalho
ds_cabecalho_w			text;
ds_origem_w			text;
ds_destino_w			text;
ds_ident_w			text;
-- Arquivo
nr_seq_arquivo_w		ptu_aviso_arquivo.nr_sequencia%type;
nr_seq_lote_w			ptu_aviso_arquivo.nr_seq_lote%type;
dt_transacao_w			varchar(255);
hr_transacao_w			varchar(255);
cd_cnpj_origem_w		ptu_aviso_arquivo.cd_cnpj_origem%type;
cd_cpf_origem_w			ptu_aviso_arquivo.cd_cpf_origem%type;
cd_unimed_origem_w		ptu_aviso_arquivo.cd_unimed_origem%type;
cd_registro_ans_orig_w		ptu_aviso_arquivo.cd_registro_ans_orig%type;
cd_cnpj_destino_w		ptu_aviso_arquivo.cd_cnpj_destino%type;
cd_cpf_destino_w		ptu_aviso_arquivo.cd_cpf_destino%type;
cd_unimed_destino_w		ptu_aviso_arquivo.cd_unimed_destino%type;
cd_registro_ans_dest_w		ptu_aviso_arquivo.cd_registro_ans_dest%type;
nr_lote_w			ptu_aviso_arquivo.nr_lote%type;
ds_versao_tiss_w		ptu_aviso_arquivo.ds_versao_tiss%type;
ds_hash_w			ptu_aviso_arquivo.ds_hash%type;
qt_registro_w			integer;
cd_ans_ops_w			pls_outorgante.cd_ans%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type := pls_obter_cd_estab_ops;
ie_tipo_transacao_w		varchar(255);
ie_inconsistencia_w		varchar(255) := null;
ie_gerar_a525_imp_a520_w	pls_parametros.ie_gerar_a525_imp_a520%type;

-- Protocolo
nr_seq_aviso_protocolo_w	ptu_aviso_protocolo.nr_sequencia%type;

-- Contabilidade instantanea
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;

C01 CURSOR FOR
	SELECT	ds_arquivo,
		substr(nm_arquivo,13,7) nr_seq_arquivo,
		substr(nm_arquivo,1,3) ie_tipo_nome,
		nm_arquivo
	from	ptu_aviso_arq_xml
	where	nr_seq_lote	= nr_seq_lote_p
	and	ie_tipo_arquivo	= 'A520';

BEGIN
cd_ans_ops_w := pls_obter_dados_outorgante( cd_estabelecimento_w, 'ANS');

select	coalesce(max(ie_gerar_a525_imp_a520),'S')
into STRICT	ie_gerar_a525_imp_a520_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_w;

for r_C01_w in C01 loop
	-- Cabecalho XML
	ds_cabecalho_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(r_C01_w.ds_arquivo,'ans:cabecalho',1);
	
	ds_origem_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:origem',1);
	ds_destino_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:destino',1);
	ds_ident_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:identificacaoTransacao',1);
	
	-- Origem
	cd_cnpj_origem_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_origem_w,'ans:CNPJ',1);
	cd_cpf_origem_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_origem_w,'ans:cpf',1);
	cd_unimed_origem_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_origem_w,'ans:codigoPrestadorNaOperadora',1);
	cd_registro_ans_orig_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_origem_w,'ans:registroANS',1);
	
	-- Destino
	cd_cnpj_destino_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_destino_w,'ans:CNPJ',1);
	cd_cpf_destino_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_destino_w,'ans:cpf',1);
	cd_unimed_destino_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_destino_w,'ans:codigoPrestadorNaOperadora',1);
	cd_registro_ans_dest_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_destino_w,'ans:registroANS',1);

	dt_transacao_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:dataRegistroTransacao',1);	
	hr_transacao_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:horaRegistroTransacao',1);
	nr_lote_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(r_C01_w.ds_arquivo,'ans:numeroLote',1);
	ds_versao_tiss_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_cabecalho_w,'ans:Padrao',1);	
	ds_hash_w		:= ptu_aviso_imp_pck.obter_conteudo_tag(r_C01_w.ds_arquivo,'ans:hash',1);
	ie_tipo_transacao_w	:= ptu_aviso_imp_pck.obter_conteudo_tag(ds_ident_w,'ans:tipoTransacao',1);

	-- Gerar erro se o arquivo nao for A520
	if (ie_tipo_transacao_w != 'ENVIO_LOTE_GUIAS') and (r_C01_w.ie_tipo_nome != 'AVE') then -- AVE e como comeca o nome do arquivo A520
		ie_inconsistencia_w := '1';
	end if;
	
	-- Gerar erro se o arquivo for de outra Unimed
	if (cd_registro_ans_dest_w != cd_ans_ops_w) then
		ie_inconsistencia_w := '2';
	end if;
	
	select 	count(1)
	into STRICT	qt_registro_w
	from	ptu_aviso_arquivo
	where	ds_hash		= ds_hash_w
	and	ie_status	!= 4; -- Nao considerar status "Falha"
	-- Gerar erro se o arquivo ja foi importado
	if (qt_registro_w > 0) then
		ie_inconsistencia_w := '3';
	end if;
	
	if (coalesce(ie_inconsistencia_w::text, '') = '') then -- So continua se nao tem inconsistencias
		
		if (cd_registro_ans_orig_w IS NOT NULL AND cd_registro_ans_orig_w::text <> '') then
			select	coalesce(cd_unimed_origem_w,max(cd_cooperativa)),
				coalesce(cd_cnpj_origem_w,max(cd_cgc))
			into STRICT	cd_unimed_origem_w,
				cd_cnpj_origem_w
			from	pls_congenere
			where	cd_ans	= cd_registro_ans_orig_w;
		end if;
		
		if (cd_registro_ans_dest_w IS NOT NULL AND cd_registro_ans_dest_w::text <> '') then
			select	coalesce(cd_unimed_destino_w,max(cd_cooperativa)),
				coalesce(cd_cnpj_destino_w,max(cd_cgc))
			into STRICT	cd_unimed_destino_w,
				cd_cnpj_destino_w
			from	pls_congenere
			where	cd_ans	= cd_registro_ans_dest_w;
		end if;

		-- Inserir arquivo A520
			nr_seq_arquivo_w := ptu_aviso_imp_pck.inserir_a520_cabecalho(	nr_seq_arquivo_w, nm_usuario_p, nr_seq_lote_p, null, null, null, null, dt_transacao_w, hr_transacao_w, cd_cnpj_origem_w, cd_cpf_origem_w, cd_unimed_origem_w, cd_registro_ans_orig_w, cd_cnpj_destino_w, cd_cpf_destino_w, cd_unimed_destino_w, cd_registro_ans_dest_w, nr_lote_w, null, null, ds_versao_tiss_w, ds_hash_w, null, null, r_C01_w.nr_seq_arquivo, null, null, r_C01_w.nm_arquivo);
								
		nr_spsadt_w	:= ptu_aviso_imp_pck.obter_numero_tag(r_C01_w.ds_arquivo,'ans:guiaSP-SADT');
		nr_internacao_w := ptu_aviso_imp_pck.obter_numero_tag(r_C01_w.ds_arquivo,'ans:guiaResumoInternacao');
		nr_honorario_w	:= ptu_aviso_imp_pck.obter_numero_tag(r_C01_w.ds_arquivo,'ans:guiaHonorarios');
		nr_consulta_w	:= ptu_aviso_imp_pck.obter_numero_tag(r_C01_w.ds_arquivo,'ans:guiaConsulta');
		
		if (nr_spsadt_w > 0) then -- SP/SADT
			-- Inserir protocolo A520
			 nr_seq_aviso_protocolo_w := ptu_aviso_imp_pck.inserir_a520_protocolo( nr_seq_aviso_protocolo_w, nm_usuario_p, nr_seq_arquivo_w, null, '4');
			
			-- Carregar guias
			CALL ptu_aviso_imp_pck.carregar_a520_spsadt( r_C01_w.ds_arquivo, nr_seq_aviso_protocolo_w, nr_spsadt_w, nm_usuario_p);
			
		elsif (nr_internacao_w > 0) then -- Internacao
			-- Inserir protocolo A520
			 nr_seq_aviso_protocolo_w := ptu_aviso_imp_pck.inserir_a520_protocolo( nr_seq_aviso_protocolo_w, nm_usuario_p, nr_seq_arquivo_w, null, '5');

			-- Carregar guias
			CALL ptu_aviso_imp_pck.carregar_a520_internacao( r_C01_w.ds_arquivo, nr_seq_aviso_protocolo_w, nr_internacao_w, nm_usuario_p);
			
		elsif (nr_honorario_w > 0) then -- Honorario
			-- Inserir protocolo A520
			 nr_seq_aviso_protocolo_w := ptu_aviso_imp_pck.inserir_a520_protocolo( nr_seq_aviso_protocolo_w, nm_usuario_p, nr_seq_arquivo_w, null, '6');
			
			-- Carregar guias
			CALL ptu_aviso_imp_pck.carregar_a520_honorario( r_C01_w.ds_arquivo, nr_seq_aviso_protocolo_w, nr_honorario_w, nm_usuario_p);
			
		elsif (nr_consulta_w > 0) then -- Consulta
			-- Inserir protocolo A520
			 nr_seq_aviso_protocolo_w := ptu_aviso_imp_pck.inserir_a520_protocolo( nr_seq_aviso_protocolo_w, nm_usuario_p, nr_seq_arquivo_w, null, '3');
			
			-- Carregar guias
			CALL ptu_aviso_imp_pck.carregar_a520_consulta( r_C01_w.ds_arquivo, nr_seq_aviso_protocolo_w, nr_consulta_w, nm_usuario_p);
		end if;
		
		if (ie_gerar_a525_imp_a520_w = 'S') then
			-- Gerar dados para enviar o arquivo A525
			CALL ptu_aviso_pck.gerar_dados_env_a525( nr_seq_arquivo_w, nm_usuario_p, 'N');
		end if;
		
		update	ptu_aviso_arquivo
		set	ie_status	= '3'
		where	nr_sequencia	= nr_seq_arquivo_w;
	end if;
	
	-- Se estiver importando mais de um arquivo, simplesmente ignora a importacao, se nao estoura mensagem em tela
	if (qt_arq_imp_p = 1) then
		if (ie_inconsistencia_w = '1') then -- Nao e arquivo A520
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1053578);
			
		elsif (ie_inconsistencia_w = '2') then -- A520 de outra Unimed
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1053370);
			
		elsif (ie_inconsistencia_w = '3') then -- A520 ja tinha sido importado
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1053322);
		end if;
	end if;	
end loop;

update	ptu_lote_aviso l
set	l.dt_importacao	= clock_timestamp()
where	l.nr_sequencia	= nr_seq_lote_p
and	exists (SELECT	1
		from	ptu_aviso_arquivo a
		where	a.nr_seq_lote = l.nr_sequencia); -- Ter arquivo importado
select	coalesce(max(ie_concil_contab), 'N')
into STRICT	ie_concil_contab_w
from	pls_visible_false;

if (ie_concil_contab_w = 'S') then
	CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_recebimento_a520(nr_seq_lote_p, nm_usuario_p);
end if;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_aviso_imp_pck.carregar_a520_xml ( nr_seq_lote_p ptu_aviso_arq_xml.nr_seq_lote%type, nm_usuario_p usuario.nm_usuario%type, qt_arq_imp_p bigint default 1) FROM PUBLIC;
