-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION meal_history_pck.meal_history ( dt_start_p timestamp,  -- MAIN FUNCTION OF THE PACKAGE
 dt_end_p timestamp, cd_pessoa_fisica_p text, nr_atendimento_p bigint default null, ie_datas_p text default 'N') RETURNS SETOF T_MEAL_HISTORY AS $body$
DECLARE


	t_meal_history_row_r	t_meal_history_row;


	C01 CURSOR(current_setting('meal_history_pck.dt_start_w')::timestamp timestamp, current_setting('meal_history_pck.dt_end_w')::timestamp timestamp) FOR
		SELECT	distinct
			a.nr_sequencia,
			a.ds_item,
			b.dt_horario,
			b.ie_future,
			b.nr_prescricao,
			b.nr_seq_item_prescr,
			b.nr_seq_prescr_hor,
			pkg_date_utils.START_OF(b.dt_horario,'DAY') dt_horario_order,
			CASE WHEN a.ie_tipo_item_cpoe='DO' THEN 3 WHEN a.ie_tipo_item_cpoe='SNE' THEN 2 WHEN a.ie_tipo_item_cpoe='J' THEN 4  ELSE 1 END  ie_type,
            CASE WHEN coalesce(a.dt_fim::text, '') = '' THEN 1  ELSE 2 END  ie_end_date,
            case
                when (to_char(b.dt_horario,'HH24'))::numeric  >01 and (to_char(b.dt_horario,'HH24'))::numeric  <12 then 1
                when (to_char(b.dt_horario,'HH24'))::numeric  >=12 and (to_char(b.dt_horario,'HH24'))::numeric  <=17 then 2
                when (to_char(b.dt_horario,'HH24'))::numeric  >17 and (to_char(b.dt_horario,'HH24'))::numeric  <=24 then 3
                else null 
			end ie_order_meal
		from	cpoe_overview_itens_v a,
			table(meal_history_pck.gerar_horarios(a.nr_sequencia, a.ie_tipo_item, a.ds_horarios, a.dt_inicio, a.dt_fim, a.DT_LIB_SUSPENSAO, a.ie_tipo_item_cpoe)) b 
		where	a.nr_sequencia = b.NR_SEQ_ITEM_CPOE 
		and	a.cd_pessoa_fisica = cd_pessoa_fisica_p
		and (a.dt_inicio <= current_setting('meal_history_pck.dt_end_w')::timestamp and (a.dt_fim >= current_setting('meal_history_pck.dt_start_w')::timestamp or coalesce(a.dt_fim::text, '') = ''))
		and	a.ie_tipo_item		= 'D' --diet
		and     b.dt_horario >= current_setting('meal_history_pck.dt_start_w')::timestamp
		order by dt_horario_order, ie_order_meal, ie_type, ie_end_date; --This is being used to define the priorities between the diets. Take care when change it.
	
BEGIN

	PERFORM set_config('meal_history_pck.dt_start_w', dt_start_p, false);
	PERFORM set_config('meal_history_pck.dt_end_w', dt_end_p, false);
	PERFORM set_config('meal_history_pck.cd_pessoa_fisica_w', cd_pessoa_fisica_p, false);

	if (IE_DATAS_P = 'S') and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
		select	pkg_date_utils.START_OF(dt_entrada,'DAY'),
				pkg_date_utils.START_OF(coalesce(dt_alta,clock_timestamp() + interval '31 days'),'DAY')
		into STRICT	current_setting('meal_history_pck.dt_start_w')::timestamp,
				current_setting('meal_history_pck.dt_end_w')::timestamp
		from	atendimento_paciente
		where	nr_atendimento = nr_atendimento_p;
				
	end if;

	for r_c01 in c01(current_setting('meal_history_pck.dt_start_w')::timestamp,current_setting('meal_history_pck.dt_end_w')::timestamp) loop
		begin

		-- HERE need to find the diet for breakfast, lunch and dinner for that day
		if (current_setting('meal_history_pck.dt_current_w')::(timestamp IS NOT NULL AND timestamp::text <> '')) and (current_setting('meal_history_pck.dt_current_w')::timestamp <> trunc(r_c01.dt_horario)) then
			if (current_setting('meal_history_pck.ds_dinner_w')::(varchar(4000) IS NOT NULL AND (varchar(4000))::text <> '')) and (current_setting('meal_history_pck.ds_dinner_w')::varchar(4000) <> current_setting('meal_history_pck.ds_lunch_w')::varchar(4000)) then
				PERFORM set_config('meal_history_pck.ie_status_dinner_w', 'S', false);
			end if;
			if (current_setting('meal_history_pck.ds_lunch_w')::(varchar(4000) IS NOT NULL AND (varchar(4000))::text <> '')) and (current_setting('meal_history_pck.ds_lunch_w')::varchar(4000) <> current_setting('meal_history_pck.ds_breakfast_w')::varchar(4000)) then
				PERFORM set_config('meal_history_pck.ie_status_lunch_w', 'S', false);
			end if;
			if (current_setting('meal_history_pck.ds_breakfast_w')::(varchar(4000) IS NOT NULL AND (varchar(4000))::text <> '')) and (current_setting('meal_history_pck.ds_breakfast_w')::varchar(4000) <> current_setting('meal_history_pck.ds_last_dinner_w')::varchar(4000)) then
				PERFORM set_config('meal_history_pck.ie_status_breakfast_w', 'S', false);
			end if;
			
			t_meal_history_row_r.dt_reference		:= current_setting('meal_history_pck.dt_current_w')::timestamp;
			t_meal_history_row_r.ie_status_breakfast	:= current_setting('meal_history_pck.ie_status_breakfast_w')::varchar(1);
			t_meal_history_row_r.ds_breakfast		:= current_setting('meal_history_pck.ds_breakfast_w')::varchar(4000);
			t_meal_history_row_r.ie_status_lunch		:= current_setting('meal_history_pck.ie_status_lunch_w')::varchar(1);
			t_meal_history_row_r.ds_lunch			:= current_setting('meal_history_pck.ds_lunch_w')::varchar(4000);
			t_meal_history_row_r.ie_status_dinner		:= current_setting('meal_history_pck.ie_status_dinner_w')::varchar(1);
			t_meal_history_row_r.ds_dinner			:= current_setting('meal_history_pck.ds_dinner_w')::varchar(4000);

			RETURN NEXT t_meal_history_row_r;

			PERFORM set_config('meal_history_pck.ds_last_dinner_w', current_setting('meal_history_pck.ds_dinner_w')::varchar(4000), false);
			PERFORM set_config('meal_history_pck.ds_breakfast_w', null, false);
			PERFORM set_config('meal_history_pck.ds_lunch_w', null, false);
			PERFORM set_config('meal_history_pck.ds_dinner_w', null, false);
			PERFORM set_config('meal_history_pck.ie_status_dinner_w', null, false);
			PERFORM set_config('meal_history_pck.ie_status_lunch_w', null, false);
			PERFORM set_config('meal_history_pck.ie_status_breakfast_w', null, false);

		end if;

		if ((to_char(r_c01.dt_horario,'HH24'))::numeric  >01) and ((to_char(r_c01.dt_horario,'HH24'))::numeric  <12) then
			PERFORM set_config('meal_history_pck.ds_breakfast_w', r_c01.ds_item, false);
		end if;
		if ((to_char(r_c01.dt_horario,'HH24'))::numeric  >=12) and ((to_char(r_c01.dt_horario,'HH24'))::numeric  <=17) then
			PERFORM set_config('meal_history_pck.ds_lunch_w', r_c01.ds_item, false);
		end if;
		if ((to_char(r_c01.dt_horario,'HH24'))::numeric  >17) and ((to_char(r_c01.dt_horario,'HH24'))::numeric  <=24) then
			PERFORM set_config('meal_history_pck.ds_dinner_w', r_c01.ds_item, false);
		end if;

		PERFORM set_config('meal_history_pck.dt_current_w', trunc(r_c01.dt_horario), false);
		PERFORM set_config('meal_history_pck.dt_current_time_w', r_c01.dt_horario, false);


		end;
	end loop;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION meal_history_pck.meal_history ( dt_start_p timestamp, dt_end_p timestamp, cd_pessoa_fisica_p text, nr_atendimento_p bigint default null, ie_datas_p text default 'N') FROM PUBLIC;
