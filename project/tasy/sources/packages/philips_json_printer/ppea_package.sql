-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE philips_json_printer.ppea (input philips_json_list, indent bigint, buf INOUT text, spaces boolean) AS $body$
DECLARE

    elem philips_json_value;
    arr p_json_value_array := input.list_data;
    str varchar(400);

BEGIN
    for y in 1 .. arr.count loop
      elem := arr(y);
      if (elem IS NOT NULL AND elem::text <> '') then
      case elem.get_type
        when 'number' then
          str := '';
          if (elem.get_number < 1 and elem.get_number > 0) then str := '0'; end if;
          if (elem.get_number < 0 and elem.get_number > -1) then
            str := '-0' || substr(to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,'''),2);
          else
            str := str || to_char(elem.get_number, 'TM9', 'NLS_NUMERIC_CHARACTERS=''.,''');
          end if;
          buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck(str));
        when 'string' then
          buf := philips_json_printer.ppstring(elem, buf);
        when 'bool' then
          if (elem.get_bool) then
            buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck('true'));
          else
            buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck('false'));
          end if;
        when 'null' then
          buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck('null'));
        when 'array' then
           buf := philips_json_printer.add_buf( buf, philips_json_printer.llcheck('['));
          buf := philips_json_printer.ppea(philips_json_list(elem), indent, buf, spaces);
           buf := philips_json_printer.add_buf( buf, philips_json_printer.llcheck(']'));
        when 'object' then
          buf := philips_json_printer.ppobj(philips_json(elem), indent, buf, spaces);
        else buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck(elem.get_type));
      end case;
      end if;
      if (y != arr.count) then buf := philips_json_printer.add_buf(buf, philips_json_printer.llcheck(philips_json_printer.getcommasep(spaces))); end if;
    end loop;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE philips_json_printer.ppea (input philips_json_list, indent bigint, buf INOUT text, spaces boolean) FROM PUBLIC;
