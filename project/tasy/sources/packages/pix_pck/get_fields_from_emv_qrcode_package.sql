-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

/*
    ===============================================================================
    Purpose: extrair o conteudo  do qrcode  emv para a estrutura TLV (Conforme
    padrao EMV MPM).

    Example: qrcode_example_p :=  00020126580014br.gov.bcb.pix0136123e4567-e12b-12d
                                  1-a456-4266554400005204000053039865802BR5913Fulano
                                  de Tal6008BRASILIA62070503***63041D3D

    Example Call:      select  nvl(root_id, simple_id) root_id,
                               simple_id simple_id,
                               simple_value value
                       from    table(pix_pck.qrcode_to_decode(qrcode_example_p))
                       where   1 = 1
                       order by nvl(root_id, simple_id),
                                simple_id;

    Return:             root_id simple_id value
                        00      00        01
                        26      00        br.gov.bcb.pix
                        26      01        123e4567-e12b-12d1-a456-426655440000
                        52      52        0000
                        53      53        986
                        58      58        BR
                        59      59        Fulano de Tal
                        60      60        BRASILIA
                        62      05        ***
                        63      63        1D3D
    ---------- ----------- --------------------------------------------------------
    masyaf 18.nov.2020  Implementacao
    ===============================================================================
    */
CREATE OR REPLACE FUNCTION pix_pck.get_fields_from_emv_qrcode ( ds_qrcode_to_decode_p text) RETURNS SETOF T_DATA_OBJECT_TLV AS $body$
DECLARE


    emv_to_return_w            r_data_object_tlv;
    emv_w                      t_emv;
    ds_qrcode_to_decode_aux_w  varchar(400);
    index_w                    integer := 0;
    ds_qrcode_to_remove_w      varchar(400);
    ds_qrcode_to_decode_w      varchar(400) := ds_qrcode_to_decode_p;


BEGIN
        index_w := 1;
        while(ds_qrcode_to_decode_w IS NOT NULL AND ds_qrcode_to_decode_w::text <> '') loop
            if (substr(ds_qrcode_to_decode_w, 1, 2) in ('26','62')) then
                emv_w[index_w].root_id           := substr(ds_qrcode_to_decode_w, 1, 2);
                emv_w[index_w].root_size         := substr(ds_qrcode_to_decode_w, 3, 2);
                ds_qrcode_to_remove_w            := emv_w[index_w].root_id || emv_w[index_w].root_size;
                ds_qrcode_to_decode_aux_w        := substr(ds_qrcode_to_decode_w, 5, emv_w[index_w].root_size);
                while(ds_qrcode_to_decode_aux_w IS NOT NULL AND ds_qrcode_to_decode_aux_w::text <> '') loop
                    emv_w[index_w].root_id        := substr(ds_qrcode_to_decode_w, 1, 2);
                    emv_w[index_w].root_size      := substr(ds_qrcode_to_decode_w, 3, 2);
                    emv_w[index_w].simple_id      := substr(ds_qrcode_to_decode_aux_w, 1, 2);
                    emv_w[index_w].simple_size    := substr(ds_qrcode_to_decode_aux_w, 3, 2);
                    emv_w[index_w].simple_value   := substr(ds_qrcode_to_decode_aux_w, 5, emv_w[index_w].simple_size);

                    ds_qrcode_to_remove_w      := ds_qrcode_to_remove_w || emv_w[index_w].simple_id || emv_w[index_w].simple_value || emv_w[index_w].simple_size;
                    ds_qrcode_to_decode_aux_w  := substr(ds_qrcode_to_decode_aux_w, length( emv_w[index_w].simple_id
                                                                                 || emv_w[index_w].simple_size
                                                                                 || emv_w[index_w].simple_value) + 1,
                                                                            length(ds_qrcode_to_decode_aux_w) - length( emv_w[index_w].simple_id
                                                                                                                 || emv_w[index_w].simple_size
                                                                                                                 || emv_w[index_w].simple_value));
                    index_w := index_w + 1;
                end loop;
                ds_qrcode_to_decode_w := substr(ds_qrcode_to_decode_w, length(ds_qrcode_to_remove_w) + 1, length(ds_qrcode_to_decode_w) - length(ds_qrcode_to_remove_w));
            end if;
            emv_w[index_w].simple_id     := substr(ds_qrcode_to_decode_w, 1, 2);
            emv_w[index_w].simple_size   := substr(ds_qrcode_to_decode_w, 3, 2);
            emv_w[index_w].simple_value  := substr(ds_qrcode_to_decode_w, 5, emv_w[index_w].simple_size);

            ds_qrcode_to_decode_w := substr(ds_qrcode_to_decode_w, length(emv_w[index_w].simple_id
                                                                       || emv_w[index_w].simple_size
                                                                       || emv_w[index_w].simple_value) + 1,
                                                                    length(ds_qrcode_to_decode_w) - length(emv_w[index_w].simple_id
                                                                                                        || emv_w[index_w].simple_size
                                                                                                        || emv_w[index_w].simple_value));
            index_w       := index_w + 1;
        end loop;

        index_w := emv_w.first;
        while(index_w IS NOT NULL AND index_w::text <> '') loop
            emv_to_return_w.simple_id       := emv_w[index_w].simple_id;
            emv_to_return_w.simple_size     := emv_w[index_w].simple_size;
            emv_to_return_w.simple_value    := emv_w[index_w].simple_value;
            emv_to_return_w.root_id         := emv_w[index_w].root_id;
            emv_to_return_w.root_size       := emv_w[index_w].root_size;
            RETURN NEXT emv_to_return_w;
            index_w := emv_w.next(index_w);
        end loop;
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pix_pck.get_fields_from_emv_qrcode ( ds_qrcode_to_decode_p text) FROM PUBLIC;
