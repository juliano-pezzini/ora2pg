-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_apropriacao_pck.alimenta_acao_pgto_negativo ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type) AS $body$
DECLARE


_ora2pg_r RECORD;
-- esta rotina irá verificar no evento, prestador e parâmetro do sistema qual a ação que deve ser tomada com o valor negativo
-- ela irá apenas colocar a ação a ser tomada em registros que ficaram setados com is_acao_negativo = 'S'
tb_nr_sequencia_w	pls_util_cta_pck.t_number_table;
tb_ie_acao_pgto_w	pls_util_cta_pck.t_varchar2_table_5;
nr_cont_w		integer;

qt_pag_negativo_max_w	pls_pp_prestador.qt_pag_negativo_max%type;
vl_minimo_titulo_w	pls_pp_prestador.vl_minimo_tit_liq%type;

c01 CURSOR(	nr_seq_lote_pc	pls_pp_lote.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_pp_it_aprop,
		abs(a.vl_acao_negativo) vl_acao_negativo,
		c.ie_acao_pgto_negativo,
		c.qt_pag_negativo_max,
		c.vl_minimo_tit_liq,
		b.ie_saldo_negativo,
		c.dt_venc_titulo,
		c.nr_seq_prestador,
		(SELECT	count(1)
		from	pls_evento_regra_pag x
		where	x.nr_seq_evento = b.nr_sequencia
		and	c.dt_venc_titulo between x.dt_inicio_vigencia_ref and x.dt_fim_vigencia_ref  LIMIT 1) qt_regra_ex,
		a.nr_seq_evento
	from	pls_pp_item_lote a,
		pls_evento b,
		pls_pp_prestador_tmp c
	where	a.nr_seq_lote = nr_seq_lote_pc
	and	a.ie_acao_negativo = 'S'
	and	b.nr_sequencia = a.nr_seq_evento
	and	b.ie_saldo_negativo in ('CP', 'PP', 'TR')
	and	c.nr_seq_prestador = a.nr_seq_prestador;

BEGIN

-- limpa as variáveis
SELECT * FROM pls_pp_apropriacao_pck.atualiza_acao_negativo_item(	nr_seq_lote_p, tb_nr_sequencia_w, tb_ie_acao_pgto_w, nr_cont_w) INTO STRICT _ora2pg_r;
 tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_ie_acao_pgto_w := _ora2pg_r.tb_ie_acao_pgto_p; nr_cont_w := _ora2pg_r.nr_cont_p;

--  o cursor c01 vai tratar todos os eventos que tenham a ação para pagamento negativo
for r_c01_w in c01(nr_seq_lote_p) loop

	tb_nr_sequencia_w(nr_cont_w) := r_c01_w.nr_sequencia;

	-- quando é conforme prestador já retorno no cursor os dados
	if (r_c01_w.ie_saldo_negativo = 'CP') then

		tb_ie_acao_pgto_w(nr_cont_w) := r_c01_w.ie_acao_pgto_negativo;
		qt_pag_negativo_max_w := r_c01_w.qt_pag_negativo_max;
		vl_minimo_titulo_w := r_c01_w.vl_minimo_tit_liq;

		-- se no cadastro do prestador estiver para apropriar é necessário verificar se algum dos campos
		-- de geração do título está preenchido, se estiver precisamos verificar se não é uma 'exceção'
		if (r_c01_w.ie_acao_pgto_negativo = 'PP') then

			-- caso um dos dois campos esteja informado é necessário realizar a validação
			if (qt_pag_negativo_max_w IS NOT NULL AND qt_pag_negativo_max_w::text <> '') or (vl_minimo_titulo_w IS NOT NULL AND vl_minimo_titulo_w::text <> '') then

				tb_ie_acao_pgto_w(nr_cont_w) := pls_pp_apropriacao_pck.validar_campos_regra(	r_c01_w.nr_seq_pp_it_aprop, qt_pag_negativo_max_w,
											vl_minimo_titulo_w, r_c01_w.vl_acao_negativo,
											'TR', r_c01_w.ie_saldo_negativo);
			end if;
		end if;
	-- se não for conforme prestador
	else
		-- caso não tenha alguma regra então os dados são pegos do evento e passado nulo nas demais variáveis
		if (r_c01_w.qt_regra_ex = 0) then

			tb_ie_acao_pgto_w(nr_cont_w) := r_c01_w.ie_saldo_negativo;
			qt_pag_negativo_max_w := null;
			vl_minimo_titulo_w := null;

		-- se existir regras de exceção precisamos verificar se existe alguma para este prestador
		else

			tb_ie_acao_pgto_w(nr_cont_w) := pls_pp_apropriacao_pck.processa_regra_ex_forma_pgto(	r_c01_w.nr_seq_pp_it_aprop, r_c01_w.vl_acao_negativo,
											r_c01_w.dt_venc_titulo, r_c01_w.nr_seq_evento, 
											r_c01_w.nr_seq_prestador, r_c01_w.ie_saldo_negativo);
		end if;
	end if;

	-- verifica se atingiu a quantidade para mandar pro banco
	if (nr_cont_w >= pls_util_pck.qt_registro_transacao_w) then

		SELECT * FROM pls_pp_apropriacao_pck.atualiza_acao_negativo_item(	nr_seq_lote_p, tb_nr_sequencia_w, tb_ie_acao_pgto_w, nr_cont_w) INTO STRICT _ora2pg_r;
 tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_ie_acao_pgto_w := _ora2pg_r.tb_ie_acao_pgto_p; nr_cont_w := _ora2pg_r.nr_cont_p;
	else
		nr_cont_w := nr_cont_w + 1;
	end if;
end loop;

-- se sobrou algo manda pro banco
SELECT * FROM pls_pp_apropriacao_pck.atualiza_acao_negativo_item(	nr_seq_lote_p, tb_nr_sequencia_w, tb_ie_acao_pgto_w, nr_cont_w) INTO STRICT _ora2pg_r;
 tb_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_ie_acao_pgto_w := _ora2pg_r.tb_ie_acao_pgto_p; nr_cont_w := _ora2pg_r.nr_cont_p;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_apropriacao_pck.alimenta_acao_pgto_negativo ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type) FROM PUBLIC;
