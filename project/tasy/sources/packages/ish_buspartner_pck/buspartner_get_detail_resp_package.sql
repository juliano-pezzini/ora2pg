-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ish_buspartner_pck.buspartner_get_detail_resp ( nr_sequencia_p bigint) AS $body$
DECLARE


nr_seq_regra_w			intpd_eventos_sistema.nr_seq_regra_conv%type;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
ie_evento_w			intpd_fila_transmissao.ie_evento%type;
institution_w 			varchar(10);

nr_seq_doc_origem_w		intpd_fila_transmissao.nr_seq_documento%type;
nr_seq_agrupador_w		intpd_fila_transmissao.nr_seq_agrupador%type;
ds_xml_w				text;
xml_w				xml;

ie_status_w			intpd_fila_transmissao.ie_status%type		:= 'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:= 'F';

atend_categoria_convenio_w		atend_categoria_convenio%rowtype;
pessoa_titular_convenio_w		pessoa_titular_convenio%rowtype;
nr_seq_episodio_w			episodio_paciente.nr_sequencia%type;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
cd_pessoa_fisica_w		atendimento_paciente.cd_pessoa_fisica%type;
cd_convenio_w			convenio.cd_convenio%type;
cd_categoria_w			categoria_convenio.cd_categoria%type;
cd_estabelecimento_w		atendimento_paciente.cd_estabelecimento%type;

ds_erro_w			varchar(2000);
nr_seq_documento_w		varchar(80);
usernametasy			varchar(15)	:=	'ISH';

pessoa_juridica_w		pessoa_juridica%rowtype;
convenio_w			convenio%rowtype;
classificacao_convenio_w	classificacao_convenio%rowtype;
convenio_classif_w		convenio_classif%rowtype;
convenio_estabelecimento_w	convenio_estabelecimento%rowtype;
categoria_convenio_w categoria_convenio%rowtype;

addphone_w		xml;
addressdata_w		xml;
assperkvphysno_w		xml;
assperqldi_w		xml;
assperqtdi_w		xml;
assperspec_w		xml;
assperteamno_w		xml;
assperusr_w		xml;
assperworkno_w		xml;
bpartnerdata_w		xml;
customerbank_w		xml;
customerdata_w		xml;
defaultcscheme_w		xml;
employerdata_w		xml;
ficustomerdata_w		xml;
hospitaldata_w		xml;
insproviderdata_w		xml;
insproviderinstitu_w		xml;
insproviderrel_w		xml;
iptypedata_w		xml;
persondata_w		xml;

c01 CURSOR FOR
	SELECT	*
	from	xmltable('/AddPhone/item' passing addphone_w columns
		addrno		varchar(10)	path	'AddrNo',
		seqno		smallint	path	'SeqNo',
		phoneno		varchar(30)	path	'Phoneno',
		extension		varchar(10)	path	'Extension'
	);
c01_w	c01%rowtype;

c02 CURSOR FOR
	SELECT	*
	from	xmltable('/AddressData' passing addressdata_w columns
		addrno		varchar(10)	path	'AddrNo',
		country		varchar(3)	path	'Country',
		contryiso		varchar(2)	path	'CountryIso',
		countrytext	varchar(15)	path	'CountryText',
		region		varchar(3)	path	'Region',
		regiontext		varchar(20)	path	'RegionText',
		pcd		varchar(10)	path	'Pcd',
		city		varchar(40)	path	'City',
		stdcity		varchar(40)	path	'StdCity',
		district		varchar(40)	path	'District',
		stddistrict		varchar(40)	path	'StdDistrict',
		strno			varchar(40)	path	'StrNo',
		stdstreet		varchar(40)	path	'StdStreet',
		strsup			varchar(40)	path	'StrSup',
		stdstrsup		varchar(40)	path	'StdStrSup',
		geograrea		varchar(9)	path	'GeogrArea',
		geograreatext		varchar(40)	path	'GeogrAreaText',
		poboxpcd		varchar(10)	path	'PoboxPcd',
		pobox			varchar(10)	path	'Pobox',
		pobcountry		varchar(3)	path	'PobCountry',
		pobcountryiso		varchar(2)	path	'PobCountryIso',
		pobcountrytxt		varchar(15)	path	'PobCountryTxt',
		poboxcity		varchar(40)	path	'PoboxCity',
		stdpoboxcity		varchar(40)	path	'StdPoboxcity',
		companypcd		varchar(10)	path	'CompanyPcd',
		phoneno			varchar(30)	path	'Phoneno',
		extension		varchar(10)	path	'Extension',
		otherphones		varchar(1)	path	'OtherPhones',
		faxno			varchar(30)	path	'Faxno',
		faxextension		varchar(10)	path	'Faxextension',
		telexno			varchar(30)	path	'Telexno',
		building		varchar(10)	path	'Building',
		floor			varchar(10)	path	'Floor',
		unit			varchar(10)	path	'Unit',
		addrstring		varchar(50)	path	'AddrString',
		email			varchar(241)	path	'EMail',
		houseno			varchar(10)	path	'HouseNo',
		streetlong		varchar(60)	path	'StreetLong',
		stdstreetlong		varchar(60)	path	'StdStreetLong',
		strsuppl1		varchar(40)	path	'StrSuppl1',
		coname			varchar(40)	path	'COName'
	);
c02_w	c02%rowtype;

c03 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerKvphysno/item' passing assperkvphysno_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		kvphysno		varchar(9)	path	'Kvphysno',
		begdate			varchar(10)	path	'Begdate',
		enddate			varchar(10)	path	'Enddate'
	);
c03_w	c03%rowtype;

c04 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerQldi/item' passing assperqldi_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		qualdig			varchar(4)	path	'QualDig',
		fromdate		varchar(10)	path	'FromDate',
		todate			varchar(10)	path	'ToDate',
		creationdate		varchar(10)	path	'CreationDate',
		creationuser		varchar(12)	path	'CreationUser',
		creationtime		varchar(10)	path	'CreationTime',
		updatedate		varchar(10)	path	'UpdateDate',
		updateuser		varchar(12)	path	'UpdateUser',
		updatetime		varchar(10)	path	'UpdateTime'
	);
c04_w	c04%rowtype;

c05 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerQtdi/item' passing assperqtdi_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		quntdig			varchar(5)	path	'QuntDig',
		fromdate		varchar(10)	path	'FromDate',
		todate			varchar(10)	path	'ToDate',
		creationdate		varchar(10)	path	'CreationDate',
		creationuser		varchar(12)	path	'CreationUser',
		creationtime		varchar(10)	path	'CreationTime',
		updatedate		varchar(10)	path	'UpdateDate',
		updateuser		varchar(12)	path	'UpdateUser',
		updatetime		varchar(10)	path	'UpdateTime'
	);
c05_w	c05%rowtype;

c06 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerSpec/item' passing assperspec_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		specctgry		varchar(1)	path	'SpecCtgry',
		specialty		varchar(4)	path	'Specialty'
	);
c06_w	c06%rowtype;

c07 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerTeamno/item' passing assperteamno_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		teamno			varchar(9)	path	'Teamno',
		groupno			varchar(9)	path	'Groupno',
		kvphysno		varchar(9)	path	'Kvphysno',
		teamlevel		varchar(1)	path	'Teamlevel',
		begdate			varchar(10)	path	'Begdate',
		enddate			varchar(10)	path	'Enddate'
	);
c07_w	c07%rowtype;

c08 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerUsr/item' passing assperusr_w columns
		client			varchar(3)	path	'Client',
		bpartner		varchar(10)	path	'Bpartner',
		username		varchar(12)	path	'UserName'
	);
c08_w	c08%rowtype;


c09 CURSOR FOR
	SELECT	*
	from	xmltable('/AssPerWorkno/item' passing assperworkno_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		workno			varchar(9)	path	'Workno',
		begdate			varchar(10)	path	'Begdate',
		enddate			varchar(10)	path	'Enddate'
	);
c09_w	c09%rowtype;

c10 CURSOR FOR
	SELECT	*
	from	xmltable('/BpartnerData' passing bpartnerdata_w columns
		client			varchar(3)	path	'Client',
		bpartner		varchar(10)	path	'Bpartner',
		instituteind		varchar(10)	path	'InstituteInd',
		lastnamebp		varchar(35)	path	'LastNameBp',
		stdlnamebp		varchar(35)	path	'StdLnameBp',
		frstnamebp		varchar(35)	path	'FrstNameBp',
		stdfnamebp		varchar(35)	path	'StdFnameBp',
		thirdnamebp		varchar(35)	path	'ThirdNameBp',
		shortnamebp		varchar(12)	path	'ShortNameBp',
		personflag		varchar(1)	path	'PersonFlag',
		langu			varchar(1)	path	'Langu',
		languiso		varchar(2)	path	'LanguIso',
		formaddrs		varchar(2)	path	'FormAddrs',
		title			varchar(15)	path	'Title',
		affix			varchar(15)	path	'Affix',
		prefix			varchar(15)	path	'Prefix',
		sex			varchar(1)	path	'Sex',
		commentbp		varchar(50)	path	'CommentBp',
		deletionind		varchar(1)	path	'DeletionInd',
		blockfrom		varchar(10)	path	'BlockFrom',
		blockto			varchar(10)	path	'BlockTo',
		bpartind		varchar(1)	path	'BpartInd',
		persind			varchar(1)	path	'PersInd',
		insurprovind		varchar(1)	path	'InsurprovInd',
		custind			varchar(1)	path	'CustInd',
		emplind			varchar(1)	path	'EmplInd',
		hospind			varchar(1)	path	'HospInd',
		blckreas		varchar(50)	path	'BlckReas',
		addrno			varchar(10)	path	'AddrNo',
		addrobj			varchar(4)	path	'AddrObj',
		taxno1			varchar(16)	path	'TaxNo1',
		partnerno		varchar(15)	path	'PartnerNo',
		partnerguid		varchar(16)	path	'PartnerGuid',
		title1			varchar(15)	path	'Title1'
	);
c10_w	c10%rowtype;

c11 CURSOR FOR
	SELECT	*
	from	xmltable('/CustomerBank/item' passing customerbank_w columns
		client			varchar(3)	path	'Client',
		bankctry		varchar(3)	path	'BankCtry',
		countryiso		varchar(2)	path	'Countryiso',
		bankno			varchar(15)	path	'BankNo',
		bankacct		varchar(18)	path	'BankAcct',
		collauth		varchar(1)	path	'CollAuth',
		bankname		varchar(60)	path	'BankName',
		iban			varchar(34)	path	'Iban'
	);
c11_w	c11%rowtype;

c12 CURSOR FOR
	SELECT	*
	from	xmltable('/CustomerData' passing customerdata_w columns
		client			varchar(3)	path	'Client',
		customer		varchar(10)	path	'Customer',
		compcode		varchar(4)	path	'CompCode',
		refcust			varchar(10)	path	'RefCust',
		commentcust		varchar(50)	path	'CommentCust',
		deletionind		varchar(1)	path	'DeletionInd'
	);
c12_w	c12%rowtype;

c13 CURSOR FOR
	SELECT	*
	from	xmltable('/DefaultCscheme' passing defaultcscheme_w columns
		client			varchar(3)	path	'Client',
		institution		varchar(4)	path	'Institution',
		iptype			varchar(3)	path	'Iptype',
		insprovider		varchar(10)	path	'InsProvider',
		contscheme		varchar(6)	path	'ContScheme'
	);
c13_w	c13%rowtype;

c14 CURSOR FOR
	SELECT	*
	from	xmltable('/EmployerData' passing employerdata_w columns
		client			varchar(3)	path	'Client',
		employer		varchar(10)	path	'Employer',
		commentempl		varchar(50)	path	'CommentEmpl',
		deletionind		varchar(1)	path	'DeletionInd',
		accdntins		varchar(10)	path	'AccdntIns'
	);
c14_w	c14%rowtype;

c15 CURSOR FOR
	SELECT	*
	from	xmltable('/FicustomerData' passing ficustomerdata_w columns
		client			varchar(3)	path	'Client',
		institution		varchar(4)	path	'Institution',
		refcust			varchar(10)	path	'RefCust',
		compcode		varchar(4)	path	'CompCode',
		accntgrp		varchar(4)	path	'AccntGrp',
		controlaccount		varchar(10)	path	'ControlAccount',
		sortkey			varchar(3)	path	'SortKey',
		pmnttrms		varchar(4)	path	'Pmnttrms',
		dunnproc		varchar(4)	path	'DunnProc'
	);
c15_w	c15%rowtype;

c16 CURSOR FOR
	SELECT	*
	from	xmltable('/HospitalData' passing hospitaldata_w columns
		client			varchar(3)	path	'Client',
		hospital		varchar(10)	path	'Hospital',
		commenthosp		varchar(50)	path	'CommentHosp',
		deletionind		varchar(1)	path	'DeletionInd',
		hospitaltype		varchar(2)	path	'HospitalType'
	);
c16_w	c16%rowtype;

c17 CURSOR FOR
	SELECT	*
	from	xmltable('/InsproviderData' passing insproviderdata_w columns
		client			varchar(3)	path	'Client',
		insprovider		varchar(10)	path	'InsProvider',
		grpind			varchar(1)	path	'GrpInd',
		iptype			varchar(3)	path	'Iptype',
		iptctrl			varchar(1)	path	'IptCtrl',
		hdoffice		varchar(10)	path	'HdOffice',
		hicompanynumber		varchar(12)	path	'HiCompanyNumber',
		responsibleppa		varchar(10)	path	'ResponsiblePpa',
		hicnohcsc		varchar(10)	path	'HicnoHcsc',
		commentip		varchar(50)	path	'CommentIp',
		longtext		varchar(1)	path	'LongText',
		cpersinpatient		varchar(30)	path	'CpersInpatient',
		cpersoutpatient		varchar(30)	path	'CpersOutpatient',
		ivprocedure		varchar(1)	path	'IvProcedure',
		manuallyinvoiceproc	varchar(1)	path	'ManuallyInvoiceProc',
		invoicelist		varchar(1)	path	'InvoiceList',
		interimbill		varchar(1)	path	'InterimBill',
		sortrules		varchar(2)	path	'SortRules',
		intbillwoivc		varchar(1)	path	'IntbillWoIvc',
		finbillwoivc		varchar(1)	path	'FinbillWoIvc',
		finbilldiag		varchar(1)	path	'FinbillDiag',
		sepinvoice		varchar(1)	path	'SepInvoice',
		intbilldays		smallint	path	'IntbillDays',
		intbillinterv		smallint	path	'IntbillInterv',
		finbillinterv		smallint	path	'FinbillInterv',
		ivreminder		varchar(1)	path	'IvReminder',
		reminderperiod		smallint	path	'ReminderPeriod',
		ivdispatch		varchar(1)	path	'IvDispatch',
		printdiagn		varchar(1)	path	'PrintDiagn',
		admissionnotific	varchar(1)	path	'AdmissionNotific',
		dischargenotific	varchar(1)	path	'DischargeNotific',
		extensionivr		smallint	path	'ExtensionIvr',
		periodivr		smallint	path	'PeriodIvr',
		copaymentobl		varchar(1)	path	'CopaymentObl',
		copaymentproc		varchar(1)	path	'CopaymentProc',
		startday		smallint	path	'StartDay',
		currency		varchar(5)	path	'Currency',
		currencyiso		varchar(3)	path	'CurrencyIso',
		deletionind		varchar(1)	path	'DeletionInd',
		taxclass		varchar(1)	path	'TaxClass',
		datacollectionpoint	varchar(10)	path	'DataCollectionPoint',
		honotrelevant		varchar(1)	path	'HoNotRelevant',
		corresptoho		varchar(1)	path	'CorrespToHo',
		searchname		varchar(60)	path	'Searchname',
		hicsname		varchar(60)	path	'HicSname',
		ivrejdeadline		smallint	path	'IvRejDeadline',
		ivproc			varchar(2)	path	'IvProc',
		eano			varchar(13)	path	'Eano',
		invoiceprint		varchar(1)	path	'InvoicePrint',
		zerobill		varchar(1)	path	'ZeroBill',
		tierspay		varchar(1)	path	'TiersPay',
		socialins		varchar(1)	path	'SocialIns',
		privatesign 		varchar(1)	path	'PrivateSign'
	);
c17_w	c17%rowtype;

c18 CURSOR FOR
	SELECT	*
	from	xmltable('/InsproviderInstitu/item' passing insproviderinstitu_w columns
		client			varchar(3)	path	'Client',
		institution		varchar(4)	path	'Institution',
		copaymentproc		varchar(1)	path	'CopaymentProc',
		effectivedate		varchar(10)	path	'EffectiveDate',
		prevcopaymentproc	varchar(1)	path	'PrevCopaymentProc',
		changeuptodate		varchar(10)	path	'ChangeUpToDate',
		creationuser		varchar(12)	path	'CreationUser',
		creationdate		varchar(10)	path	'CreationDate',
		creationtime		varchar(10)	path	'CreationTime',
		updateuser		varchar(12)	path	'UpdateUser',
		updatedate		varchar(10)	path	'UpdateDate',
		updatetime		varchar(10)	path	'UpdateTime'
	);
c18_w	c18%rowtype;

c19 CURSOR FOR
	SELECT	*
	from	xmltable('/InsproviderRel/item' passing insproviderrel_w columns
		client			varchar(3)	path	'Client',
		insprovider		varchar(10)	path	'InsProvider',
		rgpart2			varchar(3)	path	'Rgpart2',
		institution		varchar(4)	path	'Institution',
		casetype		varchar(1)	path	'Casetype',
		bpartner		varchar(10)	path	'Bpartner'
	);
c19_w	c19%rowtype;

c20 CURSOR FOR
	SELECT	*
	from	xmltable('/IpTypeData' passing iptypedata_w columns
		client			varchar(3)	path	'Client',
		iptype			varchar(3)	path	'Iptype',
		subgr			varchar(2)	path	'Subgr',
		billtype		smallint	path	'BillType',
		ivprocedure		varchar(1)	path	'IvProcedure',
		manuallyinvoiceproc	varchar(1)	path	'ManuallyInvoiceProc',
		invoicelist		varchar(1)	path	'InvoiceList',
		interimbill		varchar(1)	path	'InterimBill',
		sortrules		varchar(2)	path	'SortRules',
		intbillwoivc		varchar(1)	path	'IntbillWoIvc',
		finbillwoivc		varchar(1)	path	'FinbillWoIvc',
		finbilldiag		varchar(1)	path	'FinbillDiag',
		sepinvoice		varchar(1)	path	'SepInvoice',
		intbilldays		smallint	path	'IntbillDays',
		intbillinterv		smallint	path	'IntbillInterv',
		finbillinterv		smallint	path	'FinbillInterv',
		ivreminder		varchar(1)	path	'IvReminder',
		reminderperiod		smallint	path	'ReminderPeriod',
		ivdispatch		varchar(1)	path	'IvDispatch',
		printdiagn		varchar(1)	path	'PrintDiagn',
		admissionnotific	varchar(1)	path	'AdmissionNotific',
		dischargenotific	varchar(1)	path	'DischargeNotific',
		extensionivr		smallint	path	'ExtensionIvr',
		periodivr		smallint	path	'PeriodIvr',
		copaymentobl		varchar(1)	path	'CopaymentObl',
		copaymentproc		varchar(1)	path	'CopaymentProc',
		startday		smallint	path	'StartDay',
		chargecat		varchar(1)	path	'ChargeCat',
		ipcategory		varchar(2)	path	'IpCategory',
		ivrejdeadline		smallint	path	'IvRejDeadline',
		ivproc			varchar(2)	path	'IvProc',
		invoiceprint		varchar(1)	path	'InvoicePrint',
		zerobill		varchar(1)	path	'ZeroBill',
		socialins		varchar(1)	path	'SocialIns',
		privatesign 		varchar(1)	path	'PrivateSign'
	);
c20_w	c20%rowtype;

c21 CURSOR FOR
	SELECT	*
	from	xmltable('/PersonData' passing persondata_w columns
		client			varchar(3)	path	'Client',
		person			varchar(10)	path	'Person',
		dob			varchar(10)	path	'Dob',
		phone			varchar(16)	path	'Phone',
		emplind			varchar(1)	path	'EmplInd',
		hrind			varchar(1)	path	'HrInd',
		experno			varchar(10)	path	'ExPerNo',
		physind			varchar(1)	path	'PhysInd',
		physno			varchar(12)	path	'PhysNo',
		nurseind		varchar(1)	path	'NurseInd',
		extphysind		varchar(1)	path	'ExtPhysInd',
		accredind		varchar(1)	path	'AccredInd',
		accredallow		varchar(1)	path	'AccredAllow',
		commentper		varchar(50)	path	'CommentPer',
		begdate			varchar(10)	path	'Begdate',
		enddate			varchar(10)	path	'Enddate',
		deletionind		varchar(1)	path	'DeletionInd',
		specialty		varchar(4)	path	'Specialty',
		spectype		varchar(2)	path	'SpecType',
		rank			varchar(3)	path	'Rank',
		rkdate			varchar(10)	path	'Rkdate',
		oldrank			varchar(3)	path	'OldRank',
		nifno			varchar(12)	path	'Nifno',
		fixkvno 		varchar(7)	path	'Fixkvno'
	);
c21_w	c21%rowtype;


pessoa_fisica_w			pessoa_fisica%rowtype;
compl_pessoa_fisica_w		compl_pessoa_fisica%rowtype;
medico_w			medico%rowtype;
medico_especialidade_w		medico_especialidade%rowtype;
pf_codigo_externo_w		pf_codigo_externo%rowtype;
pessoa_fisica_idioma_w		pessoa_fisica_idioma%rowtype;
person_name_w			person_name%rowtype;
pf_forma_tratamento_w		pf_forma_tratamento%rowtype;
medico_espec_bsnr_w		medico_espec_bsnr%rowtype;

dt_atualizacao_w		timestamp	:=	clock_timestamp();
nm_usuario_w			varchar(15)	:=	'ISH';
dt_atualizacao_nrec_w		timestamp	:=	clock_timestamp();
nm_usuario_nrec_w		varchar(15)	:=	'ISH';
nr_doc_externo_w		intpd_fila_transmissao.NR_DOC_EXTERNO%type;



BEGIN
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);

delete	FROM intpd_log_recebimento
where	nr_seq_fila = nr_sequencia_p;

begin
select	a.nr_seq_documento,
	coalesce(b.ie_conversao,'I'),
	b.nr_seq_sistema,
	b.nr_seq_projeto_xml,
	b.nr_seq_regra_conv,
	a.ds_xml_retorno,
	a.ie_evento,
	a.nr_seq_agrupador
into STRICT	nr_seq_doc_origem_w,
	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w,
	ds_xml_w,
	ie_evento_w,
	nr_seq_agrupador_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;
exception
when others then
	null;
end;

ish_converter_response(nr_sequencia_p, ds_xml_w, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		ie_response_procedure = 'S'
	where	nr_sequencia = nr_sequencia_p;
else
	begin
	

	select	a.addphone,
		a.addressdata,
		a.assperkvphysno,
		a.assperqldi,
		a.assperqtdi,
		a.assperspec,
		a.assperteamno,
		a.assperusr,
		a.assperworkno,
		a.bpartnerdata,
		a.customerbank,
		a.customerdata,
		a.defaultcscheme,
		a.employerdata,
		a.ficustomerdata,
		a.hospitaldata,
		a.insproviderdata,
		a.insproviderinstitu,
		a.insproviderrel,
		a.iptypedata,
		a.persondata
	into STRICT	addphone_w,
		addressdata_w,
		assperkvphysno_w,
		assperqldi_w,
		assperqtdi_w,
		assperspec_w,
		assperteamno_w,
		assperusr_w,
		assperworkno_w,
		bpartnerdata_w,
		customerbank_w,
		customerdata_w,
		defaultcscheme_w,
		employerdata_w,
		ficustomerdata_w,
		hospitaldata_w,
		insproviderdata_w,
		insproviderinstitu_w,
		insproviderrel_w,
		iptypedata_w,
		persondata_w
	from	xmltable(
			xmlnamespaces(
			'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soap-env"),
			'soap-env:Envelope/soap-env:Body/urn:BuspartnerGetdetailResponse' passing xml_w columns
		addphone xmltype path 'AddPhone',
		addressdata xmltype path 'AddressData',
		assperkvphysno xmltype path 'AssPerKvphysno',
		assperqldi xmltype path 'AssPerQldi',
		assperqtdi xmltype path 'AssPerQtdi',
		assperspec xmltype path 'AssPerSpec',
		assperteamno xmltype path 'AssPerTeamno',
		assperusr xmltype path 'AssPerUsr',
		assperworkno xmltype path 'AssPerWorkno',
		bpartnerdata xmltype path 'BpartnerData',
		customerbank xmltype path 'CustomerBank',
		customerdata xmltype path 'CustomerData',
		defaultcscheme xmltype path 'DefaultCscheme',
		employerdata xmltype path 'EmployerData',
		ficustomerdata xmltype path 'FicustomerData',
		hospitaldata xmltype path 'HospitalData',
		insproviderdata xmltype path 'InsproviderData',
		insproviderinstitu xmltype path 'InsproviderInstitu',
		insproviderrel xmltype path 'InsproviderRel',
		iptypedata xmltype path 'IpTypeData',
		persondata xmltype path  'PersonData') a;

	open c10;
	loop
	fetch c10 into
		c10_w;
	EXIT WHEN NOT FOUND; /* apply on c10 */
		begin
		pessoa_fisica_w			:=	null;
		compl_pessoa_fisica_w		:=	null;
		medico_w			:=	null;
		medico_especialidade_w		:=	null;

		/*'Physicians'*/


		if (c10_w.bpartind = 'X') and (c10_w.persind = 'X') then
			begin
			begin
			--verificar se a mesma ja esta cadastrada na base

			select	max(a.cd_pessoa_fisica)
			into STRICT	cd_pessoa_fisica_w
			from	pf_codigo_externo a
			where	a.cd_pessoa_fisica_externo = c10_w.bpartner
			and	a.ie_tipo_codigo_externo in ('ISH','ISHMED')
			and	exists (SELECT 1
				from	pessoa_fisica x
				where	x.cd_pessoa_fisica = a.cd_pessoa_fisica);

			if (coalesce(cd_pessoa_fisica_w,'NULL') <> 'NULL') then
				select	*
				into STRICT	pessoa_fisica_w
				from	pessoa_fisica
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
			else
				pessoa_fisica_w.cd_pessoa_fisica	:=	null;
			end if;
			exception
			when others then
				begin
				pf_codigo_externo_w.cd_pessoa_fisica	:=	null;
				pessoa_fisica_w.cd_pessoa_fisica	:=	null;
				end;
			end;

			if (pessoa_fisica_w.cd_pessoa_fisica IS NOT NULL AND pessoa_fisica_w.cd_pessoa_fisica::text <> '') then
				begin
				nr_doc_externo_w	:=	pessoa_fisica_w.cd_pessoa_fisica;
				exit;
				end;
			end if;

			reg_integracao_w.nm_tabela	:=	'PERSON_NAME';
			reg_integracao_w.nm_elemento	:=	'BpartnerData';

			intpd_processar_atributo(reg_integracao_w, 'DS_FAMILY_NAME', c10_w.lastnamebp, 'N', person_name_w.ds_family_name);
			intpd_processar_atributo(reg_integracao_w, 'DS_GIVEN_NAME', c10_w.frstnamebp, 'N', person_name_w.ds_given_name);
			intpd_processar_atributo(reg_integracao_w, 'DS_COMPONENT_NAME_1', c10_w.prefix, 'N', person_name_w.ds_component_name_1);
			intpd_processar_atributo(reg_integracao_w, 'DS_COMPONENT_NAME_3', c10_w.affix, 'N', person_name_w.ds_component_name_3);

			if (reg_integracao_w.qt_reg_log = 0) then
				begin

				select	nextval('person_name_seq')
				into STRICT	person_name_w.nr_sequencia
				;

				person_name_w.dt_atualizacao	:=	dt_atualizacao_w;
				person_name_w.dt_atualizacao_nrec	:=	clock_timestamp();
				person_name_w.nm_usuario		:=	nm_usuario_w;
				person_name_w.nm_usuario_nrec	:=	nm_usuario_w;
				person_name_w.ds_type		:=	'main';

				insert into person_name values (person_name_w.*);

				pessoa_fisica_w.nr_seq_person_name	:=	person_name_w.nr_sequencia;
				end;
			end if;

			reg_integracao_w.nm_tabela		:=	'PESSOA_FISICA';
			reg_integracao_w.nm_elemento	:=	'BpartnerData';

			if (length(c10_w.title) > 0) then
				begin
				begin
				select	*
				into STRICT	pf_forma_tratamento_w
				from	pf_forma_tratamento
				where	ds_forma_tratamento = upper(c10_w.title)  LIMIT 1;
				exception
				when others then
					begin
					if (reg_integracao_w.qt_reg_log = 0) then
						begin
						select	nextval('pf_forma_tratamento_seq')
						into STRICT	pf_forma_tratamento_w.nr_sequencia
						;

						pf_forma_tratamento_w.dt_atualizacao		:=	clock_timestamp();
						pf_forma_tratamento_w.nm_usuario		:=	nm_usuario_w;
						pf_forma_tratamento_w.dt_atualizacao_nrec	:=	clock_timestamp();
						pf_forma_tratamento_w.nm_usuario_nrec	:=	nm_usuario_w;
						pf_forma_tratamento_w.ie_situacao		:=	'A';
						pf_forma_tratamento_w.ds_forma_tratamento	:=	upper(c10_w.title);
						pf_forma_tratamento_w.ds_sigla		:=	upper(c10_w.title);


						insert into pf_forma_tratamento values (pf_forma_tratamento_w.*);
						end;
					end if;
					end;
				end;
				pessoa_fisica_w.nr_seq_forma_trat	:=	pf_forma_tratamento_w.nr_sequencia;
				end;
			end if;

			intpd_processar_atributo(reg_integracao_w, 'IE_SEXO_NUMBER', c10_w.sex, 'S', pessoa_fisica_w.ie_sexo);

			open c21;
			loop
			fetch c21 into
				c21_w;
			EXIT WHEN NOT FOUND; /* apply on c21 */
				begin
				begin
				pessoa_fisica_w.dt_nascimento	:=	to_date(c21_w.dob,'yyyy-mm-dd');
				exception
				when others then
					pessoa_fisica_w.dt_nascimento	:=	null;
				end;

				if (reg_integracao_w.qt_reg_log = 0) then
					begin

					select	nextval('pessoa_fisica_seq')
					into STRICT	pessoa_fisica_w.cd_pessoa_fisica
					;

					nr_doc_externo_w			:=	pessoa_fisica_w.cd_pessoa_fisica;
					pessoa_fisica_w.ie_tipo_pessoa		:=	'2';
					pessoa_fisica_w.nm_usuario		:=	nm_usuario_w;
					pessoa_fisica_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
					pessoa_fisica_w.dt_atualizacao		:=	dt_atualizacao_w;
					pessoa_fisica_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;

					insert into pessoa_fisica values (pessoa_fisica_w.*);

					select	*
					into STRICT	pessoa_fisica_w
					from	pessoa_fisica
					where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;

					select	nextval('pf_codigo_externo_seq')
					into STRICT	pf_codigo_externo_w.nr_sequencia
					;

					pf_codigo_externo_w.cd_pessoa_fisica		:=	pessoa_fisica_w.cd_pessoa_fisica;
					pf_codigo_externo_w.cd_pessoa_fisica_externo	:=	c10_w.bpartner;
					pf_codigo_externo_w.nm_usuario		:=	nm_usuario_w;
					pf_codigo_externo_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
					pf_codigo_externo_w.dt_atualizacao		:=	dt_atualizacao_w;
					pf_codigo_externo_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
					pf_codigo_externo_w.ie_tipo_codigo_externo	:=	'ISHMED';

					insert into pf_codigo_externo values (pf_codigo_externo_w.*);
					end;
				end if;


				reg_integracao_w.nm_elemento	:=	'PersonData';
				reg_integracao_w.nm_tabela	:=	'MEDICO';

				if (reg_integracao_w.qt_reg_log = 0) then
					begin
					medico_w.cd_pessoa_fisica		:=	pessoa_fisica_w.cd_pessoa_fisica;
					medico_w.nm_guerra		:=	pessoa_fisica_w.nm_pessoa_fisica;
					medico_w.ie_vinculo_medico		:=	14; -- externo
					medico_w.nr_crm			:=	99999; -- default germany;
					medico_w.ie_corpo_assist 		:=	'N';
					medico_w.ie_corpo_clinico		:=	'N';
					medico_w.ie_situacao		:=	'A';
					medico_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
					medico_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
					medico_w.nm_usuario		:=	nm_usuario_w;
					medico_w.dt_atualizacao		:=	dt_atualizacao_w;

					insert into medico values (medico_w.*);

					if (length(c21_w.specialty) > 0) then
						begin
						reg_integracao_w.nm_tabela	:=	'MEDICO_ESPECIALIDADE';

						intpd_processar_atributo(reg_integracao_w, 'CD_ESPECIALIDADE', c21_w.specialty, 'S', medico_especialidade_w.cd_especialidade);

						if (reg_integracao_w.qt_reg_log = 0) and (medico_especialidade_w.cd_especialidade IS NOT NULL AND medico_especialidade_w.cd_especialidade::text <> '') then
							begin

							open C03;
							loop
							fetch C03 into
								c03_w;
							EXIT WHEN NOT FOUND; /* apply on C03 */
							end loop;
							close C03;

							open C09;
							loop
							fetch C09 into
								c09_w;
							EXIT WHEN NOT FOUND; /* apply on C09 */
							end loop;
							close C09;

							medico_especialidade_w.cd_pessoa_fisica		:= pessoa_fisica_w.cd_pessoa_fisica;
							medico_especialidade_w.nm_usuario		:= nm_usuario_w;
							medico_especialidade_w.dt_atualizacao		:= dt_atualizacao_w;
							medico_especialidade_w.nr_seq_prioridade	:= 100;
							medico_especialidade_w.nr_rqe			:= c03_w.Kvphysno;	--LANR							

							insert into medico_especialidade values (medico_especialidade_w.*);

							select	nextval('medico_espec_bsnr_seq')
							into STRICT	medico_espec_bsnr_w.nr_sequencia
							;
							
							medico_espec_bsnr_w.dt_atualizacao	:= clock_timestamp();
							medico_espec_bsnr_w.nm_usuario		:= nm_usuario_w;
							medico_espec_bsnr_w.dt_atualizacao_nrec	:= clock_timestamp();
							medico_espec_bsnr_w.nm_usuario_nrec	:= nm_usuario_w;
							medico_espec_bsnr_w.nr_bsnr		:= c09_w.workno;
							medico_espec_bsnr_w.cd_pessoa_fisica	:= pessoa_fisica_w.cd_pessoa_fisica;
							medico_espec_bsnr_w.cd_especialidade	:= medico_especialidade_w.cd_especialidade;

							insert into medico_espec_bsnr values (medico_espec_bsnr_w.*);

							end;
						end if;
						end;
					end if;
					end;
				end if;
				end;
			end loop;
			close c21;

			if (length(c10_w.langu) > 0) then
				begin
				reg_integracao_w.nm_tabela		:=	'PESSOA_FISICA_IDIOMA';
				reg_integracao_w.nm_elemento	:=	'BpartnerData';

				intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_IDIOMA', c10_w.langu, 'S', pessoa_fisica_idioma_w.nr_seq_idioma);

				select	*
				into STRICT	pessoa_fisica_idioma_w
				from	pessoa_fisica_idioma
				where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
				and	nr_seq_idioma = pessoa_fisica_idioma_w.nr_seq_idioma  LIMIT 1;
				exception
				when others then
					begin
					if (reg_integracao_w.qt_reg_log = 0) then
						begin
						select	nextval('pessoa_fisica_idioma_seq')
						into STRICT	pessoa_fisica_idioma_w.nr_sequencia
						;

						intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_IDIOMA', c10_w.langu, 'S', pessoa_fisica_idioma_w.nr_seq_idioma);
						pessoa_fisica_idioma_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
						pessoa_fisica_idioma_w.ie_fluencia		:=	'A';
						pessoa_fisica_idioma_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
						pessoa_fisica_idioma_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
						pessoa_fisica_idioma_w.nm_usuario		:=	nm_usuario_w;
						pessoa_fisica_idioma_w.dt_atualizacao		:=	dt_atualizacao_w;

						if (pessoa_fisica_idioma_w.nr_seq_idioma IS NOT NULL AND pessoa_fisica_idioma_w.nr_seq_idioma::text <> '') then
							insert into pessoa_fisica_idioma values (pessoa_fisica_idioma_w.*);
						end if;
						end;
					end if;
					end;
				end;
			end if;

			open c02;
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				if (c02_w.addrno = c10_w.addrno) then
					
						reg_integracao_w := ish_patient_pck.gerar_compl_pessoa_fisica(
						reg_integracao_w, substr(pessoa_fisica_w.cd_pessoa_fisica,1,10), '1', null, null, null, null, substr(c02_w.phoneno,1,15), substr(c02_w.extension,1,5), substr(c02_w.faxno,1,80), substr(c02_w.faxextension,1,3), substr(c02_w.country,1,10), substr(c02_w.region,1,15), substr(c02_w.pcd,1,15), substr(c02_w.city,1,40), substr(c02_w.district,1,80), substr(c02_w.strno,1,100), substr(c02_w.houseno,1,20), substr(c02_w.strsuppl1,1,40), substr(c02_w.email,1,255), substr(c02_w.stdstreet,1,60), substr(c02_w.strsup,1,20), null, null, nm_usuario_w, c02_w.addrno, null);
				end if;
				end;
			end loop;
			close c02;
			end;

		elsif	(c10_w.InsurprovInd = 'X' AND c10_w.BpartInd = 'X') or --PJ - Convenio ou Hospital
			(c10_w.HospInd = 'X' AND c10_w.BpartInd = 'X') or
			(c10_w.EmplInd = 'X' AND c10_w.BpartInd = 'X')then

			--Pessoa juridica

			begin
			select	cd_cgc
			into STRICT	pessoa_juridica_w.cd_cgc
			from	pessoa_juridica
			where	cd_cgc	= c10_w.Bpartner  LIMIT 1;
			exception
			when others then
				pessoa_juridica_w.cd_cgc := null;
			end;

			if (coalesce(pessoa_juridica_w.cd_cgc::text, '') = '') then

				pessoa_juridica_w.dt_atualizacao	:= clock_timestamp();
				pessoa_juridica_w.dt_atualizacao_nrec	:= clock_timestamp();
				pessoa_juridica_w.dt_criacao		:= clock_timestamp();
				pessoa_juridica_w.dt_integracao		:= clock_timestamp();
				pessoa_juridica_w.dt_integracao_externa	:= clock_timestamp();
				pessoa_juridica_w.ie_prod_fabric	:= 'N';
				pessoa_juridica_w.ie_situacao		:= 'A';
				pessoa_juridica_w.nm_usuario		:= usernametasy;
				pessoa_juridica_w.nm_usuario_nrec	:= usernametasy;


				reg_integracao_w.nm_tabela		:= 'PESSOA_JURIDICA';
				reg_integracao_w.nm_elemento		:= 'BpartnerData';

				intpd_processar_atributo(reg_integracao_w, 'CD_CGC', c10_w.Bpartner, 'N', pessoa_juridica_w.cd_cgc);
				intpd_processar_atributo(reg_integracao_w, 'CD_CNES', c10_w.InstituteInd, 'N', pessoa_juridica_w.cd_cnes);
				intpd_processar_atributo(reg_integracao_w, 'DS_NOME_ABREV', c10_w.ShortNameBp, 'N', pessoa_juridica_w.DS_NOME_ABREV);
				intpd_processar_atributo(reg_integracao_w, 'DS_RAZAO_SOCIAL', c10_w.LastNameBp, 'N', pessoa_juridica_w.DS_RAZAO_SOCIAL);
				intpd_processar_atributo(reg_integracao_w, 'NM_FANTASIA', c10_w.LastNameBp, 'N', pessoa_juridica_w.NM_FANTASIA);

				if (c10_w.InsurprovInd = 'X') then
					intpd_processar_atributo(reg_integracao_w, 'CD_TIPO_PESSOA', 'INSURPROV', 'S', pessoa_juridica_w.cd_tipo_pessoa);
				elsif (c10_w.HospInd = 'X') then
					intpd_processar_atributo(reg_integracao_w, 'CD_TIPO_PESSOA', 'HOSP', 'S', pessoa_juridica_w.cd_tipo_pessoa);
				elsif (c10_w.EmplInd = 'X') then
                	intpd_processar_atributo(reg_integracao_w, 'CD_TIPO_PESSOA', 'EMPLOYER', 'S', pessoa_juridica_w.cd_tipo_pessoa);
				end if;

				--Enderecos

				open c02;
				loop
				fetch c02 into
					c02_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
				end loop;
				close c02;

				reg_integracao_w.nm_tabela		:= 'PESSOA_JURIDICA';
				reg_integracao_w.nm_elemento		:= 'AddressData';

				intpd_processar_atributo(reg_integracao_w, 'CD_CEP', c02_w.Pcd, 'N', pessoa_juridica_w.cd_cep);
				intpd_processar_atributo(reg_integracao_w, 'DS_BAIRRO', c02_w.District, 'N', pessoa_juridica_w.DS_BAIRRO);
				intpd_processar_atributo(reg_integracao_w, 'SG_ESTADO', c02_w.Region, 'S', pessoa_juridica_w.SG_ESTADO);
				intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_PAIS', c02_w.Country, 'S', pessoa_juridica_w.NR_SEQ_PAIS);
				intpd_processar_atributo(reg_integracao_w, 'DS_EMAIL', c02_w.EMail, 'N', pessoa_juridica_w.DS_EMAIL);
				intpd_processar_atributo(reg_integracao_w, 'DS_ENDERECO', substr(c02_w.StrNo,1,40), 'N', pessoa_juridica_w.DS_ENDERECO);
				intpd_processar_atributo(reg_integracao_w, 'DS_MUNICIPIO', substr(c02_w.City,1,40), 'N', pessoa_juridica_w.DS_MUNICIPIO);
				intpd_processar_atributo(reg_integracao_w, 'NR_FAX', substr(c02_w.Faxno,1,10), 'N', pessoa_juridica_w.NR_FAX);
				intpd_processar_atributo(reg_integracao_w, 'NR_TELEFONE', substr(c02_w.Phoneno,1,10), 'N', pessoa_juridica_w.NR_TELEFONE);
				intpd_processar_atributo(reg_integracao_w, 'NR_TELEFONE', substr(c02_w.Phoneno,1,10), 'N', pessoa_juridica_w.NR_TELEFONE);

				if (reg_integracao_w.qt_reg_log = 0) then
					insert into pessoa_juridica values (pessoa_juridica_w.*);
				end if;
				nr_doc_externo_w	:=	pessoa_juridica_w.cd_cgc;

			end if;

			if (c10_w.InsurprovInd = 'X') then

				--Convenio

				open C17;
				loop
				fetch C17 into
					c17_w;
				EXIT WHEN NOT FOUND; /* apply on C17 */
				end loop;
				close C17;

				begin
				select	cd_convenio
				into STRICT	convenio_w.cd_convenio
				from	convenio
				where	cd_cgc = pessoa_juridica_w.cd_cgc  LIMIT 1;
				exception
				when others then
					convenio_w.cd_convenio := null;
				end;

				if (coalesce(convenio_w.cd_convenio::text, '') = '') then

					reg_integracao_w.nm_tabela		:= 'CONVENIO';
					reg_integracao_w.nm_elemento		:= 'InsproviderData';

					select	max(cd_convenio) + 1
					into STRICT	convenio_w.cd_convenio
					from	convenio;

					intpd_processar_atributo(reg_integracao_w, 'DS_CONVENIO', ltrim(c10_w.LastNameBp,'0'), 'N', convenio_w.DS_CONVENIO);
					intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_CONVENIO', c17_w.Iptype, 'S', convenio_w.IE_TIPO_CONVENIO);
					intpd_processar_atributo(reg_integracao_w, 'CD_CGC', pessoa_juridica_w.cd_cgc, 'N', convenio_w.CD_CGC);
					intpd_processar_atributo(reg_integracao_w, 'CD_INTERNO', c17_w.HiCompanyNumber, 'N', convenio_w.CD_INTERNO);

					if (reg_integracao_w.qt_reg_log = 0) then
						convenio_w.dt_inclusao		:= clock_timestamp();
						convenio_w.ie_situacao		:= 'A';
						convenio_w.dt_atualizacao		:= clock_timestamp();
						convenio_w.nm_usuario  		:= usernametasy;
						convenio_w.dt_atualizacao_nrec	:= clock_timestamp();
						convenio_w.nm_usuario_nrec		:= usernametasy;
						convenio_w.dt_dia_vencimento		:= 30;
						convenio_w.ie_preco_medio_material 	:= 'S';
						convenio_w.qt_conta_protocolo      	:= 0;
						convenio_w.ie_titulo_receber       	:= 'P';
						convenio_w.ie_agenda_consulta      	:= 'S';
						convenio_w.ie_exige_data_ult_pagto 	:= 'N';
						convenio_w.ie_doc_convenio         	:= 'G';
						convenio_w.ie_origem_preco         	:= 'BT';
						convenio_w.ie_precedencia_preco    	:= 'D';
						convenio_w.ie_agrup_item_interf    	:= 'N';
						convenio_w.ie_conversao_mat        	:= 'R';
						convenio_w.ie_rep_cod_usuario      	:= 'S';
						convenio_w.ie_exige_orc_atend      	:= 'N';
						convenio_w.ie_calc_porte           	:= 'G';
						convenio_w.ie_exige_senha_atend    	:= 'S';
						convenio_w.nr_multiplo_envio       	:= 0;
						convenio_w.ie_exige_plano          	:= 'N';
						convenio_w.ie_exige_carteira_atend 	:= 'N';
						convenio_w.ie_exige_validade_atend 	:= 'N';
						convenio_w.ie_solic_exame_tasymed  	:= 'N';
						convenio_w.ie_consiste_autor       	:= 'N';
						convenio_w.ie_exige_tipo_guia      	:= 'N';

						insert into convenio values (convenio_w.*);
						nr_doc_externo_w	:=	convenio_w.cd_convenio;

						begin
						select	nr_sequencia
						into STRICT	classificacao_convenio_w.nr_sequencia
						from	classificacao_convenio
						where	ds_classificacao	= c17_w.iptype  LIMIT 1;
						exception
						when others then
							classificacao_convenio_w.nr_sequencia	:= null;
						end;

						if (coalesce(classificacao_convenio_w.nr_sequencia::text, '') = '' and (c17_w.iptype IS NOT NULL AND c17_w.iptype::text <> '')) then
							select	nextval('classificacao_convenio_seq')
							into STRICT	classificacao_convenio_w.nr_sequencia
							;

							classificacao_convenio_w.ds_classificacao	:= c17_w.iptype;
							classificacao_convenio_w.dt_atualizacao		:= clock_timestamp();
							classificacao_convenio_w.nm_usuario		:= usernametasy;
							classificacao_convenio_w.dt_atualizacao_nrec	:= clock_timestamp();
							classificacao_convenio_w.nm_usuario_nrec	:= usernametasy;

							insert into classificacao_convenio values (classificacao_convenio_w.*);
						end if;

						begin
						select	nr_sequencia
						into STRICT	convenio_classif_w.nr_sequencia
						from	convenio_classif
						where	nr_seq_classificacao	= classificacao_convenio_w.nr_sequencia
						and	cd_convenio		= convenio_w.cd_convenio  LIMIT 1;
						exception
						when others then
							convenio_classif_w.nr_sequencia := null;
						end;

						if (coalesce(convenio_classif_w.nr_sequencia::text, '') = '' and
						    (classificacao_convenio_w.nr_sequencia IS NOT NULL AND classificacao_convenio_w.nr_sequencia::text <> '')) then

							select	nextval('convenio_classif_seq')
							into STRICT	convenio_classif_w.nr_sequencia
							;

							convenio_classif_w.NR_SEQ_CLASSIFICACAO		:= classificacao_convenio_w.nr_sequencia;
							convenio_classif_w.CD_CONVENIO            	:= convenio_w.cd_convenio;
							convenio_classif_w.DT_ATUALIZACAO         	:= clock_timestamp();
							convenio_classif_w.NM_USUARIO             	:= usernametasy;
							convenio_classif_w.DT_ATUALIZACAO_NREC    	:= clock_timestamp();
							convenio_classif_w.NM_USUARIO_NREC        	:= usernametasy;

							insert into convenio_classif values (convenio_classif_w.*);
						end if;
						
						select	institution
						into STRICT 	institution_w
						from 	table(ish_buspartner_pck.buspartner_get_detail(nr_sequencia_p));

						reg_integracao_w.nm_tabela		:= 'CONVENIO_ESTABELECIMENTO';
						intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', institution_w, 'S', convenio_estabelecimento_w.cd_estabelecimento);

						begin
						select	nr_sequencia
						into STRICT	convenio_estabelecimento_w.nr_sequencia
						from	convenio_estabelecimento
						where	cd_convenio		= convenio_w.cd_convenio
						and	cd_estabelecimento	= convenio_estabelecimento_w.cd_estabelecimento  LIMIT 1;
						exception
						when others then
							convenio_estabelecimento_w.nr_sequencia := null;
						end;
						
						if (coalesce(convenio_estabelecimento_w.nr_sequencia::text, '') = '') then
						
							select	nextval('convenio_estabelecimento_seq')
							into STRICT	convenio_estabelecimento_w.nr_sequencia
							;
							convenio_estabelecimento_w.cd_convenio			:=	convenio_w.cd_convenio;
							convenio_estabelecimento_w.dt_atualizacao		:=	clock_timestamp();
							convenio_estabelecimento_w.ie_agenda_consulta		:=	convenio_w.ie_agenda_consulta;
							convenio_estabelecimento_w.ie_cancelar_conta		:=	'S';
							convenio_estabelecimento_w.ie_cgc_cih			:=	'S';
							convenio_estabelecimento_w.ie_consiste_guia_atend	:=	'N';
							convenio_estabelecimento_w.ie_conta_fim_mes		:=	'N';
							convenio_estabelecimento_w.ie_conversao_mat		:=	convenio_w.ie_conversao_mat;
							convenio_estabelecimento_w.ie_doc_autorizacao		:=	'N';
							convenio_estabelecimento_w.ie_doc_convenio		:=	convenio_w.ie_doc_convenio;
							convenio_estabelecimento_w.ie_doc_conv_part_func	:=	'N';
							convenio_estabelecimento_w.ie_exige_carteira_atend 	:=	convenio_w.ie_exige_carteira_atend;
							convenio_estabelecimento_w.ie_exige_data_ult_pagto 	:=	convenio_w.ie_exige_data_ult_pagto;
							convenio_estabelecimento_w.ie_exige_fim_vigencia	:=  	'N';
							convenio_estabelecimento_w.ie_exige_lib_bras		:= 	'S';
							convenio_estabelecimento_w.ie_exige_orc_atend		:= 	convenio_w.ie_exige_orc_atend;
							convenio_estabelecimento_w.ie_exige_plano		:= 	convenio_w.ie_exige_plano;
							convenio_estabelecimento_w.ie_exige_senha_atend		:= 	convenio_w.ie_exige_senha_atend;
							convenio_estabelecimento_w.ie_exige_validade_atend	:= 	convenio_w.ie_exige_validade_atend;	
							convenio_estabelecimento_w.ie_fechar_atend_adiant	:= 	'N';
							convenio_estabelecimento_w.ie_forma_geracao_nf		:= 	'T';
							convenio_estabelecimento_w.ie_gerar_nf			:= 	'S';
							convenio_estabelecimento_w.ie_gerar_nf_titulo		:= 	'S';
							convenio_estabelecimento_w.ie_manter_zerado_edicao	:= 	'N';
							convenio_estabelecimento_w.ie_medico_cooperado		:= 	'N';
							convenio_estabelecimento_w.ie_obter_preco_mat_autor	:= 	'N';
							convenio_estabelecimento_w.ie_partic_resp_cred		:= 	'N';
							convenio_estabelecimento_w.ie_preco_medio_material	:= 	convenio_w.ie_preco_medio_material;
							convenio_estabelecimento_w.ie_protocolo_conta		:= 	'T';
							convenio_estabelecimento_w.ie_regra_prior_edicao	:= 	'DT';
							convenio_estabelecimento_w.ie_rep_cod_usuario		:= 	convenio_w.ie_rep_cod_usuario;
							convenio_estabelecimento_w.ie_titulo_receber		:= 	convenio_w.ie_titulo_receber;
							convenio_estabelecimento_w.ie_titulo_sem_nf		:= 	'S';
							convenio_estabelecimento_w.nm_usuario			:= 	usernametasy;
							convenio_estabelecimento_w.qt_conta_protocolo		:= 	0;
							
							insert into convenio_estabelecimento values (convenio_estabelecimento_w.*);
						end if;

						begin
							select	cd_categoria
							into STRICT	categoria_convenio_w.cd_categoria
							from	categoria_convenio
							where	cd_convenio	= convenio_w.cd_convenio  LIMIT 1;
						exception
						when others then
							categoria_convenio_w.cd_categoria := null;
						end;

						if (coalesce(categoria_convenio_w.cd_categoria::text, '') = '') then
							categoria_convenio_w.cd_convenio				:= convenio_w.cd_convenio;
							categoria_convenio_w.cd_categoria				:= '4';
							categoria_convenio_w.ds_categoria				:= 'ALL';
							categoria_convenio_w.cd_tipo_acomodacao			:= 7;
							categoria_convenio_w.nr_acompanhante			:= 0;
							categoria_convenio_w.qt_dieta_acomp				:= 0;
							categoria_convenio_w.ie_idade_dieta				:= 'N';
							categoria_convenio_w.ie_ident_atend				:= 'S';
							categoria_convenio_w.ie_empresa					:= 'S';
							categoria_convenio_w.ie_permite_gerar_pacote	:= 'S';
							categoria_convenio_w.ie_preco_custo				:= 'N';
							categoria_convenio_w.ie_situacao				:= 'A';
							categoria_convenio_w.dt_atualizacao         	:= clock_timestamp();
							categoria_convenio_w.nm_usuario             	:= usernametasy;

							insert into categoria_convenio values (categoria_convenio_w.*);
						end if;
					end if;
				end if;
			end if;
		end if;

		end;
	end loop;
	close c10;

	open c01;
	loop
	fetch c01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		null;
		end;
	end loop;
	close c01;

	open c03;
	loop
	fetch c03 into
		c03_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		null;
		end;
	end loop;
	close c03;

	open c04;
	loop
	fetch c04 into
		c04_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
		null;
		end;
	end loop;
	close c04;

	open c05;
	loop
	fetch c05 into
		c05_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
		begin
		null;
		end;
	end loop;
	close c05;

	open c06;
	loop
	fetch c06 into
		c06_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		begin
		null;
		end;
	end loop;
	close c06;

	open c07;
	loop
	fetch c07 into
		c07_w;
	EXIT WHEN NOT FOUND; /* apply on c07 */
		begin
		null;
		end;
	end loop;
	close c07;

	open c08;
	loop
	fetch c08 into
		c08_w;
	EXIT WHEN NOT FOUND; /* apply on c08 */
		begin
		null;
		end;
	end loop;
	close c08;

	open c09;
	loop
	fetch c09 into
		c09_w;
	EXIT WHEN NOT FOUND; /* apply on c09 */
		begin
		null;
		end;
	end loop;
	close c09;



	open c11;
	loop
	fetch c11 into
		c11_w;
	EXIT WHEN NOT FOUND; /* apply on c11 */
		begin
		null;
		end;
	end loop;
	close c11;

	open c12;
	loop
	fetch c12 into
		c12_w;
	EXIT WHEN NOT FOUND; /* apply on c12 */
		begin
		null;
		end;
	end loop;
	close c12;

	open c13;
	loop
	fetch c13 into
		c13_w;
	EXIT WHEN NOT FOUND; /* apply on c13 */
		begin
		null;
		end;
	end loop;
	close c13;

	open c14;
	loop
	fetch c14 into
		c14_w;
	EXIT WHEN NOT FOUND; /* apply on c14 */
		begin
		null;
		end;
	end loop;
	close c14;

	open c15;
	loop
	fetch c15 into
		c15_w;
	EXIT WHEN NOT FOUND; /* apply on c15 */
		begin
		null;
		end;
	end loop;
	close c15;

	open c16;
	loop
	fetch c16 into
		c16_w;
	EXIT WHEN NOT FOUND; /* apply on c16 */
		begin
		null;
		end;
	end loop;
	close c16;

	open c17;
	loop
	fetch c17 into
		c17_w;
	EXIT WHEN NOT FOUND; /* apply on c17 */
		begin
		null;
		end;
	end loop;
	close c17;

	open c18;
	loop
	fetch c18 into
		c18_w;
	EXIT WHEN NOT FOUND; /* apply on c18 */
		begin
		null;
		end;
	end loop;
	close c18;

	open c19;
	loop
	fetch c19 into
		c19_w;
	EXIT WHEN NOT FOUND; /* apply on c19 */
		begin
		null;
		end;
	end loop;
	close c19;

	open c20;
	loop
	fetch c20 into
		c20_w;
	EXIT WHEN NOT FOUND; /* apply on c20 */
		begin
		null;
		end;
	end loop;
	close c20;

	open c21;
	loop
	fetch c21 into
		c21_w;
	EXIT WHEN NOT FOUND; /* apply on c21 */
		begin
		null;
		end;
	end loop;
	close c21;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/


	rollback;

	update  intpd_fila_transmissao
	set ie_status = 'E',
	    ds_log = ds_erro_w
	where   nr_sequencia = nr_sequencia_p;
	end;
else
	update	intpd_fila_transmissao
	set	ie_status		= coalesce(ie_status_w,'S'),
		ie_response_procedure	= 'S',
		nr_doc_externo		= nr_doc_externo_w
	where	nr_sequencia		= nr_sequencia_p;
end if;
reg_integracao_w := gerar_int_padrao.gravar_log(reg_integracao_w);
exception
when others then
	ds_erro_w   :=  substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

	dbms_application_info.set_action('');
	rollback;
	update	intpd_fila_transmissao
	set	ie_status		= 'E',
		ie_response_procedure	= 'S',
		ds_log			= ds_erro_w
	where	nr_sequencia		= nr_sequencia_p;
end;
end if;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;
commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_buspartner_pck.buspartner_get_detail_resp ( nr_sequencia_p bigint) FROM PUBLIC;
