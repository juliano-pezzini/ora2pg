-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_env_aviso_ven_doc_pres_pck.envia_emails () AS $body$
BEGIN
        for i in 1..qt_lista_w loop
                CALL pls_env_aviso_ven_doc_pres_pck.enviar_email_paginado(  lista_email[i].nr_seq_prestador,
                                        lista_email[i].ds_assunto,
                                        lista_email[i].ds_cabecalho,
                                        lista_email[i].ds_email_origem,
                                        lista_email[i].ds_email,
                                        lista_email[i].tb_mensagem,
                                        lista_email[i].qt_tamanho_pag,
                                        lista_email[i].nm_usuario);
		commit;
        end loop;
end;

begin

-- Cursor com as regras de aviso
for r_c01_w in c01 loop
	-- Cursor com as regras de dias e frequencia de aviso
	for r_c02_w in c02(r_c01_w.nr_sequencia) loop
		-- Limpa as variaveis de mensagens
		ds_lista_documento_w := null;
		ds_lista_qualifica_w := null;
		
		-- Adiciona os campos para um type afim de enviar para as restricoes do select
		dados_regra_aviso_w.nr_sequencia 		:= r_c01_w.nr_sequencia;
		dados_regra_aviso_w.qt_dia_antecedente 		:= r_c02_w.qt_dia_antecedente;
		dados_regra_aviso_w.ie_aviso_continuo 		:= r_c02_w.ie_aviso_continuo;
		dados_regra_aviso_w.nr_seq_prestador 		:= r_c02_w.nr_seq_prestador;
		dados_regra_aviso_w.nr_seq_tipo_documento	:= r_c02_w.nr_seq_tipo_documento;
		dados_regra_aviso_w.ie_acreditacao 		:= r_c02_w.ie_acreditacao;
		dados_regra_aviso_w.ie_aviso_continuo_pos    	:= r_c02_w.ie_aviso_continuo_pos;
		dados_regra_aviso_w.nr_seq_grupo_prestador	:= r_c02_w.nr_seq_grupo_prestador;
		dados_regra_aviso_w.nr_seq_prest_tipo_prest	:= r_c02_w.nr_seq_prest_tipo_prest;
		
		if (r_c01_w.ie_tipo_vencimento = 'D') then -- Alerta vencimento de documento
			-- Monta o sql do cursor que vai fazer a contagem dos documentos
			bind_sql_valor_w := pls_env_aviso_ven_doc_pres_pck.retorna_sql_cursor_documento(dados_regra_aviso_w, bind_sql_valor_w);
			bind_sql_valor_w := sql_pck.executa_sql_cursor(sql_cursor_w, bind_sql_valor_w);
			ie_enviar_w := 'N';
			
			i := 0;
			tb_mensagem_w.delete;
			ds_lista_documento_w := '';
			ds_cabecalho_w := r_c01_w.ds_mensagem || pls_util_pck.enter_w || 'Lista de documentos:'|| pls_util_pck.enter_w;
			
			-- Se trouxe resultado do cursor armazena na variavel de quantidade
			if (cursor_documento_w%isopen) then
				loop
					fetch	cursor_documento_w
					into	nr_seq_prestador_w, dt_fim_vigencia_w, nr_documento_w, nm_doc_w, nr_seq_doc_w;
					EXIT WHEN NOT FOUND; /* apply on cursor_documento_w */
					ie_enviar_w := 'S';
					
					-- Verifica se deve gerar notificacao para o portal
					if (r_c01_w.ie_portal = 'S') then
						
						-- Quando ja possuir notififcacao pendente para o mesmo documento, nao gera novamente.
						ie_possui_notific_portal_w := pls_env_aviso_ven_doc_pres_pck.obter_dados_prest_tipo_doc(nr_seq_doc_w, r_c02_w.nr_seq_com_prest_dest, 'NT');
						
						if (ie_possui_notific_portal_w = 'N') then
							
							CALL pls_env_aviso_ven_doc_pres_pck.gerar_notificacao_portal(nr_seq_doc_w, r_c01_w.ds_mensagem, r_c02_w.nr_seq_com_prest_dest, nm_usuario_p);
						end if;
					end if; -- Fim se gera notificacao para o portal
					
					ds_lista_documento_w := substr(	ds_lista_documento_w || pls_util_pck.enter_w ||
									pls_util_pck.enter_w || 
									'Prestador: ' || nr_seq_prestador_w || ' - ' || pls_obter_dados_prestador(nr_seq_prestador_w, 'N') || pls_util_pck.enter_w || 
									'Fantasia: ' || pls_obter_dados_prestador(nr_seq_prestador_w, 'NF') || pls_util_pck.enter_w || 
									wheb_mensagem_pck.get_texto(1106850) /*Endereco:*/
 || ' ' || pls_obter_end_prestador(nr_seq_prestador_w,null, null), 1, 32000);
									
					ds_lista_documento_w := substr(	ds_lista_documento_w || pls_util_pck.enter_w ||
									'Dt vencimento: ' || dt_fim_vigencia_w || pls_util_pck.enter_w || 
									'Nr Documento: ' || nr_documento_w || ' - '  || nm_doc_w, 1, 32000);
									
					-- joga na lista e apaga a mensagem
					tb_mensagem_w(i) := ds_lista_documento_w;
					ds_lista_documento_w := '';
					i := i +1;
					
				end loop;
				close cursor_documento_w;
			end if;
			
			
		elsif (r_c01_w.ie_tipo_vencimento = 'Q') then -- Alerta vencimento de qualificacao
			-- Monta o sql do cursor que vai fazer a contagem das qualificacoes
			bind_sql_valor_w := pls_env_aviso_ven_doc_pres_pck.retorna_sql_cursor_qualifica(dados_regra_aviso_w, bind_sql_valor_w);
			bind_sql_valor_w := sql_pck.executa_sql_cursor(sql_cursor_w, bind_sql_valor_w);
			ie_enviar_w := 'N';
			
			i := 0;
			tb_mensagem_w.delete;
			ds_lista_documento_w := '';
			ds_cabecalho_w := r_c01_w.ds_mensagem || pls_util_pck.enter_w || wheb_mensagem_pck.get_texto(1106879) /*Lista de qualificacoes:*/
 || pls_util_pck.enter_w;
			
			-- Se trouxe resultado do cursor armazena na variavel de quantidade
			if (cursor_qualifica_w%isopen) then
				loop
					fetch	cursor_qualifica_w
					into	nr_seq_prestador_w, dt_fim_vigencia_w, ds_acreditacao_w;
					EXIT WHEN NOT FOUND; /* apply on cursor_qualifica_w */
					ie_enviar_w := 'S';
					
					ds_lista_qualifica_w := ds_lista_qualifica_w || pls_util_pck.enter_w ||
								pls_util_pck.enter_w || 
								'Prestador: ' || nr_seq_prestador_w || ' - ' || pls_obter_dados_prestador(nr_seq_prestador_w, 'N') || pls_util_pck.enter_w || 
								'Dt vencimento: ' || dt_fim_vigencia_w || pls_util_pck.enter_w || 
								wheb_mensagem_pck.get_texto(1106851) /*Acreditacao*/
 || ': ' || ds_acreditacao_w;
								
					-- joga na lista e apaga a mensagem
					tb_mensagem_w(i) := ds_lista_qualifica_w;
					ds_lista_qualifica_w := '';
					i := i +1;
				end loop;
				close cursor_qualifica_w;
			end if;
			
		end if;
		
		-- Se encontrou documento, busca quem deve avisar
		if (ie_enviar_w = 'S') then
			-- Envio de e-mail
			if (r_c02_w.ie_email = 'S') then
				-- Carrega o email do usuario de origem do e-mail
				select	max(ds_email)
				into STRICT	ds_email_origem_w
				from	usuario
				where	nm_usuario = r_c01_w.nm_usuario;
				
				-- Se a regra for por perfil
				if (r_c02_w.cd_perfil IS NOT NULL AND r_c02_w.cd_perfil::text <> '') then
					-- Varre todos os usuarios do perfil
					for r_c03_w in c03(r_c02_w.cd_perfil) loop
						CALL pls_env_aviso_ven_doc_pres_pck.enviar_email_paginado(	nr_seq_prestador_w,
									r_c01_w.ds_assunto,
									ds_cabecalho_w,
									ds_email_origem_w,
									r_c03_w.ds_email,
									tb_mensagem_w,
									qt_tamanho_paginacao_w,
									r_c01_w.nm_usuario);
						commit;
					end loop;
					
				-- Se a regra for por usuario
				elsif (r_c02_w.nm_usuario_dest IS NOT NULL AND r_c02_w.nm_usuario_dest::text <> '') then
					select	max(ds_email)
					into STRICT	ds_email_usuario_w
					from	usuario
					where	nm_usuario = r_c02_w.nm_usuario_dest;
					
					CALL pls_env_aviso_ven_doc_pres_pck.enviar_email_paginado(	nr_seq_prestador_w,
								r_c01_w.ds_assunto,
								ds_cabecalho_w,
								ds_email_origem_w,
								ds_email_usuario_w,
								tb_mensagem_w,
								qt_tamanho_paginacao_w,
								r_c01_w.nm_usuario);
					commit;
					
				-- Se a regra for por 'Prestador' ou por 'Tipo de prestador'
				elsif (nr_seq_prestador_w IS NOT NULL AND nr_seq_prestador_w::text <> '') then
					select	pls_obter_dados_prestador(nr_seq_prestador_w, 'M'),
						pls_obter_dados_prestador(nr_seq_prestador_w, 'TE')
					into STRICT	ds_email_prestador_w,
						ie_tipo_endereco_w
					;
					
					if (ie_tipo_endereco_w = 'PFC') then
						select 	coalesce(max(b.ds_email), ds_email_prestador_w)
						into STRICT	ds_email_prestador_w
						from	compl_pessoa_fisica	b,
							pls_prestador		a
						where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
						and	b.ie_tipo_complemento 	= '2'
						and	a.nr_sequencia		= nr_seq_prestador_w;
					end if;
					
					CALL pls_env_aviso_ven_doc_pres_pck.enviar_email_paginado(	nr_seq_prestador_w,
								r_c01_w.ds_assunto,
								ds_cabecalho_w,
								ds_email_origem_w,
								ds_email_prestador_w,
								tb_mensagem_w,
								qt_tamanho_paginacao_w,
								r_c01_w.nm_usuario);
					commit;
					
					-- OS 1839499 - jcsonaglio - Enviar e-mail para o prestador quando campo estiver selecionado
					if (r_c02_w.ie_email_acess_web = 'S') then					
                                                for r_c04_w in c04(nr_seq_prestador_w) loop							
                                                        CALL pls_env_aviso_ven_doc_pres_pck.insere_envio(   nr_seq_prestador_w,
                                                                        r_c01_w.ds_assunto,
									ds_cabecalho_w,
									ds_email_origem_w,
									r_c04_w.ds_email,
									tb_mensagem_w,
									qt_tamanho_paginacao_w,
									r_c01_w.nm_usuario);
                                                end loop;
						
					end if;
				end if;
			end if;
			
			-- Envio de comunicacao interna
			if (r_c02_w.ie_comunic_interna = 'S') then
				CALL pls_env_aviso_ven_doc_pres_pck.enviar_comunic_paginado(r_c01_w.ds_assunto,
							ds_cabecalho_w,
							tb_mensagem_w,
							r_c02_w.cd_perfil,
							r_c01_w.nm_usuario,
							r_c02_w.nm_usuario_dest,
							qt_tamanho_paginacao_w);
				
				commit;
			end if;
		end if;
	end loop;
end loop;

if (qt_lista_w > 0) then
	CALL pls_env_aviso_ven_doc_pres_pck.envia_emails();
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_env_aviso_ven_doc_pres_pck.envia_emails () FROM PUBLIC;
