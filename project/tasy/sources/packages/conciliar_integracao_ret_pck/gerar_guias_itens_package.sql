-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE conciliar_integracao_ret_pck.gerar_guias_itens () AS $body$
DECLARE


_ora2pg_r RECORD;
nr_seq_ret_item_w	convenio_retorno_item.nr_sequencia%type;
ie_status_retorno_w	convenio_retorno.ie_status_retorno%type;
dt_pagamento_retorno_w	convenio_retorno.dt_pagamento%type;
qt_pagto_recurso_w	integer := 0;
BEGIN
	-- Se existir algum protocolo.
	if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v.count > 0) then

		for i in current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v.first .. current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v.last loop

			select	max(a.ie_status_retorno),
				max(a.dt_pagamento)
			into STRICT	ie_status_retorno_w,
				dt_pagamento_retorno_w
			from	convenio_retorno a
			where	a.nr_sequencia = current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].nr_seq_retorno_conv;

			-- Log do protocolo.
			-- conciliar_integracao_ret_pck.exibir_dados_protocolo(protocolos_w(i));
			-- Somente protocolos conciliados.
			if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].ie_status = 'C') and (coalesce(ie_status_retorno_w,'F') = 'R') then
				-- Se o protocolo possuir alguma conta.
				if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas.count > 0) then
					for j in current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas.first .. current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas.last loop

						-- Log da conta.
						-- conciliar_integracao_ret_pck.exibir_dados_conta(protocolos_w(i).contas(j));
						-- Somente contas conciliadas.
						if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).ie_status = 'C') then
							select	nextval('convenio_retorno_item_seq')
							into STRICT	nr_seq_ret_item_w
							;

							current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).nr_seq_ret_conv 	:= current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].nr_seq_retorno_conv; 							
							current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).nr_seq_ret_item 	:= nr_seq_ret_item_w;
							current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).dt_pagamento 		:= dt_pagamento_retorno_w;

							if 	current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j)coalesce(.ie_tipo_pagamento::text, '') = '' then

								select  count(*)
								into STRICT	qt_pagto_recurso_w
								from    imp_dem_ret_item
								where   nr_seq_dem_ret_guia = current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).nr_sequencia
								and     ie_tipo_pagamento = 'R';

								if	qt_pagto_recurso_w > 0 then
									current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).ie_tipo_pagamento := 'R';
								else
									current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).ie_tipo_pagamento := 'P';
								end if;
							end if;
							-- Gerar registro na CONVENIO_RETORNO_ITEM.
							SELECT * FROM conciliar_integracao_ret_pck.gerar_convenio_retorno_item(current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j), nr_seq_ret_item_w) INTO STRICT _ora2pg_r;
 current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j) := _ora2pg_r.conta_w; nr_seq_ret_item_w := _ora2pg_r.nr_seq_conv_item_p;

							-- Se a conta possuir algum item.
							DBMS_APPLICATION_INFO.SET_ACTION('INSERT_INTERFACE_PCK');
							if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta.count > 0) then
								for k in current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta.first .. current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta.last loop

									-- Log do item.										
									-- conciliar_integracao_ret_pck.exibir_dados_item(protocolos_w(i).contas(j).itens_conta(k));
									-- Somente itens conciliados.
									if (current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta[k].ie_status = 'C') then 		

										current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta[k].nr_seq_ret_item := nr_seq_ret_item_w;

										-- Gerar registro na CONVENIO_RETORNO_GLOSA.
										current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta(k) := conciliar_integracao_ret_pck.gerar_convenio_retorno_glosa(current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].contas(j).itens_conta(k));

									end if;
								end loop;
							end if;
							DBMS_APPLICATION_INFO.SET_ACTION(null);
						end if;
					end loop;
					CALL conciliar_integracao_ret_pck.desdobrar_pagamento_recurso(current_setting('conciliar_integracao_ret_pck.protocolos_w')::protocolo_v[i].nr_seq_retorno_conv);
				end if;
			end if;
		end loop;
	end if;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE conciliar_integracao_ret_pck.gerar_guias_itens () FROM PUBLIC;
