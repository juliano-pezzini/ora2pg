-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE conciliar_integracao_ret_pck.gerar_convenio_retorno_item ( conta_w INOUT conta, nr_seq_conv_item_p INOUT convenio_retorno_item.nr_sequencia%type ) AS $body$
DECLARE


nr_seq_ret_conv_w	convenio_retorno.nr_sequencia%type;
nr_seq_ret_item_w	convenio_retorno_item.nr_sequencia%type;

vl_adicional_w		convenio_retorno_item.vl_adicional%type;
vl_amenor_w		convenio_retorno_item.vl_amenor%type;
vl_glosado_w		convenio_retorno_item.vl_glosado%type;
vl_pago_w		convenio_retorno_item.vl_pago%type;

nr_seq_ret_item_exist_w convenio_retorno_item.nr_sequencia%type;

dt_pagamento_ret_w	convenio_retorno_item.dt_pagamento%type;

nr_titulo_w		titulo_receber.nr_titulo%type;

vl_guia_w		conta_paciente_guia.vl_guia%type;
BEGIN	

	vl_pago_w := 0;
	vl_amenor_w := 0;
	vl_adicional_w := 0;
	vl_glosado_w := 0;

	select 	max(nr_sequencia)
	into STRICT	nr_seq_ret_item_exist_w
	from	convenio_retorno_item
	where	nr_interno_conta 	= conta_w.nr_interno_conta
	and	cd_autorizacao 	 	= conta_w.cd_autorizacao
	and	nr_seq_retorno		= conta_w.nr_seq_ret_conv;


	begin
		select	max(nr_titulo)
		into STRICT	nr_titulo_w
		from	titulo_receber
		where	nr_interno_conta = conta_w.nr_interno_conta;

		if 	coalesce(nr_titulo_w::text, '') = '' then

			select	max(nr_titulo)
			into STRICT	nr_titulo_w
			from	titulo_receber
			where	nr_seq_protocolo = 	(
							SELECT 	x.nr_seq_protocolo
							from 	conta_paciente x 
							where 	x.nr_interno_conta = conta_w.nr_interno_conta
							);

		end if;

	exception
	when others then
		nr_titulo_w := null;
	end;

	select	max(vl_guia)
	into STRICT	vl_guia_w
	from	conta_paciente_guia
	where	nr_interno_conta 	= conta_w.nr_interno_conta
	and	cd_autorizacao 		= conta_w.cd_autorizacao;

	-- Se for nulo, o registro ainda nao foi criado. 
	-- Nesse caso, gerar o registro normalmente.
	if (coalesce(nr_seq_ret_item_exist_w::text, '') = '') then

		nr_seq_ret_item_w	:= conta_w.nr_seq_ret_item;
		nr_seq_ret_conv_w	:= conta_w.nr_seq_ret_conv;
		nr_seq_conv_item_p 	:= conta_w.nr_seq_ret_item;
		dt_pagamento_ret_w	:= conta_w.dt_pagamento;

		vl_pago_w := 0;
		vl_amenor_w := 0;

		if (conta_w.itens_conta.count > 0) then
			-- Somar valor a menor e valor dos itens com status 'C'
			for i in conta_w.itens_conta.first .. conta_w.itens_conta.last loop				
				if (conta_w.itens_conta[i].ie_status = 'C') then

					vl_pago_w := vl_pago_w + conta_w.itens_conta[i].vl_liberado;
					vl_amenor_w := vl_amenor_w + conta_w.itens_conta[i].vl_glosado;

				end if;

			end loop;
		end if;

		vl_adicional_w := 0;		
		vl_glosado_w := 0;

		if vl_pago_w > conta_w.vl_guia then
			vl_adicional_w := vl_pago_w - conta_w.vl_guia;
			vl_pago_w := conta_w.vl_guia;
		end if;
        if (current_setting('conciliar_integracao_ret_pck.ie_opcao_w')::varchar(2) = 'V') then
            conta_w.ie_status := 'V';
        else
           begin
                insert into convenio_retorno_item(
                    cd_autorizacao,
                    dt_atualizacao,
                    ie_analisada,
                    ie_glosa,
                    nm_usuario,
                    nr_seq_retorno,
                    nr_sequencia,
                    vl_adicional,
                    vl_amenor,
                    vl_glosado,
                    vl_pago,
                    nr_interno_conta,
                    dt_integracao,
                    dt_pagamento,
                    ie_tipo_pagamento,
                    nr_titulo,
                    vl_guia
                    )
                    values (
                    conta_w.cd_autorizacao,
                    clock_timestamp(),
                    current_setting('conciliar_integracao_ret_pck.ie_analisada_const_w')::convenio_retorno_item.ie_analisada%type,
                    current_setting('conciliar_integracao_ret_pck.ie_glosa_const_w')::convenio_retorno_item.ie_glosa%type,
                    current_setting('conciliar_integracao_ret_pck.nm_usuario_const_w')::convenio_retorno.nm_usuario%type,
                    nr_seq_ret_conv_w,
                    nr_seq_ret_item_w,
                    vl_adicional_w,
                    vl_amenor_w,
                    vl_glosado_w,
                    vl_pago_w,
                    conta_w.nr_interno_conta,
                    clock_timestamp(),
                    dt_pagamento_ret_w,
                    conta_w.ie_tipo_pagamento,
                    nr_titulo_w,
                    vl_guia_w);
            exception
            when others then			
                conta_w.ds_erro := SQLSTATE || ' - ' || sqlerrm;
                conta_w.ie_status := 'E'; -- Erro.
            end;
        end if;
	else
	-- Se nao for nulo, ja existe um registro com a conta no CONVENIO_RETORNO_ITEM.
	-- Nesse caso, vamos simplesmente atualizar os valores agrupados.
		nr_seq_conv_item_p := nr_seq_ret_item_exist_w;

		vl_pago_w := 0;
		vl_amenor_w := 0;
		if (conta_w.itens_conta.count > 0) then
			-- Somar valor a menor e valor dos itens com status 'C'
			for i in conta_w.itens_conta.first .. conta_w.itens_conta.last loop

				if (conta_w.itens_conta[i].ie_status = 'C') then

					vl_pago_w := vl_pago_w + conta_w.itens_conta[i].vl_liberado;
					vl_amenor_w := vl_amenor_w + conta_w.itens_conta[i].vl_glosado;

				end if;

			end loop;
		end if;

		vl_glosado_w := 0;
		vl_adicional_w := 0;

		begin

			select (vl_pago + vl_pago_w),
				(vl_amenor + vl_amenor_w),
				(vl_glosado + vl_glosado_w),
				(vl_adicional + vl_adicional_w)
			into STRICT	vl_pago_w,
				vl_amenor_w,
				vl_glosado_w,
				vl_adicional_w
			from	convenio_retorno_item
			where	nr_sequencia 	= nr_seq_ret_item_exist_w;

			if (vl_pago_w > conta_w.vl_guia) then
				vl_adicional_w := vl_pago_w - conta_w.vl_guia;
				vl_pago_w := conta_w.vl_guia;
			elsif (vl_pago_w < conta_w.vl_guia) then
				vl_amenor_w := conta_w.vl_guia - vl_pago_w;
			end if;

			update	convenio_retorno_item
			set	vl_pago = vl_pago_w,
				vl_glosado = vl_glosado_w,
				vl_amenor = vl_amenor_w,
				vl_adicional = vl_adicional_w,
				dt_integracao = clock_timestamp()
			where 	nr_sequencia = nr_seq_ret_item_exist_w;

		exception
		when others then			
			conta_w.ds_erro := sqlerrm;
			conta_w.ie_status := 'E'; -- Erro.
		end;
	end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE conciliar_integracao_ret_pck.gerar_convenio_retorno_item ( conta_w INOUT conta, nr_seq_conv_item_p INOUT convenio_retorno_item.nr_sequencia%type ) FROM PUBLIC;
