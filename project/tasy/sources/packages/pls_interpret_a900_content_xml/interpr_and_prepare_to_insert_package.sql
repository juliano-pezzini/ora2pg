-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_interpret_a900_content_xml.interpr_and_prepare_to_insert ( ds_content_file_p w_pls_mat_unimed_xml.ds_arquivo%type, nm_usuario_p usuario.nm_usuario%type, error_p INOUT text ) AS $body$
DECLARE


-- Variables
/*tab_to_exec_procedure_w     tab_to_exec_procedure;
index_to_exec_procedure_w   pls_integer;*/
tab_mat_med_w       tab_mat_med;
ind_mat_med_w       integer;
tab_mat_simpro_w    tab_mat_simpro;
ind_mat_simpro_w    integer;
tab_med_icms_w      tab_med_icms;
ind_med_icms_w      integer;
tab_med_bras_w      tab_med_bras;
ind_med_bras_w      integer;

dt_exclusao_w	    timestamp;
qt_902_w			bigint := 0;
qt_905_w			bigint := 0;
cd_unidade_w		varchar(30);
ie_possui_mat_w     smallint;
error_aux_w         varchar(4000);

-- Cursors
c_createXmlStructure CURSOR(   ds_content_file_pc  w_pls_mat_unimed_xml.ds_arquivo%type ) FOR
    SELECT  xml.createxml(ds_content_file_pc) ds_xml_file
    from    ptu_aviso_arq_xml;

c_header CURSOR(   ds_xml_file_pc  xml ) FOR
    SELECT  *
	from    xmltable( '/mensagemPTUBatch/cabecalhoTransacao' passing ds_xml_file_pc columns
                numeroSequencial        integer       path 'numeroSequencial',
                tipoRegistro            varchar(3)		path 'tipoRegistro',
                codUnimedOrigem         smallint		path 'codUnimedOrigem',
                dataGeracao             varchar(32)    path 'dataGeracao',
                numeroVersaoTransacao   varchar(2)     path 'numeroVersaoTransacao' );

c_a900 CURSOR( ds_xml_file_pc  xml ) FOR
    SELECT  *
	from    xmltable( '/mensagemPTUBatch/corpoMensagem/A900' passing ds_xml_file_pc columns
                tipoCarga           smallint   path 'tipoCarga',
                materiais           xml     path 'materiais',
                medicamentos        xml     path 'medicamentos',
                quantidadeTotalR902 integer   path 'quantidadeTotalR902',
                quantidadeTotalR905 integer   path 'quantidadeTotalR905' );

c_materiais CURSOR(    ds_materiais_pc  xml ) FOR
	SELECT	*
	from	xmltable( '/materiais' passing ds_materiais_pc columns
                numeroSequencial        integer   path 'numeroSequencial',
                tipoRegistro            varchar(3) path 'tipoRegistro',
                material			    xml		path 'material',
                fabricanteImportador    xml		path 'fabricanteImportador',
                registroAnvisa          xml		path 'registroAnvisa',
                situacao                xml		path 'situacao',
                simpro                  xml		path 'simpro' );

c_material CURSOR( xml_material_pc xml ) FOR
	SELECT	*
	from	xmltable( '/material' passing xml_material_pc columns
                codMaterial                         integer       path 'codMaterial',
                unidadeFracaoProduto                varchar(16)    path 'unidadeFracaoProduto',
                descricaoOrigem                     smallint       path 'descricaoOrigem',
                valorFabrica                        varchar(20)    path 'valorFabrica',
                valorMaximoIntercambio              varchar(20)    path 'valorMaximoIntercambio',
                dataInicioObrigatoriedade           varchar(32)    path 'dataInicioObrigatoriedade',
                codRefMatFab                        varchar(30)    path 'codRefMatFab',
                codAnteriorMat                      integer       path 'codAnteriorMat',
                nomeComercialProduto                varchar(4000)  path 'nomeComercialProduto',
                descricaoProduto                    varchar(4000)  path 'descricaoProduto',
                descricaoEspecialidadeProduto       varchar(4000)  path 'descricaoEspecialidadeProduto',
                classificacaoProdutoConformeAn      varchar(4000)  path 'classificacaoProdutoConformeAnvisa',
                apresentacaoComercialProduto        varchar(4000)  path 'apresentacaoComercialProduto' );

c_fabricanteImportador CURSOR( xml_fabricanteImportador_pc xml ) FOR
	SELECT	*
	from	xmltable( '/fabricanteImportador' passing xml_fabricanteImportador_pc columns
                numeroCNPJ      varchar(14)    path 'numeroCNPJ',
                nomeFabricante  varchar(50)    path 'nomeFabricante',
                nomeImportador  varchar(50)    path 'nomeImportador' );

c_registroAnvisa CURSOR(   xml_registroAnvisa_pc   xml ) FOR
	SELECT	*
	from	xmltable( '/registroAnvisa' passing xml_registroAnvisa_pc columns
                registroAnvisa          varchar(10)    path 'registroAnvisa',
                numeroRegistroAnvisa    numeric(20)      path 'numeroRegistroAnvisa',
                dataValidadeAnvisa      varchar(32)    path 'dataValidadeAnvisa' );

c_situacao CURSOR( xml_situacao_pc xml ) FOR
	SELECT	*
	from	xmltable( '/situacao' passing xml_situacao_pc columns
                tipoSituacao                smallint       path 'tipoSituacao',
                descricaoMotivoAtivoInativo varchar(40)    path 'descricaoMotivoAtivoInativo' );

c_simpro CURSOR(   xml_simpro_pc   xml ) FOR
	SELECT	*
	from	xmltable( '/simpro' passing xml_simpro_pc columns
                numeroSequencial    integer       path 'numeroSequencial',
                tipoRegistro        varchar(3)     path 'tipoRegistro',
                codSimpro           varchar(10)    path 'codSimpro',
                descProdSimpro      varchar(100)   path 'descProdSimpro' );

c_medicamentos CURSOR( ds_medicamentos_pc  xml ) FOR
	SELECT	*
	from	xmltable( '/medicamentos' passing ds_medicamentos_pc columns
                numeroSequencial    integer       path 'numeroSequencial',
                tipoRegistro        varchar(3)     path 'tipoRegistro',
                medicamento         xml         path 'medicamento',
                registroAnvisa      xml         path 'registroAnvisa',
                situacao            xml         path 'situacao',
                fatorConversao      varchar(10)    path 'fatorConversao',
                valoresICMS         xml         path 'valoresICMS',
                brasindice          xml         path 'brasindice' );

c_medicamento CURSOR(  xml_medicamento_pc xml ) FOR
	SELECT	*
	from	xmltable( '/medicamento' passing xml_medicamento_pc columns
                codMedicamento                  integer       path 'codMedicamento',
                unidadeFracaoProduto            varchar(16)    path 'unidadeFracaoProduto',
                descricaoOrigem                 smallint       path 'descricaoOrigem',
                cnpjFabricanteImportador        varchar(14)    path 'cnpjFabricanteImportador',
                indicaGenerico                  varchar(1)     path 'indicaGenerico',
                dataInicioObrigatoriedade       varchar(32)    path 'dataInicioObrigatoriedade',
                codAnteriorMed                  integer       path 'codAnteriorMed',
                descricaoPrincipioAtivo         varchar(4000)  path 'descricaoPrincipioAtivo',
                nomeApresentacaoComercial       varchar(4000)  path 'nomeApresentacaoComercial',
                descricaoGrupoFarmacologico     varchar(4000)  path 'descricaoGrupoFarmacologico',
                descricaoClasseFarmacologica    varchar(4000)  path 'descricaoClasseFarmacologica',
                descricaoFormaFarmaceutica      varchar(4000)  path 'descricaoFormaFarmaceutica',
                nomeFabricanteProduto           varchar(4000)  path 'nomeFabricanteProduto' );

c_valoresICMS CURSOR(  xml_valoresICMS_pc  xml ) FOR
	SELECT	*
	from	xmltable( '/valoresICMS' passing xml_valoresICMS_pc columns
                numeroSequencial    integer       path 'numeroSequencial',
                tipoRegistro        varchar(3)     path 'tipoRegistro',
                valorICMS           xml         path 'valorICMS' );

c_valorICMS CURSOR(    xml_valorICMS_pc    xml ) FOR
	SELECT	*
	from	xmltable( '/valorICMS' passing xml_valorICMS_pc columns
                valorPercentualICMS         varchar(8)     path 'valorPercentualICMS',
                valorPrecoMaximoIntercambio varchar(20)    path 'valorPrecoMaximoIntercambio',
                taxaCustoLogistico          smallint       path 'taxaCustoLogistico' );

c_brasindice CURSOR(   xml_brasindice_pc   xml ) FOR
	SELECT	*
	from	xmltable( '/brasindice' passing xml_brasindice_pc columns
                numeroSequencial    integer       path 'numeroSequencial',
                tipoRegistro        varchar(3)     path 'tipoRegistro',
                codBrasindice       varchar(12)    path 'codBrasindice',
                desProduto          varchar(100)   path 'desProduto',
                desApresentacao     varchar(200)   path 'desApresentacao' );
BEGIN

for r_createXmlStructure_w in c_createXmlStructure( ds_content_file_p ) loop
    for r_a900_w in c_a900( r_createXmlStructure_w.ds_xml_file ) loop
        if (    r_a900_w.tipoCarga = 3 ) then
            for r_header_w in c_header( r_createXmlStructure_w.ds_xml_file ) loop
                dt_exclusao_w := coalesce(to_date(trim(both substr(r_header_w.dataGeracao,1,10)),'yyyy/mm/dd'),clock_timestamp());
            end loop;
        else
            dt_exclusao_w := clock_timestamp();
        end if;
        for r_materiais_w in c_materiais( r_a900_w.materiais ) loop
            ind_mat_med_w := tab_mat_med_w.count + 1;

            tab_mat_med_w[ind_mat_med_w].tipoCarga := r_a900_w.tipoCarga;
            tab_mat_med_w[ind_mat_med_w].dt_exclusao_w := dt_exclusao_w;
            tab_mat_med_w[ind_mat_med_w].nm_usuario_w := nm_usuario_p;

            tab_mat_med_w[ind_mat_med_w].ie_tipo_ww := r_materiais_w.tipoRegistro;

            /* The following lines doesn't exist in the xml xsd, just in the txt pattern. So I put
               the default values, Or I didn't initialyzed the variable. */
            tab_mat_med_w[ind_mat_med_w].dt_inicio_vigencia_w := null;
            tab_mat_med_w[ind_mat_med_w].dt_fim_vigencia_w := null;
            tab_mat_med_w[ind_mat_med_w].dt_fim_implantacao_w := null;
            tab_mat_med_w[ind_mat_med_w].vl_preco_unico_w := 0;
            -- tab_mat_med_w(ind_mat_med_w).tp_produto_w := ;
            -- tab_mat_med_w(ind_mat_med_w).tp_codificacao_w := ;
            -- tab_mat_med_w(ind_mat_med_w).ds_unidade_medida_w := 
            -- tab_mat_med_w(ind_mat_med_w).vl_tc_w := 
            -- tab_mat_med_w(ind_mat_med_w).nm_tecnico := 
            -- tab_mat_med_w(ind_mat_med_w).ds_observacao := 
            -- tab_mat_med_w(ind_mat_med_w).ds_equiv_tecnica := 
            if (    length(error_aux_w) < 4000 ) then
                error_aux_w := substr(error_aux_w || 'numeroSequencial: ' || r_materiais_w.numeroSequencial || chr(13), 1, 4000);
            end if;
            for r_material_w in c_material( r_materiais_w.material ) loop
                tab_mat_med_w[ind_mat_med_w].cd_mat_med_w := r_material_w.codMaterial;
                tab_mat_med_w[ind_mat_med_w].cd_unidade_medida_w := r_material_w.unidadeFracaoProduto;
                tab_mat_med_w[ind_mat_med_w].vl_fabrica_w := replace(r_material_w.valorFabrica, '.', ',');
                tab_mat_med_w[ind_mat_med_w].vl_max_consumidor_w := replace(r_material_w.valorMaximoIntercambio, '.', ',');
                tab_mat_med_w[ind_mat_med_w].dt_inicio_obrigatorio_w := coalesce(to_date(trim(both substr(r_material_w.dataInicioObrigatoriedade,1,10)),'yyyy/mm/dd'),clock_timestamp());
                tab_mat_med_w[ind_mat_med_w].cd_anterior_material_w := r_material_w.codAnteriorMat;
                tab_mat_med_w[ind_mat_med_w].cd_ref_material_fab_w := r_material_w.codRefMatFab;

                if (r_material_w.nomeComercialProduto IS NOT NULL AND r_material_w.nomeComercialProduto::text <> '') then
                    tab_mat_med_w[ind_mat_med_w].nm_material_w := r_material_w.nomeComercialProduto;
                else
                    tab_mat_med_w[ind_mat_med_w].nm_material_w := r_material_w.descricaoProduto;
                end if;

                if (r_material_w.descricaoProduto IS NOT NULL AND r_material_w.descricaoProduto::text <> '') then
                    tab_mat_med_w[ind_mat_med_w].ds_material_w := r_material_w.descricaoProduto;
                else
                    tab_mat_med_w[ind_mat_med_w].ds_material_w := r_material_w.nomeComercialProduto;
                end if;

                tab_mat_med_w[ind_mat_med_w].ds_especialidade_w := r_material_w.descricaoEspecialidadeProduto;
                tab_mat_med_w[ind_mat_med_w].ds_classe_w := r_material_w.classificacaoProdutoConformeAn;
                tab_mat_med_w[ind_mat_med_w].ds_classe_farmacologico_w := null;

                if (r_material_w.codAnteriorMat IS NOT NULL AND r_material_w.codAnteriorMat::text <> '') then
                    tab_mat_med_w[ind_mat_med_w].cd_material_tuss_w := r_material_w.codMaterial;
                end if;
            end loop;

            for r_fabricanteImportador_w in c_fabricanteImportador( r_materiais_w.fabricanteImportador ) loop
                tab_mat_med_w[ind_mat_med_w].cd_cnpj_w := r_fabricanteImportador_w.numeroCNPJ;

                if (r_fabricanteImportador_w.nomeFabricante IS NOT NULL AND r_fabricanteImportador_w.nomeFabricante::text <> '') then
                    tab_mat_med_w[ind_mat_med_w].nm_fabricante_w := r_fabricanteImportador_w.nomeFabricante;
                else
                    tab_mat_med_w[ind_mat_med_w].nm_fabricante_w := r_fabricanteImportador_w.nomeImportador;
                end if;
            end loop;

            for r_registroAnvisa_w in c_registroAnvisa( r_materiais_w.registroAnvisa ) loop
                if (    coalesce(r_registroAnvisa_w.registroAnvisa::text, '') = '' ) then
                    tab_mat_med_w[ind_mat_med_w].nr_registro_anvisa_w := r_registroAnvisa_w.numeroRegistroAnvisa;
                end if;
            end loop;

            for r_situacao_w in c_situacao( r_materiais_w.situacao ) loop
                tab_mat_med_w[ind_mat_med_w].ds_motivo_ativo_inativo_w := r_situacao_w.descricaoMotivoAtivoInativo;
            end loop;

            ind_mat_simpro_w := 0;
            tab_mat_simpro_w.delete;
            for r_simpro_w in c_simpro( r_materiais_w.simpro ) loop
                ind_mat_simpro_w := tab_mat_simpro_w.count + 1;

                tab_mat_simpro_w[ind_mat_simpro_w].nm_usuario_w := nm_usuario_p;

                tab_mat_simpro_w[ind_mat_simpro_w].cd_simpro_w := r_simpro_w.codSimpro;
                tab_mat_simpro_w[ind_mat_simpro_w].ds_produto_simpro_w := r_simpro_w.descProdSimpro;
            end loop;

            if (    tab_mat_simpro_w.count > 0 ) then
                tab_mat_med_w[ind_mat_med_w].mat_simpro_w := tab_mat_simpro_w;
            end if;

            if (    tab_mat_med_w[ind_mat_med_w]coalesce(.dt_fim_vigencia_w::text, '') = '' or
                    tab_mat_med_w[ind_mat_med_w].dt_fim_vigencia_w > to_date(clock_timestamp(),'yyyy/mm/dd hh24:mi:ss') ) then
                tab_mat_med_w[ind_mat_med_w].ie_situacao_w := 'A';
            else
                tab_mat_med_w[ind_mat_med_w].ie_situacao_w := 'I';
            end if;

            qt_902_w := qt_902_w + 1;
        end loop;

        for r_medicamentos_w in c_medicamentos( r_a900_w.medicamentos ) loop
            ind_mat_med_w := tab_mat_med_w.count + 1;

            tab_mat_med_w[ind_mat_med_w].tipoCarga := r_a900_w.tipoCarga;
            tab_mat_med_w[ind_mat_med_w].dt_exclusao_w := dt_exclusao_w;
            tab_mat_med_w[ind_mat_med_w].nm_usuario_w := nm_usuario_p;

            tab_mat_med_w[ind_mat_med_w].ie_tipo_ww := r_medicamentos_w.tipoRegistro;

            if (r_medicamentos_w.fatorConversao IS NOT NULL AND r_medicamentos_w.fatorConversao::text <> '') then
                tab_mat_med_w[ind_mat_med_w].vl_fator_conversao_w := replace(r_medicamentos_w.fatorConversao, '.', ',');
            else
                tab_mat_med_w[ind_mat_med_w].vl_fator_conversao_w := 0;
            end if;

            /* The following lines doesn't exist in the xml xsd, just in the txt pattern. So I put
               the default values, Or I didn't initialyzed the variable. */
            tab_mat_med_w[ind_mat_med_w].dt_inicio_vigencia_w := null;
            tab_mat_med_w[ind_mat_med_w].dt_fim_vigencia_w := null;
            tab_mat_med_w[ind_mat_med_w].dt_fim_implantacao_w := null;
            -- tab_mat_med_w(ind_mat_med_w).tp_codificacao_w := ;
            -- tab_mat_med_w(ind_mat_med_w).ie_produto_med_w := ;
            -- tab_mat_med_w(ind_mat_med_w).ie_confaz_w := ;
            -- tab_mat_med_w(ind_mat_med_w).ds_unidade_medida_w := ;
            -- tab_mat_med_w(ind_mat_med_w).vl_tc_w := ;
            -- tab_mat_med_w(ind_mat_med_w).id_alc_w := ;
            if (    length(error_aux_w) < 4000 ) then
                error_aux_w := substr(error_aux_w || 'numeroSequencial: ' || r_medicamentos_w.numeroSequencial || chr(13), 1, 4000);
            end if;
            for r_medicamento_w in c_medicamento( r_medicamentos_w.medicamento ) loop
                tab_mat_med_w[ind_mat_med_w].cd_mat_med_w := r_medicamento_w.codMedicamento;
                tab_mat_med_w[ind_mat_med_w].cd_unidade_medida_w := r_medicamento_w.unidadeFracaoProduto;
                tab_mat_med_w[ind_mat_med_w].cd_cnpj_w := r_medicamento_w.cnpjFabricanteImportador;
                tab_mat_med_w[ind_mat_med_w].ie_generico_w := r_medicamento_w.indicaGenerico;
                tab_mat_med_w[ind_mat_med_w].cd_anterior_medicamento_w := r_medicamento_w.codAnteriorMed;
                tab_mat_med_w[ind_mat_med_w].ds_principio_ativo_w := r_medicamento_w.descricaoPrincipioAtivo;
                tab_mat_med_w[ind_mat_med_w].nm_material_w := r_medicamento_w.nomeApresentacaoComercial;
                tab_mat_med_w[ind_mat_med_w].ds_grupo_farmacologico_w := r_medicamento_w.descricaoGrupoFarmacologico;
                tab_mat_med_w[ind_mat_med_w].ds_classe_farmacologico_w := r_medicamento_w.descricaoClasseFarmacologica;
                tab_mat_med_w[ind_mat_med_w].ds_classe_w := null;
                tab_mat_med_w[ind_mat_med_w].ds_forma_farmaceutico_w := r_medicamento_w.descricaoFormaFarmaceutica;
                tab_mat_med_w[ind_mat_med_w].nm_fabricante_w := r_medicamento_w.nomeFabricanteProduto;

                if (r_medicamento_w.codAnteriorMed IS NOT NULL AND r_medicamento_w.codAnteriorMed::text <> '') then
                    tab_mat_med_w[ind_mat_med_w].cd_material_tuss_w := r_medicamento_w.codAnteriorMed;
                end if;
            end loop;

            for r_registroAnvisa_w in c_registroAnvisa( r_medicamentos_w.registroAnvisa ) loop
                if (    coalesce(r_registroAnvisa_w.registroAnvisa::text, '') = '' ) then
                    tab_mat_med_w[ind_mat_med_w].nr_registro_anvisa_w := r_registroAnvisa_w.numeroRegistroAnvisa;
                end if;
            end loop;

            for r_situacao_w in c_situacao( r_medicamentos_w.situacao ) loop
                tab_mat_med_w[ind_mat_med_w].ds_motivo_ativo_inativo_w := r_situacao_w.descricaoMotivoAtivoInativo;
            end loop;

            ind_med_icms_w := 0;
            tab_med_icms_w.delete;
            for r_valoresICMS_w in c_valoresICMS( r_medicamentos_w.valoresICMS ) loop
                for r_valorICMS_w in c_valorICMS( r_valoresICMS_w.valorICMS ) loop
                    ind_med_icms_w := tab_med_icms_w.count + 1;

                    tab_med_icms_w[ind_med_icms_w].nm_usuario_w := nm_usuario_p;

                    tab_med_icms_w[ind_med_icms_w].pr_icms_w := replace(r_valorICMS_w.valorPercentualICMS, '.', ',');
                    tab_med_icms_w[ind_med_icms_w].vl_pmc_w := replace(r_valorICMS_w.valorPrecoMaximoIntercambio, '.', ',');
                    tab_med_icms_w[ind_med_icms_w].vl_tcl_w := r_valorICMS_w.taxaCustoLogistico;
                end loop;
            end loop;

            if (    tab_med_icms_w.count > 0 ) then
                tab_mat_med_w[ind_mat_med_w].med_icms_w := tab_med_icms_w;
            end if;

            ind_med_bras_w := 0;
            tab_med_bras_w.delete;
            for r_brasindice_w in c_brasindice( r_medicamentos_w.brasindice ) loop
                ind_med_bras_w := tab_med_bras_w.count + 1;

                tab_med_bras_w[ind_med_bras_w].nm_usuario_w := nm_usuario_p;

                tab_med_bras_w[ind_med_bras_w].cd_brasindice_w := r_brasindice_w.codBrasindice;
                tab_med_bras_w[ind_med_bras_w].ds_produto_w := r_brasindice_w.desProduto;
                tab_med_bras_w[ind_med_bras_w].ds_apresentacao_bras_w := r_brasindice_w.desApresentacao;
            end loop;

            if (    tab_med_bras_w.count > 0 ) then
                tab_mat_med_w[ind_mat_med_w].med_bras_w := tab_med_bras_w;
            end if;

            if (    tab_mat_med_w[ind_mat_med_w]coalesce(.dt_fim_vigencia_w::text, '') = '' or
                    tab_mat_med_w[ind_mat_med_w].dt_fim_vigencia_w > to_date(clock_timestamp(),'yyyy/mm/dd hh24:mi:ss') ) then
                tab_mat_med_w[ind_mat_med_w].ie_situacao_w := 'A';
            else
                tab_mat_med_w[ind_mat_med_w].ie_situacao_w := 'I';
            end if;

            qt_905_w := qt_905_w + 1;
        end loop;
    end loop;
end loop;

if (    tab_mat_med_w.count > 0 ) then
    for index_1_w in tab_mat_med_w.first .. tab_mat_med_w.last loop
        if (    tab_mat_med_w[index_1_w](.cd_unidade_medida_w IS NOT NULL AND .cd_unidade_medida_w::text <> '') ) then
            select  max(cd_unidade_medida)
            into STRICT	cd_unidade_w
            from	unidade_medida
            where	cd_unidade_ptu	= tab_mat_med_w[index_1_w].cd_unidade_medida_w
            and     ie_situacao	= 'A';

            if (cd_unidade_w IS NOT NULL AND cd_unidade_w::text <> '') then
                tab_mat_med_w[index_1_w].cd_unidade_medida_w := substr(cd_unidade_w,1,10);
            end if;
        end if;

        CALL pls_interpret_a900_content_xml.insert_mat_med( tab_mat_med_w(index_1_w) );

    end loop;
else
    CALL wheb_mensagem_pck.exibir_mensagem_abort(1098353);
end if;

exception
    when others then
        error_p := substr(SQLERRM || chr(13) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE() || chr(13) || error_aux_w, 1, 4000);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_interpret_a900_content_xml.interpr_and_prepare_to_insert ( ds_content_file_p w_pls_mat_unimed_xml.ds_arquivo%type, nm_usuario_p usuario.nm_usuario%type, error_p INOUT text ) FROM PUBLIC;
