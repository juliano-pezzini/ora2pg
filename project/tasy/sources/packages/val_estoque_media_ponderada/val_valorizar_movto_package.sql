-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


---------------------------------------------------------------
--- Calcula o valor de custo médio e atualiza os valores dos movimentos
---------------------------------------------------------------
CREATE OR REPLACE PROCEDURE val_estoque_media_ponderada.val_valorizar_movto ( cd_material_p bigint, cd_estabelecimento_p bigint , dt_mesano_referencia_p timestamp, nm_usuario_p text, nr_movimento_estoque_p INOUT bigint, qt_estoque_p INOUT bigint, vl_estoque_p INOUT bigint, vl_custo_medio_p INOUT bigint) AS $body$
DECLARE


nr_movimento_estoque_w		bigint   := 0;

qt_estoque_w			double precision := 0;
vl_estoque_w			double precision := 0;

vl_movimento_w			double precision := 0;
vl_movimento_ww			double precision := 0;
qt_movimento_w			double precision := 0;
qt_movimento_ww			double precision := 0;

cd_acao_w			varchar(1);
cd_tipo_valor_w			bigint   := 7;
ie_entrada_saida_w			varchar(1);
ie_entrada_saida_ww			varchar(1);
vl_custo_medio_w			double precision;
dt_movimento_w			timestamp;
dt_custo_medio_w			timestamp;
dt_processo_w				timestamp;
ie_tipo_requisicao_w		varchar(3);
ie_altera_custo_w       	varchar(1);
ie_atualiza_estoque_w		varchar(1);
nr_documento_w			bigint;
nr_documento_ww			bigint;
nr_sequencia_item_docto_w	integer;
nr_sequencia_item_docto_ww	integer;

c03 CURSOR FOR
SELECT	/*+index (a MOVESTO_I13)*/	a.dt_movimento_estoque,
	a.dt_processo,
	a.nr_movimento_estoque,
	coalesce(a.qt_estoque,0),
	b.ie_entrada_saida,
	b.ie_tipo_requisicao,
	b.ie_altera_custo,
	a.cd_acao,
	b.ie_atualiza_estoque,
	a.nr_documento,
	a.NR_SEQUENCIA_ITEM_DOCTO
from	operacao_estoque b,
	movimento_estoque a
where	a.cd_material_estoque  = cd_material_p
and	a.cd_estabelecimento   = cd_estabelecimento_p
and	a.dt_mesano_referencia = dt_mesano_referencia_p
and	a.cd_operacao_estoque  = b.cd_operacao_estoque
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
and	coalesce(b.ie_consignado,0) = 0
order by a.dt_processo, a.nr_movimento_estoque;


BEGIN
dt_custo_medio_w            := clock_timestamp() - interval '2000 days';
vl_custo_medio_w            := 0;
nr_movimento_estoque_p      := 0;

select	coalesce(sum(vl_estoque),0),
	coalesce(sum(qt_estoque),0)
into STRICT	vl_estoque_w,
	qt_estoque_w
from	saldo_estoque
where	cd_estabelecimento	= cd_estabelecimento_p
and	cd_material		= cd_material_p
and	dt_mesano_referencia	= pkg_date_utils.add_month(dt_mesano_referencia_p,-1,0);

if (qt_estoque_w = 0) then
	select	coalesce(max(vl_custo_medio),0)
	into STRICT	vl_custo_medio_w
	from	saldo_estoque
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	cd_material		= cd_material_p
	and	dt_mesano_referencia	= (
		SELECT	max(dt_mesano_referencia)
		from	saldo_estoque
		where	cd_estabelecimento	= cd_estabelecimento_p
		and	cd_material	= cd_material_p
		and	dt_mesano_referencia < pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH',0)
		and	vl_custo_medio > 0);
else
	vl_custo_medio_w := dividir(vl_estoque_w, qt_estoque_w);
end if;

open c03;
loop
fetch c03 into
	dt_movimento_w,
	dt_processo_w,
	nr_movimento_estoque_w,
	qt_movimento_w,
	ie_entrada_saida_w,
	ie_tipo_requisicao_w,
	ie_altera_custo_w,
	cd_acao_w,
	ie_atualiza_estoque_w,
	nr_documento_w,
	nr_sequencia_item_docto_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
	if (ie_tipo_requisicao_w in ('2','21')) and (nr_documento_w = nr_documento_ww) and (nr_sequencia_item_docto_w = nr_sequencia_item_docto_ww) and (qt_movimento_w = qt_movimento_ww) and (ie_entrada_saida_w <> ie_entrada_saida_ww) then
		begin
		delete	FROM movimento_estoque_valor
		where	nr_movimento_estoque  = nr_movimento_estoque_w;

		vl_movimento_w := vl_movimento_ww;
		end;

	elsif (ie_altera_custo_w = 'N') then
		begin
		delete	FROM movimento_estoque_valor
		where	nr_movimento_estoque  = nr_movimento_estoque_w;


		vl_movimento_w := (qt_movimento_w * vl_custo_medio_w);
		end;
	elsif (ie_altera_custo_w = 'Z') then
		begin
		delete	FROM movimento_estoque_valor
		where	nr_movimento_estoque  = nr_movimento_estoque_w;


		vl_movimento_w := 0;
		end;
	else
		select	coalesce(sum(CASE WHEN b.ie_aumenta_diminui_valor='D' THEN  vl_movimento * -1 WHEN b.ie_aumenta_diminui_valor='A' THEN  vl_movimento WHEN b.ie_aumenta_diminui_valor='N' THEN  0 END ),0)
		into STRICT	vl_movimento_w
		from	tipo_valor b,
			movimento_estoque_valor a
		where	a.cd_tipo_valor		= b.cd_tipo_valor
		and	a.nr_movimento_estoque	= nr_movimento_estoque_w;
	end if;

	nr_documento_ww 		:= nr_documento_w;
	nr_sequencia_item_docto_ww	:= nr_sequencia_item_docto_w;
	ie_entrada_saida_ww		:= ie_entrada_saida_w;
	qt_movimento_ww			:= qt_movimento_w;
	vl_movimento_ww			:= vl_movimento_w;


	if (ie_altera_custo_w = 'N') then
		begin
		insert into movimento_estoque_valor values (
			nr_movimento_estoque_w,
			cd_tipo_valor_w,
			vl_movimento_w,
			clock_timestamp(),
			nm_usuario_p);

		exception when others then
			qt_estoque_w    := 0;
		end;
	end if;


	if (ie_entrada_saida_w = 'S') then
		begin
        	qt_movimento_w	:= qt_movimento_w * -1;
		vl_movimento_w	:= vl_movimento_w * -1;


		if (ie_altera_custo_w = 'N') and /*OS  1249726 - Deve jogar a diferença de arredondamento somente nas operações Apurado CPV.*/
			(ie_atualiza_estoque_w = 'S') and (not ie_tipo_requisicao_w in (2,21)) then
			nr_movimento_estoque_p := nr_movimento_estoque_w;
		end if;
		end;
	end if;


	if (cd_acao_w <> '1') then
		qt_movimento_w	:= qt_movimento_w * -1;
		vl_movimento_w	:= vl_movimento_w * -1;
	end if;


	if (ie_atualiza_estoque_w = 'S') then
		begin
		vl_estoque_w		:= vl_estoque_w + vl_movimento_w;
		qt_estoque_w		:= qt_estoque_w + qt_movimento_w;
		end;
	end if;

	/*	Não pode utilizar a function dividir pois se a quantidade em estoque for zero, será retornado custo médio 0.
		Porém neste caso deve ser utilizado o custo médio anterior*/
	vl_custo_medio_w	:= vl_estoque_w / qt_estoque_w;
	exception
	when others then
		vl_custo_medio_w := vl_custo_medio_w;
	end;

end loop;
close c03;

vl_custo_medio_p	:= vl_custo_medio_w;
vl_estoque_p		:= vl_estoque_w;
qt_estoque_p		:= qt_estoque_w;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE val_estoque_media_ponderada.val_valorizar_movto ( cd_material_p bigint, cd_estabelecimento_p bigint , dt_mesano_referencia_p timestamp, nm_usuario_p text, nr_movimento_estoque_p INOUT bigint, qt_estoque_p INOUT bigint, vl_estoque_p INOUT bigint, vl_custo_medio_p INOUT bigint) FROM PUBLIC;
