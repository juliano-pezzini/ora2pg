-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*Registro 0400: tabela de natureza da operação/prestação*/

CREATE OR REPLACE PROCEDURE fis_sef_edoc_reg_geral_pck.fis_gerar_reg_0400_edoc () AS $body$
DECLARE


nr_seq_fis_sef_edoc_0400_w	fis_sef_edoc_0400.nr_sequencia%type;
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;

c_reg_0400 CURSOR FOR
	SELECT	distinct a.cd_nat cd_nat,
		substr(b.ds_natureza_operacao,1,255) ds_nat,
		substr(fis_sef_edoc_reg_geral_pck.obter_cop(Elimina_Caracter(b.cd_cfop, '.'), b.ie_entrada_saida), 1, 4) cd_cop
	from (
			SELECT	a.cd_nat
			from	fis_sef_edoc_c020 a
			where	a.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(a.cd_nat IS NOT NULL AND a.cd_nat::text <> '')
			
union

			select	a.cd_nat
			from	fis_sef_edoc_e020 a
			where	a.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(a.cd_nat IS NOT NULL AND a.cd_nat::text <> '')
		) a,
		natureza_operacao b
	where	a.cd_nat	= b.cd_natureza_operacao;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_0400*/

type reg_c_reg_0400 is table of c_reg_0400%RowType;
vetreg0400 reg_c_reg_0400;

/*Criação do array com o tipo sendo da tabela especificada - fis_sef_edoc_0400*/

type registro is table of fis_sef_edoc_0400%rowtype index by integer;
fis_registros_w registro;

BEGIN

open c_reg_0400;
loop
fetch c_reg_0400 bulk collect into vetreg0400 limit 1000;
	for i in 1 .. vetreg0400.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		/*Pega a sequencia da taleba fis_sef_edoc_0400 para o insert*/

		select	nextval('fis_sef_edoc_0400_seq')
		into STRICT	nr_seq_fis_sef_edoc_0400_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia 		:= nr_seq_fis_sef_edoc_0400_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario 		:= current_setting('fis_sef_edoc_reg_geral_pck.nm_usuario_w')::usuario.nm_usuario%type;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= current_setting('fis_sef_edoc_reg_geral_pck.nm_usuario_w')::usuario.nm_usuario%type;
		fis_registros_w[qt_cursor_w].cd_reg 			:= '0400';
		fis_registros_w[qt_cursor_w].cd_nat			:= vetreg0400[i].cd_nat;
		fis_registros_w[qt_cursor_w].ds_nat			:= substr(vetreg0400[i].ds_nat, 1, 60);
		fis_registros_w[qt_cursor_w].cd_cop			:= vetreg0400[i].cd_cop;
		fis_registros_w[qt_cursor_w].nr_seq_controle 		:= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type;

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - fis_sef_edoc_0400 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_sef_edoc_0400 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_0400 */
end loop;
close c_reg_0400;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_sef_edoc_0400 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_sef_edoc_reg_geral_pck.fis_gerar_reg_0400_edoc () FROM PUBLIC;
