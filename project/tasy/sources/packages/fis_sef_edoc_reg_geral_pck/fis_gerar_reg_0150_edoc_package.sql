-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*Registro 0150: tabela de cadastro do participante*/

CREATE OR REPLACE PROCEDURE fis_sef_edoc_reg_geral_pck.fis_gerar_reg_0150_edoc () AS $body$
DECLARE


nr_seq_fis_sef_edoc_0150_w	fis_sef_edoc_0150.nr_sequencia%type;

ds_nome_w			fis_sef_edoc_0150.ds_nome%type;
cd_pais_w			fis_sef_edoc_0150.cd_pais%type;
cd_cnpj_w			fis_sef_edoc_0150.cd_cnpj%type;
cd_cpf_w			fis_sef_edoc_0150.cd_cpf%type;
nr_ie_w				fis_sef_edoc_0150.nr_ie%type;
cd_mun_w			fis_sef_edoc_0150.cd_mun%type;
ds_suframa_w			fis_sef_edoc_0150.ds_suframa%type;
sg_uf_w				fis_sef_edoc_0150.sg_uf%type;
nr_ie_st_w			fis_sef_edoc_0150.nr_ie_st%type;
cd_im_w				fis_sef_edoc_0150.cd_im%type;

c_reg_0150 CURSOR FOR
	SELECT	distinct a.cd_part,
		CASE WHEN length(a.cd_part)=14 THEN  'J'  ELSE 'F' END  ie_tipo_pessoa  --J = Pessoa Juridica. F = Pessoa Fisica
	from (	SELECT	b.cd_part
			from	fis_sef_edoc_c020 b
			where	b.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and	(b.cd_part IS NOT NULL AND b.cd_part::text <> '')
			
union

			select	b.cd_part
			from	fis_sef_edoc_h030 b
			where	b.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(b.cd_part IS NOT NULL AND b.cd_part::text <> '')
			
union

			select	b.cd_part
			from	fis_sef_edoc_e020 b
			where	b.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(b.cd_part IS NOT NULL AND b.cd_part::text <> '')
			
union

			select	b.cd_part
			from	fis_sef_edoc_e100 b
			where	b.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(b.cd_part IS NOT NULL AND b.cd_part::text <> '')
			
union

			select	b.cd_part
			from	fis_sef_edoc_e120 b
			where	b.nr_seq_controle	= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type
			and 	(b.cd_part IS NOT NULL AND b.cd_part::text <> '')

		) a;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_0150*/

type reg_c_reg_0150 is table of c_reg_0150%RowType;
vetreg0150 reg_c_reg_0150;

BEGIN

open c_reg_0150;
loop
fetch c_reg_0150 bulk collect into vetreg0150 limit 1000;
	for i in 1 .. vetreg0150.Count loop
		begin

		/*Incrementa a variavel para o array*/

		PERFORM set_config('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w', current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint + 1, false);


		if (vetreg0150[i].ie_tipo_pessoa = 'J')	then
			begin

			begin

			select	trim(both substr(a.ds_razao_social, 1, 60))	ds_nome,
				coalesce(b.cd_bacen, '1058') 		cd_pais,
				elimina_caracteres_especiais(a.cd_cgc)	cd_cnpj,
				null 					cd_cpf,
				a.sg_estado				sg_uf,
				substr(CASE WHEN upper(a.nr_inscricao_estadual)='ISENTA' THEN  '' WHEN upper(a.nr_inscricao_estadual)='ISENTO' THEN  ''  ELSE elimina_caractere_especial(a.nr_inscricao_estadual) END , 1, 14)	nr_ie,
				null					nr_ie_st,
				elimina_caracteres_especiais(substr(a.cd_municipio_ibge || substr(calcula_digito('MODULO10', a.cd_municipio_ibge),1,1),1,7))		cd_mun,
				a.nr_inscricao_municipal		cd_im,
				null 					ds_suframa
			into STRICT	ds_nome_w,
				cd_pais_w,
				cd_cnpj_w,
				cd_cpf_w,
				sg_uf_w,
				nr_ie_w,
				nr_ie_st_w,
				cd_mun_w,
				cd_im_w,
				ds_suframa_w
			FROM pessoa_juridica a
LEFT OUTER JOIN pais b ON (a.nr_seq_pais = b.nr_sequencia)
WHERE a.cd_cgc	= vetreg0150[i].cd_part   LIMIT 1;

			exception
			when others then
				ds_nome_w	:= null;
				cd_pais_w	:= null;
				cd_cnpj_w	:= null;
				cd_cpf_w	:= null;
				sg_uf_w		:= null;
				nr_ie_w		:= null;
				nr_ie_st_w	:= null;
				cd_mun_w	:= null;
				cd_im_w		:= null;
				ds_suframa_w	:= null;
			end;

			end;
		elsif (vetreg0150[i].ie_tipo_pessoa = 'F')	then
			begin

			begin

			select  substr(d.nm_pessoa_fisica,1,60) 	ds_nome,
				coalesce(p.cd_bacen, '1058') 		cd_pais,
				null 					cd_cnpj,
				elimina_caracteres_especiais(d.nr_cpf)	cd_cpf,
				c.sg_estado				sg_uf,
				substr(CASE WHEN upper(d.nr_inscricao_estadual)='ISENTA' THEN  '' WHEN upper(d.nr_inscricao_estadual)='ISENTO' THEN  ''  ELSE elimina_caractere_especial(d.nr_inscricao_estadual) END , 1, 14)	nr_ie,
				null					nr_ie_st,
				elimina_caracteres_especiais(substr(c.cd_municipio_ibge || substr(calcula_digito('MODULO10', c.cd_municipio_ibge),1,1),1,7)) 		cd_mun,
				d.nr_inscricao_municipal		cd_im,
				null 					ds_suframa
			into STRICT	ds_nome_w,
				cd_pais_w,
				cd_cnpj_w,
				cd_cpf_w,
				sg_uf_w,
				nr_ie_w,
				nr_ie_st_w,
				cd_mun_w,
				cd_im_w,
				ds_suframa_w
			FROM pessoa_fisica d
LEFT OUTER JOIN pais p ON (d.nr_seq_pais = p.nr_sequencia)
LEFT OUTER JOIN compl_pessoa_fisica c ON (d.cd_pessoa_fisica = c.cd_pessoa_fisica)
WHERE c.ie_tipo_complemento	= 1 and d.cd_pessoa_fisica 	= vetReg0150[i].cd_part   LIMIT 1;

			exception
			when others then
				ds_nome_w	:= null;
				cd_pais_w	:= null;
				cd_cnpj_w	:= null;
				cd_cpf_w	:= null;
				sg_uf_w		:= null;
				nr_ie_w		:= null;
				nr_ie_st_w	:= null;
				cd_mun_w	:= null;
				cd_im_w		:= null;
				ds_suframa_w	:= null;
			end;

			end;
		end if;

		/*Pega a sequencia da taleba fis_sef_edoc_0150 para o insert*/

		select	nextval('fis_sef_edoc_0150_seq')
		into STRICT	nr_seq_fis_sef_edoc_0150_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nr_sequencia 		:= nr_seq_fis_sef_edoc_0150_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).dt_atualizacao 		:= clock_timestamp();
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nm_usuario 		:= current_setting('fis_sef_edoc_reg_geral_pck.nm_usuario_w')::usuario.nm_usuario%type;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).dt_atualizacao_nrec	:= clock_timestamp();
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nm_usuario_nrec 		:= current_setting('fis_sef_edoc_reg_geral_pck.nm_usuario_w')::usuario.nm_usuario%type;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_reg 			:= '0150';
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_part			:= vetreg0150[i].cd_part;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).ds_nome			:= ds_nome_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_pais			:= cd_pais_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_cnpj			:= cd_cnpj_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_cpf			:= cd_cpf_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).sg_uf			:= sg_uf_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nr_ie			:= nr_ie_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nr_ie_st			:= nr_ie_st_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_mun			:= cd_mun_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).cd_im			:= cd_im_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).ds_suframa		:= ds_suframa_w;
		current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150(current_setting('fis_sef_edoc_reg_geral_pck.qt_cursor_0150_w')::bigint).nr_seq_controle 		:= current_setting('fis_sef_edoc_reg_geral_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type;

		--if	(ie_tipo_arquivo_w in (4,6)) then
			/*Chamada da procedure que gera os dados dos registros 0175 dos arquivos*/

			CALL fis_sef_edoc_reg_geral_pck.fis_gerar_reg_0175_edoc(vetreg0150[i].cd_part,
						nr_seq_fis_sef_edoc_0150_w,
						vetreg0150[i].ie_tipo_pessoa);
		--end if;
		/*Quando a quantidade de registros no array do 0175 for superior ou igual a 1000 deve-se gravar primeiro o
		registro 0150 depois o 0175*/
		if (current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0175_w')::registro_0175.count >= 1000) then
			begin

			CALL fis_sef_edoc_reg_geral_pck.fis_gravar_reg_0150_0175_edoc();

			end;
		end if;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_0150 */
end loop;
close c_reg_0150;

if (current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0175_w')::registro_0175.count > 0) or (current_setting('fis_sef_edoc_reg_geral_pck.fis_registros_0150_w')::registro_0150.count > 0) then
	begin

	CALL fis_sef_edoc_reg_geral_pck.fis_gravar_reg_0150_0175_edoc();

	end;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_sef_edoc_reg_geral_pck.fis_gerar_reg_0150_edoc () FROM PUBLIC;
