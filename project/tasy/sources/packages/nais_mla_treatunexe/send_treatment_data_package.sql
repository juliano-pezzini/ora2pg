-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_treatunexe.send_treatment_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) AS $body$
DECLARE

            PERFORM *
            from (SELECT
                                    CASE WHEN cd_classif_p='unexecutedOrderMessageRequestGasTherapy' THEN 01 WHEN cd_classif_p='unexecutedOrderMessageCancelGasTherapy' THEN 03 END  process_classif, 
                                    'P0'                                                                                                         order_class, 
                                    coalesce(co.nr_order_patient_seq,'00000000')                                                                      order_number,            
                                    coalesce(c.medical_record_id,'0000000000')                                                                        patient_identifier, 
                                    to_char(a.DT_INICIO, 'YYYYMMDD')                                                                             consultation_date,
                                    case when (co.cd_especialidade_med IS NOT NULL AND co.cd_especialidade_med::text <> '') then 
                                    coalesce(nais_mla_treatunexe.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', co.cd_especialidade_med), ' ') 
                                    when (co.cd_departamento_med IS NOT NULL AND co.cd_departamento_med::text <> '') then 
                                    coalesce(nais_mla_treatunexe.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', co.cd_departamento_med), ' ')   
                                    else '00'
                                    end as department_code, 
                                    CASE WHEN get_patient_type(c.encounter_id, NULL)='IN' THEN  1 WHEN get_patient_type(c.encounter_id, NULL)='OP' THEN  2 END                                              patient_classification,    
                                    coalesce(c.bed_id,'   ')                                                                                          ward_code,                
                                    coalesce(c.room_id,'     ')                                                                                       room_number,             
                                    '1'                                                                                                          blood_tranfusion_type,     
                                    '00'                                                                                                         insurance_number,          
                                    coalesce(a.cd_medico,'        ')                                                                                  doctor_code,               
                                    ' '                                                                                                          patient_newborn,         
                                    ' '                                                                                                          prescription_classfication,
                                    '   '                                                                                                        requestor_code,  
                                    ' '                                                                                                          mutual_exclusion_rule,   
                                    '0000'                                                                                                       division_number,       
                                    ' '                                                                                                          blank_one,              
                                    ' '                                                                                                          blank_two               
                        from        cpoe_gasoterapia a,
                                    prescr_gasoterapia b,
                                    bft_encounter_v c,
                                    cpoe_order_unit co,
                                    cpoe_tipo_pedido ct
                        where       a.nr_sequencia = b.nr_seq_gas_cpoe
                        and         a.nr_atendimento =  c.encounter_id
                        and         co.nr_seq_cpoe_tipo_pedido = ct.nr_sequencia 
                        and         co.nr_sequencia = a.nr_seq_cpoe_order_unit 
                        and         co.nr_order_unit = order_unit_p
                        and         ct.nr_seq_sub_grp = 'PC' 
                        and         nr_prescricao = nr_prescricao_p
                        order by a.nr_sequencia desc) alias14 LIMIT 1;

    --  End of Accounting Information
    
        c02 return;

    -- End of Execution Information
    --[Cursor c03]
     c03 CURSOR FOR
     SELECT '   ' slip_code, 
            00 number_of_details,
			' ' medical_treatment_detail_01, 
			' ' medical_treatment_detail_02, 
			' ' medical_treatment_detail_03, 
			' ' medical_treatment_detail_04, 
			' ' medical_treatment_detail_05, 
			' ' medical_treatment_detail_06, 
			' ' medical_treatment_detail_07, 
			' ' medical_treatment_detail_08, 
			' ' medical_treatment_detail_09, 
			' ' medical_treatment_detail_10, 
			' ' blank_03,
			chr(13) eot 
;
    --[Cursor c03]
        r_c01_w               accinforectyp;
        r_c02_w               execinforedtyp;
        cd_contin_flag_w      varchar(1) := 'C';
        loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        json_output_w		  philips_json;
        json_output_list_w    philips_json_list;

        nr_seq_int_call_log_w bigint :=0;
        ds_log_message_w      varchar(500);
        nr_atendimento_w cpoe_gasoterapia.nr_atendimento%type;
        nr_prescricao_w   bigint;
        processing_class  varchar(2);


BEGIN
        PERFORM set_config('nais_mla_treatunexe.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w :=0;
        PERFORM set_config('nais_mla_treatunexe.index_counter_w', 0, false);
        loop_count_w := 0;
        json_output_w   := philips_json();
        json_output_list_w	:= philips_json_list();
        
        begin
                                select      a.nr_atendimento
                                into STRICT        nr_atendimento_w
                                from        cpoe_gasoterapia a,
                                            prescr_gasoterapia b
                                where       a.nr_sequencia = b.nr_seq_gas_cpoe
                                and         b.nr_prescricao =  nr_prescricao_p  LIMIT 1;

        exception when no_data_found then nr_atendimento_w:= null;
		end;

        select CASE WHEN cd_classif_p='unexecutedOrderMessageRequestGasTherapy' THEN '01' WHEN cd_classif_p='unexecutedOrderMessageCancelGasTherapy' THEN '03' END  
        into STRICT processing_class
;

            cd_contin_flag_w := 'E';
            CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.nais_common_header('MJ', nr_prescricao_p, processing_class, cd_contin_flag_w, 1, 810);
            open c01;
            loop

            begin
                fetch c01 into r_c01_w;

            --------------------------------------Logger_start Cursor for c01---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor C01 for : '
                                    ||' Gasotherapia Order number Cursor "C-01"'
                                    || nr_prescricao_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c01---------------------------------------------
                
            EXIT WHEN NOT FOUND; /* apply on c01 */
                CALL CALL CALL CALL CALL nais_mla_treatunexe.common_accounting_info(r_c01_w);
            end loop;

            close c01;
            open c02;
            loop
                begin
                fetch c02 into r_c02_w;
                
            --------------------------------------Logger_start Cursor for c02---------------------------------------------            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor C02 for : '
                                    ||' Gasotherapia Order number Cursor "C-02"'
                                    || nr_prescricao_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c02---------------------------------------------
                EXIT WHEN NOT FOUND; /* apply on c02 */
                CALL CALL CALL CALL CALL nais_mla_treatunexe.common_execution_info(r_c02_w);
            end loop;

            close c02;

                   for r_c03 in C03 
		loop
			begin
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.slip_code,3,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.number_of_details,2,'L','0');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_01,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_02,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_03,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_04,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_05,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_06,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_07,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_08,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_09,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_10,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.blank_03,4,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.eot,1,'L');				
			end;
		end loop;

           json_output_w := nais_mla_treatunexe.add_json_value(json_output_w, 'message', current_setting('nais_mla_treatunexe.ds_line_w')::varchar(32767));
           json_output_list_w.append(json_output_w.to_json_value());

        dbms_lob.createtemporary( file_output_p, true);
        json_output_list_w.(file_output_p);
        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p ,    --Success Logger
        'T', 'E', null, 'MJ', file_output_p,null, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'S');
        
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_treatunexe.send_treatment_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) FROM PUBLIC;
