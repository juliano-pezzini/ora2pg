-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

    
--//////////////////////////////////////////////////////////////////
CREATE OR REPLACE PROCEDURE nais_mla_treatunexe.send_intprofs_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) AS $body$
DECLARE

              PERFORM * from (
                        SELECT
                                CASE WHEN cd_classif_p='unexecutedOrderMessageCancelInternalProcedure' THEN '03' WHEN cd_classif_p='unexecutedOrderMessageRequestInternalProcedure' THEN '01' END  process_classif,
                                'P0'                                                             order_class,
                                coalesce(co.nr_order_patient_seq, 0)                                  order_number,       
                                coalesce(c.medical_record_id,'0000000000')                            patient_identifier,        
                                coalesce(to_char(a.dt_inicio, 'YYYYMMDD'),'00000000')                 consultation_date,
                                case when (co.cd_especialidade_med IS NOT NULL AND co.cd_especialidade_med::text <> '') then 
                                coalesce(nais_mla_treatunexe.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', co.cd_especialidade_med), ' ') 
                                when (co.cd_departamento_med IS NOT NULL AND co.cd_departamento_med::text <> '') then 
                                coalesce(nais_mla_treatunexe.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', co.cd_departamento_med), ' ')   
                                else '00'
                                end as department_code,     
                                CASE WHEN get_patient_type(c.encounter_id, NULL)='IN' THEN  1 WHEN get_patient_type(c.encounter_id, NULL)='OP' THEN  2 END  patient_classification,    
                                coalesce(c.bed_id,'   ')                                              ward_code,               
                                coalesce(c.room_id,'     ')                                           room_number,          
                                '1'                                                              blood_tranfusion_type,
                                '00'                                                             insurance_number,
                                coalesce(a.cd_medico,'00000000')                                      doctor_code,
                                ' '                                                              patient_newborn,
                                ' '                                                              prescription_classfication,
                                '   '                                                            requesteor_code,
                                ' '                                                              mutual_exclusion_rule,
                                '0000'                                                           division_number,
                                ' '                                                              blank_one,
                                ' '                                                              blank_two
           
                        from    cpoe_procedimento a,         
                                prescr_procedimento b,
                                proc_interno pi,
                                bft_encounter_v c,
                                cpoe_order_unit co,
                                cpoe_tipo_pedido cp
                        where   a.nr_sequencia = b.nr_seq_proc_cpoe 
                        and     pi.nr_sequencia = a.nr_seq_proc_interno
                        and     a.nr_atendimento =  c.encounter_id
                        and     co.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                        and     co.nr_sequencia              = a.nr_seq_cpoe_order_unit
                        and     cp.nr_seq_sub_grp            = 'PC'
                        and     co.nr_order_unit             = order_unit_p
                        and     b.nr_prescricao              = nr_prescricao_p
                        and     obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'P0') alias16 LIMIT 1;

    --  End of Accounting Information
        c02 return;

    c03 CURSOR FOR
     SELECT '   ' slip_code, 
            00 number_of_details,
			' ' medical_treatment_detail_01, 
			' ' medical_treatment_detail_02, 
			' ' medical_treatment_detail_03, 
			' ' medical_treatment_detail_04, 
			' ' medical_treatment_detail_05, 
			' ' medical_treatment_detail_06, 
			' ' medical_treatment_detail_07, 
			' ' medical_treatment_detail_08, 
			' ' medical_treatment_detail_09, 
			' ' medical_treatment_detail_10, 
			' ' blank_03,
			chr(13) eot 
;

        r_c01_w               accinforectyp;
        r_c02_w               execinforedtyp;
        cd_contin_flag_w      varchar(1) := 'C';
        loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        --ordernum_count_w      number;
        count_nr_sequencia_proc_w bigint := 0;
        nr_seq_int_call_log_w bigint :=0;
        ds_log_message_w      varchar(500);
        nr_atendimento_w cpoe_procedimento.nr_atendimento%type;
        processing_class               varchar(2) := '  ';

         
    
BEGIN    
        PERFORM set_config('nais_mla_treatunexe.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w :=0;
        PERFORM set_config('nais_mla_treatunexe.index_counter_w', 0, false);
        loop_count_w := 0;

        begin
        
        select CASE WHEN cd_classif_p='unexecutedOrderMessageCancelInternalProcedure' THEN '03' WHEN cd_classif_p='unexecutedOrderMessageRequestInternalProcedure' THEN '01' END  
        into STRICT processing_class
;

        select  a.nr_atendimento
        into STRICT    nr_atendimento_w
        from    cpoe_procedimento a,
                prescr_procedimento b,
                prescr_mat_alteracao c
        where   a.nr_sequencia = b.nr_seq_proc_cpoe
        and     c.nr_seq_procedimento = b.nr_agrupamento
        and     b.nr_prescricao = nr_prescricao_p  LIMIT 1;

        exception when no_data_found then nr_atendimento_w:= null;
		end;
        
        cd_contin_flag_w := 'E';
        CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.nais_common_header('MJ',nr_prescricao_p , processing_class, cd_contin_flag_w, 1,810);
            open c01;
            loop
                begin
                fetch c01 into r_c01_w;

            --------------------------------------Logger_start Cursor for c01---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor C01 for : '
                                    ||' Order number in Cursor "C-01"'
                                    || nr_prescricao_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c01---------------------------------------------
            
                EXIT WHEN NOT FOUND; /* apply on c01 */
                CALL CALL CALL CALL CALL nais_mla_treatunexe.common_accounting_info(r_c01_w);
            end loop;

            close c01;
            open c02;
            loop
                begin
                fetch c02 into r_c02_w;

            --------------------------------------Logger_start Cursor for c02---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor C02 for : '
                                    ||' Order number in Cursor "C-02"'
                                    || nr_prescricao_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p , 
                                'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c02---------------------------------------------               
                
				EXIT WHEN NOT FOUND; /* apply on c02 */
                CALL CALL CALL CALL CALL nais_mla_treatunexe.common_execution_info(r_c02_w);
            end loop;

            close c02;
            -----------------------------------------
                   for r_c03 in C03
		loop
			begin
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.slip_code,3,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.number_of_details,2,'L','0');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_01,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_02,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_03,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_04,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_05,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_06,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_07,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_08,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_09,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.medical_treatment_detail_10,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.blank_03,4,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_treatunexe.append_text(r_c03.eot,1,'L');				
			end;
		end loop;
        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), cd_classif_p, cd_classif_p ,    --Success Logger
        'T', 'E', null, 'MJ', file_output_p,null, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'S');
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_treatunexe.send_intprofs_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) FROM PUBLIC;
