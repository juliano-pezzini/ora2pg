-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE aggregation_proc_managem_pck.gerar_depart_man_daily (NR_SEQ_DAILY_REPORT_P bigint, CD_ESTABELECIMENTO_P bigint, IE_MAIN_FLAG_P bigint,nm_usuario_p AGREG_NUMBER_PATIENT.NM_USUARIO%TYPE) AS $body$
DECLARE


DT_PARAMETRO_W                timestamp := TRUNC(clock_timestamp() - interval '1 days');
NM_USUARIO_W                  AGREG_NUMBER_PATIENT.NM_USUARIO%TYPE;
DT_ATUALIZACAO_NREC_W         timestamp;
NR_SEQ_MAIN_DAILY_REP_W       AGREG_NUMBER_PATIENT.NR_SEQ_MAIN_DAILY_REP%TYPE;
DT_TARGET_W                   AGREG_NUMBER_PATIENT.DT_TARGET%TYPE;
CD_WARD_W                     AGREG_NUMBER_PATIENT.CD_WARD%TYPE;
QT_FIXED_BEDS_W               bigint;
QT_PREVIOUS_DAY_W             bigint;
QT_CURRENT_PATIENTS_HOSP_W    bigint;
QT_PATIENTS_HOSP_W            bigint;
QT_DISCHARGE_PATIENTS_W       bigint;
QT_DECEASED_PATIENTS_W        bigint;
QT_TRANSF_PATIENTS_IN_W       bigint;
QT_TRANSF_PATIENTS_OUT_W      bigint;
QT_LEAVING_PATIENTS_TEMP_W    bigint;
QT_OUTNIGHT_PATIENTS_W        bigint;
QT_FAMILY_ATTEND_W            bigint;
QT_LITTER_PATIENTS_W          bigint;
QT_ACCOMP_PATIENTS_W          bigint;
QT_INDEP_PATIENTS_W           bigint;
QT_FALL_RISK_PATIENTS_I_W     bigint;
QT_FALL_RISK_PATIENTS_II_W    bigint;
QT_FALL_RISK_PATIENTS_III_W   bigint;
QT_PATIENTS_A_I_W             bigint;
QT_PATIENTS_A_II_W            bigint;
QT_PATIENTS_A_III_W           bigint;
QT_PATIENTS_A_IV_W            bigint;
QT_PATIENTS_B_I_W             bigint;
QT_PATIENTS_B_II_W            bigint;
QT_PATIENTS_B_III_W           bigint;
QT_PATIENTS_B_IV_W            bigint;
QT_PATIENTS_C_I_W             bigint;
QT_PATIENTS_C_II_W            bigint;
QT_PATIENTS_C_III_W           bigint;
QT_PATIENTS_C_IV_W            bigint;
QT_OPERATIONS_W               bigint;
QT_DELIVERIES_W               bigint;
QT_NEWBORNS_W                 bigint;
QT_DAY_W                      bigint;
QT_NIGHT_W                    bigint;
QT_EVENING_W                  bigint;
QT_INQUIRIES_W                bigint;
QT_AMBULANCE_W                bigint;
QT_TOTAL_W                    bigint;
QT_SUM_W                      bigint;
IE_EXIST_W                    bigint;
CD_SETOR_ATENDIMENTO_W        bigint;
CD_SETOR_ATENDIMENTO_AUX_W    bigint;
NR_ATENDIMENTO_W              bigint;
DT_ENTRADA_UNIDADE_W          timestamp;

C01 CURSOR FOR
  SELECT 
	  AP.NR_ATENDIMENTO,
	  APU.DT_ENTRADA_UNIDADE
	FROM
  	ATENDIMENTO_PACIENTE AP,
	  ATEND_PACIENTE_UNIDADE APU
	WHERE 
    TRUNC(APU.DT_ENTRADA_UNIDADE) = TRUNC(clock_timestamp() - interval '1 days') 
	AND AP.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
	AND APU.CD_SETOR_ATENDIMENTO = 
    (SELECT MAX(CD_WARD)    
      FROM AGREG_MAIN_DAILY_REPORTS
      WHERE NR_SEQUENCIA = NR_SEQ_DAILY_REPORT_P
      AND CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P)
  GROUP BY 
    AP.NR_ATENDIMENTO,
    APU.DT_ENTRADA_UNIDADE;


BEGIN

-- OBTER SETOR DE ATENDIMENTO
SELECT MAX(CD_WARD)
  INTO STRICT CD_WARD_W
FROM AGREG_MAIN_DAILY_REPORTS
WHERE NR_SEQUENCIA = NR_SEQ_DAILY_REPORT_P
AND CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

--VALIDA SE JA FOI GERADO O RELATORIO NO DIA, CASO JA EXISTIR O RELATORIO, ELE DEVERA SER DELETADO PARA QUE SEJA GERADO O NOVO RELATORIO
SELECT COUNT(*)
  INTO STRICT IE_EXIST_W
FROM AGREG_NUMBER_PATIENT
WHERE TRUNC(DT_TARGET) = TRUNC(clock_timestamp()) 
AND CD_WARD = CD_WARD_W;

IF (IE_EXIST_W > 0) THEN
  DELETE from AGREG_NUMBER_PATIENT
  WHERE TRUNC(DT_TARGET) = TRUNC(clock_timestamp())
  AND CD_WARD = CD_WARD_W;
END IF;

-- OBTER QUANTIDADE DE LEITOS FIXOS
SELECT COUNT(*)
  INTO STRICT QT_FIXED_BEDS_W
FROM SETOR_ATENDIMENTO SA,
UNIDADE_ATENDIMENTO UA
WHERE SA.CD_SETOR_ATENDIMENTO = UA.CD_SETOR_ATENDIMENTO
AND UA.IE_SITUACAO = 'A'
AND SA.IE_SITUACAO = 'A'
AND SA.CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P
AND UA.IE_TEMPORARIO = 'N'
AND SA.CD_SETOR_ATENDIMENTO = CD_WARD_W;

--OBTER QUANTIDADE DE LEITOS DO DIA ANTERIOR
SELECT MAX(QT_FIXED_BEDS)
  INTO STRICT QT_PREVIOUS_DAY_W
FROM AGREG_NUMBER_PATIENT
WHERE TRUNC(DT_TARGET) = DT_PARAMETRO_W
AND CD_WARD = CD_WARD_W
AND NR_SEQ_MAIN_DAILY_REP = NR_SEQ_DAILY_REPORT_P;

--OBTER QUANTIDADE DE PACIENTES INTERNADOS/QUANTIDADE DE ALTAS
SELECT MAX(NR_UNIDADES_OCUPADAS),
       MAX(QT_UNIDADES_ALTA)
  INTO STRICT QT_CURRENT_PATIENTS_HOSP_W,
       QT_DISCHARGE_PATIENTS_W
FROM TOTAL_OCUPACAO_SETORES_V2
WHERE CD_ESTABELECIMENTO_BASE = CD_ESTABELECIMENTO_P 
AND CD_SETOR_ATENDIMENTO = CD_WARD_W;

--OBTER QUANTIDADE DE ALTAS 
SELECT MAX(QT_UNIDADES_ALTA)
  INTO STRICT QT_DISCHARGE_PATIENTS_W
FROM TOTAL_OCUPACAO_SETORES_V2
WHERE CD_ESTABELECIMENTO_BASE = CD_ESTABELECIMENTO_P
AND CD_SETOR_ATENDIMENTO = CD_WARD_W;

--OBTER QUANTIDADE DE OBITO DO SETOR
SELECT COUNT(*)
  INTO STRICT QT_DECEASED_PATIENTS_W
FROM ALTA_HOSPITALAR_V AH, PESSOA_FISICA PF
WHERE AH.CD_PESSOA_FISICA = PF.CD_PESSOA_FISICA
AND TRUNC(PF.DT_OBITO) = DT_PARAMETRO_W
AND (AH.DT_ALTA IS NOT NULL AND AH.DT_ALTA::text <> '')
AND AH.CD_SETOR_ATENDIMENTO = CD_WARD_W;

QT_TRANSF_PATIENTS_IN_W  := 0;
QT_TRANSF_PATIENTS_OUT_W := 0;

OPEN C01;
  LOOP
    FETCH C01 INTO
      NR_ATENDIMENTO_W,
      DT_ENTRADA_UNIDADE_W;
    EXIT WHEN NOT FOUND; /* apply on C01 */

    -- VERIFICA SE TEM SETOR ANTERIOR
    SELECT	coalesce(MAX(APU.CD_SETOR_ATENDIMENTO), CD_SETOR_ATENDIMENTO_W)
    INTO STRICT	CD_SETOR_ATENDIMENTO_AUX_W
    FROM	ATEND_PACIENTE_UNIDADE APU
    WHERE	APU.NR_ATENDIMENTO	= NR_ATENDIMENTO_W
    AND	APU.DT_ENTRADA_UNIDADE	= (
      SELECT	MAX(DT_ENTRADA_UNIDADE)
        FROM	SETOR_ATENDIMENTO SA, ATEND_PACIENTE_UNIDADE APU
        WHERE	APU.NR_ATENDIMENTO	= NR_ATENDIMENTO_W
        AND	APU.DT_SAIDA_UNIDADE	< DT_ENTRADA_UNIDADE_W
        AND	APU.DT_SAIDA_UNIDADE	>= clock_timestamp() - interval '1 days'
        AND	APU.CD_SETOR_ATENDIMENTO	= SA.CD_SETOR_ATENDIMENTO);

    IF (CD_SETOR_ATENDIMENTO_AUX_W <> CD_WARD_W) THEN
          QT_TRANSF_PATIENTS_IN_W := QT_TRANSF_PATIENTS_IN_W +1;
    END IF;

    -- VERIFICA SE TEM SETOR POSTERIOR
    SELECT	coalesce(MAX(APU.CD_SETOR_ATENDIMENTO), CD_SETOR_ATENDIMENTO_W)
    INTO STRICT	CD_SETOR_ATENDIMENTO_AUX_W
    FROM	ATEND_PACIENTE_UNIDADE APU
    WHERE	APU.NR_ATENDIMENTO   = NR_ATENDIMENTO_W
    AND	APU.DT_ENTRADA_UNIDADE =
      (SELECT	MIN(APU.DT_ENTRADA_UNIDADE)
        FROM	SETOR_ATENDIMENTO SA, ATEND_PACIENTE_UNIDADE APU
        WHERE	APU.NR_ATENDIMENTO = NR_ATENDIMENTO_W
        AND	APU.DT_ENTRADA_UNIDADE   > DT_ENTRADA_UNIDADE_W
        AND	APU.DT_ENTRADA_UNIDADE  <= clock_timestamp() - interval '1 days'
        AND	APU.CD_SETOR_ATENDIMENTO = SA.CD_SETOR_ATENDIMENTO);

    IF (CD_WARD_W <> CD_SETOR_ATENDIMENTO_AUX_W) THEN
          QT_TRANSF_PATIENTS_OUT_W := QT_TRANSF_PATIENTS_OUT_W +1;
    END IF;
  END LOOP;
CLOSE C01;

--OBTER SAIDA TEMPORARIA
QT_LEAVING_PATIENTS_TEMP_W := 0;

--OBTER QUEM PASSOU A NOITE FORA DO HOSPITAL
QT_OUTNIGHT_PATIENTS_W := 0;

--OBTER FAMILY ATTENDANTS
QT_FAMILY_ATTEND_W := 0;

--OBTER LIITER
QT_LITTER_PATIENTS_W := 0;

--OBTER PACIENTES ACOMPANHADOS
QT_ACCOMP_PATIENTS_W := 0;

--OBTER MAIOR IDADE
SELECT COUNT(*)
  INTO STRICT QT_INDEP_PATIENTS_W
FROM ATENDIMENTO_PACIENTE AP, ATEND_PACIENTE_UNIDADE AU
WHERE AP.NR_ATENDIMENTO = AU.NR_ATENDIMENTO
AND OBTER_IDADE_PF(AP.CD_PESSOA_FISICA, DT_PARAMETRO_W, 'A') >= 18
AND AU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND AP.IE_TIPO_ATENDIMENTO = CD_ESTABELECIMENTO_P
AND TRUNC(AU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND coalesce(DT_ALTA::text, '') = '';

--OBTER RISCO DE QUEDA 1
SELECT COUNT(*)
  INTO STRICT QT_FALL_RISK_PATIENTS_I_W
FROM ESCALA_EARQ EE, ATEND_PACIENTE_UNIDADE APU
WHERE EE.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND IE_HIST_QUEDA = 0;

--OBTER RISCO DE QUEDA 2
SELECT COUNT(*)
  INTO STRICT QT_FALL_RISK_PATIENTS_II_W
FROM ESCALA_EARQ EE, ATEND_PACIENTE_UNIDADE APU
WHERE EE.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND IE_HIST_QUEDA = 1;

--OBTER RISCO DE QUEDA 3
SELECT COUNT(*)
  INTO STRICT QT_FALL_RISK_PATIENTS_III_W
FROM ESCALA_EARQ EE, ATEND_PACIENTE_UNIDADE APU
WHERE EE.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND IE_HIST_QUEDA = 2;

QT_PATIENTS_A_I_W := 0;
QT_PATIENTS_A_II_W := 0;
QT_PATIENTS_A_III_W := 0;
QT_PATIENTS_A_IV_W := 0;
QT_PATIENTS_B_I_W := 0;
QT_PATIENTS_B_II_W := 0;
QT_PATIENTS_B_III_W := 0;
QT_PATIENTS_B_IV_W := 0;
QT_PATIENTS_C_I_W := 0;
QT_PATIENTS_C_II_W := 0;
QT_PATIENTS_C_III_W := 0;
QT_PATIENTS_C_IV_W := 0;

--OBTER QUANTIDADE DE CIRURGIAS
SELECT COUNT(*)
  INTO STRICT QT_OPERATIONS_W
FROM CIRURGIA
WHERE CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(DT_INICIO_CIRURGIA) = DT_PARAMETRO_W
AND CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

--OBTER QUANTIDADE DE PARTOS
SELECT COUNT(*)
  INTO STRICT QT_DELIVERIES_W
FROM  ATEND_PACIENTE_UNIDADE APU, NASCIMENTO N
WHERE APU.NR_ATENDIMENTO = N.NR_ATENDIMENTO
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(N.DT_NASCIMENTO) = DT_PARAMETRO_W;

--OBTER QUANTIDADE DE NASCIDOS VIVOS
SELECT COUNT(*)
  INTO STRICT QT_NEWBORNS_W
FROM  ATEND_PACIENTE_UNIDADE APU, NASCIMENTO N
WHERE APU.NR_ATENDIMENTO = N.NR_ATENDIMENTO
AND N.IE_UNICO_NASC_VIVO = 'S'
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND TRUNC(N.DT_NASCIMENTO) = DT_PARAMETRO_W;

QT_INQUIRIES_W := 0;

--OBTER QUANTIDADE DE CHEGADAS POR AMBULANCIA
SELECT COUNT(*)
  INTO STRICT QT_AMBULANCE_W
FROM ATENDIMENTO_PACIENTE AP, ATEND_PACIENTE_UNIDADE APU
WHERE AP.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
AND NR_SEQ_FORMA_CHEGADA = 11 --ALTERAR PARA O CADASTRO CORRETO
AND AP.CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P
AND TRUNC(AP.DT_ENTRADA) = DT_PARAMETRO_W
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W;

--OBTER QUANTIDADE DE EMERGENCIA/URGENCIA DURANTE A NOITE(07PM/06AM)
SELECT COUNT(*)
  INTO STRICT QT_NIGHT_W
FROM SETOR_ATENDIMENTO SA, ATEND_PACIENTE_UNIDADE APU
WHERE SA.CD_CLASSIF_SETOR IN (1,3)
AND SA.CD_SETOR_ATENDIMENTO = APU.CD_SETOR_ATENDIMENTO
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') >= 19
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') <= 06
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND SA.CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

--OBTER QUANTIDADE DE EMERGENCIA/URGENCIA DURANTE O DIA(06AM/07PM)
SELECT COUNT(*)
  INTO STRICT QT_DAY_W
FROM SETOR_ATENDIMENTO SA, ATEND_PACIENTE_UNIDADE APU
WHERE SA.CD_CLASSIF_SETOR IN (1,3)
AND SA.CD_SETOR_ATENDIMENTO = APU.CD_SETOR_ATENDIMENTO
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') >= 06
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') <= 19
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND SA.CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

--OBTER QUANTIDADE DE EMERGENCIA/URGENCIA DURANTE A TARDE
SELECT COUNT(*)
  INTO STRICT QT_EVENING_W
FROM SETOR_ATENDIMENTO SA, ATEND_PACIENTE_UNIDADE APU
WHERE SA.CD_CLASSIF_SETOR IN (1,3)
AND SA.CD_SETOR_ATENDIMENTO = APU.CD_SETOR_ATENDIMENTO
AND TRUNC(APU.DT_ENTRADA_UNIDADE) = DT_PARAMETRO_W
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') >= 18
AND TO_CHAR(clock_timestamp() - interval '1 days', 'HH24') <= 21
AND APU.CD_SETOR_ATENDIMENTO = CD_WARD_W
AND SA.CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

--TOTAL DE ENTRADAS DIA/NOITE
QT_TOTAL_W := QT_NIGHT_W + QT_DAY_W;

--TOTAL DE ENTRADAS DIA/TARDE/NOITE
QT_SUM_W := QT_DAY_W + QT_EVENING_W + QT_NIGHT_W;

BEGIN

  INSERT INTO AGREG_NUMBER_PATIENT(
    NR_SEQUENCIA,
    DT_ATUALIZACAO,
    NM_USUARIO,
    NM_USUARIO_NREC,
    DT_ATUALIZACAO_NREC,
    NR_SEQ_MAIN_DAILY_REP,
    DT_TARGET,
    CD_DEPARTMENT,
    CD_WARD,
    QT_FIXED_BEDS,
    QT_PREVIOUS_DAY,
    QT_CURRENT_PATIENTS_HOSP,
    QT_PATIENTS_HOSP,
    QT_DISCHARGE_PATIENTS,
    QT_DECEASED_PATIENTS,
    QT_TRANSF_PATIENTS_IN,
    QT_TRANSF_PATIENTS_OUT,
    QT_LEAVING_PATIENTS_TEMP,
    QT_OUTNIGHT_PATIENTS,
    QT_FAMILY_ATTEND,
    QT_LITTER_PATIENTS,
    QT_ACCOMP_PATIENTS,
    QT_INDEP_PATIENTS,
    QT_FALL_RISK_PATIENTS_I,
    QT_FALL_RISK_PATIENTS_II,
    QT_FALL_RISK_PATIENTS_III,
    QT_PATIENTS_A_I,
    QT_PATIENTS_A_II,
    QT_PATIENTS_A_III,
    QT_PATIENTS_A_IV,
    QT_PATIENTS_B_I,
    QT_PATIENTS_B_II,
    QT_PATIENTS_B_III,
    QT_PATIENTS_B_IV,
    QT_PATIENTS_C_I,
    QT_PATIENTS_C_II,
    QT_PATIENTS_C_III,
    QT_PATIENTS_C_IV,
    QT_OPERATIONS,
    QT_DELIVERIES,
    QT_NEWBORNS,
    IE_MAIN_FLAG,
    QT_NIGHT,
    QT_DAY,
    QT_EVENING,
    QT_INQUIRIES,
    QT_AMBULANCE,
    QT_TOTAL,
    QT_SUM) VALUES (
      nextval('agreg_number_patient_seq'),
      clock_timestamp(),
      nm_usuario_p,
      nm_usuario_p,
      clock_timestamp(),
      NR_SEQ_DAILY_REPORT_P,
      clock_timestamp(),
      NULL,
      CD_WARD_W,
      QT_FIXED_BEDS_W,
      QT_PREVIOUS_DAY_W,
      QT_CURRENT_PATIENTS_HOSP_W,
      QT_PATIENTS_HOSP_W,
      QT_DISCHARGE_PATIENTS_W,
      QT_DECEASED_PATIENTS_W,
      QT_TRANSF_PATIENTS_IN_W,
      QT_TRANSF_PATIENTS_OUT_W,
      QT_LEAVING_PATIENTS_TEMP_W,
      QT_OUTNIGHT_PATIENTS_W,
      QT_FAMILY_ATTEND_W,
      QT_LITTER_PATIENTS_W,
      QT_ACCOMP_PATIENTS_W,
      QT_INDEP_PATIENTS_W,
      QT_FALL_RISK_PATIENTS_I_W,
      QT_FALL_RISK_PATIENTS_II_W,
      QT_FALL_RISK_PATIENTS_III_W,
      QT_PATIENTS_A_I_W,
      QT_PATIENTS_A_II_W,
      QT_PATIENTS_A_III_W,
      QT_PATIENTS_A_IV_W,
      QT_PATIENTS_B_I_W,
      QT_PATIENTS_B_II_W,
      QT_PATIENTS_B_III_W,
      QT_PATIENTS_B_IV_W,
      QT_PATIENTS_C_I_W,
      QT_PATIENTS_C_II_W,
      QT_PATIENTS_C_III_W,
      QT_PATIENTS_C_IV_W,
      QT_OPERATIONS_W,
      QT_DELIVERIES_W,
      QT_NEWBORNS_W,
      IE_MAIN_FLAG_P,
      QT_NIGHT_W,
      QT_DAY_W,
      QT_EVENING_W,
      QT_INQUIRIES_W,
      QT_AMBULANCE_W,
      QT_TOTAL_W,
      QT_SUM_W
    );
END;
COMMIT;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aggregation_proc_managem_pck.gerar_depart_man_daily (NR_SEQ_DAILY_REPORT_P bigint, CD_ESTABELECIMENTO_P bigint, IE_MAIN_FLAG_P bigint,nm_usuario_p AGREG_NUMBER_PATIENT.NM_USUARIO%TYPE) FROM PUBLIC;
