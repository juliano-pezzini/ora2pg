-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE aggregation_proc_managem_pck.gerar_agreg_hosp_transfer_in (NR_SEQ_DAILY_REPORT_P bigint, CD_ESTABELECIMENTO_P bigint, IE_MAIN_FLAG_P bigint,nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


CD_WARD_W                      bigint;
NR_ATENDIMENTO_W               ATENDIMENTO_PACIENTE.NR_ATENDIMENTO%TYPE;
CD_PATIENT_W                   ATENDIMENTO_PACIENTE.CD_PESSOA_FISICA%TYPE;
IE_CLASSIFICATION_W            ATENDIMENTO_PACIENTE.IE_TIPO_ATENDIMENTO%TYPE;
QT_AGE_W                       bigint;
IE_GENDER_W                    varchar(10);
DT_HOSP_TRANSFER_W             ATEND_PACIENTE_UNIDADE.DT_SAIDA_UNIDADE%TYPE;
CD_DEPARTMENT_W                ATEND_PACIENTE_UNIDADE.CD_DEPARTAMENTO%TYPE;
CD_PREVIOUS_ROOM_W             ATEND_PACIENTE_UNIDADE.CD_UNIDADE_BASICA%TYPE;
CD_ATTENDING_PHYSICIAN_W       ATENDIMENTO_PACIENTE.CD_MEDICO_RESP%TYPE;
CD_MAIN_DIAGNOSIS_W            DIAGNOSTICO_DOENCA.CD_DOENCA%TYPE;
NR_SEQ_INTERNO_W               ATEND_PACIENTE_UNIDADE.NR_SEQ_INTERNO%TYPE;
CD_SETOR_ATENDIMENTO_W         ATEND_PACIENTE_UNIDADE.CD_SETOR_ATENDIMENTO%TYPE;
DT_DISCHARGE_TRANSFER_W        ATEND_PACIENTE_UNIDADE.DT_SAIDA_UNIDADE%TYPE;
COUNT_W                        bigint;
DT_ENTRADA_W                   ATENDIMENTO_PACIENTE.DT_ENTRADA%TYPE;
CD_ROOM_W                      ATEND_PACIENTE_UNIDADE.CD_UNIDADE_BASICA%TYPE;
IE_EXIST_W                     bigint;


C01 CURSOR FOR
  SELECT  
	  AP.NR_ATENDIMENTO,
	  AP.CD_PESSOA_FISICA, 
	  AP.IE_TIPO_ATENDIMENTO, 
	  OBTER_IDADE_PF(AP.CD_PESSOA_FISICA, clock_timestamp(), 'A'),
	  OBTER_SEXO_PF(AP.CD_PESSOA_FISICA, 'D'),
    AP.DT_ENTRADA,
	  AP.CD_MEDICO_RESP 
    FROM ATENDIMENTO_PACIENTE AP, ATEND_PACIENTE_UNIDADE APU
    WHERE TRUNC(AP.DT_ENTRADA) = TRUNC(clock_timestamp() - interval '1 days') 
    AND AP.NR_ATENDIMENTO = APU.NR_ATENDIMENTO
    AND AP.IE_TIPO_ATENDIMENTO = 1
    AND APU.CD_SETOR_ATENDIMENTO = (
      SELECT MAX(CD_WARD)
        FROM AGREG_MAIN_DAILY_REPORTS
        WHERE NR_SEQUENCIA = NR_SEQ_DAILY_REPORT_P
        AND CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P);


BEGIN

  -- OBTER SETOR DE ATENDIMENTO
  SELECT MAX(CD_WARD)
    INTO STRICT CD_WARD_W
  FROM AGREG_MAIN_DAILY_REPORTS
  WHERE NR_SEQUENCIA = NR_SEQ_DAILY_REPORT_P
  AND CD_ESTABELECIMENTO = CD_ESTABELECIMENTO_P;

  CD_DEPARTMENT_W := OBTER_DEPARTAMENTO_SETOR(CD_WARD_W);
  IE_CLASSIFICATION_W := 1;

  --VALIDA SE JA FOI GERADO O RELATORIO NO DIA, CASO JA EXISTIR O RELATORIO, ELE DEVERA SER DELETADO PARA QUE SEJA GERADO O NOVO RELATORIO
  SELECT COUNT(*)
    INTO STRICT IE_EXIST_W
  FROM AGREG_HOSP_TRANSFER_IN
  WHERE TRUNC(DT_TARGET) = TRUNC(clock_timestamp()) 
  AND CD_WARD = CD_WARD_W;

  IF (IE_EXIST_W > 0) THEN
    DELETE from AGREG_HOSP_TRANSFER_IN
    WHERE TRUNC(DT_TARGET) = TRUNC(clock_timestamp())
    AND CD_WARD = CD_WARD_W;
  END IF;

BEGIN
  OPEN C01;
    LOOP
      FETCH C01 INTO
        NR_ATENDIMENTO_W,
        CD_PATIENT_W,
        IE_CLASSIFICATION_W,
        QT_AGE_W,
        IE_GENDER_W,
        DT_ENTRADA_W,
        CD_ATTENDING_PHYSICIAN_W;
      EXIT WHEN NOT FOUND; /* apply on C01 */

    --VERIFICA SE EXISTE MOVIMENTACAO DO PACIENTE
      SELECT	COUNT(*)
      INTO STRICT	COUNT_W
      FROM	ATEND_PACIENTE_UNIDADE APU
      WHERE	APU.NR_ATENDIMENTO	= NR_ATENDIMENTO_W;

    --VERIFICA SE EXISTE SETORES ANTERIORES DA MOVIMENTACAO ATUAL
      IF (COUNT_W > 1) THEN
        SELECT	MAX(APU.NR_SEQ_INTERNO)
        INTO STRICT	NR_SEQ_INTERNO_W
        FROM	ATEND_PACIENTE_UNIDADE APU
        WHERE	APU.NR_ATENDIMENTO	= NR_ATENDIMENTO_W;

      --OBTER QUARTO, SETOR E DATA DA TRANSFERENCIA
        SELECT	APU.CD_UNIDADE_BASICA,
                APU.CD_SETOR_ATENDIMENTO,
                APU.DT_SAIDA_UNIDADE
          INTO STRICT CD_PREVIOUS_ROOM_W,
               CD_SETOR_ATENDIMENTO_W,
               DT_HOSP_TRANSFER_W
        FROM	ATEND_PACIENTE_UNIDADE APU
        WHERE	APU.NR_ATENDIMENTO	= NR_ATENDIMENTO_W
        AND   APU.NR_SEQ_INTERNO <> NR_SEQ_INTERNO_W
        ORDER BY DT_ENTRADA_UNIDADE DESC LIMIT 1;

        IF (DT_HOSP_TRANSFER_W IS NOT NULL AND DT_HOSP_TRANSFER_W::text <> '') THEN
          DT_ENTRADA_W := NULL;
        END IF;

      --CLASSIFICACAO ALTERA PARA 2(TRASFER)
        IE_CLASSIFICATION_W := 2;

        --QUARTO DEPOIS DE TRANSFERIR
        SELECT MAX(CD_UNIDADE_BASICA)
          INTO STRICT CD_ROOM_W
        FROM ATEND_PACIENTE_UNIDADE APU
        WHERE APU.NR_ATENDIMENTO = NR_ATENDIMENTO_W;
      END IF;

    --DIAGNOSTICO
      SELECT MAX(CD_DOENCA)
        INTO STRICT CD_MAIN_DIAGNOSIS_W
      FROM DIAGNOSTICO_DOENCA D
      WHERE D.NR_ATENDIMENTO = NR_ATENDIMENTO_W
      AND TRUNC(DT_DIAGNOSTICO) = TRUNC(clock_timestamp() - interval '1 days');

      IF (NR_SEQ_DAILY_REPORT_P > 0 and (CD_SETOR_ATENDIMENTO_W IS NOT NULL AND CD_SETOR_ATENDIMENTO_W::text <> ''))THEN

        INSERT INTO AGREG_HOSP_TRANSFER_IN(
          NR_SEQUENCIA,
          DT_ATUALIZACAO,
          NM_USUARIO,
          NM_USUARIO_NREC,
          DT_ATUALIZACAO_NREC,
          NR_SEQ_MAIN_DAILY_REP,
          DT_TARGET,
          CD_WARD,
          IE_CLASSIFICATION,
          CD_PATIENT,
          QT_AGE,
          IE_GENDER,
          DT_HOSP_TRANSFER,
          CD_DEPARTMENT,
          CD_ROOM,
          CD_PREVIOUS_ROOM,
          CD_ATTENDING_PHYSICIAN,
          CD_MAIN_DIAGNOSIS,
          IE_MAIN_FLAG)
            VALUES (
              nextval('agreg_hosp_transfer_in_seq'),
              clock_timestamp(),
              nm_usuario_p,
              nm_usuario_p,
              clock_timestamp(),
              NR_SEQ_DAILY_REPORT_P,
              clock_timestamp(),
              CD_SETOR_ATENDIMENTO_W,
              IE_CLASSIFICATION_W,
              CD_PATIENT_W,
              QT_AGE_W,
              IE_GENDER_W,
              coalesce(DT_ENTRADA_W, DT_HOSP_TRANSFER_W),
              CD_DEPARTMENT_W,
              CD_ROOM_W,
              CD_PREVIOUS_ROOM_W,
              CD_ATTENDING_PHYSICIAN_W,
              CD_MAIN_DIAGNOSIS_W,
              IE_MAIN_FLAG_P
              );
      END IF;
    END LOOP;
  CLOSE C01;
END;
COMMIT;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aggregation_proc_managem_pck.gerar_agreg_hosp_transfer_in (NR_SEQ_DAILY_REPORT_P bigint, CD_ESTABELECIMENTO_P bigint, IE_MAIN_FLAG_P bigint,nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
