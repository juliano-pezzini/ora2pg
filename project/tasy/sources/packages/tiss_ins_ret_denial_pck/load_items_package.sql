-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE tiss_ins_ret_denial_pck.load_items (nr_seq_guia_p convenio_retorno_item.nr_sequencia%type) AS $body$
DECLARE


/* 
	Counter. 
*/
i integer;

/*
	Patient account number.
*/
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
/*
	Billing form identifier.
*/
cd_autorizacao_w	conta_paciente_guia.cd_autorizacao%Type;

/*
	Procedure code generated during billing generation.
*/
cd_proc_tiss_w		proc_paciente_tiss.vl_campo%type;
		
/*	Patient account's medical procedures. */

procedimentos CURSOR FOR
SELECT	nr_sequencia,
	ie_origem_proced,
	cd_procedimento,	
	cd_procedimento_tuss,
	cd_procedimento_convenio,
	dt_procedimento,
	dt_conta,
	cd_setor_atendimento,
	vl_procedimento,
	vl_medico,
	vl_custo_operacional,
	cd_edicao_amb cd_edicao,
	ie_funcao_medico,
	coalesce(nr_doc_convenio,cd_autorizacao_w) 	nr_doc_convenio
from	procedimento_paciente
where	nr_interno_conta  			= nr_interno_conta_w
and	coalesce(nr_doc_convenio,cd_autorizacao_w) 	= cd_autorizacao_w
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	qt_procedimento 			> 0

union

select	p.nr_sequencia,
	p.cd_procedimento,
	p.ie_origem_proced,
	p.cd_procedimento_tuss,
	p.cd_procedimento_convenio,
	p.dt_procedimento,
	p.dt_conta,
	p.cd_setor_atendimento,
	pp.vl_conta,
	pp.vl_participante,
	0 vl_custo_operacional,
	p.cd_edicao_amb cd_edicao,
	pp.ie_funcao ie_funcao_medico,
	coalesce(nr_doc_convenio,cd_autorizacao_w) 	nr_doc_convenio
from	procedimento_paciente p,
	procedimento_participante pp
where	p.nr_interno_conta  				= nr_interno_conta_w
and	p.nr_sequencia 					= pp.nr_sequencia
and	coalesce(nr_doc_convenio,cd_autorizacao_w) 	= cd_autorizacao_w
and	coalesce(p.cd_motivo_exc_conta::text, '') = ''
and	p.qt_procedimento 				> 0
order by 
	cd_procedimento, 
	nr_sequencia desc;

/*	Patient account's medical materials and medicines. */
	
materiais CURSOR FOR
SELECT	a.nr_sequencia 				nr_sequencia,
	a.cd_material 				cd_material,
	a.cd_material_tiss 			cd_material_tiss,
	a.cd_material_tuss 			cd_material_tuss,
	a.cd_material_convenio 			cd_material_convenio,
	a.dt_atendimento 			dt_atendimento,
	a.dt_conta 				dt_conta,
	a.vl_material 				vl_material,
	a.qt_material 				qt_material,
	a.vl_unitario 				vl_unitario,
	coalesce(tiss_obter_codigo_tabela(a.nr_seq_tiss_tabela),'00') cd_edicao,
	coalesce(nr_doc_convenio,cd_autorizacao_w) 	nr_doc_convenio,
	a.cd_setor_atendimento			cd_setor_atendimento
from	material_atend_paciente a
where	a.nr_interno_conta 			= nr_interno_conta_w
and	coalesce(nr_doc_convenio,cd_autorizacao_w) 	= cd_autorizacao_w
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	qt_material 				> 0
order by 
	cd_material, 
	nr_sequencia desc;
	
BEGIN

	/* Find the patient account number and billing form identifier. */

	select	max(nr_interno_conta),
		max(cd_autorizacao)
	into STRICT	nr_interno_conta_w,
		cd_autorizacao_w
	from	convenio_retorno_item
	where	nr_sequencia = nr_seq_guia_p;
	
	PERFORM set_config('tiss_ins_ret_denial_pck.nr_seq_guia_w', nr_seq_guia_p, false);
	
	
	/* Populate procedimento table proc_w for each patient account's medical procedure. */

	i := 0;
	for procedimento in procedimentos loop
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].nr_sequencia 			:= procedimento.nr_sequencia;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_procedimento 		:= procedimento.cd_procedimento;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_procedimento_tuss 		:= procedimento.cd_procedimento_tuss;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_procedimento_convenio 	:= procedimento.cd_procedimento_convenio;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_edicao_amb 		:= procedimento.cd_edicao;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_setor_atendimento 		:= procedimento.cd_setor_atendimento;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].nr_doc_convenio		:= procedimento.nr_doc_convenio;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].dt_procedimento		:= procedimento.dt_procedimento;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].dt_conta			:= procedimento.dt_conta;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].vl_procedimento		:= procedimento.vl_procedimento;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].vl_medico			:= procedimento.vl_medico;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].ie_funcao_medico		:= procedimento.ie_funcao_medico;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].ie_origem_proced		:= procedimento.ie_origem_proced;
		current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].ie_status			:= 'N';
		
		select 	max(vl_campo)
		into STRICT	cd_proc_tiss_w
		from	proc_paciente_tiss
		where	nr_seq_procedimento = current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].nr_sequencia
		and	ds_campo = 'CD_PROC_TISS';
		
		if (cd_proc_tiss_w IS NOT NULL AND cd_proc_tiss_w::text <> '') then
			current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_proc_tiss_xml	:= cd_proc_tiss_w;

			/* TO_NUMBER to avoid left padded zeroes */

			begin
				current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_proc_tiss		:= (cd_proc_tiss_w)::numeric;
			exception
			when others then
				current_setting('tiss_ins_ret_denial_pck.proc_w')::proc_v[i].cd_proc_tiss 		:= null;
			end;
		end if;

		i := i + 1;
	end loop;
	
	/* Populate procedimento table proc_w for each patient account's medical material and medicine. */

	i := 0;
	for material in materiais loop
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].nr_sequencia			:= material.nr_sequencia;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_material			:= material.cd_material;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_material_tiss		:= material.cd_material_tiss;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_material_tuss		:= material.cd_material_tuss;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_material_convenio		:= material.cd_material_convenio;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_edicao_amb			:= material.cd_edicao;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].cd_setor_atendimento		:= material.cd_setor_atendimento;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].nr_doc_convenio		:= material.nr_doc_convenio;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].dt_atendimento			:= material.dt_atendimento;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].dt_conta			:= material.dt_conta;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].vl_material			:= material.vl_material;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].vl_unitario			:= material.vl_unitario;
		current_setting('tiss_ins_ret_denial_pck.mat_w')::mat_v[i].ie_status			:= 'N';
		i := i + 1;
	end loop;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tiss_ins_ret_denial_pck.load_items (nr_seq_guia_p convenio_retorno_item.nr_sequencia%type) FROM PUBLIC;
