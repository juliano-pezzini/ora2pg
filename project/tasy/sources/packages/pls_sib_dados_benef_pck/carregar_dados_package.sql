-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sib_dados_benef_pck.carregar_dados ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, cd_estabelecimento_p pls_parametros.cd_estabelecimento%type) AS $body$
DECLARE


ie_plano_diferente_w		varchar(1);
dt_contratacao_seg_ant_w	pls_segurado.dt_contratacao%type;

C01 CURSOR(	nr_seq_segurado_pc	pls_segurado.nr_sequencia%type) FOR
	SELECT	a.dt_alteracao,
		a.nr_seq_plano_atual,
		a.nr_seq_plano_ant,
		coalesce(b.ie_acao_alt_produto,'M') ie_acao_alt_produto
	from	pls_segurado_alt_plano a,
		pls_motivo_alteracao_plano b
	where	b.nr_sequencia = a.nr_seq_motivo_alt
	and	a.nr_seq_segurado = nr_seq_segurado_pc
	and	a.nr_seq_plano_atual <> a.nr_seq_plano_ant
	and	a.ie_situacao = 'A'
	order by a.dt_alteracao;

BEGIN
CALL CALL CALL CALL CALL pls_sib_dados_benef_pck.carregar_parametros(cd_estabelecimento_p);
begin
	select	a.nr_cpf,
		b.cd_cco,
		coalesce(h.nm_pessoa_fisica,a.nm_pessoa_fisica),
		a.dt_nascimento,
		CASE WHEN a.ie_sexo='M' THEN '1' WHEN a.ie_sexo='F' THEN '3' END  current_setting('pls_sib_dados_benef_pck.ie_sexo')::varchar(1),
		lpad(a.nr_pis_pasep,11,'0') current_setting('pls_sib_dados_benef_pck.cd_pis_pasep')::varchar(11),
		obter_nome_mae_pf(a.cd_pessoa_fisica) current_setting('pls_sib_dados_benef_pck.nm_mae')::varchar(255),
		lpad(a.cd_declaracao_nasc_vivo,11,0) current_setting('pls_sib_dados_benef_pck.cd_declaracao_nasc_vivo')::varchar(11),
		substr(a.nr_cartao_nac_sus,1,15) current_setting('pls_sib_dados_benef_pck.nr_cartao_nac_sus')::varchar(20),
		pls_obter_dados_segurado(b.nr_sequencia, 'C') current_setting('pls_sib_dados_benef_pck.cd_beneficiario')::varchar(30),
		pls_obter_dados_segurado(b.nr_seq_titular, 'C') current_setting('pls_sib_dados_benef_pck.cd_beneficiario_titular')::varchar(30),
		coalesce(b.dt_alienacao, b.dt_contratacao) current_setting('pls_sib_dados_benef_pck.dt_contratacao')::timestamp,
		b.nr_seq_plano,
		CASE WHEN d.ie_regulamentacao='P' THEN d.nr_protocolo_ans  ELSE null END  current_setting('pls_sib_dados_benef_pck.nr_plano_ans')::varchar(20),
		CASE WHEN d.ie_regulamentacao='P' THEN null  ELSE CASE WHEN current_setting('pls_sib_dados_benef_pck.ie_scpa_contrato_w')::pls_parametros.ie_scpa_contrato%type='S' THEN coalesce(c.cd_scpa,d.cd_scpa)  ELSE d.cd_scpa END  END  current_setting('pls_sib_dados_benef_pck.nr_plano_operadora')::varchar(20),
		CASE WHEN d.ie_regulamentacao='P' THEN (select	coalesce(x.nr_prot_ans_origem,b.nr_seq_portabilidade)						from	pls_portab_pessoa x						where	x.nr_sequencia = b.nr_seq_portabilidade						and	(x.nr_prot_ans_origem IS NOT NULL AND x.nr_prot_ans_origem::text <> ''))  ELSE null END  current_setting('pls_sib_dados_benef_pck.nr_plano_portabilidade')::varchar(20), --So pode gerar portabilidade para plano regulamentado
		c.cd_scpa,
		CASE WHEN(select	count(1)			from	pls_carencia		a			where	a.nr_seq_segurado	= nr_seq_segurado_p			and	a.ie_cpt		= 'S'			and	a.qt_dias		> 0)=0 THEN 0  ELSE 1 END  current_setting('pls_sib_dados_benef_pck.ie_cpt')::smallint,
		b.nr_seq_parentesco,
		CASE WHEN coalesce(b.nr_seq_titular::text, '') = '' THEN 1  ELSE e.cd_sib END  current_setting('pls_sib_dados_benef_pck.cd_relacao_dependencia')::smallint,
		CASE WHEN d.ie_regulamentacao='R' THEN 1  ELSE 0 END  current_setting('pls_sib_dados_benef_pck.ie_itens_excluidos_cobertura')::smallint,
		CASE WHEN coalesce(c.cd_caepf::text, '') = '' THEN CASE WHEN coalesce(f.nr_matricula_cei::text, '') = '' THEN c.cd_cgc_estipulante  ELSE null END   ELSE null END  current_setting('pls_sib_dados_benef_pck.nr_cnpj')::varchar(14),
		CASE WHEN coalesce(c.cd_caepf::text, '') = '' THEN f.nr_matricula_cei  ELSE null END  current_setting('pls_sib_dados_benef_pck.nr_cei')::varchar(50),
		c.cd_caepf,
		a.cd_pessoa_fisica,
		c.nr_sequencia,
		b.nr_seq_subestipulante,
		b.dt_rescisao,
		b.dt_reativacao,
		g.cd_motivo_cancelamento,
		g.nr_sequencia,
		b.nr_sequencia,
		b.nr_seq_segurado_ant,
		(select	count(1)
		from	pls_segurado_status x
		where	b.nr_sequencia = x.nr_seq_segurado
		and	x.ie_envio_sib = 2) qt_envio_alt,
		d.ie_tipo_operacao,
		b.dt_alienacao
	into STRICT	current_setting('pls_sib_dados_benef_pck.nr_cpf')::varchar(15),
		current_setting('pls_sib_dados_benef_pck.cd_cco')::varchar(15),
		current_setting('pls_sib_dados_benef_pck.nm_beneficiario')::varchar(255),
		current_setting('pls_sib_dados_benef_pck.dt_nascimento')::timestamp,
		current_setting('pls_sib_dados_benef_pck.ie_sexo')::varchar(1),
		current_setting('pls_sib_dados_benef_pck.cd_pis_pasep')::varchar(11),
		current_setting('pls_sib_dados_benef_pck.nm_mae')::varchar(255),
		current_setting('pls_sib_dados_benef_pck.cd_declaracao_nasc_vivo')::varchar(11),
		current_setting('pls_sib_dados_benef_pck.nr_cartao_nac_sus')::varchar(20),
		current_setting('pls_sib_dados_benef_pck.cd_beneficiario')::varchar(30),
		current_setting('pls_sib_dados_benef_pck.cd_beneficiario_titular')::varchar(30),
		current_setting('pls_sib_dados_benef_pck.dt_contratacao')::timestamp,
		current_setting('pls_sib_dados_benef_pck.nr_seq_plano')::bigint,
		current_setting('pls_sib_dados_benef_pck.nr_plano_ans')::varchar(20),
		current_setting('pls_sib_dados_benef_pck.nr_plano_operadora')::varchar(20),
		current_setting('pls_sib_dados_benef_pck.nr_plano_portabilidade')::varchar(20),
		current_setting('pls_sib_dados_benef_pck.cd_scpa_contrato')::varchar(30),
		current_setting('pls_sib_dados_benef_pck.ie_cpt')::smallint,
		current_setting('pls_sib_dados_benef_pck.nr_seq_parentesco')::bigint,
		current_setting('pls_sib_dados_benef_pck.cd_relacao_dependencia')::smallint,
		current_setting('pls_sib_dados_benef_pck.ie_itens_excluidos_cobertura')::smallint,
		current_setting('pls_sib_dados_benef_pck.nr_cnpj')::varchar(14),
		current_setting('pls_sib_dados_benef_pck.nr_cei')::varchar(50),
		current_setting('pls_sib_dados_benef_pck.cd_caepf')::pls_contrato.cd_caepf%type,
		current_setting('pls_sib_dados_benef_pck.cd_pessoa_fisica_w')::pessoa_fisica.cd_pessoa_fisica%type,
		current_setting('pls_sib_dados_benef_pck.nr_seq_contrato_w')::pls_contrato.nr_sequencia%type,
		current_setting('pls_sib_dados_benef_pck.nr_seq_subestipulante_w')::pls_segurado.nr_seq_subestipulante%type,
		current_setting('pls_sib_dados_benef_pck.dt_rescisao')::timestamp,
		current_setting('pls_sib_dados_benef_pck.dt_reativacao')::timestamp,
		current_setting('pls_sib_dados_benef_pck.cd_motivo_cancelamento')::bigint,
		current_setting('pls_sib_dados_benef_pck.nr_seq_motivo_cancel')::bigint,
		current_setting('pls_sib_dados_benef_pck.nr_seq_segurado')::bigint,
		current_setting('pls_sib_dados_benef_pck.nr_seq_segurado_ant_w')::pls_segurado.nr_sequencia%type,
		current_setting('pls_sib_dados_benef_pck.qt_envio_alt_w')::bigint,
		current_setting('pls_sib_dados_benef_pck.ie_tipo_operacao')::pls_plano.ie_tipo_operacao%type,
		current_setting('pls_sib_dados_benef_pck.dt_alienacao')::pls_segurado.dt_alienacao%type
	FROM pls_plano d, pessoa_fisica a
LEFT OUTER JOIN pls_pessoa_fisica h ON (a.cd_pessoa_fisica = h.cd_pessoa_fisica)
, pls_segurado b
LEFT OUTER JOIN grau_parentesco e ON (b.nr_seq_parentesco = e.nr_sequencia)
LEFT OUTER JOIN pls_motivo_cancelamento g ON (b.nr_seq_motivo_cancelamento = g.nr_sequencia)
, pls_contrato c
LEFT OUTER JOIN pessoa_juridica f ON (c.cd_cgc_estipulante = f.cd_cgc)
WHERE a.cd_pessoa_fisica = b.cd_pessoa_fisica and b.nr_seq_contrato = c.nr_sequencia and b.nr_seq_plano = d.nr_sequencia   and b.nr_sequencia = nr_seq_segurado_p;
	
	PERFORM set_config('pls_sib_dados_benef_pck.nm_beneficiario', pls_sib_dados_benef_pck.ajustar_caracteres(current_setting('pls_sib_dados_benef_pck.nm_beneficiario')::varchar(255), 'S'), false);
	PERFORM set_config('pls_sib_dados_benef_pck.nm_mae', pls_sib_dados_benef_pck.ajustar_caracteres(current_setting('pls_sib_dados_benef_pck.nm_mae')::varchar(255), 'S'), false);
exception
when others then
	PERFORM set_config('pls_sib_dados_benef_pck.nr_cpf', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_cco', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nm_beneficiario', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.dt_nascimento', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.ie_sexo', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_pis_pasep', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nm_mae', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_declaracao_nasc_vivo', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_cartao_nac_sus', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_beneficiario', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_beneficiario_titular', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.dt_contratacao', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_seq_plano', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_plano_ans', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_plano_operadora', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_plano_portabilidade', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.ie_cpt', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.ie_itens_excluidos_cobertura', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_cnpj', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_cei', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_caepf', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_seq_parentesco', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_relacao_dependencia', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_seq_subestipulante_w', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.dt_rescisao', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.dt_reativacao', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.cd_motivo_cancelamento', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_seq_motivo_cancel', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.nr_seq_segurado', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.ie_tipo_operacao', null, false);
	PERFORM set_config('pls_sib_dados_benef_pck.dt_alienacao', null, false);
end;
if (current_setting('pls_sib_dados_benef_pck.cd_pessoa_fisica_w')::pessoa_fisica.cd_pessoa_fisica%(type IS NOT NULL AND type::text <> '')) then
	begin
		SELECT * FROM pls_sib_dados_benef_pck.obter_enderecos_benef(	current_setting('pls_sib_dados_benef_pck.cd_pessoa_fisica_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('pls_sib_dados_benef_pck.nr_seq_contrato_w')::pls_contrato.nr_sequencia%type, current_setting('pls_sib_dados_benef_pck.nr_seq_subestipulante_w')::pls_segurado.nr_seq_subestipulante%type, current_setting('pls_sib_dados_benef_pck.ie_logradouro_sib_w')::pls_parametros.ie_logradouro_sib%type, current_setting('pls_sib_dados_benef_pck.ie_tipo_endereco')::varchar(2), current_setting('pls_sib_dados_benef_pck.ds_logradouro')::varchar(255), current_setting('pls_sib_dados_benef_pck.nr_logradouro')::varchar(5), current_setting('pls_sib_dados_benef_pck.ds_complemento')::varchar(60), current_setting('pls_sib_dados_benef_pck.ds_bairro')::varchar(60), current_setting('pls_sib_dados_benef_pck.cd_municipio_ibge')::varchar(7), current_setting('pls_sib_dados_benef_pck.cd_municipio_ibge_resid')::varchar(6), current_setting('pls_sib_dados_benef_pck.cd_cep')::varchar(8), current_setting('pls_sib_dados_benef_pck.ie_reside_exterior')::smallint) INTO STRICT current_setting('pls_sib_dados_benef_pck.ie_tipo_endereco')::varchar(2), current_setting('pls_sib_dados_benef_pck.ds_logradouro')::varchar(255), current_setting('pls_sib_dados_benef_pck.nr_logradouro')::varchar(5), current_setting('pls_sib_dados_benef_pck.ds_complemento')::varchar(60), current_setting('pls_sib_dados_benef_pck.ds_bairro')::varchar(60), current_setting('pls_sib_dados_benef_pck.cd_municipio_ibge')::varchar(7), current_setting('pls_sib_dados_benef_pck.cd_municipio_ibge_resid')::varchar(6), current_setting('pls_sib_dados_benef_pck.cd_cep')::varchar(8), current_setting('pls_sib_dados_benef_pck.ie_reside_exterior')::smallint;
	exception
	when others then
		PERFORM set_config('pls_sib_dados_benef_pck.ie_tipo_endereco', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.ds_logradouro', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.nr_logradouro', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.ds_complemento', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.ds_bairro', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.cd_municipio_ibge', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.cd_municipio_ibge_resid', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.cd_cep', null, false);
		PERFORM set_config('pls_sib_dados_benef_pck.ie_reside_exterior', null, false);
	end;
end if;

if (current_setting('pls_sib_dados_benef_pck.nr_seq_subestipulante_w')::pls_segurado.nr_seq_subestipulante%(type IS NOT NULL AND type::text <> '')) and (current_setting('pls_sib_dados_benef_pck.ie_cnpj_subestipulante_sib_w')::pls_parametros.ie_cnpj_subestipulante_sib%type = 'S') then
	begin
	select	CASE WHEN coalesce(b.nr_matricula_cei::text, '') = '' THEN b.cd_cgc  ELSE null END ,
		b.nr_matricula_cei
	into STRICT	current_setting('pls_sib_dados_benef_pck.nr_cnpj')::varchar(14),
		current_setting('pls_sib_dados_benef_pck.nr_cei')::varchar(50)
	FROM pls_sub_estipulante a
LEFT OUTER JOIN pessoa_juridica b ON (a.cd_cgc = b.cd_cgc)
WHERE a.nr_sequencia = current_setting('pls_sib_dados_benef_pck.nr_seq_subestipulante_w')::pls_segurado.nr_seq_subestipulante%type;
	exception
	when others then
		null;
	end;
end if;

--Se tiver alteracao de produto como mudanca contratual, precisa atualizar a data de contratacao

for r_c01_w in C01(nr_seq_segurado_p) loop
	begin
	if (r_c01_w.ie_acao_alt_produto = 'M') then
		select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_plano_diferente_w
		from	pls_plano a
		where	a.nr_sequencia	= r_c01_w.nr_seq_plano_atual
		and	exists (	SELECT	1
				from	pls_plano b
				where	b.nr_sequencia		= r_c01_w.nr_seq_plano_ant
				and (a.nr_protocolo_ans	<> b.nr_protocolo_ans or
					a.cd_scpa <> b.cd_scpa or
					a.ie_regulamentacao <> b.ie_regulamentacao));
		
		if	((ie_plano_diferente_w = 'S') and (r_c01_w.dt_alteracao >= coalesce(current_setting('pls_sib_dados_benef_pck.dt_alienacao')::pls_segurado.dt_alienacao%type,r_c01_w.dt_alteracao))) then
			PERFORM set_config('pls_sib_dados_benef_pck.dt_contratacao', r_c01_w.dt_alteracao, false);
		end if;
	end if;
	end;
end loop;

--Se tiver segurado anterior e o status for de retificacao, precisa atualizar a data de contratacao conforme o anterior.

if	((current_setting('pls_sib_dados_benef_pck.nr_seq_segurado_ant_w')::pls_segurado.nr_sequencia%(type IS NOT NULL AND type::text <> '')) and (current_setting('pls_sib_dados_benef_pck.qt_envio_alt_w')::bigint > 0)) then
	select	max(current_setting('pls_sib_dados_benef_pck.dt_contratacao')::timestamp)
	into STRICT	dt_contratacao_seg_ant_w
	from	pls_segurado
	where	nr_sequencia	= current_setting('pls_sib_dados_benef_pck.nr_seq_segurado_ant_w')::pls_segurado.nr_sequencia%type;
	
	if (dt_contratacao_seg_ant_w >= coalesce(current_setting('pls_sib_dados_benef_pck.dt_alienacao')::pls_segurado.dt_alienacao%type,dt_contratacao_seg_ant_w)) then
		PERFORM set_config('pls_sib_dados_benef_pck.dt_contratacao', dt_contratacao_seg_ant_w, false);
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sib_dados_benef_pck.carregar_dados ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, cd_estabelecimento_p pls_parametros.cd_estabelecimento%type) FROM PUBLIC;
