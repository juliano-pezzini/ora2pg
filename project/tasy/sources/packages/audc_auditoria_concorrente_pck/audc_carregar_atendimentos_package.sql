-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE audc_auditoria_concorrente_pck.audc_carregar_atendimentos ( nr_seq_lote_atend_imp_p audc_lote_atendimento_imp.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE



nr_seq_audc_atend_w		audc_atendimento.nr_sequencia%type;
nr_seq_audc_atend_proc_w	audc_atend_proc.nr_sequencia%type;
ie_origem_auditoria_w		audc_atendimento.ie_origem_auditoria%type;
qt_material_w			bigint;

C01 CURSOR(  nr_seq_lote_atend_imp_pc	audc_lote_atendimento_imp.nr_sequencia%type ) FOR
	SELECT 	ie_tipo_guia, dt_atualizacao, nr_seq_lote_atend_imp,
		nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
		cd_guia_prestador, cd_guia_principal, cd_guia_operadora,
		dt_validade_senha, cd_cartao_beneficiario, ie_recem_nascido,
		ie_carater_atend, cd_tipo_internacao, cd_tipo_atendimento,
		dt_inicio_internacao, dt_alta_internacao, cd_motivo_alta,
		nr_seq_segurado, vl_total_procedimento, vl_total_diaria,
 		vl_total_taxa_aluguel, vl_total_material, vl_total_medicamento,
		vl_total_opme, vl_total_gases_medicinais, vl_total_geral,
		nr_seq_prestador_solic, nr_seq_prestador_exec,
		cd_estabelecimento, nr_seq_guia, nr_sequencia,
		cd_unidade_internacao, cd_medico_solicitante,	
		(SELECT max(b.nr_sequencia) from audc_atendimento b where b.nr_seq_guia = a.nr_seq_guia and b.ie_estagio <> 'PC') nr_seq_audc_atend_ant,
		ds_indicacao_clinica, dt_alta_prevista, ie_benef_home_care
	from 	audc_atendimento_imp a
	where	a.nr_seq_lote_atend_imp = nr_seq_lote_atend_imp_pc
	and	a.ie_status_auditoria = 'S';

C02 CURSOR(  	nr_seq_audc_atend_imp_pc	audc_atendimento_imp.nr_sequencia%type,
		nr_seq_audc_atend_pc		audc_atendimento.nr_sequencia%type ) FOR

	SELECT	cd_despesa, cd_material, cd_tabela,
		cd_ref_fabricante, cd_via_acesso, cd_unidade_medida,
		ds_material, qt_solicitado, qt_executado,
		tx_reducao_acrescimo, nr_registro_anvisa, dt_exec_inicial,
		dt_exec_final, vl_unitario, vl_total, nr_seq_material,
		(SELECT max(b.nr_sequencia) from audc_atend_mat b where	b.nr_seq_audc_atend = nr_seq_audc_atend_pc and	b.nr_seq_material = a.nr_seq_material) nr_seq_atend_mat_ant
	from	audc_atend_mat_imp a
	where	nr_seq_audc_atend_imp = nr_seq_audc_atend_imp_pc;


C03 CURSOR(  	nr_seq_audc_atend_imp_pc	audc_atendimento_imp.nr_sequencia%type,
		nr_seq_audc_atend_pc		audc_atendimento.nr_sequencia%type ) FOR

	SELECT	nr_sequencia, nr_seq_audc_atend_imp, cd_despesa,
		cd_procedimento, cd_tabela, cd_via_acesso,
		cd_unidade_medida, ds_procedimento, qt_solicitado,
		qt_executado, tx_reducao_acrescimo, dt_exec_inicial,
		dt_exec_final, vl_unitario, vl_total,ie_origem_proced,
		(SELECT max(b.nr_sequencia) from audc_atend_proc b where b.nr_seq_audc_atend = nr_seq_audc_atend_pc and	b.cd_procedimento = a.cd_procedimento and b.ie_origem_proced = a.ie_origem_proced ) nr_seq_atend_proc_ant
	from	audc_atend_proc_imp a
	where	nr_seq_audc_atend_imp = nr_seq_audc_atend_imp_pc;

C04 CURSOR(  	nr_seq_audc_proc_imp_pc		audc_atend_proc_imp.nr_sequencia%type,
		nr_seq_audc_atend_proc_pc	audc_atend_proc_part.nr_sequencia%type) FOR

	SELECT	nr_sequencia, nr_seq_audc_proc_imp, cd_grau_partic,
 		cd_cpf_profissional, cd_prof_operadora, nr_crm_profissional,
 		cd_conselho_profissional, cd_uf_crm_profissional, cd_cbo_saude_profissional,
 		nm_profissional,
		(SELECT max(b.nr_sequencia) from audc_atend_proc_part b where b.nr_seq_audc_atend_proc = nr_seq_audc_atend_proc_pc and b.nr_crm_profissional = a.nr_crm_profissional ) nr_seq_audc_proc_part_ant
	from	audc_atend_proc_part_imp a
	where	nr_seq_audc_proc_imp = nr_seq_audc_proc_imp_pc;


C05 CURSOR(  	nr_seq_audc_atend_imp_pc	audc_atendimento_imp.nr_sequencia%type,
		nr_seq_audc_atend_pc		audc_atendimento.nr_sequencia%type ) FOR

	SELECT	nr_sequencia, cd_doenca, nr_seq_audc_atend_imp,
		(SELECT max(b.nr_sequencia) from audc_atend_diag b where b.nr_seq_audc_atend = nr_seq_audc_atend_pc and	b.cd_doenca = a.cd_doenca ) nr_seq_atend_diag_ant
	from	audc_atend_diag_imp a
	where	nr_seq_audc_atend_imp = nr_seq_audc_atend_imp_pc;

C06 CURSOR(  	nr_seq_audc_atend_imp_pc	audc_atendimento_imp.nr_sequencia%type,
		nr_seq_audc_atend_pc		audc_atendimento.nr_sequencia%type ) FOR
	
	SELECT  a.nr_sequencia, a.dt_historico, a.ds_historico,
		(SELECT max(b.nr_sequencia) from audc_atend_historico b where b.nr_seq_audc_atend = nr_seq_audc_atend_pc and b.dt_historico = a.dt_historico ) nr_seq_atend_hist_ant
	from    audc_atend_historico_imp a
	where   a.nr_seq_audc_atend_imp = nr_seq_audc_atend_imp_pc;


	
C07 CURSOR(  	nr_seq_atend_mat_ant_pc		audc_atend_mat.nr_sequencia%type ) FOR
	SELECT	cd_via_acesso, cd_unidade_medida, qt_executado,
		vl_unitario, vl_total
	from	audc_atend_mat a
	where	nr_sequencia = nr_seq_atend_mat_ant_pc;


C08 CURSOR(  	nr_seq_atend_proc_ant_pc	audc_atend_proc.nr_sequencia%type) FOR

	SELECT	cd_via_acesso, cd_unidade_medida, qt_executado,
		tx_reducao_acrescimo,  dt_exec_inicial, dt_exec_final, 
		vl_unitario, vl_total
	from	audc_atend_proc a
	where	a.nr_sequencia = nr_seq_atend_proc_ant_pc;
	
BEGIN

select 	max(b.ie_origem_lote)
into STRICT	ie_origem_auditoria_w
from 	audc_lote_atendimento_imp b
where 	b.nr_sequencia = nr_seq_lote_atend_imp_p;


for c01_w in C01( nr_seq_lote_atend_imp_p ) loop

	if ( coalesce(c01_w.nr_seq_audc_atend_ant::text, '') = '' ) then
		insert into audc_atendimento(
			nr_sequencia, ie_tipo_guia, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_guia_prestador, cd_guia_principal, cd_guia_operadora,
			dt_validade_senha, cd_cartao_beneficiario, ie_recem_nascido,
			ie_carater_atend, cd_tipo_internacao, cd_tipo_atendimento,
			dt_inicio_internacao, dt_alta_internacao, cd_motivo_alta,
			nr_seq_segurado, vl_total_procedimento, vl_total_diaria,
	 		vl_total_taxa_aluguel, vl_total_material, vl_total_medicamento,
			vl_total_opme, vl_total_gases_medicinais, vl_total_geral,
			nr_seq_prestador_solic, nr_seq_prestador_exec, ie_estagio,
			cd_estabelecimento, nr_seq_guia, nr_seq_lote_atend_imp,
			ie_origem_auditoria, dt_geracao_auditoria, cd_unidade_internacao,
			ds_indicacao_clinica, dt_alta_prevista, cd_medico_solicitante,
			ie_benef_home_care)
		values (	nextval('audc_atendimento_seq'), c01_w.ie_tipo_guia, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			c01_w.cd_guia_prestador, c01_w.cd_guia_principal, c01_w.cd_guia_operadora,
			c01_w.dt_validade_senha, c01_w.cd_cartao_beneficiario, c01_w.ie_recem_nascido,
			c01_w.ie_carater_atend, c01_w.cd_tipo_internacao, c01_w.cd_tipo_atendimento,
			c01_w.dt_inicio_internacao, c01_w.dt_alta_internacao, c01_w.cd_motivo_alta,
			c01_w.nr_seq_segurado, c01_w.vl_total_procedimento, c01_w.vl_total_diaria,
	 		c01_w.vl_total_taxa_aluguel, c01_w.vl_total_material, c01_w.vl_total_medicamento,
			c01_w.vl_total_opme, c01_w.vl_total_gases_medicinais, c01_w.vl_total_geral,
			c01_w.nr_seq_prestador_solic, c01_w.nr_seq_prestador_exec, 'AU',
			c01_w.cd_estabelecimento, c01_w.nr_seq_guia, nr_seq_lote_atend_imp_p,
			ie_origem_auditoria_w, clock_timestamp(), c01_w.cd_unidade_internacao,
			c01_w.ds_indicacao_clinica, c01_w.dt_alta_prevista, c01_w.cd_medico_solicitante,
			c01_w.ie_benef_home_care) returning nr_sequencia into nr_seq_audc_atend_w;			
			
	else
		nr_seq_audc_atend_w := c01_w.nr_seq_audc_atend_ant;
	end if;


	for c02_w in C02( c01_w.nr_sequencia, nr_seq_audc_atend_w ) loop

		if ( coalesce(c02_w.nr_seq_atend_mat_ant::text, '') = '' ) then

			insert into audc_atend_mat(
				nr_sequencia, nr_seq_audc_atend, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_despesa, nr_seq_material,
				cd_ref_fabricante, cd_via_acesso, cd_unidade_medida,
				qt_solicitado,qt_executado, tx_reducao_acrescimo,
				dt_exec_inicial, dt_exec_final,vl_unitario,
				vl_total, nr_registro_anvisa)
			values (	nextval('audc_atend_mat_seq'), nr_seq_audc_atend_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				c02_w.cd_despesa, c02_w.nr_seq_material,
				c02_w.cd_ref_fabricante, c02_w.cd_via_acesso, c02_w.cd_unidade_medida,
				c02_w.qt_solicitado,c02_w.qt_executado, c02_w.tx_reducao_acrescimo,
				c02_w.dt_exec_inicial, c02_w.dt_exec_final,c02_w.vl_unitario,
				c02_w.vl_total, c02_w.nr_registro_anvisa);
		else
			for c07_w in C07( c02_w.nr_seq_atend_mat_ant ) loop
				if ( c07_w.qt_executado <> c02_w.qt_executado ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(), 
						' QT_EXECUTADO = '||c07_w.qt_executado||' QT_EXECUTADO='|| c02_w.qt_executado,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				 if ( c07_w.cd_unidade_medida <> c02_w.cd_unidade_medida ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' CD_UNIDADE_MEDIDA = '|| c07_w.cd_unidade_medida ||' CD_UNIDADE_MEDIDA='|| c02_w.cd_unidade_medida,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
			
				if ( c07_w.cd_via_acesso <> c02_w.cd_via_acesso ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' CD_VIA_ACESSO = '|| c07_w.cd_via_acesso ||' CD_VIA_ACESSO='|| c02_w.cd_via_acesso,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				if ( c07_w.vl_unitario <> c02_w.vl_unitario ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' VL_UNITARIO = '|| c07_w.vl_unitario ||' VL_UNITARIO='|| c02_w.vl_unitario,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				if ( c07_w.vl_total <> c02_w.vl_total ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' VL_TOTAL = '|| c07_w.vl_total ||' VL_TOTAL='|| c02_w.vl_total,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
			end loop;
			
			update 	audc_atend_mat
			set	cd_via_acesso = c02_w.cd_via_acesso,
				cd_unidade_medida = c02_w.cd_unidade_medida,
				qt_solicitado = c02_w.qt_solicitado,
				qt_executado = c02_w.qt_executado,
				vl_unitario = c02_w.vl_unitario,
				vl_total = c02_w.vl_total,
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_sequencia = c02_w.nr_seq_atend_mat_ant;
		end if;
	end loop;


	for c03_w in C03( c01_w.nr_sequencia, nr_seq_audc_atend_w ) loop

		if ( coalesce(c03_w.nr_seq_atend_proc_ant::text, '') = '' ) then

			insert into audc_atend_proc(
				nr_sequencia, nr_seq_audc_atend, dt_atualizacao,
 				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
 				cd_via_acesso, cd_unidade_medida, qt_solicitado,
 				qt_executado, tx_reducao_acrescimo, dt_exec_inicial,
 				dt_exec_final, vl_unitario,  vl_total,
 				cd_procedimento, ie_origem_proced)
			values (	nextval('audc_atend_proc_seq'), nr_seq_audc_atend_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				c03_w.cd_via_acesso, c03_w.cd_unidade_medida, c03_w.qt_solicitado,
 				c03_w.qt_executado, c03_w.tx_reducao_acrescimo, c03_w.dt_exec_inicial,
 				c03_w.dt_exec_final, c03_w.vl_unitario, c03_w.vl_total,
 				c03_w.cd_procedimento, c03_w.ie_origem_proced) returning nr_sequencia into nr_seq_audc_atend_proc_w;
		else
			nr_seq_audc_atend_proc_w := c03_w.nr_seq_atend_proc_ant;
			
			
			
			for c08_w in C08( nr_seq_audc_atend_proc_w ) loop
			
				if ( c08_w.qt_executado <> c03_w.qt_executado ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' QT_EXECUTADO = '|| c08_w.qt_executado ||' QT_EXECUTADO='|| c03_w.qt_executado,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				 if ( c08_w.cd_unidade_medida <> c03_w.cd_unidade_medida ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' CD_UNIDADE_MEDIDA = '|| c08_w.cd_unidade_medida ||' CD_UNIDADE_MEDIDA='|| c03_w.cd_unidade_medida,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
			
				if ( c08_w.cd_via_acesso <> c03_w.cd_via_acesso ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' CD_VIA_ACESSO = '|| c08_w.cd_via_acesso ||' CD_VIA_ACESSO='|| c03_w.cd_via_acesso,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				if ( c08_w.vl_unitario <> c03_w.vl_unitario ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' VL_UNITARIO = '|| c08_w.vl_unitario ||' VL_UNITARIO='|| c03_w.vl_unitario,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
				
				if ( c08_w.vl_total <> c03_w.vl_total ) then
					CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'LS', clock_timestamp(),
						' VL_TOTAL = '|| c08_w.vl_total ||' VL_TOTAL='|| c03_w.vl_total,
						c01_w.nr_seq_segurado, nm_usuario_p);
				end if;
			end loop;
			
			
			update 	audc_atend_proc
			set	cd_via_acesso = c03_w.cd_via_acesso ,
				cd_unidade_medida = c03_w.cd_unidade_medida , 
				qt_solicitado = c03_w.qt_solicitado,
 				qt_executado = c03_w.qt_executado, 
				tx_reducao_acrescimo = c03_w.tx_reducao_acrescimo, 
				cd_procedimento = c03_w.cd_procedimento, 
				ie_origem_proced = c03_w.ie_origem_proced,
				vl_unitario = c03_w.vl_unitario,  
				vl_total =  c03_w.vl_total,
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p
			where	nr_sequencia = nr_seq_audc_atend_proc_w;
		end if;
		
		
		for c04_w in C04( c03_w.nr_sequencia, nr_seq_audc_atend_proc_w ) loop
		
			if ( coalesce(c04_w.nr_seq_audc_proc_part_ant::text, '') = '' ) then
			
				insert into audc_atend_proc_part(
					nr_sequencia, nr_seq_audc_atend_proc, dt_atualizacao,                 
 					nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,                
 					cd_grau_partic, cd_cbo_saude_profissional, nr_crm_profissional)
				values (	nextval('audc_atend_proc_part_seq'), nr_seq_audc_atend_proc_w, clock_timestamp(),
					nm_usuario_p, clock_timestamp(), nm_usuario_p,
					c04_w.cd_grau_partic, c04_w.cd_cbo_saude_profissional, c04_w.nr_crm_profissional);				
			end if;		
		end loop;	
		
	end loop;


	for c05_w in C05( c01_w.nr_sequencia, nr_seq_audc_atend_w ) loop

		if ( coalesce(c05_w.nr_seq_atend_diag_ant::text, '') = '' ) then

			insert into audc_atend_diag(
				nr_sequencia, cd_doenca, nr_seq_audc_atend,
 				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
 				nm_usuario_nrec)
			values (	nextval('audc_atend_diag_seq'), c05_w.cd_doenca, nr_seq_audc_atend_w,
				clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p);
		end if;
	end loop;
	
	
	for c06_w in C06( c01_w.nr_sequencia, nr_seq_audc_atend_w ) loop

		if ( coalesce(c06_w.nr_seq_atend_hist_ant::text, '') = '' ) then
			
			CALL audc_auditoria_concorrente_pck.audc_gravar_historico( nr_seq_audc_atend_w, 'HP', c06_w.dt_historico,
						c06_w.ds_historico, c01_w.nr_seq_segurado, nm_usuario_p);						
		end if;
	end loop;


	--Vincular as inconsistencia de elegibilidade para as tabelas de auditoria

	update	audc_atend_elegibilidade
	set	nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp(),
		nr_seq_audc_atend = nr_seq_audc_atend_w
	where	nr_seq_audc_atend_imp = c01_w.nr_sequencia;

end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE audc_auditoria_concorrente_pck.audc_carregar_atendimentos ( nr_seq_lote_atend_imp_p audc_lote_atendimento_imp.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
