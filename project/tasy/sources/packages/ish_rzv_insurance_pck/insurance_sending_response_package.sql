-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------
'_-rzvish_-insuranceCreateresponse'
'_-rzvish_-insuranceChangeresponse'
'_-rzvish_-insuranceCancelresponse'
*/
CREATE OR REPLACE PROCEDURE ish_rzv_insurance_pck.insurance_sending_response (nr_sequencia_p bigint, ds_xml_p text) is ds_erro_w varchar(4000) RETURNS FROM AS $body$
DECLARE
 "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:_-rzvish_-insuranceCreateResponse' passing xml_w columns
	insurancedata xml path 'InsurData',
	return xml	path 'Return')

union all

SELECT  'A' ie_tipo,
	insurancedata,
	return
from	xmltable(
		xmlnamespaces(
		'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:_-rzvish_-insuranceChangeResponse' passing xml_w columns
	insurancedata xml path 'InsurData',
	return xml	path 'Return')

union all

select  'E' ie_tipo,
	insurancedata,
	return
from	xmltable(
		xmlnamespaces(
		'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:_-rzvish_-insuranceCancelResponse' passing xml_w columns
	insurancedata xml path 'InsurData',
	return xml	path 'Return');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/InsurData/item' passing insurancedata_w columns
	resptype	varchar(1)	path	'Type',
	externalid	varchar(20)	path	'Id',
	lfdnr		varchar(3)	path 	'Lfdnr',
	rangf		varchar(2)	path	'Rangf');
	
c02_w	c02%rowtype;

ie_status_w			intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';


BEGIN
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);
ish_converter_response(nr_sequencia_p, ds_xml_p, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		nr_doc_externo  = NULL,
		ie_response_procedure = 'S',
		ds_log  = NULL,
		dt_atualizacao = clock_timestamp(),
		ds_xml_retorno = ds_xml_p
	where	nr_sequencia = nr_sequencia_p;
else	
	begin
	begin
	select	a.nr_seq_documento,
		coalesce(b.ie_conversao,'I'),
		b.nr_seq_sistema,
		b.nr_seq_projeto_xml,
		b.nr_seq_regra_conv,
		a.nr_seq_agrupador
	into STRICT	nr_seq_doc_origem_w,
		ie_conversao_w,
		nr_seq_sistema_w,
		nr_seq_projeto_xml_w,
		nr_seq_regra_w,
		nr_seq_agrupador_w
	from	intpd_fila_transmissao a,
		intpd_eventos_sistema b
	where	a.nr_seq_evento_sistema = b.nr_sequencia
	and	a.nr_sequencia = nr_sequencia_p;
	exception
	when others then
		null;
	end;

	
	nr_atendimento_w	:= obter_valor_campo_separador(nr_seq_doc_origem_w, 1, current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10));
	nr_seq_interno_w 	:= obter_valor_campo_separador(nr_seq_doc_origem_w, 2, current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10));
	nr_seq_episodio_w 	:= obter_valor_campo_separador(nr_seq_doc_origem_w, 3, current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10));
	
	open c01;
	loop
	fetch c01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		insurancedata_w	:= c01_w.insurancedata;
		
		if (c01_w.ie_tipo = 'I') then --apenas quando insert
		
			open c02;
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */				
				
				--grava a conversao meio externo do nr_seq_interno da atend_categoria_convenio, com o recebido no arquivo
				CALL gerar_conv_meio_externo(null,
							'ATEND_CATEGORIA_CONVENIO',
							'NR_SEQ_INTERNO',
							nr_seq_interno_w,
							substr( nr_seq_interno_w || current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10) || c02_w.lfdnr|| current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10) || c02_w.rangf,1,40),							
							null,
							nr_seq_regra_w,
							'A',
							'INTPDTASY');
			
			end loop;
			close c02;

		end if;
		
		ish_return_processing(nr_sequencia_p, c01_w.return, ie_status_w);

	end loop;
	close c01;
	
	--ish_rzv_insurance_pck.replicar_convenios_atend(nr_seq_episodio_w, nr_atendimento_w, null);
	update	intpd_fila_transmissao
	set	ie_status 			= coalesce(ie_status_w,'S'),
		ie_response_procedure	= 'S',
		ds_xml_retorno		= ds_xml_p
	where	nr_sequencia 		= nr_sequencia_p;

	exception
	when others then
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		update	intpd_fila_transmissao
		set	ie_status 			= 'E',
			ie_response_procedure	= 'S',
			ds_log 			= ds_erro_w,
			ds_xml_retorno		= ds_xml_p
		where	nr_sequencia 		= nr_sequencia_p;
	end;
end if;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_rzv_insurance_pck.insurance_sending_response (nr_sequencia_p bigint, ds_xml_p text) is ds_erro_w varchar(4000) FROM PUBLIC;
