-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------
'_-rzvish_-insuranceSwapInsprovResponse'
*/
CREATE OR REPLACE PROCEDURE ish_rzv_insurance_pck.insurance_swap_response (nr_sequencia_p bigint, ds_xml_p text) AS $body$
DECLARE


xml_w             xml;
ie_status_w       intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w    intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';

ds_erro_w		varchar(4000);
insurswap_w 		xml;
nr_seq_documento_w	intpd_fila_transmissao.nr_seq_documento%type;
nr_atendimento_w	atendimento_paciente.nr_atendimento%type;
cd_convenio_w		convenio.cd_convenio%type;
nr_seq_interno_w	atend_categoria_convenio.nr_seq_interno%type;
atend_categoria_convenio_w	atend_categoria_convenio%rowtype;
nr_seq_regra_w		intpd_eventos_sistema.nr_seq_regra_conv%type;
ie_executar_trigger_w	varchar(1) := wheb_usuario_pck.get_ie_executar_trigger;

c01 CURSOR FOR
	SELECT	*
	from	xmltable('/NewInsurData/item' passing insurswap_w columns
		client		varchar(3)		path		'Client',
		institution	varchar(4)		path		'Institution',
		patientid	varchar(10)		path		'Patientid',
		patcaseid	varchar(10)		path		'Patcaseid',
		lfdnr		varchar(3)		path		'Lfdnr',
		kostr		varchar(10)		path		'Kostr',
		patkz		varchar(1)		path		'Patkz',
		storn		varchar(1)		path		'Storn'	
	);

c01_w	c01%rowtype;



BEGIN
ish_converter_response(nr_sequencia_p, ds_xml_p, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		nr_doc_externo  = NULL,
		ie_response_procedure = 'S',
		ds_log  = NULL,
		dt_atualizacao = clock_timestamp(),
		ds_xml_retorno = ds_xml_p
	where   nr_sequencia = nr_sequencia_p;
else
	begin
		select	a.newinsurdata
		into STRICT	insurswap_w
		from	xmltable(
				xmlnamespaces(
				'urn:sap-com:document:sap:soap:functions:mc-style' as "n0",
				'http://schemas.xmlsoap.org/soap/envelope/' as "soap-env"),
				'soap-env:Envelope/soap-env:Body/n0:_-rzvish_-insuranceSwapInsprovResponse' passing xml_w columns
			newinsurdata xmltype path 'NewInsurData') a;

		select	a.nr_seq_documento,
				b.nr_seq_regra_conv
		into STRICT	nr_seq_documento_w,
				nr_seq_regra_w
		from	intpd_fila_transmissao a,
				intpd_eventos_sistema b
		where	a.nr_seq_evento_sistema = b.nr_sequencia
		and		a.nr_sequencia = nr_sequencia_p;

		open C01;
		loop
		fetch C01 into c01_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (coalesce(c01_w.storn, 'NULL') = 'NULL') then
				nr_atendimento_w	:=	obter_valor_campo_separador(nr_seq_documento_w, 1, current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10));
				begin
				select	cd_convenio
				into STRICT	cd_convenio_w
				from	convenio
				where	cd_cgc = c01_w.kostr;
				exception
				when others then
					cd_convenio_w	:= null;
				end;
				
				select	min(x.nr_seq_interno)
				into STRICT	nr_seq_interno_w
				from	atend_categoria_convenio x
				where	x.nr_atendimento	= nr_atendimento_w;

				if (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then
					begin
					begin
					select	*
					into STRICT	atend_categoria_convenio_w
					from	atend_categoria_convenio
					where	nr_atendimento = nr_atendimento_w
					and	nr_Seq_interno = nr_seq_interno_w;
					exception
					when others then
						atend_categoria_convenio_w	:=	null;
					end;
					
					CALL wheb_usuario_pck.set_ie_executar_trigger('N');

					if (coalesce(cd_convenio_w, 0) > 0) then
						update	atend_categoria_convenio
						set		cd_convenio	= cd_convenio_w
						where	nr_seq_interno	= nr_seq_interno_w;
					end if;

					CALL wheb_usuario_pck.set_ie_executar_trigger(ie_executar_trigger_w);
					
					CALL gerar_conv_meio_externo(null,
								'ATEND_CATEGORIA_CONVENIO',
								'NR_SEQ_INTERNO',
								nr_seq_interno_w,
								substr( nr_seq_interno_w || current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10) || c01_w.lfdnr|| current_setting('ish_rzv_insurance_pck.ds_separador_w')::varchar(10) || atend_categoria_convenio_w.nr_prioridade,1,40),							
								null,
								nr_seq_regra_w,
								'A',
								'INTPDTASY');
					end;
				end if;
			end if;
			end;
		end loop;
		close C01;

		update	intpd_fila_transmissao
		set	ie_status = coalesce(ie_status_w,'S'),
			ie_response_procedure	= 'S',
			ds_xml_retorno = ds_xml_p
		where	nr_sequencia = nr_sequencia_p;
	exception
	when others then
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		update	intpd_fila_transmissao
		set	ie_status 		= 'E',
			ie_response_procedure	= 'S',
			ds_log 			= ds_erro_w,
			ds_xml_retorno		= ds_xml_p
		where	nr_sequencia 		= nr_sequencia_p;
	end;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_rzv_insurance_pck.insurance_swap_response (nr_sequencia_p bigint, ds_xml_p text) FROM PUBLIC;
