-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ocor_imp_pck.pls_gerar_agrup_obs_ocor ( nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
-- variaveis de controle para buscar a sequancia do agrupador

nr_seq_agrupador_w	pls_ocorrencia_imp.ie_agrupador_obs%type;
nr_seq_conta_ant_w	pls_ocorrencia_imp.nr_seq_conta%type;
ds_observacao_ant_w	pls_ocorrencia_imp.ds_observacao%type;
-- variavel de controle para popular as variaveis table

nr_contador_w	integer;

-- variaveis para o update na tabela PLS_OCORRENCIA_IMP

tb_nr_seq_ocor_imp_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_agrupador_w	pls_util_cta_pck.t_number_table;

C01 CURSOR(	nr_seq_lote_conta_pc	pls_protocolo_conta.nr_seq_lote%type,
		nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type,
		nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		nr_seq_conta_proc_pc	pls_conta_proc.nr_sequencia%type,
		nr_seq_conta_mat_pc	pls_conta_mat.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_conta,
		coalesce(a.ds_observacao,'X') ds_observacao
	from	pls_protocolo_conta_imp c,
		pls_conta_imp b,
		pls_ocorrencia_imp a
	where	c.nr_seq_lote_protocolo	= nr_seq_lote_conta_pc
	and	b.nr_seq_protocolo	= c.nr_sequencia
	and	a.nr_seq_conta		= b.nr_sequencia
	and	a.ie_incidencia_ocor	in ('P', 'M')
	
union	all

	PERFORM	a.nr_sequencia,
		a.nr_seq_conta,
		coalesce(a.ds_observacao,'X') ds_observacao
	from	pls_conta_imp b,
		pls_ocorrencia_imp a
	where	b.nr_seq_protocolo	= nr_seq_protocolo_pc
	and	a.nr_seq_conta		= b.nr_sequencia
	and	a.ie_incidencia_ocor	in ('P', 'M')
	
union	all

	select	a.nr_sequencia,
		a.nr_seq_conta,
		coalesce(a.ds_observacao,'X') ds_observacao
	from	pls_conta_imp b,
		pls_ocorrencia_imp a
	where	b.nr_sequencia		= nr_seq_conta_pc
	and	a.nr_seq_conta		= b.nr_sequencia
	and	coalesce(nr_seq_conta_proc_pc::text, '') = ''
	and	coalesce(nr_seq_conta_mat_pc::text, '') = ''
	and	a.ie_incidencia_ocor	in ('P', 'M')
	
union	all

	select	a.nr_sequencia,
		a.nr_seq_conta,
		coalesce(a.ds_observacao,'X') ds_observacao
	from	pls_conta_proc_imp b,
		pls_ocorrencia_imp a
	where	b.nr_sequencia		= nr_seq_conta_proc_pc
	and	a.nr_seq_conta		= b.nr_seq_conta
	and	a.nr_seq_conta_proc	= b.nr_sequencia
	and	a.ie_incidencia_ocor	in ('P', 'M')
	
union	all

	select	a.nr_sequencia,
		a.nr_seq_conta,
		coalesce(a.ds_observacao,'X') ds_observacao
	from	pls_conta_mat_imp b,
		pls_ocorrencia_imp a
	where	b.nr_sequencia		= nr_seq_conta_mat_pc
	and	a.nr_seq_conta		= b.nr_seq_conta
	and	a.nr_seq_conta_mat	= b.nr_sequencia
	and	a.ie_incidencia_ocor	in ('P', 'M')
	order by ds_observacao,
		nr_seq_conta;
BEGIN

-- Rotina para gravar uma sequancia para os itens com mesma observaaao de ocorrancia.

-- Desta forma, facilitando a identificaaao por agrupamento destes itens posteriormente.


nr_seq_conta_ant_w	:= 0;
ds_observacao_ant_w	:= '';

-- Rotina chamada para limpar as variaveis table e zerar o contador do FOR

SELECT * FROM pls_ocor_imp_pck.pls_insert_agrup_ocor(	tb_nr_seq_ocor_imp_w, tb_nr_seq_agrupador_w, nr_contador_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_seq_ocor_imp_w := _ora2pg_r.tb_nr_seq_ocor_imp_p; tb_nr_seq_agrupador_w := _ora2pg_r.tb_nr_seq_agrupador_p; nr_contador_w := _ora2pg_r.nr_contador_p;

for	r_C01_w	in C01(	nr_seq_lote_conta_p, nr_seq_protocolo_p,
			nr_seq_conta_p, nr_seq_conta_proc_p,
			nr_seq_conta_mat_p) loop
	
	-- Verifica se a conta e a observaaao ja armazenadas sao diferentes das que o cursor vai retornando

	-- Caso a conta ou a observaaao sejam diferentes, a sequancia agrupadora a incrementada

	if (nr_seq_conta_ant_w <> r_C01_w.nr_seq_conta) or (ds_observacao_ant_w <> r_C01_w.ds_observacao) then
		nr_seq_conta_ant_w	:= r_C01_w.nr_seq_conta;
		ds_observacao_ant_w	:= r_C01_w.ds_observacao;
		
		select	nextval('pls_id_agrup_obs_ocor_seq')
		into STRICT	nr_seq_agrupador_w
		;
	end if;
	
	tb_nr_seq_ocor_imp_w(nr_contador_w)	:= r_C01_w.nr_sequencia;
	tb_nr_seq_agrupador_w(nr_contador_w)	:= nr_seq_agrupador_w;
	
	-- Se atingir o limite, manda para o banco, caso contrario incrementa o contador

	if (nr_contador_w	>= pls_util_pck.qt_registro_transacao_w) then
		
		SELECT * FROM pls_ocor_imp_pck.pls_insert_agrup_ocor(	tb_nr_seq_ocor_imp_w, tb_nr_seq_agrupador_w, nr_contador_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_seq_ocor_imp_w := _ora2pg_r.tb_nr_seq_ocor_imp_p; tb_nr_seq_agrupador_w := _ora2pg_r.tb_nr_seq_agrupador_p; nr_contador_w := _ora2pg_r.nr_contador_p;
	else
		nr_contador_w	:= nr_contador_w + 1;
	end if;
end loop;

-- Verificamos se existem registros ainda nas tables

-- Caso o cursor termine e a variavel nao tenha atingido o limite para mandar para o banco

-- Tudo que sobrou vai para o banco

SELECT * FROM pls_ocor_imp_pck.pls_insert_agrup_ocor(	tb_nr_seq_ocor_imp_w, tb_nr_seq_agrupador_w, nr_contador_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_seq_ocor_imp_w := _ora2pg_r.tb_nr_seq_ocor_imp_p; tb_nr_seq_agrupador_w := _ora2pg_r.tb_nr_seq_agrupador_p; nr_contador_w := _ora2pg_r.nr_contador_p;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ocor_imp_pck.pls_gerar_agrup_obs_ocor ( nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
