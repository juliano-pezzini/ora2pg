-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ocor_imp_pck.grava_ocor_conta ( nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
dados_conta_atual_w	pls_util_cta_pck.dados_conta;
table_feita_w		pls_util_cta_pck.table_conta;
ie_item_valido_w	boolean;		

nr_indice_ins_w			integer;
tb_ins_nr_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_ins_nr_seq_conta_proc_w	pls_util_cta_pck.t_number_table;
tb_ins_nr_seq_conta_mat_w	pls_util_cta_pck.t_number_table;
tb_ins_ds_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;

nr_indice_upd_w		integer;
tb_upd_nr_sequencia_w	pls_util_cta_pck.t_number_table;
tb_upd_ds_observacao_w	pls_util_cta_pck.t_varchar2_table_4000;

-- Retorna apenas a informaaao das contas que estao na tabela de seleaao.

c_gera_ocor_conta CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type,
				nr_seq_ocorrencia_pc	pls_ocorrencia.nr_sequencia%type) FOR
	SELECT	x.nr_seq_conta,
		x.ds_observacao,
		(SELECT	max(CASE WHEN b.ie_filtro_proc='S' THEN  'P'  ELSE CASE WHEN b.ie_filtro_mat='S' THEN  'M'  ELSE 'C' END  END )
		from	pls_oc_cta_filtro b
		where	b.nr_sequencia = x.nr_seq_filtro) ie_incidencia_filtro,
		x.ie_tipo_registro,
		pls_ocor_imp_pck.obter_seq_ocorrencia(	nr_seq_ocorrencia_pc, x.nr_seq_conta, null, null) nr_seq_ocor_exist
	from	pls_oc_cta_selecao_imp	x
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	not exists (	select	1
				from	pls_oc_cta_conta_ex_imp y
				where	y.nr_seq_conta = x.nr_seq_conta);
BEGIN

-- chama somente para limpar as variaveis

SELECT * FROM pls_ocor_imp_pck.inserir_ocorrencia_imp(	null, tb_ins_nr_seq_conta_w, tb_ins_nr_seq_conta_proc_w, tb_ins_nr_seq_conta_mat_w, tb_ins_ds_observacao_w, nr_indice_ins_w, null) INTO STRICT _ora2pg_r;
 tb_ins_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_ins_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_ins_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_ins_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_ins_w := _ora2pg_r.nr_indice_p;
SELECT * FROM pls_ocor_imp_pck.atualizar_ocorrencia_imp(	tb_upd_nr_sequencia_w, tb_upd_ds_observacao_w, nr_indice_upd_w, null) INTO STRICT _ora2pg_r;
 	tb_upd_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_upd_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_upd_w := _ora2pg_r.nr_indice_p;

-- grava as ocorrancias

for r_c_gera_ocor_conta in c_gera_ocor_conta(nr_id_transacao_p, nr_seq_ocorrencia_p) loop
	
	-- Se ja foi gerado para a conta nao gera novamente.

	if (not table_feita_w.exists(r_c_gera_ocor_conta.nr_seq_conta)) then
	
		-- Comeaa sempre como se fosse para gerar. Este controle a feito por que os filtros por item inserem itens que nao filtraram no controle das exceaaes.

		-- portanto precisamos validar.

		ie_item_valido_w := true;
		
		-- Sempre que o filtro incide nos itens deve verificar se o registro sendo visto a do tipo de incidancia do filtro, Se for gera a ocorrancia, se nao nao gera.

		if (r_c_gera_ocor_conta.ie_incidencia_filtro <> 'C') then
		
			ie_item_valido_w := (r_c_gera_ocor_conta.ie_tipo_registro = r_c_gera_ocor_conta.ie_incidencia_filtro);
		end if;
		
		-- se realmente deve gerar

		if (ie_item_valido_w) then
		
			dados_conta_atual_w.nr_sequencia := r_c_gera_ocor_conta.nr_seq_conta;
			table_feita_w(r_c_gera_ocor_conta.nr_seq_conta) := dados_conta_atual_w;
			
			-- se a ocorrancia ja existir sa atualiza a observaaao e ativa ela

			if (r_c_gera_ocor_conta.nr_seq_ocor_exist IS NOT NULL AND r_c_gera_ocor_conta.nr_seq_ocor_exist::text <> '') then
				tb_upd_nr_sequencia_w(nr_indice_upd_w) := r_c_gera_ocor_conta.nr_seq_ocor_exist;
				tb_upd_ds_observacao_w(nr_indice_upd_w) := r_c_gera_ocor_conta.ds_observacao;
			else
				-- dados para a inseraao

				tb_ins_nr_seq_conta_w(nr_indice_ins_w) := r_c_gera_ocor_conta.nr_seq_conta;
				tb_ins_nr_seq_conta_proc_w(nr_indice_ins_w) := null;
				tb_ins_nr_seq_conta_mat_w(nr_indice_ins_w) := null;
				tb_ins_ds_observacao_w(nr_indice_ins_w) := r_c_gera_ocor_conta.ds_observacao;
			end if;
			
			-- se atingiu os registros limite para inseraao

			-- insere no banco e reinicializa as variaveis

			if (nr_indice_ins_w >= pls_util_pck.qt_registro_transacao_w) then
				SELECT * FROM pls_ocor_imp_pck.inserir_ocorrencia_imp(	nr_seq_ocorrencia_p, tb_ins_nr_seq_conta_w, tb_ins_nr_seq_conta_proc_w, tb_ins_nr_seq_conta_mat_w, tb_ins_ds_observacao_w, nr_indice_ins_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_ins_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_ins_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_ins_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_ins_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_ins_w := _ora2pg_r.nr_indice_p;
			else
				nr_indice_ins_w := nr_indice_ins_w + 1;
			end if;
			
			
			-- se atingiu os registros limite para atualizaaao

			-- atualiza no banco e reinicializa as variaveis

			if (nr_indice_upd_w >= pls_util_pck.qt_registro_transacao_w) then
				SELECT * FROM pls_ocor_imp_pck.atualizar_ocorrencia_imp(	tb_upd_nr_sequencia_w, tb_upd_ds_observacao_w, nr_indice_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_upd_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_upd_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_upd_w := _ora2pg_r.nr_indice_p;
			else
				nr_indice_upd_w := nr_indice_upd_w + 1;
			end if;
		end if;
	end if;
end loop; -- c_gera_ocor_conta

-- se sobrou algo para inserir ou atualizar manda para o banco

SELECT * FROM pls_ocor_imp_pck.inserir_ocorrencia_imp(	nr_seq_ocorrencia_p, tb_ins_nr_seq_conta_w, tb_ins_nr_seq_conta_proc_w, tb_ins_nr_seq_conta_mat_w, tb_ins_ds_observacao_w, nr_indice_ins_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 tb_ins_nr_seq_conta_w := _ora2pg_r.tb_nr_seq_conta_p; tb_ins_nr_seq_conta_proc_w := _ora2pg_r.tb_nr_seq_conta_proc_p; tb_ins_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_ins_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_ins_w := _ora2pg_r.nr_indice_p;
SELECT * FROM pls_ocor_imp_pck.atualizar_ocorrencia_imp(	tb_upd_nr_sequencia_w, tb_upd_ds_observacao_w, nr_indice_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_upd_nr_sequencia_w := _ora2pg_r.tb_nr_sequencia_p; tb_upd_ds_observacao_w := _ora2pg_r.tb_ds_observacao_p; nr_indice_upd_w := _ora2pg_r.nr_indice_p;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ocor_imp_pck.grava_ocor_conta ( nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
