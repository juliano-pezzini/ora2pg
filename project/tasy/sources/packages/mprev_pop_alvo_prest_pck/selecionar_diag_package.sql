-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>INSERIR DIAGNOSTICO<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--
CREATE OR REPLACE PROCEDURE mprev_pop_alvo_prest_pck.selecionar_diag ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) AS $body$
DECLARE


	c_regra_diag CURSOR(nr_seq_regra_cubo_pc	bigint) FOR
		SELECT	a.nr_sequencia,
		        a.cd_doenca,
		        a.cd_doenca_inicial,
		        a.cd_doenca_final,
		        a.qt_ocorrencia,
		        a.ie_incluir
		from	mprev_regra_cubo_diag a
		where	a.nr_seq_regra_cubo	= nr_seq_regra_cubo_pc;

	regra_diag_w	regra_diag;
	nr_seq_benef_w	bigint;
	cursor_w	sql_pck.t_cursor;

	-- Tabela para inserir a sequencia do beneficiario que retorna do select dinamico "ds_select_w".
	tb_pop_alvo_sel_diag_w	pls_util_cta_pck.t_number_table;

	
BEGIN

	/* Monta select dinamico */

		PERFORM set_config('mprev_pop_alvo_prest_pck.ds_select_w', ' select	pessoa.nr_sequencia 			' || current_setting('mprev_pop_alvo_prest_pck.enter_w')::pls_util_pck.enter_w%type ||
					' from		mprev_pessoa_cubo_ops pessoa, 		' || current_setting('mprev_pop_alvo_prest_pck.enter_w')::pls_util_pck.enter_w%type ||
					' 			atendimento_paciente atend,			' || current_setting('mprev_pop_alvo_prest_pck.enter_w')::pls_util_pck.enter_w%type ||
					' 			diagnostico_doenca diag				' || current_setting('mprev_pop_alvo_prest_pck.enter_w')::pls_util_pck.enter_w%type ||
					' where		pessoa.cd_pessoa_fisica = atend.cd_pessoa_fisica ' || current_setting('mprev_pop_alvo_prest_pck.enter_w')::pls_util_pck.enter_w%type ||
					' and		atend.nr_atendimento = diag.nr_atendimento ', false);

	if (nr_seq_regra_cubo_p IS NOT NULL AND nr_seq_regra_cubo_p::text <> '')then
		for r_c_regra_diag in c_regra_diag(nr_seq_regra_cubo_p) loop
			regra_diag_w.cd_doenca		:= r_c_regra_diag.cd_doenca;
			regra_diag_w.cd_doenca_inicial  := r_c_regra_diag.cd_doenca_inicial;
			regra_diag_w.cd_doenca_final  	:= r_c_regra_diag.cd_doenca_final;
			regra_diag_w.qt_ocorrencia  	:= r_c_regra_diag.qt_ocorrencia;
			regra_diag_w.ie_incluir		:= r_c_regra_diag.ie_incluir;


			PERFORM set_config('mprev_pop_alvo_prest_pck.ds_restricao_w', mprev_pop_alvo_prest_pck.obter_restricao_diag(regra_diag_w), false);

			PERFORM set_config('mprev_pop_alvo_prest_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_prest_pck.ds_select_w')::varchar(4000) || current_setting('mprev_pop_alvo_prest_pck.ds_restricao_w')::varchar(4000), false);

			current_setting('mprev_pop_alvo_prest_pck.bind_sql_w')::sql_pck.t_dado_bind := sql_pck.executa_sql_cursor(current_setting('mprev_pop_alvo_prest_pck.ds_select_comp_w')::varchar(4000), current_setting('mprev_pop_alvo_prest_pck.bind_sql_w')::sql_pck.t_dado_bind);

			loop

				tb_pop_alvo_sel_diag_w.delete;

				fetch	cursor_w bulk collect
				into	tb_pop_alvo_sel_diag_w
				limit	current_setting('mprev_pop_alvo_prest_pck.qt_reg_commit_w')::integer;

				exit when tb_pop_alvo_sel_diag_w.count = 0;

				-- Incluir as pessoas na selecao
				forall i in tb_pop_alvo_sel_diag_w.first .. tb_pop_alvo_sel_diag_w.last
					insert into mprev_pop_alvo_selecao(nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_populacao_alvo, nr_seq_pessoa_cubo, ie_selecionar,
						nm_tabela_regra_cubo, nr_seq_tabela_regra_cubo)
					values (nextval('mprev_pop_alvo_selecao_seq'), nm_usuario_p, clock_timestamp(),
						nr_seq_populacao_p, tb_pop_alvo_sel_diag_w(i),
						regra_diag_w.ie_incluir, 'MPREV_REGRA_CUBO_DIAG', 4);
				commit;
			end loop;
			close cursor_w;
		end loop;
		commit;
	end if;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_pop_alvo_prest_pck.selecionar_diag ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) FROM PUBLIC;
