-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_interf_i300_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) AS $body$
DECLARE



ds_linha_w			varchar(8000);
sep_w				varchar(1) := '|';
tp_registro_w			varchar(15);
cd_codigo_conta_ecd_w		varchar(40);


c01 CURSOR(
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	dt_ref_inicial_pc	 ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc		 ctb_sped_controle.dt_ref_final%type
	)FOR
	SELECT	distinct
		trunc(a.dt_movimento,'dd') dt_movimento
	from	ctb_movimento_v a
	where	cd_estabelecimento   = cd_estabelecimento_pc
	and	dt_movimento between dt_ref_inicial_pc and dt_ref_final_pc	
	order by 1;
	
type vetor_c01 is table of c01%rowtype index by integer;
v_c01_w    vetor_c01;

c02 CURSOR(
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	dt_movimento_pc		 ctb_movimento.dt_movimento%type
	) FOR
	SELECT	a.cd_classificacao,
		a.cd_conta_contabil,
		CASE WHEN a.ie_centro_custo='N' THEN null  ELSE b.cd_centro_custo END  cd_centro_custo,
		sum(coalesce(CASE WHEN a.cd_conta_contabil=a.cd_conta_debito THEN  b.vl_movimento  ELSE 0 END , a.vl_debito)) vl_debito,
		sum(coalesce(CASE WHEN a.cd_conta_contabil=a.cd_conta_credito THEN  b.vl_movimento  ELSE 0 END ,a.vl_credito)) vl_credito
	FROM ctb_movimento_v a
LEFT OUTER JOIN ctb_movto_centro_custo b ON (a.nr_sequencia = b.nr_seq_movimento)
WHERE a.cd_estabelecimento	= cd_estabelecimento_pc and a.dt_movimento between dt_movimento_pc and fim_dia(dt_movimento_pc) group by
		a.cd_classificacao,
		a.cd_conta_contabil,
		CASE WHEN a.ie_centro_custo='N' THEN null  ELSE b.cd_centro_custo END;

type vetor_c02 is table of c02%rowtype index by integer;
v_c02_w    vetor_c02;
BEGIN

open C01(
	cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,
	dt_ref_inicial_pc	=> regra_sped_p.dt_ref_inicial,
	dt_ref_final_pc		=> regra_sped_p.dt_ref_final
	);
	loop fetch C01 bulk collect into v_c01_w limit 1000;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		for i in v_c01_w.first .. v_c01_w.last loop
		tp_registro_w := 'I300';

		ds_linha_w	:= substr(	sep_w || tp_registro_w 					||
						sep_w || to_char(v_c01_w[i].dt_movimento,'ddmmyyyy') 	|| sep_w,1,8000);
						
		regra_sped_p.cd_registro_variavel := tp_registro_w;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
		tp_registro_w := 'I310';
		open C02(
			cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,
			dt_movimento_pc		=> v_c01_w[i].dt_movimento
			);
			loop fetch C02 bulk collect into v_c02_w limit 1000;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				for y in v_c02_w.first .. v_c02_w.last loop
				
				cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd(ie_tipo_conta_p	=> 'C', 
									ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
									cd_empresa_p		=> null, 
									cd_conta_contabil_p	=> v_c02_w[y].cd_conta_contabil, 
									cd_classificacao_p	=> v_c02_w[y].cd_classificacao,
									dt_vigencia_p		=> null);
			
				ds_linha_w	:= substr(	sep_w || tp_registro_w					||
								sep_w || cd_codigo_conta_ecd_w				|| 
								sep_w || v_c02_w[y].cd_centro_custo			|| 
								sep_w || sped_obter_campo_valor(v_c02_w[y].vl_debito)	|| 
								sep_w || sped_obter_campo_valor(v_c02_w[y].vl_credito)	|| sep_w,1,8000);
		

				regra_sped_p.cd_registro_variavel := tp_registro_w;
				regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
				if (regra_sped_p.registros.count >= 1000) then
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
				end if;	
				
				end loop;
				regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
			end loop;
		close c02;
		end loop;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
	end loop;
close C01;

			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_interf_i300_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) FROM PUBLIC;
