-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_arquivo_ecd (nr_seq_controle_p bigint, nm_usuario_p text) AS $body$
DECLARE

			
qt_contador_w			integer;
qt_total_w			bigint;
ds_arquivo_w			varchar(4000);
ds_arquivo_ww			varchar(4000);
cd_registro_w			varchar(15);
sep_w				varchar(1)	:= '|';
ds_status_proc_longo_w		varchar(100);
cd_emp_controladora_w		empresa.cd_empresa%type;
ie_demonstrativo_consolidado_w	varchar(1):= 'N';
regra_sped_w 			ctb_sped_ecd_pck.regra_sped;
ds_erro_w			varchar(1000);

c_registro CURSOR FOR
	SELECT	cd_registro
	from	ctb_regra_sped_registro
	where	nr_seq_regra_sped	= regra_sped_w.nr_seq_regra_sped
	and	ie_gerar		= 'S'
	order by nr_sequencia;

type  sped_registro is table of c_registro%rowtype index by integer;
sped_registros_w sped_registro;	

BEGIN
	begin
	select	coalesce(a.ie_arquivo,'ECD') ie_arquivo,
		a.ie_inicio_periodo ie_inicio_periodo,
		a.ie_nire  ie_nire,
		a.ie_finalidade_escrit ie_finalidade_escrit,
		a.cd_hash_substituida cd_hash_substituida,
		a.nr_nire_subst nr_nire_subst,
		coalesce(a.cd_versao,'8.0') cd_versao,
		coalesce(a.ie_tipo_ecd,0) ie_tipo_ecd,
		coalesce(a.ie_consolida_multi_empresa,'N') ie_consolida_multi_empresa,
		a.ie_sit_especial_ecd ie_sit_especial_ecd,
		coalesce(a.ie_consolida_empresa, 'N') ie_consolida_empresa,
		a.nr_sequencia nr_sequencia,
		a.cd_empresa_resp cd_empresa_resp,
		cd_instituicao_cad cd_instituicao_cad,
		nr_cad_instituicao nr_cad_instituicao,
		coalesce(a.ie_forma_escrituracao,'G') ie_forma_escrituracao,
		coalesce(a.ie_forma_num_lcto, 'NR') ie_forma_num_lcto, 
		coalesce(a.ie_apres_conta_ctb, 'CD') ie_apres_conta_ctb,
		coalesce(a.ie_periodo, 'A') ie_periodo,
		coalesce(b.nr_seq_demo_bp,0) nr_seq_demo_bp,
		coalesce(b.nr_seq_demo_dre,0) nr_seq_demo_dre,
		coalesce(b.nr_seq_dmpl,0) nr_seq_dmpl,
		b.dt_geracao dt_geracao,
		coalesce(a.ie_demonstrativo, '1') ie_demonstrativo,
		coalesce(a.ds_demonstrativo, '') ds_demonstrativo,
		b.nr_seq_cont_principal nr_seq_cont_principal,
		a.dt_ano dt_ano,
		b.nr_seq_demo_dmpl nr_seq_demo_dmpl,
		b.nr_seq_demo_dlpa nr_seq_demo_dlpa	,
		lpad(b.nr_livro,6,0) nr_livro,
		b.ds_natureza_livro ds_natureza_livro,
		b.dt_ref_inicial dt_ref_inicial,
		b.dt_ref_final dt_ref_final,
		b.nr_seq_regra_sped  nr_seq_regra_sped,
		b.cd_estabelecimento cd_estabelecimento,
		b.cd_empresa cd_empresa,
		b.nr_sequencia nr_seq_controle 
	into STRICT	regra_sped_w.ie_arquivo,
		regra_sped_w.ie_inicio_periodo,
		regra_sped_w.ie_nire,
		regra_sped_w.ie_finalidade_escrit,
		regra_sped_w.cd_hash_substituida,
		regra_sped_w.nr_nire_subst,
		regra_sped_w.cd_versao,
		regra_sped_w.ie_tipo_ecd,
		regra_sped_w.ie_consolida_multi_empresa,
		regra_sped_w.ie_sit_especial_ecd,
		regra_sped_w.ie_consolida_empresa,
		regra_sped_w.nr_sequencia,
		regra_sped_w.cd_empresa_resp,
		regra_sped_w.cd_instituicao_cad,
		regra_sped_w.nr_cad_instituicao,
		regra_sped_w.ie_forma_escrituracao,
		regra_sped_w.ie_forma_num_lcto,
		regra_sped_w.ie_apres_conta_ctb,
		regra_sped_w.ie_periodo,
		regra_sped_w.nr_seq_demo_bp,
		regra_sped_w.nr_seq_demo_dre,
		regra_sped_w.nr_seq_dmpl,
		regra_sped_w.dt_geracao,
		regra_sped_w.ie_demonstrativo,
		regra_sped_w.ds_demonstrativo,
		regra_sped_w.nr_seq_cont_principal,
		regra_sped_w.dt_ano,
		regra_sped_w.nr_seq_demo_dmpl,
		regra_sped_w.nr_seq_demo_dlpa,
		regra_sped_w.nr_livro,
		regra_sped_w.ds_natureza_livro,
		regra_sped_w.dt_ref_inicial,
		regra_sped_w.dt_ref_final,
		regra_sped_w.nr_seq_regra_sped,
		regra_sped_w.cd_estabelecimento,
		regra_sped_w.cd_empresa,
		regra_sped_w.nr_seq_controle
	from	ctb_regra_sped	a,
		ctb_sped_controle b
	where	a.nr_sequencia	= b.nr_seq_regra_sped
	and	b.nr_sequencia	= nr_seq_controle_p;
	exception
		when no_data_found or too_many_rows then
			ds_erro_w := substr(sqlerrm, 1, 1000);
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1126394, 'DS_ERRO=' || ds_erro_w || ';NR_REGRA=' || nr_seq_controle_p );
	end;	

regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.iniciar_totalizadores_blocos(regra_sped_p => regra_sped_w);
	
cd_emp_controladora_w := coalesce(holding_pck.get_emp_controladora_grupo(NULL, regra_sped_w.cd_empresa),0);


case
	when(cd_emp_controladora_w > 0) and ((to_char(regra_sped_w.dt_ref_final,'mm') = '12') and (cd_emp_controladora_w = regra_sped_w.cd_empresa)) then
	ie_demonstrativo_consolidado_w := 'S';
else
	ie_demonstrativo_consolidado_w := 'N';
end case;

select	count(*)
into STRICT	qt_total_w
from	ctb_regra_sped_registro
where	nr_seq_regra_sped	= regra_sped_w.nr_seq_regra_sped;


delete	FROM ctb_sped_registro
where	nr_seq_controle_sped	= nr_seq_controle_p;


commit;

qt_contador_w		:= 0;


ds_status_proc_longo_w	:= wheb_mensagem_pck.get_texto(299429);
CALL gravar_processo_longo(ds_status_proc_longo_w ,'CTB_GERAR_ARQUIVO_ECD',qt_contador_w);


ds_status_proc_longo_w	:= wheb_mensagem_pck.get_texto(299438);
ds_status_proc_longo_w	:= ds_status_proc_longo_w || ': ';


open c_registro;
	loop fetch c_registro bulk collect into sped_registros_w limit 100;
	EXIT WHEN NOT FOUND; /* apply on c_registro */
	for i in sped_registros_w.first .. sped_registros_w.last loop
	begin
	regra_sped_w.cd_registro := sped_registros_w[i].cd_registro;
	qt_contador_w 	:= qt_contador_w + 1;
	
	CALL gravar_processo_longo(ds_status_proc_longo_w || cd_registro_w || ' ('|| qt_contador_w ||'/' ||qt_total_w ||')','CTB_GERAR_ARQUIVO_ECD',qt_contador_w);
	case
		when 	regra_sped_w.cd_registro = '0000' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_0000_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro in ('0001','I001','J001','9001') then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_reg_abertura_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'K001' then
			begin
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_reg_abertura_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
			end;
		when	regra_sped_w.cd_registro = '0007' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_0007_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = '0020' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_0020_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = '0035' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_0035_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I010' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i010_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I012' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i012_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I030' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i030_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I050' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i050_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I075' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i075_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I100' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i100_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I150' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i150_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I200' then
			case
				when 	regra_sped_w.ie_forma_escrituracao = 'A' then	
					regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i200_ecd_aux(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
				when	regra_sped_w.ie_forma_escrituracao  in ('G','R') then	
					regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i200_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			else
				null;
			end case;
		when	regra_sped_w.cd_registro = 'I300' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i300_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I350' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i350_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'I500' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_i500_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J005' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j005_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J100' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j100_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J150' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j150_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J200' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j200_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J210' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j210_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J800' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j800_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J900' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j900_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J930' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j930_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'J935' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_j935_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'K030' then
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_k030_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
		when	regra_sped_w.cd_registro = 'K100' then
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_k100_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
		when	regra_sped_w.cd_registro = 'K200' then
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_k200_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
		when	regra_sped_w.cd_registro = 'K300' then
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_k300_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
		when	regra_sped_w.cd_registro = '9900' then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_interf_9900_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro in ('9990','J990','I990','0990','9999') then
			regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_reg_fim_bloco_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
		when	regra_sped_w.cd_registro = 'K990' then
			if (ie_demonstrativo_consolidado_w = 'S') then
				regra_sped_p => regra_sped_w := ctb_sped_ecd_pck.gerar_reg_fim_bloco_ecd(regra_sped_p => regra_sped_w, nm_usuario_p => nm_usuario_p);
			end if;
		else
			null;
	end case;
	end;
	end loop;
	end loop;
close c_registro;


update	ctb_sped_registro
set	ds_arquivo = replace(ds_arquivo,'#QT_LINHAS',regra_sped_w.qt_linha)
where	nr_seq_controle_sped	= nr_seq_controle_p
and	cd_registro		= 'I030';

commit;


update	ctb_sped_registro
set	ds_arquivo = ds_arquivo_ww
where	nr_seq_controle_sped	= nr_seq_controle_p
and	cd_registro		= 'J900';

commit;

update	ctb_sped_controle
set	dt_geracao	=	clock_timestamp()
where	nr_sequencia	=	nr_seq_controle_p;

commit;			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_arquivo_ecd (nr_seq_controle_p bigint, nm_usuario_p text) FROM PUBLIC;
