-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_interf_i350_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) AS $body$
DECLARE



dt_resultado_w			timestamp;
dt_referencia_w			timestamp;
ds_linha_w			varchar(8000);
sep_w				varchar(1)	:= '|';
tp_registro_w			varchar(15);
dt_resultado_ant_w		timestamp;
dt_fim_contabil_w		centro_custo.dt_fim_contabil%type;
cd_codigo_conta_ecd_w		varchar(40);

c_data_apuracao CURSOR(
	cd_empresa_pc 		 ctb_sped_controle.cd_empresa%type,
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	ie_periodo_pc		 ctb_regra_sped.ie_periodo%type,
	ie_consolida_empresa_pc  ctb_regra_sped.ie_consolida_empresa%type,
	dt_ref_final_pc		 ctb_sped_controle.dt_ref_final%type,
	dt_ref_inicial_pc	 ctb_sped_controle.dt_ref_inicial%type,
	dt_referencia_pc	 ctb_sped_controle.dt_ref_inicial%type
	) FOR
	SELECT	x.nr_sequencia nr_seq_mes_ref,
		x.dt_referencia dt_resultado
	from (	SELECT	distinct
			b.nr_sequencia,
			b.dt_referencia
		from	ctb_mes_ref	b,
			ctb_saldo	a
		where	a.nr_seq_mes_ref	= b.nr_sequencia
		and	b.cd_empresa		= cd_empresa_pc
		and	a.cd_estabelecimento	= cd_estabelecimento_pc
		and	b.dt_referencia		= dt_referencia_pc
		and	ie_periodo_pc		in ('A','M')
		and	ie_consolida_empresa_pc	= 'N'
		
union all

		select	distinct
			b.nr_sequencia,
			b.dt_referencia
		from	ctb_mes_ref	b,
			ctb_saldo	a,
			estabelecimento c
		where	a.nr_seq_mes_ref	= b.nr_sequencia
		and	b.cd_empresa		= cd_empresa_pc
		and	a.cd_estabelecimento	= cd_estabelecimento_pc
		and	coalesce(ie_gerar_sped,'S')	=	'S'
		and	b.dt_referencia		= dt_referencia_pc
		and	ie_periodo_pc		in ('A','M')
		and	ie_consolida_empresa_pc	= 'S'
		
union all

		select	nr_sequencia,
			fim_mes(b.dt_referencia) dt_referencia
		from	ctb_mes_ref b
		where	b.dt_referencia	between  dt_ref_inicial_pc and dt_ref_final_pc
		and	b.cd_empresa		= cd_empresa_pc
		and	ie_periodo_pc		= 'T'
		and	substr(to_char(b.dt_referencia,'mm'),1,2) in ('03','06','09','12')
		order by 2)
		x;

type vetor_data_apuracao is table of c_data_apuracao%rowtype index by integer;
v_data_apuracao_w    vetor_data_apuracao;

c_detalhe_saldo CURSOR(
	cd_empresa_pc 		 ctb_sped_controle.cd_empresa%type,
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	ie_consolida_empresa_pc  ctb_regra_sped.ie_consolida_empresa%type,
	dt_ref_inicial_pc	 ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc		 ctb_sped_controle.dt_ref_final%type,
	nr_seq_mes_ref_pc	 ctb_saldo.nr_seq_mes_ref%type
	) FOR
	SELECT	a.cd_conta_contabil,
		a.cd_classificacao,
		CASE WHEN c.ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END  cd_centro_custo,
		(coalesce(sum(a.vl_saldo),0) - coalesce(sum(vl_encerramento),0)) vl_saldo,
		substr(ctb_obter_situacao_saldo(a.cd_conta_contabil,  coalesce(sum(a.vl_saldo),0) - coalesce(sum(vl_encerramento),0)),1,1) ie_debito_credito
	from	ctb_grupo_conta	d,
		conta_contabil	c,
		ctb_saldo	a
	where	c.cd_conta_contabil	= a.cd_conta_contabil
	and	d.cd_grupo		= c.cd_grupo
	and	c.ie_tipo		= 'A'
	and	d.ie_tipo in ('R','C','D')
	and	a.nr_seq_mes_ref	= nr_seq_mes_ref_pc
	and	a.cd_estabelecimento	= cd_estabelecimento_pc
	and	ie_consolida_empresa_pc	= 'N'
	and	substr(obter_se_conta_vigente2(c.cd_conta_contabil,c.dt_inicio_vigencia,c.dt_fim_vigencia,dt_ref_final_pc),1,1) = 'S'
	and	((c.ie_centro_custo = 'N') or exists (
			SELECT 	1
			from 	centro_custo f
			where 	f.cd_centro_custo = a.cd_centro_custo
			and	f.cd_estabelecimento = a.cd_estabelecimento
			 LIMIT 1))
	and	exists (
		select	1
		from	ctb_saldo x
		where	x.cd_conta_contabil = a.cd_conta_contabil
		and	x.cd_estabelecimento = a.cd_estabelecimento
		and	CASE WHEN c.ie_centro_custo='S' THEN x.cd_centro_custo  ELSE 0 END  = CASE WHEN c.ie_centro_custo='S' THEN a.cd_centro_custo  ELSE 0 END 
		and (x.vl_credito <> 0 or x.vl_debito <> 0 or x.vl_saldo <> 0)
		and	x.nr_seq_mes_ref in (
					select	z.nr_sequencia
					from	ctb_mes_ref z
					where	z.cd_empresa = cd_empresa_pc
					and	z.dt_referencia between pkg_date_utils.start_of(dt_ref_inicial_pc,'yyyy') and pkg_date_utils.end_of(dt_ref_inicial_pc, 'YEAR',0)) 
		 LIMIT 1)
	group by
		a.cd_conta_contabil,
		a.cd_classificacao,
		CASE WHEN ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END 
	
union all

	select	a.cd_conta_contabil,
		a.cd_classificacao,
		CASE WHEN ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END  cd_centro_custo,
		(coalesce(sum(a.vl_saldo),0) - coalesce(sum(vl_encerramento),0)) vl_saldo,
		substr(ctb_obter_situacao_saldo(a.cd_conta_contabil,  coalesce(sum(a.vl_saldo),0) - coalesce(sum(vl_encerramento),0)),1,1) ie_debito_credito
	from	ctb_grupo_conta	d,
		conta_contabil	c,
		ctb_saldo	a,
		estabelecimento e
	where	c.cd_conta_contabil	= a.cd_conta_contabil
	and	d.cd_grupo		= c.cd_grupo
	and	e.cd_estabelecimento	= a.cd_estabelecimento
	and	coalesce(e.ie_gerar_sped,'S')	=	'S'
	and	c.ie_tipo		= 'A'
	and	d.ie_tipo in ('R','C','D')
	and	a.nr_seq_mes_ref	= nr_seq_mes_ref_pc
	and	ie_consolida_empresa_pc	= 'S'
	and	coalesce(e.ie_scp, 'N')		!= 'S'
	and	substr(obter_se_conta_vigente2(c.cd_conta_contabil,c.dt_inicio_vigencia,c.dt_fim_vigencia,dt_ref_final_pc),1,1) = 'S'
	and	exists (
		select	1
		from	ctb_saldo x
		where	x.cd_conta_contabil = a.cd_conta_contabil
		and	CASE WHEN c.ie_centro_custo='S' THEN x.cd_centro_custo  ELSE 0 END  = CASE WHEN c.ie_centro_custo='S' THEN a.cd_centro_custo  ELSE 0 END 
		and (x.vl_credito <> 0 or x.vl_debito <> 0 or x.vl_saldo <> 0)
		and	x.nr_seq_mes_ref in (
					select	z.nr_sequencia
					from	ctb_mes_ref z
					where	z.cd_empresa = cd_empresa_pc
					and	z.dt_referencia between pkg_date_utils.start_of(dt_ref_inicial_pc,'yyyy') and pkg_date_utils.end_of(dt_ref_inicial_pc, 'YEAR',0)) 
		 LIMIT 1)
	group by a.cd_conta_contabil,
		 a.cd_classificacao,
		 CASE WHEN ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END 
	order by cd_classificacao;
	
type vetor_detalhe_saldo is table of c_detalhe_saldo%rowtype index by integer;
v_detalhe_saldo_w    vetor_detalhe_saldo;
BEGIN
dt_referencia_w	:= trunc(regra_sped_p.dt_ref_final,'mm');
	
open c_data_apuracao(
	cd_empresa_pc		=> regra_sped_p.cd_empresa,
	cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,
	ie_periodo_pc		=> regra_sped_p.ie_periodo,
	ie_consolida_empresa_pc	=> regra_sped_p.ie_consolida_empresa,
	dt_ref_final_pc		=> regra_sped_p.dt_ref_final,
	dt_ref_inicial_pc	=> regra_sped_p.dt_ref_inicial,
	dt_referencia_pc	=> dt_referencia_w
	);
	loop fetch c_data_apuracao bulk collect into v_data_apuracao_w limit 1000;
	EXIT WHEN NOT FOUND; /* apply on c_data_apuracao */
		for i in v_data_apuracao_w.first .. v_data_apuracao_w.last loop
	
		tp_registro_w 		:= 'I350';
		dt_resultado_w		:= trunc(fim_mes(v_data_apuracao_w[i].dt_resultado));

		if (dt_resultado_ant_w <> dt_resultado_w) or (coalesce(dt_resultado_ant_w::text, '') = '') then
			ds_linha_w		:= substr(	sep_w || tp_registro_w 					||
								sep_w || to_char(regra_sped_p.dt_ref_final,'ddmmyyyy')	|| sep_w,1,8000);
								
			
			regra_sped_p.nr_doc_origem := v_data_apuracao_w[i].nr_seq_mes_ref;
			regra_sped_p.cd_registro_variavel := tp_registro_w;
			regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
		end if;

		tp_registro_w	:= 'I355';
		open c_detalhe_saldo(
			cd_empresa_pc		=> regra_sped_p.cd_empresa,
			cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,
			ie_consolida_empresa_pc	=> regra_sped_p.ie_consolida_empresa,
			dt_ref_inicial_pc	=> regra_sped_p.dt_ref_inicial,
			dt_ref_final_pc		=> regra_sped_p.dt_ref_final,
			nr_seq_mes_ref_pc	=> v_data_apuracao_w[i].nr_seq_mes_ref
			);
			loop fetch c_detalhe_saldo bulk collect into v_detalhe_saldo_w limit 1000;
			EXIT WHEN NOT FOUND; /* apply on c_detalhe_saldo */
				for y in v_detalhe_saldo_w.first .. v_detalhe_saldo_w.last loop

				select	max(dt_fim_contabil)
				into STRICT	dt_fim_contabil_w
				from	centro_custo
				where	cd_centro_custo	= v_detalhe_saldo_w[y].cd_centro_custo;

				if 	((coalesce(v_detalhe_saldo_w[y].cd_centro_custo,0) = 0) or (coalesce(dt_fim_contabil_w::text, '') = '')
					or ((coalesce(v_detalhe_saldo_w[y].cd_centro_custo,0) <> 0) and (trunc(dt_resultado_w) <= trunc(dt_fim_contabil_w)))) then
					
					cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd(ie_tipo_conta_p	=> 'C', 
										ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
										cd_empresa_p		=> null, 
										cd_conta_contabil_p	=> v_detalhe_saldo_w[y].cd_conta_contabil, 
										cd_classificacao_p	=> v_detalhe_saldo_w[y].cd_classificacao,
										dt_vigencia_p		=> null);
					
					ds_linha_w	:= substr(	sep_w || tp_registro_w						||
									sep_w || cd_codigo_conta_ecd_w					||
									sep_w || v_detalhe_saldo_w[y].cd_centro_custo			||
									sep_w || sped_obter_campo_valor(v_detalhe_saldo_w[y].vl_saldo) 	||
									sep_w || v_detalhe_saldo_w[y].ie_debito_credito			||
									sep_w,1,8000);

					regra_sped_p.nr_doc_origem := v_data_apuracao_w[i].nr_seq_mes_ref;
					regra_sped_p.cd_registro_variavel := tp_registro_w;
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
					
					if (regra_sped_p.registros.count >= 1000) then
						regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
					end if;	
				end if;
				end loop;
				regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
			end loop;
		close c_detalhe_saldo;
		dt_resultado_ant_w	:= dt_resultado_w;
		end loop;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
	end loop;
close c_data_apuracao;
			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_interf_i350_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) FROM PUBLIC;
