-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_interf_k315_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text, cd_conta_contabil_p text, ie_debito_credito_elimin_p text) AS $body$
DECLARE


ds_linha_w              		varchar(8000);
sep_w                   		varchar(1) := '|';
tp_registro_w           		varchar(15) := 'K315';
cd_codigo_conta_ecd_w			varchar(40);

c01 CURSOR(
	dt_ref_inicial_pc 			ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc 			ctb_sped_controle.dt_ref_final%type,
	cd_empresa_pc 				ctb_sped_controle.cd_empresa%type,
	cd_conta_contabil_pc 			conta_contabil.cd_conta_contabil%type,
	ie_debito_credito_elimin_pc	 	text
	)  FOR
	SELECT	x.cd_empresa,
		x.ie_debito_credito,
		x.cd_conta_contabil,
		x.vl_eliminacao
	from (	SELECT	emp2.cd_empresa cd_empresa,
			'D' ie_debito_credito,
			m2.cd_conta_debito cd_conta_contabil,
			m2.vl_movimento vl_eliminacao
		from	ctb_movimento m,
			ctb_movimento m2,
			empresa emp,
			estabelecimento e,
			estabelecimento e2,
			empresa emp2,
			ctb_mes_ref re
		where	m.nr_seq_movto_eliminacao = m2.nr_sequencia
		and	m.cd_estabelecimento = e.cd_estabelecimento
		and	m2.cd_estabelecimento = e2.cd_estabelecimento
		and	emp.cd_empresa = e.cd_empresa
		and	emp2.cd_empresa = e2.cd_empresa
		and	re.nr_sequencia = m2.nr_seq_mes_ref
		and	m2.dt_movimento between dt_ref_inicial_pc and dt_ref_final_pc
		and	emp.cd_empresa = cd_empresa_pc
		and	coalesce(m.cd_conta_debito, m.cd_conta_credito) = cd_conta_contabil_pc
		and	ie_debito_credito_elimin_pc = 'C'
		and	(m2.cd_conta_debito IS NOT NULL AND m2.cd_conta_debito::text <> '')
		
union

		select emp2.cd_empresa cd_empresa,
			'C' ie_debito_credito,
			m2.cd_conta_credito cd_conta_contabil,
			m2.vl_movimento vl_eliminacao
		from	ctb_movimento m,
			ctb_movimento m2,
			empresa emp,
			estabelecimento e,
			estabelecimento e2,
			empresa emp2,
			ctb_mes_ref re
		where	m.nr_seq_movto_eliminacao = m2.nr_sequencia
		and	m.cd_estabelecimento = e.cd_estabelecimento
		and	m2.cd_estabelecimento = e2.cd_estabelecimento
		and	emp.cd_empresa = e.cd_empresa
		and	emp2.cd_empresa = e2.cd_empresa
		and	re.nr_sequencia = m2.nr_seq_mes_ref
		and	m2.dt_movimento between dt_ref_inicial_pc and dt_ref_final_pc
		and	emp.cd_empresa = cd_empresa_pc
		and	coalesce(m.cd_conta_debito, m.cd_conta_credito) = cd_conta_contabil_pc
		and	ie_debito_credito_elimin_pc = 'D'
		and 	(m2.cd_conta_credito IS NOT NULL AND m2.cd_conta_credito::text <> '')
	) x;

type vetor_c01 is table of c01%rowtype index by integer;
vetor_c01_w    vetor_c01;

BEGIN
open c01(
	dt_ref_inicial_pc 		=> regra_sped_p.dt_ref_inicial,
	dt_ref_final_pc 		=> regra_sped_p.dt_ref_final,		
	cd_empresa_pc 			=> regra_sped_p.cd_empresa,
	cd_conta_contabil_pc 		=> cd_conta_contabil_p,
	ie_debito_credito_elimin_pc	=> ie_debito_credito_elimin_p	
	);
	loop fetch c01 bulk collect into vetor_c01_w limit 1000;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		for i in vetor_c01_w.first .. vetor_c01_w.last loop
		cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd(ie_tipo_conta_p	=> 'C', 
							ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
							cd_empresa_p		=> null, 
							cd_conta_contabil_p	=> vetor_c01_w[i].cd_conta_contabil, 
							cd_classificacao_p	=> null,
							dt_vigencia_p		=> regra_sped_p.dt_ref_final);
	
		ds_linha_w  := substr(sep_w 		||
		tp_registro_w      			|| sep_w ||
		vetor_c01_w[i].cd_empresa      		|| sep_w ||
		cd_codigo_conta_ecd_w		   	|| sep_w ||
		
		replace(replace(campo_mascara_virgula(vetor_c01_w[i].vl_eliminacao),'.',''),'-','')  || sep_w ||
		vetor_c01_w[i].ie_debito_credito  	|| sep_w,1,8000);
		
		regra_sped_p.cd_registro_variavel := tp_registro_w;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
		
		end loop;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
	end loop;
close c01;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_interf_k315_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text, cd_conta_contabil_p text, ie_debito_credito_elimin_p text) FROM PUBLIC;
