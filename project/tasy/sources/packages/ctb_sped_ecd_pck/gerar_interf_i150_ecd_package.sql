-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_interf_i150_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) AS $body$
DECLARE


ds_linha_w			varchar(8000);
sep_w				varchar(1)	:= '|';
tp_registro_w			varchar(15);
ie_gerar_157_w			varchar(2);
dt_fim_contabil_w		centro_custo.dt_fim_contabil%type;			
cd_codigo_conta_ecd_w		varchar(40);
/* Valores formatados */

vl_saldo_inicial_w		varchar(80);
vl_debito_w			varchar(80);
vl_credito_w			varchar(80);
vl_saldo_final_w		varchar(80);
nr_seq_sit_esp_w		ctb_sit_especial_empresa.nr_sequencia%type;

c_periodo CURSOR(
	cd_empresa_pc		 ctb_regra_sped.cd_empresa%type,
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	dt_ref_inicial_pc	 ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc		 ctb_sped_controle.dt_ref_final%type,
	ie_consolida_empresa_pc	 ctb_regra_sped.ie_consolida_empresa%type
	)FOR
	SELECT	x.dt_inicial,
		x.dt_final
	from (	SELECT	distinct
			CASE WHEN trunc(a.dt_inicial,'mm')=trunc(dt_ref_inicial_pc, 'mm') THEN  trunc(dt_ref_inicial_pc)  ELSE a.dt_inicial END  dt_inicial,
			CASE WHEN trunc(a.dt_final,'mm')=trunc(dt_ref_final_pc, 'mm') THEN  fim_dia(dt_ref_final_pc)  ELSE a.dt_final END  dt_final
		from   	ecd_saldo_periodico_v a
		where	a.cd_empresa 		= cd_empresa_pc
		and	a.cd_estabelecimento 	= cd_estabelecimento_pc
		and	a.tp_registro 		= 1
		and	ie_consolida_empresa_pc	= 'N'
		and	a.dt_inicial between trunc(dt_ref_inicial_pc,'mm') and fim_dia(dt_ref_final_pc)
		
union all

		select	distinct
			CASE WHEN trunc(a.dt_inicial,'mm')=trunc(dt_ref_inicial_pc, 'mm') THEN  trunc(dt_ref_inicial_pc)  ELSE trunc(a.dt_inicial) END  dt_inicial,
			CASE WHEN trunc(a.dt_final,'mm')=trunc(dt_ref_final_pc, 'mm') THEN  fim_dia(dt_ref_final_pc)  ELSE fim_dia(a.dt_final) END  dt_final
		from   	ecd_saldo_periodico_v a,
			estabelecimento b
		where	a.cd_empresa 		= cd_empresa_pc
		and	a.cd_estabelecimento	= b.cd_estabelecimento
		and	coalesce(b.ie_gerar_sped,'S') = 'S'
		and	a.tp_registro 		= 1
		and	ie_consolida_empresa_pc	= 'S'
		and	a.dt_inicial between trunc(dt_ref_inicial_pc,'mm') and fim_dia(dt_ref_final_pc)
		order by
			1)
	x;

type vetor_periodo is table of c_periodo%rowtype index by integer;
v_periodo_w    vetor_periodo;

c_detalhe_saldo CURSOR(
	cd_empresa_pc			 ctb_regra_sped.cd_empresa%type,
	cd_estabelecimento_pc		 ctb_sped_controle.cd_estabelecimento%type,
	dt_ref_inicial_pc		 ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc			 ctb_sped_controle.dt_ref_final%type,
	ie_consolida_empresa_pc		 ctb_regra_sped.ie_consolida_empresa%type,
	dt_saldo_periodo_inicio_pc	timestamp,
	dt_saldo_periodo_fim_pc		timestamp
	) FOR
	SELECT	a.cd_conta_contabil,
		a.cd_classificacao,
		CASE WHEN a.ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END  cd_centro_custo,
		a.ie_debito_credito_inicial,
		sum(coalesce(a.vl_saldo_inicial,0)) vl_saldo_inicial,
		sum(coalesce(a.vl_debito,0)) vl_debito,
		sum(coalesce(a.vl_credito,0)) vl_credito,
		sum(coalesce(a.vl_saldo_final,0)) vl_saldo_final,
		substr(ctb_obter_situacao_saldo(a.cd_conta_contabil, a.vl_saldo_final),1,1) ie_debito_credito_final
	from	ecd_saldo_periodico_v	a,
		estabelecimento b
	where	a.cd_estabelecimento 	= cd_estabelecimento_pc
	and	a.cd_empresa 		= cd_empresa_pc
	and	a.cd_estabelecimento 	= b.cd_estabelecimento
	and	a.tp_registro		= 2
	and	exists (
		SELECT	1
		
		where	coalesce(a.cd_conta_contabil::text, '') = ''
		
union all

		select	1
		from	conta_contabil x
		where	x.cd_conta_contabil = a.cd_conta_contabil
		and	substr(obter_se_vigencia_periodo(x.dt_inicio_vigencia,x.dt_fim_vigencia,dt_ref_inicial_pc,dt_ref_final_pc,'S'),1,1) = 'S'
		)
	and	ie_consolida_empresa_pc	= 'N'
	and	coalesce(b.ie_gerar_sped,'S')	= 'S'
	and	a.dt_inicial between dt_saldo_periodo_inicio_pc and dt_saldo_periodo_fim_pc
	group	by	a.cd_conta_contabil,
			a.cd_classificacao,
			CASE WHEN a.ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END ,
			a.ie_debito_credito_inicial,
			substr(ctb_obter_situacao_saldo(a.cd_conta_contabil, a.vl_saldo_final),1,1)
	
union all

	select	a.cd_conta_contabil,
		a.cd_classificacao,
		CASE WHEN a.ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END  cd_centro_custo,
		substr(ctb_obter_situacao_saldo(a.cd_conta_contabil, sum(coalesce(a.vl_saldo_inicial,0))),1,1) ie_debito_credito_inicial,
		sum(coalesce(a.vl_saldo_inicial,0)) vl_saldo_inicial,
		sum(coalesce(a.vl_debito,0)) vl_debito,
		sum(coalesce(a.vl_credito,0)) vl_credito,
		sum(coalesce(a.vl_saldo_final,0)) vl_saldo_final,
		substr(ctb_obter_situacao_saldo(a.cd_conta_contabil, sum(coalesce(a.vl_saldo_final,0))),1,1) ie_debito_credito_final
	from	ecd_saldo_periodico_v	a,
		estabelecimento b
	where	a.cd_empresa 		= cd_empresa_pc
	and	a.cd_estabelecimento	= b.cd_estabelecimento
	and	a.tp_registro		= 2
	and	exists (
		select	1
		
		where	coalesce(a.cd_conta_contabil::text, '') = ''
		
union all

		select	1
		from	conta_contabil x
		where	x.cd_conta_contabil = a.cd_conta_contabil
		and	substr(obter_se_vigencia_periodo(x.dt_inicio_vigencia,x.dt_fim_vigencia,dt_ref_inicial_pc,dt_ref_final_pc,'S'),1,1) = 'S'
		)
	and	ie_consolida_empresa_pc	= 'S'
	and coalesce(b.ie_scp, 'N')	!= 'S'
	and	coalesce(b.ie_gerar_sped,'S')	= 'S'
	and	a.dt_inicial between dt_saldo_periodo_inicio_pc and dt_saldo_periodo_fim_pc
	group	by	a.cd_conta_contabil,
			a.cd_classificacao,
			CASE WHEN a.ie_centro_custo='S' THEN  a.cd_centro_custo  ELSE null END;

type vetor_detalhe_saldo is table of c_detalhe_saldo%rowtype index by integer;
v_detalhe_saldo_w    vetor_detalhe_saldo;

c_trans_saldo CURSOR(
	cd_conta_contabil_pc	 ctb_saldo_alteracao_conta.cd_conta_contabil%type,
	dt_ref_inicio_pc	 ctb_mes_ref.dt_referencia%type,
	dt_ref_fim_pc		 ctb_mes_ref.dt_referencia%type
	) FOR
	SELECT	a.cd_conta_contabil_ant,
		a.cd_centro_custo,
		a.vl_saldo
	from	ctb_mes_ref			b,
		ctb_saldo_alteracao_conta	a
	where	b.nr_sequencia		= a.nr_seq_mes_ref
	and	a.cd_conta_contabil	= cd_conta_contabil_pc
	and	b.dt_referencia	between dt_ref_inicio_pc and dt_ref_fim_pc;

type vetor_trans_saldo is table of c_trans_saldo%rowtype index by integer;
v_trans_saldo_w    vetor_trans_saldo;


c_saldo_periodo CURSOR(
	dt_ref_inicial_pc	 ctb_sped_controle.dt_ref_inicial%type,
	dt_ref_final_pc		 ctb_sped_controle.dt_ref_final%type,
	nr_seq_sit_esp_pc	 ctb_sit_especial_empresa.nr_sequencia%type
	) FOR
	SELECT	a.vl_debito,
		a.vl_credito,
		a.vl_saldo_ant,
		a.vl_saldo,
		a.cd_conta_contabil,
		a.cd_centro_custo,
		a.ie_deb_cred_ant,
		a.ie_deb_cred,
		a.cd_estabelecimento
	from	ctb_saldo_periodo a
	where	a.nr_seq_sit_especial = nr_seq_sit_esp_pc
	and	trunc(a.dt_saldo) between trunc(dt_ref_inicial_pc) and fim_dia(dt_ref_final_pc)
	and	((a.vl_debito <> 0) or (a.vl_credito <> 0) or (a.vl_saldo_ant <> 0) or (a.vl_saldo <> 0));

type vtor_saldo_periodo is table of c_saldo_periodo%rowtype index by integer;
v_saldo_periodo_w    vtor_saldo_periodo;
BEGIN

if (regra_sped_p.nr_seq_regra_sped <> 0)then
	select	max(coalesce(ie_gerar,'N'))
	into STRICT	ie_gerar_157_w
	from	ctb_regra_sped_registro
	where	nr_seq_regra_sped	= regra_sped_p.nr_seq_regra_sped
	and	cd_registro		= 'I157'
	order by
		nr_sequencia;
end if;

open c_periodo(
	cd_empresa_pc		=> regra_sped_p.cd_empresa,
	cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,	
	dt_ref_inicial_pc	=> regra_sped_p.dt_ref_inicial,
	dt_ref_final_pc		=> regra_sped_p.dt_ref_final,
	ie_consolida_empresa_pc	=> regra_sped_p.ie_consolida_empresa
	);
	loop fetch c_periodo bulk collect into v_periodo_w limit 1000;
	EXIT WHEN NOT FOUND; /* apply on c_periodo */
		for i in v_periodo_w.first .. v_periodo_w.last loop
		tp_registro_w	:= 'I150';
		ds_linha_w	:= substr(	sep_w || tp_registro_w					||
						sep_w || to_char(v_periodo_w[i].dt_inicial,'ddmmyyyy') 	||
						sep_w || to_char(v_periodo_w[i].dt_final,'ddmmyyyy')	||
						sep_w ,1,8000);
						
		regra_sped_p.cd_registro_variavel := tp_registro_w;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
		
		select	coalesce(max(a.nr_sequencia),0)
		into STRICT	nr_seq_sit_esp_w
		from	ctb_sit_especial_empresa a
		where	trunc(a.dt_situacao,'mm') = trunc(v_periodo_w[i].dt_inicial,'mm')
		and	a.cd_empresa = regra_sped_p.cd_empresa
		and	coalesce(a.cd_estabelecimento,regra_sped_p.cd_estabelecimento) = regra_sped_p.cd_estabelecimento;

		if (nr_seq_sit_esp_w <> 0) then
			
			open c_saldo_periodo(
				dt_ref_inicial_pc	=> regra_sped_p.dt_ref_inicial,
				dt_ref_final_pc		=> regra_sped_p.dt_ref_final,
				nr_seq_sit_esp_pc	=> nr_seq_sit_esp_w
				);
				loop fetch c_saldo_periodo bulk collect into v_saldo_periodo_w limit 1000;
				EXIT WHEN NOT FOUND; /* apply on c_saldo_periodo */
					for j in v_saldo_periodo_w.first .. v_saldo_periodo_w.last loop

					tp_registro_w	:= 'I155';
					vl_saldo_inicial_w	:= replace(replace(campo_mascara_virgula(v_saldo_periodo_w[j].vl_saldo_ant),'.',''),'-','');
					vl_debito_w		:= replace(replace(campo_mascara_virgula(v_saldo_periodo_w[j].vl_debito),'.',''),'-','');
					vl_credito_w		:= replace(replace(campo_mascara_virgula(v_saldo_periodo_w[j].vl_credito),'.',''),'-','');
					vl_saldo_final_w	:= replace(replace(campo_mascara_virgula(v_saldo_periodo_w[j].vl_saldo),'.',''),'-','');

					ds_linha_w	:= substr(	sep_w || tp_registro_w					||
									sep_w || v_saldo_periodo_w[j].cd_conta_contabil		||
									sep_w || v_saldo_periodo_w[j].cd_centro_custo		||
									sep_w || vl_saldo_inicial_w				||
									sep_w || v_saldo_periodo_w[j].ie_deb_cred_ant		||
									sep_w || vl_debito_w					||
									sep_w || vl_credito_w					||
									sep_w || vl_saldo_final_w				||
									sep_w || v_saldo_periodo_w[j].ie_deb_cred		||
									sep_w, 1,8000);


					regra_sped_p.nr_doc_origem := v_saldo_periodo_w[j].cd_conta_contabil;
					regra_sped_p.cd_registro_variavel := tp_registro_w;
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
					
					if (regra_sped_p.registros.count >= 1000) then
						regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
					end if;	
					
					end loop;
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
				end loop;
			close c_saldo_periodo;
		else
			open c_detalhe_saldo(
				cd_empresa_pc			=> regra_sped_p.cd_empresa,
				cd_estabelecimento_pc		=> regra_sped_p.cd_estabelecimento,
				dt_ref_inicial_pc		=> regra_sped_p.dt_ref_inicial,
				dt_ref_final_pc			=> regra_sped_p.dt_ref_final,
				ie_consolida_empresa_pc		=> regra_sped_p.ie_consolida_empresa,	
				dt_saldo_periodo_inicio_pc	=> v_periodo_w[i].dt_inicial,
				dt_saldo_periodo_fim_pc		=> v_periodo_w[i].dt_final
				);
				loop fetch c_detalhe_saldo bulk collect into v_detalhe_saldo_w limit 1000;
				EXIT WHEN NOT FOUND; /* apply on c_detalhe_saldo */
					for k in v_detalhe_saldo_w.first .. v_detalhe_saldo_w.last loop
					tp_registro_w	:= 'I155';
				
					select	max(dt_fim_contabil)
					into STRICT	dt_fim_contabil_w
					from	centro_custo
					where	cd_centro_custo	= v_detalhe_saldo_w[k].cd_centro_custo;

					if 	((coalesce(v_detalhe_saldo_w[k].cd_centro_custo,0) = 0) or (coalesce(dt_fim_contabil_w::text, '') = '') or
						((coalesce(v_detalhe_saldo_w[k].cd_centro_custo,0) <> 0) and (trunc(v_periodo_w[i].dt_inicial) <= trunc(dt_fim_contabil_w)))) then
						
						if 	((v_detalhe_saldo_w[k].vl_saldo_inicial <> 0) or (v_detalhe_saldo_w[k].vl_debito <> 0)  or (v_detalhe_saldo_w[k].vl_credito <> 0)  or (v_detalhe_saldo_w[k].vl_saldo_final <> 0)) then
							
							vl_saldo_inicial_w	:= replace(replace(campo_mascara_virgula(v_detalhe_saldo_w[k].vl_saldo_inicial),'.',''),'-','');
							vl_debito_w		:= replace(replace(campo_mascara_virgula(v_detalhe_saldo_w[k].vl_debito),'.',''),'-','');
							vl_credito_w		:= replace(replace(campo_mascara_virgula(v_detalhe_saldo_w[k].vl_credito),'.',''),'-','');
							vl_saldo_final_w	:= replace(replace(campo_mascara_virgula(v_detalhe_saldo_w[k].vl_saldo_final),'.',''),'-','');
							
							cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd( ie_tipo_conta_p	=> 'C',
												ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
												cd_empresa_p		=> null, 
												cd_conta_contabil_p	=> v_detalhe_saldo_w[k].cd_conta_contabil, 
												cd_classificacao_p	=> v_detalhe_saldo_w[k].cd_classificacao,
												dt_vigencia_p		=> null);
												
							ds_linha_w	:= substr(	sep_w || tp_registro_w					||
											sep_w || cd_codigo_conta_ecd_w 				||
											sep_w || v_detalhe_saldo_w[k].cd_centro_custo		||
											sep_w || vl_saldo_inicial_w				||
											sep_w || v_detalhe_saldo_w[k].ie_debito_credito_inicial	||
											sep_w || vl_debito_w					||
											sep_w || vl_credito_w					||
											sep_w || vl_saldo_final_w				||
											sep_w || v_detalhe_saldo_w[k].ie_debito_credito_final	||
											sep_w, 1,8000);

							regra_sped_p.nr_doc_origem := v_detalhe_saldo_w[k].cd_conta_contabil;
							regra_sped_p.cd_registro_variavel := tp_registro_w;
							regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
							
							if (regra_sped_p.registros.count >= 1000) then
								regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
							end if;	

							if (ie_gerar_157_w = 'S')	then
								open c_trans_saldo(
									cd_conta_contabil_pc    => v_detalhe_saldo_w[k].cd_conta_contabil,
									dt_ref_inicio_pc	=> v_periodo_w[i].dt_inicial,
									dt_ref_fim_pc		=> v_periodo_w[i].dt_final
									);
									loop fetch c_trans_saldo bulk collect into v_trans_saldo_w limit 1000;
									EXIT WHEN NOT FOUND; /* apply on c_trans_saldo */
										for l in v_trans_saldo_w.first .. v_trans_saldo_w.last loop
										tp_registro_w	:= 'I157';
										
										cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd( ie_tipo_conta_p	=> 'C',
															ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
															cd_empresa_p		=> null, 
															cd_conta_contabil_p	=> v_trans_saldo_w[l].cd_conta_contabil_ant, 
															cd_classificacao_p	=> null,
															dt_vigencia_p		=> add_months(regra_sped_p.dt_ref_inicial,-1));
								
										ds_linha_w	:= substr(	sep_w || tp_registro_w										||
														sep_w || cd_codigo_conta_ecd_w									||
														sep_w || v_trans_saldo_w[l].cd_centro_custo							||
														sep_w || replace(replace(campo_mascara_virgula(v_trans_saldo_w[l].vl_saldo),'.',''),'-','')	||
														sep_w || v_detalhe_saldo_w[k].ie_debito_credito_inicial						||
														sep_w,1,8000);
														
										regra_sped_p.nr_doc_origem := v_trans_saldo_w[l].cd_conta_contabil_ant;
										regra_sped_p.cd_registro_variavel := tp_registro_w;
										regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);

										if (regra_sped_p.registros.count >= 1000) then
											regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
										end if;	
										
										end loop;
										regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
									end loop;
								close c_trans_saldo;
							end if;
						end if;
					end if;
					end loop;
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
				end loop;
			close c_detalhe_saldo;
		end if;
		end loop;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
	end loop;
close c_periodo;
		
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_interf_i150_ecd (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) FROM PUBLIC;
