-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_sped_ecd_pck.gerar_interf_i200_ecd_aux (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) AS $body$
DECLARE



sep_w				varchar(1)	:= '|';
ie_tipo_lancamento_w		varchar(2);
tp_registro_w			varchar(15);
cd_codigo_conta_ecd_w		varchar(40);
ds_historico_w			varchar(255);
ds_linha_w			varchar(8000);

c_lancamento CURSOR(
	cd_empresa_pc 		 ctb_sped_controle.cd_empresa%type,
	cd_estabelecimento_pc	 ctb_sped_controle.cd_estabelecimento%type,
	dt_inicio_pc		 ctb_mes_ref.dt_referencia%type,
	dt_fim_pc		 ctb_mes_ref.dt_referencia%type,
	ie_consolida_empresa_pc  ctb_regra_sped.ie_consolida_empresa%type
	) FOR
	SELECT	x.nr_agrup_sequencial,
		x.dt_movimento,
		x.nr_lote_contabil,
		x.ie_encerramento,
		x.vl_movimento
	from (	SELECT	a.nr_agrup_sequencial,
			a.dt_movimento,
			a.nr_lote_contabil,
			a.ie_encerramento,
			coalesce(sum(a.vl_movimento),0) vl_movimento	
		from	ctb_movimento_v2	a,	
			ctb_mes_ref		b,
			lote_contabil		d
		where	b.nr_sequencia		= a.nr_seq_mes_ref
		and	b.nr_sequencia		= d.nr_seq_mes_ref
		and	d.nr_lote_contabil	= a.nr_lote_contabil
		and	b.cd_empresa		= cd_empresa_pc
		and	a.cd_estabelecimento	= coalesce(cd_estabelecimento_pc, a.cd_estabelecimento)
		and	b.dt_referencia between dt_inicio_pc and dt_fim_pc
		and	ie_consolida_empresa_pc	= 'N'
		and 	(a.nr_agrup_sequencial IS NOT NULL AND a.nr_agrup_sequencial::text <> '')
		group by a.nr_agrup_sequencial,
			a.dt_movimento,
			a.nr_lote_contabil,
			a.ie_encerramento
		
union all

		select	a.nr_agrup_sequencial,
			a.dt_movimento,
			a.nr_lote_contabil,
			a.ie_encerramento,
			coalesce(sum(a.vl_movimento),0)	vl_movimento	
		from	ctb_movimento_v2	a,
			ctb_mes_ref		b,
			lote_contabil		d,
			estabelecimento 	e
		where	b.nr_sequencia		= a.nr_seq_mes_ref
		and	b.nr_sequencia		= d.nr_seq_mes_ref
		and	d.nr_lote_contabil	= a.nr_lote_contabil
		and	b.cd_empresa		= cd_empresa_pc
		and	a.cd_estabelecimento	= e.cd_estabelecimento
		and	b.dt_referencia between dt_inicio_pc and dt_fim_pc
		and	ie_consolida_empresa_pc	= 'S'
		and 	(a.nr_agrup_sequencial IS NOT NULL AND a.nr_agrup_sequencial::text <> '')
		group by a.nr_agrup_sequencial,
			a.dt_movimento,
			a.nr_lote_contabil,
			a.ie_encerramento
		order by 1, 2)
	x;


type vetor_lancamento is table of c_lancamento%rowtype index by integer;
v_lancamento_w    vetor_lancamento;

c_partidas_lancamento CURSOR(
	nr_agrup_sequencial_pc  ctb_movimento.nr_agrup_sequencial%type
	)FOR
	SELECT  a.nr_sequencia,	
		a.dt_movimento,
		a.vl_movimento vl_movimento_lanc,
		b.ie_debito_credito,
		b.nr_lancamento,
		b.cd_conta_contabil cd_conta_contabil_lanc,
		c.nr_seq_doc_compl,
		c.nr_seq_info,
		c.nr_documento,
		a.ds_compl_historico,
		substr(obter_informacao_contabil(c.nr_seq_info),1,255) ds_informacao,
		a.cd_historico,
		b.cd_centro_custo
	from  	ctb_movimento a,
		movimento_contabil b,
		movimento_contabil_doc c
	where 	b.nr_seq_ctb_movto	= a.nr_sequencia
	and	b.nr_lote_contabil	= a.nr_lote_contabil
	and	b.nr_lote_contabil	= c.nr_lote_contabil
	and   	c.nr_seq_movimento	= b.nr_sequencia
	and     a.nr_agrup_sequencial	= nr_agrup_sequencial_pc;	


type vetor_part_lancamento is table of c_partidas_lancamento%rowtype index by integer;
v_part_lancamento_w    vetor_part_lancamento;

BEGIN

ie_tipo_lancamento_w	:= null;

open c_lancamento(
	cd_empresa_pc		=> regra_sped_p.cd_empresa,	
	cd_estabelecimento_pc	=> regra_sped_p.cd_estabelecimento,	
	dt_inicio_pc		=> trunc(regra_sped_p.dt_ref_inicial),
	dt_fim_pc		=> fim_mes(regra_sped_p.dt_ref_final),	
	ie_consolida_empresa_pc => regra_sped_p.ie_consolida_empresa
	);
	loop fetch c_lancamento bulk collect into v_lancamento_w limit 1000;
	EXIT WHEN NOT FOUND; /* apply on c_lancamento */
		for i in v_lancamento_w.first .. v_lancamento_w.last loop
		
		ie_tipo_lancamento_w	:= 'N';
		tp_registro_w		:= 'I200';
		ds_linha_w		:= substr(	sep_w || tp_registro_w							||
							sep_w || v_lancamento_w[i].nr_agrup_sequencial				||
							sep_w || to_char(v_lancamento_w[i].dt_movimento,'ddmmyyyy')		||
							sep_w || sped_obter_campo_valor(v_lancamento_w[i].vl_movimento)		||
							sep_w || ie_tipo_lancamento_w						||
							sep_w,1,8000);
		
		regra_sped_p.nr_doc_origem := v_lancamento_w[i].nr_agrup_sequencial;
		regra_sped_p.cd_registro_variavel := tp_registro_w;		
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);


		open c_partidas_lancamento(
			nr_agrup_sequencial_pc	=> v_lancamento_w[i].nr_agrup_sequencial
			);
			loop fetch c_partidas_lancamento bulk collect into v_part_lancamento_w limit 1000;
			EXIT WHEN NOT FOUND; /* apply on c_partidas_lancamento */
				for y in v_part_lancamento_w.first .. v_part_lancamento_w.last loop
		
				tp_registro_w		:= 'I250';
				ds_historico_w		:= substr(v_part_lancamento_w[y].ds_compl_historico || ' ' || v_part_lancamento_w[y].ds_informacao || ' ' || v_part_lancamento_w[y].nr_documento,1, 255);
				ds_historico_w		:= substr(replace(replace(replace(ds_historico_w,chr(13),' '),chr(10),' '),'|',''),1,255);
				ds_historico_w		:= substr(replace(ds_historico_w,chr(9),''),1,255);

				cd_codigo_conta_ecd_w	:= ctb_sped_ecd_pck.obter_cod_conta_ecd(ie_tipo_conta_p	=> 'C',
									ie_apres_conta_ctb_p	=> regra_sped_p.ie_apres_conta_ctb, 
									cd_empresa_p		=> null, 
									cd_conta_contabil_p	=> v_part_lancamento_w[y].cd_conta_contabil_lanc, 
									cd_classificacao_p	=> null,
									dt_vigencia_p		=> null);

				ds_linha_w	:= substr(	sep_w || tp_registro_w								||
								sep_w || cd_codigo_conta_ecd_w							||
								sep_w || v_part_lancamento_w[y].cd_centro_custo					||
								sep_w || sped_obter_campo_valor(v_part_lancamento_w[y].vl_movimento_lanc)	||
								sep_w || v_part_lancamento_w[y].ie_debito_credito				||
								sep_w || v_part_lancamento_w[y].nr_documento					||
								sep_w || v_part_lancamento_w[y].cd_historico					||
								sep_w || ds_historico_w								||
								sep_w || ''									||
								sep_w, 1,8000);

				regra_sped_p.nr_doc_origem := v_lancamento_w[i].nr_agrup_sequencial;
				regra_sped_p.cd_registro_variavel := tp_registro_w;				
				regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.inserir_registros_vetor(regra_sped_p => regra_sped_p, ds_linha_p => ds_linha_w);
				
				if (regra_sped_p.registros.count >= 1000) then
					regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
				end if;	
				
				end loop;
				regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
			end loop;
		close c_partidas_lancamento;	
		end loop;
		regra_sped_p => regra_sped_p := ctb_sped_ecd_pck.persistir_registros_em_lote(regra_sped_p => regra_sped_p, nm_usuario_p => nm_usuario_p);
	end loop;
close c_lancamento;
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_sped_ecd_pck.gerar_interf_i200_ecd_aux (regra_sped_p INOUT ctb_sped_ecd_pck.regra_sped, nm_usuario_p text) FROM PUBLIC;
