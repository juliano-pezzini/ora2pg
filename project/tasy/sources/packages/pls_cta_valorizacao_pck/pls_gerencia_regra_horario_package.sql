-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_valorizacao_pck.pls_gerencia_regra_horario ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_proc_p pls_conta_proc.nr_sequencia%type, ie_tipo_tabela_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
********* SE FOR ALTERAR ALGUMA COISA NESTA ROTINA, FAVOR VERIFICAR A pls_cta_valorizacao_pck a function pls_define_adic_horario*****************************************************
********* HOUVE DUPLICACAO DE CODIGO PARA MANTERMOS AS REGRAS DE HORARIO FUNCIONANDO NOS DOIS MODELOS ****************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

ie_dt_procedimento_w	varchar(1);
dt_inicio_proc_w	pls_conta_proc.dt_inicio_proc%type;
dt_fim_proc_w		pls_conta_proc.dt_fim_proc%type;
ie_preco_prestador_w	varchar(1)	:= 'N';
ie_preco_reembolso_w	varchar(1)	:= 'N';
ie_preco_pos_estab_w	varchar(1)	:= 'N';
ie_preco_copartic_w	varchar(1)	:= 'N';
ie_preco_intercambio_w	varchar(1)	:= 'N';
ie_preco_cobr_prev_w	varchar(1)	:= 'N';
ie_tipo_regra_feriado_w	pls_parametros.ie_tipo_feriado%type;
dt_fim_regra_w		pls_conta_proc.dt_fim_proc%type;
dt_inicio_regra_w	pls_conta_proc.dt_inicio_proc%type;
ds_sql_w		varchar(4000);
ds_sql_orig_w		varchar(500);
ds_restr_w		varchar(3500);
ret_null_w		varchar(4000);
dados_regra_w		pls_cta_valorizacao_pck.dados_regra_horario;
var_cur_w		integer;
nr_seq_proc_w		pls_conta_proc_v.nr_sequencia%type;
qt_iteracoes_w		integer;
tb_seq_proc_w		dbms_sql.number_table;
tb_regras_w		dbms_sql.number_table;
var_retorno_w		integer;	
var_exec_w		integer;

C01 CURSOR(	cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
        SELECT	
			nr_sequencia,
			dt_inicio_vigencia,	
			dt_fim_vigencia,		
			cd_procedimento,		
			ie_origem_proced,		
			cd_area_procedimento,	
			cd_especialidade,		
			cd_grupo_proc,		
			cd_edicao_amb,		
			nr_seq_prestador,		
			ie_feriado,		
			ie_tipo_vinculo,	
			nr_seq_classificacao,	
			ie_tipo_feriado,	
			dt_dia_semana, 		
			nr_seq_grupo_rec,
			ie_preco,		
			ie_tipo_intercambio,	
			nr_seq_contrato,		
			nr_seq_ops_congenere,	
			nr_seq_intercambio,
			ie_tipo_congenere,	
			ie_regra_manual,	
			ie_preco_prestador,	
			ie_preco_reembolso,	
			ie_preco_pos_estab,	
			ie_preco_copartic,		
			ie_preco_intercambio,	
			nr_seq_grupo_servico,
			nr_seq_tipo_prestador,
			tx_medico,
			tx_anestesista,
			tx_auxiliares,
			tx_custo_operacional,
			tx_materiais,
			tx_procedimento,
			ie_liberado,
			hr_final,
			hr_inicial,
			ie_hora_inicial,
			ie_hora_final,
			ie_carater_internacao,
			coalesce(ie_percentual,'S') ie_percentual,
			coalesce(ie_acres_urg_emer, 'N') ie_acres_urg_emer,
			ie_tipo_guia
		from    pls_proc_criterio_horario 
		where   cd_estabelecimento	= cd_estabelecimento_pc
		and     ie_situacao 		= 'A'
		and	((ie_preco_prestador = ie_preco_prestador_w ) 	or (ie_preco_reembolso  = ie_preco_reembolso_w ) 	or (ie_preco_pos_estab  = ie_preco_pos_estab_w ) 	or (ie_preco_copartic   = ie_preco_copartic_w  ) 	or (ie_preco_intercambio = ie_preco_intercambio_w )or (ie_preco_cobr_prev  = ie_preco_cobr_prev_w ))
			order by
					coalesce(nr_seq_classificacao,0) desc,
			coalesce(ie_feriado,'N') desc,
			coalesce(cd_procedimento,0) desc,
					coalesce(cd_grupo_proc,0) desc,
					coalesce(cd_especialidade,0) desc,
					coalesce(cd_area_procedimento,0) desc, 
					coalesce(nr_seq_prestador,0) desc,
					coalesce(ie_prioridade,0) desc,
					coalesce(cd_edicao_amb,0) desc,
			coalesce(ie_preco,0) desc,
			coalesce(ie_tipo_intercambio,'A') desc,
			coalesce(nr_seq_contrato,0) desc,
			coalesce(nr_seq_ops_congenere,0)desc,
			coalesce(nr_seq_intercambio,0) desc,
			coalesce(ie_tipo_guia, 0) desc;

BEGIN

--Seta o campo nr_seq_regra_horario para null em todos os campos

CALL pls_cta_valorizacao_pck.limpa_regra_horario(	 nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p, nr_seq_proc_p);

/*Obter o tipo de regra que se esta restringindo*/

if (ie_tipo_tabela_p	= 'P') then
	ie_preco_prestador_w	:= 'S';
elsif (ie_tipo_tabela_p	= 'R') then
	ie_preco_reembolso_w	:= 'S';
elsif (ie_tipo_tabela_p	= 'O') then
	ie_preco_pos_estab_w	:= 'S';
elsif (ie_tipo_tabela_p	= 'CO') then
	ie_preco_copartic_w	:= 'S';
elsif (ie_tipo_tabela_p	= 'I') then
	ie_preco_intercambio_w	:= 'S';
elsif (ie_tipo_tabela_p	= 'CP') then
	ie_preco_cobr_prev_w	:= 'S';
end if;

--Obtem o parametro do tipo tipo de feriado

select	ie_tipo_feriado
into STRICT	ie_tipo_regra_feriado_w
from	table(pls_parametros_pck.f_retorna_param(cd_estabelecimento_p));

ds_sql_orig_w	:= 	'select	cp.nr_sequencia,	 '  || pls_util_pck.enter_w ||
			'	cp.dt_inicio_proc, '  || pls_util_pck.enter_w ||
			'	cp.dt_fim_proc '  || pls_util_pck.enter_w ||
			'from	pls_conta_proc_v	 cp '  || pls_util_pck.enter_w||
			'where	cp.ie_glosa		= ''N'' '|| pls_util_pck.enter_w ||
			'and	cp.ie_status		in (''A'',''U'',''S'',''L'',''P'',''C'') '  || pls_util_pck.enter_w||
			'and	cp.ie_status_conta in (''A'',''L'',''P'',''U'')'||pls_util_pck.enter_w||
			'and	cp.ie_status_protocolo in (''1'',''2'',''5'')'||pls_util_pck.enter_w;
					
for r_c01_w in C01(cd_estabelecimento_p) loop
	dados_regra_w.nr_sequencia		:= r_c01_w.nr_sequencia;
	dados_regra_w.dt_inicio_vigencia	:= r_c01_w.dt_inicio_vigencia;
	dados_regra_w.dt_fim_vigencia		:= r_c01_w.dt_fim_vigencia;
	dados_regra_w.cd_procedimento		:= r_c01_w.cd_procedimento;
	dados_regra_w.ie_origem_proced		:= r_c01_w.ie_origem_proced;
	dados_regra_w.cd_area_procedimento	:= r_c01_w.cd_area_procedimento;
	dados_regra_w.cd_especialidade		:= r_c01_w.cd_especialidade;
	dados_regra_w.cd_grupo_proc		:= r_c01_w.cd_grupo_proc;
	dados_regra_w.cd_edicao_amb		:= r_c01_w.cd_edicao_amb;
	dados_regra_w.nr_seq_prestador		:= r_c01_w.nr_seq_prestador;
	dados_regra_w.ie_feriado		:= r_c01_w.ie_feriado;
	dados_regra_w.ie_tipo_vinculo		:= r_c01_w.ie_tipo_vinculo;
	dados_regra_w.nr_seq_classificacao	:= r_c01_w.nr_seq_classificacao;
	dados_regra_w.ie_tipo_feriado 		:= r_c01_w.ie_tipo_feriado;
	dados_regra_w.dt_dia_semana 		:= r_c01_w.dt_dia_semana;
	dados_regra_w.nr_seq_grupo_rec 		:= r_c01_w.nr_seq_grupo_rec;
	dados_regra_w.ie_preco			:= r_c01_w.ie_preco;
	dados_regra_w.ie_tipo_intercambio	:= r_c01_w.ie_tipo_intercambio;
	dados_regra_w.nr_seq_contrato		:= r_c01_w.nr_seq_contrato;
	dados_regra_w.nr_seq_ops_congenere	:= r_c01_w.nr_seq_ops_congenere;
	dados_regra_w.nr_seq_intercambio	:= r_c01_w.nr_seq_intercambio;
	dados_regra_w.ie_tipo_congenere		:= r_c01_w.ie_tipo_congenere;
	dados_regra_w.ie_regra_manual		:= r_c01_w.ie_regra_manual;
	dados_regra_w.ie_preco_prestador	:= r_c01_w.ie_preco_prestador;
	dados_regra_w.ie_preco_reembolso	:= r_c01_w.ie_preco_reembolso;
	dados_regra_w.ie_preco_pos_estab	:= r_c01_w.ie_preco_pos_estab;
	dados_regra_w.ie_preco_copartic		:= r_c01_w.ie_preco_copartic;
	dados_regra_w.ie_preco_intercambio	:= r_c01_w.ie_preco_intercambio;
	dados_regra_w.nr_seq_grupo_servico	:= r_c01_w.nr_seq_grupo_servico;
	dados_regra_w.nr_seq_tipo_prestador	:= r_c01_w.nr_seq_tipo_prestador;
	dados_regra_w.ie_carater_internacao	:= r_c01_w.ie_carater_internacao;
	dados_regra_w.ie_liberado			:= r_c01_w.ie_liberado;
	dados_regra_w.ie_acres_urg_emer		:= r_c01_w.ie_acres_urg_emer;
	dados_regra_w.ie_tipo_guia			:= r_c01_w.ie_tipo_guia;
	
	ds_restr_w	:= obter_restricao_regra_horario('RESTRICAO', dados_regra_w, null, nr_seq_lote_p, nr_seq_protocolo_p,
							nr_seq_lote_processo_p, nr_seq_conta_p, nr_seq_proc_p,
							ie_tipo_regra_feriado_w, cd_estabelecimento_p);
	-- Aqui e montado o select para recuperar os procedimentos que foram executados e se encaixam na regra montada.

		ds_sql_w :=	ds_sql_orig_w ||pls_util_pck.enter_w||
				ds_restr_w|| pls_util_pck.enter_w;
		
	-- Abrir um novo cursor

	var_cur_w := dbms_sql.open_cursor;
	
	-- Criar o cursor

	dbms_sql.parse(var_cur_w, ds_sql_w, 1);

	--Atualiza as binds que serao utilizadas no select

	ret_null_w	:= obter_restricao_regra_horario('BINDS', dados_regra_w, var_cur_w, nr_seq_lote_p, nr_seq_protocolo_p,
						nr_seq_lote_processo_p, nr_seq_conta_p, nr_seq_proc_p,
						ie_tipo_regra_feriado_w, cd_estabelecimento_p);	
						
	--Executar select  dinamico

	dbms_sql.define_column(var_cur_w, 1, nr_seq_proc_w);
	dbms_sql.define_column(var_cur_w, 2, dt_inicio_proc_w);
	dbms_sql.define_column(var_cur_w, 3, dt_fim_proc_w );
	var_exec_w 	:= dbms_sql.execute(var_cur_w);
	
	qt_iteracoes_w := 0;
		
	loop
		var_retorno_w := dbms_sql.fetch_rows(var_cur_w);

		exit when var_retorno_w = 0;
			
		-- Pegar os dados do SQL dinamico

		dbms_sql.column_value(var_cur_w, 1, nr_seq_proc_w);
		dbms_sql.column_value(var_cur_w, 2, dt_inicio_proc_w );
		dbms_sql.column_value(var_cur_w, 3, dt_fim_proc_w );
					
		if (r_c01_w.hr_final IS NOT NULL AND r_c01_w.hr_final::text <> '') and (r_c01_w.hr_inicial IS NOT NULL AND r_c01_w.hr_inicial::text <> '') then
			
			dt_inicio_regra_w := pls_manipulacao_datas_pck.obter_data_mais_hora(dt_inicio_proc_w, r_c01_w.hr_inicial);
			dt_fim_regra_w := pls_manipulacao_datas_pck.obter_data_mais_hora(dt_inicio_proc_w, r_c01_w.hr_final);
			
			/*Atencao sempre que houver a interncao de uma regra iniciar em um dia e terminar em outro devem ser criadas duas regras distintas EX. 22:01:00 ate as 05:59:59 
			devera ser criada uma regra das 22:01:00 ate as 23:59:59 e outra das 00:00:00 ate as 05:59:59 para que a aplicacao das mesmas ocorra de forma correta*/

			if (dt_inicio_regra_w >= dt_fim_regra_w) then
				dt_fim_regra_w := dt_fim_regra_w + 1;
			end if;
			
			ie_dt_procedimento_w := pls_obter_se_regra_horario( dt_inicio_regra_w, dt_fim_regra_w, r_c01_w.ie_hora_inicial, r_c01_w.ie_hora_final, dt_inicio_proc_w, dt_fim_proc_w, r_c01_w.ie_percentual);
			
		else
			ie_dt_procedimento_w := 'S';
		end if;
			
		--Se regra liberada e regra por horas(pls_obter_regra_horario)  forem S, entao alimenta

		-- as listas que posteriormente serao utilizadas no update.

		if ( ie_dt_procedimento_w 	= 'S' and r_c01_w.ie_liberado = 'S')then
			tb_regras_w(qt_iteracoes_w)	:= r_c01_w.nr_sequencia;	
			tb_seq_proc_w(qt_iteracoes_w)	:= nr_seq_proc_w;
			qt_iteracoes_w := qt_iteracoes_w + 1;
		end if;
		
		--Se atingiu o limite, entao manda para update dos procedimentos que estao na lista

		if (qt_iteracoes_w = pls_util_cta_pck.qt_registro_transacao_w) then
			CALL pls_cta_valorizacao_pck.atualiza_taxas_regra_horario(tb_seq_proc_w, tb_regras_w);
			qt_iteracoes_w := 0;
		end if;
		
	end loop; --Loop dos procedimentos(SQL dinamico)
	dbms_sql.close_cursor(var_cur_w);
	--Se sobrou algum registro na lista, entao manda fazer update dos procedimentos

	CALL pls_cta_valorizacao_pck.atualiza_taxas_regra_horario(tb_seq_proc_w, tb_regras_w);

end loop;--loop das regras

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_valorizacao_pck.pls_gerencia_regra_horario ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_proc_p pls_conta_proc.nr_sequencia%type, ie_tipo_tabela_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
