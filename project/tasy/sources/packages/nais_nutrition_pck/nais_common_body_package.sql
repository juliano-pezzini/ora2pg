-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_nutrition_pck.nais_common_body ( nr_atendimento_p text ) AS $body$
DECLARE

    department_code_w bft_encounter_v.medical_department_id%type;
    date_of_admission_w bft_encounter_v.encouter_admit_date%type;
    patient_id_w bft_encounter_v.patient_id%type;
    current_setting('nais_nutrition_pck.json_output_list_w')::philips_json_list philips_json_list;
    current_setting('nais_nutrition_pck.json_output_w')::philips_json philips_json;
    c02 CURSOR FOR
        SELECT  count(*) over () totalcount,
		        '01' update_class,
				'01' processing_class,				
                 coalesce(b.medical_record_id,0)  patient_id,
                 case when (cp.cd_especialidade_med IS NOT NULL AND cp.cd_especialidade_med::text <> '') then
                         coalesce(nais_nutrition_pck.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', cp.cd_especialidade_med), ' ') 
                     when (cp.cd_departamento_med IS NOT NULL AND cp.cd_departamento_med::text <> '') then 
                         coalesce(nais_nutrition_pck.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', cp.cd_departamento_med), ' ')   
                     else '00'
                end as calculation_department_code,			
				to_char(c.dt_inicio,'yyyymmdd') calculation_start_date,
				coalesce(get_day_clasification(c.nr_atendimento,clock_timestamp()),'0') on_the_day_classification,
				coalesce(get_day_clasification(c.nr_atendimento,clock_timestamp() + interval '1 days'),'0') next_day_classification,
				coalesce(CASE WHEN c.ie_duracao='C' THEN  to_char(clock_timestamp() + interval '31 days','yyyymmdd')  ELSE to_char(c.dt_fim,'yyyymmdd') END ,to_char(clock_timestamp() + interval '31 days','yyyymmdd')) calculation_end_date,
				coalesce(get_day_clasification(c.nr_atendimento,coalesce(CASE WHEN c.ie_duracao='P' THEN  last_day(c.dt_inicio)  ELSE c.dt_fim END ,clock_timestamp())),'0') end_date_classification,
				get_day_meal_count(c.nr_atendimento,clock_timestamp(),'L') liquid_mealcount_on_the_day,
				get_day_meal_count(c.nr_atendimento,clock_timestamp() + interval '1 days','L') liquid_mealcount_next_day,
				get_day_meal_count(c.nr_atendimento,coalesce(CASE WHEN c.ie_duracao='P' THEN  last_day(c.dt_inicio)  ELSE c.dt_fim END ,clock_timestamp()),'L') liquid_mealcount_end_day,
				get_day_meal_count(c.nr_atendimento,clock_timestamp(),'M') on_the_day_mealcount,
				get_day_meal_count(c.nr_atendimento,clock_timestamp(),'S') on_the_day_special_mealcount,
				get_day_meal_count(c.nr_atendimento,clock_timestamp() + interval '1 days','M') next_day_meal_count,
				get_day_meal_count(c.nr_atendimento,clock_timestamp() + interval '1 days','S') next_day_special_meal_count,
				get_day_meal_count(c.nr_atendimento,coalesce(CASE WHEN c.ie_duracao='P' THEN  last_day(c.dt_inicio)  ELSE c.dt_fim END ,clock_timestamp()),'M') end_day_meal_coount,
				get_day_meal_count(c.nr_atendimento,coalesce(CASE WHEN c.ie_duracao='P' THEN  last_day(c.dt_inicio)  ELSE c.dt_fim END ,clock_timestamp()),'S') end_day_special_mealcount,
				coalesce(to_char(b.encouter_admit_date, 'yyyymmdd'),' ') date_of_admission,
				coalesce(to_char(b.encouter_admit_date, 'hh24mi'),' ') time_of_admission,
				'00' mnn_classification,
				' ' spare,
				' ' eot_two
        from    cpoe_dieta c ,
                bft_encounter_v b,
                cpoe_order_unit cp
        where   c.nr_atendimento   = b.nr_atendimento
        and     trunc(c.dt_inicio) = trunc(clock_timestamp())
        and     (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
        and     coalesce(c.dt_suspensao::text, '') = ''
        and     c.nr_seq_cpoe_order_unit =cp.nr_sequencia
        and     c.nr_atendimento   =  nr_atendimento_p 
        order by c.dt_atualizacao asc LIMIT 1;
		
    r_c02_w c02%rowtype;

BEGIN
    PERFORM set_config('nais_nutrition_pck.json_output_w', philips_json(), false);
    PERFORM set_config('nais_nutrition_pck.json_output_list_w', philips_json_list(), false);
    open c02;
		loop
		    fetch c02 into r_c02_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
		    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.update_class, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.processing_class, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.patient_id, 10, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.calculation_department_code, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.calculation_start_date, 8, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.on_the_day_classification, 2, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.next_day_classification, 2, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.calculation_end_date, 8, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.end_date_classification, 2, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(' ', 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.liquid_mealcount_on_the_day, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.liquid_mealcount_next_day, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.liquid_mealcount_end_day, 2, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.on_the_day_mealcount, 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.on_the_day_special_mealcount, 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.next_day_meal_count, 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.next_day_special_meal_count, 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.end_day_meal_coount, 1, 'L' );
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.end_day_special_mealcount, 1, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.date_of_admission, 8, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.time_of_admission, 4, 'L');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.mnn_classification, 1, 'L','0');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(r_c02_w.spare, 33, 'R', ' ');
			CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_nutrition_pck.append_text(chr(13), 1, 'L');
        end loop;
    close c02;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_nutrition_pck.nais_common_body ( nr_atendimento_p text ) FROM PUBLIC;
