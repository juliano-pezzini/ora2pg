-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*-------------------
caseservicecreatemult - response
caseservicechangemult - response
caseservicecancelmult - response
*/
CREATE OR REPLACE PROCEDURE ish_case_serv_data_pck.serv_sending_response (nr_sequencia_p bigint, ds_xml_p text) is ds_erro_w varchar(4000) RETURNS FROM AS $body$
DECLARE
 "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:CaseserviceCreatemultResponse' passing xml_w columns
	caseservicedata xml path 'CaseserviceData',
	return xml	path 'Return')

union all

SELECT  'A' ie_tipo,
	caseservicedata,
	return
from	xmltable(
		xmlnamespaces(
		'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:CaseserviceChangemultResponse' passing xml_w columns
	caseservicedata xml path 'CaseserviceCdata',
	return xml	path 'Return')

union all

select  'E' ie_tipo,
	caseservicedata,
	return
from	xmltable(
		xmlnamespaces(
		'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:CaseserviceCancelmultResponse' passing xml_w columns
	caseservicedata xml path 'CaseserviceCancel',
	return xml	path 'Return');

current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype	current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype;

current_setting('ish_case_serv_data_pck.c02')::CURSOR CURSOR FOR
SELECT	*
from	xmltable('/CaseserviceData/item' passing caseservicedata_w columns
	serviceseqno	varchar(10)	path	'ServiceSeqno',
	srvinputseqno	varchar(20)	path	'SrvInputseqno',
	updateuser	varchar(12)	path	'UpdateUser')
where	coalesce(serviceseqno,'X') <> 'X'
and	current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo in ('E','I')

union all

select	*
from	xmltable('/CaseserviceData/item' passing caseservicedata_w columns
	serviceseqno	varchar(10)	path	'SERVICE_SEQNO',
	srvinputseqno	varchar(20)	path	'SRV_INPUTSEQNO',
	updateuser	varchar(12)	path	'UPDATE_USER')
where	coalesce(serviceseqno,'X') <> 'X'
and	current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo in ('E','I')

union all

select	*
from	xmltable('/CaseserviceCdata/item' passing caseservicedata_w columns
	serviceseqno	varchar(10)	path	'ServiceSeqno',
	srvinputseqno	varchar(20)	path	'SrvInputseqno',
	updateuser	varchar(12)	path	'UpdateUser')
where	coalesce(serviceseqno,'X') <> 'X'
and	current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo in ('A')

union all

select	*
from	xmltable('/CaseserviceCdata/item' passing caseservicedata_w columns
	serviceseqno	varchar(10)	path	'SERVICE_SEQNO',
	srvinputseqno	varchar(20)	path	'SRV_INPUTSEQNO',
	updateuser	varchar(12)	path	'UPDATE_USER')
where	coalesce(serviceseqno,'X') <> 'X'
and	current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo in ('A');	
	
current_setting('ish_case_serv_data_pck.c02_w')::c02%rowtype	current_setting('ish_case_serv_data_pck.c02')::CURSOR%rowtype;

current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type			intpd_fila_transmissao.ie_status%type		:=	'S';
current_setting('ish_case_serv_data_pck.ie_tipo_erro_w')::intpd_fila_transmissao.ie_tipo_erro%type			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';
		

BEGIN
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);
ish_converter_response(nr_sequencia_p, ds_xml_p, current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type, current_setting('ish_case_serv_data_pck.ie_tipo_erro_w')::intpd_fila_transmissao.ie_tipo_erro%type, xml_w);

if (current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type,
		ie_tipo_erro = current_setting('ish_case_serv_data_pck.ie_tipo_erro_w')::intpd_fila_transmissao.ie_tipo_erro%type,
		nr_doc_externo  = NULL,
		ie_response_procedure = 'S',
		ds_log  = NULL,
		dt_atualizacao = clock_timestamp(),
		ds_xml_retorno = ds_xml_p
	where	nr_sequencia = nr_sequencia_p;
else	
	begin
	begin
	select	coalesce(b.ie_conversao,'I'),
		b.nr_seq_sistema,
		b.nr_seq_projeto_xml,
		b.nr_seq_regra_conv,
		a.nr_seq_agrupador
	into STRICT	ie_conversao_w,
		nr_seq_sistema_w,
		nr_seq_projeto_xml_w,
		nr_seq_regra_w,
		nr_seq_agrupador_w
	from	intpd_fila_transmissao a,
		intpd_eventos_sistema b
	where	a.nr_seq_evento_sistema = b.nr_sequencia
	and	a.nr_sequencia = nr_sequencia_p;
	exception
	when others then
		null;
	end;	

	open current_setting('ish_case_serv_data_pck.c01')::CURSOR;
	loop
	fetch current_setting('ish_case_serv_data_pck.c01')::into CURSOR
		current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype;
	EXIT WHEN NOT FOUND; /* apply on current_setting('ish_case_serv_data_pck.c01')::CURSOR */	
		if	((current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo = 'E') and (current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type = 'X')) then
			PERFORM set_config('ish_case_serv_data_pck.ie_status_w', 'S', false);
		end if;
		
		caseservicedata_w	:= current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.caseservicedata;
		
		if (current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo in ('I','A')) then --apenas quando insert
			open current_setting('ish_case_serv_data_pck.c02')::CURSOR;
			loop
			fetch current_setting('ish_case_serv_data_pck.c02')::into CURSOR
				current_setting('ish_case_serv_data_pck.c02_w')::c02%rowtype;
			EXIT WHEN NOT FOUND; /* apply on current_setting('ish_case_serv_data_pck.c02')::CURSOR */
			
				if (current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type = 'X') then
					PERFORM set_config('ish_case_serv_data_pck.ie_status_w', 'S', false);
				end if;
				--grava a conversao meio externo da pk da procedimento_paciente, com o recebido no arquivo
				if (current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.ie_tipo = 'I') then
					gerar_conv_meio_externo(null,
						'PROCEDIMENTO_PACIENTE',
						'NR_SEQUENCIA',
						somente_numero(current_setting('ish_case_serv_data_pck.c02_w')::c02%rowtype.srvinputseqno),
						substr('SERV' || current_setting('ish_case_serv_data_pck.ds_separador_w')::varchar(10) || current_setting('ish_case_serv_data_pck.c02_w')::c02%rowtype.serviceseqno ,1,40),
						null,
						nr_seq_regra_w,
						'A',
						'INTPDTASY');
				end if;
			end loop;
			close current_setting('ish_case_serv_data_pck.c02')::CURSOR;		
		end if;

		ish_return_processing(nr_sequencia_p, current_setting('ish_case_serv_data_pck.c01_w')::current_setting('ish_case_serv_data_pck.c01')::CURSOR%rowtype.return, current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type);
		
	end loop;
	close current_setting('ish_case_serv_data_pck.c01')::CURSOR;

	if (current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type = 'X') then
		PERFORM set_config('ish_case_serv_data_pck.ie_status_w', 'E', false);
	end if;

	update	intpd_fila_transmissao
	set	ie_status 		= coalesce(current_setting('ish_case_serv_data_pck.ie_status_w')::intpd_fila_transmissao.ie_status%type,'S'),
		ie_response_procedure	= 'S',
		ds_xml_retorno		= ds_xml_p
	where	nr_sequencia 		= nr_sequencia_p;
	exception
	when others then
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		update	intpd_fila_transmissao
		set	ie_status 		= 'E',
			ie_response_procedure	= 'S',
			ds_log 			= ds_erro_w
		where	nr_sequencia 		= nr_sequencia_p;		
	end;
end if;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;

commit;
END;		

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_case_serv_data_pck.serv_sending_response (nr_sequencia_p bigint, ds_xml_p text) is ds_erro_w varchar(4000) FROM PUBLIC;
