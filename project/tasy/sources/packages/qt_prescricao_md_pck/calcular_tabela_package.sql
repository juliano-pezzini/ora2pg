-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION qt_prescricao_md_pck.calcular_tabela (dose bigint, medicamentos qt_prescricao_pck.medicamento_vetor) RETURNS QT_PRESCRICAO_PCK.TABELA_PRESCRICAO AS $body$
DECLARE

        type dicionario_prescricao is table of qt_prescricao_pck.prescricao index by integer;

        medicamento_w qt_prescricao_pck.medicamento;
        indice_medicamentos_w bigint;

        prescricao_w qt_prescricao_pck.prescricao;
        prescricao_posterior_w qt_prescricao_pck.prescricao;
        prescricao_existente_w qt_prescricao_pck.prescricao;
        prescricao_combinada_w qt_prescricao_pck.prescricao;

        dicionario_w dicionario_prescricao;
        medic_w qt_prescricao_pck.medicamento;

        chave_w bigint;
        chave_existente_w bigint;
        indice_w bigint;
        indice_posterior_w bigint;
        limite_w bigint;
        maior_dose_w bigint;
        nova_dose_w bigint;

        retorno_w qt_prescricao_pck.tabela_prescricao;
        indice_prescricoes_w bigint;

BEGIN
        -- primeiro passo: preencher tabela com as doses primarias
        -- ex: dose 20
        -- preenchimento: 1x20 2x20=40 3x20=60..dose
        indice_medicamentos_w := medicamentos.first;
        while(indice_medicamentos_w IS NOT NULL AND indice_medicamentos_w::text <> '') loop
            medic_w := medicamentos(indice_medicamentos_w);

            limite_w := ceil(dose / medic_w.dose);
            for quantidade in 1..limite_w loop

                medicamento_w.codigo := medic_w.codigo;
                medicamento_w.nome := medic_w.nome;
                medicamento_w.dose := medic_w.dose;
                medicamento_w.unidade_medida := medic_w.unidade_medida;
                medicamento_w.quantidade := quantidade;

                prescricao_w.perda := 0;
                prescricao_w.medicamentos.delete;

                prescricao_w.medicamentos(0) := medicamento_w;
                chave_w := qt_prescricao_md_pck.chave_dose(qt_prescricao_md_pck.prescricao_dose_total(prescricao_w));

                if not(dicionario_w.exists(chave_w)) then
                    dicionario_w(chave_w) := prescricao_w;
                else
                    -- se a dose resultante ja existir
                    -- deve-se verificar para utilizar a menor quantidade de frascos
                    -- e substituir se necessario
                    -- ex: 1x40 e menor que 4x10
                    prescricao_existente_w := dicionario_w(chave_w);
                    if (qt_prescricao_md_pck.prescricao_quantidade_total(prescricao_w) < qt_prescricao_md_pck.prescricao_quantidade_total(prescricao_existente_w)) then
                        dicionario_w(chave_w) := prescricao_w;
                    end if;
                end if;
            end loop;

            indice_medicamentos_w := medicamentos.next(indice_medicamentos_w);
        end loop;

        -- segundo passo
        -- combinar os medicamentos para gerar entradas otimizadas
        -- ex: 3x10 + 1x40 => 70
        indice_w := dicionario_w.first;
        while(indice_w IS NOT NULL AND indice_w::text <> '') loop

            indice_posterior_w := indice_w;
            prescricao_w := dicionario_w(indice_w);
            while(indice_posterior_w IS NOT NULL AND indice_posterior_w::text <> '') loop
                prescricao_posterior_w := dicionario_w(indice_posterior_w);
                nova_dose_w := qt_prescricao_md_pck.prescricao_dose_total(prescricao_w) + qt_prescricao_md_pck.prescricao_dose_total(prescricao_posterior_w);

                if (nova_dose_w > dose) then
                    if ((maior_dose_w IS NOT NULL AND maior_dose_w::text <> '') and nova_dose_w > maior_dose_w) then
                        indice_posterior_w := null;
                        exit;
                    end if;

                    -- a maior dose nao eh a maior dose de todo o conjunto
                    -- eh sempre a "menor dose" seguinte apos a dose
                    -- ex: 
                    --      dose: 80, 
                    --      combinacoes: 40, 45, 80, 85, 120, 125
                    --      maior dose deve ser: 85
                    if (coalesce(maior_dose_w::text, '') = '' or nova_dose_w < maior_dose_w) then
                        maior_dose_w := nova_dose_w;
                    end if;
                end if;

                prescricao_combinada_w := qt_prescricao_md_pck.combinar_prescricao(prescricao_w, prescricao_posterior_w);
                chave_w := qt_prescricao_md_pck.chave_dose(qt_prescricao_md_pck.prescricao_dose_total(prescricao_combinada_w));

                if not(dicionario_w.exists(chave_w)) then
                    dicionario_w(chave_w) := prescricao_combinada_w;
                else
                    prescricao_existente_w := dicionario_w(chave_w);
                    chave_existente_w := qt_prescricao_md_pck.chave_dose(qt_prescricao_md_pck.prescricao_dose_total(prescricao_existente_w));

                    -- quando a dose combinada da prescricao for:
                    --   a) menor que a existente ou
                    --   b) doses forem iguais mas com menor quantidade de frascos
                    -- deve-se substituir o item existente
                    if (chave_w < chave_existente_w or (chave_w = chave_existente_w
                        and qt_prescricao_md_pck.prescricao_quantidade_total(prescricao_combinada_w) < qt_prescricao_md_pck.prescricao_quantidade_total(prescricao_existente_w))) then
                        dicionario_w(chave_w) := prescricao_combinada_w;
                    end if;
                end if;

                indice_posterior_w := dicionario_w.next(indice_posterior_w);
            end loop;

            indice_w := dicionario_w.next(indice_w);
        end loop;

        retorno_w.medicamentos := medicamentos;

        indice_w := dicionario_w.first;
        indice_prescricoes_w := 0;
        while(indice_w IS NOT NULL AND indice_w::text <> '') loop
            retorno_w.prescricoes(indice_prescricoes_w) := dicionario_w(indice_w);

            indice_w := dicionario_w.next(indice_w);
            indice_prescricoes_w := indice_prescricoes_w + 1;
        end loop;

        return retorno_w;
    end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION qt_prescricao_md_pck.calcular_tabela (dose bigint, medicamentos qt_prescricao_pck.medicamento_vetor) FROM PUBLIC;
