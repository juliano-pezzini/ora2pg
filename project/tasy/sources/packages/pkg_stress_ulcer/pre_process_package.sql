-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pkg_stress_ulcer.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_STRESS_ULCER CURSOR(V_START_DATE timestamp,
                              V_END_DATE   timestamp,
                              V_SETOR      bigint,
                              V_PATIENT    text) FOR
      SELECT DISTINCT ad.nr_atendimento,
             ap.cd_pessoa_fisica,
             un.cd_estabelecimento,
             cd_setor_atendimento,
             dt_entrada_setor,
             dt_saida_setor,
             ds_classe_material medicamento,
             cd_classe_material,
             pkg_vap_report.GET_REFACTORY_PATIENT_NAME(pf.nm_pessoa_fisica) name,
             case
                 when obter_data_obito(ap.cd_pessoa_fisica) >= ap.dt_entrada and (((ap.dt_alta IS NOT NULL AND ap.dt_alta::text <> '') and obter_data_obito(ap.cd_pessoa_fisica) <= ap.dt_alta) or coalesce(ap.dt_alta::text, '') = '')
                 then 'Expired'
                 else 'Alive'
             end hosp_disp,
             admdiag.ds_diagnostico as diag_admissao,
             pf.nr_cpf ssn,
             se.ds_etnia,
             CASE WHEN pf.ie_sexo='M' THEN  'Male' WHEN pf.ie_sexo='F' THEN  'Female' END  sexo,
             pf.dt_nascimento,
             pf.qt_altura_cm,
             pf.qt_peso,
             un.nm_fantasia_estab,
             ap.dt_entrada dt_entrada_hosp,
             ap.dt_alta dt_saida_hosp,
             un.ds_setor_atendimento,
             OBTER_VALOR_DOMINIO_IDIOMA(1, OBTER_CLASSIF_SETOR(un.cd_setor_atendimento), 3) tipo_setor,
             OBTER_NOME_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento)) origem_admissao,
             CASE WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento)) IS NULL THEN  'Admit' WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento))=un.cd_estabelecimento THEN  'Unit Transfer'  ELSE 'Hospital Transfer' END  tipo_admissao,
             coalesce(PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(ap.nr_atendimento, un.dt_entrada_setor, 'S'), 'N') surgical_dx,
             PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(ap.nr_atendimento, un.dt_entrada_setor, 'E') elective_surgery,
             pkg_vap_report.GET_REFACTORY_PATIENT_NAME(un.pessoa_resp) resp_unidade,
             case
                 when obter_data_obito(ap.cd_pessoa_fisica) >= un.dt_entrada_setor and (((un.dt_saida_setor IS NOT NULL AND un.dt_saida_setor::text <> '') and obter_data_obito(ap.cd_pessoa_fisica) <= un.dt_saida_setor) or coalesce(un.dt_saida_setor::text, '') = '')
                 then 'Expired'
                 else 'Alive'
             end unit_disp
        FROM (SELECT U.NR_ATENDIMENTO,
                     AP.CD_PESSOA_FISICA,
                     S.CD_ESTABELECIMENTO,
                     U.CD_SETOR_ATENDIMENTO,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                     MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                     PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                          U.DT_ENTRADA_UNIDADE,
                                                          U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                     E.NM_FANTASIA_ESTAB,
                     S.DS_SETOR_ATENDIMENTO,
                     PF.NM_PESSOA_FISICA AS PESSOA_RESP
                FROM (
                      SELECT DISTINCT A.NR_ATENDIMENTO,
                             P.CD_PESSOA_FISICA,
                             P.DT_ENTRADA,
                             P.DT_ALTA
                        FROM ATEND_PAC_DISPOSITIVO A
                       INNER JOIN ATENDIMENTO_PACIENTE P
                          ON A.NR_ATENDIMENTO = P.NR_ATENDIMENTO
                       WHERE A.DT_INSTALACAO <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                         AND (
                              coalesce(A.DT_RETIRADA::text, '') = ''
                              OR
                              A.DT_RETIRADA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE)
                             )
                         AND EXISTS (
                                    SELECT 1
                                      FROM DISPOSITIVO D
                                     WHERE D.NR_SEQUENCIA = A.NR_SEQ_DISPOSITIVO
                                       AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                   ) AP
               INNER JOIN ATEND_PACIENTE_UNIDADE U
                  ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
               INNER JOIN SETOR_ATENDIMENTO S
                  ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                 AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                LEFT JOIN PESSOA_FISICA PF
                  ON PF.CD_PESSOA_FISICA = S.CD_PESSOA_RESP
               INNER JOIN ESTABELECIMENTO E
                  ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
               WHERE CASE WHEN coalesce(P_CD_ESTAB, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(P_CD_ESTAB, 0)
                 AND CASE WHEN coalesce(V_SETOR, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(V_SETOR, 0)
                 AND EXISTS (SELECT 1
                              FROM USUARIO_SETOR US
                             WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                               AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                 AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                 AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp()))
                 AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                              U.DT_ENTRADA_UNIDADE,
                                                              U.CD_SETOR_ATENDIMENTO),
                         PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
               GROUP BY U.NR_ATENDIMENTO,
                        AP.CD_PESSOA_FISICA,
                        S.CD_ESTABELECIMENTO,
                        U.CD_SETOR_ATENDIMENTO,
                        PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                             U.DT_ENTRADA_UNIDADE,
                                                             U.CD_SETOR_ATENDIMENTO),
                        E.NM_FANTASIA_ESTAB,
                        S.DS_SETOR_ATENDIMENTO,
                        PF.NM_PESSOA_FISICA
           ) UN
       INNER JOIN ATENDIMENTO_PACIENTE AP
          ON AP.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
       INNER JOIN PESSOA_FISICA PF
          ON PF.CD_PESSOA_FISICA = AP.CD_PESSOA_FISICA
        LEFT JOIN SUS_ETNIA SE
          ON SE.NR_SEQUENCIA = PF.NR_SEQ_ETNIA
       INNER JOIN ATEND_PAC_DISPOSITIVO AD
          ON AD.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
        LEFT JOIN (
             SELECT coalesce(DD.NR_ATENDIMENTO, EXAM.NR_ATENDIMENTO) NR_ATENDIMENTO,
                    LEAST(coalesce(DD.DT_LIBERACAO, EXAM.DT_RESULTADO), coalesce(EXAM.DT_RESULTADO, DD.DT_LIBERACAO)) DT_LIBERACAO
               FROM DIAGNOSTICO_DOENCA DD
               LEFT JOIN (
                    SELECT ELR.NR_ATENDIMENTO,
                           ELR.DT_RESULTADO
                      FROM EXAME_LABORATORIO EL
                     INNER JOIN EXAME_LAB_RESULT_ITEM ELRI
                        ON ELRI.NR_SEQ_EXAME = EL.NR_SEQ_EXAME
                     INNER JOIN EXAME_LAB_RESULTADO ELR
                        ON ELR.NR_SEQ_RESULTADO = ELRI.NR_SEQ_RESULTADO
                     WHERE (
                            (
                             EL.IE_TIPO_EXAME_REL = 5
                             AND ELRI.QT_RESULTADO * 1000 < 50000
                            )
                            OR (
                             EL.IE_TIPO_EXAME_REL = 6
                             AND ELRI.QT_RESULTADO > 1.5
                            )
                            OR (
                             EL.IE_TIPO_EXAME_REL = 7
                             AND ELRI.QT_RESULTADO > 50
                            )
                           )
                       AND EL.IE_SITUACAO = 'A'
                       AND (ELR.NR_ATENDIMENTO IS NOT NULL AND ELR.NR_ATENDIMENTO::text <> '')
                  ) EXAM
                 ON EXAM.NR_ATENDIMENTO = DD.NR_ATENDIMENTO
              WHERE DD.IE_CLASSIFICACAO_DOENCA = 'P'
                AND DD.IE_SITUACAO = 'A'
                AND DD.IE_TIPO_DIAGNOSTICO = 2
                AND (DD.CD_DOENCA IN ('J381', 'J382', 'J45', 'J90', 'B24', 'S578') OR (EXAM.NR_ATENDIMENTO IS NOT NULL AND EXAM.NR_ATENDIMENTO::text <> ''))
           ) DD
          ON DD.NR_ATENDIMENTO = AD.NR_ATENDIMENTO
        LEFT JOIN(
             SELECT DISTINCT a.nr_atendimento,
                    a.cd_classe_material,
                    a.ds_classe_material
               FROM (
                     SELECT pm.nr_seq_atendimento as nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM prescr_material pm
                      INNER JOIN prescr_mat_alteracao pma
                         ON pma.nr_prescricao = pm.nr_prescricao
                      INNER JOIN material m
                         ON m.cd_material = pm.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material

UNION ALL

                     SELECT pmu.nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM paciente_medic_uso pmu
                      INNER JOIN material m
                         ON m.cd_material = pmu.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material
                      
UNION ALL

                     SELECT c.nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM cirurgia c
                      INNER JOIN cirurgia_agente_anestesico caa
                         ON caa.nr_cirurgia = c.nr_cirurgia
                      INNER JOIN cirurgia_agente_anest_ocor caao
                         ON caao.nr_seq_cirur_agente = caa.nr_sequencia
                      INNER JOIN material m
                         ON m.cd_material = caa.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material
                  ) a
           ) treat
          ON treat.nr_atendimento = ad.nr_atendimento
        LEFT JOIN(
             SELECT DD.NR_ATENDIMENTO,
                    DD.DS_DIAGNOSTICO
               FROM DIAGNOSTICO_DOENCA DD
              INNER JOIN(
                    SELECT DD.NR_ATENDIMENTO,
                           MIN(DD.DT_LIBERACAO) DT_LIBERACAO
                      FROM DIAGNOSTICO_DOENCA DD
                     WHERE DD.IE_TIPO_DOENCA = 'P'
                       AND DD.IE_TIPO_DIAGNOSTICO = 2
                     GROUP BY DD.NR_ATENDIMENTO,
                              DD.DS_DIAGNOSTICO
                  ) A
                 ON A.NR_ATENDIMENTO = DD.NR_ATENDIMENTO
                AND A.DT_LIBERACAO = DD.DT_LIBERACAO
           ) ADMDIAG
          ON DD.NR_ATENDIMENTO = AP.NR_ATENDIMENTO
       WHERE EXISTS (
                     SELECT 1
                       FROM DISPOSITIVO D
                      WHERE D.NR_SEQUENCIA = AD.NR_SEQ_DISPOSITIVO
                        AND D.IE_CLASSIF_DISP_NISS = 'VMI')
         AND AD.DT_INSTALACAO < LEAST(UN.DT_FIM, coalesce(UN.DT_SAIDA_SETOR, UN.DT_FIM))
         AND coalesce(AD.DT_RETIRADA, GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI)) >= GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI)
         AND coalesce(AD.DT_RETIRADA, LEAST(V_END_DATE + 1, clock_timestamp())) - AD.DT_INSTALACAO >= 1
         AND UN.DT_ENTRADA_SETOR BETWEEN V_START_DATE AND V_END_DATE
         AND (
              (
               TO_CHAR(UN.DT_ENTRADA_SETOR, 'Q') <= P_QUARTER
               AND TO_CHAR(UN.DT_ENTRADA_SETOR, 'YYYY') = P_YEAR
              )
              OR (
               TO_CHAR(UN.DT_ENTRADA_SETOR, 'Q') > P_QUARTER
               AND TO_CHAR(UN.DT_ENTRADA_SETOR, 'YYYY') = P_YEAR - 1
              )
             )
         AND (((DD.NR_ATENDIMENTO IS NOT NULL AND DD.NR_ATENDIMENTO::text <> '') AND DD.DT_LIBERACAO > AD.DT_INSTALACAO) OR coalesce(DD.NR_ATENDIMENTO::text, '') = '');
    --
    TYPE T_STRESS_ULCER IS TABLE OF C_STRESS_ULCER%ROWTYPE;
    R_STRESS_ULCER T_STRESS_ULCER;
    --
    C_STRESS_ULCER_DIAG CURSOR(V_START_DATE timestamp,
                              V_END_DATE   timestamp,
                              V_SETOR      bigint,
                              V_PATIENT    text) FOR
      SELECT DISTINCT un.nr_atendimento,
             ap.cd_pessoa_fisica,
             un.cd_estabelecimento,
             cd_setor_atendimento,
             dt_entrada_setor,
             dt_saida_setor,
             ds_classe_material medicamento,
             cd_classe_material,
             pkg_vap_report.GET_REFACTORY_PATIENT_NAME(pf.nm_pessoa_fisica) name,
             case
                 when obter_data_obito(ap.cd_pessoa_fisica) >= ap.dt_entrada and (((ap.dt_alta IS NOT NULL AND ap.dt_alta::text <> '') and obter_data_obito(ap.cd_pessoa_fisica) <= ap.dt_alta) or coalesce(ap.dt_alta::text, '') = '')
                 then 'Expired'
                 else 'Alive'
             end hosp_disp,
             admdiag.ds_diagnostico as diag_admissao,
             pf.nr_cpf ssn,
             se.ds_etnia,
             CASE WHEN pf.ie_sexo='M' THEN  'Male' WHEN pf.ie_sexo='F' THEN  'Female' END  sexo,
             pf.dt_nascimento,
             pf.qt_altura_cm,
             pf.qt_peso,
             un.nm_fantasia_estab,
             ap.dt_entrada dt_entrada_hosp,
             ap.dt_alta dt_saida_hosp,
             un.ds_setor_atendimento,
             OBTER_VALOR_DOMINIO_IDIOMA(1, OBTER_CLASSIF_SETOR(un.cd_setor_atendimento), 3) tipo_setor,
             OBTER_NOME_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento)) origem_admissao,
             CASE WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento)) IS NULL THEN  'Admit' WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(ap.nr_atendimento, un.dt_entrada_setor, un.cd_setor_atendimento))=un.cd_estabelecimento THEN  'Unit Transfer'  ELSE 'Hospital Transfer' END  tipo_admissao,
             coalesce(PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(ap.nr_atendimento, un.dt_entrada_setor, 'S'), 'N') surgical_dx,
             PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(ap.nr_atendimento, un.dt_entrada_setor, 'E') elective_surgery,
             pkg_vap_report.GET_REFACTORY_PATIENT_NAME(un.pessoa_resp) resp_unidade,
             case
                 when obter_data_obito(ap.cd_pessoa_fisica) >= un.dt_entrada_setor and (((un.dt_saida_setor IS NOT NULL AND un.dt_saida_setor::text <> '') and obter_data_obito(ap.cd_pessoa_fisica) <= un.dt_saida_setor) or coalesce(un.dt_saida_setor::text, '') = '')
                 then 'Expired'
                 else 'Alive'
             end unit_disp
        FROM (SELECT U.NR_ATENDIMENTO,
                     AP.CD_PESSOA_FISICA,
                     S.CD_ESTABELECIMENTO,
                     U.CD_SETOR_ATENDIMENTO,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                     MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                     PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                          U.DT_ENTRADA_UNIDADE,
                                                          U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                     E.NM_FANTASIA_ESTAB,
                     S.DS_SETOR_ATENDIMENTO,
                     PF.NM_PESSOA_FISICA AS PESSOA_RESP
                FROM (
                      SELECT DISTINCT DD.NR_ATENDIMENTO,
                             P.CD_PESSOA_FISICA
                        FROM ATENDIMENTO_PACIENTE P
                       INNER JOIN (
                                   SELECT coalesce(DD.NR_ATENDIMENTO, EXAM.NR_ATENDIMENTO) NR_ATENDIMENTO,
                                          LEAST(coalesce(DD.DT_LIBERACAO, EXAM.DT_RESULTADO), coalesce(EXAM.DT_RESULTADO, DD.DT_LIBERACAO)) DT_LIBERACAO
                                     FROM DIAGNOSTICO_DOENCA DD
                                     LEFT JOIN (
                                          SELECT ELR.NR_ATENDIMENTO,
                                                 ELR.DT_RESULTADO
                                            FROM EXAME_LABORATORIO EL
                                           INNER JOIN EXAME_LAB_RESULT_ITEM ELRI
                                              ON ELRI.NR_SEQ_EXAME = EL.NR_SEQ_EXAME
                                           INNER JOIN EXAME_LAB_RESULTADO ELR
                                              ON ELR.NR_SEQ_RESULTADO = ELRI.NR_SEQ_RESULTADO
                                           WHERE (
                                                  (
                                                   EL.IE_TIPO_EXAME_REL = 5
                                                   AND ELRI.QT_RESULTADO * 1000 < 50000
                                                  )
                                                  OR (
                                                   EL.IE_TIPO_EXAME_REL = 6
                                                   AND ELRI.QT_RESULTADO > 1.5
                                                  )
                                                  OR (
                                                   EL.IE_TIPO_EXAME_REL = 7
                                                   AND ELRI.QT_RESULTADO > 50
                                                  )
                                                 )
                                             AND EL.IE_SITUACAO = 'A'
                                             AND (ELR.NR_ATENDIMENTO IS NOT NULL AND ELR.NR_ATENDIMENTO::text <> '')
                                        ) EXAM
                                       ON EXAM.NR_ATENDIMENTO = DD.NR_ATENDIMENTO
                                    WHERE DD.IE_CLASSIFICACAO_DOENCA = 'P'
                                      AND DD.IE_SITUACAO = 'A'
                                      AND DD.IE_TIPO_DIAGNOSTICO = 2
                                      AND (DD.CD_DOENCA IN ('J381', 'J382', 'J45', 'J90', 'B24', 'S578') OR (EXAM.NR_ATENDIMENTO IS NOT NULL AND EXAM.NR_ATENDIMENTO::text <> ''))
                                 ) DD
                          ON DD.NR_ATENDIMENTO = P.NR_ATENDIMENTO
                       /*WHERE (V_PATIENT IS NULL OR V_PATIENT = P.CD_PESSOA_FISICA)*/

                   ) AP
               INNER JOIN ATEND_PACIENTE_UNIDADE U
                  ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
               INNER JOIN SETOR_ATENDIMENTO S
                  ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                 AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                LEFT JOIN PESSOA_FISICA PF
                  ON PF.CD_PESSOA_FISICA = S.CD_PESSOA_RESP
               INNER JOIN ESTABELECIMENTO E
                  ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
               WHERE CASE WHEN coalesce(P_CD_ESTAB, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(P_CD_ESTAB, 0)
                 AND CASE WHEN coalesce(V_SETOR, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(V_SETOR, 0)
                 AND EXISTS (SELECT 1
                              FROM USUARIO_SETOR US
                             WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                               AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                 AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                 AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp()))
                 AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                              U.DT_ENTRADA_UNIDADE,
                                                              U.CD_SETOR_ATENDIMENTO),
                         PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
               GROUP BY U.NR_ATENDIMENTO,
                        AP.CD_PESSOA_FISICA,
                        S.CD_ESTABELECIMENTO,
                        U.CD_SETOR_ATENDIMENTO,
                        PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                             U.DT_ENTRADA_UNIDADE,
                                                             U.CD_SETOR_ATENDIMENTO),
                        E.NM_FANTASIA_ESTAB,
                        S.DS_SETOR_ATENDIMENTO,
                        PF.NM_PESSOA_FISICA
           ) UN
       INNER JOIN ATENDIMENTO_PACIENTE AP
          ON AP.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
       INNER JOIN PESSOA_FISICA PF
          ON PF.CD_PESSOA_FISICA = AP.CD_PESSOA_FISICA
        LEFT JOIN SUS_ETNIA SE
          ON SE.NR_SEQUENCIA = PF.NR_SEQ_ETNIA
       INNER JOIN (
             SELECT coalesce(DD.NR_ATENDIMENTO, EXAM.NR_ATENDIMENTO) NR_ATENDIMENTO,
                    LEAST(coalesce(DD.DT_LIBERACAO, EXAM.DT_RESULTADO), coalesce(EXAM.DT_RESULTADO, DD.DT_LIBERACAO)) DT_LIBERACAO
               FROM DIAGNOSTICO_DOENCA DD
               LEFT JOIN (
                    SELECT ELR.NR_ATENDIMENTO,
                           ELR.DT_RESULTADO
                      FROM EXAME_LABORATORIO EL
                     INNER JOIN EXAME_LAB_RESULT_ITEM ELRI
                        ON ELRI.NR_SEQ_EXAME = EL.NR_SEQ_EXAME
                     INNER JOIN EXAME_LAB_RESULTADO ELR
                        ON ELR.NR_SEQ_RESULTADO = ELRI.NR_SEQ_RESULTADO
                     WHERE (
                            (
                             EL.IE_TIPO_EXAME_REL = 5
                             AND ELRI.QT_RESULTADO * 1000 < 50000
                            )
                            OR (
                             EL.IE_TIPO_EXAME_REL = 6
                             AND ELRI.QT_RESULTADO > 1.5
                            )
                            OR (
                             EL.IE_TIPO_EXAME_REL = 7
                             AND ELRI.QT_RESULTADO > 50
                            )
                           )
                       AND EL.IE_SITUACAO = 'A'
                       AND (ELR.NR_ATENDIMENTO IS NOT NULL AND ELR.NR_ATENDIMENTO::text <> '')
                  ) EXAM
                 ON EXAM.NR_ATENDIMENTO = DD.NR_ATENDIMENTO
              WHERE DD.IE_CLASSIFICACAO_DOENCA = 'P'
                AND DD.IE_SITUACAO = 'A'
                AND DD.IE_TIPO_DIAGNOSTICO = 2
                AND (DD.CD_DOENCA IN ('J381', 'J382', 'J45', 'J90', 'B24', 'S578') OR (EXAM.NR_ATENDIMENTO IS NOT NULL AND EXAM.NR_ATENDIMENTO::text <> ''))
           ) DD
          ON DD.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
        LEFT JOIN(
             SELECT AD.NR_ATENDIMENTO,
                    AD.DT_INSTALACAO,
                    AD.DT_RETIRADA
               FROM ATEND_PAC_DISPOSITIVO AD
              WHERE EXISTS (
                     SELECT 1
                       FROM DISPOSITIVO D
                      WHERE D.NR_SEQUENCIA = AD.NR_SEQ_DISPOSITIVO
                        AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                AND coalesce(AD.DT_RETIRADA, LEAST(V_END_DATE + 1, clock_timestamp())) - AD.DT_INSTALACAO >= 1
           ) AD
          ON AD.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
         AND coalesce(AD.DT_RETIRADA, GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI)) >= GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI)
         AND AD.DT_INSTALACAO <= LEAST(UN.DT_FIM, coalesce(UN.DT_SAIDA_SETOR, UN.DT_FIM))
        LEFT JOIN(
             SELECT DISTINCT a.nr_atendimento,
                    a.cd_classe_material,
                    a.ds_classe_material
               FROM (
                     SELECT pm.nr_seq_atendimento as nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM prescr_material pm
                      INNER JOIN prescr_mat_alteracao pma
                         ON pma.nr_prescricao = pm.nr_prescricao
                      INNER JOIN material m
                         ON m.cd_material = pm.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material

UNION ALL

                     SELECT pmu.nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM paciente_medic_uso pmu
                      INNER JOIN material m
                         ON m.cd_material = pmu.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material
                      
UNION ALL

                     SELECT c.nr_atendimento,
                            cm.cd_classe_material,
                            cm.ds_classe_material
                       FROM cirurgia c
                      INNER JOIN cirurgia_agente_anestesico caa
                         ON caa.nr_cirurgia = c.nr_cirurgia
                      INNER JOIN cirurgia_agente_anest_ocor caao
                         ON caao.nr_seq_cirur_agente = caa.nr_sequencia
                      INNER JOIN material m
                         ON m.cd_material = caa.cd_material
                        AND m.cd_classe_material IN (
                             SELECT cm.cd_classe_material
                               FROM classe_material cm
                              WHERE cm.ie_classe_material_rel IN (23, 24, 25, 26)
                            )
                      INNER JOIN classe_material cm
                         ON cm.cd_classe_material = m.cd_classe_material
                  ) a
           ) treat
          ON treat.nr_atendimento = un.nr_atendimento
        LEFT JOIN(
             SELECT DD.NR_ATENDIMENTO,
                    DD.DS_DIAGNOSTICO
               FROM DIAGNOSTICO_DOENCA DD
              INNER JOIN(
                    SELECT DD.NR_ATENDIMENTO,
                           MIN(DD.DT_LIBERACAO) DT_LIBERACAO
                      FROM DIAGNOSTICO_DOENCA DD
                     WHERE DD.IE_TIPO_DOENCA = 'P'
                       AND DD.IE_TIPO_DIAGNOSTICO = 2
                     GROUP BY DD.NR_ATENDIMENTO,
                              DD.DS_DIAGNOSTICO
                  ) A
                 ON A.NR_ATENDIMENTO = DD.NR_ATENDIMENTO
                AND A.DT_LIBERACAO = DD.DT_LIBERACAO
           ) ADMDIAG
          ON DD.NR_ATENDIMENTO = AP.NR_ATENDIMENTO
       WHERE UN.DT_ENTRADA_SETOR BETWEEN V_START_DATE AND V_END_DATE
         AND (
              (
               TO_CHAR(UN.DT_ENTRADA_SETOR, 'Q') <= P_QUARTER
               AND TO_CHAR(UN.DT_ENTRADA_SETOR, 'YYYY') = P_YEAR
              )
              OR (
               TO_CHAR(UN.DT_ENTRADA_SETOR, 'Q') > P_QUARTER
               AND TO_CHAR(UN.DT_ENTRADA_SETOR, 'YYYY') = P_YEAR - 1
              )
             )
         AND (((AD.NR_ATENDIMENTO IS NOT NULL AND AD.NR_ATENDIMENTO::text <> '') AND DD.DT_LIBERACAO < AD.DT_INSTALACAO) OR coalesce(AD.NR_ATENDIMENTO::text, '') = '');
    --
    TYPE T_STRESS_ULCER_DIAG IS TABLE OF C_STRESS_ULCER_DIAG%ROWTYPE;
    R_STRESS_ULCER_DIAG T_STRESS_ULCER_DIAG;
    --
    C_POPULATION CURSOR(V_START_DATE timestamp,
                        V_END_DATE   timestamp) FOR
      SELECT a.cd_setor_atendimento,
             a.cd_estabelecimento,
             TO_CHAR(a.dt_entrada_setor, 'Q') quarter,
             TO_CHAR(a.dt_entrada_setor, 'YYYY') year,
             coalesce(COUNT(DISTINCT a.cd_pessoa_fisica), 0) patients,
             coalesce(round((SUM(coalesce(a.dt_saida_setor, LEAST(V_END_DATE + 1, clock_timestamp())) - a.dt_entrada_setor))::numeric, 1), 0) patient_days,
             coalesce(COUNT(DISTINCT b.cd_pessoa_fisica), 0) ventilated_patients
        FROM (
              SELECT U.NR_ATENDIMENTO,
                     AP.CD_PESSOA_FISICA,
                     S.CD_ESTABELECIMENTO,
                     U.CD_SETOR_ATENDIMENTO,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                     MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                     PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                          U.DT_ENTRADA_UNIDADE,
                                                          U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                     E.NM_FANTASIA_ESTAB,
                     S.DS_SETOR_ATENDIMENTO,
                     PF.NM_PESSOA_FISICA AS PESSOA_RESP
                FROM ATENDIMENTO_PACIENTE AP
               INNER JOIN ATEND_PACIENTE_UNIDADE U
                  ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
               INNER JOIN SETOR_ATENDIMENTO S
                  ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                 AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                LEFT JOIN PESSOA_FISICA PF
                  ON PF.CD_PESSOA_FISICA = S.CD_PESSOA_RESP
               INNER JOIN ESTABELECIMENTO E
                  ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
               WHERE U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                 AND EXISTS (SELECT 1
                      FROM USUARIO_SETOR US
                     WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                       AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                 AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp()))
                 AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                              U.DT_ENTRADA_UNIDADE,
                                                              U.CD_SETOR_ATENDIMENTO),
                         PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
               GROUP BY U.NR_ATENDIMENTO,
                        AP.CD_PESSOA_FISICA,
                        S.CD_ESTABELECIMENTO,
                        U.CD_SETOR_ATENDIMENTO,
                        PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                             U.DT_ENTRADA_UNIDADE,
                                                             U.CD_SETOR_ATENDIMENTO),
                        E.NM_FANTASIA_ESTAB,
                        S.DS_SETOR_ATENDIMENTO,
                        PF.NM_PESSOA_FISICA
           ) a
         LEFT JOIN(
              SELECT cd_setor_atendimento,
                     cd_estabelecimento,
                     TO_CHAR(dt_entrada_setor, 'Q') quarter,
                     cd_pessoa_fisica
                FROM (
                      SELECT U.NR_ATENDIMENTO,
                             AP.CD_PESSOA_FISICA,
                             S.CD_ESTABELECIMENTO,
                             U.CD_SETOR_ATENDIMENTO,
                             PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                             PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE /* + 1*/
, clock_timestamp())) DT_FIM,
                             MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                             PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                  U.DT_ENTRADA_UNIDADE,
                                                                  U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                             E.NM_FANTASIA_ESTAB,
                             S.DS_SETOR_ATENDIMENTO,
                             PF.NM_PESSOA_FISICA AS PESSOA_RESP
                        FROM (
                              SELECT DISTINCT A.NR_ATENDIMENTO,
                                     P.CD_PESSOA_FISICA,
                                     P.DT_ENTRADA,
                                     P.DT_ALTA
                                FROM ATEND_PAC_DISPOSITIVO A
                               INNER JOIN ATENDIMENTO_PACIENTE P
                                  ON A.NR_ATENDIMENTO = P.NR_ATENDIMENTO
                               WHERE A.DT_INSTALACAO <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                 AND (
                                      coalesce(A.DT_RETIRADA::text, '') = ''
                                      OR
                                      A.DT_RETIRADA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE)
                                     )
                                 AND EXISTS (
                                            SELECT 1
                                              FROM DISPOSITIVO D
                                             WHERE D.NR_SEQUENCIA = A.NR_SEQ_DISPOSITIVO
                                               AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                           ) AP
                       INNER JOIN ATEND_PACIENTE_UNIDADE U
                          ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                       INNER JOIN SETOR_ATENDIMENTO S
                          ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                         AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                        LEFT JOIN PESSOA_FISICA PF
                          ON PF.CD_PESSOA_FISICA = S.CD_PESSOA_RESP
                       INNER JOIN ESTABELECIMENTO E
                          ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
                       WHERE U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                         AND EXISTS (SELECT 1
                              FROM USUARIO_SETOR US
                             WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                               AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                         AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp()))
                         AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                      U.DT_ENTRADA_UNIDADE,
                                                                      U.CD_SETOR_ATENDIMENTO),
                                 PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                             PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                       GROUP BY U.NR_ATENDIMENTO,
                                AP.CD_PESSOA_FISICA,
                                S.CD_ESTABELECIMENTO,
                                U.CD_SETOR_ATENDIMENTO,
                                PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                     U.DT_ENTRADA_UNIDADE,
                                                                     U.CD_SETOR_ATENDIMENTO),
                                E.NM_FANTASIA_ESTAB,
                                S.DS_SETOR_ATENDIMENTO,
                                PF.NM_PESSOA_FISICA
                   ) a
                WHERE a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
            ) b
           ON b.quarter = TO_CHAR(a.dt_entrada_setor, 'Q')
          AND b.cd_estabelecimento = a.cd_estabelecimento
          AND b.cd_setor_atendimento = a.cd_setor_atendimento
        WHERE a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
        GROUP BY a.cd_estabelecimento,
                 a.cd_setor_atendimento,
                 TO_CHAR(a.dt_entrada_setor, 'Q'),
                 TO_CHAR(a.dt_entrada_setor, 'YYYY')
        ORDER BY 1, 2;
    --
    TYPE T_POPULATION IS TABLE OF C_POPULATION%ROWTYPE;
    R_POPULATION T_POPULATION;
    --
  N RECORD;
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;
    --
    /*IF P_TYPE = 1 THEN*/

      FOR N IN (SELECT QUARTER,
                       GREATEST(INI, P_START_DATE) INI,
                       LEAST(FIM, P_END_DATE) FIM
                  FROM (SELECT 1 QUARTER,
                               TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3) -2, 2, '0') || SUBSTR(PR, -4), 'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3), 2, '0') || SUBSTR(PR, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))

UNION

                        SELECT 2 QUARTER,
                               TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3) -2, 2, '0') || SUBSTR(SEG, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3), 2, '0') || SUBSTR(SEG, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 3 QUARTER,
                               TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3) -2, 2, '0') || SUBSTR(TER, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3), 2, '0') || SUBSTR(TER, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 4 QUARTER,
                               TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3) -2, 2, '0') || SUBSTR(QUA, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3), 2, '0') || SUBSTR(QUA, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))) alias54
                 WHERE INI <= P_END_DATE
                   AND FIM >= P_START_DATE)
      LOOP

        OPEN C_STRESS_ULCER(N.INI, N.FIM, CASE WHEN N.QUARTER = 4 AND P_TYPE = 1 THEN 0 ELSE P_CD_SETOR END, NULL);
        LOOP
          FETCH C_STRESS_ULCER BULK COLLECT INTO R_STRESS_ULCER LIMIT 1000;

            BEGIN
              FOR i IN R_STRESS_ULCER.FIRST..R_STRESS_ULCER.LAST LOOP
              INSERT INTO W_STRESS_ULCER(
                dt_ano,
                nr_trimestre,
                dt_ini_quarter,
                dt_fim_quarter,
                nr_atendimento,
                cd_estabelecimento,
                cd_setor_atendimento,
                dt_entrada_setor,
                dt_saida_setor,
                ds_medicamento,
                cd_pessoa_fisica,
                ie_tipo,
                nm_pessoa_fisica,
                ds_dispo_hospital,
                ds_diag_admissao,
                nr_ssn,
                ds_etnia,
                qt_altura_cm,
                qt_peso,
                nm_fantasia_estab,
                dt_entrada_hosp,
                dt_saida_hosp,
                ds_setor_atendimento,
                ds_tipo_unidade,
                ds_origem_admissao,
                ie_surgical_dx,
                ie_elective_surgery,
                ds_dispo_unidade,
                ds_tipo_admissao,
                nm_respo_unidade,
                cd_classe_material)
              VALUES (
                TO_CHAR(R_STRESS_ULCER[i].DT_ENTRADA_SETOR, 'YYYY'), -- year,
                N.QUARTER, -- quarter,
                N.INI, -- dt_ini_quarter,
                N.FIM, -- dt_fim_quarter,
                R_STRESS_ULCER[i].NR_ATENDIMENTO, -- nr_atendimento,
                R_STRESS_ULCER[i].CD_ESTABELECIMENTO, -- cd_estabelecimento,
                R_STRESS_ULCER[i].CD_SETOR_ATENDIMENTO, -- cd_setor_atendimento,
                R_STRESS_ULCER[i].DT_ENTRADA_SETOR, -- dt_entrada_setor,
                R_STRESS_ULCER[i].DT_SAIDA_SETOR, -- dt_saida_setor,
                R_STRESS_ULCER[i].MEDICAMENTO, -- medicamento
                R_STRESS_ULCER[i].CD_PESSOA_FISICA, -- pessoa
                1, -- tipo
                R_STRESS_ULCER[i].NAME, -- nome
                R_STRESS_ULCER[i].HOSP_DISP, -- disp hosp
                R_STRESS_ULCER[i].DIAG_ADMISSAO, -- diag admissao
                R_STRESS_ULCER[i].SSN, -- numero ssn
                R_STRESS_ULCER[i].DS_ETNIA, -- etnia
                R_STRESS_ULCER[i].QT_ALTURA_CM, -- altura
                R_STRESS_ULCER[i].QT_PESO, -- peso
                R_STRESS_ULCER[i].NM_FANTASIA_ESTAB, --nm_fantasia_estab
                R_STRESS_ULCER[i].DT_ENTRADA_HOSP, -- dt_entrada_hoap
                R_STRESS_ULCER[i].DT_SAIDA_HOSP, -- dt_saida_hosp
                R_STRESS_ULCER[i].DS_SETOR_ATENDIMENTO, -- ds_setor_atendimento
                R_STRESS_ULCER[i].TIPO_SETOR, -- tipo de unidade
                R_STRESS_ULCER[i].ORIGEM_ADMISSAO, -- origem da admissao
                R_STRESS_ULCER[i].SURGICAL_DX, -- surgical dx
                R_STRESS_ULCER[i].ELECTIVE_SURGERY, -- cirurgia eletiva
                R_STRESS_ULCER[i].UNIT_DISP, -- disp unidade
                R_STRESS_ULCER[i].TIPO_ADMISSAO, -- tipo de admissao
                R_STRESS_ULCER[i].RESP_UNIDADE, -- responsavel pela unidade
                R_STRESS_ULCER[i].CD_CLASSE_MATERIAL); -- cd classe do material)
            END LOOP;
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_STRESS_ULCER */
        END LOOP;
        CLOSE C_STRESS_ULCER;

        OPEN C_STRESS_ULCER_DIAG(N.INI, N.FIM, CASE WHEN N.QUARTER = 4 THEN 0 ELSE P_CD_SETOR END, NULL);
        LOOP
          FETCH C_STRESS_ULCER_DIAG BULK COLLECT INTO R_STRESS_ULCER_DIAG LIMIT 1000;

            BEGIN
              FOR i IN R_STRESS_ULCER_DIAG.FIRST..R_STRESS_ULCER_DIAG.LAST LOOP
              INSERT INTO W_STRESS_ULCER(
                dt_ano,
                nr_trimestre,
                dt_ini_quarter,
                dt_fim_quarter,
                nr_atendimento,
                cd_estabelecimento,
                cd_setor_atendimento,
                dt_entrada_setor,
                dt_saida_setor,
                ds_medicamento,
                cd_pessoa_fisica,
                ie_tipo,
                nm_pessoa_fisica,
                ds_dispo_hospital,
                ds_diag_admissao,
                nr_ssn,
                ds_etnia,
                qt_altura_cm,
                qt_peso,
                nm_fantasia_estab,
                dt_entrada_hosp,
                dt_saida_hosp,
                ds_setor_atendimento,
                ds_tipo_unidade,
                ds_origem_admissao,
                ie_surgical_dx,
                ie_elective_surgery,
                ds_dispo_unidade,
                ds_tipo_admissao,
                nm_respo_unidade,
                cd_classe_material)
              VALUES (
                TO_CHAR(R_STRESS_ULCER[i].DT_ENTRADA_SETOR, 'YYYY'), -- year,
                N.QUARTER, -- quarter,
                N.INI, -- dt_ini_quarter,
                N.FIM, -- dt_fim_quarter,
                R_STRESS_ULCER_DIAG[i].NR_ATENDIMENTO, -- nr_atendimento,
                R_STRESS_ULCER_DIAG[i].CD_ESTABELECIMENTO, -- cd_estabelecimento,
                R_STRESS_ULCER_DIAG[i].CD_SETOR_ATENDIMENTO, -- cd_setor_atendimento,
                R_STRESS_ULCER_DIAG[i].DT_ENTRADA_SETOR, -- dt_entrada_setor,
                R_STRESS_ULCER_DIAG[i].DT_SAIDA_SETOR, -- dt_saida_setor,
                R_STRESS_ULCER_DIAG[i].MEDICAMENTO, -- medicamento
                R_STRESS_ULCER_DIAG[i].CD_PESSOA_FISICA, -- pessoa
                2, -- tipo
                R_STRESS_ULCER_DIAG[i].NAME, -- nome
                R_STRESS_ULCER_DIAG[i].HOSP_DISP, -- disp hosp
                R_STRESS_ULCER_DIAG[i].DIAG_ADMISSAO, -- diag admissao
                R_STRESS_ULCER_DIAG[i].SSN, -- numero ssn
                R_STRESS_ULCER_DIAG[i].DS_ETNIA, -- etnia
                R_STRESS_ULCER_DIAG[i].QT_ALTURA_CM, -- altura
                R_STRESS_ULCER_DIAG[i].QT_PESO, -- peso
                R_STRESS_ULCER_DIAG[i].NM_FANTASIA_ESTAB, --nm_fantasia_estab
                R_STRESS_ULCER_DIAG[i].DT_ENTRADA_HOSP, -- dt_entrada_hoap
                R_STRESS_ULCER_DIAG[i].DT_SAIDA_HOSP, -- dt_saida_hosp
                R_STRESS_ULCER_DIAG[i].DS_SETOR_ATENDIMENTO, -- ds_setor_atendimento
                R_STRESS_ULCER_DIAG[i].TIPO_SETOR, -- tipo de unidade
                R_STRESS_ULCER_DIAG[i].ORIGEM_ADMISSAO, -- origem da admissao
                R_STRESS_ULCER_DIAG[i].SURGICAL_DX, -- surgical dx
                R_STRESS_ULCER_DIAG[i].ELECTIVE_SURGERY, -- cirurgia eletiva
                R_STRESS_ULCER_DIAG[i].UNIT_DISP, -- disp unidade
                R_STRESS_ULCER_DIAG[i].TIPO_ADMISSAO, -- tipo de admissao
                R_STRESS_ULCER_DIAG[i].RESP_UNIDADE, -- responsavel pela unidade
                R_STRESS_ULCER_DIAG[i].CD_CLASSE_MATERIAL); -- cd classe do material)
            END LOOP;
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_STRESS_ULCER_DIAG */
        END LOOP;
        CLOSE C_STRESS_ULCER_DIAG;

      END LOOP;

      OPEN C_POPULATION(P_START_DATE, P_END_DATE);
        LOOP
          FETCH C_POPULATION BULK COLLECT INTO R_POPULATION LIMIT 1000;

            BEGIN
              FOR i IN R_POPULATION.FIRST..R_POPULATION.LAST LOOP
              INSERT INTO w_stress_ulcer_population(
                     CD_ESTABELECIMENTO,
                     CD_SETOR_ATENDIMENTO,
                     NR_TRIMESTRE,
                     DT_ANO,
                     QT_PACIENTES,
                     QT_DIAS_PACIENTES,
                     QT_PACIENTES_VENTILADOS
                )
              VALUES (
                     R_POPULATION[i].cd_estabelecimento,
                     R_POPULATION[i].cd_setor_atendimento,
                     R_POPULATION[i].quarter,
                     R_POPULATION[i].year,
                     R_POPULATION[i].patients,
                     R_POPULATION[i].patient_days,
                     R_POPULATION[i].ventilated_patients
                );
             END LOOP;
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_POPULATION */
        END LOOP;
        CLOSE C_POPULATION;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_stress_ulcer.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) FROM PUBLIC;
