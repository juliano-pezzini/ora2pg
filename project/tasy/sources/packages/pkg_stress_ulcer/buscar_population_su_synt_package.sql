-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pkg_stress_ulcer.buscar_population_su_synt ( dtInicio timestamp, dtFim timestamp, setor bigint, estabelecimento bigint, ano bigint, trimestre bigint ) RETURNS SETOF TABLE_ANALIT_TYPE AS $body$
DECLARE


C_SU_SYNT CURSOR FOR
         SELECT '' label,
                (VALOR_01)::numeric  pr,
                   (VALOR_02)::numeric  seg,
                   TO_NUMBER((
                    SELECT COUNT(DISTINCT cd_pessoa_fisica)
                      FROM (
                            SELECT AP.CD_PESSOA_FISICA,
                                   AP.NR_ATENDIMENTO,
                                   MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO) dt_saida_setor
                              FROM (
                                    SELECT DISTINCT A.NR_ATENDIMENTO,
                                           P.CD_PESSOA_FISICA
                                      FROM ATEND_PAC_DISPOSITIVO A
                                     INNER JOIN ATENDIMENTO_PACIENTE P
                                        ON A.NR_ATENDIMENTO = P.NR_ATENDIMENTO
                                     WHERE A.DT_INSTALACAO <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(dtFim), clock_timestamp()))
                                       AND (
                                            coalesce(A.DT_RETIRADA::text, '') = ''
                                            OR
                                            A.DT_RETIRADA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, dtInicio)
                                           )
                                       AND EXISTS (
                                                  SELECT 1
                                                    FROM DISPOSITIVO D
                                                   WHERE D.NR_SEQUENCIA = A.NR_SEQ_DISPOSITIVO
                                                     AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                                 ) AP
                             INNER JOIN ATEND_PACIENTE_UNIDADE U
                                ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                             INNER JOIN SETOR_ATENDIMENTO S
                                ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                               AND S.CD_CLASSIF_SETOR NOT IN('6', '7', '10')
                             WHERE CASE WHEN coalesce(estabelecimento, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(estabelecimento, 0)
                               AND CASE WHEN coalesce(setor, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(setor, 0)
                               AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                               AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(dtFim, clock_timestamp()))
                               AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                            U.DT_ENTRADA_UNIDADE,
                                                                            U.CD_SETOR_ATENDIMENTO),
                                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, dtInicio)) >=
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, dtInicio)
                             GROUP BY AP.CD_PESSOA_FISICA,
                                   AP.NR_ATENDIMENTO,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO)
                         ) a
                     WHERE a.dt_entrada_setor BETWEEN dtInicio AND dtFim
                       AND TO_CHAR(dt_entrada_setor, 'Q') = trimestre
                       AND TO_CHAR(dt_entrada_setor, 'YYYY') = ano
                   )) ter,
                   0 qua,
                   0 alleicu
              FROM (
                    SELECT COUNT(DISTINCT cd_pessoa_fisica) valor_01,
                           round((SUM(coalesce(a.dt_saida_setor, LEAST(dtFim, clock_timestamp())) - a.dt_entrada_setor))::numeric, 1) valor_02
                      FROM (
                            SELECT AP.CD_PESSOA_FISICA,
                                   MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR
                              FROM ATENDIMENTO_PACIENTE AP
                             INNER JOIN ATEND_PACIENTE_UNIDADE U
                                ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                             INNER JOIN SETOR_ATENDIMENTO S
                                ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                               AND S.CD_CLASSIF_SETOR NOT IN('6', '7', '10')
                             WHERE CASE WHEN coalesce(estabelecimento, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(estabelecimento, 0)
                               AND CASE WHEN coalesce(setor, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(setor, 0)
                               AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                               AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(dtFim, clock_timestamp()))
                               AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                            U.DT_ENTRADA_UNIDADE,
                                                                            U.CD_SETOR_ATENDIMENTO),
                                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, dtInicio)) >=
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, dtInicio)
                             GROUP BY AP.CD_PESSOA_FISICA,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO)
                         ) a
                     WHERE a.dt_entrada_setor BETWEEN dtInicio AND dtFim
                       AND TO_CHAR(dt_entrada_setor, 'Q') = trimestre
                       AND TO_CHAR(dt_entrada_setor, 'YYYY') = ano
                 ) a;


TYPE T_SU_SYNT IS TABLE OF C_SU_SYNT%ROWTYPE;
R_SU_SYNT T_SU_SYNT;

BEGIN
  OPEN C_SU_SYNT;
  LOOP
    FETCH C_SU_SYNT BULK COLLECT INTO R_SU_SYNT LIMIT 1000;

      BEGIN
        FOR i IN R_SU_SYNT.FIRST..R_SU_SYNT.LAST LOOP
          RETURN NEXT R_SU_SYNT(i);
        END LOOP;
      EXCEPTION WHEN OTHERS THEN
        NULL;
      END;

    EXIT WHEN NOT FOUND; /* apply on C_SU_SYNT */

  END LOOP;
  CLOSE C_SU_SYNT;

  RETURN;
END;
  --
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pkg_stress_ulcer.buscar_population_su_synt ( dtInicio timestamp, dtFim timestamp, setor bigint, estabelecimento bigint, ano bigint, trimestre bigint ) FROM PUBLIC;
