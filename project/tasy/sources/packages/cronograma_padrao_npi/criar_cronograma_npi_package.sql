-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*---------------------------------------------------------------------------------------------------------------------------------------------
|			CRIAR_CRONOGRAMA_NPI						|
*/
CREATE OR REPLACE PROCEDURE cronograma_padrao_npi.criar_cronograma_npi ( nr_seq_projeto_p bigint, nm_usuario_p text) AS $body$
DECLARE


	dt_inicio_prev_w		timestamp;
	dt_fim_prev_w		timestamp;
	qt_etapas_w		integer;
	qt_regra_tempo_w		integer;
	qt_horas_w				double precision;
	nr_seq_processo_fase_w	bigint;
	nr_seq_processo_etapa_w	bigint;
	nr_seq_etapa_processo_w	bigint;
	nr_seq_etapa_w		bigint;
	nr_seq_cronograma_w	bigint;
	nr_seq_cliente_w		bigint;
	nr_seq_fase_processo_w	bigint;
	cd_gerente_cliente_w	varchar(10);
	cd_pessoa_fisica_w	varchar(10);
	nm_etapa_w		varchar(255);
	ds_objetivo_w		varchar(4000);
	nr_seq_apresentacao_w	bigint;
	ds_fase_w		varchar(4000);
	qt_hora_prev_w		bigint;
	cd_estabelecimento_w	smallint;
	ie_data_nula_w		boolean:= true;
	ie_gerou_low_w		boolean:= false;
	ie_status_etapa_w		varchar(1);
	nr_seq_area_processo_w	bigint;
	nr_seq_tipo_projeto_w	bigint;
	nr_seq_grupo_w			prp_area_processo_partic.nr_seq_grupo%type;

	C01 CURSOR FOR
		SELECT	distinct b.nr_sequencia,
			c.ds_fase,
			c.nr_sequencia nr_seq_fase_processo
		from	prp_processo a,
			prp_processo_fase b,
			prp_fase_processo c
		where	a.nr_sequencia = b.nr_seq_processo
		and	c.nr_sequencia = b.nr_seq_fase_processo
		and	a.nr_seq_projeto = nr_seq_projeto_p
		and	exists (SELECT	1
				from	prp_processo_etapa e
				where	b.nr_sequencia = e.nr_seq_processo_fase)
		order by b.nr_sequencia;

	C02 CURSOR FOR
		SELECT	a.nr_sequencia,
			a.nm_etapa,
			a.ds_objetivo,
			c.nr_seq_apresentacao,
			c.nr_sequencia nr_seq_processo_etapa
		from	prp_processo_etapa c,
			prp_etapa_processo a
		where	c.nr_seq_processo_fase = nr_seq_processo_fase_w
		and	a.nr_sequencia = c.nr_seq_etapa_processo
		order 	by c.nr_seq_apresentacao;

	C03 CURSOR FOR
		SELECT	x.nr_seq_grupo,
				d.cd_pessoa_fisica
		FROM prp_area_processo_partic x, prp_fase_processo a, prp_fase_processo_etapa b
LEFT OUTER JOIN prp_regra_equipe_padrao c ON (b.nr_seq_area_processo = c.nr_seq_area_processo AND b.nr_seq_area_proc_partic = c.nr_seq_area_proc_partic)
LEFT OUTER JOIN prp_regra_equipe_partic d ON (c.nr_sequencia = d.nr_seq_equipe_padrao)
WHERE a.nr_sequencia = b.nr_seq_fase_processo    and x.nr_sequencia = b.nr_seq_area_proc_partic and b.nr_seq_etapa_processo = nr_seq_etapa_processo_w;

	
BEGIN

	select	dt_inicio_prev,
		cd_estabelecimento
	into STRICT	dt_inicio_prev_w,
		cd_estabelecimento_w
	from	proj_projeto
	where	nr_sequencia = nr_seq_projeto_p;

	if (dt_inicio_prev_w IS NOT NULL AND dt_inicio_prev_w::text <> '') then

		select	count(*)
		into STRICT	qt_etapas_w
		from	prp_processo a,
			prp_processo_fase b,
			prp_processo_etapa c
		where	a.nr_sequencia = b.nr_seq_processo
		and	b.nr_sequencia = c.nr_seq_processo_fase
		and	a.nr_seq_projeto = nr_seq_projeto_p;

		if (qt_etapas_w > 0) then

		open C01;
		loop
		fetch C01 into
			nr_seq_processo_fase_w,
			ds_fase_w,
			nr_seq_fase_processo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			select	nextval('proj_cronograma_seq')
			into STRICT	nr_seq_cronograma_w
			;

			select	max(nr_seq_cliente),
				max(cd_gerente_cliente)
			into STRICT	nr_seq_cliente_w,
				cd_gerente_cliente_w
			from	proj_projeto
			where	nr_sequencia = nr_seq_projeto_p;
			insert into proj_cronograma(	nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_atualizacao,
						nm_usuario,
						nr_seq_cliente,
						cd_empresa,
						cd_pessoa_cliente,
						ie_estrutura,
						nr_seq_proj,
						ie_tipo_cronograma,
						dt_inicio,
						ds_objetivo,
						ie_situacao,
						nr_seq_processo_fase,
						ie_classificacao)
					values (	nr_seq_cronograma_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_cliente_w,
						1,
						cd_gerente_cliente_w,
						'EL',
						nr_seq_projeto_p,
						'E',
						coalesce(dt_inicio_prev_w,clock_timestamp()),
						ds_fase_w,
						'A',
						nr_seq_processo_fase_w,
						'N');

			if (ie_gerou_low_w <> true) then

				insert into prp_log_processo_fase(		nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									nr_seq_projeto,
									nr_seq_fase_processo)
								values (nextval('prp_log_processo_fase_seq'),
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									nr_seq_projeto_p,
									nr_seq_fase_processo_w);
				ie_gerou_low_w:= true;
			end if;

			open C02;
			loop
			fetch C02 into
				nr_seq_etapa_processo_w,
				nm_etapa_w,
				ds_objetivo_w,
				nr_seq_apresentacao_w,
				nr_Seq_processo_etapa_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				select	max(nr_seq_tipo_projeto)
				into STRICT	nr_seq_tipo_projeto_w
				from	proj_projeto
				where	nr_sequencia = nr_seq_projeto_p;

				select	coalesce(max(qt_dias),1),
						coalesce(max(qt_horas),1)
				into STRICT	qt_regra_tempo_w,
						qt_horas_w
				from	prp_regra_tempo_fase a,
					prp_regra_tempo_etapa b
				where	a.nr_sequencia = b.nr_seq_regra_fase
				and	b.nr_seq_etapa_processo = nr_seq_etapa_processo_w;
				--and	a.nr_seq_tipo_projeto = nvl(nr_seq_tipo_projeto_w,a.nr_seq_tipo_projeto);
				select	nextval('proj_cron_etapa_seq')
				into STRICT	nr_seq_etapa_w
				;

				if ((qt_regra_tempo_w = 0) or (ie_data_nula_w = false)) then
				   ie_data_nula_w:= false;
				   dt_inicio_prev_w:= null;
				   dt_fim_prev_w:= null;
				end if;

				if (ie_data_nula_w) then

					dt_fim_prev_w:= (dt_inicio_prev_w+qt_regra_tempo_w);
					while(Obter_Se_Dia_Util(dt_fim_prev_w,cd_estabelecimento_w) = 'N') loop
						begin
						dt_fim_prev_w:=dt_fim_prev_w+1;
						end;
					end loop;

				end if;

				insert into proj_cron_etapa(		nr_sequencia,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								dt_atualizacao,
								nm_usuario,
								qt_hora_prev,
								pr_etapa,
								ie_modulo,
								ie_fase,
								nr_seq_apres,
								nr_seq_cronograma,
								ds_atividade,
								ie_tipo_ativ_met,
								nr_seq_superior,
								ds_etapa,
								dt_inicio_prev,
								dt_fim_prev,
								ie_obrigatorio,
								ie_gera_os,
								nr_seq_processo_etapa,
								ie_status_etapa,
								nr_seq_etapa_npi,
								qt_dias)
							values (	nr_seq_etapa_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								(qt_horas_w),
								0,
								'N',
								'S',
								nr_seq_apresentacao_w,
								nr_seq_cronograma_w,
								nm_etapa_w,
								null,
								null,
								ds_objetivo_w,
								null,
								null,
								'S',
								'S',
								nr_Seq_processo_etapa_w,
								'2',
								nr_seq_etapa_processo_w,
								qt_regra_tempo_w);

				open C03;
				loop
				fetch C03 into
					nr_seq_grupo_w,
					cd_pessoa_fisica_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin

					if (nr_seq_grupo_w in (4,77)) then /*Analista de Sistemas*/
						select	max(cd_coordenador)
						into STRICT  	cd_pessoa_fisica_w
						from	proj_projeto
						where	nr_sequencia = nr_seq_projeto_p;
					elsif (nr_seq_grupo_w = 5) then /*Analista de Sistemas*/
						select	max(a.cd_responsavel)
						into STRICT  	cd_pessoa_fisica_w
						from	gerencia_wheb a,
								proj_projeto b
						where	b.nr_seq_gerencia = a.nr_sequencia
						and		b.nr_sequencia = nr_seq_projeto_p;
					end if;

					insert into proj_cron_etapa_equipe(	nr_sequencia,
									nr_seq_etapa_cron,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									ie_recurso_externo,
									cd_programador)
							values (	nextval('proj_cron_etapa_equipe_seq'),
									nr_seq_etapa_w,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									'N',
									cd_pessoa_fisica_w);

					end;
				end loop;
				close C03;

				end;
			end loop;
			close C02;

			end;
		end loop;
		close C01;

		end if;

	end if;

	commit;
	CALL cronograma_padrao_npi.gera_datas_cronograma_npi(nr_seq_projeto_p, nm_usuario_p);

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cronograma_padrao_npi.criar_cronograma_npi ( nr_seq_projeto_p bigint, nm_usuario_p text) FROM PUBLIC;
