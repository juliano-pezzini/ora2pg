-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


CREATE TYPE glosa AS (
	cd_motivo	motivo_glosa.cd_motivo_glosa%type,
	cd_motivo_ans	tiss_motivo_glosa.cd_motivo_tiss%type,
	qt_motivo	bigint	
);


CREATE OR REPLACE PROCEDURE tiss_dashboard_data_pck.popular_glosa (nr_seq_conc_guia_p conciliacao_conta_pac_guia.nr_sequencia%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type, cd_autorizacao_p conta_paciente_guia.cd_autorizacao%type) AS $body$
DECLARE


c_glosa CURSOR FOR
SELECT	a.cd_motivo_glosa							cd_motivo_glosa,
	a.cd_motivo_glosa_tiss							cd_motivo_ans,
	a.nm_usuario								nm_usuario
from	lote_audit_hist_item a,
	lote_audit_hist_guia b
where	a.nr_seq_guia 		= b.nr_sequencia
and	b.nr_interno_conta 	= nr_interno_conta_p
and	coalesce(b.cd_autorizacao, wheb_mensagem_pck.get_texto(1097738)) = cd_autorizacao_p
and ((a.cd_motivo_glosa IS NOT NULL AND a.cd_motivo_glosa::text <> '') or (a.cd_motivo_glosa_tiss IS NOT NULL AND a.cd_motivo_glosa_tiss::text <> ''));

type glosa_v is table of glosa index by integer;

glosas	glosa_v;

i integer;
i_exist integer;
k integer;

nr_seq_mot_glosa_w	motivo_glosa_itens.nr_sequencia%type;

nm_usuario_w	usuario.nm_usuario%type;
BEGIN
	glosas.delete;
	i := 0;	
	for glosa in c_glosa loop
		nm_usuario_w := glosa.nm_usuario;
		PERFORM set_config('tiss_dashboard_data_pck.qt_glosa_w', current_setting('tiss_dashboard_data_pck.qt_glosa_w')::bigint + 1, false);
		i_exist := -1;
		if glosas.count > 0 then
			for j in glosas.first .. glosas.last loop
				if i_exist = -1 and glosas[j].cd_motivo = glosa.cd_motivo_glosa
					and glosas[j].cd_motivo_ans = glosa.cd_motivo_ans then
					i_exist := j;
				end if;
			end loop;

			if i_exist <> -1 then
				glosas[i_exist].qt_motivo := glosas[i_exist].qt_motivo + 1;
			else
				k := glosas.last + 1;
				glosas[k].cd_motivo := glosa.cd_motivo_glosa;				
				glosas[k].cd_motivo_ans := glosa.cd_motivo_ans;
				glosas[k].qt_motivo := 1;
			end if;
		else
			glosas[0].cd_motivo := glosa.cd_motivo_glosa;
			glosas[0].cd_motivo_ans := glosa.cd_motivo_ans;
			glosas[0].qt_motivo := 1;			
		end if;		
	end loop;
	CALL CALL tiss_dashboard_data_pck.printlog('#@ INICIO LOG GLOSA ITENS @#');
	if (glosas.count > 0) then
		for j in glosas.first .. glosas.last loop
			select	nextval('motivo_glosa_itens_seq')
			into STRICT	nr_seq_mot_glosa_w
			;

			CALL CALL tiss_dashboard_data_pck.printlog('j = ' || j);
			CALL CALL tiss_dashboard_data_pck.printlog('cd = ' || glosas[j].cd_motivo);
			CALL CALL tiss_dashboard_data_pck.printlog('ans = ' || glosas[j].cd_motivo_ans);
			CALL CALL tiss_dashboard_data_pck.printlog('qt = ' || glosas[j].qt_motivo);
			insert into motivo_glosa_itens(				
				cd_motivo_glosa,
				cd_motivo_ans,
				qt_incidencia,
				nr_seq_conciliacao_guia,
				nr_sequencia,
				dt_atualizacao,
				dt_atualizacao_nrec,
				nm_usuario,
				nm_usuario_nrec
			)
			values (
				glosas[j].cd_motivo,
				glosas[j].cd_motivo_ans,
				glosas[j].qt_motivo,
				nr_seq_conc_guia_p,
				nr_seq_mot_glosa_w,
				clock_timestamp(),
				clock_timestamp(),
				coalesce(wheb_usuario_pck.get_nm_usuario, nm_usuario_w),
				coalesce(wheb_usuario_pck.get_nm_usuario, nm_usuario_w)
			);

		end loop;
	end if;
	CALL CALL tiss_dashboard_data_pck.printlog('#@ FIM LOG GLOSA ITENS @#');
end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tiss_dashboard_data_pck.popular_glosa (nr_seq_conc_guia_p conciliacao_conta_pac_guia.nr_sequencia%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type, cd_autorizacao_p conta_paciente_guia.cd_autorizacao%type) FROM PUBLIC;
