-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE xdok_json_pck.grava_retorno_xdok ( nr_sequencia_p bigint ) AS $body$
DECLARE


json_response_w                 philips_json;
json_return_w                   text;
json_sequence_w                 philips_json;
issues_w                        philips_json_value;
json_issues_errors_w            philips_json_list;
json_issueserrorsclob_w         text;
sequencia_w                     varchar(100);
issueserrors_w                  philips_json;
lkfexception_w                  varchar(2000);
exception_w                     varchar(2000);
grupos_w                        varchar(2000);
no_w                            varchar(2000);
pontos_w                        varchar(2000);
intzu_w                         varchar(2000);
melzu_w                         varchar(2000);
plk_w                           varchar(2000);
ptk_w                           varchar(2000);
sculk_w                         varchar(2000);
scutk_w                         varchar(2000);
spez_w                          varchar(2000);
vdzu_w                          varchar(2000);
hospital_w                      varchar(200);
numberadmission_w               varchar(200);
recordid_w                      varchar(200);
recorddate_w                    varchar(20);
accountinggroup_w               varchar(20);
accountingnodes_w               varchar(20);
pointsservice_w                 varchar(20);
pointscontact_w                 varchar(20);
pointsperformancecomponent_w    varchar(20);
pointsdailycomponent_w          varchar(20);
pointsaditionalupwards_w        varchar(20);
pointsaditionalintensive_w      varchar(20);
pointsaditionalbenefits_w       varchar(20);
pointsspecificareas_w           varchar(20);
totalpoints_w                   varchar(20);
sqlsequencia_w                  varchar(2000);
retornosequencia_w              varchar(2000);
vlr_result_w                    intpd_fila_transmissao.ds_message_response%type;
vlr_result_issues_errors_w      varchar(2000);
busca_w                         varchar(200) := '$.xdok.Sequencia';
sql_w                           varchar(2000);
sql_issues_errors_w             varchar(2000);
cont_chaves_inicial_w           bigint;
cont_chaves_final_w             bigint;
issues_errors_w                 varchar(2000);
error_code_w                    varchar(2000);
error_text_w                    varchar(2000);
value_error_w                   varchar(2000);
nr_sequencia_err_w              bigint;
nr_sequencia_w                  bigint;
nm_usuario_w                    intpd_fila_transmissao.nm_usuario%type;
scoring_data_w                  scoring_data%rowtype;
scoring_error_warning_w         scoring_error_warning%rowtype;
ds_erro_w                       varchar(4000);
nr_seq_documento_w              intpd_fila_transmissao.nr_seq_documento%type;
nr_seq_doc_num_w                bigint;
error_warning_count_w           bigint;
nr_seq_episodio_w               log_mensagem_xdok.nr_seq_episodio%type;

BEGIN
    begin
    select  ds_message_response,
            a.nm_usuario,
            nr_seq_documento
    into STRICT    vlr_result_w,
            nm_usuario_w,
            nr_seq_documento_w
    from    intpd_fila_transmissao   a,
            intpd_eventos_sistema    b
    where   a.nr_seq_evento_sistema = b.nr_sequencia
    and     a.nr_sequencia = nr_sequencia_p;

    nr_seq_doc_num_w    :=  somente_numero(nr_seq_documento_w);

    begin
    select  nr_seq_episodio
    into STRICT    nr_seq_episodio_w
    from    log_mensagem_xdok
    where   nr_sequencia = nr_seq_doc_num_w;
    exception
    when others then
        nr_seq_episodio_w   :=  null;
    end;

    json_sequence_w := philips_json(vlr_result_w);
    if (json_sequence_w IS NOT NULL AND json_sequence_w::text <> '') then
        hospital_w := json_sequence_w.get['Hospital'].get_string();
        numberadmission_w := json_sequence_w.get['NumberAdmission'].get_string();
        recordid_w := json_sequence_w.get['RecordID'].get_string();
        recorddate_w := json_sequence_w.get['RecordDate'].get_string();
        accountinggroup_w := json_sequence_w.get['AccountingGroup'].get_string();
        accountingnodes_w := json_sequence_w.get['AccountingNodes'].get_string();
        pointsservice_w := json_sequence_w.get['PointsService'].get_string();
        pointscontact_w := json_sequence_w.get['PointsContact'].get_string();
        pointsperformancecomponent_w := json_sequence_w.get['PointsPerformanceComponent'].get_string();
        pointsdailycomponent_w := json_sequence_w.get['PointsDailyComponent'].get_string();
        pointsaditionalupwards_w := json_sequence_w.get['PointsAditionalOutlierUpwards'].get_string();
        pointsaditionalintensive_w := json_sequence_w.get['PointsAditionalIntensive'].get_string();
        pointsaditionalbenefits_w := json_sequence_w.get['PointsAditionalMultipleBenefits'].get_string();
        pointsspecificareas_w := json_sequence_w.get['PointsSpecificAreas'].get_string();
        totalpoints_w := json_sequence_w.get['TotalPoints'].get_string();
        lkfexception_w := json_sequence_w.get['LKFException'].get_string();
        issues_w := json_sequence_w.get('IssuesErrors');

        if ( coalesce(lkfexception_w::text, '') = '' ) then

            update  scoring_data 
            set ie_situacao = 'I' 
            where   nr_case = nr_seq_episodio_w;

            select
                nextval('scoring_data_seq')
            into STRICT scoring_data_w.nr_sequencia
;

            scoring_data_w.dt_atualizacao := clock_timestamp();
            scoring_data_w.nm_usuario := nm_usuario_w;
            scoring_data_w.cd_hospital := hospital_w;
            scoring_data_w.ie_record_type := 'I';
            scoring_data_w.ie_situacao := 'A';
            scoring_data_w.nr_case := nr_seq_episodio_w;
            scoring_data_w.dt_admission := recorddate_w;
            scoring_data_w.cd_billing_group := accountinggroup_w;
            scoring_data_w.cd_billing_node := accountingnodes_w;
            scoring_data_w.qt_performance_points := pointsservice_w;
            scoring_data_w.qt_duration_points := pointsperformancecomponent_w;
            scoring_data_w.qt_additional_points := pointsaditionalupwards_w;
            scoring_data_w.qt_add_points_intensive := pointsaditionalintensive_w;
            scoring_data_w.qt_add_points_multiple := pointsaditionalbenefits_w;
            scoring_data_w.qt_points_specific_area := pointsspecificareas_w;
            scoring_data_w.qt_total_points := totalpoints_w;
            scoring_data_w.qt_contact_points := pointscontact_w;
            scoring_data_w.qt_credit_points := pointsdailycomponent_w;

            insert into scoring_data values (scoring_data_w.*);
            begin
                json_issues_errors_w := philips_json_list(json_sequence_w.get('IssuesErrors'));
            exception
            when others then
                issues_w := null;
            end;

            update  scoring_error_warning
            set ie_situacao = 'I' 
            where   nr_case = nr_seq_episodio_w;

            if (issues_w IS NOT NULL AND issues_w::text <> '') then
                if (json_issues_errors_w IS NOT NULL AND json_issues_errors_w::text <> '') then
                    for i in 1..json_issues_errors_w.count loop begin
                        issueserrors_w := philips_json(json_issues_errors_w.get(i));
                        error_code_w := issueserrors_w.get['ErrorCode'].get_string();
                        error_text_w := issueserrors_w.get['ErrorText'].get_string();
                        value_error_w := issueserrors_w.get['Value'].get_string();

                        select  count(1)
                        into STRICT    error_warning_count_w
                        from    scoring_error_warning 
                        where   cd_error_warning = error_code_w and nr_case = numberadmission_w;

                        if ( error_warning_count_w = 0 ) then
                            select  nextval('scoring_error_warning_seq')
                            into STRICT    scoring_error_warning_w.nr_sequencia
;

                            scoring_error_warning_w.dt_atualizacao := clock_timestamp();
                            scoring_error_warning_w.nm_usuario := nm_usuario_w;
                            scoring_error_warning_w.cd_hospital := hospital_w;
                            scoring_error_warning_w.dt_admission := recorddate_w;
                            scoring_error_warning_w.ie_record_type := 'P';
                            scoring_error_warning_w.nr_case := nr_seq_episodio_w;
                            scoring_error_warning_w.cd_error_warning := trim(both error_code_w);
                            scoring_error_warning_w.ds_error_warning := trim(both error_text_w);
                            scoring_error_warning_w.vl_error_warning := trim(both value_error_w);
                            scoring_error_warning_w.ie_situacao := 'A';

                            insert into scoring_error_warning values (scoring_error_warning_w.*);
                        else
                            update  scoring_error_warning
                            set dt_atualizacao = clock_timestamp(),
                                nm_usuario = nm_usuario_w,
                                cd_hospital = hospital_w,
                                dt_admission = recorddate_w,
                                ie_record_type = 'P',
                                ds_error_warning = trim(both error_text_w),
                                vl_error_warning = trim(both value_error_w),
                                ie_situacao = 'A'
                            where   cd_error_warning = error_code_w 
                            and     nr_case = nr_seq_episodio_w;
                        end if;
                    end;
                    end loop;
                end if;
            end if;

            update  intpd_fila_transmissao
            set ie_status = 'S',
                ie_response_procedure = 'S'
            where   nr_sequencia = nr_sequencia_p;

            update log_mensagem_xdok
            set ie_status = 'S'
            where   nr_sequencia = nr_seq_documento_w;

        else
            update  intpd_fila_transmissao
            set ie_status = 'E',
                ie_response_procedure = 'S',
                ds_log = lkfexception_w
            where nr_sequencia = nr_sequencia_p;

            update  log_mensagem_xdok
            set ie_status = 'E'
            where   nr_sequencia = nr_seq_documento_w;
        end if;
    end if;

    exception
    when others then
        begin
        ds_erro_w := substr(dbms_utility.format_error_backtrace
                            || chr(13)
                            || chr(10)
                            || sqlerrm, 1, 4000);

        rollback;
        update  intpd_fila_transmissao
        set ie_status = 'E',
            ie_response_procedure = 'S',
            ds_log = ds_erro_w
        where   nr_sequencia = nr_sequencia_p;

        update  log_mensagem_xdok
        set ie_status = 'E'
        where   nr_sequencia = nr_seq_documento_w;
        end;
    end;

    commit;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE xdok_json_pck.grava_retorno_xdok ( nr_sequencia_p bigint ) FROM PUBLIC;
