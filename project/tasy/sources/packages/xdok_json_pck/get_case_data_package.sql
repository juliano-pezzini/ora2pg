-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION xdok_json_pck.get_case_data ( nr_seq_episodio_p bigint ) RETURNS PHILIPS_JSON_LIST AS $body$
DECLARE


json_episodio_w             philips_json;
json_episodio_ret_w         philips_json_list;
episodio_paciente_w         episodio_paciente%rowtype;
atendimento_paciente_w      atendimento_paciente%rowtype;
atend_categoria_convenio_w  atend_categoria_convenio%rowtype;
pessoa_fisica_w             pessoa_fisica%rowtype;
compl_pessoa_fisica_w       compl_pessoa_fisica%rowtype;
atendimento_transf_w        atendimento_transf%rowtype;
convenio_w                  convenio%rowtype;
tipo_episodio_w             tipo_episodio%rowtype;
nacionalidade_w             nacionalidade%rowtype;
motivo_alta_w               motivo_alta%rowtype;
statename_w                 varchar(255);
postalcode_w                varchar(255);
gemeindecode_w              varchar(255);

BEGIN
    json_episodio_w := philips_json();
    json_episodio_ret_w := philips_json_list();
    begin
    select  *
    into STRICT    episodio_paciente_w
    from    episodio_paciente
    where   nr_sequencia = nr_seq_episodio_p;
    exception
    when others then
        episodio_paciente_w := null;
    end;

    begin
    select  *
    into STRICT    tipo_episodio_w
    from    tipo_episodio
    where   nr_sequencia = episodio_paciente_w.nr_seq_tipo_episodio;
    exception
    when others then
        tipo_episodio_w := null;
    end;

    begin
    select  a.*
    into STRICT    atendimento_paciente_w
    from    atendimento_paciente   a,
            tipo_admissao_fat      b
    where   a.nr_seq_tipo_admissao_fat = b.nr_sequencia
    and     a.nr_seq_episodio = episodio_paciente_w.nr_sequencia
    and     coalesce(a.dt_cancelamento::text, '') = ''
    and     b.si_scoring_relevant = 'S'  LIMIT 1;
    exception
    when others then
        atendimento_paciente_w := null;
    end;

    begin
    select  *
    into STRICT    pessoa_fisica_w
    from    pessoa_fisica
    where   cd_pessoa_fisica = atendimento_paciente_w.cd_pessoa_fisica;
    exception
    when others then
        pessoa_fisica_w := null;
    end;

    begin
    select  *
    into STRICT    compl_pessoa_fisica_w
    from    compl_pessoa_fisica a
    where   a.cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
    and     ie_tipo_complemento = '1';

        begin
        select  a.statename,
                a.postalcode
        into STRICT    statename_w,
                postalcode_w
        from    table( address_pck.get_address_fields(compl_pessoa_fisica_w.nr_seq_pessoa_endereco) ) a;
        exception
        when others then
            statename_w := null;
            postalcode_w := null;
        end;

        begin
        select  obter_comunity_code(compl_pessoa_fisica_w.cd_cep)
        into STRICT    gemeindecode_w
;
        exception
        when others then
            gemeindecode_w := null;
        end;

    exception
    when others then
        compl_pessoa_fisica_w := null;
    end;

    begin
    select  *
    into STRICT    atendimento_transf_w
    from    atendimento_transf a
    where   a.nr_atendimento = atendimento_paciente_w.nr_atendimento
    and     a.nr_sequencia = (  SELECT  max(x.nr_sequencia)
                                from    atendimento_transf x
                                where   x.nr_atendimento = atendimento_paciente_w.nr_atendimento);
    exception
    when others then
        atendimento_transf_w := null;
    end;

    begin
    select  *
    into STRICT    atend_categoria_convenio_w
    from    atend_categoria_convenio a
    where   a.nr_atendimento = atendimento_paciente_w.nr_atendimento
    and     nr_prioridade > 0
    order by nr_prioridade desc LIMIT 1;
    exception
    when others then
        atend_categoria_convenio_w := null;
    end;

    begin
    select  *
    into STRICT    convenio_w
    from    convenio
    where   cd_convenio = atend_categoria_convenio_w.cd_convenio
    and exists (    SELECT  1
                    from    w_xdok_kost
                    where   w_xdok_kost.kostentrager = convenio_w.cd_externo
                    and     abrechnungsrelevanz = 'J');
    exception
    when others then
        convenio_w := null;
    end;

    begin
    select  *
    into STRICT    nacionalidade_w
    from    nacionalidade
    where   cd_nacionalidade = pessoa_fisica_w.cd_nacionalidade;
    exception
    when others then
        nacionalidade_w := null;
    end;

    begin
    select  *
    into STRICT    motivo_alta_w
    from    motivo_alta
    where   cd_motivo_alta = atendimento_paciente_w.cd_motivo_alta;
    exception
    when others then
        motivo_alta_w := null;
    end;

    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'hospitalID', xdok_json_pck.get_sistema_externo(NULL, atendimento_paciente_w.cd_estabelecimento));
    /*    xdok_json_pck.add_json_value(json_episodio_w, 'numberAdmission', episodio_paciente_w.nr_episodio);*/

    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'numberAdmission', '');
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'recordID', '');
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'recordDate', to_char(atendimento_paciente_w.dt_entrada, 'yyyymmdd'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'recordTime', to_char(atendimento_paciente_w.dt_entrada, 'hhmi'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'typeTreatment', tipo_episodio_w.cd_externo);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'dateBirth', to_char(pessoa_fisica_w.dt_nascimento, 'yyyymmdd'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'ageGroup', obter_faixa_etaria_pac(pessoa_fisica_w.cd_pessoa_fisica, 'C'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'gender', xdok_json_pck.get_xdok_converter_externo('PESSOA_FISICA', 'IE_SEXO', pessoa_fisica_w.ie_sexo));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'citizenship', nacionalidade_w.cd_externo);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'residenceState', statename_w);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'residencePostCode', postalcode_w);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'residenceCommunity', gemeindecode_w);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'recordType1', xdok_json_pck.get_xdok_converter_externo('CLASSIFICACAO_ATENDIMENTO', 'NR_SEQUENCIA',  atendimento_paciente_w.nr_seq_classificacao));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'recordType2', xdok_json_pck.get_xdok_converter_externo('QUEIXA_PACIENTE', 'NR_SEQUENCIA', atendimento_paciente_w.nr_seq_queixa));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'typeTransport', xdok_json_pck.get_xdok_converter_externo('FORMA_CHEGADA', 'NR_SEQUENCIA' , atendimento_paciente_w.nr_seq_forma_chegada));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'assignedByHospital', xdok_json_pck.get_sistema_externo(atendimento_paciente_w.cd_cgc_indicacao));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'assignedToHospital', xdok_json_pck.get_sistema_externo(atendimento_transf_w.cd_cgc));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'exitType', xdok_json_pck.get_xdok_converter_externo('MOTIVO_ALTA', 'CD_MOTIVO_ALTA' , motivo_alta_w.cd_motivo_alta));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'dischargeDate', to_char(coalesce(atendimento_paciente_w.dt_alta, clock_timestamp()), 'yyyymmdd'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'dischargeTime', to_char(coalesce(atendimento_paciente_w.dt_alta, clock_timestamp()), 'hhmi'));
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'socialInsuranceCode', convenio_w.cd_externo);
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'fundRelevance', 'J');
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'plausibilityIndicator', '');
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'settingCostObject', '');
    json_episodio_w := xdok_json_pck.add_json_value(json_episodio_w, 'payrollQuarter', '');
    json_episodio_ret_w.append(json_episodio_w.to_json_value());
return json_episodio_ret_w;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION xdok_json_pck.get_case_data ( nr_seq_episodio_p bigint ) FROM PUBLIC;
