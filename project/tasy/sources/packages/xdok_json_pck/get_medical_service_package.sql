-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION xdok_json_pck.get_medical_service ( nr_seq_episodio_p bigint ) RETURNS PHILIPS_JSON_LIST AS $body$
DECLARE


json_medical_service_w          philips_json;
json_medical_service_list_w     philips_json_list;

x04 CURSOR FOR
SELECT  xdok_json_pck.get_sistema_externo(null, a.cd_estabelecimento) hospitalid,
        b.nr_episodio numberadmissions,
        to_char(a.dt_entrada, 'yyyymmdd') recorddate,
        d.cd_procedimento_loc melcode,
        xdok_json_pck.get_xdok_converter_externo('PROCEDIMENTO_PAC_MEDICO', 'IE_LADO', c.ie_lado) medicalservicelocalization,
        c.qt_submitted melquantity,
        to_char(c.dt_procedimento, 'yyyymmdd') medicalservicedate,
        to_char(c.dt_procedimento, 'hhmi') medicalservicetime
from    atendimento_paciente      a,
        episodio_paciente         b,
        procedimento_pac_medico   c,
        procedimento              d
where   a.nr_seq_episodio = b.nr_sequencia
and     a.nr_atendimento = c.nr_atendimento
and     c.cd_procedimento = d.cd_procedimento
and     c.ie_origem_proced = d.ie_origem_proced
and exists (    SELECT  1
                from    w_xdok_mellist x
                where   x.leistung = d.cd_procedimento_loc)
and     c.ie_origem_proced = '40'
and     coalesce(c.dt_inativacao::text, '') = ''
and     (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
and     a.nr_seq_episodio = nr_seq_episodio_p;

BEGIN
json_medical_service_list_w := philips_json_list();
for r_x04 in x04 loop
    begin
    json_medical_service_w := philips_json();
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'hospitalID', r_x04.hospitalid);
    /*xdok_json_pck.add_json_value(json_medical_service_w, 'numberAdmissions', r_x04.numberadmissions);*/

    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'numberAdmissions', '');
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'recordID', '');
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'recordDate', r_x04.recorddate);
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'melCode', r_x04.melcode);
    if  r_x04.medicalservicelocalization in ('R', 'L') then
        json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'medicalServiceLocalization', r_x04.medicalservicelocalization);
    else
        json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'medicalServiceLocalization', '');
    end if;
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'medicalServiceRelevance', 'J');
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'melQuantity', r_x04.melquantity);
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'medicalServiceDate', r_x04.medicalservicedate);
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'medicalServiceTime', r_x04.medicalservicetime);
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'functionCode', '');
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'hospitalPerfomService', '');
    json_medical_service_w := xdok_json_pck.add_json_value(json_medical_service_w, 'recordNumber', '');
    json_medical_service_list_w.append(json_medical_service_w.to_json_value());
end;
end loop;

return json_medical_service_list_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION xdok_json_pck.get_medical_service ( nr_seq_episodio_p bigint ) FROM PUBLIC;
