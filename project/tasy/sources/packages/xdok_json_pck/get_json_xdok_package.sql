-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--
-- dblink wrapper to call function xdok_json_pck.get_json_xdok() as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION xdok_json_pck.get_json_xdok ( nr_seq_episodio_p bigint ) RETURNS text AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	text;
BEGIN
	v_query := 'SELECT * FROM xdok_json_pck.get_json_xdok_atx ( ' || quote_nullable(nr_seq_episodio_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret text);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION xdok_json_pck.get_json_xdok_atx ( nr_seq_episodio_p bigint ) RETURNS text AS $body$
DECLARE


x01_w                    philips_json_list;
x02_w                    philips_json_list;
x03_w                    philips_json_list;
x04_w                    philips_json_list;
json_episodio_w          philips_json;
clob_aux_w               text;
retorno_w                text;
episodio_paciente_w      episodio_paciente%rowtype;
atendimento_paciente_w   atendimento_paciente%rowtype;
log_mensagem_xdok_w      log_mensagem_xdok%rowtype;
nm_usuario_w             varchar(15);
reg_integracao_p         gerar_int_padrao.reg_integracao;
ie_novo_w           varchar(1) :=  'N';
BEGIN
    begin
    select  *
    into STRICT    episodio_paciente_w
    from    episodio_paciente
    where   nr_sequencia = nr_seq_episodio_p;
    exception
    when others then
        episodio_paciente_w := null;
    end;

    begin
    select  ap.*
    into STRICT    atendimento_paciente_w
    from    atendimento_paciente   ap,
            tipo_admissao_fat      taf
    where   nr_seq_episodio = episodio_paciente_w.nr_sequencia
    and     coalesce(dt_cancelamento::text, '') = ''
    and     ap.nr_seq_tipo_admissao_fat = taf.nr_sequencia
    and     coalesce(taf.si_scoring_relevant, 'N') = 'S'  LIMIT 1;
    exception
    when others then
        atendimento_paciente_w := null;
    end;

    json_episodio_w := philips_json();
    x01_w := xdok_json_pck.get_case_data(nr_seq_episodio_p);
    x02_w := xdok_json_pck.get_departments(nr_seq_episodio_p);
    x03_w := xdok_json_pck.get_diagnose(nr_seq_episodio_p);
    x04_w := xdok_json_pck.get_medical_service(nr_seq_episodio_p);

    begin
    select  *
    into STRICT    log_mensagem_xdok_w
    from    log_mensagem_xdok
    where   nr_seq_episodio = nr_seq_episodio_p
    and     ie_status = 'P';
    exception
    when others then
        select  nextval('log_mensagem_xdok_seq')
        into STRICT    log_mensagem_xdok_w.nr_sequencia
;

        ie_novo_w   :=  'S';
    end;

    json_episodio_w.put('sequence', log_mensagem_xdok_w.nr_sequencia);
    json_episodio_w.put('x01', x01_w.to_json_value());
    json_episodio_w.put('x02', x02_w.to_json_value());
    json_episodio_w.put('x03', x03_w.to_json_value());
    json_episodio_w.put('x04', x04_w.to_json_value());
    json_episodio_w.put('year', to_char(atendimento_paciente_w.dt_entrada, 'yyyy'));
    json_episodio_w.put('path', 'c:\/\/lkf');
    dbms_lob.createtemporary(retorno_w, true);
    json_episodio_w.(retorno_w);

    log_mensagem_xdok_w.nr_episodio := episodio_paciente_w.nr_episodio;
    log_mensagem_xdok_w.nr_seq_episodio := episodio_paciente_w.nr_sequencia;
    log_mensagem_xdok_w.cd_pessoa_fisica := episodio_paciente_w.cd_pessoa_fisica;
    log_mensagem_xdok_w.ds_log := '';
    log_mensagem_xdok_w.ie_status := 'P';
    log_mensagem_xdok_w.ie_envio_receb := 'E';
    log_mensagem_xdok_w.nr_atendimento := atendimento_paciente_w.nr_atendimento;
    dbms_lob.createtemporary(clob_aux_w, true);
    x01_w.(clob_aux_w);
    log_mensagem_xdok_w.x01 := clob_aux_w;
    x02_w.(clob_aux_w);
    log_mensagem_xdok_w.x02 := clob_aux_w;
    x03_w.(clob_aux_w);
    log_mensagem_xdok_w.x03 := clob_aux_w;
    x04_w.(clob_aux_w);
    log_mensagem_xdok_w.x04 := clob_aux_w;
    json_episodio_w.(clob_aux_w);
    log_mensagem_xdok_w.ds_json := clob_aux_w;
    if ( coalesce(wheb_usuario_pck.get_nm_usuario::text, '') = '' ) then
        nm_usuario_w := 'XDOK';
    else
        nm_usuario_w := wheb_usuario_pck.get_nm_usuario;
    end if;


    log_mensagem_xdok_w.nm_usuario := nm_usuario_w;
    log_mensagem_xdok_w.dt_atualizacao := clock_timestamp();
    log_mensagem_xdok_w.cd_estabelecimento := atendimento_paciente_w.cd_estabelecimento;
    log_mensagem_xdok_w.nr_ano := to_char(atendimento_paciente_w.dt_entrada, 'yyyy');

    if (ie_novo_w = 'S') then
        log_mensagem_xdok_w.dt_atualizacao_nrec := clock_timestamp();
        log_mensagem_xdok_w.nm_usuario_nrec := nm_usuario_w;
        insert into log_mensagem_xdok values (log_mensagem_xdok_w.*);
    else
        update  log_mensagem_xdok
        set row = log_mensagem_xdok_w
        where   nr_sequencia = log_mensagem_xdok_w.nr_sequencia;
    end if;


commit;
return log_mensagem_xdok_w.ds_json;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION xdok_json_pck.get_json_xdok ( nr_seq_episodio_p bigint ) FROM PUBLIC; -- REVOKE ALL ON FUNCTION xdok_json_pck.get_json_xdok_atx ( nr_seq_episodio_p bigint ) FROM PUBLIC;
