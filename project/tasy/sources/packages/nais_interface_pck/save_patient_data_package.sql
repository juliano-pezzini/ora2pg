-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_interface_pck.save_patient_data ( patient_data_p text, status_p INOUT text) AS $body$
DECLARE

    cd_person_w pessoa_fisica.cd_sistema_ant%type;
	cd_duplic_person_w pessoa_fisica.cd_sistema_ant%type;
	
    ds_name_translated_w person_name.ds_family_name%type;
    ds_given_name_main_w person_name.ds_given_name%type;
    ie_sex_w pessoa_fisica.ie_sexo%type;
    date_of_birth_w pessoa_fisica.dt_nascimento%type;
    courtesy_classification_w varchar(2);
    identical_name_flag_w     integer;
    test_patient_flag_w       integer;
    address_information_w     varchar(2);
    ds_city_w compl_pessoa_fisica.ds_municipio%type;
    detailed_address_w         varchar(255);
    first_zip_code_w           varchar(3);
    last_zip_code_w            varchar(4);
    telephone_number_w         varchar(30);
    nr_telephone_w             varchar(15);
    ds_fone_adic_w             varchar(15);
    contact_telephone_number_w varchar(30);
    work_telephone_number_w    varchar(15);
	adic_phone_number_w    	   varchar(15);
    dt_health_card_check_w     nais_insurance.dt_health_card_check%type;
    health_insurance_card_w    varchar(6);
    vender_name_w              varchar(150);
    additional_information_w   varchar(1);
    protection_flag_w          varchar(1);
    nationality_code_w         varchar(3);
    insurance_pattern_count_w  smallint;
    nr_sequencia_w             bigint := 0;
    cd_pessoa_fisica_w pessoa_fisica.cd_pessoa_fisica%type;
    nr_seq_catalogue_w param_catalogo_endereco.nr_seq_catalogo_padrao%type;
    nr_seq_pessoa_endereco_w pessoa_endereco.nr_sequencia%type;
    nr_seq_person_name_w person_name.nr_sequencia%type;
    nr_seq_int_call_log_w integration_message_log.nr_seq_int_call_log%type := 0;
    ie_status_w integration_call_log.ie_status%type;
    cd_nacionalidade_w nacionalidade.cd_nacionalidade%type;
    person_name_flag_w	varchar(1);
	nr_sequencia_compl_w    compl_pessoa_fisica.nr_sequencia%type;

	
BEGIN
		begin
			begin
            PERFORM set_config('nais_interface_pck.ds_error_w', null, false);
            select  substr(patient_data_p,65,10) patient_id,
                    substr(patient_data_p,75,50) patient_name,
                    substr(patient_data_p,125,50) patient_given_name,
                    CASE WHEN to_char(substr(patient_data_p,175,1))=1 THEN 'M' WHEN to_char(substr(patient_data_p,175,1))=2 THEN 'F'  ELSE 'I' END  patient_sex,
                    to_date(to_char(substr(patient_data_p,176,8)),'YYYYMMDD') date_of_birth,
                    substr(patient_data_p,184,2) courtesy_classification,
                    (substr(patient_data_p,186,1))::numeric  identical_name_flag,
                    (substr(patient_data_p,187,1))::numeric  test_patient_flag,
                    substr(patient_data_p,188,2) patient_address_information,
                    substr(patient_data_p,190,3) city,
                    -- empty 9 spaces from 193 to 202
                    substr(patient_data_p,202,50) detailed_address_information,
                    substr(patient_data_p,252,3) first_zip_code,
                    substr(patient_data_p,255,4) last_zip_code,
                    substr(patient_data_p,259,15) telephone_number,
                    substr(patient_data_p,274,15) ds_fone_adic,
                    substr(patient_data_p,289,30) contact_telephone_number,
                    substr(patient_data_p,319,15) work_telephone_number,
                    substr(patient_data_p,334,15) adic_phone_number,
                    substr(patient_data_p,349,6) health_insurance_card,
                    substr(patient_data_p,355,25) vender_name,
                    substr(patient_data_p,380,1) additional_information,
                    substr(patient_data_p,381,1) protection_flag,
                    substr(patient_data_p,382,3) nationality_code,
                    (CASE WHEN coalesce(to_char(substr(patient_data_p,385,2)), 0)=0 THEN  0  ELSE coalesce(to_char(substr(patient_data_p,385,2)), 0) END )::numeric  insurance_pattern_count
			  into STRICT  cd_person_w,
                    ds_name_translated_w,
                    ds_given_name_main_w,
                    ie_sex_w,
                    date_of_birth_w,
                    courtesy_classification_w,
                    identical_name_flag_w,
                    test_patient_flag_w,
                    address_information_w,
                    ds_city_w,
                    detailed_address_w,
                    first_zip_code_w,
                    last_zip_code_w,
                    nr_telephone_w,
                    ds_fone_adic_w,
                    contact_telephone_number_w,
                    work_telephone_number_w,
                    adic_phone_number_w,
                    health_insurance_card_w,
                    vender_name_w,
                    additional_information_w,
                    protection_flag_w,
                    nationality_code_w,
                    insurance_pattern_count_w
			;
			exception
			when others then
                PERFORM set_config('nais_interface_pck.ds_error_w', sqlerrm||' Error occurred while retriving the patient information ', false);
                RAISE EXCEPTION 'nais_exception_w' USING ERRCODE = '50020';
			end;

			select	coalesce(max(a.cd_pessoa_fisica), '0'), 
                    coalesce(max(obter_prontuario_pf(b.cd_estabelecimento,a.cd_pessoa_fisica)), 0)
            into STRICT    cd_pessoa_fisica_w,
                    cd_duplic_person_w
            from 	pessoa_fisica_duplic a,
                    pessoa_fisica b
            where 	a.nr_prontuario = cd_person_w
            and 	a.cd_pessoa_fisica = b.cd_pessoa_fisica
            and 	not exists (SELECT 1 from pessoa_fisica x where a.nr_prontuario = x.nr_prontuario)  LIMIT 1;

            if (cd_pessoa_fisica_w <> '0' and cd_duplic_person_w <> 0) then
                cd_person_w := cd_duplic_person_w;
            end if;
			
            select  coalesce(max(nr_seq_person_name), 0),
					coalesce(max(cd_pessoa_fisica), '0')
			into STRICT	nr_seq_person_name_w,
					cd_pessoa_fisica_w
			from    pessoa_fisica
			where   nr_prontuario = cd_person_w;
			
			if (nr_seq_person_name_w = 0 and cd_pessoa_fisica_w = '0') then
				select  nextval('person_name_seq')
				into STRICT    nr_seq_person_name_w 
				;
				person_name_flag_w := '0';
			else
				person_name_flag_w := '1';
			end if;

            CALL nais_interface_pck.save_person_name('translated', ds_name_translated_w, nr_seq_person_name_w, person_name_flag_w);
			CALL nais_interface_pck.save_person_name('main', ds_given_name_main_w ,nr_seq_person_name_w, person_name_flag_w);

            begin
                select cd_nacionalidade
                into STRICT cd_nacionalidade_w
                from nacionalidade
                where cd_externo = nationality_code_w;
            exception
			when others then
                PERFORM set_config('nais_interface_pck.ds_message_w', 'Nationality code "'||nationality_code_w ||'" does not exist in Tasy. ', false);
            end;

			contact_telephone_number_w := regexp_replace(contact_telephone_number_w, '[^0-9-]', '');
			
            if (person_name_flag_w = '0') then
                select nextval('pessoa_fisica_seq')
                into STRICT cd_pessoa_fisica_w 
;

                begin
                    insert
                    into pessoa_fisica(
                      cd_pessoa_fisica,
                      cd_sistema_ant,
                      nr_prontuario,
                      ie_tipo_pessoa,
                      dt_atualizacao,
                      dt_atualizacao_nrec,
                      nm_usuario,
                      nm_usuario_nrec,
                      ie_sexo,
                      dt_nascimento,
                      nr_telefone_celular,
                      nr_seq_person_name,
                      nr_ddi_celular,
                      cd_nacionalidade,
                      ds_empresa_pf
                    )
                    values (
                      cd_pessoa_fisica_w,
                      cd_person_w,
                      cd_person_w,
                      2,
                      clock_timestamp(),
                      clock_timestamp(),
                      current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
                      current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
                      ie_sex_w,
                      date_of_birth_w,
                      contact_telephone_number_w,
                      nr_seq_person_name_w,
                      81,
                      cd_nacionalidade_w,
                      trim(both replace(vender_name_w,current_setting('nais_interface_pck.jpn_space_w')::varchar(255),' ') )
                    );
                  commit;
                exception
                when others then
                    PERFORM set_config('nais_interface_pck.ds_error_w', sqlerrm || ' Error occurred while saving the physical person of ' || ds_given_name_main_w || ' .' || chr(13) || chr(10), false);
                    RAISE EXCEPTION 'nais_exception_w' USING ERRCODE = '50020';
                end;
            else
                begin
				
					CALL philips_param_pck.set_cd_pais(12);
					
                    update	pessoa_fisica
                    set		dt_atualizacao = clock_timestamp(),
                            nm_usuario = current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
                            ie_sexo = ie_sex_w,
                            dt_nascimento = date_of_birth_w,
                            nr_telefone_celular = contact_telephone_number_w,
                            cd_nacionalidade = cd_nacionalidade_w,
                            ds_empresa_pf = trim(both replace(vender_name_w,current_setting('nais_interface_pck.jpn_space_w')::varchar(255),' ') )
                    where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
                    commit;
                exception
                when others then
                    PERFORM set_config('nais_interface_pck.ds_error_w', sqlerrm || ' Error occurred while updating the physical person of ' || ds_given_name_main_w || ' .' || chr(13) || chr(10), false);
                    RAISE EXCEPTION 'nais_exception_w' USING ERRCODE = '50020';
                end;
            end if;

            if (identical_name_flag_w = 0) then
                identical_name_flag_w := 90;
            elsif (identical_name_flag_w = 1) then
                identical_name_flag_w := 100;
            end if;

            CALL nais_interface_pck.save_person_classification(identical_name_flag_w, 'Identical name flag', ds_given_name_main_w, cd_pessoa_fisica_w, 'IN');

            if (test_patient_flag_w = 0) then
                test_patient_flag_w := 110;
            elsif (test_patient_flag_w = 1) then
                test_patient_flag_w := 120;
            elsif (test_patient_flag_w = 2) then
                test_patient_flag_w := 130;
            elsif (test_patient_flag_w = 3) then
                test_patient_flag_w := 140;
            end if;

            CALL nais_interface_pck.save_person_classification(test_patient_flag_w, 'Test patient flag', ds_given_name_main_w, cd_pessoa_fisica_w, 'TF');

			select coalesce(max(nr_seq_catalogo_padrao),0)
			into STRICT nr_seq_catalogue_w
			from param_catalogo_endereco
			where cd_estabelecimento = 1;

            begin
                select  coalesce(max(nr_seq_pessoa_endereco),0)
                into STRICT    nr_seq_pessoa_endereco_w
                from 	compl_pessoa_fisica
                where 	cd_pessoa_fisica = 	cd_pessoa_fisica_w
                and		ie_tipo_complemento = 1;

                if (nr_seq_pessoa_endereco_w = 0) then
                
                    select nextval('pessoa_endereco_seq') 
                    into STRICT nr_seq_pessoa_endereco_w 
;

                    insert into pessoa_endereco(
                      nr_sequencia,
                      dt_atualizacao,
                      dt_atualizacao_nrec,
                      nm_usuario,
                      nm_usuario_nrec,
                      nr_seq_catalogo) values (
										  nr_seq_pessoa_endereco_w,
										  clock_timestamp(),
										  clock_timestamp(),
										  current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
										  current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
										  nr_seq_catalogue_w);
					
					select	coalesce(max(nr_sequencia), 0)
                    into STRICT	nr_sequencia_compl_w
                    from	compl_pessoa_fisica
                    where	cd_pessoa_fisica = cd_pessoa_fisica_w
                    and 	ie_tipo_complemento = 1;
                    
                    if (nr_sequencia_compl_w = 0) then
                    
                        select	coalesce(max(nr_sequencia),0) +1
                        into STRICT	nr_sequencia_compl_w
                        from 	compl_pessoa_fisica
                        where	cd_pessoa_fisica = cd_pessoa_fisica_w;

                        insert into compl_pessoa_fisica(
                                        nr_sequencia,
                                        cd_pessoa_fisica,
                                        ie_tipo_complemento,
                                        dt_atualizacao,
                                        dt_atualizacao_nrec,
                                        nm_usuario,
                                        nm_usuario_nrec,
                                        nr_seq_pessoa_endereco) values (
                                                    nr_sequencia_compl_w,
                                                    cd_pessoa_fisica_w,
                                                    1,
                                                    clock_timestamp(),
                                                    clock_timestamp(),
                                                    current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
                                                    current_setting('nais_interface_pck.nm_usuario_w')::varchar(20),
                                                    nr_seq_pessoa_endereco_w);
                    else
                            update  compl_pessoa_fisica
                            set     dt_atualizacao = clock_timestamp(),
                                    nr_seq_pessoa_endereco = nr_seq_pessoa_endereco_w
                            where   nr_sequencia = nr_sequencia_compl_w
                            and     cd_pessoa_fisica = cd_pessoa_fisica_w
                            and 	ie_tipo_complemento = 1;
                    end if;
					
					commit;
                end if;
                CALL nais_interface_pck.save_pessoa_endereco_item('ESTADO_PROVINCI', address_information_w, nr_seq_pessoa_endereco_w);
                CALL nais_interface_pck.save_pessoa_endereco_item('MUNICIPIO', ds_city_w, nr_seq_pessoa_endereco_w);
                CALL nais_interface_pck.save_pessoa_endereco_item('RUA_VIALIDADE', detailed_address_w, nr_seq_pessoa_endereco_w);
                CALL nais_interface_pck.save_pessoa_endereco_item('CODIGO_POSTAL', first_zip_code_w||last_zip_code_w, nr_seq_pessoa_endereco_w);
			exception
			when others then
                PERFORM set_config('nais_interface_pck.ds_error_w', sqlerrm || ' Error occurred while saving the address of the person ' || ds_given_name_main_w || ' .' || chr(13) || chr(10), false);
                RAISE EXCEPTION 'nais_exception_w' USING ERRCODE = '50020';
			end;


            CALL nais_interface_pck.process_physical_person_data(cd_pessoa_fisica_w, 1, regexp_replace(nr_telephone_w, '[^0-9-]', ''), regexp_replace(ds_fone_adic_w, '[^0-9-]', ''), ds_given_name_main_w);
            CALL nais_interface_pck.process_physical_person_data(cd_pessoa_fisica_w, 2, regexp_replace(work_telephone_number_w, '[^0-9-]', ''), regexp_replace(adic_phone_number_w, '[^0-9-]', ''), ds_given_name_main_w);

            if (coalesce(health_insurance_card_w::text, '') = '' or coalesce(trim(both health_insurance_card_w)::text, '') = '') then
                dt_health_card_check_w := null;
            else
                select  to_date(to_char(substr(to_char(clock_timestamp(), 'YYYY'), 1, 2)||health_insurance_card_w),'YYYYMMDD')
                into STRICT    dt_health_card_check_w
;
            end if;
            CALL nais_interface_pck.process_insurance_data(insurance_pattern_count_w, cd_pessoa_fisica_w, patient_data_p, dt_health_card_check_w);
            exception
            when SQLSTATE '50020' then
                status_p := 'N2';
                ie_status_w := 'E';
                PERFORM set_config('nais_interface_pck.ds_message_w', current_setting('nais_interface_pck.ds_error_w')::varchar(2000)||' Error occured while saving '
                                      || 'Nais Patient Information '
                                      || '. '
                                      || 'Integration name - Nais Patient Information '
                                      || 'Time of faliure : '
                                      || clock_timestamp()||' '
                                      || 'Patient Id : '
                                      || cd_person_w ||'. '
                                      || current_setting('nais_interface_pck.ds_message_w')::varchar(4000), false);
            end;
            if (current_setting('nais_interface_pck.ds_error_w')::coalesce(varchar(2000)::text, '') = '') then
                status_p := 'OK';
                ie_status_w := 'S';
                PERFORM set_config('nais_interface_pck.ds_message_w', 'Successfully saved '
                                      || 'Nais Patient Information '
                                      || '. '
                                      || 'Integration name - Nais Patient Information '
                                      || 'Time of message received : '
                                      || clock_timestamp()||' '
                                      || 'Patient Id : '
                                      || cd_person_w ||'. '
                                      || current_setting('nais_interface_pck.ds_message_w')::varchar(4000), false);
            end if;
            record_integration_call_log(current_setting('nais_interface_pck.nm_usuario_w')::varchar(20), current_setting('nais_interface_pck.nm_usuario_w')::varchar(20), clock_timestamp(), 'Nais Patient Information', 'Nais Patient Information',
                ie_status_w, 'R', null, substr(current_setting('nais_interface_pck.ds_message_w')::varchar(4000),1,499), patient_data_p, current_setting('nais_interface_pck.ds_error_w')::varchar(2000), 'Nais Patient Information', nr_seq_int_call_log_w, cd_person_w, null);

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_interface_pck.save_patient_data ( patient_data_p text, status_p INOUT text) FROM PUBLIC;
