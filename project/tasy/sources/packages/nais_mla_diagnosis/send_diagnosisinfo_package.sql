-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

    /* Procedure to send message about the disease name */

    


CREATE OR REPLACE PROCEDURE nais_mla_diagnosis.send_diagnosisinfo ( parameter_id_p bigint, ds_file_output_p INOUT text ) AS $body$
DECLARE

    parameter_sequencia_p          bigint;
    hist_count                     bigint;
    parameter_seq_interno_p        bigint;
    transaction_type               bigint;
    append_comma                   bigint;
    is_active                      varchar(1);
    nr_seq_jap_sufi_1              varchar(100);
    nr_seq_jap_sufi_2              varchar(100);
    nr_seq_jap_sufi_3              varchar(100);
    nr_seq_jap_pref_1              varchar(100);
    nr_seq_jap_pref_2              varchar(100);
    nr_seq_jap_pref_3              varchar(100);
    nr_seq_jap_sufi_1_list         varchar(100);
    nr_seq_jap_sufi_2_list         varchar(100);
    nr_seq_jap_sufi_3_list         varchar(100);
    nr_seq_jap_pref_1_list         varchar(100);
    nr_seq_jap_pref_2_list         varchar(100);
    nr_seq_jap_pref_3_list         varchar(100);
    count_codes                   bigint := 0;
    loop_count                    bigint;
    code_list                     varchar(100);
    l_len                         bigint;
    val                           varchar(1000);
    diff                          bigint;
    initial_value                 bigint;
    outcome_present               bigint;
    disease_number_count          bigint;
    disease_name                  varchar(32767);
    cd_doenca                     varchar(10);
    cd_doenca_converted           varchar(10);
    ie_side_modifier              varchar(10);
    effective_date_of_receipt     varchar(8);
    insurance_selection_number    varchar(2) := '00';
    update_date                   varchar(8);
	nr_seq_disease_number         bigint;
	nr_seq_int_call_log_w         bigint := 0;

BEGIN
    
        PERFORM set_config('nais_mla_diagnosis.json_output_w', philips_json(), false);
        PERFORM set_config('nais_mla_diagnosis.json_output_list_w', philips_json_list(), false);
        parameter_sequencia_p :=parameter_id_p;
        count_codes := 0;

        select count(nr_seq_interno) into STRICT hist_count from diagnostico_doenca_hist where nr_sequencia =parameter_sequencia_p;
        if  hist_count <> 0 then
           transaction_type :=2;
            select nr_seq_interno into STRICT parameter_seq_interno_p from diagnostico_doenca_hist where nr_sequencia =parameter_sequencia_p;
        else
         parameter_seq_interno_p :=parameter_id_p;
         select ie_situacao into STRICT is_active from diagnostico_doenca where nr_seq_interno =parameter_seq_interno_p;
         if is_active = 'I' then
            transaction_type :=3;
         else
            transaction_type :=1;
         end if;

        end if;

       --To check if need to send 2 message , if the count of disease code,prefix and suffix is more than 4 then 2 message
        select
            cd_doenca,
			nr_seq_disease_number,
            ie_side_modifier,
            nr_seq_jap_pref_1,
            nr_seq_jap_pref_2,
            nr_seq_jap_pref_3,
            nr_seq_jap_sufi_1,
            nr_seq_jap_sufi_2,
            nr_seq_jap_sufi_3,
            coalesce(to_char(dt_effective_date, 'YYYYMM'),'000000') effective_date_of_receipt,
            coalesce(to_char(DT_ATUALIZACAO, 'YYYYMMDD'),'00000000') ,
            coalesce(nais_mla_pck.get_insurance_number(nr_seq_nais_insurance), 0) insurance_selection_number,
            current_setting('nais_mla_diagnosis.nm_usuario')::varchar(20)
        into STRICT
            cd_doenca,
			nr_seq_disease_number,
            ie_side_modifier,
            nr_seq_jap_pref_1,
            nr_seq_jap_pref_2,
            nr_seq_jap_pref_3,
            nr_seq_jap_sufi_1,
            nr_seq_jap_sufi_2,
            nr_seq_jap_sufi_3,
            effective_date_of_receipt,
            update_date,
            insurance_selection_number,
            current_setting('nais_mla_diagnosis.nm_usuario')::varchar(20)
        from
            diagnostico_doenca
        where
            nr_seq_interno = parameter_seq_interno_p;

        

        if (cd_doenca IS NOT NULL AND cd_doenca::text <> '') then
            count_codes := count_codes + 1;
        end if;
		
		 if (ie_side_modifier IS NOT NULL AND ie_side_modifier::text <> '') then
            count_codes := count_codes + 1;
            code_list :=code_list || rpad(ie_side_modifier,7) || ',';
        end if;

        if (nr_seq_jap_pref_1 IS NOT NULL AND nr_seq_jap_pref_1::text <> '') then
            count_codes := count_codes + 1;
            select  nr_receipt_computer_codes
                into STRICT  nr_seq_jap_pref_1_list
                from icd_code_modifier_jpn
                where nr_modifier_mgmt_num=nr_seq_jap_pref_1;

                code_list :=code_list ||rpad(nr_seq_jap_pref_1_list,7) || ',';
            end if;
        if (nr_seq_jap_pref_2 IS NOT NULL AND nr_seq_jap_pref_2::text <> '') then
            count_codes := count_codes + 1;
             select  nr_receipt_computer_codes
            into STRICT  nr_seq_jap_pref_2_list
            from icd_code_modifier_jpn
            where nr_modifier_mgmt_num=nr_seq_jap_pref_2;

            code_list :=code_list || rpad(nr_seq_jap_pref_2_list,7) || ',';
        end if;
        if (nr_seq_jap_pref_3 IS NOT NULL AND nr_seq_jap_pref_3::text <> '') then
            count_codes := count_codes + 1;
             select nr_receipt_computer_codes
            into STRICT  nr_seq_jap_pref_3_list
            from icd_code_modifier_jpn
            where nr_modifier_mgmt_num=nr_seq_jap_pref_3;

            code_list :=code_list || rpad(nr_seq_jap_pref_3_list,7) || ',';
        end if;
		
		 if count_codes  = 5 then
			code_list :=   SUBSTR (code_list,0,(INSTR(code_list, ',', -2)) - 1);
			code_list := code_list || ',';
        end if;

        
        select count(nr_seq_disease_number)
                into STRICT disease_number_count
                 from diagnostico_doenca 
                 where nr_seq_interno=parameter_seq_interno_p and (nr_seq_disease_number IS NOT NULL AND nr_seq_disease_number::text <> '');

    if disease_number_count = 1 then
        select max(nr_receipt_computer_code)
            into STRICT cd_doenca_converted
            from icd_codes_main_jpn
            where nr_disease_number 
            in ( SELECT nr_seq_disease_number
                 from diagnostico_doenca 
                 where nr_seq_interno=parameter_seq_interno_p);
    else
            cd_doenca_converted:= null;

    end if;
        code_list := code_list || rpad(coalesce(cd_doenca_converted,cd_doenca),7) || ',';

        
        if (nr_seq_jap_sufi_1 IS NOT NULL AND nr_seq_jap_sufi_1::text <> '') then
            count_codes := count_codes + 1;
             select nr_receipt_computer_codes
            into STRICT  nr_seq_jap_sufi_1_list
            from icd_code_modifier_jpn
            where nr_modifier_mgmt_num=nr_seq_jap_sufi_1;
            code_list := code_list || rpad(nr_seq_jap_sufi_1_list,7) || ',';

        end if;
        if (nr_seq_jap_sufi_2 IS NOT NULL AND nr_seq_jap_sufi_2::text <> '') then
            count_codes := count_codes + 1;
             select nr_receipt_computer_codes
            into STRICT  nr_seq_jap_sufi_2_list
            from icd_code_modifier_jpn
            where nr_modifier_mgmt_num=nr_seq_jap_sufi_2;
            code_list := code_list || rpad(nr_seq_jap_sufi_2_list,7) || ',';

        end if;
        if (nr_seq_jap_sufi_3 IS NOT NULL AND nr_seq_jap_sufi_3::text <> '') then
            count_codes := count_codes + 1;
            select nr_receipt_computer_codes
            into STRICT  nr_seq_jap_sufi_3_list
            from icd_code_modifier_jpn
            where nr_modifier_mgmt_num=nr_seq_jap_sufi_3;
            code_list := code_list || rpad(nr_seq_jap_sufi_3_list,7) || ',';

        end if;

        loop_count := ceil(count_codes / 4);
        if disease_number_count <> 1 then
			disease_name :=  replace(get_desc_modify_disease(trim(both cd_doenca), ie_side_modifier, trim(both nr_seq_jap_pref_1), trim(both nr_seq_jap_pref_2), trim(both nr_seq_jap_pref_3),trim(both nr_seq_jap_sufi_1), trim(both nr_seq_jap_sufi_2), trim(both nr_seq_jap_sufi_3)),CHR(14846098),'$$');
        else
			disease_name :=  replace(get_desc_modify_disease_epc(''||trim(both nr_seq_disease_number), ie_side_modifier, trim(both nr_seq_jap_pref_1), trim(both nr_seq_jap_pref_2), trim(both nr_seq_jap_pref_3),trim(both nr_seq_jap_sufi_1), trim(both nr_seq_jap_sufi_2), trim(both nr_seq_jap_sufi_3)),CHR(14846098),'$$');
        end if;

        diff := 4;

       
        if count_codes < 4 then
         append_comma := 4-count_codes;
         FOR r IN 1..append_comma LOOP
            code_list := code_list || ',' || rpad(' ',7);
          END LOOP;
        end if;

    
        for i in 1..loop_count loop begin
            if i = 1 then
                select
                    instr(code_list, ',', 1, diff)
                into STRICT l_len
;

                initial_value := l_len - 1;
                select
                    substr(code_list, 0, l_len - 1)
                into STRICT val
;

            else
                diff := diff + 4;
                select
                    instr(code_list, ',', 1, diff)
                into STRICT l_len
;

                if l_len = 0 then
                    select
                        substr(code_list, initial_value + 1, length(code_list) - initial_value + 1)
                    into STRICT val
;

                else
                    select
                        substr(code_list, initial_value, l_len - initial_value)
                    into STRICT val
;

                end if;

                initial_value := l_len - 1;

            end if;

            CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.nais_common_header('BO', parameter_seq_interno_p, '0'||transaction_type, 'E', '1',
                               576, transaction_type,current_setting('nais_mla_diagnosis.nm_usuario')::varchar(20));
            CALL CALL nais_mla_diagnosis.nais_common_body(parameter_seq_interno_p, transaction_type,parameter_sequencia_p);
            if i = 1 and loop_count > 1 then
                select
                    regexp_replace(current_setting('nais_mla_diagnosis.ds_line_w')::varchar(32767), '[^,]', 'C', 9, 1)
                into STRICT current_setting('nais_mla_diagnosis.ds_line_w')::varchar(32767)
;

            end if;

            if coalesce(val::text, '') = '' then
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(' ', 28, 'R', ' ');
            else
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(replace(val, ',', ''), 28, 'R', ' ');
            end if;

            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(current_setting('nais_mla_diagnosis.shift_in')::varchar(1), 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(disease_name, 200,'R',' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(current_setting('nais_mla_diagnosis.shift_out')::varchar(1), 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(insurance_selection_number, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(effective_date_of_receipt, 6, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(' ', 96, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(current_setting('nais_mla_diagnosis.shift_in')::varchar(1), 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(' ', 100, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(current_setting('nais_mla_diagnosis.shift_out')::varchar(1), 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(update_date, 8, 'R', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(' ', 8, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(' ', 9, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_diagnosis.append_text(chr(13), 1, 'R', ' ');
            current_setting('nais_mla_diagnosis.json_output_w')::philips_json := nais_mla_diagnosis.add_json_value(current_setting('nais_mla_diagnosis.json_output_w')::philips_json, 'message', replace(current_setting('nais_mla_diagnosis.ds_line_w')::varchar(32767),'$$',CHR(14846098)));
            current_setting('nais_mla_diagnosis.json_output_list_w')::philips_json_list.append(current_setting('nais_mla_diagnosis.json_output_w')::philips_json.to_json_value());
        end;
        end loop;

        dbms_lob.createtemporary(ds_file_output_p, true);
        current_setting('nais_mla_diagnosis.json_output_list_w')::philips_json_list.(ds_file_output_p);

        
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_diagnosis.send_diagnosisinfo ( parameter_id_p bigint, ds_file_output_p INOUT text ) FROM PUBLIC;
