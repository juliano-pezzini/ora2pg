-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_utilizacao_benef_pck.gerar_atendimentos_util ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera e grava na tabela os dados da utilizacao do beneficiario (atendimento)
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

	Essa rotina devera fazer a abertura do cursor com as informacoes a serem gravadas
	da utilizacao e persistir as informacoes.
	
	Os atendimentos serao gerados em 2 etapas. A primeira com base em procedimentos, 
	e a outra para somente materiais.
	
	A primeira e a "padrao" da RN, onde e exibido apenas os procedimentos, e os materiais
	do atendimento sao considerados no valor, mas nao sao exibidos.
	
	A segunda e para atender a situacoes especificas onde e permitido ter um atendimento
	que seja somente "Materiais". Por exemplo, uma quimioterapia onde a medicacao e toda
	oral, nesta situacao a operadora fornece o medicamento e entrega para o beneficiario,
	sem que o mesmo realize uma consulta para buscar. Nesta situacao o atendimento todo
	(cd_guia_ok e nr_seq_beneficiario) ficam completamente sem procedimentos.
	
	Nestes casos pontuais o material devera compor a utilizacao e ser exibido.
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
-- Tabelas de carga
nr_sequencia_w		pls_util_cta_pck.t_number_table;
cd_procedimento_w	pls_util_cta_pck.t_number_table;
ie_origem_proced_w	pls_util_cta_pck.t_number_table;
qt_utilizacao_w		pls_util_cta_pck.t_number_table;
vl_utilizacao_w		pls_util_cta_pck.t_number_table;
dt_realizacao_w		pls_util_cta_pck.t_date_table;
nr_seq_prestador_w	pls_util_cta_pck.t_number_table;
cd_medico_w		pls_util_cta_pck.t_varchar2_table_10;
nr_cpf_w		pls_util_cta_pck.t_varchar2_table_15;
cd_cgc_w		pls_util_cta_pck.t_varchar2_table_15;
cd_cbo_w		pls_util_cta_pck.t_varchar2_table_20;
nr_seq_cbo_saude_w	pls_util_cta_pck.t_number_table;
nr_seq_cbo_saude_p	pls_util_cta_pck.t_number_table;
cd_municipio_ibge_w	pls_util_cta_pck.t_varchar2_table_10;
dt_inicio_faturamento_w	pls_util_cta_pck.t_date_table;
dt_fim_faturamento_w	pls_util_cta_pck.t_date_table;
nr_seq_saida_int_w	pls_util_cta_pck.t_number_table;
nr_seq_saida_spsadt_w	pls_util_cta_pck.t_number_table;
ie_grupo_ans_w		pls_util_cta_pck.t_varchar2_table_10;
nr_seq_segurado_w	pls_util_cta_pck.t_number_table;
cd_guia_ok_w		pls_util_cta_pck.t_varchar2_table_20;
nr_seq_titular_w	pls_util_cta_pck.t_number_table;
nr_seq_material_w	pls_util_cta_pck.t_number_table;

-- dados do cursor para atendimentos com procedimentos
cur_util_w		sql_pck.t_cursor;
dado_bind_w		sql_pck.t_dado_bind;
sql_cur_util_w		varchar(32000) :='';

-- dados do cursor para atendimentos de materiais
cur_util_mat_w		sql_pck.t_cursor;
dado_bind_mat_w		sql_pck.t_dado_bind;
sql_cur_util_mat_w	varchar(32000) :='';


BEGIN

-- Busca o sql para os atendimentos que possuirem apenas procedimentos ( os materiais serao adicionados mais tarde)
sql_cur_util_w := retorna_sql_util_benef(param_util_p, regra_util_p, dado_bind_w, 'P');

-- Executa o cursor
dado_bind_w := sql_pck.executa_sql_cursor(sql_cur_util_w, dado_bind_w);

-- Se Abriu corretamente o cursor
if (cur_util_w%isopen) then

	-- Todo o processo sera dentro de um bloco protegido por exception, 
	begin
		loop
			fetch cur_util_w bulk collect into	nr_sequencia_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								qt_utilizacao_w,
								vl_utilizacao_w,
								dt_realizacao_w,
								nr_seq_prestador_w,
								cd_medico_w,
								nr_cpf_w,
								cd_cgc_w,
								cd_cbo_w,
								nr_seq_cbo_saude_w,
								cd_municipio_ibge_w,
								dt_inicio_faturamento_w,
								dt_fim_faturamento_w,
								nr_seq_saida_int_w,
								nr_seq_saida_spsadt_w,
								ie_grupo_ans_w,
								nr_seq_segurado_w,
								cd_guia_ok_w,
								nr_seq_titular_w,
								nr_seq_material_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_utilizacao_benef(nr_sequencia_w, cd_procedimento_w, ie_origem_proced_w, qt_utilizacao_w, vl_utilizacao_w, dt_realizacao_w, nr_seq_prestador_w, cd_medico_w, nr_cpf_w, cd_cgc_w, cd_cbo_w, nr_seq_cbo_saude_w, cd_municipio_ibge_w, dt_inicio_faturamento_w, dt_fim_faturamento_w, nr_seq_saida_int_w, nr_seq_saida_spsadt_w, ie_grupo_ans_w, nr_seq_segurado_w, cd_guia_ok_w, nr_seq_titular_w, nr_seq_material_w, regra_util_p.nm_usuario, regra_util_p.cd_estabelecimento, regra_util_p.nr_id_transacao, 'S', 'S') INTO STRICT _ora2pg_r;
 nr_sequencia_w := _ora2pg_r.nr_sequencia_p; cd_procedimento_w := _ora2pg_r.cd_procedimento_p; ie_origem_proced_w := _ora2pg_r.ie_origem_proced_p; qt_utilizacao_w := _ora2pg_r.qt_utilizacao_p; vl_utilizacao_w := _ora2pg_r.vl_utilizacao_p; dt_realizacao_w := _ora2pg_r.dt_realizacao_p; nr_seq_prestador_w := _ora2pg_r.nr_seq_prestador_p; cd_medico_w := _ora2pg_r.cd_medico_p; nr_cpf_w := _ora2pg_r.nr_cpf_p; cd_cgc_w := _ora2pg_r.cd_cgc_p; cd_cbo_w := _ora2pg_r.cd_cbo_p; nr_seq_cbo_saude_w := _ora2pg_r.nr_seq_cbo_saude_p; cd_municipio_ibge_w := _ora2pg_r.cd_municipio_ibge_p; dt_inicio_faturamento_w := _ora2pg_r.dt_inicio_faturamento_p; dt_fim_faturamento_w := _ora2pg_r.dt_fim_faturamento_p; nr_seq_saida_int_w := _ora2pg_r.nr_seq_saida_int_p; nr_seq_saida_spsadt_w := _ora2pg_r.nr_seq_saida_spsadt_p; ie_grupo_ans_w := _ora2pg_r.ie_grupo_ans_p; nr_seq_segurado_w := _ora2pg_r.nr_seq_segurado_p; cd_guia_ok_w := _ora2pg_r.cd_guia_ok_p; nr_seq_titular_w := _ora2pg_r.nr_seq_titular_p; nr_seq_material_w := _ora2pg_r.nr_seq_material_p;
		end loop; -- fim bulk collect
		
		close cur_util_w;

	exception
		when others then
			
			-- se o cursor ainda estiver aberto, tenta fechar ele
			if (cur_util_w%isopen) then
			
				close cur_util_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if;


-- Carrega agora os atendimentos que serao baseados em MATERIAIS apenas.
sql_cur_util_mat_w := retorna_sql_util_benef(param_util_p, regra_util_p, dado_bind_mat_w, 'M');

-- Executa o cursor
dado_bind_mat_w := sql_pck.executa_sql_cursor(sql_cur_util_mat_w, dado_bind_mat_w);


-- Se Abriu corretamente o cursor
if (cur_util_mat_w%isopen) then

	-- Todo o processo sera dentro de um bloco protegido por exception, 
	begin
		loop
			fetch cur_util_mat_w bulk collect into	nr_sequencia_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								qt_utilizacao_w,
								vl_utilizacao_w,
								dt_realizacao_w,
								nr_seq_prestador_w,
								cd_medico_w,
								nr_cpf_w,
								cd_cgc_w,
								cd_cbo_w,
								nr_seq_cbo_saude_w,
								cd_municipio_ibge_w,
								dt_inicio_faturamento_w,
								dt_fim_faturamento_w,
								nr_seq_saida_int_w,
								nr_seq_saida_spsadt_w,
								ie_grupo_ans_w,
								nr_seq_segurado_w,
								cd_guia_ok_w,
								nr_seq_titular_w,
								nr_seq_material_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_utilizacao_benef(nr_sequencia_w, cd_procedimento_w, ie_origem_proced_w, qt_utilizacao_w, vl_utilizacao_w, dt_realizacao_w, nr_seq_prestador_w, cd_medico_w, nr_cpf_w, cd_cgc_w, cd_cbo_w, nr_seq_cbo_saude_w, cd_municipio_ibge_w, dt_inicio_faturamento_w, dt_fim_faturamento_w, nr_seq_saida_int_w, nr_seq_saida_spsadt_w, ie_grupo_ans_w, nr_seq_segurado_w, cd_guia_ok_w, nr_seq_titular_w, nr_seq_material_w, regra_util_p.nm_usuario, regra_util_p.cd_estabelecimento, regra_util_p.nr_id_transacao, 'S', 'S') INTO STRICT _ora2pg_r;
 nr_sequencia_w := _ora2pg_r.nr_sequencia_p; cd_procedimento_w := _ora2pg_r.cd_procedimento_p; ie_origem_proced_w := _ora2pg_r.ie_origem_proced_p; qt_utilizacao_w := _ora2pg_r.qt_utilizacao_p; vl_utilizacao_w := _ora2pg_r.vl_utilizacao_p; dt_realizacao_w := _ora2pg_r.dt_realizacao_p; nr_seq_prestador_w := _ora2pg_r.nr_seq_prestador_p; cd_medico_w := _ora2pg_r.cd_medico_p; nr_cpf_w := _ora2pg_r.nr_cpf_p; cd_cgc_w := _ora2pg_r.cd_cgc_p; cd_cbo_w := _ora2pg_r.cd_cbo_p; nr_seq_cbo_saude_w := _ora2pg_r.nr_seq_cbo_saude_p; cd_municipio_ibge_w := _ora2pg_r.cd_municipio_ibge_p; dt_inicio_faturamento_w := _ora2pg_r.dt_inicio_faturamento_p; dt_fim_faturamento_w := _ora2pg_r.dt_fim_faturamento_p; nr_seq_saida_int_w := _ora2pg_r.nr_seq_saida_int_p; nr_seq_saida_spsadt_w := _ora2pg_r.nr_seq_saida_spsadt_p; ie_grupo_ans_w := _ora2pg_r.ie_grupo_ans_p; nr_seq_segurado_w := _ora2pg_r.nr_seq_segurado_p; cd_guia_ok_w := _ora2pg_r.cd_guia_ok_p; nr_seq_titular_w := _ora2pg_r.nr_seq_titular_p; nr_seq_material_w := _ora2pg_r.nr_seq_material_p;
		end loop; -- fim bulk collect
		
		
		close cur_util_mat_w;
		
		
	exception
		when others then
			
			-- se o cursor ainda estiver aberto, tenta fechar ele
			if (cur_util_mat_w%isopen) then
			
				close cur_util_mat_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_utilizacao_benef_pck.gerar_atendimentos_util ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) FROM PUBLIC;
