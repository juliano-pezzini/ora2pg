-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_utilizacao_benef_pck.gerar_itens_util_benef ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Cria os itens de cada atendimento da utilizacao do beneficiario
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

	Quando esta rotina deve ser chamada, os "Atendimentos" da utilizacao ja devem
	estar formados, entao serao levantados os seus respectivos itens
	
	
	A geracao dos itens acontecera na seguintes etapas
	
	1 - Geracao dos procedimentos dos atendimentos diferentes de internacao, vinculando os procedimentos por:
		a) cd_guia_ok
		b) nr_seq_segurado
		c) ie_grupo_ans
		d) cd_procedimento
		e) ie_origem_proced
		f) dt_procedimento
		
	2 - Geracao dos itens de internacao, vinculados por 
		a) cd_guia_ok
		b) nr_seq_segurado
	
	3 - Determinacao dos procedimentos principal para as internacoes
	
	4 - Geracao dos materiais, onde serao atribuidos ao procedimento principal da internacao, ou 
	nos demais atendimentos, no procedimento mais caro
	
	5 - Atualizacao dos valores dos atendimentos, acumulando agora os materiais
	
	Esta rotina nao deve gravar nenhum dado por si, e sim chamar as rotinas que realizam essa tarefa.
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
-- Dados do cursor de itens que nao seja internacao
cur_itens_util_w	sql_pck.t_cursor;
dado_bind_w		sql_pck.t_dado_bind;
sql_cur_itens_util_w	varchar(32000) :='';

-- Dados do cursor de itens especificos de internacao
cur_itens_internacao_w		sql_pck.t_cursor;
dado_bind_internacao_w		sql_pck.t_dado_bind;
sql_cur_itens_internacao_w	varchar(32000) :='';

-- tabelas para carregar os itens
nr_sequencia_w		pls_util_cta_pck.t_number_table;
nr_seq_util_benef_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_proc_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_mat_w	pls_util_cta_pck.t_number_table;
qt_item_w		pls_util_cta_pck.t_number_table;
vl_item_w		pls_util_cta_pck.t_number_table;
nr_seq_grupo_ans_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_rec_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_proc_rec_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_mat_rec_w	pls_util_cta_pck.t_number_table;


BEGIN

--Comeca fazendo os atendimentos diferentes de internacao
-- Carrega o sql para os itens
SELECT * FROM pls_utilizacao_benef_pck.retornar_sql_itens_util(param_util_p, regra_util_p, dado_bind_w, 'P', 'DI') INTO STRICT _ora2pg_r;
 param_util_p := _ora2pg_r.param_util_p; regra_util_p := _ora2pg_r.regra_util_p; dado_bind_w := _ora2pg_r.dado_bind_p;

-- Executa o cursor
dado_bind_w := sql_pck.executa_sql_cursor(sql_cur_itens_util_w, dado_bind_w);

-- Se abriu corretamente o cursor
if (cur_itens_util_w%isopen) then

	begin
		
		loop
			fetch cur_itens_util_w bulk collect into	nr_sequencia_w,
									nr_seq_util_benef_w,
									nr_seq_conta_w,
									nr_seq_conta_proc_w,
									nr_seq_conta_mat_w,
									qt_item_w,
									vl_item_w,
									nr_seq_grupo_ans_w,
									nr_seq_conta_rec_w,
									nr_seq_conta_proc_rec_w,
									nr_seq_conta_mat_rec_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_dados_itens_util(	nr_sequencia_w, nr_seq_util_benef_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, qt_item_w, vl_item_w, nr_seq_grupo_ans_w, nr_seq_conta_rec_w, nr_seq_conta_proc_rec_w, nr_seq_conta_mat_rec_w, regra_util_p.nm_usuario, 'S', 'S') INTO STRICT _ora2pg_r;
 	nr_sequencia_w := _ora2pg_r.nr_sequencia_p; nr_seq_util_benef_w := _ora2pg_r.nr_seq_util_benef_p; nr_seq_conta_w := _ora2pg_r.nr_seq_conta_p; nr_seq_conta_proc_w := _ora2pg_r.nr_seq_conta_proc_p; nr_seq_conta_mat_w := _ora2pg_r.nr_seq_conta_mat_p; qt_item_w := _ora2pg_r.qt_item_p; vl_item_w := _ora2pg_r.vl_item_p; nr_seq_grupo_ans_w := _ora2pg_r.nr_seq_grupo_ans_p; nr_seq_conta_rec_w := _ora2pg_r.nr_seq_conta_rec_p; nr_seq_conta_proc_rec_w := _ora2pg_r.nr_seq_conta_proc_rec_p; nr_seq_conta_mat_rec_w := _ora2pg_r.nr_seq_conta_mat_rec_p;
		end loop;
		
		
		close cur_itens_util_w;
	exception
		when others then
		
			-- Se o cursor ainda esta aberto, fecha ele
			if (cur_itens_util_w%isopen) then
			
				close cur_itens_util_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if; -- Fim se abriu corretamente
-- Carrega os itens de internacao
SELECT * FROM pls_utilizacao_benef_pck.retornar_sql_itens_util(param_util_p, regra_util_p, dado_bind_internacao_w, 'P', 'SI') INTO STRICT _ora2pg_r;
 param_util_p := _ora2pg_r.param_util_p; regra_util_p := _ora2pg_r.regra_util_p; dado_bind_internacao_w := _ora2pg_r.dado_bind_p;

-- Executa o cursor
dado_bind_internacao_w := sql_pck.executa_sql_cursor(sql_cur_itens_internacao_w, dado_bind_internacao_w);

-- Se abriu corretamente o cursor
if (cur_itens_internacao_w%isopen) then

	begin
		
		loop
			fetch cur_itens_internacao_w bulk collect into	nr_sequencia_w,
									nr_seq_util_benef_w,
									nr_seq_conta_w,
									nr_seq_conta_proc_w,
									nr_seq_conta_mat_w,
									qt_item_w,
									vl_item_w,
									nr_seq_grupo_ans_w,
									nr_seq_conta_rec_w,
									nr_seq_conta_proc_rec_w,
									nr_seq_conta_mat_rec_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_dados_itens_util(	nr_sequencia_w, nr_seq_util_benef_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, qt_item_w, vl_item_w, nr_seq_grupo_ans_w, nr_seq_conta_rec_w, nr_seq_conta_proc_rec_w, nr_seq_conta_mat_rec_w, regra_util_p.nm_usuario, 'S', 'S') INTO STRICT _ora2pg_r;
 	nr_sequencia_w := _ora2pg_r.nr_sequencia_p; nr_seq_util_benef_w := _ora2pg_r.nr_seq_util_benef_p; nr_seq_conta_w := _ora2pg_r.nr_seq_conta_p; nr_seq_conta_proc_w := _ora2pg_r.nr_seq_conta_proc_p; nr_seq_conta_mat_w := _ora2pg_r.nr_seq_conta_mat_p; qt_item_w := _ora2pg_r.qt_item_p; vl_item_w := _ora2pg_r.vl_item_p; nr_seq_grupo_ans_w := _ora2pg_r.nr_seq_grupo_ans_p; nr_seq_conta_rec_w := _ora2pg_r.nr_seq_conta_rec_p; nr_seq_conta_proc_rec_w := _ora2pg_r.nr_seq_conta_proc_rec_p; nr_seq_conta_mat_rec_w := _ora2pg_r.nr_seq_conta_mat_rec_p;
		end loop;
		
		close cur_itens_internacao_w;
	exception
		when others then
		
			-- Se o cursor ainda esta aberto, fecha ele
			if (cur_itens_internacao_w%isopen) then
			
				close cur_itens_internacao_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if; -- Fim se abriu corretamente as internacoes
-- Determina os procedimentos principais das internacoes
regra_util_p := pls_utilizacao_benef_pck.gera_proc_princ_util_benef(regra_util_p);

-- Gera os materiais
SELECT * FROM pls_utilizacao_benef_pck.gerar_mat_util_benef(param_util_p, regra_util_p) INTO STRICT _ora2pg_r;
 param_util_p := _ora2pg_r.param_util_p; regra_util_p := _ora2pg_r.regra_util_p;

-- Atualiza os valores
regra_util_p := pls_utilizacao_benef_pck.atualizar_val_item_atend(regra_util_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_utilizacao_benef_pck.gerar_itens_util_benef ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) FROM PUBLIC;
