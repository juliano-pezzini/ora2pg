-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_utilizacao_benef_pck.gerar_mat_util_benef ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Cria os materias de cada atendimento da utilizacao do beneficiario
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [ ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

	Quando esta rotina deve ser chamada, os "Atendimentos" da utilizacao ja devem
	estar formados, entao serao levantados os seus respectivos itens.
	
	Tambem ja devem estar definidos os procedimentos principais de cada atendimento do tipo internacao
	
	Existem casos onde nao existem procedimentos, nesta situacao os atendimento para "materiais" apenas
	ja estao criados, apenas e preciso "detalhar" com os itens. Portanto e gerado os itens 2 vezes, 
	
	Esta rotina nao deve gravar nenhum dado por si, e sim chamar as rotinas que realizam essa tarefa.
Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
-- dados do cursor
ds_sql_mat_w	varchar(32000) := '';
dado_bind_w	sql_pck.t_dado_bind;
cur_mat_w	sql_pck.t_cursor;


-- dados do cursor somente atendimento de materiais
ds_sql_atend_mat_w	varchar(32000) := '';
dado_bind_atend_mat_w	sql_pck.t_dado_bind;
cur_atend_mat_w		sql_pck.t_cursor;

-- tabelas para carregar os itens
nr_sequencia_w		pls_util_cta_pck.t_number_table;
nr_seq_util_benef_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_proc_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_mat_w	pls_util_cta_pck.t_number_table;
qt_item_w		pls_util_cta_pck.t_number_table;
vl_item_w		pls_util_cta_pck.t_number_table;
nr_seq_grupo_ans_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_rec_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_proc_rec_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_mat_rec_w	pls_util_cta_pck.t_number_table;


BEGIN

-- Pega o sql dos materiais que possuem procedimentos
SELECT * FROM pls_utilizacao_benef_pck.retornar_sql_mat_util(param_util_p, regra_util_p, dado_bind_w, 'PM') INTO STRICT _ora2pg_r;
 param_util_p := _ora2pg_r.param_util_p; regra_util_p := _ora2pg_r.regra_util_p; dado_bind_w := _ora2pg_r.dado_bind_p;

-- Executa o cursor
dado_bind_w := sql_pck.executa_sql_cursor(ds_sql_mat_w, dado_bind_w);


-- Se Abriu corretamente o cursor
if (cur_mat_w%isopen) then
	begin
		loop
			fetch cur_mat_w bulk collect into	nr_sequencia_w,
								nr_seq_util_benef_w,
								nr_seq_conta_w,
								nr_seq_conta_proc_w,
								nr_seq_conta_mat_w,
								qt_item_w,
								vl_item_w,
								nr_seq_grupo_ans_w,
								nr_seq_conta_rec_w,
								nr_seq_conta_proc_rec_w,
								nr_seq_conta_mat_rec_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_dados_itens_util(	nr_sequencia_w, nr_seq_util_benef_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, qt_item_w, vl_item_w, nr_seq_grupo_ans_w, nr_seq_conta_rec_w, nr_seq_conta_proc_rec_w, nr_seq_conta_mat_rec_w, regra_util_p.nm_usuario, 'S', 'S') INTO STRICT _ora2pg_r;
 	nr_sequencia_w := _ora2pg_r.nr_sequencia_p; nr_seq_util_benef_w := _ora2pg_r.nr_seq_util_benef_p; nr_seq_conta_w := _ora2pg_r.nr_seq_conta_p; nr_seq_conta_proc_w := _ora2pg_r.nr_seq_conta_proc_p; nr_seq_conta_mat_w := _ora2pg_r.nr_seq_conta_mat_p; qt_item_w := _ora2pg_r.qt_item_p; vl_item_w := _ora2pg_r.vl_item_p; nr_seq_grupo_ans_w := _ora2pg_r.nr_seq_grupo_ans_p; nr_seq_conta_rec_w := _ora2pg_r.nr_seq_conta_rec_p; nr_seq_conta_proc_rec_w := _ora2pg_r.nr_seq_conta_proc_rec_p; nr_seq_conta_mat_rec_w := _ora2pg_r.nr_seq_conta_mat_rec_p;
		end loop;
		
		
		close cur_mat_w;
	
	exception
	
		when others then
			
			-- se o cursor ainda estiver aberto, tenta fechar ele
			if (cur_mat_w%isopen) then
			
				close cur_mat_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if;

-- Gera agora os itens dos atendimentos que sao apenas compostos por materiais
SELECT * FROM pls_utilizacao_benef_pck.retornar_sql_mat_util(param_util_p, regra_util_p, dado_bind_atend_mat_w, 'SM') INTO STRICT _ora2pg_r;
 param_util_p := _ora2pg_r.param_util_p; regra_util_p := _ora2pg_r.regra_util_p; dado_bind_atend_mat_w := _ora2pg_r.dado_bind_p;

-- Executa o cursor
dado_bind_atend_mat_w := sql_pck.executa_sql_cursor(ds_sql_atend_mat_w, dado_bind_atend_mat_w);


-- Se Abriu corretamente o cursor
if (cur_atend_mat_w%isopen) then

	begin
	
		loop
			fetch cur_atend_mat_w bulk collect into	nr_sequencia_w,
								nr_seq_util_benef_w,
								nr_seq_conta_w,
								nr_seq_conta_proc_w,
								nr_seq_conta_mat_w,
								qt_item_w,
								vl_item_w,
								nr_seq_grupo_ans_w,
								nr_seq_conta_rec_w,
								nr_seq_conta_proc_rec_w,
								nr_seq_conta_mat_rec_w limit pls_util_pck.qt_registro_transacao_w;
			exit when nr_sequencia_w.count = 0;
			
			SELECT * FROM pls_utilizacao_benef_pck.gravar_dados_itens_util(	nr_sequencia_w, nr_seq_util_benef_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, qt_item_w, vl_item_w, nr_seq_grupo_ans_w, nr_seq_conta_rec_w, nr_seq_conta_proc_rec_w, nr_seq_conta_mat_rec_w, regra_util_p.nm_usuario, 'S', 'S') INTO STRICT _ora2pg_r;
 	nr_sequencia_w := _ora2pg_r.nr_sequencia_p; nr_seq_util_benef_w := _ora2pg_r.nr_seq_util_benef_p; nr_seq_conta_w := _ora2pg_r.nr_seq_conta_p; nr_seq_conta_proc_w := _ora2pg_r.nr_seq_conta_proc_p; nr_seq_conta_mat_w := _ora2pg_r.nr_seq_conta_mat_p; qt_item_w := _ora2pg_r.qt_item_p; vl_item_w := _ora2pg_r.vl_item_p; nr_seq_grupo_ans_w := _ora2pg_r.nr_seq_grupo_ans_p; nr_seq_conta_rec_w := _ora2pg_r.nr_seq_conta_rec_p; nr_seq_conta_proc_rec_w := _ora2pg_r.nr_seq_conta_proc_rec_p; nr_seq_conta_mat_rec_w := _ora2pg_r.nr_seq_conta_mat_rec_p;
		end loop;
		
		
		close cur_atend_mat_w;
	
	exception
	
		when others then
			
			-- se o cursor ainda estiver aberto, tenta fechar ele
			if (cur_atend_mat_w%isopen) then
			
				close cur_atend_mat_w;
			end if;
			
			CALL CALL pls_utilizacao_benef_pck.exibe_msg_erro_padrao();
	end;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_utilizacao_benef_pck.gerar_mat_util_benef ( param_util_p INOUT param_utilizacao_benef, regra_util_p INOUT regra_utilizacao_benef) FROM PUBLIC;
