-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




CREATE OR REPLACE PROCEDURE pls_gerenciar_reembolso_pck.gerencia_aplicacao_filtro ( dados_consistencia_p pls_gerenciar_reembolso_pck.dados_consistencia, dados_regra_p pls_gerenciar_reembolso_pck.dados_regra, nr_id_transacao_p pls_def_reemb_selecao.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, qt_registro_p INOUT integer) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gravar em uma tabela as contas/itens que se apliquem nos combinacoes de filtros de reembolso. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


qt_registro_w		integer;
dados_filtro_w		pls_gerenciar_reembolso_pck.dados_filtro;
ie_select_w		varchar(1);

c_reemb_filtro CURSOR(nr_seq_regra_pc	pls_regra_reembolso.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_filtro,
		a.nm_filtro,
		a.ie_filtro_benef,
		a.ie_filtro_atend,
		a.ie_filtro_proc,
		a.ie_filtro_mat,
		a.ie_filtro_qtd
	from	pls_regra_reemb_filtro a
	where	a.nr_seq_regra	= nr_seq_regra_pc
	and	a.ie_situacao	= 'A'
	order by  a.ie_filtro_proc,
		  a.ie_filtro_mat;
	
BEGIN

qt_registro_w	:= 0;

if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then	
	for r_c_reemb_filtro in c_reemb_filtro(dados_regra_p.nr_sequencia) loop
		
		dados_filtro_w.nr_sequencia		:= r_c_reemb_filtro.nr_seq_filtro;
		dados_filtro_w.nm_filtro		:= r_c_reemb_filtro.nm_filtro;
		dados_filtro_w.ie_filtro_benef		:= r_c_reemb_filtro.ie_filtro_benef;
		dados_filtro_w.ie_filtro_atend		:= r_c_reemb_filtro.ie_filtro_atend;
		dados_filtro_w.ie_filtro_proc		:= r_c_reemb_filtro.ie_filtro_proc;
		dados_filtro_w.ie_filtro_mat		:= r_c_reemb_filtro.ie_filtro_mat;
		dados_filtro_w.ie_filtro_qtd		:= r_c_reemb_filtro.ie_filtro_qtd;
		
		-- Feito esse tratamento de inicializar com -1 porque se retornar zero significa que nao tem registros no filtro aplicado e portanto devera parar de executar

		qt_registro_w := -1;
		
		/* Verificar se vai ser executado um select so ou dois e qual select */


		if (coalesce(dados_filtro_w.ie_filtro_proc,'N') = 'N') and (coalesce(dados_filtro_w.ie_filtro_mat,'N') = 'N') then
			ie_select_w	:= 'A';
		elsif (dados_filtro_w.ie_filtro_proc = 'S') then
			ie_select_w	:= 'P';
		elsif (dados_filtro_w.ie_filtro_mat = 'S') then
			ie_select_w	:= 'M';
		end if;
						
		-- Atendimento

		if (dados_filtro_w.ie_filtro_atend = 'S' and (qt_registro_w = -1 or qt_registro_w > 0)) then
			CALL pls_gerenciar_reembolso_pck.aplica_filtro_atendimento(	dados_regra_p, dados_filtro_w, dados_consistencia_p,
							nr_id_transacao_p, ie_select_w, cd_estabelecimento_p, nm_usuario_p);
			qt_registro_w := pls_gerenciar_reembolso_pck.obter_qtde_reg_valido_filtro(nr_id_transacao_p, dados_filtro_w);
		end if;
					
		-- Beneficiario

		if (dados_filtro_w.ie_filtro_benef = 'S' and (qt_registro_w = -1 or qt_registro_w > 0)) then
			
			CALL CALL pls_gerenciar_reembolso_pck.aplica_filtro_beneficiario(	dados_regra_p, dados_filtro_w, dados_consistencia_p,
							nr_id_transacao_p,ie_select_w, cd_estabelecimento_p, nm_usuario_p);
			qt_registro_w := pls_gerenciar_reembolso_pck.obter_qtde_reg_valido_filtro(nr_id_transacao_p, dados_filtro_w);
		end if;
		
		-- Procedimento

		if (dados_filtro_w.ie_filtro_proc = 'S' and (qt_registro_w = -1 or qt_registro_w > 0))  then
			CALL CALL pls_gerenciar_reembolso_pck.aplica_filtro_procedimento(	dados_regra_p, dados_filtro_w, dados_consistencia_p,
							nr_id_transacao_p,ie_select_w, cd_estabelecimento_p, nm_usuario_p);
			qt_registro_w := pls_gerenciar_reembolso_pck.obter_qtde_reg_valido_filtro(nr_id_transacao_p, dados_filtro_w);
		end if;		
		
		-- Material

		if (dados_filtro_w.ie_filtro_mat = 'S' and (qt_registro_w = -1 or qt_registro_w > 0))  then
			CALL CALL pls_gerenciar_reembolso_pck.aplica_filtro_material(		dados_regra_p, dados_filtro_w, dados_consistencia_p,
							nr_id_transacao_p,ie_select_w, cd_estabelecimento_p, nm_usuario_p);
			qt_registro_w := pls_gerenciar_reembolso_pck.obter_qtde_reg_valido_filtro(nr_id_transacao_p, dados_filtro_w);
		end if;
		
		-- Quantidade

		if (dados_filtro_w.ie_filtro_qtd = 'S' and (qt_registro_w = -1 or qt_registro_w > 0))  then
			CALL pls_gerenciar_reembolso_pck.aplica_filtro_quantidade(	dados_regra_p, dados_filtro_w, dados_consistencia_p,
							nr_id_transacao_p,ie_select_w, cd_estabelecimento_p, nm_usuario_p);
			qt_registro_w := pls_gerenciar_reembolso_pck.obter_qtde_reg_valido_filtro(nr_id_transacao_p, dados_filtro_w);
		end if;	
		
	end loop;
end if;

qt_registro_p	:= qt_registro_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerenciar_reembolso_pck.gerencia_aplicacao_filtro ( dados_consistencia_p pls_gerenciar_reembolso_pck.dados_consistencia, dados_regra_p pls_gerenciar_reembolso_pck.dados_regra, nr_id_transacao_p pls_def_reemb_selecao.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, qt_registro_p INOUT integer) FROM PUBLIC;
