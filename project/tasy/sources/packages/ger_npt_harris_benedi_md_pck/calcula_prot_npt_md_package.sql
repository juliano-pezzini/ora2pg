-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_npt_harris_benedi_md_pck.calcula_prot_npt_md (ie_tipo_elemento_p text, qt_kcal_proteina_p bigint, qt_conversao_ml_p bigint, cd_unid_medida_ori_p text, cd_unid_medida_dest_p text, cd_unid_med_cons_p text, qt_conversao_und_ori_p bigint, qt_conversao_und_dest_p bigint, ie_glutamina_p text, qt_conversao_kcal_p bigint, qt_formula_lipideo_p bigint, qt_kcal_lipidio_p bigint, qt_elem_lipidio_p bigint, cd_unid_med_usua_g_p text, qt_diaria_p INOUT bigint, qt_vol_diaria_p INOUT bigint, qt_dose_diaria_p INOUT bigint, qt_grama_nitrogenio_p INOUT bigint, qt_kcal_p INOUT bigint, pr_conc_proteina_solucao_p INOUT bigint, qt_nitrogenio_total_p INOUT bigint, qt_lipidio_prop_p INOUT bigint, pr_conc_lipidio_solucao_p INOUT bigint ) AS $body$
DECLARE

	   EXEC_W varchar(200);
     qt_result_w bigint;
     qt_formula_lipideo_ww smallint;
	
BEGIN
    if (ie_tipo_elemento_p = 'P') then
			qt_diaria_p		  := dividir_sem_round_md(qt_kcal_proteina_p, 4);
			qt_vol_diaria_p := qt_diaria_p * qt_conversao_ml_p;
			
			if (upper(cd_unid_medida_dest_p) = upper(cd_unid_medida_ori_p)) then
         qt_dose_diaria_p	:= qt_vol_diaria_p;
      elsif (cd_unid_medida_dest_p IS NOT NULL AND cd_unid_medida_dest_p::text <> '') then
        begin
          EXEC_W := 'CALL obter_dose_convertida_md(:1,:2,:3,:4,:5,:6) INTO :RESULT';

          EXECUTE EXEC_W USING IN qt_vol_diaria_p,
                                        IN cd_unid_medida_ori_p,
                                        IN cd_unid_medida_dest_p,
                                        IN cd_unid_med_cons_p,
                                        IN qt_conversao_und_ori_p,
                                        IN qt_conversao_und_dest_p,
                                        OUT qt_dose_diaria_p;
        exception
          when others then
            qt_dose_diaria_p := null;
        end;
      end if;
			
			if (ie_glutamina_p = 'S') then
				qt_grama_nitrogenio_p := dividir_sem_round_md(qt_diaria_p, 6.25);
				qt_kcal_p             := qt_diaria_p * 4;
			else
				qt_grama_nitrogenio_p := dividir_sem_round_md((qt_vol_diaria_p * 1.6), 100);
				qt_kcal_p             := qt_grama_nitrogenio_p * 6.25 * 4;
			end if;
			
			pr_conc_proteina_solucao_p	:= dividir_sem_round_md(qt_kcal_proteina_p, 4);	
			qt_grama_nitrogenio_p  	    := dividir_sem_round_md((pr_conc_proteina_solucao_p * 16),100);
			qt_nitrogenio_total_p       := coalesce(qt_nitrogenio_total_p,0) + coalesce(qt_grama_nitrogenio_p,0);
    
    elsif (ie_tipo_elemento_p = 'L') then 

			if (qt_conversao_kcal_p	> 0) then
				qt_formula_lipideo_ww	:= qt_conversao_kcal_p;
			else
				qt_formula_lipideo_ww	:= qt_formula_lipideo_p;
			end if;
		
			qt_lipidio_prop_p	 := dividir_sem_round_md(qt_kcal_lipidio_p, qt_elem_lipidio_p);
      qt_diaria_p	       := dividir_sem_round_md(qt_lipidio_prop_p, qt_formula_lipideo_ww);

			qt_vol_diaria_p    := qt_diaria_p * qt_conversao_ml_p;

			if (upper(cd_unid_medida_dest_p) = upper(cd_unid_medida_ori_p)) then
				qt_dose_diaria_p	:= qt_vol_diaria_p;
			elsif (cd_unid_medida_dest_p IS NOT NULL AND cd_unid_medida_dest_p::text <> '') then
				qt_dose_diaria_p	:= qt_diaria_p;
			end if;

			if (upper(cd_unid_medida_dest_p) = upper(cd_unid_med_usua_g_p)) then
         pr_conc_lipidio_solucao_p := coalesce(pr_conc_lipidio_solucao_p,0) + coalesce(qt_diaria_p,0);
      else
        begin
          EXEC_W := 'CALL obter_dose_convertida_md(:1,:2,:3,:4,:5,:6) INTO :RESULT';

          EXECUTE EXEC_W USING IN qt_diaria_p,
                                         IN cd_unid_med_usua_g_p,
                                         IN cd_unid_medida_dest_p,
                                         IN cd_unid_med_cons_p,
                                         IN qt_conversao_und_ori_p,
                                         IN qt_conversao_und_dest_p,
                                         OUT qt_result_w;
        exception
          when others then
            qt_result_w := null;
        end;

        pr_conc_lipidio_solucao_p := coalesce(pr_conc_lipidio_solucao_p,0) + coalesce(qt_result_w,0);
			end if;
			
      qt_kcal_p := qt_lipidio_prop_p;
		end if;
	end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_npt_harris_benedi_md_pck.calcula_prot_npt_md (ie_tipo_elemento_p text, qt_kcal_proteina_p bigint, qt_conversao_ml_p bigint, cd_unid_medida_ori_p text, cd_unid_medida_dest_p text, cd_unid_med_cons_p text, qt_conversao_und_ori_p bigint, qt_conversao_und_dest_p bigint, ie_glutamina_p text, qt_conversao_kcal_p bigint, qt_formula_lipideo_p bigint, qt_kcal_lipidio_p bigint, qt_elem_lipidio_p bigint, cd_unid_med_usua_g_p text, qt_diaria_p INOUT bigint, qt_vol_diaria_p INOUT bigint, qt_dose_diaria_p INOUT bigint, qt_grama_nitrogenio_p INOUT bigint, qt_kcal_p INOUT bigint, pr_conc_proteina_solucao_p INOUT bigint, qt_nitrogenio_total_p INOUT bigint, qt_lipidio_prop_p INOUT bigint, pr_conc_lipidio_solucao_p INOUT bigint ) FROM PUBLIC;
