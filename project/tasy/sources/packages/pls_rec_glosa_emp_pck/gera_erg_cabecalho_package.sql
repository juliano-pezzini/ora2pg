-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_rec_glosa_emp_pck.gera_erg_cabecalho ( nr_seq_erg_lote_p pls_erg_recurso.nr_sequencia%type, ie_objeto_recurso_p pls_erg_cabecalho.ie_objeto_recurso%type, nr_protocolo_p pls_grg_protocolo.nr_protocolo%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera os cabecalhos do lote de envio de recurso de glosa.
	
	Como nos registros GRG nao existem a etapa de cabecalho, sera gerado sempre 
	de 1 para 1 com o lote de erg.
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


-- carrega os cabecalhos

c01 CURSOR(	nr_seq_erg_lote_pc	pls_erg_recurso.nr_sequencia%type,
		ie_objeto_recurso_pc	pls_erg_cabecalho.ie_objeto_recurso%type) FOR
	SELECT	nextval('pls_erg_cabecalho_seq') nr_sequencia,
		a.nr_sequencia nr_seq_erg_recurso,
		d.nr_registro_ans,
		a.nr_sequencia nr_lote,
		clock_timestamp() dt_recurso,
		-- Neste caso, e melhor deixar para calcular o valor dos itens que de fato vao para o lote,

		-- deixando uma arquitetura um pouco mais independente

		null vl_total_recursado,
		d.nm_operadora,
		-- faz um decode para converter o objeto para o tipo TISS

		CASE WHEN ie_objeto_recurso_pc='P' THEN  '1' WHEN ie_objeto_recurso_pc='G' THEN  '2' WHEN ie_objeto_recurso_pc='I' THEN  '2' END  ie_objeto_recurso
	from	pls_erg_recurso		a,
		pls_grg_lote		b,
		pls_dma_demons_analise	c,
		pls_dma_cabecalho_imp	d
	where	b.nr_sequencia		= a.nr_seq_grg_lote
	and	c.nr_sequencia		= b.nr_seq_dma_analise
	and	d.nr_seq_dma_analise	= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_erg_lote_pc;
	
BEGIN


for r_c01_w in c01(nr_seq_erg_lote_p, ie_objeto_recurso_p) loop

	-- Manda o cabecalho para o banco

	CALL pls_rec_glosa_emp_pck.grava_erg_cabecalho(	r_c01_w.nr_sequencia,
				r_c01_w.nr_seq_erg_recurso,
				r_c01_w.nr_registro_ans,
				r_c01_w.nr_sequencia, -- nr_guia_rec_glosa_prest, atualmente e utilizado o sequencial do cabecalho,
				r_c01_w.nm_operadora,
				r_c01_w.nr_sequencia, -- nr_guia_rec_glosa_oper, atualmente e utilizado o sequencial do cabecalho,
				r_c01_w.nr_lote,
				nr_protocolo_p,
				r_c01_w.dt_recurso,
				r_c01_w.vl_total_recursado,
				r_c01_w.ie_objeto_recurso,
				nm_usuario_p,
				'N');	

end loop;

if (coalesce(ie_commit_p, 'S') = 'S') then

	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_rec_glosa_emp_pck.gera_erg_cabecalho ( nr_seq_erg_lote_p pls_erg_recurso.nr_sequencia%type, ie_objeto_recurso_p pls_erg_cabecalho.ie_objeto_recurso%type, nr_protocolo_p pls_grg_protocolo.nr_protocolo%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text) FROM PUBLIC;
