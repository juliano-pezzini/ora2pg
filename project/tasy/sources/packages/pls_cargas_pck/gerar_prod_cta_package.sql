-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Efetuar a geracao dos dados de contas medicas



CREATE OR REPLACE PROCEDURE pls_cargas_pck.gerar_prod_cta () AS $body$
DECLARE


nr_seq_lote_protocolo_w			pls_lote_protocolo_conta.nr_sequencia%type;
nr_seq_protocolo_w			pls_protocolo_conta.nr_sequencia%type;
nr_seq_conta_w				pls_conta.nr_sequencia%type;
nr_seq_conta_proc_w			pls_conta_proc.nr_sequencia%type;
nr_seq_proc_partic_w			pls_proc_participante.nr_sequencia%type;
nr_seq_conta_mat_w			pls_conta_mat.nr_sequencia%type;
nr_seq_prestador_w			pls_prestador.nr_sequencia%type;
nr_seq_prest_inter_exec_w		pls_prestador_intercambio.nr_sequencia%type;
nr_seq_prest_inter_solic_w		pls_prestador_intercambio.nr_sequencia%type;
nr_seq_analise_pos_w			pls_analise_conta.nr_sequencia%type;
ds_retorno_w				varchar(4000);
cd_cgc_w				pessoa_juridica.cd_cgc%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_prestador_pgto_w			pls_int_cta_pgto.nr_seq_prestador_pgto%type;
nr_seq_conta_medica_w			pls_conta_medica_resumo.nr_sequencia%type;
nr_seq_evento_w				bigint;
nr_seq_regra_ww				bigint;
cd_procedimento_w			procedimento.cd_procedimento%type;
ie_origem_proced_w			procedimento.ie_origem_proced%type;
nr_seq_material_w			bigint;
ds_tipo_item_w				varchar(255);
ds_item_w				varchar(255);
ie_ato_cooperado_w			pls_conta_medica_resumo.ie_ato_cooperado%type;
ie_tipo_data_pagamento_w		pls_parametro_pagamento.ie_tipo_data_pagamento%type;
dt_competencia_pgto_w			pls_conta_medica_resumo.dt_competencia_pgto%type;
qt_item_w				pls_conta_medica_resumo.qt_item%type;
cd_tipo_pessoa_w			tipo_pessoa_juridica.cd_tipo_pessoa%type;
qt_registro_w				integer;
ie_tipo_despesa_w			varchar(10);

-- Obter os prestadores de protocolo para geracao do lote

c99 CURSOR(	nr_seq_lote_pc			pls_cg_lote.nr_sequencia%type) FOR
	SELECT	a.cd_prestador_prot,
		null cd_cooperativa,
		(SELECT	max(nr_sequencia)
		from	pls_prestador b
		where	b.cd_prestador	= a.cd_prestador_prot) nr_seq_prest_prot,
		null nr_seq_congenere_prot
	from	pls_int_cta a
	where	a.nr_seq_lote	= nr_seq_lote_pc
	and	coalesce(a.nr_seq_conta::text, '') = ''
	and	coalesce(a.cd_cooperativa::text, '') = ''
	group by a.cd_prestador_prot
	
union all

	select	null cd_prestador_prot,
		a.cd_cooperativa,
		null nr_seq_prest_prot,
		(select	max(nr_sequencia)
		from	pls_congenere b
		where	b.cd_cooperativa	= lpad(a.cd_cooperativa,4,'0')) nr_seq_congenere_prot
	from	pls_int_cta a
	where	a.nr_seq_lote	= nr_seq_lote_pc
	and	coalesce(a.nr_seq_conta::text, '') = ''
	group by a.cd_cooperativa;

-- Obter os tipos de guias para geracao de procotolo

c00 CURSOR(	nr_seq_lote_pc			pls_cg_lote.nr_sequencia%type,
		cd_prestador_prot_pc		pls_int_cta.cd_prestador_prot%type,
		cd_cooperativa_pc		pls_int_cta.cd_cooperativa%type ) FOR
	SELECT	ie_tipo_guia,
		cd_versao_tiss,
		cd_prestador_prot,
		null cd_cooperativa
	from	pls_int_cta
	where	nr_seq_lote		= nr_seq_lote_pc
	and	cd_prestador_prot	= cd_prestador_prot_pc
	and	coalesce(nr_seq_conta::text, '') = ''
	group by ie_tipo_guia,
		cd_versao_tiss,
		cd_prestador_prot
	
union all

	SELECT	ie_tipo_guia,
		cd_versao_tiss,
		null cd_prestador_prot,
		cd_cooperativa
	from	pls_int_cta
	where	nr_seq_lote		= nr_seq_lote_pc
	and	cd_cooperativa		= cd_cooperativa_pc
	and	coalesce(nr_seq_conta::text, '') = ''
	group by ie_tipo_guia,
		cd_versao_tiss,
		cd_cooperativa;

-- Obter os dados da carga de contas medicas

c01 CURSOR(	nr_seq_lote_pc			pls_cg_lote.nr_sequencia%type,
		ie_tipo_guia_pc			pls_int_cta.ie_tipo_guia%type,
		cd_versao_tiss_pc		pls_int_cta.cd_versao_tiss%type,
		cd_prestador_prot_pc		pls_int_cta.cd_prestador_prot%type,
		cd_cooperativa_pc		pls_int_cta.cd_cooperativa%type ) FOR
	SELECT	nr_sequencia,
		ie_tipo_guia,
		nr_seq_saida_spsadt,
		cd_guia,
		cd_guia_referencia,
		cd_prestador_exec,
		nm_prestador_exec,
		cd_usuario_plano,
		cd_cooperativa,
		ie_carater_internacao,
		dt_alta,
		dt_entrada,
		dt_atendimento,
		nr_seq_clinica,
		ie_indicacao_acidente,
		nr_seq_saida_int,
		cd_senha,
		cd_senha_externa,
		nr_seq_tipo_atendimento,
		dt_autorizacao,
		coalesce(ie_recem_nascido,'N') ie_recem_nascido,
		ie_tipo_faturamento,
		ie_tipo_consulta,
		ie_regime_internacao,
		nr_seq_tipo_acomodacao,
		coalesce(qt_nasc_mortos,0) qt_nasc_mortos,
		coalesce(qt_nasc_vivos_prematuros,0) qt_nasc_vivos_prematuros,
		ie_obito_mulher ie_obito_mulher,
		coalesce(qt_obito_precoce,0) qt_obito_precoce,
		coalesce(qt_obito_tardio,0) qt_obito_tardio,
		coalesce(qt_nasc_vivos_termo,0) qt_nasc_vivos_termo,
		ie_transtorno,
		ie_atend_rn_sala_parto,
		ie_baixo_peso,
		ie_parto_cesaria,
		ie_complicacao_neonatal,
		ie_complicacao_puerperio,
		ie_parto_normal,
		ie_aborto,
		ie_gestacao,
		ds_observacao,
		ds_indicacao_clinica,
		cd_versao_tiss,
		cd_prestador_solic,
		nm_prestador_solic,
		cd_guia_prestador,
		cd_prestador_prot,
		nm_prestador_prot,
		cd_doenca,
		nr_declaracao_obito,
		nr_decl_nasc_vivo,
		nm_beneficiario,
		dt_validade_senha,
		pls_obter_segurado_carteira(cd_usuario_plano,cd_estabelecimento_w) nr_seq_segurado,
		(SELECT	max(nr_sequencia)
		from	pls_prestador b
		where	b.cd_prestador	= a.cd_prestador_exec) nr_seq_prestador_exec,
		(select	max(nr_sequencia)
		from	pls_prestador b
		where	b.cd_prestador	= a.cd_prestador_solic) nr_seq_prestador_solic,
		a.cd_medico_executor,
		a.cd_medico_solicitante,
		a.nm_medico_executor,
		a.nm_medico_solicitante,
		a.nr_cnpj_prest_exec,
		a.nr_cpf_prest_exec,
		a.cd_cnes_prest_exec,
		a.cd_munic_prest_exec,
		a.nr_cnpj_prest_solic,
		a.nr_cpf_prest_solic,
		a.cd_cnes_prest_solic,
		a.cd_munic_prest_solic,
		a.sg_conselho_solic,
		a.uf_conselho_solic,
		a.nr_conselho_solic,
		a.cd_cbo_solic,
		a.sg_conselho_exec,
		a.uf_conselho_exec,
		a.nr_conselho_exec,
		a.cd_cbo_exec,
		a.nr_seq_prest_inter_exec,
		a.nr_seq_prest_inter_prot,
		a.nr_seq_prest_inter_solic,
		a.ie_regime_atendimento,
		a.ie_saude_ocupacional
	from	pls_int_cta a
	where	a.nr_seq_lote		= nr_seq_lote_pc
	and	a.ie_tipo_guia		= ie_tipo_guia_pc
	and	a.cd_versao_tiss	= cd_versao_tiss_pc
	and (a.cd_prestador_prot	= cd_prestador_prot_pc
	or	a.cd_cooperativa	= cd_cooperativa_pc)
	and	coalesce(a.nr_seq_conta::text, '') = '';
	
-- Obter os dados da carga de procedimentos das contas medicas

c02 CURSOR(	nr_seq_int_cta_pc	pls_int_cta.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		ie_via_acesso,
		dt_procedimento,
		CASE WHEN  coalesce(tx_item::text, '') = '' THEN  100 WHEN  tx_item=0 THEN  100  ELSE tx_item END  tx_item,
		coalesce(qt_procedimento,0) qt_procedimento,
		coalesce(vl_procedimento,0) vl_procedimento,
		ie_tipo_despesa,
		coalesce(vl_proc_unitario,0) vl_proc_unitario,
		cd_porte_anestesico,
		ie_ato_cooperado,
		ie_alto_custo,
		dt_fim_proc,
		dt_inicio_proc,
		ie_tecnica_utilizada,
		ds_procedimento,
		coalesce(vl_proc_liberado,0) vl_proc_liberado,
		coalesce(vl_proc_uni_lib,0) vl_proc_uni_lib,
		coalesce(qt_proc_liberado,0) qt_proc_liberado,
		coalesce(vl_proc_glosa,0) vl_proc_glosa,
		coalesce(tx_intercambio,0) tx_intercambio
	from	pls_int_cta_proc
	where	nr_seq_int_cta	= nr_seq_int_cta_pc
	and	coalesce(nr_seq_conta_proc::text, '') = '';
	
-- Obter os dados da carga de participantes dos procedimentos das contas medicas

c03 CURSOR(	nr_seq_int_cta_proc_pc		pls_int_cta_proc.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		cd_prestador_part,
		ds_prestador_part,
		nr_seq_grau_partic,
		vl_apresentado,
		nr_seq_prest_inter_part
	from	pls_int_cta_part
	where	nr_seq_int_cta_proc	= nr_seq_int_cta_proc_pc
	and	coalesce(nr_seq_proc_partic::text, '') = '';
	
-- Obter os dados da carga de materiais das contas medicas

c04 CURSOR(	nr_seq_int_cta_pc	pls_int_cta.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		cd_material_ops,
		qt_material,
		dt_atendimento,
		tx_reducao_acrescimo,
		coalesce(vl_material,0) vl_material,
		coalesce(vl_unitario,0) vl_unitario,
		ie_tipo_despesa,
		ds_material,
		cd_ref_fabricante,
		dt_fim_atend,
		dt_inicio_atend,
		ie_alto_custo,
		ie_ato_cooperado,
		coalesce(vl_mat_liberado,0) vl_mat_liberado,
		coalesce(vl_mat_uni_lib,0) vl_mat_uni_lib,
		coalesce(qt_mat_liberado,0) qt_mat_liberado,
		coalesce(vl_mat_glosa,0) vl_mat_glosa,
		coalesce(tx_intercambio,0) tx_intercambio
	from	pls_int_cta_mat
	where	nr_seq_int_cta	= nr_seq_int_cta_pc
	and	coalesce(nr_seq_conta_mat::text, '') = '';

-- Obter os dados da carga de pagamentos das contas medicas	

c05 CURSOR(	nr_seq_int_cta_pc	pls_int_cta.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		nr_seq_int_cta,
		nr_seq_int_cta_proc,
		nr_seq_int_cta_mat,
		nr_seq_int_cta_part,
		cd_chave,
		ie_tipo_registro,
		cd_chave_sup,
		cd_prestador_pgto,
		nm_prestador_pgto,
		coalesce(vl_pagamento,0) vl_pagamento,
		cd_servico,
		nr_seq_lote,
		nr_seq_prest_inter_pgto,
		ie_tipo_relacao,
		nr_seq_classificacao,
		ie_tipo_tributacao,
		nr_cpf_prest_pagto,
		cd_cgc_prest_pagto,
		nr_seq_prestador_pgto,
		ie_tipo_servico
	from	pls_int_cta_pgto
	where	nr_seq_int_cta	= nr_seq_int_cta_pc
	and	coalesce(nr_seq_conta::text, '') = '';

BEGIN
select	coalesce(max(ie_tipo_data_pagamento),'M')
into STRICT	ie_tipo_data_pagamento_w
from	pls_parametro_pagamento;

select	count(1)
into STRICT	qt_registro_w
from	pls_int_cta
where	nr_seq_lote	= nr_seq_cg_lote_w
and	coalesce(ie_tipo_guia::text, '') = '';

if (qt_registro_w != 0) then
	-- Existem registros de contas sem tipo de guia informado.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1080175);
end if;

select	count(1)
into STRICT	qt_registro_w
from	pls_int_cta
where	nr_seq_lote	= nr_seq_cg_lote_w
and	coalesce(cd_versao_tiss::text, '') = '';

if (qt_registro_w != 0) then
	-- Existem registros de contas sem versao TISS informado.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1080176);
end if;

select	count(1)
into STRICT	qt_registro_w
from	pls_int_cta
where	nr_seq_lote		= nr_seq_cg_lote_w
and	coalesce(cd_prestador_prot::text, '') = ''
and	coalesce(cd_cooperativa::text, '') = '';

if (qt_registro_w != 0) then
	-- Existem registros de contas prestador protocolo e cooperativa informado.

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1080177);
end if;

-- Inserir o lote de protocolos (Por prestador)

for r_c99_w in c99( nr_seq_cg_lote_w ) loop

	insert	into pls_lote_protocolo_conta(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
		 nm_usuario, nm_usuario_nrec, dt_lote,
		 nr_seq_prestador, ie_tipo_lote, cd_estabelecimento, ie_origem_analise,
		 nr_seq_congenere)		
	values (nextval('pls_lote_protocolo_conta_seq'), clock_timestamp(), clock_timestamp(),
		 nm_usuario_w, nm_usuario_w, clock_timestamp(),
		 r_c99_w.nr_seq_prest_prot, 'I', cd_estabelecimento_w, 2,
		 r_c99_w.nr_seq_congenere_prot) returning nr_sequencia into nr_seq_lote_protocolo_w;

	-- Inserir os protocolos (Por prestador, tipo de guia e versao TISS)

	for r_c00_w in c00( nr_seq_cg_lote_w, r_c99_w.cd_prestador_prot, r_c99_w.cd_cooperativa ) loop
		insert into pls_protocolo_conta(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, dt_protocolo,
			dt_mes_competencia, nr_protocolo_prestador, nr_seq_prestador,
			nr_seq_outorgante, ie_apresentacao, ds_observacao,
			dt_integracao, nm_usuario_integracao, ie_status, 
			ie_situacao, ie_tipo_protocolo, cd_estabelecimento, 
			dt_base_venc, nr_seq_congenere, nr_seq_lote_conta, 
			ie_origem_protocolo, dt_recebimento, cd_versao_tiss)
		values (nextval('pls_protocolo_conta_seq'), clock_timestamp(), nm_usuario_w,
			clock_timestamp(), nm_usuario_w, clock_timestamp(),
			clock_timestamp(), null, r_c99_w.nr_seq_prest_prot, 
			null, 'A', 'Protocolo gerado pela funcionalidade OPS - Cargas (Nova)', 
			clock_timestamp(), null, '1', 
			'T', 'I', cd_estabelecimento_w, 
			clock_timestamp(), r_c99_w.nr_seq_congenere_prot, nr_seq_lote_protocolo_w,
			'G', clock_timestamp(), r_c00_w.cd_versao_tiss) returning nr_sequencia into nr_seq_protocolo_w;

		-- Inserir as contas medicas da carga para producao

		for r_c01_w in c01( nr_seq_cg_lote_w, r_c00_w.ie_tipo_guia, r_c00_w.cd_versao_tiss, r_c00_w.cd_prestador_prot, r_c00_w.cd_cooperativa ) loop
		
			-- Obter prestador de intercambio executor

			if (r_c01_w.nr_cnpj_prest_exec IS NOT NULL AND r_c01_w.nr_cnpj_prest_exec::text <> '') or (r_c01_w.nr_cpf_prest_exec IS NOT NULL AND r_c01_w.nr_cpf_prest_exec::text <> '') then
				-- Obter e/ou gerar prestador de intercambio

				pls_gerar_prest_intercambio(	r_c01_w.nr_cpf_prest_exec, r_c01_w.nr_cnpj_prest_exec, r_c01_w.nm_prestador_exec,
								r_c01_w.cd_cnes_prest_exec, r_c01_w.cd_munic_prest_exec, nm_usuario_w,
								r_c01_w.cd_cbo_exec, null, nr_seq_prest_inter_exec_w, 
								nr_seq_prestador_w);
			end if;
			
			-- Obter prestador de intercambio solicitante

			if (r_c01_w.nr_cnpj_prest_solic IS NOT NULL AND r_c01_w.nr_cnpj_prest_solic::text <> '') or (r_c01_w.nr_cpf_prest_solic IS NOT NULL AND r_c01_w.nr_cpf_prest_solic::text <> '') then
				-- Obter e/ou gerar prestador de intercambio

				pls_gerar_prest_intercambio(	r_c01_w.nr_cpf_prest_solic, r_c01_w.nr_cnpj_prest_solic, r_c01_w.nm_prestador_solic,
								r_c01_w.cd_cnes_prest_solic, r_c01_w.cd_munic_prest_solic, nm_usuario_w,
								r_c01_w.cd_cbo_exec, null, nr_seq_prest_inter_solic_w,
								nr_seq_prestador_w);
			end if;
		
			--insert into pls_conta

			begin
			insert into pls_conta(nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_protocolo,
				cd_estabelecimento, cd_cooperativa, cd_doenca_dig,
				cd_guia, cd_guia_prestador, cd_guia_referencia,
				cd_prestador_exec_imp, cd_prestador_solic_imp, cd_senha,
				cd_senha_externa, cd_usuario_plano_imp, ds_indicacao_clinica, 
				ds_indicacao_clinica_imp, ds_observacao, ds_observacao_imp,
				dt_alta, dt_alta_imp, dt_atendimento,
				dt_atendimento_imp, dt_autorizacao, dt_autorizacao_imp,
				dt_entrada, dt_entrada_imp, dt_validade_senha,
				dt_validade_senha_imp, ie_aborto, ie_aborto_imp,
				ie_atend_rn_sala_parto, ie_atend_rn_sala_parto_imp, ie_baixo_peso,
				ie_baixo_peso_imp, ie_carater_internacao, ie_carater_internacao_imp,
				ie_complicacao_neonatal, ie_complicacao_neonatal_imp, ie_complicacao_puerperio,
				ie_complicacao_puerperio_imp, ie_gestacao, ie_gestacao_imp,
				ie_indicacao_acidente, ie_indicacao_acidente_imp, ie_obito_mulher,
				ie_parto_cesaria, ie_parto_cesaria_imp, ie_parto_normal,
				ie_parto_normal_imp, ie_recem_nascido, ie_recem_nascido_imp,
				ie_regime_internacao, ie_regime_internacao_imp, ie_tipo_consulta,
				ie_tipo_consulta_imp, ie_tipo_faturamento, ie_tipo_faturamento_imp,
				ie_tipo_guia, ie_transtorno, ie_transtorno_imp,
				nm_segurado_imp, nm_prestador_exec_imp, nm_prestador_imp,
				nr_decl_nasc_vivos_imp, nr_seq_clinica, nr_seq_clinica_imp,
				nr_seq_saida_int, nr_seq_saida_spsadt, nr_seq_tipo_acomodacao,
				nr_seq_tipo_atendimento, qt_nasc_mortos, qt_nasc_mortos_imp,
				qt_nasc_vivos_prematuros, qt_nasc_vivos_prematuros_imp, qt_nasc_vivos_termo,
				qt_obito_precoce, qt_obito_precoce_imp, qt_obito_tardio,
				qt_obito_tardio_imp, nr_seq_segurado, nr_seq_prestador_exec, 
				nr_seq_prestador, ie_tipo_conta, ie_origem_conta, 
				ie_status, cd_medico_executor, cd_medico_executor_imp,
				cd_medico_solicitante, cd_medico_solicitante_imp, nm_medico_executor_imp,
				nm_medico_solic_imp, cd_cgc_executor_imp, cd_cpf_executor_imp,
				cd_cnes_executor_imp,  cd_cgc_prestador_imp, cd_cpf_prestador_imp,
				cd_cnes, nr_seq_prest_inter, 
				sg_conselho_solic, sg_conselho_solic_imp, uf_crm_prest_solic_imp,
				uf_crm_solic_imp, nr_crm_prest_solic_imp, nr_crm_solic_imp,
				cd_cbo_saude_solic_imp, sg_conselho_exec, sg_conselho_exec_imp,
				uf_crm_exec, uf_crm_exec_imp, nr_crm_exec,
				cd_cbo_saude_exec_imp, nr_crm_exec_imp, nr_crm_prest_exec_imp,
				ie_regime_atendimento, ie_saude_ocupacional)
			values (nextval('pls_conta_seq'), clock_timestamp(), nm_usuario_w, 
				clock_timestamp(), nm_usuario_w, nr_seq_protocolo_w,
				cd_estabelecimento_w, r_c01_w.cd_cooperativa, r_c01_w.cd_doenca,
				r_c01_w.cd_guia, r_c01_w.cd_guia_prestador, r_c01_w.cd_guia_referencia,
				r_c01_w.cd_prestador_exec, r_c01_w.cd_prestador_solic, r_c01_w.cd_senha, 
				r_c01_w.cd_senha_externa, r_c01_w.cd_usuario_plano, r_c01_w.ds_indicacao_clinica,
				r_c01_w.ds_indicacao_clinica, r_c01_w.ds_observacao, r_c01_w.ds_observacao,
				r_c01_w.dt_alta, r_c01_w.dt_alta, r_c01_w.dt_atendimento,
				r_c01_w.dt_atendimento, r_c01_w.dt_autorizacao, r_c01_w.dt_autorizacao,
				r_c01_w.dt_entrada, r_c01_w.dt_entrada, r_c01_w.dt_validade_senha,
				r_c01_w.dt_validade_senha, r_c01_w.ie_aborto, r_c01_w.ie_aborto,
				r_c01_w.ie_atend_rn_sala_parto, r_c01_w.ie_atend_rn_sala_parto, r_c01_w.ie_baixo_peso,
				r_c01_w.ie_baixo_peso, r_c01_w.ie_carater_internacao, r_c01_w.ie_carater_internacao,
				r_c01_w.ie_complicacao_neonatal, r_c01_w.ie_complicacao_neonatal, r_c01_w.ie_complicacao_puerperio,
				r_c01_w.ie_complicacao_puerperio, r_c01_w.ie_gestacao, r_c01_w.ie_gestacao,
				r_c01_w.ie_indicacao_acidente, r_c01_w.ie_indicacao_acidente, r_c01_w.ie_obito_mulher,
				r_c01_w.ie_parto_cesaria, r_c01_w.ie_parto_cesaria, r_c01_w.ie_parto_normal, 
				r_c01_w.ie_parto_normal, r_c01_w.ie_recem_nascido, r_c01_w.ie_recem_nascido,
				r_c01_w.ie_regime_internacao, r_c01_w.ie_regime_internacao, r_c01_w.ie_tipo_consulta,
				r_c01_w.ie_tipo_consulta, r_c01_w.ie_tipo_faturamento, r_c01_w.ie_tipo_faturamento,
				r_c01_w.ie_tipo_guia, r_c01_w.ie_transtorno, r_c01_w.ie_transtorno,
				r_c01_w.nm_beneficiario, r_c01_w.nm_prestador_exec, r_c01_w.nm_prestador_solic,
				r_c01_w.nr_decl_nasc_vivo, r_c01_w.nr_seq_clinica, r_c01_w.nr_seq_clinica,
				r_c01_w.nr_seq_saida_int, r_c01_w.nr_seq_saida_spsadt, r_c01_w.nr_seq_tipo_acomodacao,
				r_c01_w.nr_seq_tipo_atendimento, r_c01_w.qt_nasc_mortos, r_c01_w.qt_nasc_mortos, 
				r_c01_w.qt_nasc_vivos_prematuros, r_c01_w.qt_nasc_vivos_prematuros, r_c01_w.qt_nasc_vivos_termo,
				r_c01_w.qt_obito_precoce, r_c01_w.qt_obito_precoce, r_c01_w.qt_obito_tardio,
				r_c01_w.qt_obito_tardio, r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_prestador_exec,
				r_c01_w.nr_seq_prestador_solic, 'I', 'A', 
				'U', r_c01_w.cd_medico_executor, r_c01_w.cd_medico_executor,
				r_c01_w.cd_medico_solicitante, r_c01_w.cd_medico_solicitante, r_c01_w.nm_medico_executor,
				r_c01_w.nm_medico_solicitante, r_c01_w.nr_cnpj_prest_exec, r_c01_w.nr_cpf_prest_exec,
				r_c01_w.cd_cnes_prest_exec, r_c01_w.nr_cnpj_prest_solic, r_c01_w.nr_cpf_prest_solic, 
				r_c01_w.cd_cnes_prest_solic, coalesce(coalesce(nr_seq_prest_inter_exec_w,r_c01_w.nr_seq_prest_inter_exec),r_c01_w.nr_seq_prest_inter_solic),
				r_c01_w.sg_conselho_solic, r_c01_w.sg_conselho_solic, r_c01_w.uf_conselho_solic,
				r_c01_w.uf_conselho_solic, r_c01_w.nr_conselho_solic, r_c01_w.nr_conselho_solic,
				r_c01_w.cd_cbo_solic, r_c01_w.sg_conselho_exec, r_c01_w.sg_conselho_exec,
				r_c01_w.uf_conselho_exec, r_c01_w.uf_conselho_exec, r_c01_w.nr_conselho_exec,
				r_c01_w.cd_cbo_exec, r_c01_w.nr_conselho_exec, r_c01_w.nr_conselho_exec,
				r_c01_w.ie_regime_atendimento, r_c01_w.ie_saude_ocupacional) returning nr_sequencia into nr_seq_conta_w;
			exception
			when others then
				-- Limpar tempo producao

				CALL pls_cargas_pck.gravar_tempo('DP');
				-- O registro de #@IE_REGISTRO_W#@ da sequencia #@NR_SEQUENCIA_W#@ esta invalido, favor verificar e refazer a carga.

				CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(sqlerrm,1,4000));
			end;
			
			-- insert into pls_diagnost_conta_obito

			if (r_c01_w.nr_declaracao_obito IS NOT NULL AND r_c01_w.nr_declaracao_obito::text <> '') then
				insert into pls_diagnost_conta_obito(nr_sequencia, nm_usuario, nm_usuario_nrec,
					dt_atualizacao, dt_atualizacao_nrec, ie_indicador_dorn_imp,
					ie_indicador_dorn, nr_declaracao_obito, nr_declaracao_obito_imp,
					nr_seq_conta, nm_tabela, nm_tabela_imp, cd_doenca, cd_doenca_imp)
				values (nextval('pls_diagnost_conta_obito_seq'), nm_usuario_w, nm_usuario_w,
					clock_timestamp(), clock_timestamp(), null,
					null, r_c01_w.nr_declaracao_obito, r_c01_w.nr_declaracao_obito,
					nr_seq_conta_w, null, null, r_c01_w.cd_doenca, r_c01_w.cd_doenca);
			end if;
			
			-- insert into pls_diagnostico_nasc_vivo

			if (r_c01_w.nr_decl_nasc_vivo IS NOT NULL AND r_c01_w.nr_decl_nasc_vivo::text <> '') then
				insert into pls_diagnostico_nasc_vivo(nr_sequencia, nm_usuario, nm_usuario_nrec,
					dt_atualizacao, dt_atualizacao_nrec, ie_indicador_dorn_imp,
					nr_seq_conta,nr_decl_nasc_vivo,nr_decl_nasc_vivo_imp)
				values (nextval('pls_diagnostico_nasc_vivo_seq'), nm_usuario_w, nm_usuario_w,
					clock_timestamp(), clock_timestamp(), null,
					nr_seq_conta_w, r_c01_w.nr_decl_nasc_vivo, r_c01_w.nr_decl_nasc_vivo);
			end if;
			
			-- update pls_int_cta

			update	pls_int_cta
			set	nr_seq_conta	= nr_seq_conta_w
			where	nr_sequencia	= r_c01_w.nr_sequencia;
			
			-- Inserir os procedimentos das contas medicas da carga para producao

			for r_c02_w in c02( r_c01_w.nr_sequencia ) loop
				--insert into pls_conta_proc

				begin
				insert into pls_conta_proc(nr_sequencia, nm_usuario, dt_atualizacao,
					nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_conta,
					cd_procedimento, ie_via_acesso, dt_procedimento,
					tx_item, qt_procedimento, vl_procedimento_imp,
					ie_tipo_despesa, vl_unitario_imp, qt_procedimento_imp, 
					ie_origem_proced, vl_adic_procedimento, vl_adic_co, 
					vl_adic_materiais, cd_procedimento_imp, tx_intercambio_imp, 
					vl_taxa_co_imp, vl_taxa_servico_imp, vl_taxa_material_imp, 
					vl_procedimento_ptu_imp, vl_co_ptu_imp, vl_material_ptu_imp, 
					dt_inicio_proc, cd_porte_anestesico_imp, ds_procedimento_imp, 
					ie_ato_cooperado, vl_apresentado_xml, qt_procedimento_original, 
					ie_alto_custo, dt_fim_proc, ie_tecnica_utilizada, 
					ie_tecnica_utilizada_imp, ie_status, ie_situacao,
					vl_unitario, vl_liberado, vl_glosa,
					vl_anestesista, vl_auxiliares, vl_beneficiario,
					vl_custo_operacional, vl_medico, vl_participacao,
					vl_saldo, vl_materiais, vl_procedimento,
					ie_apenas_pagamento, nr_seq_regra_conv, nr_seq_regra_pct_fat,
					tx_intercambio)
				values (nextval('pls_conta_proc_seq'), nm_usuario_w, clock_timestamp(),
					nm_usuario_w, clock_timestamp(), nr_seq_conta_w,
					r_c02_w.cd_procedimento, r_c02_w.ie_via_acesso, r_c02_w.dt_procedimento, 
					r_c02_w.tx_item, r_c02_w.qt_proc_liberado, r_c02_w.vl_procedimento, 
					r_c02_w.ie_tipo_despesa, r_c02_w.vl_proc_unitario, r_c02_w.qt_procedimento, 
					r_c02_w.ie_origem_proced, 0, 0, 
					0, r_c02_w.cd_procedimento, r_c02_w.tx_intercambio, 
					0, 0, 0, 
					r_c02_w.vl_procedimento, 0, 0,
					r_c02_w.dt_inicio_proc, r_c02_w.cd_porte_anestesico, r_c02_w.ds_procedimento, 
					r_c02_w.ie_ato_cooperado, r_c02_w.vl_procedimento, r_c02_w.qt_procedimento, 
					r_c02_w.ie_alto_custo, r_c02_w.dt_fim_proc, r_c02_w.ie_tecnica_utilizada, 
					r_c02_w.ie_tecnica_utilizada, 'U', 'B',
					r_c02_w.vl_proc_uni_lib, r_c02_w.vl_proc_liberado, r_c02_w.vl_proc_glosa,
					0, 0, r_c02_w.vl_proc_liberado,
					0, 0, 0,
					0, 0, r_c02_w.vl_procedimento,
					'N', null, null,
					r_c02_w.tx_intercambio) returning nr_sequencia into nr_seq_conta_proc_w;
				exception
				when others then
					-- Limpar tempo producao

					CALL pls_cargas_pck.gravar_tempo('DP');
					-- O registro de #@IE_REGISTRO_W#@ da sequencia #@NR_SEQUENCIA_W#@ esta invalido, favor verificar e refazer a carga.

					CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(sqlerrm,1,4000));
				end;
				
					
				-- update pls_int_cta_proc

				update	pls_int_cta_proc
				set	nr_seq_conta_proc	= nr_seq_conta_proc_w
				where	nr_sequencia		= r_c02_w.nr_sequencia;
			
				-- Inserir os participantes dos procedimentos das contas medicas da carga para producao

				for r_c03_w in c03( r_c02_w.nr_sequencia ) loop
					--insert into pls_proc_participante

					begin
					insert	into pls_proc_participante(nr_sequencia,				dt_atualizacao,		nm_usuario,
						dt_atualizacao_nrec,			nm_usuario_nrec,	nr_seq_conta_proc,
						nr_seq_grau_partic,			vl_apresentado,		nm_medico_executor_imp,
						ie_status,				nr_seq_prest_inter)
					values (nextval('pls_proc_participante_seq'),	clock_timestamp(),		nm_usuario_w,
						clock_timestamp(),				nm_usuario_w,		nr_seq_conta_proc_w,
						r_c03_w.nr_seq_grau_partic,		r_c03_w.vl_apresentado,	substr(r_c03_w.cd_prestador_part || ' - ' || r_c03_w.ds_prestador_part,1,255),
						'U',					r_c03_w.nr_seq_prest_inter_part) returning nr_sequencia into nr_seq_proc_partic_w;
					exception
					when others then
						-- Limpar tempo producao

						CALL pls_cargas_pck.gravar_tempo('DP');
						-- O registro de #@IE_REGISTRO_W#@ da sequencia #@NR_SEQUENCIA_W#@ esta invalido, favor verificar e refazer a carga.

						CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(sqlerrm,1,4000));
					end;
						
					-- update pls_int_cta_part

					update	pls_int_cta_part
					set	nr_seq_proc_partic	= nr_seq_proc_partic_w
					where	nr_sequencia		= r_c03_w.nr_sequencia;
				end loop;
			end loop;
			
			-- Inserir os materiais das contas medicas da carga para producao

			for r_c04_w in c04( r_c01_w.nr_sequencia ) loop
				nr_seq_material_w := null;
				pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), r_c04_w.cd_material_ops, 'O', 'S', r_c00_w.cd_versao_tiss);
				
				if (coalesce(nr_seq_material_w::text, '') = '') then
					-- Sem restringir por vigencia e versao TISS

					pls_obter_mat_tiss_vigente( nr_seq_material_w, clock_timestamp(), r_c04_w.cd_material_ops, 'O', 'N', null);
				end if;
			
				--insert into pls_conta_mat

				begin
				insert into pls_conta_mat(nr_sequencia, nm_usuario, dt_atualizacao,
					nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_conta,
					nr_seq_material, dt_atendimento, tx_reducao_acrescimo,
					qt_material, vl_material_imp, vl_unitario_imp, 
					qt_material_imp, ie_tipo_despesa, vl_taxa_material_imp, 
					cd_material_imp, dt_inicio_atend, ds_material_imp, 
					ie_ato_cooperado, ie_alto_custo, dt_fim_atend, 
					vl_material_imp_xml, cd_ref_fabricante,	ie_situacao, 
					ie_status, vl_unitario, vl_liberado, 
					vl_glosa, vl_participacao, vl_saldo,
					vl_gerado, vl_beneficiario, ie_apenas_pagamento,
					nr_seq_regra_conv, tx_intercambio, tx_intercambio_imp)
				values (nextval('pls_conta_mat_seq'), nm_usuario_w, clock_timestamp(),
					nm_usuario_w, clock_timestamp(), nr_seq_conta_w,
					nr_seq_material_w, r_c04_w.dt_atendimento, r_c04_w.tx_reducao_acrescimo, 
					r_c04_w.qt_mat_liberado, r_c04_w.vl_material, r_c04_w.vl_unitario, 
					r_c04_w.qt_material, r_c04_w.ie_tipo_despesa, 0, 
					r_c04_w.cd_material_ops, r_c04_w.dt_inicio_atend, r_c04_w.ds_material,
					r_c04_w.ie_ato_cooperado, r_c04_w.ie_alto_custo, r_c04_w.dt_fim_atend,
					r_c04_w.vl_material, r_c04_w.cd_ref_fabricante, 'I', 
					'U', r_c04_w.vl_mat_uni_lib, r_c04_w.vl_mat_liberado, 
					r_c04_w.vl_mat_glosa, 0, 0,
					0, r_c04_w.vl_mat_liberado, 'N',
					null, r_c04_w.tx_intercambio, r_c04_w.tx_intercambio) returning nr_sequencia into nr_seq_conta_mat_w;
				exception
				when others then
					-- Limpar tempo producao

					CALL pls_cargas_pck.gravar_tempo('DP');
					-- O registro de #@IE_REGISTRO_W#@ da sequencia #@NR_SEQUENCIA_W#@ esta invalido, favor verificar e refazer a carga.

					CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(sqlerrm,1,4000));
				end;
					
				-- update pls_int_cta_mat

				update	pls_int_cta_mat
				set	nr_seq_conta_mat	= nr_seq_conta_mat_w
				where	nr_sequencia		= r_c04_w.nr_sequencia;
			end loop;

			-- Atualizar o valor da conta medica nova

			CALL pls_atualiza_valor_conta(nr_seq_conta_w, nm_usuario_w);
			
		
			-- Consistir conta

			CALL pls_consistir_conta( nr_seq_conta_w, cd_estabelecimento_w, nm_usuario_w, 'N', 'N', null, null, null, null, null);
			
			--Remocao de glosas e/ou ocorrencias geradas(Inicialmente tratado para remover,  futuramente, caso ocorrer necessidade de melhorar o tempo de geracao total, talvez seja interessante realizar ajustes a ponto de nao processar

			--as ocorrencias).

			CALL pls_cargas_pck.remove_glosas_ocorr_rda(nr_seq_conta_w);
			
			-- Deve pagar conforme o RDA

			delete	FROM pls_conta_medica_resumo
			where	nr_seq_conta	= nr_seq_conta_w;
			
			--O status dos itens foi setado inicialmente como Usuario aguradando acaa, para que pudesse ocorrer a valorizacao dos itens conforme as tabelas de intercambio. A origem da conta

			-- tambem nao foi inserida como cargas pois isso interferiria na valorizacao.  Aqui nesse ponto deixa 

			update pls_conta_proc set ie_status = 'M' where nr_seq_conta = nr_seq_conta_w;
			update pls_conta_mat set ie_status = 'M' where nr_seq_conta = nr_seq_conta_w;
			update pls_conta set ie_origem_conta = 'G' where nr_sequencia = nr_seq_conta_w;
			
			--  Fechar conta medica

			CALL pls_fechar_conta( nr_seq_conta_w, 'S', null, 'N', cd_estabelecimento_w, nm_usuario_w, null, null);
			
			for r_c05_w in c05( r_c01_w.nr_sequencia ) loop
				begin
				-- Se nao tem prestador de pagamento

				if (coalesce(r_c05_w.nr_seq_prestador_pgto::text, '') = '') then
					--Verificar se o prestador e PF ou PJ

					if (r_c05_w.nr_cpf_prest_pagto IS NOT NULL AND r_c05_w.nr_cpf_prest_pagto::text <> '') then
						select	max(cd_pessoa_fisica)
						into STRICT	cd_pessoa_fisica_w
						from	pessoa_fisica
						where	nr_cpf	= r_c05_w.nr_cpf_prest_pagto;
						
						-- Verifica se tem pessoa fisica

						if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
							-- Se for PF e nao ter na base faz Insert na PESSOA_FISICA

							insert into pessoa_fisica(cd_pessoa_fisica,		dt_atualizacao,		dt_atualizacao_nrec,
								nm_usuario,			nm_usuario_nrec,	nm_pessoa_fisica,
								nr_cpf,				ie_tipo_pessoa)
							values (nextval('pessoa_fisica_seq'),	clock_timestamp(),		clock_timestamp(),
								nm_usuario_w,			nm_usuario_w,		r_c05_w.nm_prestador_pgto,
								r_c05_w.nr_cpf_prest_pagto,	1) returning cd_pessoa_fisica into cd_pessoa_fisica_w;
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_prestador_pgto_w
							from	pls_prestador
							where	cd_pessoa_fisica = cd_pessoa_fisica_w;
						end if;
					elsif (r_c05_w.cd_cgc_prest_pagto IS NOT NULL AND r_c05_w.cd_cgc_prest_pagto::text <> '') then
						select	max(cd_cgc)
						into STRICT	cd_cgc_w
						from	pessoa_juridica
						where	cd_cgc	= r_c05_w.cd_cgc_prest_pagto;
						
						-- Verifica se tem pessoa juridica

						if (coalesce(cd_cgc_w::text, '') = '') then
							select	max(cd_tipo_pessoa)
							into STRICT	cd_tipo_pessoa_w
							from	tipo_pessoa_juridica;
						
							-- Se for PJ e nao ter na base faz Insert na PESSOA_JURIDICA

							insert into pessoa_juridica(cd_cgc,			dt_atualizacao,		dt_atualizacao_nrec,
								nm_usuario,			nm_usuario_nrec,	cd_cep,
								cd_tipo_pessoa,			ds_endereco,		ds_municipio,
								ds_razao_social,		ie_prod_fabric,		ie_situacao,
								nm_fantasia,			sg_estado,		ie_tipo_tributacao,
								ie_forma_revisao)
							values (r_c05_w.cd_cgc_prest_pagto,	clock_timestamp(),		clock_timestamp(),
								nm_usuario_w,			nm_usuario_w,		'0',
								cd_tipo_pessoa_w,		' ',			' ',
								r_c05_w.nm_prestador_pgto,	'N',			'A',
								r_c05_w.nm_prestador_pgto,	'SC',			r_c05_w.ie_tipo_tributacao,
								'A') returning cd_cgc into cd_cgc_w;
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_prestador_pgto_w
							from	pls_prestador
							where	cd_cgc	= cd_cgc_w;
							
							-- Atualizar tipo tributaaco

							update	pessoa_juridica
							set	ie_tipo_tributacao	= r_c05_w.ie_tipo_tributacao
							where	cd_cgc			= cd_cgc_w;
						end if;
					end if;	

					-- Se nao tiver prestador

					if (coalesce(nr_seq_prestador_pgto_w::text, '') = '') then
						-- Faz Insert na PLS_PRESTADOR

						insert into pls_prestador(nr_sequencia,				dt_atualizacao,			nm_usuario,
							dt_atualizacao_nrec,			nm_usuario_nrec,		cd_externo_esocial,
							dt_cadastro,				ie_abramge,			ie_acidente_trabalho,
							ie_guia_medico,				ie_particip_qualiss_ans,	ie_prestador_alto_custo,
							ie_ptu_a400,				ie_situacao,			ie_tabela_propria,
							ie_tipo_relacao,			ie_tipo_vinculo,		ie_urgencia_emergencia,
							nr_seq_classificacao,			cd_prestador,			cd_pessoa_fisica,
							cd_cgc,					cd_estabelecimento)
						values (nextval('pls_prestador_seq'),		clock_timestamp(),			nm_usuario_w,
							clock_timestamp(),				nm_usuario_w,			null,
							clock_timestamp(),				'N',				'N',
							'N',					'N',				'N',
							'N',					'A',				'N',
							coalesce(r_c05_w.ie_tipo_relacao,'C'),	'C',				'N',	
							r_c05_w.nr_seq_classificacao,		r_c05_w.cd_prestador_pgto,	cd_pessoa_fisica_w,
							cd_cgc_w,				cd_estabelecimento_w) returning nr_sequencia into nr_seq_prestador_pgto_w;
					end if;
				end if;
				
				-- Limpar

				nr_seq_conta_proc_w	:= null;
				nr_seq_conta_mat_w	:= null;
				cd_procedimento_w	:= null;
				ie_origem_proced_w	:= null;
				nr_seq_material_w 	:= null;
				ds_item_w		:= null;
				ie_ato_cooperado_w	:= null;
				qt_item_w		:= 1;
				dt_competencia_pgto_w	:= clock_timestamp();
				ds_tipo_item_w		:= substr(obter_valor_dominio(3963, 'P'),1,255);
				
				-- Pegar dados de procedimento

				if (r_c05_w.ie_tipo_servico = 'PRO') then
					select	max(i.nr_seq_conta_proc),
						max(i.cd_procedimento),
						max(i.ds_procedimento),
						max(c.ie_ato_cooperado),
						max(c.qt_procedimento),
						max(c.ie_tipo_despesa),
						max(c.ie_origem_proced)
					into STRICT	nr_seq_conta_proc_w,
						cd_procedimento_w,
						ds_item_w,
						ie_ato_cooperado_w,
						qt_item_w,
						ie_tipo_despesa_w,
						ie_origem_proced_w
					from	pls_int_cta_proc	i,
						pls_conta_proc		c
					where	c.nr_sequencia		= i.nr_seq_conta_proc
					and	i.cd_procedimento	= r_c05_w.cd_servico
					and	i.nr_seq_lote		= nr_seq_cg_lote_w;
				
				-- Pegar dados de material

				elsif (r_c05_w.ie_tipo_servico = 'MAT') then
					select	max(i.nr_seq_conta_mat),
						max(c.nr_seq_material),
						max(i.ds_material),
						max(c.ie_ato_cooperado),
						max(c.qt_material),
						max(c.ie_tipo_despesa)
					into STRICT	nr_seq_conta_mat_w,
						nr_seq_material_w,
						ds_item_w,
						ie_ato_cooperado_w,
						qt_item_w,
						ie_tipo_despesa_w
					from	pls_int_cta_mat		i,
						pls_conta_mat		c
					where	c.nr_sequencia		= i.nr_seq_conta_mat
					and	i.cd_material_ops	= r_c05_w.cd_servico
					and	i.nr_seq_lote		= nr_seq_cg_lote_w;
				end if;
				
				if (coalesce(coalesce(nr_seq_conta_proc_w,nr_seq_conta_mat_w)::text, '') = '') then
					-- Problema na geracao do pagamento do servico: #@CD_SERVICO#@ -#@IE_TIPO#@

					CALL wheb_mensagem_pck.exibir_mensagem_abort(1080178,'CD_SERVICO=' || r_c05_w.cd_servico ||';'||'IE_TIPO=' || r_c05_w.ie_tipo_servico);
				end if;
				
				-- Obter evento

				pls_obter_evento_item(cd_procedimento_w,			ie_origem_proced_w,	nr_seq_material_w,
							cd_estabelecimento_w,			r_c01_w.ie_tipo_guia,	'G',
							r_c01_w.nr_seq_tipo_atendimento,	ie_tipo_despesa_w,	r_c01_w.nr_seq_segurado,
							nr_seq_conta_w,				null,			r_c05_w.nr_seq_prestador_pgto,
							nr_seq_evento_w,			nr_seq_regra_ww,	'C',
							r_c01_w.ie_regime_atendimento, r_c01_w.ie_saude_ocupacional);
				
				begin
				--Insert na PLS_CONTA_MEDICA_RESUMO

				insert into pls_conta_medica_resumo(nr_sequencia,				dt_atualizacao,					dt_atualizacao_nrec,
					nm_usuario,				dt_competencia,					ie_situacao,
					nr_seq_conta,				nr_seq_item,					nr_seq_evento,
					vl_medico,				vl_anestesista,					vl_auxiliares,
					vl_custo_operacional,			vl_materiais,					vl_calculado,
					vl_apresentado,				vl_liberado,					vl_beneficiario,
					vl_glosa,				vl_unitario,					vl_unitario_calculado,
					vl_taxa_adm,				vl_taxa_adm_co,					vl_taxa_adm_mat,
					vl_lib_original,			vl_provisorio,					vl_hm,
					vl_co_pag,				vl_materiais_pag,				vl_taxa_adm_pag,
					vl_apres_ind,				vl_liberado_ant,				nm_prestador_pgto,
					nr_seq_conta_proc,			nr_seq_prestador_pgto,				ie_tipo_item,
					cd_procedimento,			nr_seq_material,				ds_tipo_item,
					ds_item,				ie_ato_cooperado,				ie_tipo_data_pagamento,
					dt_competencia_pgto,			qt_item,					pr_liberado,
					pr_taxa_adm_co,				pr_taxa_adm_mat,				nr_seq_conta_mat,
					ie_origem_proced)
				values (nextval('pls_conta_medica_resumo_seq'),	clock_timestamp(),					clock_timestamp(),
					nm_usuario_w,				clock_timestamp(),					'A',
					nr_seq_conta_w,				coalesce(nr_seq_conta_proc_w,nr_seq_conta_mat_w),	nr_seq_evento_w,
					0,					0,						0,
					0,					0,						0,
					0,					r_c05_w.vl_pagamento,				0,
					0,					0,						0,
					0,					0,						0,
					0,					0,						0,
					0,					0,						0,
					0,					0,						r_c05_w.nm_prestador_pgto,
					nr_seq_conta_proc_w,			r_c05_w.nr_seq_prestador_pgto,			'P',
					cd_procedimento_w,			nr_seq_material_w,				ds_tipo_item_w,
					ds_item_w,				ie_ato_cooperado_w,				ie_tipo_data_pagamento_w,
					dt_competencia_pgto_w,			qt_item_w,					0,
					0,					0,						nr_seq_conta_mat_w,
					ie_origem_proced_w) returning nr_sequencia into nr_seq_conta_medica_w;
				exception
				when others then
					-- Limpar tempo producao

					CALL pls_cargas_pck.gravar_tempo('DP');
					CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(sqlerrm,1,4000));
				end;
					
					-- update na pls_int_cta_pgto para passar a sequencia do resumo conta

					update	pls_int_cta_pgto
					set	nr_seq_conta_resumo	= nr_seq_conta_medica_w,
						nr_seq_conta		= nr_seq_conta_w,
						nr_seq_prestador_pgto	= coalesce(nr_seq_prestador_pgto,nr_seq_prestador_pgto_w)
					where	nr_sequencia		= r_c05_w.nr_sequencia
					and	coalesce(nr_seq_conta_resumo::text, '') = '';
				end;
			end loop;
			
			-- Gravar evento de pagamento	

			CALL pls_filtro_regra_event_cta_pck.gerencia_regra_filtro(null, nr_seq_conta_w, cd_estabelecimento_w, nm_usuario_w);
			
			-- Gerar analise de pos

			CALL pls_gerar_analise_pos_estab( nr_seq_conta_w, nm_usuario_w, cd_estabelecimento_w, 'R');
			
			-- Busca a analise POS criada

			begin
			select	max(a.nr_seq_analise)
			into STRICT	nr_seq_analise_pos_w
			from	pls_conta_pos_estabelecido	a
			where	a.nr_seq_conta	= nr_seq_conta_w;
			exception
			when others then
				nr_seq_analise_pos_w := null;
			end;
			
			-- Se encontrou, finaliza a analise

			if (nr_seq_analise_pos_w IS NOT NULL AND nr_seq_analise_pos_w::text <> '') then
				-- Finaliza a analise de POS

				pls_finaliza_analise_grupo_pos( nr_seq_analise_pos_w, nm_usuario_w, null, 'N', 'N', cd_estabelecimento_w, ds_retorno_w);
				
				-- Encerra a analise se a mesma estiver liquidada

				update	pls_analise_conta
				set	ie_status	= 'T'
				where	nr_sequencia	= nr_seq_analise_pos_w
				and	ie_status	= 'L';
			end if;
			
	
		end loop;
					
		-- Encerrar protocolo sem pagamento

		update	pls_protocolo_conta
		set	ie_status	= 4
		where	nr_sequencia	= nr_seq_protocolo_w;
	end loop;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cargas_pck.gerar_prod_cta () FROM PUBLIC;
