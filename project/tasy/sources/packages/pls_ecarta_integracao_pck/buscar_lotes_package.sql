-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ecarta_integracao_pck.buscar_lotes ( nm_usuario_p usuario.nm_usuario%type default nm_usuario_w) AS $body$
DECLARE

	ds_erro_w		varchar(4000);
	nm_arquivos_w		text;
	cd_identificador_w	pls_ecarta_matriz.cd_identificador%type;
	nr_seq_matriz_w		pls_ecarta_matriz.nr_sequencia%type;
	qt_registro_w		bigint;
  z RECORD;
  r RECORD;

BEGIN
	-- Seta variáveis globais
	current_setting('pls_ecarta_integracao_pck.pls_arquivo_t')::pls_arquivo_row.delete;
	PERFORM set_config('pls_ecarta_integracao_pck.qt_arq_w', 0, false);
	PERFORM set_config('pls_ecarta_integracao_pck.nm_usuario_w', nm_usuario_p, false);
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

	-- Busca arquivos do diretório recebidos do servidor FTPS para o diretório temporários, e apaga os arquivos baixados
	CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Busca arquivos do diretório recebidos do servidor FTPS', null, $$plsql_line);
	nm_arquivos_w := pls_ecarta_integracao_pck.buscar_arquivos(	current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_servico_web_ftps, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_servidor_ftp, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.nr_porta_ftp, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.nm_usuario_ftp, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_senha_ftp, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp_w, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_remoto_recebidos, 'S');
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
	end if;

	-- Processa arquivos recebidos do servidor FTPS
	for z in (SELECT ds_valor_vchr2 from table(pls_util_pck.converter_lista_valores_clob(nm_arquivos_w, ';'))) loop
		-- Seta variáveis globais
		PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

		if (z.ds_valor_vchr2 IS NOT NULL AND z.ds_valor_vchr2::text <> '') then
			-- Descompata arquivo recebido
			-- Aqui a barra é fixa pois é enviada ao java
			CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Descompacta arquivo recebido', 'z.ds_valor_vchr2 = ' || z.ds_valor_vchr2, $$plsql_line);
			ds_erro_w := pls_utl_zip_pck.descompactar_arquivos(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp || '/' || z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, 'N', nm_arquivos_w);
			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
			end if;

			-- Zera lista de solicitações com erro que não estão na base de dados
			PERFORM set_config('pls_ecarta_integracao_pck.qt_solic_erro_w', 0, false);
			current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row.delete;

			-- Processa arquivos descompactados para encontrar o arquivo xml
			for r in (SELECT ds_valor_vchr2 from table(pls_util_pck.converter_lista_valores_clob(nm_arquivos_w, ';'))) loop
				-- Seta variáveis globais
				PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

				if (r.ds_valor_vchr2 IS NOT NULL AND r.ds_valor_vchr2::text <> '') then
					-- Identifica a matriz do arquivo .xml
					if (position('.xml' in lower(r.ds_valor_vchr2)) > 0) then
						cd_identificador_w := substr(r.ds_valor_vchr2, 9, length(r.ds_valor_vchr2));
						cd_identificador_w := substr(cd_identificador_w, 1, position('_' in cd_identificador_w) -1);

						select nr_sequencia into STRICT nr_seq_matriz_w from pls_ecarta_matriz where cd_identificador = cd_identificador_w;
					end if;

					-- Se foi encontrada a matriz, processa o arquivo
					if (nr_seq_matriz_w IS NOT NULL AND nr_seq_matriz_w::text <> '') then
						-- Verifica se é a mesma matriz
						if (coalesce(nr_seq_matriz_w, -1) != coalesce(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_matriz_w')::pls_ecarta_matriz.nr_sequencia%type, -1)) then
							-- Seta a Matriz correta
							PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_matriz_w', nr_seq_matriz_w, false);

							-- Carrega matriz do e-Carta
							CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Carrega matriz do e-Carta', null, $$plsql_line);
							CALL pls_ecarta_integracao_pck.carregar_matriz(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_matriz_w')::pls_ecarta_matriz.nr_sequencia%type);
						end if;

						-- Localiza a matriz associada ao parâmetro
						select	count(1)
						into STRICT	qt_registro_w
						from	pls_ecarta_param_matriz
						where	nr_seq_ecarta_parametro = current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_parametro_w')::pls_ecarta_parametro.nr_sequencia%type
						and	nr_seq_ecarta_matriz	= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_matriz_w')::pls_ecarta_matriz.nr_sequencia%type;

						-- Verifica se a matriz está associada ao parâmetro
						if (qt_registro_w > 0) then
							-- Identifica o arquivo xml encontrado
							if (position('recibo' in lower(r.ds_valor_vchr2)) > 0) then
								-- Recibo
								CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Lê xml "2. Notificação de Recibo de Serviço - NR" do diretório temporários', null, $$plsql_line);
								if (pls_ecarta_integracao_pck.ler_arquivo_recibo(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2, z.ds_valor_vchr2)) then
									-- Copia o arquivo zip do temporários para o recebidos
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_recebidos_comp, z.ds_valor_vchr2);
								else
									-- Copia o arquivo zip do temporários para o erros
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
								end if;
							elsif (position('inconsistencia' in lower(r.ds_valor_vchr2)) > 0) then
								-- Inconsistência / Erro
								CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Lê xml "3. Notificação de Inconsistência - NI" do diretório temporários', null, $$plsql_line);
								if (pls_ecarta_integracao_pck.ler_arquivo_inconsistencia(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2, z.ds_valor_vchr2)) then
									-- Copia o arquivo zip do temporários para o inconsistencias
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_inconsistencias_comp, z.ds_valor_vchr2);
								else
									-- Copia o arquivo zip do temporários para o erros
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
								end if;
							elsif (position('cancelamento_resposta' in lower(r.ds_valor_vchr2)) > 0) then
								-- Resposta sobre cancelamento
								CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Lê xml "9. Arquivo de Resposta ao Cancelamento" do diretório temporários', null, $$plsql_line);
								if (pls_ecarta_integracao_pck.ler_arquivo_cancelamento(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2, z.ds_valor_vchr2)) then
									-- Copia o arquivo zip do temporários para o recebidos
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_recebidos_comp, z.ds_valor_vchr2);
								else
									-- Copia o arquivo zip do temporários para o erros
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
								end if;
							elsif (position('devolucaoar' in lower(r.ds_valor_vchr2)) > 0) then
								-- Devolução de AR (Aviso de Recimento)
								CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Lê xml "5. Arquivo de Devolução de ARs e Meta Dados - AD" do diretório temporários', null, $$plsql_line);
								if (pls_ecarta_integracao_pck.ler_arquivo_devolucao(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2, z.ds_valor_vchr2)) then
									-- Copia o arquivo zip do temporários para o recebidos
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_recebidos_comp, z.ds_valor_vchr2);
								else
									-- Copia o arquivo zip do temporários para o erros
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
								end if;
							elsif (position('resposta' in lower(r.ds_valor_vchr2)) > 0) and (position('recusado' in lower(r.ds_valor_vchr2)) > 0) then
								-- Resposta sobre recusa
								CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Lê xml "7. Arquivo de Notificação de Recusa da Resposta à Devolução de ARs e Meta Dados" do diretório temporários', null, $$plsql_line);
								if (pls_ecarta_integracao_pck.ler_arquivo_recusa(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2, z.ds_valor_vchr2)) then
									-- Copia o arquivo zip do temporários para o inconsistencias
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_inconsistencias_comp, z.ds_valor_vchr2);
								else
									-- Copia o arquivo zip do temporários para o erros
									utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
								end if;
							end if;
						else
							-- Registra log de erro
							CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'A matriz e-Carta "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_matriz_w')::pls_ecarta_matriz.nr_sequencia%type || '" não está associada ao parâmetro "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_parametro_w')::pls_ecarta_parametro.nr_sequencia%type || '"!', null, $$plsql_line);

							-- Copia o arquivo zip do temporários para o erros
							utl_file.fcopy(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_erros_comp, z.ds_valor_vchr2);
						end if;
					end if;
				end if;
			end loop;

			-- Seta variáveis globais
			PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

			-- Processa novamente os arquivos descompactados para apagá-los do diretório
			for r in (SELECT ds_valor_vchr2 from table(pls_util_pck.converter_lista_valores_clob(nm_arquivos_w, ';'))) loop
				-- Apaga o arquivo descompactado e processado
				if (r.ds_valor_vchr2 IS NOT NULL AND r.ds_valor_vchr2::text <> '') then
					utl_file.fremove(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r.ds_valor_vchr2);
				end if;
			end loop;

			-- Apaga o arquivo zip que foi copiado para outros diretórios
			CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Apaga o arquivo zip que foi copiado para outros diretórios', null, $$plsql_line);
			utl_file.fremove(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, z.ds_valor_vchr2);

			-- Invoca novamente o envio de resposta de notificação (pois existem um prazo de 60 minutos)
			CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Envia novamente resposta de notificação', null, $$plsql_line);
			CALL pls_ecarta_integracao_pck.enviar_respostas_notificacao();

			-- Invoca novamente o envio de resposta de devolução (pois existem um prazo de 180 minutos)
			CALL CALL pls_ecarta_integracao_pck.incluir_log('D', 'Envia novamente resposta de devolução', null, $$plsql_line);
			CALL pls_ecarta_integracao_pck.enviar_respostas_devolucao();

			-- Seta variáveis globais
			PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

			-- Confirma transação neste ponto pois arquivos já foram movidos
			commit;
		end if;
	end loop;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ecarta_integracao_pck.buscar_lotes ( nm_usuario_p usuario.nm_usuario%type default nm_usuario_w) FROM PUBLIC;
