-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_ecarta_integracao_pck.ler_arquivo_devolucao ( ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arquivo_p pls_ecarta_arquivo_solic.nm_arquivo%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type) RETURNS boolean AS $body$
DECLARE

	-- variáveis
	ie_encerrado_w		varchar(1);
	xml			xml;
	pls_arquivo_w		pls_arquivo_r;
	--
	exists_w		boolean;
	file_length_w		pls_ecarta_arquivo_solic.qt_tamanho%type;
	blocksize_w		pls_ecarta_arquivo_solic.qt_tamanho%type;
	ds_extensao_w		varchar(10);
	--
	dt_recebimento_ar_w	pls_ecarta_solicitacao.dt_recebimento_devolucao%type;
	ie_resposta_w		pls_ecarta_solicitacao.ie_resposta_devolucao%type;
	dt_baixa_w		pls_ecarta_solicitacao.dt_baixa%type;
	ie_tipo_baixa_w		pls_ecarta_solicitacao.ie_tipo_baixa%type;
	cd_dom_incons_w		dominio.cd_dominio%type := 8745;
	--
	qt_solicitacao_w	bigint;
	nr_seq_lote_w		pls_ecarta_log_integracao.nr_seq_ecarta_lote%type;
	nr_seq_solicitacao_w	pls_ecarta_log_integracao.nr_seq_ecarta_solicitacao%type;

	-- Lote
	c01_w CURSOR FOR
	SELECT	extractValue(value(b), 'AR/nuLote')	as nr_seq_lote,
		extractValue(value(a), 'qtObjeto')	as qt_solicitacao
	from	table(xmlSequence(extract(xml, '/Mensagem/corpoMensagem/arsDevolucao/*')))	b,
		table(xmlSequence(extract(xml, '/Mensagem/corpoMensagem/*')))			a;

	--//TODO: Os Correios ainda enviarão mais atributos (dados do recebedor, entregador etc);
	-- Solicitações
	c02_w CURSOR FOR
	SELECT	extractValue(value(b), 'AR/cdObjetoCliente')	as nr_solicitacao,
		extractValue(value(b), 'AR/nuLote')		as nr_seq_lote,
		extractValue(value(b), 'AR/nuEtiqueta')		as nr_etiqueta,
		extractValue(value(b), 'AR/nuAR')		as nr_aviso_recebimento,
		extractValue(value(b), 'AR/cdBaixa')		as ie_tipo_baixa,
		extractValue(value(b), 'AR/dtEntregaAR')	as dt_entrega_ar,
		extractValue(value(b), 'AR/nmDocumento')	as nm_arquivo_ar
	from	table(xmlSequence(extract(xml, '/Mensagem/corpoMensagem/arsDevolucao/*'))) b;

	-- Lote
	c03_w CURSOR FOR
	SELECT (	SELECT	CASE WHEN count(1)=0 THEN  'S'  ELSE 'N' END
			from	pls_ecarta_solicitacao b
			where	b.nr_seq_ecarta_lote = a.nr_sequencia
			and	coalesce(b.dt_baixa::text, '') = '') ie_encerrado
	from	pls_ecarta_lote	a
	where	a.nr_sequencia	= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type;

	-- Solicitação
	c04_w CURSOR(	nr_sequencia_p pls_ecarta_solicitacao.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_ecarta_solicitacao,
		a.dt_recebimento_devolucao,
		a.ie_resposta_devolucao,
		a.dt_baixa,
		a.ie_tipo_baixa
	from	pls_ecarta_solicitacao a
	where	a.nr_sequencia = nr_sequencia_p;
BEGIN
	-- Seta variáveis globais
	ie_resposta_w := null;
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'ler arquivo de devolução de aviso de recebimento de lote enviado', false);

	-- Carrega o conteúdo do arquivo xml
	xml := xmlparse(DOCUMENT, convert_from(dbms_XSLprocessor.read2clob(ds_caminho_p, nm_arquivo_p, nls_charset_id('UTF8')), 'utf-8'));

	-- Lê o cabeçalho do arquivo xml
	open c01_w;
	fetch c01_w into current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, qt_solicitacao_w;
	close c01_w;

	-- Verifica o lote
	if (current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%(type IS NOT NULL AND type::text <> '')) then
		-- Localiza o lote
		open c03_w;
		fetch c03_w into ie_encerrado_w;
		close c03_w;

		-- Verifica se o lote existe
		if (ie_encerrado_w IS NOT NULL AND ie_encerrado_w::text <> '') then
			-- Verifica se o lote está encerrado
			if (ie_encerrado_w = 'S') then
				ie_resposta_w := '17'; -- Lote já encerrado
				nr_seq_lote_w		:= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type;
				CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'O lote: "' || nr_seq_lote_w || '" está encerrado!', null, $$plsql_line);
			end if;
		else
			ie_resposta_w := '16'; -- Lote não encontrado
		end if;
	else
		ie_resposta_w := '16'; -- Lote não encontrado
	end if;

	-- Verifica se encontrou inconsistencias
	if (ie_resposta_w IS NOT NULL AND ie_resposta_w::text <> '') then
		-- Carrega para uma lista global com as solicitações com problemas
		PERFORM set_config('pls_ecarta_integracao_pck.qt_solic_erro_w', current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22) + 1, false);
		current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).nr_seq_ecarta_lote	:= coalesce(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, nr_seq_lote_w);
		current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).ie_resposta_devolucao	:= ie_resposta_w;

		-- Se o lote não foi encontrado
		if (ie_resposta_w = '16') then
			-- Seta variáveis globais
			nr_seq_lote_w			:= coalesce(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, nr_seq_lote_w);
--			nr_seq_solicitacao_w		:= nr_seq_ecarta_solicitacao_w;
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w', null, false);
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_arquivo_solic_w', null, false);

			-- Registra log de alerta
			CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'O lote "' || nr_seq_lote_w || '" foi devolvido pelos Correios porém não existe na base de dados!', null, $$plsql_line);

			-- Retorna falha
			return false;
		end if;
	else
		-- Processa as solicitações
		for r02_w in c02_w loop
			-- Seta variáveis globais
			ie_resposta_w := null; -- Sem ocorrências
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);

			-- Localiza a solicitação
			open c04_w(r02_w.nr_solicitacao);
			fetch c04_w into current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type, dt_recebimento_ar_w, ie_resposta_w, dt_baixa_w, ie_tipo_baixa_w;
			close c04_w;

			-- Verifica se a solicitação existe
			if (current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%(type IS NOT NULL AND type::text <> '')) then
				-- Verifica se a solicitação está encerrada
				if (dt_baixa_w IS NOT NULL AND dt_baixa_w::text <> '') then
					ie_resposta_w := '17'; -- Lote já encerrado (Solicitação encerrada)
				else
					-- Verifica se a solicitação já havia sido retornada com sucesso
					if (dt_recebimento_ar_w IS NOT NULL AND dt_recebimento_ar_w::text <> '') and (coalesce(ie_resposta_w::text, '') = '') then
						ie_resposta_w := '12'; -- AR e Meta-Dados foram devolvidos com sucesso anteriormente
					-- Verifica se a solicitação já havia sido retornada com erro
					elsif (dt_recebimento_ar_w IS NOT NULL AND dt_recebimento_ar_w::text <> '') and (ie_resposta_w IS NOT NULL AND ie_resposta_w::text <> '') then
						ie_resposta_w := '13'; -- AR e Meta-Dados foram devolvidos com erro anteriormente
					else
						-- Verifica identificador da baixa
						if (coalesce(r02_w.ie_tipo_baixa::text, '') = '') then
							ie_resposta_w := '15'; -- Faltou imagem do AR ou Meta-Dados
						end if;

						-- Verifica número do aviso de recebimento
						if (coalesce(r02_w.nr_aviso_recebimento::text, '') = '') then
							ie_resposta_w := '15'; -- Faltou imagem do AR ou Meta-Dados
						end if;

						-- Verifica se o arquivo de AR é obrigatório
						if (current_setting('pls_ecarta_integracao_pck.pls_matriz_t')::pls_matriz_r.ie_ar_digital = 'S') then
							if (r02_w.nm_arquivo_ar IS NOT NULL AND r02_w.nm_arquivo_ar::text <> '') then
								-- Verifica se o arquivo é de extensão permitida
								ds_extensao_w := substr(r02_w.nm_arquivo_ar, instr(r02_w.nm_arquivo_ar, '.', -1), length(r02_w.nm_arquivo_ar));
								if (ds_extensao_w in ('.pdf', '.tif', '.jpg', '.jpeg')) then
									-- Verifica se o arquivo existe
									utl_file.fGetAttr(current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp, r02_w.nm_arquivo_ar, exists_w, file_length_w, blocksize_w);
									if (exists_w) then
										if (file_length_w = 0) then
											ie_resposta_w := '19'; -- Imagem de AR corrompida
										end if;
									else
										ie_resposta_w := '15'; -- Faltou imagem do AR ou Meta-Dados
									end if;
								else
									ie_resposta_w := '19'; -- Imagem de AR corrompida (extensão não permitida)
								end if;
							else
								ie_resposta_w := '15'; -- Faltou imagem do AR ou Meta-Dados
							end if;
						end if;
					end if;
				end if;
			else
				ie_resposta_w := '18'; -- Meta-Dados com informação corrompida (Solicitação não encontrada)
			end if;

			-- Verifica se a devolução possui inconsistencias
			if (ie_resposta_w IS NOT NULL AND ie_resposta_w::text <> '') then
				-- Verifica se a solicitação não foi encontrada
				if (ie_resposta_w = '18') then
					-- Carrega para uma lista global com as solicitações com problemas
					PERFORM set_config('pls_ecarta_integracao_pck.qt_solic_erro_w', current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22) + 1, false);
					current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).nr_seq_ecarta_lote	:= coalesce(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, nr_seq_lote_w);
					current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).nr_sequencia		:= r02_w.nr_solicitacao;
					current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).ie_tipo_baixa		:= ie_tipo_baixa_w;
					current_setting('pls_ecarta_integracao_pck.pls_solic_erro_t')::pls_solicitacao_row(current_setting('pls_ecarta_integracao_pck.qt_solic_erro_w')::numeric(22)).ie_resposta_devolucao	:= ie_resposta_w;
				else
					-- Verifica se a solicitação com problema existe
					if (current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%(type IS NOT NULL AND type::text <> '')) then
						-- Atualiza solicitação com erro
						update	pls_ecarta_solicitacao
						set	dt_recebimento_devolucao= clock_timestamp(),
							ie_resposta_devolucao	= ie_resposta_w,
							dt_atualizacao		= clock_timestamp(),
							nm_usuario		= current_setting('pls_ecarta_integracao_pck.nm_usuario_w')::usuario.nm_usuario%type
						where	nr_sequencia		= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type;
					end if;
				end if;

				-- Se a solicitação não foi encontrada, se ete
				if (ie_resposta_w in ('17', '18', '19')) then
					-- Seta variáveis globais
					nr_seq_solicitacao_w		:= null;
					PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
					PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_arquivo_solic_w', null, false);

					-- Registra log de alerta
					if (ie_resposta_w = '17') then
						CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'A solicitação "' || r02_w.nr_solicitacao || '", do lote "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type || '" foi devolvida pelos Correios porém esta já foi encerrada!', null, $$plsql_line);

						-- Retorna falha
						return false;
					elsif (ie_resposta_w = '18') then
						CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'A solicitação "' || r02_w.nr_solicitacao || '", do lote "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type || '" foi devolvida pelos Correios porém não existe na base de dados!', null, $$plsql_line);

						-- Retorna falha
						return false;
					elsif (ie_resposta_w = '19') then
						CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'A solicitação "' || r02_w.nr_solicitacao || '", do lote "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type || '" foi devolvida pelos Correios porém o aviso de recebimento não foi encontrado!', null, $$plsql_line);

						-- Retorna falha
						return false;
					end if;
				end if;
			else

				--//TODO: Os Correios ainda enviarão mais atributos (dados do recebedor, entregador etc);
				-- Atualiza solicitação com sucesso
				update	pls_ecarta_solicitacao
				set	dt_recebimento_devolucao= clock_timestamp(),
					dt_baixa		= clock_timestamp(),
					ie_tipo_baixa		= r02_w.ie_tipo_baixa,
					dt_entrega_ar		= to_date(r02_w.dt_entrega_ar, 'ddmmyyyy'),
					nr_aviso_recebimento	= r02_w.nr_aviso_recebimento,
					nr_etiqueta		= coalesce(r02_w.nr_etiqueta, nr_etiqueta),
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= current_setting('pls_ecarta_integracao_pck.nm_usuario_w')::usuario.nm_usuario%type
				where	nr_sequencia		= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type;

				-- Verifica se o tipo de baixa recebida existe no domínio
				if (r02_w.ie_tipo_baixa IS NOT NULL AND r02_w.ie_tipo_baixa::text <> '') and (coalesce(obter_valor_dominio(cd_dom_incons_w, r02_w.ie_tipo_baixa)::text, '') = '') then
					-- Inclui log de alerta
					CALL CALL pls_ecarta_integracao_pck.incluir_log('A', 'O tipo de baixa: "' || r02_w.ie_tipo_baixa || '" não existe no domínio "' || pls_ecarta_integracao_pck.obter_descricao_dominio(cd_dom_incons_w) || ' (' || cd_dom_incons_w || ')"!');
				end if;
			end if;

			-- Inclui arquivo zip de devolução para todas as solicitações do xml
			pls_arquivo_w.nr_seq_ecarta_solicitacao	:= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type;
			pls_arquivo_w.nm_arquivo		:= nm_arq_zip_p;
			pls_arquivo_w.ds_caminho		:= current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_recebidos_comp;
			if (r02_w.nr_aviso_recebimento IS NOT NULL AND r02_w.nr_aviso_recebimento::text <> '' AND r02_w.nm_arquivo_ar IS NOT NULL AND r02_w.nm_arquivo_ar::text <> '') then
				pls_arquivo_w.ie_aviso_recebimento := 'S';
			else
				pls_arquivo_w.ie_aviso_recebimento := 'N';
			end if;
			CALL pls_ecarta_integracao_pck.atualizar_arquivo(pls_arquivo_w);
		end loop;

		-- Seta variáveis globais
		PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
	end if;

	-- Seta variáveis globais
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

	-- Retorna sucesso
	return true;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_ecarta_integracao_pck.ler_arquivo_devolucao ( ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arquivo_p pls_ecarta_arquivo_solic.nm_arquivo%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type) FROM PUBLIC;
