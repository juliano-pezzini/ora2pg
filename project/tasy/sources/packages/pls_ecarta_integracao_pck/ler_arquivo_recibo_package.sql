-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_ecarta_integracao_pck.ler_arquivo_recibo ( ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arquivo_p pls_ecarta_arquivo_solic.nm_arquivo%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type) RETURNS boolean AS $body$
DECLARE

	-- variáveis
	xml		xml;
	qt_excedida_w	numeric(22);
	pls_arquivo_w	pls_arquivo_r;
	nr_seq_lote_w	pls_ecarta_log_integracao.nr_seq_ecarta_lote%type;

	-- Lote
	c01_w CURSOR FOR
	SELECT	extractValue(value(a), '*/nuLote')		as nr_lote,
		extractValue(value(a), '*/InformacaoLimite')	as qt_diaria_excedida
	from	table(xmlSequence(extract(xml, '/Mensagem'))) a;

	-- Solicitações
	c02_w CURSOR FOR
	SELECT	extractValue(value(b), 'AR/cdObjetoCliente')	as nr_solicitacao,
		extractValue(value(b), 'AR/nuEtiqueta')		as nr_etiqueta
	from	table(xmlSequence(extract(xml, '/Mensagem/arsNotificacao/*'))) b;
BEGIN
	-- Seta variáveis globais
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'ler arquivo de recibo de lote enviado', false);

	-- Carrega o conteúdo do arquivo xml
	xml := xmlparse(DOCUMENT, convert_from(dbms_XSLprocessor.read2clob(ds_caminho_p, nm_arquivo_p, nls_charset_id('UTF8')), 'utf-8'));

	-- Lê o cabeçalho do arquivo xml
	open c01_w;
	fetch c01_w into current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, qt_excedida_w;
	close c01_w;

	-- Atualiza o lote
	if (current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%(type IS NOT NULL AND type::text <> '')) then
		-- Verifica se o lote existe não está encerrado
		if (pls_ecarta_integracao_pck.obter_existencia_lote(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type)) then
			-- Verifica se a quantidade diária foi excedida
			if ((qt_excedida_w IS NOT NULL AND qt_excedida_w::text <> '') and qt_excedida_w > 0) then
				-- Inclui log de alerta
				CALL CALL pls_ecarta_integracao_pck.incluir_log('A', 'A quantidade de solicitações do dia ' || to_char(clock_timestamp(), 'dd/mm/yyyy') || ' foi excedida em ' || qt_excedida_w || ' solicitações!', null, $$plsql_line);
			end if;
		else
			nr_seq_lote_w		:= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type;
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w', null, false);
			CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'O lote: "' || nr_seq_lote_w || '" não existe ou está encerrado!', null, $$plsql_line);

			-- Retorna falha
			return false;
		end if;
	end if;

	-- Processa as solicitações
	for r02_w in c02_w loop
		-- Seta variáveis globais
		PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', r02_w.nr_solicitacao, false);

		-- Atualiza a solicitação
		if (current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%(type IS NOT NULL AND type::text <> '') and current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%(type IS NOT NULL AND type::text <> '')) then
			-- Verifica se a solicitação existe não está encerrada
			if (pls_ecarta_integracao_pck.obter_existencia_solicitacao(current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type, current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type)) then
				-- Atualiza a solicitação
				update	pls_ecarta_solicitacao
				set	dt_recebimento_notificacao	= clock_timestamp(),
					nr_etiqueta			= coalesce(r02_w.nr_etiqueta, nr_etiqueta),
					dt_atualizacao			= clock_timestamp(),
					nm_usuario			= current_setting('pls_ecarta_integracao_pck.nm_usuario_w')::usuario.nm_usuario%type
				where	nr_sequencia			= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type;

				-- Inclui arquivo zip de recibo para todas as solicitações do xml
				pls_arquivo_w.nr_seq_ecarta_solicitacao	:= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w')::pls_ecarta_solicitacao.nr_sequencia%type;
				pls_arquivo_w.nm_arquivo		:= nm_arq_zip_p;
				pls_arquivo_w.ds_caminho		:= current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_recebidos_comp;
				CALL pls_ecarta_integracao_pck.atualizar_arquivo(pls_arquivo_w);

				-- Seta variáveis globais
				PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'ler arquivo de recibo de lote enviado', false);
			else
				PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
				CALL CALL pls_ecarta_integracao_pck.incluir_log('E', 'A solicitação: "' || r02_w.nr_solicitacao || '" não existe, está encerrada ou não pertence ao lote "' || current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type|| '"!', null, $$plsql_line);

				-- Retorna falha
				return false;
			end if;
		end if;
	end loop;

	-- Seta variáveis globais
	PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'buscar lotes', false);

	-- Retorna sucesso
	return true;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_ecarta_integracao_pck.ler_arquivo_recibo ( ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arquivo_p pls_ecarta_arquivo_solic.nm_arquivo%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type) FROM PUBLIC;
