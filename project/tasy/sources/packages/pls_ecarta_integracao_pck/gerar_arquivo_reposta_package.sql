-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_ecarta_integracao_pck.gerar_arquivo_reposta (pls_solicitacao_p pls_solicitacao_row, ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type, ie_existente_p boolean default true) AS $body$
DECLARE

	-- variáveis
	doc		xmlDOM.DOMDocument;
	msg_node	xmlDOM.DOMNode;
	corp_node	xmlDOM.DOMNode;
	ar_node		xmlDOM.DOMNode;
	item_node	xmlDOM.DOMNode;
	doc_elmt	xmlDOM.DOMElement;
	cdata_sct	xmlDOM.DOMCDATASection;
	--
	nm_arquivo_w	pls_ecarta_arquivo_solic.nm_arquivo%type;
	--
	pls_arquivo_w	pls_arquivo_r;
	nr_seq_lote_w	pls_ecarta_log_integracao.nr_seq_ecarta_lote%type;
BEGIN
	-- Seta variáveis globais
	PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'gerar arquivo de resposta', false);

	-- Cria o documento xml
	doc	 := xmlDOM.newDOMDocument;
	xmlDOM.setVersion(doc, '1.0');

	-- Cria o cabeçalho do documento xml
	msg_node := xmlDOM.makeNode(doc);
	doc_elmt := xmlDOM.createElement(doc, 'Mensagem');
	xmlDOM.setAttribute(doc_elmt, 'xmlns:xs', 'http://www.w3.org/2001/XMLSchema');
	msg_node := xmlDOM.appendChild(msg_node, xmlDOM.makeNode(doc_elmt));
	--
	doc_elmt := xmlDOM.createElement(doc, 'corpoMensagem');
	corp_node := xmlDOM.appendChild(msg_node, xmlDOM.makeNode(doc_elmt));

	-- Processa as solicitações
	for i in pls_solicitacao_p.first..pls_solicitacao_p.last loop
		-- Seta variáveis globais
		if (ie_existente_p) then
			nr_seq_lote_w			:= current_setting('pls_ecarta_integracao_pck.nr_seq_ecarta_lote_w')::pls_ecarta_lote.nr_sequencia%type;
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', pls_solicitacao_p[i].nr_sequencia, false);
		else
			nr_seq_lote_w			:= pls_solicitacao_p[i].nr_seq_ecarta_lote;
			PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_solicitacao_w', null, false);
		end if;
		PERFORM set_config('pls_ecarta_integracao_pck.nr_seq_ecarta_arquivo_solic_w', null, false);

		-- Atributos do lote
		doc_elmt := xmlDOM.createElement(doc, 'AR');
		ar_node := xmlDOM.appendChild(corp_node, xmlDOM.makeNode(doc_elmt));

		-- Atributos da solicitação
		doc_elmt := xmlDOM.createElement(doc, 'cdObjetoCliente');
		item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
		cdata_sct := xmlDOM.createCDATASection(doc, pls_solicitacao_p[i].nr_sequencia);
		item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

		doc_elmt := xmlDOM.createElement(doc, 'nuLote');
		item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
		cdata_sct := xmlDOM.createCDATASection(doc, pls_solicitacao_p[i].nr_seq_ecarta_lote);
		item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

		-- Verifica o tipo de retorno da resposta
		if (pls_solicitacao_p[i]coalesce(.ie_resposta_devolucao::text, '') = '') then
			doc_elmt := xmlDOM.createElement(doc, 'deResposta');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, 'A');
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'nuEtiqueta');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, pls_solicitacao_p[i].nr_etiqueta);
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'cdMotivo');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, null);
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'desMotivo');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, null);
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));
		else
			doc_elmt := xmlDOM.createElement(doc, 'deResposta');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, 'R');
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'nuEtiqueta');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, pls_solicitacao_p[i].nr_etiqueta);
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'cdMotivo');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));
			cdata_sct := xmlDOM.createCDATASection(doc, pls_solicitacao_p[i].ie_resposta_devolucao);
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));

			doc_elmt := xmlDOM.createElement(doc, 'desMotivo');
			item_node := xmlDOM.appendChild(ar_node, xmlDOM.makeNode(doc_elmt));

			cdata_sct := xmlDOM.createCDATASection(doc, obter_valor_dominio(8749, pls_solicitacao_p[i].ie_resposta_devolucao));
			item_node := xmlDOM.appendChild(item_node, xmlDOM.makeNode(cdata_sct));
		end if;

		if (ie_existente_p) then
			-- Atualiza data de envio
			update	pls_ecarta_solicitacao
			set	dt_envio_resposta_devolucao	= clock_timestamp(),
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= current_setting('pls_ecarta_integracao_pck.nm_usuario_w')::usuario.nm_usuario%type
			where	nr_sequencia			= pls_solicitacao_p[i].nr_sequencia;

			-- Inclui arquivo zip para todas as solicitações respondidas
			pls_arquivo_w.nr_seq_ecarta_solicitacao	:= pls_solicitacao_p[i].nr_sequencia;
			pls_arquivo_w.nm_arquivo		:= nm_arq_zip_p;
			pls_arquivo_w.ds_caminho		:= ds_caminho_p;
			CALL pls_ecarta_integracao_pck.atualizar_arquivo(pls_arquivo_w);

			-- Seta variáveis globais
			PERFORM set_config('pls_ecarta_integracao_pck.nm_procedimento_w', 'gerar arquivo de resposta', false);
		end if;
	end loop;

	-- Para manter 2 arquivos, um com erros de lotes existes e outro com lotes não existentes, é somado 1 no segundos
	if (ie_existente_p) then
		-- Define o nome do arquivo xml
		nm_arquivo_w := 'e-Carta_' || current_setting('pls_ecarta_integracao_pck.pls_matriz_t')::pls_matriz_r.cd_identificador || '_devolucaoAR_' || nr_seq_lote_w || '_' || to_char(clock_timestamp(), 'DDMMYYYYHH24MISS') ||
				'_resposta_' || to_char(clock_timestamp(), 'DDMMYYYYHH24MISS') || '.xml';
	else
		-- Define o nome do arquivo xml
		nm_arquivo_w := 'e-Carta_' || current_setting('pls_ecarta_integracao_pck.pls_matriz_t')::pls_matriz_r.cd_identificador || '_devolucaoAR_' || nr_seq_lote_w || '_' || to_char(clock_timestamp(), 'DDMMYYYYHH24MISS') ||
				'_resposta_' || to_char(clock_timestamp(), 'DDMMYYYYHH24MI') || trim(both to_char((to_char(clock_timestamp(), 'SS'))::numeric  + 1, '00')) || '.xml';
	end if;

	-- Salva o arquivo xml
	xmlDOM.writeToFile(doc, current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp || current_setting('pls_ecarta_integracao_pck.ie_barra_w')::varchar(1) || nm_arquivo_w, 'UTF-8');
	xmlDOM.freeDocument(doc);

	-- Adiciona o arquivo xml na lista de arquivos processados
	PERFORM set_config('pls_ecarta_integracao_pck.qt_arq_w', current_setting('pls_ecarta_integracao_pck.qt_arq_w')::numeric(22) + 1, false);
	current_setting('pls_ecarta_integracao_pck.pls_arquivo_t')::pls_arquivo_row(current_setting('pls_ecarta_integracao_pck.qt_arq_w')::numeric(22)).nm_arquivo := nm_arquivo_w;
	current_setting('pls_ecarta_integracao_pck.pls_arquivo_t')::pls_arquivo_row(current_setting('pls_ecarta_integracao_pck.qt_arq_w')::numeric(22)).ds_caminho := current_setting('pls_ecarta_integracao_pck.pls_parametro_t')::pls_parametro_r.ds_dir_temp_comp;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ecarta_integracao_pck.gerar_arquivo_reposta (pls_solicitacao_p pls_solicitacao_row, ds_caminho_p pls_ecarta_arquivo_solic.ds_caminho%type, nm_arq_zip_p pls_ecarta_arquivo_solic.nm_arquivo%type, ie_existente_p boolean default true) FROM PUBLIC;
