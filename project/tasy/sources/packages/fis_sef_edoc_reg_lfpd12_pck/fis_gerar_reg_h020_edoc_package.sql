-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Registro H020: REGISTRO DE INVENTÁRIO
CREATE OR REPLACE PROCEDURE fis_sef_edoc_reg_lfpd12_pck.fis_gerar_reg_h020_edoc () AS $body$
DECLARE


--Variaveis
qt_cursor_h020_w bigint:=0;

nr_seq_fis_sef_edoc_h020_w	fis_sef_edoc_h020.nr_sequencia%type;

c_reg_h020 CURSOR FOR
	SELECT 	0		ind_dt,
		clock_timestamp()		dt_inv,
		sum(vl_item)	vl_estq,
		sum(vl_icms)	vl_icms_rec,
		sum(vl_ipi)	vl_ipi_rec,
		sum(vl_pis)	vl_pis_rec,
		sum(vl_cofins)	vl_cofins_rec,
		sum(vl_trib_nc)	vl_trib_nc,
		sum(vl_item - vl_trib_nc) vl_estq_nc,
		null		num_lcto,
		null 		cod_inf_obs
	from (
		SELECT	sum(a.vl_custo_medio) vl_unit,
			sum(a.qt_estoque) qt_item,
			sum(a.vl_estoque) vl_item,
			0 vl_icms,
			0 vl_ipi,
			0 vl_pis,
			0 vl_cofins,
			0 vl_trib_nc
		FROM material b, saldo_estoque a
LEFT OUTER JOIN material_fiscal c ON (a.cd_material = c.cd_material)
WHERE a.cd_material 		= b.cd_material and a.cd_estabelecimento 	= cd_estabelecimento_w and fim_mes(a.dt_mesano_referencia) 	= fim_mes(dt_inicio_apuracao_w)  group by 	a.cd_material,
				c.ie_tipo_fiscal
		
union all

		select	sum(a.vl_custo_medio) vl_unit,
			sum(a.qt_estoque) qt_item,
			sum(a.vl_estoque) vl_item,
			0 vl_icms,
			0 vl_ipi,
			0 vl_pis,
			0 vl_cofins,
			0 vl_trib_nc
		FROM material b, fornecedor_mat_consignado a
LEFT OUTER JOIN material_fiscal c ON (a.cd_material = c.cd_material)
WHERE a.cd_material 		= b.cd_material and a.cd_estabelecimento 	= cd_estabelecimento_w and fim_mes(a.dt_mesano_referencia) 	= fim_mes(dt_inicio_apuracao_w)  group by 	a.cd_material,
				c.ie_tipo_fiscal,
				a.cd_fornecedor) alias18
	group by 0, clock_timestamp() , null, null;


--Criação do array com o tipo sendo do cursor eespecificado - c_reg_0150
type reg_c_reg_h020 is table of c_reg_h020%RowType;
vetregh020 reg_c_reg_h020;

--Criação do array com o tipo sendo do cursor eespecificado - fis_sef_edoc_h020
type registro_h020 is table of fis_sef_edoc_h020%rowtype index by integer;
fis_registros_h020_w registro_h020;

BEGIN

open c_reg_h020;
loop
fetch c_reg_h020 bulk collect into vetregh020 limit 1000;
	for i in 1 .. vetregh020.Count loop
		begin

		--Incrementa a variavel para o array
		qt_cursor_h020_w:=	qt_cursor_h020_w + 1;

		if (current_setting('fis_sef_edoc_reg_lfpd12_pck.ie_gerou_dados_bloco_w')::varchar(1) = 'N') then
			PERFORM set_config('fis_sef_edoc_reg_lfpd12_pck.ie_gerou_dados_bloco_w', 'S', false);
		end if;

		--Pega a sequencia da taleba fis_sef_edoc_ para o insert
		select	nextval('fis_sef_edoc_h020_seq')
		into STRICT	nr_seq_fis_sef_edoc_h020_w
		;

		--Inserindo valores no array para realização do forall posteriormente
		fis_registros_h020_w[qt_cursor_h020_w].nr_sequencia 		:= nr_seq_fis_sef_edoc_h020_w;
		fis_registros_h020_w[qt_cursor_h020_w].dt_atualizacao 		:= clock_timestamp();
		fis_registros_h020_w[qt_cursor_h020_w].nm_usuario 		:= current_setting('fis_sef_edoc_reg_lfpd12_pck.nm_usuario_w')::usuario.nm_usuario%type;
		fis_registros_h020_w[qt_cursor_h020_w].dt_atualizacao_nrec	:= clock_timestamp();
		fis_registros_h020_w[qt_cursor_h020_w].nm_usuario_nrec 		:= current_setting('fis_sef_edoc_reg_lfpd12_pck.nm_usuario_w')::usuario.nm_usuario%type;
		fis_registros_h020_w[qt_cursor_h020_w].cd_reg 			:= 'H020';
		fis_registros_h020_w[qt_cursor_h020_w].cd_ind_dt		:= vetregh020[i].ind_dt;
		fis_registros_h020_w[qt_cursor_h020_w].dt_inv			:= current_setting('fis_sef_edoc_reg_lfpd12_pck.dt_inventario_w')::fis_sef_edoc_controle.dt_fim_apuracao%type;
		fis_registros_h020_w[qt_cursor_h020_w].vl_estq			:= vetregh020[i].vl_estq;
		fis_registros_h020_w[qt_cursor_h020_w].vl_icms_rec		:= vetregh020[i].vl_icms_rec;
		fis_registros_h020_w[qt_cursor_h020_w].vl_ipi_rec		:= vetregh020[i].vl_ipi_rec;
		fis_registros_h020_w[qt_cursor_h020_w].vl_pis_rec		:= vetregh020[i].vl_pis_rec;
		fis_registros_h020_w[qt_cursor_h020_w].vl_cofins_rec		:= vetregh020[i].vl_cofins_rec;
		fis_registros_h020_w[qt_cursor_h020_w].vl_trib_nc		:= vetregh020[i].vl_trib_nc;
		fis_registros_h020_w[qt_cursor_h020_w].vl_estq_nc		:= vetregh020[i].vl_estq_nc;
		fis_registros_h020_w[qt_cursor_h020_w].nr_lcto			:= vetregh020[i].num_lcto;
		fis_registros_h020_w[qt_cursor_h020_w].cd_inf_obs		:= vetregh020[i].cod_inf_obs;

		fis_registros_h020_w[qt_cursor_h020_w].nr_seq_controle		:= current_setting('fis_sef_edoc_reg_lfpd12_pck.nr_seq_controle_w')::fis_sef_edoc_controle.nr_sequencia%type;

		--Insere registro caso for maior que 1000 a array
		if (fis_registros_h020_w.count >= 1000) then
		begin
		  --Inserindo registros definitivamente na tabela especifica - FIS_SEF_EDOC_C300
		  forall i in fis_registros_h020_w.first .. fis_registros_h020_w.last

		  insert into fis_sef_edoc_h020 values fis_registros_h020_w(i);

		  fis_registros_h020_w.delete;

		  commit;

		end;
		end if;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_h020 */
end loop;
close c_reg_h020;

--Insere registro caso for maior que 1000 a array
if (fis_registros_h020_w.count > 0) then
begin
	--Inserindo registros definitivamente na tabela especifica - FIS_SEF_EDOC_C300
	forall i in fis_registros_h020_w.first .. fis_registros_h020_w.last

	insert into fis_sef_edoc_h020 values fis_registros_h020_w(i);

	fis_registros_h020_w.delete;

	commit;

end;
end if;

-- Executa o detalhe do h020
CALL fis_sef_edoc_reg_lfpd12_pck.fis_gerar_reg_h030_edoc(nr_seq_fis_sef_edoc_h020_w);


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_sef_edoc_reg_lfpd12_pck.fis_gerar_reg_h020_edoc () FROM PUBLIC;
