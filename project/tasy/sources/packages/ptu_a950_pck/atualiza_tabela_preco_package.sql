-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ptu_a950_pck.atualiza_tabela_preco ( nr_seq_arq_xml_p pls_imp_arq_A950.nr_sequencia%type, cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Usa como base a tabela de preco passada, e atualiza conforme o A950
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[ ]  Objetos do dicionario [X] Tasy (Delphi/Java) [ X] Portal [ X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dt_vigencia_w	pls_imp_arq_A950.dt_inicio_vigencia%type;
i		integer;

-- tabelas virtuais
tb_rowid_w			dbms_sql.varchar2_table;
tb_nr_auxiliares_amb_w		dbms_sql.number_table;
tb_qt_filme_amb_w		dbms_sql.number_table;
tb_nr_porte_anest_amb_w		dbms_sql.number_table;

tb_vl_procedimento_w		dbms_sql.number_table;
tb_vl_medico_w			dbms_sql.number_table;
tb_vl_custo_operacional_w	dbms_sql.number_table;

-- carrega as inf da HM
c01 CURSOR(	nr_seq_arq_xml_pc	pls_imp_arq_A950.nr_sequencia%type,
		cd_edicao_amb_pc	edicao_amb.cd_edicao_amb%type,
		dt_vigencia_pc		pls_imp_arq_A950.dt_inicio_vigencia%type) is
with a950 as (	SELECT	x.cd_procedimento_uni,
			x.nr_auxiliares_amb,
			x.qt_filme_amb,
			x.nr_porte_anest_amb
		from	pls_imp_arq_a950_hm	x
		where	x.nr_seq_arq_a950	= nr_seq_arq_xml_pc)
select	a.oid,
	b.nr_auxiliares_amb,
	b.qt_filme_amb,
	b.nr_porte_anest_amb
from	preco_tuss			a,
	a950				b
where	a.cd_procedimento		= b.cd_procedimento_uni
and	a.cd_edicao_amb			= cd_edicao_amb_pc
and	trunc(dt_vigencia_pc, 'dd')	between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;


-- carrega as inf da SADT
c02 CURSOR(	nr_seq_arq_xml_pc	pls_imp_arq_A950.nr_sequencia%type,
		cd_edicao_amb_pc	edicao_amb.cd_edicao_amb%type,
		dt_vigencia_pc		pls_imp_arq_A950.dt_inicio_vigencia%type) is
with a950 as (	SELECT	x.cd_procedimento_uni,
			x.vl_procedimento,
			x.vl_medico,
			x.vl_custo_operacional
		from	pls_imp_arq_a950_sadt	x
		where	x.nr_seq_arq_a950	= nr_seq_arq_xml_pc)
select	a.oid,
	b.vl_procedimento,
	b.vl_medico,
	b.vl_custo_operacional
from	preco_tuss			a,
	a950				b
where	a.cd_procedimento		= b.cd_procedimento_uni
and	a.cd_edicao_amb			= cd_edicao_amb_pc
and	trunc(dt_vigencia_pc, 'dd')	between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;


BEGIN

-- busca a data de vigencia do A950
select	max(a.dt_inicio_vigencia)
into STRICT	dt_vigencia_w
from	pls_imp_arq_A950	a
where	a.nr_sequencia		= nr_seq_arq_xml_p;

-- dados relacionados ao HM
open c01(nr_seq_arq_xml_p, cd_edicao_amb_p, dt_vigencia_w);
loop
	fetch c01 bulk collect into	tb_rowid_w,
					tb_nr_auxiliares_amb_w,
					tb_qt_filme_amb_w,
					tb_nr_porte_anest_amb_w limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_rowid_w.count = 0;
	
	forall i in tb_rowid_w.first..tb_rowid_w.last
		update	preco_tuss		a
		set	a.nr_auxiliares_amb	= tb_nr_auxiliares_amb_w(i),
			a.qt_filme_amb		= tb_qt_filme_amb_w(i),
			a.nr_porte_anest_amb	= tb_nr_porte_anest_amb_w(i),
			a.dt_atualizacao	= clock_timestamp(),
			a.nm_usuario		= nm_usuario_p
		where	a.rowid			= tb_rowid_w(i);
	
	commit;
	
	tb_rowid_w.delete;
	tb_nr_auxiliares_amb_w.delete;
	tb_qt_filme_amb_w.delete;
	tb_nr_porte_anest_amb_w.delete;
	
end loop;


if (c01%isopen) then

	close c01;
end if;


-- dados relacionados ao sadt
open c02(nr_seq_arq_xml_p, cd_edicao_amb_p, dt_vigencia_w);
loop
	fetch c02 bulk collect into	tb_rowid_w,
					tb_vl_procedimento_w,
					tb_vl_medico_w,
					tb_vl_custo_operacional_w limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_rowid_w.count = 0;
	
	forall i in tb_rowid_w.first..tb_rowid_w.last
		update	preco_tuss		a
		set	a.vl_procedimento	= tb_vl_procedimento_w(i),
			a.vl_medico		= tb_vl_medico_w(i),
			a.vl_custo_operacional	= tb_vl_custo_operacional_w(i),
			a.dt_atualizacao	= clock_timestamp(),
			a.nm_usuario		= nm_usuario_p
		where	a.rowid			= tb_rowid_w(i);
	
	commit;
	
	tb_rowid_w.delete;
	tb_vl_procedimento_w.delete;
	tb_vl_medico_w.delete;
	tb_vl_custo_operacional_w.delete;
	
end loop;


if (c02%isopen) then

	close c02;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a950_pck.atualiza_tabela_preco ( nr_seq_arq_xml_p pls_imp_arq_A950.nr_sequencia%type, cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
