-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ptu_a950_pck.gera_tabela_preco ( nr_seq_arq_xml_p pls_imp_arq_A950.nr_sequencia%type, cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera os itens na tabela de preco, que existem apenas no A950 selecionado.

		Os Itens terao a origem cadastradata da tabela de preco
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[ ]  Objetos do dicionario [X] Tasy (Delphi/Java) [ X] Portal [ X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
-- tabelas virtuais
tb_nr_auxiliares_amb_w		dbms_sql.number_table;
tb_qt_filme_amb_w		dbms_sql.number_table;
tb_nr_porte_anest_amb_w		dbms_sql.number_table;
tb_cd_procedimento_uni_w	dbms_sql.number_table;
tb_vl_procedimento_w		dbms_sql.number_table;
tb_vl_medico_w			dbms_sql.number_table;
tb_vl_custo_operacional_w	dbms_sql.number_table;
tb_vl_porte_rol_w      dbms_sql.number_table;	

i				integer;	
ie_origem_proced_tab_w		edicao_amb.ie_origem_proced%type;
dt_inicio_vigencia_w		pls_imp_arq_A950.dt_inicio_vigencia%type;

-- carrega os A950 que nao existem na tabela selecionada para HM
c01 CURSOR(	nr_seq_arq_xml_pc	pls_imp_arq_A950.nr_sequencia%type,
		cd_edicao_amb_pc	edicao_amb.cd_edicao_amb%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type) FOR
SELECT	x.cd_procedimento_uni,
	x.nr_auxiliares_amb,
	x.qt_filme_amb,
	x.nr_porte_anest_amb,
	x.vl_proc_rol
from	pls_imp_arq_a950_hm	x
where	x.cd_procedimento_uni	in (	select	a.cd_procedimento_uni
					from	pls_imp_arq_a950_hm	a
					where	a.nr_seq_arq_a950	= nr_seq_arq_xml_pc
					EXCEPT
					SELECT	a.cd_procedimento
					from	preco_tuss	a
					where	a.cd_edicao_amb	= cd_edicao_amb_pc)
and	exists (select	1
		from	procedimento		a
		where	a.cd_procedimento	= x.cd_procedimento_uni
		and	a.ie_origem_proced	= ie_origem_proced_pc)
and	x.nr_seq_arq_a950	= nr_seq_arq_xml_pc;


-- carrega os A950 que nao existem na tabela selecionada para SADT
c02 CURSOR(	nr_seq_arq_xml_pc	pls_imp_arq_A950.nr_sequencia%type,
		cd_edicao_amb_pc	edicao_amb.cd_edicao_amb%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type) FOR
SELECT	x.cd_procedimento_uni,
	x.vl_procedimento,
	x.vl_medico,
	x.vl_custo_operacional
from	pls_imp_arq_a950_sadt	x
where	x.cd_procedimento_uni	in (	select	a.cd_procedimento_uni
					from	pls_imp_arq_a950_sadt	a
					where	a.nr_seq_arq_a950	= nr_seq_arq_xml_pc
					EXCEPT
					SELECT	a.cd_procedimento
					from	preco_tuss	a
					where	a.cd_edicao_amb	= cd_edicao_amb_pc)
and	exists (select	1
		from	procedimento		a
		where	a.cd_procedimento	= x.cd_procedimento_uni
		and	a.ie_origem_proced	= ie_origem_proced_pc)
and	x.nr_seq_arq_a950	= nr_seq_arq_xml_pc;


BEGIN

-- dados da tabela de preco
select	max(a.ie_origem_proced)
into STRICT	ie_origem_proced_tab_w
from	edicao_amb	a
where	a.cd_edicao_amb	= cd_edicao_amb_p;

-- dados do arquivo A950
select	max(a.dt_inicio_vigencia)
into STRICT	dt_inicio_vigencia_w
from	pls_imp_arq_A950	a
where	a.nr_sequencia		= nr_seq_arq_xml_p;

-- carrega os hm que devem ser inseridos para HM
open c01(nr_seq_arq_xml_p, cd_edicao_amb_p, ie_origem_proced_tab_w);
loop
	fetch c01 bulk collect into	tb_cd_procedimento_uni_w,
					tb_nr_auxiliares_amb_w,
					tb_qt_filme_amb_w,
					tb_nr_porte_anest_amb_w,
					tb_vl_porte_rol_w	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_cd_procedimento_uni_w.count = 0;
	
	forall i in tb_cd_procedimento_uni_w.first..tb_cd_procedimento_uni_w.last
		insert into preco_tuss(	nr_sequencia,
					cd_edicao_amb,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					cd_procedimento,
					ie_origem_proced,
					dt_inicio_vigencia,
					ie_situacao,
					nr_auxiliares_amb,
					qt_filme_amb,
					nr_porte_anest_amb,
					vl_medico,
					vl_procedimento)
	
		values (nextval('preco_tuss_seq'),
			cd_edicao_amb_p,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			tb_cd_procedimento_uni_w(i),
			ie_origem_proced_tab_w,
			dt_inicio_vigencia_w,
			'A',
			tb_nr_auxiliares_amb_w(i),
			tb_qt_filme_amb_w(i),
			tb_nr_porte_anest_amb_w(i),
			tb_vl_porte_rol_w(i),
			tb_vl_porte_rol_w(i));
	commit;
	
	tb_cd_procedimento_uni_w.delete;
	tb_nr_auxiliares_amb_w.delete;
	tb_qt_filme_amb_w.delete;
	tb_nr_porte_anest_amb_w.delete;	
	tb_vl_porte_rol_w.delete;
	
end loop;

if (c01%isopen) then
	
	close c01;
end if;


-- carrega os hm que devem ser inseridos para sadt
open c02(nr_seq_arq_xml_p, cd_edicao_amb_p, ie_origem_proced_tab_w);
loop
	fetch c02 bulk collect into	tb_cd_procedimento_uni_w,
					tb_vl_procedimento_w,
					tb_vl_medico_w,
					tb_vl_custo_operacional_w limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_cd_procedimento_uni_w.count = 0;
	
	forall i in tb_cd_procedimento_uni_w.first..tb_cd_procedimento_uni_w.last
		insert into preco_tuss(	nr_sequencia,
					cd_edicao_amb,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					cd_procedimento,
					ie_origem_proced,
					dt_inicio_vigencia,
					ie_situacao,
					vl_procedimento,
					vl_filme,
					vl_custo_operacional)
	
		values (nextval('preco_tuss_seq'),
			cd_edicao_amb_p,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			tb_cd_procedimento_uni_w(i),
			ie_origem_proced_tab_w,
			dt_inicio_vigencia_w,
			'A',
			tb_vl_procedimento_w(i),
			tb_vl_medico_w(i),
			tb_vl_custo_operacional_w(i));
	commit;
	
	tb_cd_procedimento_uni_w.delete;
	tb_vl_procedimento_w.delete;
	tb_vl_medico_w.delete;
	tb_vl_custo_operacional_w.delete;
end loop;

if (c02%isopen) then
	
	close c02;
end if;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a950_pck.gera_tabela_preco ( nr_seq_arq_xml_p pls_imp_arq_A950.nr_sequencia%type, cd_edicao_amb_p edicao_amb.cd_edicao_amb%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
