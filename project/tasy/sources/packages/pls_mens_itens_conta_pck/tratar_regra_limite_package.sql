-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_mens_itens_conta_pck.tratar_regra_limite ( nr_seq_regra_limite_p pls_regra_limite_copartic.nr_sequencia%type, nr_seq_conta_copartic_p pls_conta_coparticipacao.nr_sequencia%type, nr_seq_conta_co_p pls_conta_co.nr_sequencia%type, nr_seq_conta_pos_p pls_conta_pos_estabelecido.nr_sequencia%type, nr_seq_conta_pos_mat_p pls_conta_pos_mat.nr_sequencia%type, nr_seq_conta_pos_proc_p pls_conta_pos_proc.nr_sequencia%type, vl_max_item_p pls_regra_limite_copartic.vl_max_copartic%type, ie_acao_p pls_regra_limite_copartic.ie_acao%type, nm_usuario_p usuario.nm_usuario%type, ie_gerar_item_zerado_p INOUT text, vl_item_gerado_mes_p INOUT pls_conta_coparticipacao.vl_coparticipacao%type, vi_item_p INOUT pls_conta_coparticipacao.vl_coparticipacao%type) AS $body$
DECLARE


vl_item_mens_w			double precision;
vl_saldo_item_w			pls_conta_coparticipacao.vl_coparticipacao%type;


BEGIN

vl_saldo_item_w			:= vi_item_p;

--Caso a coparticipacao ja gerada seja maior, entao 0 a coparticipacao

if (vl_item_gerado_mes_p >= vl_max_item_p) then
	vl_saldo_item_w		:= 0;
	if (ie_acao_p = 1) then --Se a acao da regra for "Desconsiderar", deve gerar na mensalidade com valor zerado
		if (nr_seq_conta_copartic_p IS NOT NULL AND nr_seq_conta_copartic_p::text <> '') then
			update	pls_conta_coparticipacao
			set	vl_copartic_mens		= 0,
				nr_seq_regra_limite_copartic	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_copartic_p;
		elsif (nr_seq_conta_co_p IS NOT NULL AND nr_seq_conta_co_p::text <> '') then
			update	pls_conta_co
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_co_p;
		elsif (nr_seq_conta_pos_p IS NOT NULL AND nr_seq_conta_pos_p::text <> '') then
			update	pls_conta_pos_estabelecido
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_p;
		elsif (nr_seq_conta_pos_mat_p IS NOT NULL AND nr_seq_conta_pos_mat_p::text <> '') then
			update	pls_conta_pos_mat
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_mat_p;
		elsif (nr_seq_conta_pos_proc_p IS NOT NULL AND nr_seq_conta_pos_proc_p::text <> '') then
			update	pls_conta_pos_proc
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_proc_p;
		end if;

		ie_gerar_item_zerado_p	:= 'S';
	end if;
--Caso a coparticipacao ja gerada e mais a que vai ser gerada seja maior

elsif	((vl_item_gerado_mes_p + vl_saldo_item_w) > vl_max_item_p) then
	vl_item_mens_w	:= vl_max_item_p - vl_item_gerado_mes_p;

	vl_saldo_item_w	:= vl_item_mens_w;

	if (ie_acao_p = 1) then
		if (nr_seq_conta_copartic_p IS NOT NULL AND nr_seq_conta_copartic_p::text <> '') then
			update	pls_conta_coparticipacao
			set	vl_copartic_mens		= vl_item_mens_w,
				nr_seq_regra_limite_copartic	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_copartic_p;
		elsif (nr_seq_conta_co_p IS NOT NULL AND nr_seq_conta_co_p::text <> '') then
			update	pls_conta_co
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_co_p;
		elsif (nr_seq_conta_pos_p IS NOT NULL AND nr_seq_conta_pos_p::text <> '') then
			update	pls_conta_pos_estabelecido
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_p;
		elsif (nr_seq_conta_pos_mat_p IS NOT NULL AND nr_seq_conta_pos_mat_p::text <> '') then
			update	pls_conta_pos_mat
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_mat_p;
		elsif (nr_seq_conta_pos_proc_p IS NOT NULL AND nr_seq_conta_pos_proc_p::text <> '') then
			update	pls_conta_pos_proc
			set	nr_seq_regra_limite_mens	= nr_seq_regra_limite_p,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_proc_p;
		end if;
	end if;
end if;

vi_item_p			:= vl_saldo_item_w;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mens_itens_conta_pck.tratar_regra_limite ( nr_seq_regra_limite_p pls_regra_limite_copartic.nr_sequencia%type, nr_seq_conta_copartic_p pls_conta_coparticipacao.nr_sequencia%type, nr_seq_conta_co_p pls_conta_co.nr_sequencia%type, nr_seq_conta_pos_p pls_conta_pos_estabelecido.nr_sequencia%type, nr_seq_conta_pos_mat_p pls_conta_pos_mat.nr_sequencia%type, nr_seq_conta_pos_proc_p pls_conta_pos_proc.nr_sequencia%type, vl_max_item_p pls_regra_limite_copartic.vl_max_copartic%type, ie_acao_p pls_regra_limite_copartic.ie_acao%type, nm_usuario_p usuario.nm_usuario%type, ie_gerar_item_zerado_p INOUT text, vl_item_gerado_mes_p INOUT pls_conta_coparticipacao.vl_coparticipacao%type, vi_item_p INOUT pls_conta_coparticipacao.vl_coparticipacao%type) FROM PUBLIC;
