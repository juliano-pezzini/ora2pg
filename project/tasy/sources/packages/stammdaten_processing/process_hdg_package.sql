-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE stammdaten_processing.process_hdg ( import_p w_xdok_import.NR_SEQUENCIA%type, nm_usuario_p grupo_proc.NM_USUARIO%TYPE default 'TASYLOAD') AS $body$
DECLARE

	
    	IE_ORIGEM_PROCED_W              AREA_PROCEDIMENTO.IE_ORIGEM_PROCED%type := 50;
		current_setting('stammdaten_processing.ds_area_procedimento_w')::AREA_PROCEDIMENTO.DS_AREA_PROCEDIMENTO%type          AREA_PROCEDIMENTO.DS_AREA_PROCEDIMENTO%type := 'HDG_LIST';
		cd_area_count_w                 bigint;
		cd_area_procedimento_seq_w      area_procedimento.cd_area_procedimento%type;
		nm_counter_w                    bigint;
		DS_ESPECIALIDADE_W              ESPECIALIDADE_PROC.DS_ESPECIALIDADE%type;
		CD_ESPECIALIDADE_W              ESPECIALIDADE_PROC.CD_ESPECIALIDADE%type;
		CD_DEFAULT_SPECIALITY_W         ESPECIALIDADE_PROC.CD_ESPECIALIDADE_LOC%type := 'HDG99';
		DS_DEF_ESPECIALIDADE_W          ESPECIALIDADE_PROC.DS_ESPECIALIDADE%type := 'HDG - Others';
		CD_GRUPO_PROC_LOC_W             GRUPO_PROC.CD_GRUPO_PROC_LOC%type;
		DS_GRUPO_PROC_W                 GRUPO_PROC.DS_GRUPO_PROC%type;
		CD_GRUPO_PROC_W_v               GRUPO_PROC.CD_GRUPO_PROC%type;
		CD_GRUPO_PROC_LOC_V_W           GRUPO_PROC.CD_GRUPO_PROC_LOC%type := 'HDG99.99';
		NR_SEQUENCIA_w                  compl_grupo_proc.NR_SEQUENCIA%type;
		cd_group_count_w                bigint;
		GROUP_CODE_w_v                  W_XDOK_HDG_TREE_INFO_AUT.GROUP_CODE%type;
		CD_GRUPO_PROC_w                 grupo_proc.CD_GRUPO_PROC%type;
		cd_group_count_w_v              bigint;
		VL_BD_MEAN_VALUE_W              compl_grupo_proc.VL_BD_MEAN_VALUE%type;
		VL_SPLIT_CONDITION_W            compl_grupo_proc.VL_SPLIT_CONDITION%type;

	
BEGIN 
	
		SELECT COUNT(1) INTO STRICT cd_area_count_w
		FROM AREA_PROCEDIMENTO
		WHERE DS_AREA_PROCEDIMENTO = current_setting('stammdaten_processing.ds_area_procedimento_w')::AREA_PROCEDIMENTO.DS_AREA_PROCEDIMENTO%type;

		begin
			if (cd_area_count_w = 0) then 
				SELECT MAX(cd_area_procedimento) + 1 INTO STRICT cd_area_procedimento_seq_w
				FROM area_procedimento;

				INSERT
				INTO AREA_PROCEDIMENTO(
					CD_AREA_PROCEDIMENTO,
					DS_AREA_PROCEDIMENTO,
					DT_ATUALIZACAO,
					NM_USUARIO,
					IE_ORIGEM_PROCED,
					CD_ORIGINAL,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					CD_SISTEMA_ANT
				)
				VALUES (
					cd_area_procedimento_seq_w,
					current_setting('stammdaten_processing.ds_area_procedimento_w')::AREA_PROCEDIMENTO.DS_AREA_PROCEDIMENTO%type,
					clock_timestamp(),
					nm_usuario_p,
					IE_ORIGEM_PROCED_W,
					cd_area_procedimento_seq_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_area_procedimento_seq_w
				);
			else
				SELECT MAX(cd_area_procedimento) INTO STRICT cd_area_procedimento_seq_w 
				FROM area_procedimento 
				WHERE DS_AREA_PROCEDIMENTO = current_setting('stammdaten_processing.ds_area_procedimento_w')::AREA_PROCEDIMENTO.DS_AREA_PROCEDIMENTO%type;
			end if;

			commit;
		end;

		begin 

			FOR rHdg in current_setting('stammdaten_processing.chdg')::CURSOR(NR_SEQ_IMPORT_V(import_p) LOOP 

				SELECT COUNT(1) into STRICT nm_counter_w 
				FROM ESPECIALIDADE_PROC 
				WHERE CD_ESPECIALIDADE_LOC = rHdg.HDGMEL AND ie_origem_proced = IE_ORIGEM_PROCED_W;
				
				if ( nm_counter_w = 0 ) then
					SELECT  MAX(CD_ESPECIALIDADE) + 1 INTO STRICT CD_ESPECIALIDADE_W FROM ESPECIALIDADE_PROC;
					INSERT INTO ESPECIALIDADE_PROC(
						CD_ESPECIALIDADE,
						DS_ESPECIALIDADE,
						DT_ATUALIZACAO,
						NM_USUARIO,
						CD_AREA_PROCEDIMENTO,
						CD_ESPECIALIDADE_MEDICA,
						IE_ORIGEM_PROCED,
						CD_ORIGINAL,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC,
						CD_SISTEMA_ANT,
						CD_ESPECIALIDADE_LOC
					)
					VALUES (
						CD_ESPECIALIDADE_W,
						SUBSTR(rHdg.TEXT, 1, 240),
						clock_timestamp(),
						nm_usuario_p,
						cd_area_procedimento_seq_w,
						null,
						IE_ORIGEM_PROCED_W,
						cd_area_procedimento_seq_w,
						clock_timestamp(),
						nm_usuario_p,
						cd_area_procedimento_seq_w,
						rHdg.HDGMEL
					);
				ELSE
					UPDATE especialidade_proc
					SET ds_especialidade = SUBSTR(rHdg.TEXT, 1, 240),
					DT_ATUALIZACAO_NREC     = clock_timestamp(),
					NM_USUARIO_NREC         = nm_usuario_p,
					CD_AREA_PROCEDIMENTO = cd_area_procedimento_seq_w
					WHERE CD_ESPECIALIDADE_LOC = rHdg.HDGMEL
					AND ie_origem_proced = IE_ORIGEM_PROCED_W;
				END IF;

			END LOOP;
			commit;
		end;

	begin
		FOR rTree in current_setting('stammdaten_processing.ctree')::CURSOR(NR_SEQ_IMPORT_V(import_p) LOOP
		begin
			
			SELECT COUNT(1) into STRICT nm_counter_w
			FROM grupo_proc
			WHERE cd_grupo_proc_loc = rTree.GRUPPE AND ie_origem_proced = IE_ORIGEM_PROCED_W;
			
			SELECT MAX(CD_ESPECIALIDADE) INTO STRICT CD_ESPECIALIDADE_W FROM ESPECIALIDADE_PROC where CD_ESPECIALIDADE_LOC = SUBSTR(rTree.GRUPPE,1,5) AND ie_origem_proced = IE_ORIGEM_PROCED_W;

			if ( nm_counter_w = 0 ) then
				SELECT MAX(cd_grupo_proc)+1 INTO STRICT cd_grupo_proc_w_v FROM grupo_proc;
				INSERT INTO grupo_proc(
					cd_grupo_proc,
					ds_grupo_proc,
					cd_especialidade,
					ie_situacao,
					dt_atualizacao,
					nm_usuario,
					ie_origem_proced,
					cd_original,
					ds_observacao,
					cd_sistema_ant,
					cd_grupo_proc_loc
				) VALUES (
					cd_grupo_proc_w_v,
					SUBSTR(rTree.BEZEICHNUNG, 1, 240),
					CD_ESPECIALIDADE_W,
					'A',
					clock_timestamp(),
					nm_usuario_p,
					IE_ORIGEM_PROCED_W,
					cd_grupo_proc_w_v,
					null,
					null,
					rTree.GRUPPE
				);
			else
				UPDATE grupo_proc
				SET ds_grupo_proc  = SUBSTR(rTree.BEZEICHNUNG, 1, 240),
				dt_atualizacao     = clock_timestamp(),
				nm_usuario         = nm_usuario_p,
				cd_especialidade   = CD_ESPECIALIDADE_W 
				WHERE cd_grupo_proc_loc = rTree.GRUPPE AND ie_origem_proced = IE_ORIGEM_PROCED_W;
			END IF;
			EXCEPTION
			WHEN no_data_found THEN
			CALL grava_log_tasy(52026, 'empty tables-' || substr(dbms_utility.format_call_stack,1,1960), 'praut');
		end;
		END LOOP;
		commit;

		SELECT COUNT(1) into STRICT nm_counter_w FROM grupo_proc
		where cd_grupo_proc_loc = CD_GRUPO_PROC_LOC_V_W AND ie_origem_proced = IE_ORIGEM_PROCED_W;

		SELECT  MAX(CD_ESPECIALIDADE) INTO STRICT CD_ESPECIALIDADE_W FROM ESPECIALIDADE_PROC
		where CD_ESPECIALIDADE_LOC = CD_DEFAULT_SPECIALITY_W AND ie_origem_proced = IE_ORIGEM_PROCED_W;

		if (nm_counter_w = 0) then
			SELECT MAX(cd_grupo_proc)+1 INTO STRICT cd_grupo_proc_w_v FROM grupo_proc;
			INSERT INTO grupo_proc(
				cd_grupo_proc,
				ds_grupo_proc,
				cd_especialidade,
				ie_situacao,
				dt_atualizacao,
				nm_usuario,
				ie_origem_proced,
				cd_original,
				ds_observacao,
				cd_sistema_ant,
				cd_grupo_proc_loc
			) VALUES (
				cd_grupo_proc_w_v,
				SUBSTR(DS_DEF_ESPECIALIDADE_W, 1, 240),
				CD_ESPECIALIDADE_W,
				'A',
				clock_timestamp(),
				nm_usuario_p,
				IE_ORIGEM_PROCED_W,
				cd_grupo_proc_w_v,
				null,
				null,
				CD_GRUPO_PROC_LOC_V_W
			);
		else
			UPDATE grupo_proc
			SET ds_grupo_proc    = SUBSTR(DS_DEF_ESPECIALIDADE_W, 1, 240),
			dt_atualizacao     = clock_timestamp(),
			nm_usuario         = nm_usuario_p,
			cd_especialidade = CD_ESPECIALIDADE_W --TO_NUMBER(SUBSTR(CD_GRUPO_PROC_LOC_V_W,4,2))
			WHERE cd_grupo_proc_loc = CD_GRUPO_PROC_LOC_V_W AND ie_origem_proced = IE_ORIGEM_PROCED_W;
		END IF;
		commit;

	end;
	
	begin
		for r03 IN current_setting('stammdaten_processing.cinfo')::CURSOR(NR_SEQ_IMPORT_V(import_p) loop
		begin
			SELECT COUNT(1) into STRICT cd_group_count_w FROM grupo_proc WHERE cd_grupo_proc_loc=r03.GROUP_CODE;

			if (cd_group_count_w = 0)then
				SELECT MAX(CD_ESPECIALIDADE) INTO STRICT CD_ESPECIALIDADE_W FROM ESPECIALIDADE_PROC
				WHERE CD_ESPECIALIDADE_LOC = SUBSTR(r03.GROUP_CODE,1,5) AND ie_origem_proced = IE_ORIGEM_PROCED_W;

				IF (coalesce(CD_ESPECIALIDADE_W::text, '') = '') THEN
					SELECT MAX(CD_ESPECIALIDADE) INTO STRICT CD_ESPECIALIDADE_W FROM ESPECIALIDADE_PROC
					WHERE CD_ESPECIALIDADE_LOC = CD_DEFAULT_SPECIALITY_W AND ie_origem_proced = IE_ORIGEM_PROCED_W;
				END IF;

				SELECT MAX(cd_grupo_proc) + 1 INTO STRICT cd_grupo_proc_w_v FROM grupo_proc;
				
				INSERT INTO grupo_proc(
					cd_grupo_proc,
					ds_grupo_proc,
					cd_especialidade,
					ie_situacao,
					dt_atualizacao,
					nm_usuario,
					ie_origem_proced,
					cd_original,
					ds_observacao,
					cd_sistema_ant,
					cd_grupo_proc_loc
				) VALUES (
					cd_grupo_proc_w_v,
					SUBSTR(r03.GROUP_DESC, 1, 240),
					CD_ESPECIALIDADE_W,
					'A',
					clock_timestamp(),
					nm_usuario_p,
					IE_ORIGEM_PROCED_W,
					cd_grupo_proc_w_v,
					null,
					null, 
					r03.GROUP_CODE
				);

			end if;

			SELECT MAX(GROUP_CODE) into STRICT GROUP_CODE_w_v FROM W_XDOK_HDG_TREE_INFO_AUT WHERE CD_UID=r03.CD_UID;
			SELECT MAX(CD_GRUPO_PROC) into STRICT CD_GRUPO_PROC_w FROM grupo_proc WHERE cd_grupo_proc_loc=GROUP_CODE_w_v;
			SELECT COUNT(1) INTO STRICT cd_group_count_w_v FROM compl_grupo_proc WHERE CD_GRUPO_PROC=CD_GRUPO_PROC_w;

			if (cd_group_count_w_v = 0)then
				for r04 IN current_setting('stammdaten_processing.cesp')::CURSOR(CD_UID_W_V(r03.CD_UID, import_p) loop
					if (coalesce(r04.LEFTSUCC_OR_TERMINAL_ND,0)='-99')then
						VL_BD_MEAN_VALUE_W := r04.BD_MEAN_VALUE;
						VL_SPLIT_CONDITION_w := NULL;
					ELSE
						VL_SPLIT_CONDITION_w := r04.BD_MEAN_VALUE;
						VL_BD_MEAN_VALUE_W := NULL;
					end if;

					insert into compl_grupo_proc(
						CD_GRUPO_PROC,
						NR_SEQUENCIA,
						VL_LEFT_SUCCESSOR,
						VL_LDF_POINTS,
						VL_CONTACT_POINTS,
						VL_PERFORMANCE_POINTS,
						VL_PERFORMANCE_SURCHARGE,
						VL_BD_LOW_LIMIT,
						VL_BD_UPPER_LIMIT,
						VL_BD_MEAN_VALUE,
						VL_SPLIT_CONDITION,
						VL_SPLIT_CHAR_NUM,
						VL_SPLIT_CHAR_AN,
						DT_ATUALIZACAO,
						NM_USUARIO,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC
					)
					VALUES (
						CD_GRUPO_PROC_w,
						nextval('compl_grupo_proc_seq'),
						r04.LEFTSUCC_OR_TERMINAL_ND,
						r04.LDF_POINTS,
						r04.CONTACT_POINTS,
						r04.PERFORMANCE_POINTS,
						r04.PERFORMANCE_SURCHARGE,
						r04.BD_LOW_LIMIT,
						r04.BD_UPPER_LIMIT,
						VL_BD_MEAN_VALUE_W,
						VL_SPLIT_CONDITION_W,
						r04.SPLIT_CHAR_NUM,
						r04.SPLIT_CHAR_AN,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p
					);
				end loop;
			end if;
		end;
		end loop;
		COMMIT;
	END;
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE stammdaten_processing.process_hdg ( import_p w_xdok_import.NR_SEQUENCIA%type, nm_usuario_p grupo_proc.NM_USUARIO%TYPE default 'TASYLOAD') FROM PUBLIC;
