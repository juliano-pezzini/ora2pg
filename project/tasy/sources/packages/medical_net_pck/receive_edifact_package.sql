-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE medical_net_pck.receive_edifact (edifact_message_p text, ds_path_p text) AS $body$
DECLARE

	message_clob_w	text;
	json_edifact_w	philips_json;

	r_unb_w		r_get_unb;
	r_unh_w		r_get_unh;
	r_bgm_w		r_get_bgm;
	r_ftx_w		r_get_ftx;
	r_nad_w		r_get_nad;

	message_edifact			varchar(30000);

	nr_episodio_w			episodio_paciente.nr_episodio%type;
	dt_nascimento_w			timestamp;
	ds_given_name_w			varchar(255);
	ds_family_name_w		varchar(255);
	pessoa_fisica_w			pessoa_fisica%rowtype;
	episodio_paciente_w		episodio_paciente%rowtype;
	pessoa_titular_convenio_w	pessoa_titular_convenio%rowtype;
	atendimento_paciente_w		atendimento_paciente%rowtype;

	log_mensagem_mednet_w		log_mensagem_mednet%rowtype;
	prescr_procedimento_w		prescr_procedimento%rowtype;

	ds_titulo_laudo_w		varchar(70);
	ds_laudo_w			varchar(280);
	nr_acesso_dicom_w		varchar(30);
	nr_seq_laudo_w     		bigint;
	sqlerrm_w			varchar(4000);

	
BEGIN

	json_edifact_w := philips_json(edifact_json_converter(edifact_message_p));
	dbms_lob.createtemporary(message_clob_w, true);
	json_edifact_w.(message_clob_w);
	message_edifact := CAST(message_clob_w AS text);

	if (DBMS_LOB.position('%UNB%'  in message_clob_w) > 0 ) then
		r_unb_w := medical_net_pck.process_edifact_unb(message_clob_w);
	end if;

	if (DBMS_LOB.position('%UNH%' in message_clob_w) > 0 ) then
		r_unh_w := medical_net_pck.process_edifact_unh(message_clob_w);
	end if;
	if (DBMS_LOB.position('%BGM%' in message_clob_w) > 0 ) then
		r_bgm_w := medical_net_pck.process_edifact_bgm(message_clob_w);
	end if;

	if (DBMS_LOB.position('%FTX%' in message_clob_w) > 0 ) then
		r_ftx_w := medical_net_pck.process_edifact_ftx(message_clob_w);
	end if;

	if (DBMS_LOB.position('%NAD%' in message_clob_w) > 0 ) then
		r_nad_w := medical_net_pck.process_edifact_nad(message_clob_w);
	end if;


	nr_episodio_w		:=	r_nad_w.caseNumber;
	dt_nascimento_w		:=	to_date(r_bgm_w.birthDate,'yyyymmdd');
	ds_given_name_w		:=	upper(r_nad_w.givenName);
	ds_family_name_w	:=	upper(r_nad_w.surname);

	begin
	select	*
	into STRICT	episodio_paciente_w
	from	episodio_paciente
	where	nr_episodio = nr_episodio_w;

	select	*
	into STRICT	pessoa_fisica_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = episodio_paciente_w.cd_pessoa_fisica;
	exception
	when others then
		begin
		select	pf.*
		into STRICT	pessoa_fisica_w
		from	pessoa_fisica pf,
			PERSON_NAME pn
		where	pf.NR_SEQ_PERSON_NAME = pn.NR_SEQUENCIA
		and	pf.dt_nascimento = dt_nascimento_w
		and	upper(ds_given_name) like ds_given_name_w
		and	upper(ds_family_name) like ds_family_name_w;
		exception
		when others then
			begin
			select	pf.*
			into STRICT	pessoa_fisica_w
			from	pessoa_fisica pf
			where	pf.dt_nascimento = dt_nascimento_w
			and	upper(obter_dados_pf(pf.cd_pessoa_fisica,'PNG')) like ds_given_name_w
			and	upper(obter_dados_pf(pf.cd_pessoa_fisica,'PNL')) like ds_family_name_w;		
			exception
			when others then
				pessoa_fisica_w	:=	null;
			end;
		end;

	begin
	select	*
	into STRICT	episodio_paciente_w
	from	episodio_paciente
	where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
	and	coalesce(dt_fim_episodio::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';
	exception
	when others then
		episodio_paciente_w	:=	null;
	end;	

	begin
	select	*
	into STRICT 	pessoa_titular_convenio_w
	from 	pessoa_titular_convenio
	where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
	and	coalesce(dt_inicio_vigencia::text, '') = ''
	and	dt_validade_carteira < clock_timestamp();
	exception
	when others then
		pessoa_titular_convenio_w	:=	null;
	end;

	begin
	select	*
	into STRICT 	atendimento_paciente_w
	from 	atendimento_paciente
	where	nr_seq_episodio = nr_episodio_w;
	exception
	when others then
		atendimento_paciente_w	:=	null;
	end;

	end;

	log_mensagem_mednet_w.cd_convenio		:=	pessoa_titular_convenio_w.cd_convenio;
	log_mensagem_mednet_w.cd_pessoa_fisica		:=	pessoa_fisica_w.cd_pessoa_fisica;
	log_mensagem_mednet_w.ds_edifact		:=	edifact_message_p;
	log_mensagem_mednet_w.ds_json			:=	message_edifact;
	--log_mensagem_mednet_w.ds_log			:=	ds_log_w;
	log_mensagem_mednet_w.dt_atualizacao		:=	clock_timestamp();
	log_mensagem_mednet_w.dt_atualizacao_nrec	:=	clock_timestamp();
	log_mensagem_mednet_w.dt_nascimento		:=	dt_nascimento_w;
	log_mensagem_mednet_w.dt_resultado		:=	to_date(r_bgm_w.reportDate,'yyyymmdd');
	log_mensagem_mednet_w.ie_envio_receb		:=	'R';
	log_mensagem_mednet_w.ie_medicalnet_dest	:=	r_unb_w.receiver;
	log_mensagem_mednet_w.ie_medicalnet_rem		:=	r_unb_w.sender;
	log_mensagem_mednet_w.ie_status			:=	'R';
	log_mensagem_mednet_w.nm_usuario		:=	'MedicalNet';
	log_mensagem_mednet_w.nm_usuario_nrec		:=	'MedicalNet';
	log_mensagem_mednet_w.nr_atendimento		:=	atendimento_paciente_w.nr_atendimento;
	log_mensagem_mednet_w.nr_episodio		:=	r_nad_w.caseNumber;
	/*log_mensagem_mednet_w.nr_seq_carta		:=	episodio_paciente_w.nr_seq_carta;
	log_mensagem_mednet_w.nr_seq_laudo		:=	episodio_paciente_w.nr_seq_laudo;
	*/
	select	nextval('log_mensagem_mednet_seq')
	into STRICT	log_mensagem_mednet_w.nr_sequencia
	;

	begin
	insert into log_mensagem_mednet values (log_mensagem_mednet_w.*);
	exception
	when others then
		log_mensagem_mednet_w	:=	null;
	end;

	nr_acesso_dicom_w	:=	r_unh_w.referenceNumber;

	if (nr_acesso_dicom_w IS NOT NULL AND nr_acesso_dicom_w::text <> '')	then

		select nextval('laudo_paciente_seq')
		into STRICT   nr_seq_laudo_w 
		;

		begin
		select	*
		into STRICT	prescr_procedimento_w
		from	prescr_procedimento
		where	nr_acesso_dicom	= nr_acesso_dicom_w
		and	dt_atualizacao_nrec > (clock_timestamp() - interval '60 days')
		order by nr_prescricao asc LIMIT 1;
		exception
		when no_data_found then
			begin
			select	*
			into STRICT	prescr_procedimento_w
			from	prescr_procedimento
			where	nr_acesso_dicom	= nr_acesso_dicom_w;		
			exception
			when others then
				prescr_procedimento_w   :=  null;
				update	log_mensagem_mednet
				set	dt_atualizacao = clock_timestamp(),
				ie_status = 'F', 
				ds_log =  'Error processing the Reference Number.'
				where	nr_sequencia = log_mensagem_mednet_w.nr_sequencia;
			end;
		end;

		ds_titulo_laudo_w	:=	r_ftx_w.text1;
		ds_laudo_w		:=	r_ftx_w.text2||r_ftx_w.text3||r_ftx_w.text4||r_ftx_w.text5;

		if (prescr_procedimento_w.nr_sequencia IS NOT NULL AND prescr_procedimento_w.nr_sequencia::text <> '') then
			begin
			CALL medical_net_pck.insere_laudo_medicalnet(prescr_procedimento_w.nr_prescricao,
				prescr_procedimento_w.nr_sequencia,
				nr_seq_laudo_w,
				log_mensagem_mednet_w.dt_resultado,
				0,
				ds_path_p,
				'MedicalNet',
				ds_titulo_laudo_w,
				ds_laudo_w);

			update	log_mensagem_mednet
			set	dt_atualizacao = clock_timestamp(),
				ie_status = 'S', 
				nr_seq_laudo = nr_seq_laudo_w 
			where	nr_sequencia = log_mensagem_mednet_w.nr_sequencia;
			exception
			when others then
				sqlerrm_w	:=	sqlerrm;
				update	log_mensagem_mednet
				set	dt_atualizacao = clock_timestamp(),
				ie_status = 'F', 
				ds_log =  sqlerrm_w
				where	nr_sequencia = log_mensagem_mednet_w.nr_sequencia;
			end;
		end if;
	end if;

	commit;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE medical_net_pck.receive_edifact (edifact_message_p text, ds_path_p text) FROM PUBLIC;
