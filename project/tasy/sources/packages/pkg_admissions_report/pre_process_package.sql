-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pkg_admissions_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_ADMISSIONS CURSOR FOR
      SELECT D.*,
             CASE WHEN D.IS_ELECTIVE=0 THEN  1  ELSE 0 END  IS_EMERGENT
        FROM (SELECT C.*,
                     PKG_ADMISSIONS_REPORT.GET_ELECTIVE_ADMISSION(C.NR_ATENDIMENTO) IS_ELECTIVE            
                FROM (SELECT B.*,
                             trim(both TO_CHAR(B.DT_ENTRY, 'Day', 'NLS_DATE_LANGUAGE = American')) DAY_OF_WEEK,
                             TRUNC(TO_CHAR(B.DT_ENTRY, 'HH24') / 4) + 1 RANGE_OF_DAY
                        FROM (SELECT A.*,
                                     PKG_ATEND_PAC_UNID.GET_ESTAB_DT(A.CD_ESTABELECIMENTO, A.DT_ENTRADA_SETOR) DT_ENTRY
                                FROM (SELECT S.CD_ESTABELECIMENTO,
                                             U.CD_SETOR_ATENDIMENTO,
                                             U.NR_ATENDIMENTO,
                                             MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR
                                        FROM ATEND_PACIENTE_UNIDADE U,
                                             SETOR_ATENDIMENTO S
                                       WHERE S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                                         AND CASE WHEN P_CD_ESTAB=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = P_CD_ESTAB
                                         AND CASE WHEN P_CD_SETOR=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = P_CD_SETOR
                                         AND EXISTS (SELECT 1
                                                      FROM USUARIO_SETOR US
                                                     WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                                                       AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                                         AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                                         AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                                         AND U.DT_ENTRADA_UNIDADE BETWEEN PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, P_START_DATE)
                                                                      AND PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(P_END_DATE, clock_timestamp()))
                                       GROUP BY U.NR_ATENDIMENTO,
                                                S.CD_ESTABELECIMENTO,
                                                U.CD_SETOR_ATENDIMENTO,
                                                PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO, U.DT_ENTRADA_UNIDADE, U.CD_SETOR_ATENDIMENTO))
                                     A)
                             B)
                     C)
             D;
    --
    TYPE T_ADMISSIONS IS TABLE OF C_ADMISSIONS%ROWTYPE;
    R_ADMISSIONS T_ADMISSIONS;
    --
    C_ADMISSIONS_BY_DAY CURSOR FOR
      SELECT A.CD_SETOR_ATENDIMENTO,
             SUM(A.IE_ELETIVA) ADM_ELECT,
             SUM(A.IE_EMERGENCIAL) ADM_EMERG,
             SUM(1) ADM_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Monday' THEN  IE_ELETIVA  ELSE 0 END ) MON_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Monday' THEN  IE_EMERGENCIAL  ELSE 0 END ) MON_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Monday' THEN  1  ELSE 0 END ) MON_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Tuesday' THEN  IE_ELETIVA  ELSE 0 END ) TUE_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Tuesday' THEN  IE_EMERGENCIAL  ELSE 0 END ) TUE_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Tuesday' THEN  1  ELSE 0 END ) TUE_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Wednesday' THEN  IE_ELETIVA  ELSE 0 END ) WED_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Wednesday' THEN  IE_EMERGENCIAL  ELSE 0 END ) WED_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Wednesday' THEN  1  ELSE 0 END ) WED_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Thursday' THEN  IE_ELETIVA  ELSE 0 END ) THU_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Thursday' THEN  IE_EMERGENCIAL  ELSE 0 END ) THU_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Thursday' THEN  1  ELSE 0 END ) THU_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Friday' THEN  IE_ELETIVA  ELSE 0 END ) FRI_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Friday' THEN  IE_EMERGENCIAL  ELSE 0 END ) FRI_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Friday' THEN  1  ELSE 0 END ) FRI_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Saturday' THEN  IE_ELETIVA  ELSE 0 END ) SAT_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Saturday' THEN  IE_EMERGENCIAL  ELSE 0 END ) SAT_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Saturday' THEN  1  ELSE 0 END ) SAT_TOTAL,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Sunday' THEN  IE_ELETIVA  ELSE 0 END ) SUN_ELECT,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Sunday' THEN  IE_EMERGENCIAL  ELSE 0 END ) SUN_EMERG,
             SUM(CASE WHEN A.DS_DIA_SEMANA='Sunday' THEN  1  ELSE 0 END ) SUN_TOTAL
        FROM W_ADMISSIONS_REPORT A
       GROUP BY A.CD_SETOR_ATENDIMENTO;
    --
    TYPE T_ADMISSIONS_BY_DAY IS TABLE OF C_ADMISSIONS_BY_DAY%ROWTYPE;
    R_ADMISSIONS_BY_DAY T_ADMISSIONS_BY_DAY;
    --
    C_ADMISSIONS_BY_RANGE CURSOR FOR
      SELECT B.CD_SETOR_ATENDIMENTO,
             B.NR INDEX_OF_DAY,
             B.DAY DAY_OF_WEEK,
             B.TOTAL_ELECT,
             B.TOTAL_EMERG,
             B.TOTAL_ADMIS,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=1 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_1_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=1 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_1_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=1 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_1_TOTAL,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=2 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_2_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=2 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_2_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=2 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_2_TOTAL,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=3 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_3_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=3 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_3_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=3 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_3_TOTAL,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=4 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_4_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=4 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_4_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=4 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_4_TOTAL,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=5 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_5_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=5 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_5_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=5 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_5_TOTAL,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=6 THEN  R.IE_ELETIVA  ELSE 0 END   ELSE 0 END ) RANGE_6_ELECT,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=6 THEN  R.IE_EMERGENCIAL  ELSE 0 END   ELSE 0 END ) RANGE_6_EMERG,
             SUM(CASE WHEN B.DAY=R.DS_DIA_SEMANA THEN  CASE WHEN R.NR_FAIXA_DIA=6 THEN  1  ELSE 0 END   ELSE 0 END ) RANGE_6_TOTAL
        FROM (WITH DAYS AS (WITH RECURSIVE cte AS (
SELECT LEVEL NR,
                                   CASE WHEN LEVEL=1 THEN  'Monday' WHEN LEVEL=2 THEN  'Tuesday' WHEN LEVEL=3 THEN  'Wednesday' WHEN LEVEL=4 THEN  'Thursday' WHEN LEVEL=5 THEN  'Friday' WHEN LEVEL=6 THEN  'Saturday'  ELSE 'Sunday' END  DAY

                            LEVEL <= 7  UNION ALL
SELECT LEVEL NR,
                                   CASE WHEN LEVEL=1 THEN  'Monday' WHEN LEVEL=2 THEN  'Tuesday' WHEN LEVEL=3 THEN  'Wednesday' WHEN LEVEL=4 THEN  'Thursday' WHEN LEVEL=5 THEN  'Friday' WHEN LEVEL=6 THEN  'Saturday'  ELSE 'Sunday' END  DAY
                              
                            LEVEL <= 7 JOIN cte c ON ()

) SELECT * FROM cte;
) 
              SELECT A.CD_SETOR_ATENDIMENTO,
                     D.*,
                     CASE WHEN D.NR=1 THEN  A.NR_SEG_ELET WHEN D.NR=2 THEN  A.NR_TER_ELET WHEN D.NR=3 THEN  A.NR_QUA_ELET WHEN D.NR=4 THEN  A.NR_QUI_ELET WHEN D.NR=5 THEN  A.NR_SEX_ELET WHEN D.NR=6 THEN  A.NR_SAB_ELET  ELSE A.NR_DOM_ELET END  TOTAL_ELECT,
                     CASE WHEN D.NR=1 THEN  A.NR_SEG_EMERG WHEN D.NR=2 THEN  A.NR_TER_EMERG WHEN D.NR=3 THEN  A.NR_QUA_EMERG WHEN D.NR=4 THEN  A.NR_QUI_EMERG WHEN D.NR=5 THEN  A.NR_SEX_EMERG WHEN D.NR=6 THEN  A.NR_SAB_EMERG  ELSE A.NR_DOM_EMERG END  TOTAL_EMERG,
                     CASE WHEN D.NR=1 THEN  A.NR_SEG_TOTAL WHEN D.NR=2 THEN  A.NR_TER_TOTAL WHEN D.NR=3 THEN  A.NR_QUA_TOTAL WHEN D.NR=4 THEN  A.NR_QUI_TOTAL WHEN D.NR=5 THEN  A.NR_SEX_TOTAL WHEN D.NR=6 THEN  A.NR_SAB_TOTAL  ELSE A.NR_DOM_TOTAL END  TOTAL_ADMIS    
                FROM W_ADMISSIONS_REPORT_BY_DAY A,
                     DAYS D) B,
             W_ADMISSIONS_REPORT R
       WHERE B.CD_SETOR_ATENDIMENTO = R.CD_SETOR_ATENDIMENTO
       GROUP BY B.CD_SETOR_ATENDIMENTO, B.NR, B.DAY, B.TOTAL_ELECT, B.TOTAL_EMERG, B.TOTAL_ADMIS;
    --
    TYPE T_ADMISSIONS_BY_RANGE IS TABLE OF C_ADMISSIONS_BY_RANGE%ROWTYPE;
    R_ADMISSIONS_BY_RANGE T_ADMISSIONS_BY_RANGE;
    --  
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;

    OPEN C_ADMISSIONS;
    LOOP
      FETCH C_ADMISSIONS BULK COLLECT INTO R_ADMISSIONS LIMIT 1000;

        BEGIN
          FOR i IN R_ADMISSIONS.FIRST..R_ADMISSIONS.LAST LOOP
            INSERT INTO W_ADMISSIONS_REPORT(
              cd_estabelecimento, 
              cd_setor_atendimento, 
              nr_atendimento, 
              dt_entrada, 
              ds_dia_semana, 
              nr_faixa_dia, 
              ie_eletiva, 
              ie_emergencial)
            VALUES (
              R_ADMISSIONS[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
              R_ADMISSIONS[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
              R_ADMISSIONS[i].NR_ATENDIMENTO, --nr_atendimento, 
              R_ADMISSIONS[i].DT_ENTRY, --dt_entrada, 
              R_ADMISSIONS[i].DAY_OF_WEEK, --ds_dia_semana,
              R_ADMISSIONS[i].RANGE_OF_DAY, --nr_faixa_dia, 
              R_ADMISSIONS[i].IS_ELECTIVE, --ie_eletiva, 
              R_ADMISSIONS[i].IS_EMERGENT); --is_emergencial)
          END LOOP;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
        COMMIT;

      EXIT WHEN NOT FOUND; /* apply on C_ADMISSIONS */
    END LOOP;
    CLOSE C_ADMISSIONS;

    OPEN C_ADMISSIONS_BY_DAY;
    LOOP
      FETCH C_ADMISSIONS_BY_DAY BULK COLLECT INTO R_ADMISSIONS_BY_DAY LIMIT 1000;

        BEGIN
          FOR i IN R_ADMISSIONS_BY_DAY.FIRST..R_ADMISSIONS_BY_DAY.LAST LOOP
            INSERT INTO W_ADMISSIONS_REPORT_BY_DAY(
              cd_setor_atendimento, 
              nr_adm_elet, 
              nr_adm_emerg, 
              nr_adm_total, 
              nr_seg_elet, 
              nr_seg_emerg, 
              nr_seg_total, 
              nr_ter_elet, 
              nr_ter_emerg, 
              nr_ter_total, 
              nr_qua_elet, 
              nr_qua_emerg, 
              nr_qua_total, 
              nr_qui_elet, 
              nr_qui_emerg, 
              nr_qui_total, 
              nr_sex_elet, 
              nr_sex_emerg, 
              nr_sex_total, 
              nr_sab_elet, 
              nr_sab_emerg, 
              nr_sab_total, 
              nr_dom_elet, 
              nr_dom_emerg, 
              nr_dom_total)
            VALUES (
              R_ADMISSIONS_BY_DAY[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
              R_ADMISSIONS_BY_DAY[i].ADM_ELECT, --nr_adm_elet, 
              R_ADMISSIONS_BY_DAY[i].ADM_EMERG, --nr_adm_emerg, 
              R_ADMISSIONS_BY_DAY[i].ADM_TOTAL, --nr_adm_total, 
              R_ADMISSIONS_BY_DAY[i].MON_ELECT, --nr_seg_elet, 
              R_ADMISSIONS_BY_DAY[i].MON_EMERG, --nr_seg_emerg, 
              R_ADMISSIONS_BY_DAY[i].MON_TOTAL, --nr_seg_total, 
              R_ADMISSIONS_BY_DAY[i].TUE_ELECT, --nr_ter_elet, 
              R_ADMISSIONS_BY_DAY[i].TUE_EMERG, --nr_ter_emerg, 
              R_ADMISSIONS_BY_DAY[i].TUE_TOTAL, --nr_ter_total, 
              R_ADMISSIONS_BY_DAY[i].WED_ELECT, --nr_qua_elet, 
              R_ADMISSIONS_BY_DAY[i].WED_EMERG, --nr_qua_emerg, 
              R_ADMISSIONS_BY_DAY[i].WED_TOTAL, --nr_qua_total, 
              R_ADMISSIONS_BY_DAY[i].THU_ELECT, --nr_qui_elet, 
              R_ADMISSIONS_BY_DAY[i].THU_EMERG, --nr_qui_emerg, 
              R_ADMISSIONS_BY_DAY[i].THU_TOTAL, --nr_qui_total, 
              R_ADMISSIONS_BY_DAY[i].FRI_ELECT, --nr_sex_elet, 
              R_ADMISSIONS_BY_DAY[i].FRI_EMERG, --nr_sex_emerg, 
              R_ADMISSIONS_BY_DAY[i].FRI_TOTAL, --nr_sex_total, 
              R_ADMISSIONS_BY_DAY[i].SAT_ELECT, --nr_sab_elet, 
              R_ADMISSIONS_BY_DAY[i].SAT_EMERG, --nr_sab_emerg, 
              R_ADMISSIONS_BY_DAY[i].SAT_TOTAL, --nr_sab_total, 
              R_ADMISSIONS_BY_DAY[i].SUN_ELECT, --nr_dom_elet, 
              R_ADMISSIONS_BY_DAY[i].SUN_EMERG, --nr_dom_emerg, 
              R_ADMISSIONS_BY_DAY[i].SUN_TOTAL); --nr_dom_total)
          END LOOP;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
        COMMIT;

      EXIT WHEN NOT FOUND; /* apply on C_ADMISSIONS_BY_DAY */
    END LOOP;
    CLOSE C_ADMISSIONS_BY_DAY;

    OPEN C_ADMISSIONS_BY_RANGE;
    LOOP
      FETCH C_ADMISSIONS_BY_RANGE BULK COLLECT INTO R_ADMISSIONS_BY_RANGE LIMIT 1000;

        BEGIN
          FOR i IN R_ADMISSIONS_BY_RANGE.FIRST..R_ADMISSIONS_BY_RANGE.LAST LOOP
            INSERT INTO W_ADMISSIONS_REP_BY_RANGE(
              cd_setor_atendimento, 
              nr_dia, 
              ds_dia, 
              nr_total_elet, 
              nr_total_emerg, 
              nr_total_admis, 
              nr_range_1_elet, 
              nr_range_1_emerg, 
              nr_range_1_total, 
              nr_range_2_elet, 
              nr_range_2_emerg, 
              nr_range_2_total, 
              nr_range_3_elet, 
              nr_range_3_emerg, 
              nr_range_3_total, 
              nr_range_4_elet, 
              nr_range_4_emerg, 
              nr_range_4_total, 
              nr_range_5_elet, 
              nr_range_5_emerg, 
              nr_range_5_total, 
              nr_range_6_elet, 
              nr_range_6_emerg, 
              nr_range_6_total)
            VALUES (
              R_ADMISSIONS_BY_RANGE[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento,
              R_ADMISSIONS_BY_RANGE[i].INDEX_OF_DAY, --nr_dia,
              R_ADMISSIONS_BY_RANGE[i].DAY_OF_WEEK, --ds_dia, 
              R_ADMISSIONS_BY_RANGE[i].TOTAL_ELECT, --nr_total_elet,
              R_ADMISSIONS_BY_RANGE[i].TOTAL_EMERG, --nr_total_emerg,
              R_ADMISSIONS_BY_RANGE[i].TOTAL_ADMIS, --nr_total_admis,
              R_ADMISSIONS_BY_RANGE[i].RANGE_1_ELECT, --nr_range_1_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_1_EMERG, --nr_range_1_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_1_TOTAL, --nr_range_1_total, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_2_ELECT, --nr_range_2_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_2_EMERG, --nr_range_2_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_2_TOTAL, --nr_range_2_total, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_3_ELECT, --nr_range_3_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_3_EMERG, --nr_range_3_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_3_TOTAL, --nr_range_3_total, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_4_ELECT, --nr_range_4_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_4_EMERG, --nr_range_4_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_4_TOTAL, --nr_range_4_total, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_5_ELECT, --nr_range_5_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_5_EMERG, --nr_range_5_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_5_TOTAL, --nr_range_5_total, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_6_ELECT, --nr_range_6_elet, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_6_EMERG, --nr_range_6_emerg, 
              R_ADMISSIONS_BY_RANGE[i].RANGE_6_TOTAL); --nr_range_6_total)
          END LOOP;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
        COMMIT;

      EXIT WHEN NOT FOUND; /* apply on C_ADMISSIONS_BY_RANGE */
    END LOOP;
    CLOSE C_ADMISSIONS_BY_RANGE;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_admissions_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint) FROM PUBLIC;
