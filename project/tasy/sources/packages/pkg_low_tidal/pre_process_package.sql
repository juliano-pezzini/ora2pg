-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pkg_low_tidal.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_POPULATION CURSOR(V_START_DATE timestamp,
                        V_END_DATE   timestamp) FOR
      SELECT a.cd_estabelecimento,
             a.cd_setor_atendimento,
             TO_CHAR(a.dt_entrada_setor, 'Q') quarter,
             TO_CHAR(a.dt_entrada_setor, 'YYYY') year,
             COUNT(a.nr_atendimento) patients,
             round((SUM(coalesce(a.dt_saida_setor, LEAST(V_END_DATE, clock_timestamp())) - a.dt_entrada_setor))::numeric, 1) patient_days,
             COUNT(apd.nr_atendimento) ventilated_patients,
             round((SUM(coalesce(apd.dt_retirada, coalesce(a.dt_saida_setor, LEAST(V_END_DATE, clock_timestamp()))) - apd.dt_instalacao))::numeric, 1) ventilated_days
        FROM (
              SELECT U.NR_ATENDIMENTO,
                     AP.CD_PESSOA_FISICA,
                     S.CD_ESTABELECIMENTO,
                     U.CD_SETOR_ATENDIMENTO,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE, clock_timestamp())) DT_FIM,
                     MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                     PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                          U.DT_ENTRADA_UNIDADE,
                                                          U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                     E.NM_FANTASIA_ESTAB,
                     S.DS_SETOR_ATENDIMENTO
                FROM ATENDIMENTO_PACIENTE AP
               INNER JOIN ATEND_PACIENTE_UNIDADE U
                  ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
               INNER JOIN SETOR_ATENDIMENTO S
                  ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                 AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
               INNER JOIN ESTABELECIMENTO E
                  ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
               WHERE U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                 AND EXISTS (SELECT 1
                      FROM USUARIO_SETOR US
                     WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                       AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                 AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE, clock_timestamp()))
                 AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                              U.DT_ENTRADA_UNIDADE,
                                                              U.CD_SETOR_ATENDIMENTO),
                         PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                     PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
               GROUP BY U.NR_ATENDIMENTO,
                        AP.CD_PESSOA_FISICA,
                        S.CD_ESTABELECIMENTO,
                        U.CD_SETOR_ATENDIMENTO,
                        PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                             U.DT_ENTRADA_UNIDADE,
                                                             U.CD_SETOR_ATENDIMENTO),
                        E.NM_FANTASIA_ESTAB,
                        S.DS_SETOR_ATENDIMENTO
           ) a
        LEFT JOIN(
             SELECT apd.nr_atendimento,
                    apd.dt_instalacao,
                    apd.dt_retirada
               FROM atend_pac_dispositivo apd
              INNER JOIN dispositivo d
                 ON d.nr_sequencia = apd.nr_seq_dispositivo
                AND d.ie_classif_disp_niss = 'VMI'
                AND d.ie_situacao = 'A'
           ) apd
          ON apd.nr_atendimento = a.nr_atendimento
         AND apd.dt_instalacao >= a.dt_entrada_setor
         AND(((a.dt_saida_setor IS NOT NULL AND a.dt_saida_setor::text <> '') AND apd.dt_instalacao <= a.dt_saida_setor) OR coalesce(a.dt_saida_setor::text, '') = '')
       WHERE a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
         AND (
              (
               TO_CHAR(a.dt_entrada_setor, 'Q') <= P_QUARTER
               AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR
              )
              OR (
               TO_CHAR(a.dt_entrada_setor, 'Q') > P_QUARTER
               AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR - 1
              )
             )
       GROUP BY a.cd_estabelecimento,
                a.cd_setor_atendimento,
                TO_CHAR(a.dt_entrada_setor, 'Q'),
                TO_CHAR(a.dt_entrada_setor, 'YYYY');
    --
    TYPE T_POPULATION IS TABLE OF C_POPULATION%ROWTYPE;
    R_POPULATION T_POPULATION;
    --
    C_LOW_TIDAL CURSOR(V_START_DATE timestamp,
                        V_END_DATE   timestamp,
                        V_SETOR      bigint,
                        V_PATIENT    text) FOR
        SELECT A.NR_ATENDIMENTO,
               A.DT_ENTRADA_SETOR,
               A.DT_SAIDA_SETOR,
               APD.DT_INSTALACAO,
               APD.DT_RETIRADA,
               AMR.DT_MONITORIZACAO,
               AMR.QT_VCI,
               AMR.QT_PPLATO,
               AMR.QT_REL_PAO2_FIO2,
               NULL QT_VT,
               AMR.QT_FIO2,
               DD.DT_INICIO DT_INICIO_ARDS,
               DD.DT_FIM DT_FIM_ARDS,
               AMR.CD_MOD_VENT,
               TO_CHAR(AMR.DT_MONITORIZACAO, 'Q') TRIMESTRE,
               TO_CHAR(AMR.DT_MONITORIZACAO, 'YYYY') ANO,
               A.CD_SETOR_ATENDIMENTO,
               A.CD_ESTABELECIMENTO,
               A.CD_PESSOA_FISICA,
               A.NM_PESSOA_FISICA,
               DA.DS_DIAGNOSTICO,
               A.SEXO,
               A.DT_NASCIMENTO,
               A.NR_CPF,
               A.QT_ALTURA_CM,
               A.DS_ETNIA,
               A.QT_PESO,
               A.NM_FANTASIA_ESTAB,
               A.DT_ENTRADA_HOSPITAL,
               A.DT_SAIDA_HOSPITAL,
               case
                 when obter_data_obito(a.cd_pessoa_fisica) >= A.DT_ENTRADA_HOSPITAL and (((A.DT_SAIDA_HOSPITAL IS NOT NULL AND A.DT_SAIDA_HOSPITAL::text <> '') and obter_data_obito(A.CD_PESSOA_FISICA) <= A.DT_SAIDA_HOSPITAL) or coalesce(A.DT_SAIDA_HOSPITAL::text, '') = '')
                 then 'Expired'
                 else 'Alive'
               end DS_DISP_HOSPITAL,
               A.DS_SETOR_ATENDIMENTO,
               OBTER_VALOR_DOMINIO_IDIOMA(1, OBTER_CLASSIF_SETOR(a.cd_setor_atendimento), 3) tipo_setor,
               OBTER_NOME_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(a.nr_atendimento, a.dt_entrada_setor, a.cd_setor_atendimento)) origem_admissao,
               CASE WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(a.nr_atendimento, a.dt_entrada_setor, a.cd_setor_atendimento)) IS NULL THEN  'Admit' WHEN OBTER_ESTABELECIMENTO_SETOR(PKG_ATEND_PAC_UNID.GET_PREV_UNIT(a.nr_atendimento, a.dt_entrada_setor, a.cd_setor_atendimento))=a.cd_estabelecimento THEN  'Unit Transfer'  ELSE 'Hospital Transfer' END  tipo_admissao,
               coalesce(PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(a.nr_atendimento, a.dt_entrada_setor, 'Y'), 'N') surgical_dx,
               PKG_ATEND_PAC_UNID.GET_DIGNOSIS_ADMIT_DATA(a.nr_atendimento, a.dt_entrada_setor, 'E') elective_surgery,
               pkg_vap_report.GET_REFACTORY_PATIENT_NAME(a.pessoa_resp) resp_unidade,
               case
                   when obter_data_obito(a.cd_pessoa_fisica) >= a.dt_entrada_setor and (((a.dt_saida_setor IS NOT NULL AND a.dt_saida_setor::text <> '') and obter_data_obito(a.cd_pessoa_fisica) <= a.dt_saida_setor) or coalesce(a.dt_saida_setor::text, '') = '')
                   then 'Expired'
                   else 'Alive'
               end DS_DISP_UNIDADE
          FROM (
                SELECT U.NR_ATENDIMENTO,
                       AP.CD_PESSOA_FISICA,
                       S.CD_ESTABELECIMENTO,
                       U.CD_SETOR_ATENDIMENTO,
                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                       MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                       PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                            U.DT_ENTRADA_UNIDADE,
                                                            U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR,
                       E.NM_FANTASIA_ESTAB,
                       S.DS_SETOR_ATENDIMENTO,
                       pkg_vap_report.GET_REFACTORY_PATIENT_NAME(p.nm_pessoa_fisica) NM_PESSOA_FISICA,
                       CASE WHEN p.ie_sexo='M' THEN  'Male' WHEN p.ie_sexo='F' THEN  'Female' END  sexo,
                       P.DT_NASCIMENTO,
                       P.NR_CPF,
                       P.QT_ALTURA_CM,
                       SE.DS_ETNIA,
                       P.QT_PESO,
                       AP.DT_ENTRADA DT_ENTRADA_HOSPITAL,
                       AP.DT_ALTA DT_SAIDA_HOSPITAL,
                       PF.NM_PESSOA_FISICA PESSOA_RESP
                  FROM ATENDIMENTO_PACIENTE AP
                 INNER JOIN PESSOA_FISICA P
                    ON P.CD_PESSOA_FISICA = AP.CD_PESSOA_FISICA
                  LEFT JOIN SUS_ETNIA SE
                    ON SE.NR_SEQUENCIA = P.NR_SEQ_ETNIA
                 INNER JOIN ATEND_PACIENTE_UNIDADE U
                    ON AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                 INNER JOIN SETOR_ATENDIMENTO S
                    ON S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                   AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                  LEFT JOIN PESSOA_FISICA PF
                    ON PF.CD_PESSOA_FISICA = S.CD_PESSOA_RESP
                 INNER JOIN ESTABELECIMENTO E
                    ON E.CD_ESTABELECIMENTO = S.CD_ESTABELECIMENTO
                 WHERE U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                   AND EXISTS (SELECT 1
                        FROM USUARIO_SETOR US
                       WHERE US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                         AND US.NM_USUARIO_PARAM = NM_USUARIO_W)
                   AND U.DT_ENTRADA_UNIDADE < PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp()))
                   AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                U.DT_ENTRADA_UNIDADE,
                                                                U.CD_SETOR_ATENDIMENTO),
                           PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                 GROUP BY U.NR_ATENDIMENTO,
                          AP.CD_PESSOA_FISICA,
                          S.CD_ESTABELECIMENTO,
                          U.CD_SETOR_ATENDIMENTO,
                          PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                               U.DT_ENTRADA_UNIDADE,
                                                               U.CD_SETOR_ATENDIMENTO),
                          E.NM_FANTASIA_ESTAB,
                          S.DS_SETOR_ATENDIMENTO,
                          pkg_vap_report.GET_REFACTORY_PATIENT_NAME(p.nm_pessoa_fisica),
                          CASE WHEN p.ie_sexo='M' THEN  'Male' WHEN p.ie_sexo='F' THEN  'Female' END ,
                          P.DT_NASCIMENTO,
                          P.NR_CPF,
                          P.QT_ALTURA_CM,
                          SE.DS_ETNIA,
                          P.QT_PESO,
                          AP.DT_ENTRADA,
                          AP.DT_ALTA,
                          PF.NM_PESSOA_FISICA
             ) a
         INNER JOIN atend_pac_dispositivo apd
            ON apd.nr_atendimento = a.nr_atendimento
           AND apd.dt_instalacao >= a.dt_entrada_setor
           AND (((a.dt_saida_setor IS NOT NULL AND a.dt_saida_setor::text <> '') AND apd.dt_instalacao <= a.dt_saida_setor) OR coalesce(a.dt_saida_setor::text, '') = '')
         INNER JOIN dispositivo d
            ON d.nr_sequencia = apd.nr_seq_dispositivo
           AND d.ie_classif_disp_niss = 'VMI'
           AND d.ie_situacao = 'A'
         INNER JOIN pessoa_fisica pf
            ON pf.cd_pessoa_fisica = a.cd_pessoa_fisica
           AND (pf.qt_altura_cm IS NOT NULL AND pf.qt_altura_cm::text <> '')
           AND (pf.ie_sexo IS NOT NULL AND pf.ie_sexo::text <> '')
           AND pf.ie_sexo IN ('M', 'F')
          LEFT JOIN atendimento_monit_resp amr
            ON amr.nr_atendimento = a.nr_atendimento
           AND amr.dt_monitorizacao >= apd.dt_instalacao
           AND (((apd.dt_retirada IS NOT NULL AND apd.dt_retirada::text <> '') AND apd.dt_retirada >= amr.dt_monitorizacao) OR coalesce(apd.dt_retirada::text, '') = '')
           AND a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
          LEFT JOIN diagnostico_doenca dd
            ON dd.nr_atendimento = a.nr_atendimento
           AND dd.ie_classificacao_doenca = 'P'
           AND dd.ie_tipo_diagnostico = 2
           AND dd.cd_doenca IN ('U04', 'U04.9')
           AND apd.dt_instalacao <= dd.dt_inicio
          LEFT JOIN(
               SELECT a.nr_atendimento,
                      a.ds_diagnostico,
                      a.ds_doenca_cid,
                      a.dt_liberacao
                 FROM (
                       SELECT dd.nr_atendimento,
                              dd.ds_diagnostico,
                              cd.ds_doenca_cid,
                              MIN(dd.dt_liberacao) dt_liberacao
                         FROM diagnostico_doenca dd
                        INNER JOIN cid_doenca cd
                           ON cd.cd_doenca_cid = dd.cd_doenca
                        WHERE dd.ie_classificacao_doenca = 'P'
                          AND dd.ie_tipo_diagnostico = 2
                        GROUP BY dd.nr_atendimento,
                                 dd.ds_diagnostico,
                                 cd.ds_doenca_cid
                    ) a
                INNER JOIN(
                      SELECT dd.nr_atendimento,
                             MIN(dd.dt_liberacao) dt_liberacao
                        FROM diagnostico_doenca dd
                       INNER JOIN cid_doenca cd
                          ON cd.cd_doenca_cid = dd.cd_doenca
                       WHERE dd.ie_classificacao_doenca = 'P'
                         AND dd.ie_tipo_diagnostico = 2
                       GROUP BY dd.nr_atendimento
                    ) b
                   ON a.nr_atendimento = b.nr_atendimento
                  AND a.dt_liberacao = b.dt_liberacao
             ) da
            ON da.nr_atendimento = a.nr_atendimento
         WHERE (
                 (
                  (amr.qt_vci IS NOT NULL AND amr.qt_vci::text <> '')
                  OR
                  (amr.qt_pplato IS NOT NULL AND amr.qt_pplato::text <> '')
                  OR
                  (amr.qt_rel_pao2_fio2 IS NOT NULL AND amr.qt_rel_pao2_fio2::text <> '')
                  -- OR
                  -- VT MLS/KG
                  OR
                  (amr.qt_fio2 IS NOT NULL AND amr.qt_fio2::text <> '')
                 )
                 AND (amr.dt_liberacao IS NOT NULL AND amr.dt_liberacao::text <> '')
                 AND a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
                 AND (
                      (
                       TO_CHAR(a.dt_entrada_setor, 'Q') <= P_QUARTER
                       AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR
                      )
                      OR (
                       TO_CHAR(a.dt_entrada_setor, 'Q') > P_QUARTER
                       AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR - 1
                      )
                     )
               )
               OR
               (
                (dd.dt_liberacao IS NOT NULL AND dd.dt_liberacao::text <> '')
                AND a.dt_entrada_setor BETWEEN V_START_DATE AND V_END_DATE
                 AND (
                      (
                       TO_CHAR(a.dt_entrada_setor, 'Q') <= P_QUARTER
                       AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR
                      )
                      OR (
                       TO_CHAR(a.dt_entrada_setor, 'Q') > P_QUARTER
                       AND TO_CHAR(a.dt_entrada_setor, 'YYYY') = P_YEAR - 1
                      )
                     )
               );
    --
    TYPE T_LOW_TIDAL IS TABLE OF C_LOW_TIDAL%ROWTYPE;
    R_LOW_TIDAL T_LOW_TIDAL;
    --
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;
    --
    OPEN C_POPULATION(P_START_DATE, P_END_DATE);
        LOOP
          FETCH C_POPULATION BULK COLLECT INTO R_POPULATION LIMIT 1000;

            BEGIN
              FOR i IN R_POPULATION.FIRST..R_POPULATION.LAST LOOP
              INSERT INTO w_low_tidal_population(
                     CD_ESTABELECIMENTO,
                     CD_SETOR_ATENDIMENTO,
                     NR_TRIMESTRE,
                     DT_ANO,
                     QT_PACIENTES,
                     QT_DIAS_PACIENTES,
                     QT_PACIENTES_VENTILADOS,
                     QT_DIAS_VENTILADOS
                )
              VALUES (
                     R_POPULATION[i].cd_estabelecimento,
                     R_POPULATION[i].cd_setor_atendimento,
                     R_POPULATION[i].quarter,
                     R_POPULATION[i].year,
                     R_POPULATION[i].patients,
                     R_POPULATION[i].patient_days,
                     R_POPULATION[i].ventilated_patients,
                     R_POPULATION[i].ventilated_days
                );
              END LOOP;
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_POPULATION */
        END LOOP;
        CLOSE C_POPULATION;
        --
    OPEN C_LOW_TIDAL(P_START_DATE,
                     P_END_DATE,
                     P_CD_SETOR,
                     NULL
                     );
        LOOP
          FETCH C_LOW_TIDAL BULK COLLECT INTO R_LOW_TIDAL LIMIT 1000;

            BEGIN
              FOR i IN R_LOW_TIDAL.FIRST..R_LOW_TIDAL.LAST LOOP
              INSERT INTO w_low_tidal(
                     NR_ATENDIMENTO,
                     DT_ENTRADA_SETOR,
                     DT_SAIDA_SETOR,
                     DT_INSTALACAO,
                     DT_RETIRADA,
                     DT_MONITORIZACAO,
                     QT_VCI,
                     QT_PPLATO,
                     QT_REL_PAO2_FIO2,
                     QT_VT,
                     QT_FIO2,
                     DT_INICIO_ARDS,
                     DT_FIM_ARDS,
                     CD_MOD_VENT,
                     NR_TRIMESTRE,
                     DT_ANO,
                     CD_SETOR_ATENDIMENTO,
                     CD_ESTABELECIMENTO,
                     CD_PESSOA_FISICA,
                     NM_PESSOA_FISICA,
                     DS_DIAGNOSTICO,
                     DS_GENERO,
                     DT_NASCIMENTO,
                     NR_DOCUMENTO,
                     QT_ALTURA_CM,
                     DS_ETNIA,
                     QT_PESO,
                     NM_FANTASIA_ESTAB,
                     DT_ENTRADA_HOSPITAL,
                     DT_SAIDA_HOSPITAL,
                     DS_DISP_HOSPITAL,
                     DS_SETOR_ATENDIMENTO,
                     DS_TIPO_UNIDADE,
                     DS_ORIGEM_ADMISSAO,
                     DS_TIPO_ADMISSAO,
                     IE_SURGICAL_DX,
                     NM_RESP_UNIDADE,
                     IE_ELECTIVE_SURGERY,
                     DS_DISP_UNIDADE
                )
              VALUES (
                     R_LOW_TIDAL[i].NR_ATENDIMENTO,
                     R_LOW_TIDAL[i].DT_ENTRADA_SETOR,
                     R_LOW_TIDAL[i].DT_SAIDA_SETOR,
                     R_LOW_TIDAL[i].DT_INSTALACAO,
                     R_LOW_TIDAL[i].DT_RETIRADA,
                     R_LOW_TIDAL[i].DT_MONITORIZACAO,
                     R_LOW_TIDAL[i].QT_VCI,
                     R_LOW_TIDAL[i].QT_PPLATO,
                     R_LOW_TIDAL[i].QT_REL_PAO2_FIO2,
                     R_LOW_TIDAL[i].QT_VT,
                     R_LOW_TIDAL[i].QT_FIO2,
                     R_LOW_TIDAL[i].DT_INICIO_ARDS,
                     R_LOW_TIDAL[i].DT_FIM_ARDS,
                     R_LOW_TIDAL[i].CD_MOD_VENT,
                     R_LOW_TIDAL[i].TRIMESTRE,
                     R_LOW_TIDAL[i].ANO,
                     R_LOW_TIDAL[i].CD_SETOR_ATENDIMENTO,
                     R_LOW_TIDAL[i].CD_ESTABELECIMENTO,
                     R_LOW_TIDAL[i].CD_PESSOA_FISICA,
                     R_LOW_TIDAL[i].NM_PESSOA_FISICA,
                     R_LOW_TIDAL[i].DS_DIAGNOSTICO,
                     R_LOW_TIDAL[i].SEXO,
                     R_LOW_TIDAL[i].DT_NASCIMENTO,
                     R_LOW_TIDAL[i].NR_CPF,
                     R_LOW_TIDAL[i].QT_ALTURA_CM,
                     R_LOW_TIDAL[i].DS_ETNIA,
                     R_LOW_TIDAL[i].QT_PESO,
                     R_LOW_TIDAL[i].NM_FANTASIA_ESTAB,
                     R_LOW_TIDAL[i].DT_ENTRADA_HOSPITAL,
                     R_LOW_TIDAL[i].DT_SAIDA_HOSPITAL,
                     R_LOW_TIDAL[i].DS_DISP_HOSPITAL,
                     R_LOW_TIDAL[i].DS_SETOR_ATENDIMENTO,
                     R_LOW_TIDAL[i].TIPO_SETOR,
                     R_LOW_TIDAL[i].ORIGEM_ADMISSAO,
                     R_LOW_TIDAL[i].TIPO_ADMISSAO,
                     R_LOW_TIDAL[i].SURGICAL_DX,
                     R_LOW_TIDAL[i].RESP_UNIDADE,
                     R_LOW_TIDAL[i].ELECTIVE_SURGERY,
                     R_LOW_TIDAL[i].DS_DISP_UNIDADE
                );
              END LOOP;
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_LOW_TIDAL */
        END LOOP;
        CLOSE C_LOW_TIDAL;
        --
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_low_tidal.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) FROM PUBLIC;
