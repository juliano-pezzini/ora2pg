-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

    
--//////////////////////////////////////////////////////////////////
CREATE OR REPLACE PROCEDURE nais_mla_internalpro.send_intprofs_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as ordernumber_p bigint) AS $body$
DECLARE

       PERFORM * from (
                        SELECT
                                CASE WHEN d.ie_alteracao='3' THEN '01' WHEN d.ie_alteracao='4' THEN '03' END                          process_classif,
                                'P0'                                                             order_class,
                                coalesce(co.nr_order_patient_seq, 0)                                  order_number,       
                                coalesce(c.medical_record_id,'0000000000')                            patient_identifier,       
                                coalesce(to_char(a.dt_inicio, 'YYYYMMDD'),'00000000')                 consultation_date,
                                case when (co.cd_especialidade_med IS NOT NULL AND co.cd_especialidade_med::text <> '') then 
                                coalesce(nais_mla_internalpro.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', co.cd_especialidade_med), ' ') 
                                when (co.cd_departamento_med IS NOT NULL AND co.cd_departamento_med::text <> '') then 
                                coalesce(nais_mla_internalpro.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', co.cd_departamento_med), ' ')   
                                else '00'
                                end as department_code,     
                                CASE WHEN get_patient_type(c.encounter_id, NULL)='IN' THEN  2 WHEN get_patient_type(c.encounter_id, NULL)='OP' THEN  1 END  patient_classification,    
                                coalesce(c.bed_id,'   ')                                              ward_code,        
                                coalesce(c.room_id,'     ')                                           room_number,
                                '1'                                                              blood_tranfusion_type,
                                coalesce(nais_mla_internalpro.get_insurance_number(co.nr_seq_nais_insurance),00)           insurance_number, 
                                coalesce(a.cd_medico,'00000000')                                      doctor_code,
                                '0'                                                              patient_newborn,
                                ' '                                                              prescription_classfication,
                                '   '                                                            requestor_code,
                                ' '                                                              mutual_exclusion_rule,
                                '    '                                                           division_number,
                                ' '                                                              blank_one,
                                ' '                                                              blank_two
           
                        from    cpoe_procedimento a,         
                                prescr_procedimento b,
                                prescr_mat_alteracao d,
                                proc_interno pi,
                                bft_encounter_v c,
                                cpoe_order_unit co,
                                cpoe_tipo_pedido cp
                        where   a.nr_sequencia = b.nr_seq_proc_cpoe 
                        and     pi.nr_sequencia = a.nr_seq_proc_interno
                        and     a.nr_atendimento =  c.encounter_id
                        and     b.nr_prescricao = d.nr_prescricao
                        and     d.nr_seq_procedimento = b.nr_agrupamento
                        and (case 
                                        when b.nr_prescricao = nr_prescricao_p and a.ie_record_execution = 'S' and d.ie_alteracao = 3 and d.ie_tipo_item = 'P' THEN (1)
                                        when d.nr_sequencia = nr_prescricao_p and d.ie_mostra_adep = 'S' and d.ie_tipo_item = 'P' then (1)
                                 else 0
                                 end) = 1
                        and      co.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                        and      co.nr_sequencia              = a.nr_seq_cpoe_order_unit
                        and      cp.nr_seq_sub_grp            = 'PC'
                        and      co.nr_order_unit                     = order_unit_p
                        and      obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'P0'
                        order by d.dt_alteracao desc) alias21 LIMIT 1;

    --  End of Accounting Information
        c02 return;

    c03 return;


        r_c03                 c03%rowtype;
        r_c01_w               accinforectyp;
        r_c02_w               execinforedtyp;
        r_c03_w               medtreatmentinforedtyp;
        cd_contin_flag_w      varchar(1) := 'C';
        loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        ordernum_count_w      bigint;
        count_nr_sequencia_proc_w bigint := 0;
        nr_seq_int_call_log_w bigint :=0;
        ds_log_message_w      varchar(500);
        nr_atendimento_w cpoe_procedimento.nr_atendimento%type;

        json_output_w		  philips_json;
        json_output_list_w    philips_json_list;

BEGIN    
        PERFORM set_config('nais_mla_internalpro.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w :=0;
        PERFORM set_config('nais_mla_internalpro.index_counter_w', 0, false);
        loop_count_w := 0;

       json_output_w   := philips_json();
       json_output_list_w	:= philips_json_list();

        
   
       select   count(nr_sequencia) 
       into STRICT     ordernum_count_w 
       from     prescr_mat_alteracao 
       where    nr_sequencia =  nr_prescricao_p;

       if  ordernum_count_w <> 0 then 
        select  nr_prescricao 
        into STRICT    ordernumber_p 
        from    prescr_mat_alteracao 
        where   nr_sequencia =  nr_prescricao_p;

        else
        ordernumber_p := nr_prescricao_p;
        end if;

        begin
        
        select  a.nr_atendimento 
        into STRICT    nr_atendimento_w
        from    cpoe_procedimento a,
                prescr_procedimento b,
                prescr_mat_alteracao c
        where   a.nr_sequencia = b.nr_seq_proc_cpoe
        and     c.nr_seq_procedimento = b.nr_agrupamento
        and     b.nr_prescricao = ordernumber_p  LIMIT 1;

        exception when no_data_found then nr_atendimento_w:= null;
		end;

        open c03;

        loop
            begin
            fetch c03 into r_c03_w;

            --------------------------------------Logger_start Cursor for c03---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor medical record for : '
                                    ||' Order number in Cursor "C-03"'
                                    || ordernumber_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c03---------------------------------------------                  
             
            EXIT WHEN NOT FOUND; /* apply on c03 */

            
            current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767) := nais_mla_internalpro.get_action_code_med_detail('P0', r_c03_w, current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_internalpro.add_med_treatment_detail_array(current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767), current_setting('nais_mla_internalpro.index_counter_w')::smallint);

             CALL CALL CALL CALL nais_mla_internalpro.common_med_treatment_info(r_c03_w);
             CALL CALL CALL CALL nais_mla_internalpro.add_med_treatment_detail_array(current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767), current_setting('nais_mla_internalpro.index_counter_w')::smallint);

        select count(d.nr_sequencia_proc)
        into STRICT count_nr_sequencia_proc_w
        from
               cpoe_procedimento a,
               prescr_procedimento b,
               prescr_mat_alteracao c,
               prescr_material d
        where
               a.nr_sequencia = b.nr_seq_proc_cpoe
        and    c.nr_seq_procedimento = b.nr_agrupamento
        and    d.nr_prescricao = c.nr_prescricao
        and    d.NR_SEQUENCIA_PROC = b.nr_agrupamento
        and    b.nr_prescricao = c.nr_prescricao
        and    d.NR_SEQUENCIA_PROC = r_c03_w.abc
        and (case 
                          when b.nr_prescricao = nr_prescricao_p and a.ie_record_execution = 'S' and c.ie_alteracao = 3 and c.ie_tipo_item = 'P' THEN (1)
                          when c.nr_sequencia = nr_prescricao_p and c.ie_mostra_adep = 'S' and c.ie_tipo_item = 'P' THEN (1)
                          else 0
                end) = 1;
             if (count_nr_sequencia_proc_w <> 0) then
                current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767) := nais_mla_internalpro.add_material_details_intprofs(r_c03_w, current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767), nr_prescricao_p, r_c03_w.abc, ordernumber_p);
                CALL CALL CALL CALL nais_mla_internalpro.add_med_treatment_detail_array(current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767), current_setting('nais_mla_internalpro.index_counter_w')::smallint);
             end if;
        end loop;
            current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767) := nais_mla_internalpro.add_date_class_med_detail('P0', r_c03_w, current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_internalpro.add_med_treatment_detail_array(current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767), current_setting('nais_mla_internalpro.index_counter_w')::smallint);

        close c03;
        loop_count_w := ceil(current_setting('nais_mla_internalpro.index_counter_w')::smallint / 10);

        
        for i in 1..loop_count_w loop begin
            if ( i = loop_count_w ) then
                cd_contin_flag_w := 'E';
            end if;

							
            open c01;
            loop
                begin
                fetch c01 into r_c01_w;

            --------------------------------------Logger_start Cursor for c01---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor medical record for : '
                                    ||' Order number in Cursor "C-01"'
                                    || ordernumber_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c01---------------------------------------------
            
                EXIT WHEN NOT FOUND; /* apply on c01 */
				CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.nais_common_header('KK',ordernumber_p , r_c01_w.process_classif , cd_contin_flag_w, 1,810);
                CALL CALL CALL CALL CALL nais_mla_internalpro.common_accounting_info(r_c01_w);
            end loop;

            close c01;
            open c02;
            loop
                begin
                fetch c02 into r_c02_w;

            --------------------------------------Logger_start Cursor for c02---------------------------------------------
            
                exception when others then
               
                   ds_log_message_w := 'Exception occured while forming cursor medical record for : '
                                    ||' Order number in Cursor "C-02"'
                                    || ordernumber_p
                                    || ' '
                                    ||sqlerrm;


                    if length(ds_log_message_w) < 500 then
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    else
                        record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), 'nais.mla.treatment.emar', 'nais.mla.treatment.emar' , 
                                'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, nr_atendimento_w, 944,'E');
                    end if;
            end;

            ---------------------------------------Logger_end Cursor for c02---------------------------------------------               
                
				EXIT WHEN NOT FOUND; /* apply on c02 */
                CALL CALL CALL CALL CALL nais_mla_internalpro.common_execution_info(r_c02_w);
            end loop;

            close c02;
            open c03;
            fetch c03 into r_c03;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.append_text(r_c03.slip_code, 3, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.append_text(coalesce(current_setting('nais_mla_internalpro.index_counter_w')::smallint, 0), 2, 'L', '0');
            close c03;
            inside_loop_count_w := counter_w + 1;
            for x in inside_loop_count_w..inside_loop_count_w + 9 loop
                counter_w := counter_w + 1;

                current_setting('nais_mla_internalpro.med_treamtent')::med_treamtent_array.extend;
                if ( cd_contin_flag_w = 'E' and current_setting('nais_mla_internalpro.med_treamtent')::coalesce(med_treamtent_array(x)::text, '') = '' ) then
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.append_text(' ', 64);
                else
                    PERFORM set_config('nais_mla_internalpro.ds_line_w', current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767) || current_setting('nais_mla_internalpro.med_treamtent')::med_treamtent_array(x), false);
                    --nais_mla_internalpro.append_text(med_treamtent(x), 64, 'L', ' ');
                end if;

            end loop;

            open c03;
            fetch c03 into r_c03;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.append_text(r_c03.medi_blank, 4, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_internalpro.append_text(r_c03.eot, 1, 'L');
            close c03;
        end;
            json_output_w := nais_mla_internalpro.add_json_value(json_output_w, 'message', current_setting('nais_mla_internalpro.ds_line_w')::varchar(32767));
            json_output_list_w.append(json_output_w.to_json_value());
        end loop;
        dbms_lob.createtemporary( file_output_p, true);
        json_output_list_w.(file_output_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_internalpro.send_intprofs_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as ordernumber_p bigint) FROM PUBLIC;
