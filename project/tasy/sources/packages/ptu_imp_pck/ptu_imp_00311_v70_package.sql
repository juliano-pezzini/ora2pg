-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--------------------------------------------------------------------------------00311 Cancelamento----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE OR REPLACE PROCEDURE ptu_imp_pck.ptu_imp_00311_v70 ( ie_tipo_cliente_p text, cd_unimed_executora_p ptu_cancelamento.cd_unimed_executora%type, cd_unimed_beneficiario_p ptu_cancelamento.cd_unimed_beneficiario%type, nr_seq_execucao_p ptu_cancelamento.nr_seq_execucao%type, nr_seq_origem_p ptu_cancelamento.nr_seq_origem%type, cd_transacao_p ptu_cancelamento.cd_transacao%type, nr_versao_p ptu_cancelamento.nr_versao%type, ds_motivo_cancelamento_p ptu_cancelamento.ds_motivo_cancelamento%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_pedido_cancel_p INOUT ptu_cancelamento.nr_sequencia%type, ie_possui_registro_p INOUT text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Realizar a importacao do arquivo de 00311-Pedido de cancelamento
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ x] Tasy (Delphi/Java) [  x] Portal [  ]  Relatorios [ x] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

ie_tipo_cliente_w		ptu_cancelamento.ie_tipo_cliente%type;
nr_seq_pedido_cancel_w		ptu_cancelamento.nr_sequencia%type;
nr_seq_pedido_cancel_existe_w	ptu_cancelamento.nr_sequencia%type;
nr_seq_pedido_compl_w		ptu_pedido_compl_aut.nr_sequencia%type;
nr_seq_pedido_aut_w		ptu_pedido_autorizacao.nr_sequencia%type;
nr_seq_guia_w			pls_guia_plano.nr_sequencia%type;
nr_seq_requisicao_w		pls_requisicao.nr_sequencia%type;
nr_seq_origem_w			ptu_controle_execucao.nr_sequencia%type;
nr_seq_execucao_w		ptu_cancelamento.nr_seq_execucao%type;
qt_confirmacao_valida_w		integer := 0;


BEGIN
--Select para verificar se ja existe um pedido de cancelamento na base, caso exista retorna a sequencia do mesmo e aborta o processo

select	max(nr_sequencia),
	max(nr_seq_execucao)
into STRICT	nr_seq_pedido_cancel_existe_w,
	nr_seq_execucao_w
from	ptu_cancelamento
where	nr_seq_execucao		= nr_seq_execucao_p
and (coalesce(nr_seq_origem_p::text, '') = ''
or	nr_seq_origem		= nr_seq_origem_p)
and	cd_unimed_executora	= cd_unimed_executora_p;

select	count(1)
into STRICT	qt_confirmacao_valida_w
from	ptu_confirmacao
where	nr_seq_execucao		= nr_seq_execucao_w
and	ie_tipo_identificador	<> 3
and	ie_tipo_resposta	= 'C'
and	cd_unimed_executora	= cd_unimed_executora_p;

if (qt_confirmacao_valida_w = 0) then
	nr_seq_pedido_cancel_existe_w := null;
end if;

ie_possui_registro_p := 'N';
begin
	select	coalesce(nr_seq_pedido_compl,0),
		coalesce(nr_seq_pedido_aut,0)
	into STRICT	nr_seq_pedido_compl_w,
		nr_seq_pedido_aut_w
	from	ptu_controle_execucao
	where	nr_sequencia	= nr_seq_origem_p;
exception
when others then
	select	max(nr_sequencia)
	into STRICT	nr_seq_pedido_aut_w
	from	ptu_pedido_autorizacao
	where	nr_seq_execucao		= nr_seq_execucao_p
	and	cd_unimed_executora	= cd_unimed_executora_p;

	if (coalesce(nr_seq_pedido_aut_w::text, '') = '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_pedido_compl_w
		from	ptu_pedido_compl_aut
		where	nr_seq_execucao		= nr_seq_execucao_p
		and	cd_unimed_executora	= cd_unimed_executora_p;
	end if;
end;

if ((nr_seq_pedido_compl_w IS NOT NULL AND nr_seq_pedido_compl_w::text <> '') and nr_seq_pedido_compl_w <> 0) then
	select	max(nr_seq_execucao)
	into STRICT	nr_seq_execucao_w
	from	ptu_pedido_compl_aut
	where	nr_sequencia		= nr_seq_pedido_compl_w;

	if (nr_seq_execucao_w <> nr_seq_execucao_p) then
		nr_seq_pedido_compl_w := null;
	end if;
elsif ((nr_seq_pedido_aut_w IS NOT NULL AND nr_seq_pedido_aut_w::text <> '') and nr_seq_pedido_aut_w <> 0) then
	select	max(nr_seq_execucao)
	into STRICT	nr_seq_execucao_w
	from	ptu_pedido_autorizacao
	where	nr_sequencia		= nr_seq_pedido_aut_w;

	if (nr_seq_execucao_w <> nr_seq_execucao_p) then
		nr_seq_pedido_aut_w := null;
	end if;
end if;

if ((nr_seq_pedido_compl_w IS NOT NULL AND nr_seq_pedido_compl_w::text <> '') and nr_seq_pedido_compl_w <> 0) then
	begin
		select	nr_seq_guia,
			nr_seq_requisicao
		into STRICT	nr_seq_guia_w,
			nr_seq_requisicao_w
		from	ptu_pedido_compl_aut
		where	nr_sequencia		= nr_seq_pedido_compl_w;
	exception
	when others then
		nr_seq_guia_w		:= null;
		nr_seq_requisicao_w	:= null;
	end;
elsif ((nr_seq_pedido_aut_w IS NOT NULL AND nr_seq_pedido_aut_w::text <> '') and nr_seq_pedido_aut_w <> 0) then
	begin
		select	nr_seq_guia,
			nr_seq_requisicao
		into STRICT	nr_seq_guia_w,
			nr_seq_requisicao_w
		from	ptu_pedido_autorizacao
		where	nr_sequencia		= nr_seq_pedido_aut_w;
	exception
	when others then
		nr_seq_guia_w		:= null;
		nr_seq_requisicao_w	:= null;
	end;
end if;

if (coalesce(nr_seq_origem_p::text, '') = '') then
	if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
		select	max(nr_seq_origem)
		into STRICT	nr_seq_origem_w
		from	ptu_resposta_autorizacao
		where	nr_seq_guia	= nr_seq_guia_w;
	elsif (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
		select	max(nr_seq_origem)
		into STRICT	nr_seq_origem_w
		from	ptu_resposta_autorizacao
		where	nr_seq_requisicao	= nr_seq_requisicao_w;
	end if;
else
	nr_seq_origem_w	:= nr_seq_origem_p;
end if;

if (nr_seq_origem_w <> nr_seq_origem_p) then
	nr_seq_guia_w		:= null;
	nr_seq_requisicao_w	:= null;
end if;

--Verificar se ja existe um pedido de cancelamento em aberto, caso exista a rotina retorna a sequencia do pedido existente

if (nr_seq_pedido_cancel_existe_w IS NOT NULL AND nr_seq_pedido_cancel_existe_w::text <> '') then
	ie_possui_registro_p 	:= 'S';
	nr_seq_pedido_cancel_w 	:= nr_seq_pedido_cancel_existe_w;
else
	-- Validacao e necessario converter os dados para  somente uma letra

	ie_tipo_cliente_w := ptu_converter_tipo_cliente(ie_tipo_cliente_p);
	insert	into ptu_cancelamento(nr_sequencia, cd_transacao, ie_tipo_cliente,
		cd_unimed_executora, cd_unimed_beneficiario, nr_seq_execucao,
		dt_atualizacao, nm_usuario, nr_seq_origem,
		nm_usuario_nrec, dt_atualizacao_nrec, nr_versao,
		ds_motivo_cancelamento, nr_seq_guia, nr_seq_requisicao)
	values (nextval('ptu_cancelamento_seq'), cd_transacao_p, ie_tipo_cliente_w,
		cd_unimed_executora_p, cd_unimed_beneficiario_p, nr_seq_execucao_p,
		clock_timestamp(), nm_usuario_p, nr_seq_origem_w,
		nm_usuario_p, clock_timestamp(), nr_versao_p,
		ds_motivo_cancelamento_p, nr_seq_guia_w, nr_seq_requisicao_w) returning nr_sequencia into nr_seq_pedido_cancel_w;

	commit;
end if;

nr_seq_pedido_cancel_p	:= nr_seq_pedido_cancel_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_pck.ptu_imp_00311_v70 ( ie_tipo_cliente_p text, cd_unimed_executora_p ptu_cancelamento.cd_unimed_executora%type, cd_unimed_beneficiario_p ptu_cancelamento.cd_unimed_beneficiario%type, nr_seq_execucao_p ptu_cancelamento.nr_seq_execucao%type, nr_seq_origem_p ptu_cancelamento.nr_seq_origem%type, cd_transacao_p ptu_cancelamento.cd_transacao%type, nr_versao_p ptu_cancelamento.nr_versao%type, ds_motivo_cancelamento_p ptu_cancelamento.ds_motivo_cancelamento%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_pedido_cancel_p INOUT ptu_cancelamento.nr_sequencia%type, ie_possui_registro_p INOUT text) FROM PUBLIC;
