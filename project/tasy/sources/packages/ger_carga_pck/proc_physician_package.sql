-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.proc_physician (nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
reg_proc_w			r_reg_proc;
ds_erro_w			varchar(4000);
dt_atualizacao_w		timestamp;
nm_usuario_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w		varchar(15);
qt_lanr_w			bigint;
qt_medic_clinica_w		bigint;
qt_nfpz_w			bigint;
ie_especialidade_dup_w		varchar(1);
ie_communit_center_w		varchar(1);
ie_duplica_pf_w			varchar(1);
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;

pessoa_fisica_w			pessoa_fisica%rowtype;
compl_pessoa_fisica_w		compl_pessoa_fisica%rowtype;
medico_w			medico%rowtype;
medico_especialidade_w		medico_especialidade%rowtype;
medico_espec_bsnr_w		medico_espec_bsnr%rowtype;
pf_codigo_externo_w		pf_codigo_externo%rowtype;
person_name_w			person_name%rowtype;
pessoa_fisica_idioma_w		pessoa_fisica_idioma%rowtype;
pf_forma_tratamento_w		pf_forma_tratamento%rowtype;
impnper_w			impnper%rowtype;
cd_especialidade_w		especialidade_medica.cd_especialidade%type;
medico_vinculo_w		medico_vinculo%rowtype;
lanr_w				varchar(255);

current_setting('ger_carga_pck.c01')::CURSOR CURSOR FOR
SELECT	*
from	impngpa
where	pers 		= 'X'
and	nr_seq_carga 	= nr_seq_carga_p
and	nr_sequencia 	= coalesce(nr_sequencia_p, nr_sequencia)
and	((ie_status 	= 'V' and ie_tipo_proc_p = 'IMP') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'));

impngpa_w	impngpa%rowtype;

c02 CURSOR FOR
SELECT	*
from 	impbsnr
where	physno		= impnper_w.pernr
and	nr_seq_carga 	= nr_seq_carga_p;

impbsnr_w	impbsnr%rowtype;

c03 CURSOR FOR
SELECT	*
from 	implanr
where	physno		= impnper_w.pernr
and	nr_seq_carga 	= nr_seq_carga_p;

implanr_w	implanr%rowtype;

c04 CURSOR FOR
SELECT	*
from 	impnadr
where	adrnr		= impngpa_w.ADRNR
and	nr_seq_carga 	= nr_seq_carga_p;

impnadr_w	impnadr%rowtype;

c05 CURSOR FOR
SELECT	*
from 	impnfpz a
where	ltrim(a.pernr,'0') = ltrim(impngpa_w.gpart,'0')
and	exists (select	1
	from	implanr x
	where	ltrim(x.physno,'0') 	= ltrim(impngpa_w.gpart,'0')
	and	x.lanr			= a.lanr);

impnfpz_w	impnfpz%rowtype;


BEGIN

/*
if	(ie_tipo_proc_p = 'IMP') then
	DUPLICAR_NGPA_CLINICAS(nr_seq_carga_p);
end if;*/
reg_proc_w.ie_tipo_proc	:= ie_tipo_proc_p;

open current_setting('ger_carga_pck.c01')::CURSOR;
loop
fetch current_setting('ger_carga_pck.c01')::into CURSOR
	impngpa_w;
EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
	begin

	reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impngpa_w.nr_seq_carga_arq, impngpa_w.nr_linha, impngpa_w.nr_sequencia, 'S');
	CALL ger_carga_pck.atualizar_processamento('IMPNGPA',impngpa_w.nr_sequencia);

	cd_pessoa_fisica_w		:= null;
	PERFORM set_config('ger_carga_pck.ie_update_w', null, false);
	nm_usuario_w			:= reg_proc_w.usernametasy;
	dt_atualizacao_w		:= clock_timestamp();
	nm_usuario_nrec_w		:= reg_proc_w.usernametasy;
	dt_atualizacao_nrec_w		:= clock_timestamp();
	pessoa_fisica_w			:= null;
	person_name_w			:= null;
	compl_pessoa_fisica_w		:= null;
	medico_w			:= null;
	medico_especialidade_w		:= null;
	medico_espec_bsnr_w		:= null;
	pf_codigo_externo_w		:= null;
	pf_forma_tratamento_w		:= null;
	medico_vinculo_w		:= null;
	ie_especialidade_dup_w		:= null;
	ie_communit_center_w		:= 'N';

	begin
	select	'S'
	into STRICT	ie_communit_center_w
	
	where (SELECT (x.qt_separador_1 + x.qt_separador_2 + x.qt_separador_3) + 1
		from (select	coalesce( LENGTH( impngpa_w.name1 ), 0 ) - coalesce( LENGTH( REPLACE( impngpa_w.name1, '/', NULL ) ), 0 ) qt_separador_1,
				coalesce( LENGTH( impngpa_w.name1 ), 0 ) - coalesce( LENGTH( REPLACE( impngpa_w.name1, ',', NULL ) ), 0 ) qt_separador_2,
				coalesce( LENGTH( impngpa_w.name1 ), 0 ) - coalesce( LENGTH( REPLACE( impngpa_w.name1, ';', NULL ) ), 0 ) qt_separador_3
		) x) > 1;
	exception
	when others then
		ie_communit_center_w := 'N';
	end;

	--Se nao for um medico de community center, ou se for o primeiro medico, obtem o medico que ja esta cadastrado na base
	-- para realizar o update. Para o segundo em diante, cria novo medico.
	if (coalesce(impngpa_w.ds_chave_tasy::text, '') = '') or (substr(impngpa_w.ds_chave_tasy,1,2) = 'S;') or (impngpa_w.ds_chave_tasy = 'P;1') then
		begin
		--verificar se a mesma ja esta cadastrada na base
		begin
		select	a.*
		into STRICT	pf_codigo_externo_w
		from	pf_codigo_externo a
		where	ltrim(a.cd_pessoa_fisica_externo,'0') = ltrim(impngpa_w.gpart,'0')
		and	a.ie_tipo_codigo_externo in ('ISHMED')
		and coalesce(a.cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento
		and	exists (SELECT 1
			from	pessoa_fisica x
			where	x.cd_pessoa_fisica = a.cd_pessoa_fisica) LIMIT 1;
		exception
		when others then
			pf_codigo_externo_w := null;
		end;

		cd_pessoa_fisica_w := pf_codigo_externo_w.cd_pessoa_fisica;

		if (coalesce(cd_pessoa_fisica_w,'NULL') <> 'NULL') then
			select	*
			into STRICT	pessoa_fisica_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		else
			pessoa_fisica_w.cd_pessoa_fisica	:=	null;
		end if;
		exception
		when others then
			begin
			pf_codigo_externo_w.cd_pessoa_fisica	:=	null;
			pessoa_fisica_w.cd_pessoa_fisica	:=	null;
			end;
		end;
	end if;

	reg_proc_w.nm_tabela := 'PERSON_NAME';

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NAME1', 'DS_FAMILY_NAME', impngpa_w.NAME1, person_name_w.ds_family_name) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_family_name := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NAME2', 'DS_GIVEN_NAME', impngpa_w.NAME2, person_name_w.ds_given_name) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_given_name := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'VORSW', 'DS_COMPONENT_NAME_1', impngpa_w.VORSW, person_name_w.ds_component_name_1) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_component_name_1 := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NAMZU', 'DS_COMPONENT_NAME_3', impngpa_w.NAMZU, person_name_w.ds_component_name_3) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_component_name_3 := _ora2pg_r.ds_valor_retorno_p;

	if (reg_proc_w.qt_reg_log = 0) then
		begin

		select	nextval('person_name_seq')
		into STRICT	person_name_w.nr_sequencia
		;

		person_name_w.dt_atualizacao		:= dt_atualizacao_w;
		person_name_w.dt_atualizacao_nrec	:= clock_timestamp();
		person_name_w.nm_usuario		:= nm_usuario_w;
		person_name_w.nm_usuario_nrec		:= nm_usuario_w;
		person_name_w.ds_type			:= 'main';

		if (ie_tipo_proc_p = 'IMP') then
			insert into person_name values (person_name_w.*);
		end if;

		select	substr(person_name_w.ds_given_name ||
				CASE WHEN coalesce(person_name_w.ds_component_name_1::text, '') = '' THEN null  ELSE ' ' || person_name_w.ds_component_name_1 END  ||
				CASE WHEN coalesce(person_name_w.ds_family_name::text, '') = '' THEN null  ELSE ' ' || person_name_w.ds_family_name END ,1,60)
		into STRICT	pessoa_fisica_w.nm_pessoa_fisica
		;

		pessoa_fisica_w.nr_seq_person_name	:=	person_name_w.nr_sequencia;
		end;
	end if;

	reg_proc_w.nm_tabela		:=	'PESSOA_FISICA';

	if (length(impngpa_w.TITEL) > 0) then
		begin
		begin
		select	*
		into STRICT	pf_forma_tratamento_w
		from	pf_forma_tratamento
		where	ds_forma_tratamento = upper(impngpa_w.TITEL)  LIMIT 1;
		exception
		when others then
			begin
			if (reg_proc_w.qt_reg_log = 0) then
				begin
				select	nextval('pf_forma_tratamento_seq')
				into STRICT	pf_forma_tratamento_w.nr_sequencia
				;

				pf_forma_tratamento_w.dt_atualizacao		:=	clock_timestamp();
				pf_forma_tratamento_w.nm_usuario		:=	nm_usuario_w;
				pf_forma_tratamento_w.dt_atualizacao_nrec	:=	clock_timestamp();
				pf_forma_tratamento_w.nm_usuario_nrec		:=	nm_usuario_w;
				pf_forma_tratamento_w.ie_situacao		:=	'A';
				pf_forma_tratamento_w.ds_forma_tratamento	:=	upper(impngpa_w.TITEL);
				pf_forma_tratamento_w.ds_sigla			:=	upper(impngpa_w.TITEL);

				if (ie_tipo_proc_p = 'IMP') then
					insert into pf_forma_tratamento values (pf_forma_tratamento_w.*);
				end if;
				end;
			end if;
			end;
		end;
		pessoa_fisica_w.nr_seq_forma_trat	:=	pf_forma_tratamento_w.nr_sequencia;
		end;
	end if;

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'GSCHL', 'IE_SEXO', impngpa_w.GSCHL, pessoa_fisica_w.ie_sexo) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ie_sexo := _ora2pg_r.ds_valor_retorno_p;

	begin
	select	*
	into STRICT	impnper_w
	from	impnper
	where	pernr	= impngpa_w.gpart  LIMIT 1;
	exception
	when others then
		impnper_w := null;
	end;

	if (impnper_w.nr_sequencia IS NOT NULL AND impnper_w.nr_sequencia::text <> '') then
		begin

		begin
		pessoa_fisica_w.dt_nascimento	:=	to_date(impnper_w.gbdat,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
		exception
		when others then
			pessoa_fisica_w.dt_nascimento	:=	null;
		end;

		if (reg_proc_w.qt_reg_log = 0) then
			begin

			pessoa_fisica_w.ie_tipo_pessoa		:= '2';
			pessoa_fisica_w.nm_usuario			:= nm_usuario_w;
			pessoa_fisica_w.dt_atualizacao		:= dt_atualizacao_w;

			if (impnper_w.makz = 'X') then --Person is Employee
				pessoa_fisica_w.ie_funcionario	:= 'S';
			end if;

			if (ie_tipo_proc_p = 'IMP') then

				if (coalesce(pessoa_fisica_w.cd_pessoa_fisica::text, '') = '') then

					select	nextval('pessoa_fisica_seq')
					into STRICT	pessoa_fisica_w.cd_pessoa_fisica
					;

					insert into pessoa_fisica values (pessoa_fisica_w.*);

				elsif (pessoa_fisica_w.cd_pessoa_fisica IS NOT NULL AND pessoa_fisica_w.cd_pessoa_fisica::text <> '') then

					pessoa_fisica_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
					pessoa_fisica_w.dt_atualizacao_nrec	:= dt_atualizacao_nrec_w;

					update	pessoa_fisica
					set	row			= pessoa_fisica_w
					where	cd_pessoa_fisica	= pessoa_fisica_w.cd_pessoa_fisica
					and	current_setting('ger_carga_pck.ie_atualizar_w')::varchar(1) 	= 'S';
					PERFORM set_config('ger_carga_pck.ie_update_w', 'S;', false);

				end if;

			end if;

			if (coalesce(cd_pessoa_fisica_w::text, '') = '') then

				select	nextval('pf_codigo_externo_seq')
				into STRICT	pf_codigo_externo_w.nr_sequencia
				;

				pf_codigo_externo_w.cd_pessoa_fisica			:= pessoa_fisica_w.cd_pessoa_fisica;
				pf_codigo_externo_w.cd_pessoa_fisica_externo		:= lpad(impngpa_w.gpart,10,'0');
				pf_codigo_externo_w.nm_usuario				:= nm_usuario_w;
				pf_codigo_externo_w.nm_usuario_nrec			:= nm_usuario_nrec_w;
				pf_codigo_externo_w.dt_atualizacao			:= dt_atualizacao_w;
				pf_codigo_externo_w.dt_atualizacao_nrec		:= dt_atualizacao_nrec_w;
				pf_codigo_externo_w.cd_estabelecimento		:= wheb_usuario_pck.get_cd_estabelecimento;

				if (impnper_w.arzt = 'X') then
					pf_codigo_externo_w.ie_tipo_codigo_externo	:= 'ISHMED';
				else
					pf_codigo_externo_w.ie_tipo_codigo_externo	:= 'ISH';
				end if;

				if (ie_tipo_proc_p = 'IMP') then
					insert into pf_codigo_externo values (pf_codigo_externo_w.*);
				end if;
			end if;
			end;
		end if;

		reg_proc_w.nm_tabela	:=	'MEDICO';
		reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnper_w.nr_seq_carga_arq, impnper_w.nr_linha, impnper_w.nr_sequencia, 'N');

		if (reg_proc_w.qt_reg_log = 0) and (impnper_w.arzt = 'X') then --Indicator that Person Is Physician
			begin

			begin
			select	*
			into STRICT	medico_w
			from	medico
			where	cd_pessoa_fisica	= pessoa_fisica_w.cd_pessoa_fisica  LIMIT 1;
			exception
			when others then
				medico_w.cd_pessoa_fisica	:= null;
			end;

			medico_w.ie_corpo_clinico	:= 'S';

			if (impnper_w.arzt = 'X') and (coalesce(impnper_w.makz::text, '') = '') then
				medico_w.ie_vinculo_medico	:= 14; --Externo
				medico_w.ie_corpo_clinico	:= 'N';
			else
				medico_w.ie_vinculo_medico	:= 2;  --Contratado
			end if;

			--medico_w.nm_guerra			:= pessoa_fisica_w.nm_pessoa_fisica;
			select	substr(person_name_w.ds_given_name ||
					CASE WHEN coalesce(person_name_w.ds_component_name_1::text, '') = '' THEN null  ELSE ' ' || person_name_w.ds_component_name_1 END  ||
					CASE WHEN coalesce(person_name_w.ds_family_name::text, '') = '' THEN null  ELSE ' ' || person_name_w.ds_family_name END ,1,60)
			into STRICT	medico_w.nm_guerra
			;

			medico_w.nr_crm			:= 99999; -- default germany;
			medico_w.ie_corpo_assist 	:= 'N';
			medico_w.ie_situacao		:= 'A';
			if (impngpa_w.LOEKZ = 'X') then
				medico_w.ie_situacao	:= 'I';
			end if;
			medico_w.nm_usuario		:= nm_usuario_w;
			medico_w.dt_atualizacao		:= dt_atualizacao_w;

			if (ie_tipo_proc_p = 'IMP') then
				if (medico_w.cd_pessoa_fisica IS NOT NULL AND medico_w.cd_pessoa_fisica::text <> '') then

					update	medico
					set	row	= medico_w
					where	cd_pessoa_fisica 	= medico_w.cd_pessoa_fisica
					and	current_setting('ger_carga_pck.ie_atualizar_w')::varchar(1) 		= 'S';
					PERFORM set_config('ger_carga_pck.ie_update_w', 'S;', false);

				else
					medico_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
					medico_w.dt_atualizacao_nrec		:= dt_atualizacao_nrec_w;
					medico_w.cd_pessoa_fisica		:= pessoa_fisica_w.cd_pessoa_fisica;

					insert into medico values (medico_w.*);

					if (medico_w.ie_vinculo_medico in (14,2)) then

						begin
						select	*
						into STRICT	medico_vinculo_w
						from	medico_vinculo
						where	cd_medico		= medico_w.cd_pessoa_fisica
						and	ie_vinculo_medico	= medico_w.ie_vinculo_medico  LIMIT 1;
						exception
						when others then
							medico_vinculo_w.nr_sequencia := null;
						end;

						if (coalesce(medico_vinculo_w.nr_sequencia::text, '') = '') then

							select	nextval('medico_vinculo_seq')
							into STRICT	medico_vinculo_w.nr_sequencia
							;

							medico_vinculo_w.dt_atualizacao		:= clock_timestamp();
							medico_vinculo_w.nm_usuario		:= nm_usuario_nrec_w;
							medico_vinculo_w.dt_atualizacao_nrec	:= clock_timestamp();
							medico_vinculo_w.nm_usuario_nrec	:= nm_usuario_nrec_w;
							medico_vinculo_w.cd_medico		:= medico_w.cd_pessoa_fisica;
							medico_vinculo_w.ie_vinculo_medico	:= medico_w.ie_vinculo_medico;

							insert into medico_vinculo values (medico_vinculo_w.*);
						end if;
					end if;

				end if;
			end if;
			end;
		end if;

		if (length(impngpa_w.SPRAS) > 0) then

			reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impngpa_w.nr_seq_carga_arq, impngpa_w.nr_linha, impngpa_w.nr_sequencia, 'N');
			reg_proc_w.nm_tabela		:=	'PESSOA_FISICA_IDIOMA';
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'SPRAS', 'NR_SEQ_IDIOMA', impngpa_w.SPRAS, pessoa_fisica_idioma_w.nr_seq_idioma) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_idioma_w.nr_seq_idioma := _ora2pg_r.ds_valor_retorno_p;

			begin
			select	*
			into STRICT	pessoa_fisica_idioma_w
			from	pessoa_fisica_idioma
			where	cd_pessoa_fisica 	= pessoa_fisica_w.cd_pessoa_fisica
			and	nr_seq_idioma 		= pessoa_fisica_idioma_w.nr_seq_idioma  LIMIT 1;
			exception
			when others then
				begin
				if (reg_proc_w.qt_reg_log = 0) then
					begin
					select	nextval('pessoa_fisica_idioma_seq')
					into STRICT	pessoa_fisica_idioma_w.nr_sequencia
					;

					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'SPRAS', 'NR_SEQ_IDIOMA', impngpa_w.SPRAS, pessoa_fisica_idioma_w.nr_seq_idioma) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_idioma_w.nr_seq_idioma := _ora2pg_r.ds_valor_retorno_p;
					pessoa_fisica_idioma_w.cd_pessoa_fisica		:= pessoa_fisica_w.cd_pessoa_fisica;
					pessoa_fisica_idioma_w.ie_fluencia		:= 'A';
					pessoa_fisica_idioma_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
					pessoa_fisica_idioma_w.dt_atualizacao_nrec	:= dt_atualizacao_nrec_w;
					pessoa_fisica_idioma_w.nm_usuario		:= nm_usuario_w;
					pessoa_fisica_idioma_w.dt_atualizacao		:= dt_atualizacao_w;

					if (pessoa_fisica_idioma_w.nr_seq_idioma IS NOT NULL AND pessoa_fisica_idioma_w.nr_seq_idioma::text <> '') and (ie_tipo_proc_p = 'IMP') then
						insert into pessoa_fisica_idioma values (pessoa_fisica_idioma_w.*);
					end if;
					end;
				end if;
				end;
			end;
		end if;

		open c04;
		loop
		fetch c04 into
			impnadr_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin

			reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnadr_w.nr_seq_carga_arq, impnadr_w.nr_linha, impnadr_w.nr_sequencia, 'N');

			
					reg_proc_w := ger_carga_pck.gerar_compl_pessoa_fisica(
					reg_proc_w,  --> reg_integracao_p in out gerar_int_padrao.reg_integracao_conv,
					pessoa_fisica_w.cd_pessoa_fisica,  --> cd_pessoa_fisica_p in varchar2,
					'2',  --> ie_tipo_complemento_p in number,
					null,  --> nr_seq_tipo_compl_adic_p in number,
					null,  --> cd_profissao_p in varchar2,
					null,  --> cd_empresa_refer_p in varchar2,
					null,  --> nm_contato_p in varchar2,
					impnadr_w.telnr,  --> nr_telefone_p in varchar2,
					impnadr_w.telxt,  --> nr_ramal_p in varchar2,
					impnadr_w.faxnr,  --> ds_fax_p in varchar2,
					impnadr_w.faxxt,  --> nr_ddd_fax_p in varchar2,
					impnadr_w.land,  --> nr_seq_pais_p in number,
					impnadr_w.regio,  --> sg_estado_p in varchar2,
					impnadr_w.pstlz,  --> cd_cep_p in varchar2,
					impnadr_w.ort,  --> ds_municipio_p in varchar2,
					impnadr_w.ort2,  --> ds_bairro_p in varchar2,
					impnadr_w.stras,  --> ds_endereco_p in varchar2,
					impnadr_w.hsnm1,  --> ds_compl_end nr_endereco_p in varchar2,
					impnadr_w.str_suppl,  --> ds_complemento_p in varchar2,
					impnadr_w.email,  --> ds_email_p in varchar2,
					impnadr_w.ststr, impnadr_w.ststz, null, null, nm_usuario_w /*--> nm_usuario_p in varchar2*/
, impnadr_w.adrnr, null);
			end;
		end loop;
		close c04;

		if (ie_tipo_proc_p = 'IMP') then

			begin
			select	'S'
			into STRICT	ie_especialidade_dup_w
			from (SELECT	count(*) qt,
					substr(lanr,8,2) ie_especialidade
				from	implanr
				where	ltrim(physno,'0')	= ltrim(impngpa_w.gpart,'0')
				group by substr(lanr,8,2)
				having count(*) > 1) x LIMIT 1;
			exception
			when others then
				ie_especialidade_dup_w := 'N';
			end;

			delete 	from medico_espec_bsnr
			where	cd_pessoa_fisica = medico_w.cd_pessoa_fisica;

			delete 	from medico_especialidade
			where	cd_pessoa_fisica = medico_w.cd_pessoa_fisica;

			cd_pessoa_fisica_w	:= medico_w.cd_pessoa_fisica;
			ie_duplica_pf_w		:= 'N';

			open C03;
			loop
			fetch C03 into
				implanr_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */

				--Este tratamento abaixo existe, pois para os casos em que e um community center ou medico com especialidade duplicada
				-- deve ser criado um medico para cada no Tasy, para que seja ajustado no futuro pelo cliente (usuario)
				if (ie_duplica_pf_w = 'S') then
					cd_pessoa_fisica_w := ger_carga_pck.duplicar_cadastro_medico(pessoa_fisica_w, person_name_w, pf_codigo_externo_w, medico_w, medico_vinculo_w, pessoa_fisica_idioma_w, cd_pessoa_fisica_w);
				end if;

				begin
				select	cd_especialidade
				into STRICT	cd_especialidade_w
				from	especialidade_medica
				where	cd_especialidade	= substr(implanr_w.lanr,8,9)  LIMIT 1;
				exception
				when others then
					begin
					select	cd_especialidade
					into STRICT	cd_especialidade_w
					from	especialidade_medica
					where	cd_especialidade	= 99  LIMIT 1;
					exception
					when others then
						cd_especialidade_w	:= null;
					end;
				end;

				begin
				select	*
				into STRICT	medico_especialidade_w
				from	medico_especialidade
				where	cd_pessoa_fisica	= cd_pessoa_fisica_w
				and	cd_especialidade	= cd_especialidade_w  LIMIT 1;
				exception
				when others then
					medico_especialidade_w.cd_especialidade := null;
				end;

				if (coalesce(medico_especialidade_w.cd_especialidade::text, '') = '') and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '') then

					medico_especialidade_w.cd_pessoa_fisica		:= cd_pessoa_fisica_w;
					medico_especialidade_w.cd_especialidade		:= cd_especialidade_w;
					medico_especialidade_w.nm_usuario		:= nm_usuario_nrec_w;
					medico_especialidade_w.dt_atualizacao		:= dt_atualizacao_nrec_w;
					medico_especialidade_w.nr_seq_prioridade	:= 100;
					medico_especialidade_w.dt_especialidade		:= to_date( implanr_w.begdt , current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
					medico_especialidade_w.nr_rqe			:= implanr_w.lanr;

					insert into medico_especialidade values (medico_especialidade_w.*);

					open C02;
					loop
					fetch C02 into
						impbsnr_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */

						select	nextval('medico_espec_bsnr_seq')
						into STRICT	medico_espec_bsnr_w.nr_sequencia
						;

						medico_espec_bsnr_w.dt_atualizacao		:= clock_timestamp();
						medico_espec_bsnr_w.nm_usuario			:= nm_usuario_w;
						medico_espec_bsnr_w.dt_atualizacao_nrec		:= clock_timestamp();
						medico_espec_bsnr_w.nm_usuario_nrec		:= nm_usuario_w;
						medico_espec_bsnr_w.nr_bsnr			:= impbsnr_w.nbsnr;
						medico_espec_bsnr_w.cd_pessoa_fisica		:= cd_pessoa_fisica_w;
						medico_espec_bsnr_w.cd_especialidade		:= cd_especialidade_w;

						insert into medico_espec_bsnr values (medico_espec_bsnr_w.*);

					end loop;
					close C02;
				end if;

				if (ie_especialidade_dup_w = 'S') or (ie_communit_center_w = 'S') then

					ie_duplica_pf_w := 'S';
				end if;

			end loop;
			close C03;

		end if;

		end;
	end if;

	if (reg_proc_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		update	impngpa
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;
		end;
	elsif (ie_tipo_proc_p = 'IMP') then
		update	impngpa
		set	ie_status 	= 'I',
			ds_chave_tasy	= current_setting('ger_carga_pck.ie_update_w')::varchar(2)||pessoa_fisica_w.cd_pessoa_fisica,
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;

		update	impnadr
		set	ie_status 	= 'I',
			dt_fim_proc	= clock_timestamp()
		where	adrnr		= impngpa_w.adrnr
		and	nr_seq_carga 	= nr_seq_carga_p;

	else
		update	impngpa
		set	ie_status 	= 'V',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;

		update	impnadr
		set	ie_status 	= 'V',
			dt_fim_proc	= clock_timestamp()
		where	adrnr		= impngpa_w.adrnr
		and	nr_seq_carga 	= nr_seq_carga_p;
	end if;

	exception
	when others then
		begin
		ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', ds_erro_w);

		update	impngpa
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;
		end;
	end;

	commit;
end loop;
close current_setting('ger_carga_pck.c01')::CURSOR;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.proc_physician (nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
