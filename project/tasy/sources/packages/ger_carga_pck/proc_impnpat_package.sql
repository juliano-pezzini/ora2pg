-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.proc_impnpat ( nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


ora2pg_rowcount int;
_ora2pg_r RECORD;
pessoa_fisica_w			pessoa_fisica%rowtype;
pessoa_fisica_pront_estab_w	pessoa_fisica_pront_estab%rowtype;
person_name_w			person_name%rowtype;
nacionalidade_w			nacionalidade%rowtype;
atendimento_paciente_w		atendimento_paciente%rowtype;
pessoa_fisica_paroquia_w	pessoa_fisica_paroquia%rowtype;
pessoa_classif_w		pessoa_classif%rowtype;
pessoa_fisica_idioma_w		pessoa_fisica_idioma%rowtype;
pf_codigo_externo_w		pf_codigo_externo%rowtype;
pf_forma_tratamento_w		pf_forma_tratamento%rowtype;
pf_medico_externo_w		pf_medico_externo%rowtype;
cd_medico_externo_w		pessoa_fisica.cd_pessoa_fisica%type;

ie_tipo_complemento_w		compl_pessoa_fisica.ie_tipo_complemento%type;
nr_seq_tipo_compl_adic_w	compl_pessoa_fisica.nr_seq_tipo_compl_adic%type;
ds_complemento_w		compl_pessoa_fisica.ds_complemento%type;

ds_erro_w			varchar(4000);
dt_atualizacao_w		timestamp;
nm_usuario_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w		varchar(15);
i				integer;
qt_erro_w			bigint;
ds_endereco_w			varchar(255);
ie_resp_legal_w		varchar(1);
ie_new_patient_w		boolean := false;
nr_seq_tipo_medico_w		bigint;
qt_reg_w			bigint;

reg_proc_w			r_reg_proc;

current_setting('ger_carga_pck.c01')::CURSOR CURSOR FOR
SELECT	a.*
from	(
select	nr_sequencia,
	nr_seq_carga,
	nr_seq_carga_arq,
	nr_linha,
	--client	varchar2(3)	path	'Client',--	no!
	patnr patientid,
	--chkdigitpat	varchar2(1)	path	'Chkdigitpat',--	no!
	extnr extpatid,
	--institution	varchar2(4)	path	'Institution',--	no!
	--inststext	varchar2(15)	path	'InstStext',--	no!
	nname lastnamepat,
	nnams stdlnamepat,
	vname frstnamepat,
	vnams stdfnamepat,
	gbnam birthname,
	gbnas stdbnamepat,
	gbdat dob,
	gland birthctry,
	--birthctryiso	varchar2(2)	path	'BirthctryIso',--	no!
	--birthctrytext	varchar2(15)	path	'BirthctryText',--	no!
	gbort birthplace,
	gschl sex,
	gschl sexext,
	--sexstext	varchar2(10)	path	'SexStext',
	name2 pseudo,
	--formaddrs	varchar2(2)	path	'FormAddrs',--	no!
	--formaddrsstxt	varchar2(5)	path	'FormAddrsStxt',--	no!
	--formaddrstxt	varchar2(25)	path	'FormAddrsTxt',--	no!
	titel title,
	namzu affix,
	vorsw prefix,
	--fullnamepat	varchar2(30)	path	'FullNamePat',
	adrnr pataddrno,
	--pataddr2no	varchar2(10)	path	'PatAddr2No',--	tbd!
	famst marstat,
	--marstattext	varchar2(6)	path	'MarStatText',
	konfe reldenom,
	--reldenomstxt	varchar2(4)	path	'RelDenomStxt',
	--reldenomtext	varchar2(25)	path	'RelDenomText',
	natio nationality,
	--nationalityiso	varchar2(2)	path	'NationalityIso',
	--nationtext	varchar2(15)	path	'NationText',
	spras patlangu,
	--patlanguiso	varchar2(2)	path	'PatLanguIso',
	--langutext	varchar2(16)	path	'LanguText',
	spend organdonor,
	vipkz vip,
	todkz expired,
	toddt dtodeathfrom,
	todzt tmodeathfrom,
	toddb dtodeathto,
	todzb tmodeathto,
	todur cofdeath,
	--cofdeathtxt	varchar2(20)	path	'COfDeathtxt',
	notan emergadm,
	--quickadm	varchar2(1)	path	'QuickAdm',--	tbd!
	--nonresident	varchar2(1)	path	'NonResident',--	no!
	--inactive	varchar2(1)	path	'Inactive',--	no!
	--publistblock	varchar2(1)	path	'Publistblock',
	--religlist	varchar2(1)	path	'ReligList',
	--parish	varchar2(80)	path	'Parish',
	--parishdistrict	varchar2(11)	path	'ParishDistrict',
	--parishtext	varchar2(20)	path	'ParishText',
	race race,
	--racetext	varchar2(15)	path	'RaceText',
	rvnum ssn,
	--doctype	varchar2(2)	path	'DocType',--	no!
	--doctypetext	varchar2(15)	path	'DocTypeText',--	no!
	--docno	varchar2(15)	path	'DocNo',--	no!
	beruf occupation,
	agnum employerid,
	agnam empname,
	adnag empaddrno,
	anna1 contactp1lname,
	anvn1 contactp1fname,
	anvv1 contactp1relsh,
	--contactp1relint	varchar2(1)	path	'Contactp1Relint',
	--contactp1reltxt	varchar2(15)	path	'Contactp1Reltxt',
	vmkz1 contactp1lglrep,
	--contactp1extid	varchar2(20)	path	'Contactp1Extid',--	tbd!
	adnn1 contactp1addrno,
	anna2 contactp2lname,
	anvn2 contactp2fname,
	anvv2 contactp2relsh,
	--contactp2relint	varchar2(1)	path	'Contactp2Relint',
	--contactp2reltxt	varchar2(15)	path	'Contactp2Reltxt',
	vmkz2 contactp2lglrep,
	--contactp2extid	varchar2(20)	path	'Contactp2Extid',
	adnn2 contactp2addrno,
	--famphys	varchar2(10)	path	'FamPhys',--	no!
	earnr refphys,
	uarnr refphys2,
	--user1	varchar2(20)	path	'User1',--	tbd!
	--user2	varchar2(20)	path	'User2',--	tbd!
	--user3	varchar2(10)	path	'User3',--	tbd!
	--user4	varchar2(10)	path	'User4',--	tbd!
	--user5	varchar2(50)	path	'User5',--	tbd!
	--user6	varchar2(1)	path	'User6',--	tbd!
	erdat creationdate,
	erusr creationuser,
	updat updatedate,
	upusr updateuser,
	--cancelind	varchar2(1)	path	'CancelInd',--	no!
	--canceluser	varchar2(12)	path	'CancelUser',--	no!
	--canceldate	varchar2(10)	path	'CancelDate',--	no!
	--employedsince	varchar2(10)	path	'EmployedSince',--	no!
	--unknowndob	varchar2(1)	path	'UnknownDob',--	no!
	--istatbirthpl	varchar2(6)	path	'IstatBirthpl',--	tbd!
	--taxnumber	varchar2(20)	path	'Taxnumber',--	tbd!
	--taxnumberindic	varchar2(1)	path	'TaxnumberIndic',--	tbd!
	--stpcode	varchar2(16)	path	'Stpcode',--	tbd!
	--stpcodeexpiry	varchar2(10)	path	'StpcodeExpiry',--	tbd!
	--consentpersdata	varchar2(1)	path	'ConsentPersdata',--	tbd!
	--birthrank	varchar2(1)	path	'BirthRank',--	tbd!
	--flagextorderer	varchar2(1)	path	'FlagExtOrderer',--	tbd!
	--dthloc	varchar2(2)	path	'DthLoc',--	tbd!
	--postdisphys	varchar2(10)	path	'PostDisPhys',--	tbd!
	--postdisphysoutp	varchar2(10)	path	'PostDisPhysOutp',--	tbd!
	--lastnamepatlong	varchar2(70)	path	'LastNamePatLong',--	no!
	--stdlnamepatlong	varchar2(80)	path	'StdLnamePatLong',--	no!
	--frstnamepatlong	varchar2(70)	path	'FrstNamePatLong',--	no!
	--stdfnamepatlong	varchar2(80)	path	'StdFnamePatLong',--	no!
	--birthnamelong	varchar2(70)	path	'BirthNameLong',--	no!
	--stdbnamepatlong	varchar2(80)	path	'StdBnamePatLong',--	no!
	title_aca2 titleaca2,
	--titleaca2txt	varchar2(20)	path	'TitleAca2txt'
	--sexspecialization	varchar2(1)	path	'SexSpecialization',--	tbd!
	--sexspecializationtxt	varchar2(60)	path	'SexSpecializationTxt',--	tbd!
	land,
	aglan,
	anla1,
	anla2,
	bland regio,
	agplz,
	anpl1,
	anpl2,
	pstlz,
	anor2,
	anor1,
	agort,
	ort,
	agtel,
	ante1,
	ante2,
	telf1,
	agstr,
	anst1,
	anst2,
	stras,
	harnr
from	impnpat
where	nr_seq_carga 	= nr_seq_carga_p
and	nr_sequencia 	= coalesce(nr_sequencia_p, nr_sequencia)
and	((ie_status 	= 'V' and ie_tipo_proc_p = 'IMP') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'))
order by nr_sequencia) a;

c01_w	current_setting('ger_carga_pck.c01')::CURSOR%rowtype;

/*
cursor c02 is
select	*
from	xmltable('/AddPhones/item' passing addphones_w columns
	addrno		varchar2(10)	path	'AddrNo',		-- compl_pessoa_fisica	-> nr_endereco
	seqno		varchar2(3)	path	'SeqNo',		-- compl_pessoa_fisica  	-> nr_sequencia
	phoneno		varchar2(30)	path	'Phoneno',	-- compl_pessoa_fisica	-> nr_telefone
	extension		varchar2(10)	path	'Extension'	-- compl_pessoa_fisica 	-> nr_ramal
	);

c02_w	c02%rowtype;
*/
c03 CURSOR FOR
SELECT	a.*,
	somente_numero(a.addrno) ordem,
	CASE WHEN a.addrno=c01_w.pataddrno THEN  c01_w.occupation END  occupation,
	CASE WHEN a.addrno=c01_w.pataddrno THEN  c01_w.employerid END  employerid,
	substr(CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1fname ||' '|| c01_w.contactp1lname WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2fname ||' '|| c01_w.contactp2lname END ,1,255) contactpname,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1lglrep WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2lglrep END  contactplglrep,
	CASE WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.contactp1relsh WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.contactp2relsh END  contactprelsh,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  'EMP' WHEN a.addrno=c01_w.contactp1addrno THEN  'CT1' WHEN a.addrno=c01_w.contactp2addrno THEN  'CT2' WHEN a.addrno=c01_w.pataddrno THEN  'PAT'  ELSE 'OTH' END  ds_tipo,
	CASE WHEN a.addrno=c01_w.empaddrno THEN  c01_w.agplz WHEN a.addrno=c01_w.contactp1addrno THEN  c01_w.anpl1 WHEN a.addrno=c01_w.contactp2addrno THEN  c01_w.anpl2 WHEN a.addrno=c01_w.pataddrno THEN  c01_w.pstlz END  pcd,
	coalesce(CASE WHEN a.addrno=c01_w.empaddrno THEN  2 WHEN a.addrno=c01_w.contactp1addrno THEN  CASE WHEN c01_w.contactp1relsh='X' THEN  3 END  WHEN a.addrno=c01_w.contactp2addrno THEN  CASE WHEN c01_w.contactp2relsh='X' THEN  3 END  WHEN a.addrno=c01_w.pataddrno THEN  1 END ,9) ie_tipo_complemento
from (
select	nr_sequencia,
	nr_seq_carga,
	nr_seq_carga_arq,
	nr_linha,
	adrnr addrno,
	land country,		-- compl_pessoa_fisica  	-> nr_seq_pais
	--countryiso	varchar2(2)	path	'CountryIso',	-- compl_pessoa_fisica	->
	--countrytext	varchar2(15)	path	'CountryText',	-- compl_pessoa_fisica 	->
	regio region,		-- compl_pessoa_fisica	-> sg_estado
	--regiontext		varchar2(20)	path	'RegionText',	-- compl_pessoa_fisica  	->
	--pcd		varchar2(10)	path	'Pcd',		-- compl_pessoa_fisica	-> cd_cep
	ort city,		-- compl_pessoa_fisica 	-> ds_municipio
	ort2 district,		-- compl_pessoa_fisica  	-> ds_bairro
	--strno		varchar2(40)	path	'StrNo',		-- compl_pessoa_fisica 	-> ds_endereco
	telnr phoneno,	-- compl_pessoa_fisica	-> nr_telefone
	telxt extension,	-- compl_pessoa_fisica 	-> nr_ramal
	faxnr faxno,		-- compl_pessoa_fisica 	-> ds_fax
	faxxt faxextension,	-- compl_pessoa_fisica 	-> nr_ddd_fax
	build building,		-- compl_pessoa_fisica 	-> ds_complemento
	floor,		-- compl_pessoa_fisica 	-> ds_complemento
	room unit,		-- compl_pessoa_fisica 	-> ds_complemento
	email,		-- compl_pessoa_fisica 	-> ds_email
	hsnm1 houseno,	-- compl_pessoa_fisica 	-> ds_complemento
	--addrstring		varchar2(50)	path	'AddrString',	-- compl_pessoa_fisica 	-> ds_bairro
	stras,	-- compl_pessoa_fisica 	-> ds_fonetica
	stras stdstreet,
	straz strsup,	--compl_pessoa_fisica 	-> ds_complemento
	stras_long streetlong,	-- compl_pessoa_fisica 	-> ds_endereco
	ststr stdstreetlong, 	-- compl_pessoa_fisica 	-> ds_endereco
	--contactp1relint varchar2(1)	path	'Contactp1relint',	-- compl_pessoa_fisica 	-> nr_seq_parentesco
	--contactp1extid varchar2(20) path	'Contactp1extid',	-- compl_pessoa_fisica 	-> cd_pessoa_fisica_ref
	str_suppl strsuppl1	--compl_pessoa_fisica 	-> ds_complemento
from	impnadr
where	nr_seq_carga = nr_seq_carga_p
and	adrnr in (c01_w.empaddrno, c01_w.contactp1addrno, c01_w.contactp2addrno, c01_w.pataddrno)) a
where	length(coalesce(a.phoneno,coalesce(a.streetlong,a.stras))) > 0; --Nao importar enderecos que nao possui descricao.
c03_w	c03%rowtype;


cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_localidade_w			cep_localidade.nr_localidade%type;


BEGIN

reg_proc_w.ie_tipo_proc	:=	ie_tipo_proc_p;

select	max(nr_sequencia)
into STRICT	nr_seq_tipo_medico_w
from	tipo_medico_externo
where	ie_medico_familia 	= 'S'
and	ie_situacao		= 'A';

open current_setting('ger_carga_pck.c01')::CURSOR;
loop
fetch current_setting('ger_carga_pck.c01')::into CURSOR
	c01_w;
EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
	begin
	reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, c01_w.nr_seq_carga_arq, c01_w.nr_linha, c01_w.nr_sequencia, 'S');
	CALL ger_carga_pck.atualizar_processamento('IMPNPAT',c01_w.nr_sequencia);

	person_name_w			:= null;
	pessoa_fisica_w			:= null;
    	pessoa_fisica_pront_estab_w	:= null;
	PERFORM set_config('ger_carga_pck.ie_update_w', null, false);
	nacionalidade_w			:= null;
	atendimento_paciente_w		:= null;
	pessoa_fisica_paroquia_w	:= null;
	pessoa_classif_w		:= null;
	pessoa_fisica_idioma_w		:= null;
	pf_codigo_externo_w		:= null;
	pf_forma_tratamento_w		:= null;
	pf_medico_externo_w		:= null;
	ie_resp_legal_w			:= null;
	nm_usuario_w			:= reg_proc_w.usernametasy;
	dt_atualizacao_w		:= clock_timestamp();
	nm_usuario_nrec_w		:= reg_proc_w.usernametasy;
	dt_atualizacao_nrec_w		:= clock_timestamp();

	begin
	--verificar se a mesma ja esta cadastrada na base
	select	max(a.cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	pf_codigo_externo a
	where	ltrim(a.cd_pessoa_fisica_externo,'0') = ltrim(c01_w.patientid,'0')
	and	a.ie_tipo_codigo_externo = 'ISH'
	and coalesce(a.cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento
	and	exists (SELECT 1
		from	pessoa_fisica x
		where	x.cd_pessoa_fisica = a.cd_pessoa_fisica);

	if (coalesce(cd_pessoa_fisica_w,'NULL') <> 'NULL') then
		select	*
		into STRICT	pessoa_fisica_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
	else
		pessoa_fisica_w.cd_pessoa_fisica	:=	null;
	end if;
	exception
	when others then
		begin
		pf_codigo_externo_w.cd_pessoa_fisica	:=	null;
		pessoa_fisica_w.cd_pessoa_fisica	:=	null;
		end;
	end;

	begin
	select	*
	into STRICT	person_name_w
	from	person_name
	where	nr_sequencia = pessoa_fisica_w.nr_seq_person_name;
	exception
	when others then
		person_name_w.nr_sequencia	:=	null;
	end;

	reg_proc_w.nm_tabela	:=	'PERSON_NAME';
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NNAME', 'DS_FAMILY_NAME', c01_w.lastnamepat, person_name_w.ds_family_name) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_family_name := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'VNAME', 'DS_GIVEN_NAME', c01_w.frstnamepat, person_name_w.ds_given_name) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_given_name := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'VORSW', 'DS_COMPONENT_NAME_1', c01_w.prefix, person_name_w.ds_component_name_1) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_component_name_1 := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NAMZU', 'DS_COMPONENT_NAME_3', c01_w.affix, person_name_w.ds_component_name_3) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; person_name_w.ds_component_name_3 := _ora2pg_r.ds_valor_retorno_p;

	if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then
		begin
		if (coalesce(person_name_w.nr_sequencia::text, '') = '') then
			begin
			select	nextval('person_name_seq')
			into STRICT	person_name_w.nr_sequencia
			;

			person_name_w.dt_atualizacao	:=	dt_atualizacao_w;
			person_name_w.dt_atualizacao_nrec	:=	clock_timestamp();
			person_name_w.nm_usuario		:=	nm_usuario_w;
			person_name_w.nm_usuario_nrec	:=	nm_usuario_w;
			person_name_w.ds_type		:=	'main';

			insert into person_name values (person_name_w.*);

			pessoa_fisica_w.nr_seq_person_name	:=	person_name_w.nr_sequencia;
			end;
		else
			update	person_name
			set	row = person_name_w
			where	nr_sequencia = person_name_w.nr_sequencia;
		end if;
		end;
	end if;

	reg_proc_w.nm_tabela	:=	'PESSOA_FISICA';

	begin
	pessoa_fisica_w.dt_nascimento	:=	to_date(c01_w.dob,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
	exception
	when others then
		pessoa_fisica_w.dt_nascimento	:=	null;
	end;

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'GSCHL', 'IE_SEXO', c01_w.sexext, pessoa_fisica_w.ie_sexo) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ie_sexo := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NAME2', 'DS_APELIDO', c01_w.pseudo, pessoa_fisica_w.ds_apelido) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ds_apelido := _ora2pg_r.ds_valor_retorno_p;

	if (length(c01_w.title) > 0) then
		begin
		begin
		select	*
		into STRICT	pf_forma_tratamento_w
		from	pf_forma_tratamento
		where	ds_forma_tratamento = upper(c01_w.title)  LIMIT 1;
		exception
		when others then
			begin
			if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then
				begin
				select	nextval('pf_forma_tratamento_seq')
				into STRICT	pf_forma_tratamento_w.nr_sequencia
				;

				pf_forma_tratamento_w.dt_atualizacao		:=	clock_timestamp();
				pf_forma_tratamento_w.nm_usuario		:=	nm_usuario_w;
				pf_forma_tratamento_w.dt_atualizacao_nrec	:=	clock_timestamp();
				pf_forma_tratamento_w.nm_usuario_nrec	:=	nm_usuario_w;
				pf_forma_tratamento_w.ie_situacao		:=	'A';
				pf_forma_tratamento_w.ds_forma_tratamento	:=	upper(c01_w.title);
				pf_forma_tratamento_w.ds_sigla		:=	upper(c01_w.title);


				insert into pf_forma_tratamento values (pf_forma_tratamento_w.*);
				end;
			end if;
			end;
		end;
		pessoa_fisica_w.nr_seq_forma_trat	:=	pf_forma_tratamento_w.nr_sequencia;
		end;
	end if;

	--ger_carga_pck.proc_val(reg_proc_w, 'NM_PESSOA_FISICA', c01_w.fullnamepat, pessoa_fisica_w.nm_pessoa_fisica);
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'FAMST', 'IE_ESTADO_CIVIL', c01_w.marstat, pessoa_fisica_w.ie_estado_civil) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ie_estado_civil := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'KONFE', 'CD_RELIGIAO', c01_w.reldenom, pessoa_fisica_w.cd_religiao) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.cd_religiao := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'NATIO', 'CD_NACIONALIDADE', c01_w.nationality, pessoa_fisica_w.cd_nacionalidade) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.cd_nacionalidade := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'GBNAS', 'DS_FONETICA', c01_w.stdbnamepat, pessoa_fisica_w.ds_fonetica) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ds_fonetica := _ora2pg_r.ds_valor_retorno_p;
	--ger_carga_pck.proc_val(reg_proc_w, 'GLAND', 'CD_NACIONALIDADE', c01_w.birthctry, pessoa_fisica_w.cd_nacionalidade);
	begin
	select	cd_cep
	into STRICT	nr_localidade_w
	from	cep_localidade_v
	where	upper(nm_localidade) = upper(c01_w.birthplace)  LIMIT 1;
	exception
	when others then
		nr_localidade_w	:= null;
	end;

	if (nr_localidade_w IS NOT NULL AND nr_localidade_w::text <> '') then
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_CEP_CIDADE_NASC', nr_localidade_w, pessoa_fisica_w.nr_cep_cidade_nasc) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.nr_cep_cidade_nasc := _ora2pg_r.ds_valor_retorno_p;
	end if;

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'TITLE_ACA2', 'IE_GRAU_INSTRUCAO', c01_w.titleaca2, pessoa_fisica_w.ie_grau_instrucao) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.ie_grau_instrucao := _ora2pg_r.ds_valor_retorno_p;

	if (c01_w.organdonor = 'X') then
		pessoa_fisica_w.ie_doador	:= 'S';
	else
		pessoa_fisica_w.ie_doador	:= 'N';
	end if;

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'TODUR', 'CD_CID_DIRETA', c01_w.cofdeath, pessoa_fisica_w.cd_cid_direta) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.cd_cid_direta := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'RACE', 'NR_SEQ_COR_PELE', c01_w.race, pessoa_fisica_w.nr_seq_cor_pele) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.nr_seq_cor_pele := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'RVNUM', 'CD_RFC', c01_w.ssn, pessoa_fisica_w.cd_rfc) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.cd_rfc := _ora2pg_r.ds_valor_retorno_p;

	begin
	pessoa_fisica_w.dt_obito	:=	to_date(c01_w.dtodeathfrom || c01_w.tmodeathfrom,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
	exception
	when others then
		pessoa_fisica_w.dt_obito	:=	null;
	end;

	pessoa_fisica_w.nm_usuario		:= nm_usuario_w;
	pessoa_fisica_w.dt_atualizacao		:= dt_atualizacao_w;
	pessoa_fisica_w.nm_usuario_nrec		:= nm_usuario_nrec_w;
	pessoa_fisica_w.dt_atualizacao_nrec	:= dt_atualizacao_nrec_w;

	if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then
		begin
		if (coalesce(pessoa_fisica_w.cd_pessoa_fisica, 'NULL') <> 'NULL') then

            if (c01_w.extpatid IS NOT NULL AND c01_w.extpatid::text <> '') then

                if (obter_param_funcao_html5(0, 120) = 'BASE') then
                    SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTNR', 'NR_PRONTUARIO', c01_w.extpatid, pessoa_fisica_w.nr_prontuario) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.nr_prontuario := _ora2pg_r.ds_valor_retorno_p;
                end if;
                if (obter_param_funcao_html5(0, 120) = 'ESTAB') then
                    reg_proc_w.nm_tabela    :=    'PESSOA_FISICA_PRONT_ESTAB';
                    SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTNR', 'NR_PRONTUARIO', c01_w.extpatid, pessoa_fisica_pront_estab_w.nr_prontuario) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_pront_estab_w.nr_prontuario := _ora2pg_r.ds_valor_retorno_p;

                    pessoa_fisica_pront_estab_w.cd_estabelecimento	:=	wheb_usuario_pck.get_cd_estabelecimento;
                    pessoa_fisica_pront_estab_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
                    pessoa_fisica_pront_estab_w.dt_atualizacao		:=	pessoa_fisica_w.dt_atualizacao;
                    pessoa_fisica_pront_estab_w.dt_atualizacao_nrec	:=	pessoa_fisica_w.dt_atualizacao_nrec;
                    pessoa_fisica_pront_estab_w.nm_usuario		:=	pessoa_fisica_w.nm_usuario;
                    pessoa_fisica_pront_estab_w.nm_usuario_nrec		:=	pessoa_fisica_w.nm_usuario_nrec;

                    select max(nr_sequencia)
                    into STRICT  pessoa_fisica_pront_estab_w.nr_sequencia
                    from  pessoa_fisica_pront_estab
                    where cd_pessoa_fisica = pessoa_fisica_pront_estab_w.cd_pessoa_fisica;
					begin

						update	pessoa_fisica_pront_estab
						set	row = pessoa_fisica_pront_estab_w
						where cd_pessoa_fisica = pessoa_fisica_pront_estab_w.cd_pessoa_fisica;
						GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;

						if ( ora2pg_rowcount = 0) then
							insert into pessoa_fisica_pront_estab(
                                nr_sequencia,
                                nr_prontuario,
                                cd_estabelecimento,
                                cd_pessoa_fisica,
                                dt_atualizacao,
                                dt_atualizacao_nrec,
                                nm_usuario,
                                nm_usuario_nrec
                            ) values (
                                nextval('pessoa_fisica_pront_estab_seq'),
                                pessoa_fisica_pront_estab_w.nr_prontuario,
                                pessoa_fisica_pront_estab_w.cd_estabelecimento,
                                pessoa_fisica_pront_estab_w.cd_pessoa_fisica,
                                pessoa_fisica_pront_estab_w.dt_atualizacao,
                                pessoa_fisica_pront_estab_w.dt_atualizacao_nrec,
                                pessoa_fisica_pront_estab_w.nm_usuario,
                                pessoa_fisica_pront_estab_w.nm_usuario_nrec
                            );
						end if;
					end;	
					
				end if;

                    reg_proc_w.nm_tabela    :=    'PESSOA_FISICA';

            end if;

			if (coalesce(pessoa_fisica_w.nr_prontuario::text, '') = '') then
				select	nextval('prontuario_seq')
				into STRICT	pessoa_fisica_w.nr_prontuario
				;
			end if;

			update	pessoa_fisica
			set	row = pessoa_fisica_w
			where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
			and	current_setting('ger_carga_pck.ie_atualizar_w')::varchar(1) = 'S';

			PERFORM set_config('ger_carga_pck.ie_update_w', 'S;', false);
		else
			begin
			
			select	nextval('pessoa_fisica_seq')
			into STRICT	pessoa_fisica_w.cd_pessoa_fisica
			;

			pessoa_fisica_w.ie_tipo_pessoa	:=	'2';
			ie_new_patient_w := true;

			insert into pessoa_fisica values (pessoa_fisica_w.*);

            if (c01_w.extpatid IS NOT NULL AND c01_w.extpatid::text <> '') then
            
                if (obter_param_funcao_html5(0, 120) = 'BASE') then
                    SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTNR', 'NR_PRONTUARIO', c01_w.extpatid, pessoa_fisica_w.nr_prontuario) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_w.nr_prontuario := _ora2pg_r.ds_valor_retorno_p;
                end if;
                if (obter_param_funcao_html5(0, 120) = 'ESTAB') then
                    reg_proc_w.nm_tabela    :=    'PESSOA_FISICA_PRONT_ESTAB';
                    SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTNR', 'NR_PRONTUARIO', c01_w.extpatid, pessoa_fisica_pront_estab_w.nr_prontuario) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_pront_estab_w.nr_prontuario := _ora2pg_r.ds_valor_retorno_p;

                    pessoa_fisica_pront_estab_w.cd_estabelecimento	:=	wheb_usuario_pck.get_cd_estabelecimento;
                    pessoa_fisica_pront_estab_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
                    pessoa_fisica_pront_estab_w.dt_atualizacao		:=	pessoa_fisica_w.dt_atualizacao;
                    pessoa_fisica_pront_estab_w.dt_atualizacao_nrec	:=	pessoa_fisica_w.dt_atualizacao_nrec;
                    pessoa_fisica_pront_estab_w.nm_usuario		:=	pessoa_fisica_w.nm_usuario;
                    pessoa_fisica_pront_estab_w.nm_usuario_nrec		:=	pessoa_fisica_w.nm_usuario_nrec;

                    select max(nr_sequencia)
                    into STRICT  pessoa_fisica_pront_estab_w.nr_sequencia
                    from  pessoa_fisica_pront_estab
                    where cd_pessoa_fisica = pessoa_fisica_pront_estab_w.cd_pessoa_fisica;

					begin
					update	pessoa_fisica_pront_estab
						set	row = pessoa_fisica_pront_estab_w
						where cd_pessoa_fisica = pessoa_fisica_pront_estab_w.cd_pessoa_fisica;
						GET DIAGNOSTICS ora2pg_rowcount = ROW_COUNT;

						if ( ora2pg_rowcount = 0) then
							insert into pessoa_fisica_pront_estab(
                                nr_sequencia,
                                nr_prontuario,
                                cd_estabelecimento,
                                cd_pessoa_fisica,
                                dt_atualizacao,
                                dt_atualizacao_nrec,
                                nm_usuario,
                                nm_usuario_nrec
                            ) values (
                                nextval('pessoa_fisica_pront_estab_seq'),
                                pessoa_fisica_pront_estab_w.nr_prontuario,
                                pessoa_fisica_pront_estab_w.cd_estabelecimento,
                                pessoa_fisica_pront_estab_w.cd_pessoa_fisica,
                                pessoa_fisica_pront_estab_w.dt_atualizacao,
                                pessoa_fisica_pront_estab_w.dt_atualizacao_nrec,
                                pessoa_fisica_pront_estab_w.nm_usuario,
                                pessoa_fisica_pront_estab_w.nm_usuario_nrec
                            );
						end if;
					end;	

				end if;
	
				reg_proc_w.nm_tabela    :=    'pessoa_fisica';
			
			end if;

			if (coalesce(pessoa_fisica_w.nr_prontuario::text, '') = '') then
				select	nextval('prontuario_seq')
				into STRICT	pessoa_fisica_w.nr_prontuario
				;
			end if;

			select	nextval('pf_codigo_externo_seq')
			into STRICT	pf_codigo_externo_w.nr_sequencia
			;

			pf_codigo_externo_w.cd_pessoa_fisica		:=	pessoa_fisica_w.cd_pessoa_fisica;
			pf_codigo_externo_w.cd_pessoa_fisica_externo	:=	lpad(c01_w.patientid,10,'0');
			pf_codigo_externo_w.nm_usuario		:=	nm_usuario_w;
			pf_codigo_externo_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
			pf_codigo_externo_w.dt_atualizacao		:=	dt_atualizacao_w;
			pf_codigo_externo_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
			pf_codigo_externo_w.ie_tipo_codigo_externo	:=	'ISH';
			pf_codigo_externo_w.cd_estabelecimento	:=	wheb_usuario_pck.get_cd_estabelecimento;

			insert into pf_codigo_externo values (pf_codigo_externo_w.*);
			end;
		end if;

		if (nr_seq_tipo_medico_w IS NOT NULL AND nr_seq_tipo_medico_w::text <> '') and (c01_w.harnr IS NOT NULL AND c01_w.harnr::text <> '') then

			reg_proc_w.nm_tabela	:=	'PF_MEDICO_EXTERNO';

			begin
			select	cd_pessoa_fisica
			into STRICT	cd_medico_externo_w
			from	pf_codigo_externo
			where	ltrim(cd_pessoa_fisica_externo,'0') = ltrim(c01_w.harnr,'0')
			and	ie_tipo_codigo_externo 	= 'ISHMED'
			and coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento  LIMIT 1;
			exception
			when others then
				cd_medico_externo_w	:= null;
			end;

			if (cd_medico_externo_w IS NOT NULL AND cd_medico_externo_w::text <> '') then

				select	count(*)
				into STRICT	qt_reg_w
				from	pf_medico_externo
				where	cd_pessoa_fisica	= pessoa_fisica_w.cd_pessoa_fisica
				and	cd_medico		= cd_medico_externo_w
				and	nr_seq_tipo_medico	= nr_seq_tipo_medico_w;

				if (qt_reg_w = 0) then

					select	nextval('pf_medico_externo_seq')
					into STRICT	pf_medico_externo_w.nr_sequencia
					;

					pf_medico_externo_w.dt_atualizacao	:= clock_timestamp();
					pf_medico_externo_w.nm_usuario		:= 'LOAD_TASY';
					pf_medico_externo_w.dt_atualizacao_nrec	:= clock_timestamp();
					pf_medico_externo_w.nm_usuario_nrec	:= 'LOAD_TASY';
					pf_medico_externo_w.cd_medico		:= cd_medico_externo_w;
					pf_medico_externo_w.cd_pessoa_fisica	:= pessoa_fisica_w.cd_pessoa_fisica;
					pf_medico_externo_w.nr_seq_tipo_medico	:= nr_seq_tipo_medico_w;

					insert into pf_medico_externo values (pf_medico_externo_w.*);
				end if;
			end if;
		end if;
		end;
	end if;

	reg_proc_w.nm_tabela	:=	'PESSOA_FISICA_IDIOMA';
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'SPRAS', 'NR_SEQ_IDIOMA', c01_w.patlangu, pessoa_fisica_idioma_w.nr_seq_idioma) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_idioma_w.nr_seq_idioma := _ora2pg_r.ds_valor_retorno_p;

	begin
	select	*
	into STRICT	pessoa_fisica_idioma_w
	from	pessoa_fisica_idioma
	where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
	and	nr_seq_idioma = pessoa_fisica_idioma_w.nr_seq_idioma  LIMIT 1;
	exception
	when others then
		begin
		if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then
			begin
			select	nextval('pessoa_fisica_idioma_seq')
			into STRICT	pessoa_fisica_idioma_w.nr_sequencia
			;

			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'SPRAS', 'NR_SEQ_IDIOMA', c01_w.patlangu, pessoa_fisica_idioma_w.nr_seq_idioma) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_fisica_idioma_w.nr_seq_idioma := _ora2pg_r.ds_valor_retorno_p;
			pessoa_fisica_idioma_w.cd_pessoa_fisica	:=	pessoa_fisica_w.cd_pessoa_fisica;
			pessoa_fisica_idioma_w.ie_fluencia		:=	'A';
			pessoa_fisica_idioma_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
			pessoa_fisica_idioma_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
			pessoa_fisica_idioma_w.nm_usuario		:=	nm_usuario_w;
			pessoa_fisica_idioma_w.dt_atualizacao		:=	dt_atualizacao_w;

			if (pessoa_fisica_idioma_w.nr_seq_idioma IS NOT NULL AND pessoa_fisica_idioma_w.nr_seq_idioma::text <> '') then
				insert into pessoa_fisica_idioma values (pessoa_fisica_idioma_w.*);
			end if;
			end;
		end if;
		end;
	end;

	if (ie_tipo_proc_p = 'IMP') then
		/*'Exclui os registros com idioma diferente do registrado no IS-H'*/

		delete	FROM pessoa_fisica_idioma
		where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica
		and	nr_sequencia <> pessoa_fisica_idioma_w.nr_sequencia;
	end if;

	if (reg_proc_w.nr_seq_regra_conv > 0) then
		reg_proc_w := ger_carga_pck.gerar_pessoa_classif(reg_proc_w, pessoa_fisica_w.cd_pessoa_fisica, 'VIP', c01_w.vip, reg_proc_w.nr_seq_regra_conv, 'S', reg_proc_w.usernametasy, dt_atualizacao_w);
	else
		reg_proc_w := ger_carga_pck.gerar_pessoa_classif(reg_proc_w, pessoa_fisica_w.cd_pessoa_fisica, 'VIP', c01_w.vip, reg_proc_w.nr_seq_regra_conv, 'N', reg_proc_w.usernametasy, dt_atualizacao_w);
	end if;

	if (ie_tipo_proc_p = 'IMP') then
		delete	FROM compl_pessoa_fisica
		where	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;
	end if;

	open c03;
	loop
	fetch c03 into
		c03_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, c03_w.nr_seq_carga_arq, c03_w.nr_linha, c03_w.nr_sequencia, 'N');
		reg_proc_w.nm_tabela	:=	'COMPL_PESSOA_FISICA';

		ie_tipo_complemento_w	:=	c03_w.ie_tipo_complemento;
		nr_seq_tipo_compl_adic_w	:=	null;
		ie_resp_legal_w		:= 	null;

		if (c03_w.ds_tipo in ('PAT')) then
			ie_tipo_complemento_w		:=	'1';
			nr_seq_tipo_compl_adic_w	:=	null;
		elsif (c03_w.ds_tipo in ('CT1','CT2')) then
			begin

			ie_tipo_complemento_w := somente_numero(intpd_conv(
									'COMPL_PESSOA_FISICA',
									'IE_TIPO_COMPLEMENTO',
									c03_w.contactprelsh,
									reg_proc_w.nr_seq_regra_conv,
									'S',
									'I'));

			if	((ie_tipo_complemento_w > 0) and (ie_tipo_complemento_w not in (9))) then
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'IE_TIPO_COMPLEMENTO', c03_w.contactprelsh, ie_tipo_complemento_w, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; ie_tipo_complemento_w := _ora2pg_r.ds_valor_retorno_p;
				nr_seq_tipo_compl_adic_w	:=	null;
			else
				ie_tipo_complemento_w	:=	9;
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_SEQ_TIPO_COMPL_ADIC', c03_w.contactprelsh, nr_seq_tipo_compl_adic_w, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; nr_seq_tipo_compl_adic_w := _ora2pg_r.ds_valor_retorno_p;

				if (c03_w.contactplglrep = 'X') then
					ie_resp_legal_w	:= 'S';
				end if;
			end if;
			end;
		end if;

		ds_complemento_w :=	substr(
			replace(c03_w.building,';','.') || ';' ||
			replace(c03_w.floor,';','.') || ';' ||
			replace(c03_w.unit,';','.') || ';' ||
			replace(c03_w.houseno,';','.'),1,40);

		--if	(ie_tipo_complemento_w = 1) then
			ds_endereco_w	:= coalesce(c03_w.streetlong,c03_w.stras);
		--end if;
		
			reg_proc_w := ger_carga_pck.gerar_compl_pessoa_fisica(
			reg_proc_w,  --> reg_integracao_p in out gerar_int_padrao.reg_integracao_conv,
			pessoa_fisica_w.cd_pessoa_fisica,  --> cd_pessoa_fisica_p in varchar2,
			ie_tipo_complemento_w,  --> ie_tipo_complemento_p in number,
			nr_seq_tipo_compl_adic_w,  --> nr_seq_tipo_compl_adic_p in number,
			c03_w.occupation,  --> cd_profissao_p in varchar2,
			c03_w.employerid,  --> cd_empresa_refer_p in varchar2,
			c03_w.contactpname,  --> nm_contato_p in varchar2,
			c03_w.phoneno,  --> nr_telefone_p in varchar2,
			c03_w.extension,  --> nr_ramal_p in varchar2,
			c03_w.faxno,  --> ds_fax_p in varchar2,
			c03_w.faxextension,  --> nr_ddd_fax_p in varchar2,
			c03_w.country,  --> nr_seq_pais_p in number,
			c03_w.region,  --> sg_estado_p in varchar2,
			c03_w.pcd,  --> cd_cep_p in varchar2,
			c03_w.city,  --> ds_municipio_p in varchar2,
			c03_w.district,  --> ds_bairro_p in varchar2,
			ds_endereco_w /*c03_w.streetlong*/
,  --> ds_endereco_p in varchar2,
			c03_w.houseno,  --> ds_compl_end nr_endereco_p in varchar2,
			c03_w.strsuppl1,  --> ds_complemento_p in varchar2,
			c03_w.email,  --> ds_email_p in varchar2,
			c03_w.stdstreet, c03_w.strsup, null, --c03_w.contactp1relint,
			null, --c03_w.contactp1extid,
			nm_usuario_w /*--> nm_usuario_p in varchar2*/
, c03_w.addrno, c03_w.ds_tipo, ie_resp_legal_w);
		end;
	end loop;

	close c03;

	if (reg_proc_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		ie_new_patient_w	:= false;
		update	impnpat
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= c01_w.nr_sequencia;
		end;
	elsif (ie_tipo_proc_p = 'IMP') then
		update	impnpat
		set	ie_status 		= 'I',
			ds_chave_tasy		= current_setting('ger_carga_pck.ie_update_w')::varchar(2)||pessoa_fisica_w.cd_pessoa_fisica,
			dt_fim_proc		= clock_timestamp()
		where	nr_sequencia 		= c01_w.nr_sequencia;

		update	impnadr a
		set	a.ie_status 		= 'I',
			a.dt_fim_proc		= clock_timestamp()
		where	a.nr_seq_carga	= nr_seq_carga_p
		and	a.adrnr 		in (c01_w.empaddrno, c01_w.contactp1addrno, c01_w.contactp2addrno, c01_w.pataddrno);
	else
		update	impnpat
		set	ie_status 		= 'V',
			dt_fim_proc		= clock_timestamp()
		where	nr_sequencia 		= c01_w.nr_sequencia;

		update	impnadr a
		set	a.ie_status 		= 'V',
			a.dt_fim_proc		= clock_timestamp()
		where	a.nr_seq_carga	= nr_seq_carga_p
		and	a.adrnr 		in (c01_w.empaddrno, c01_w.contactp1addrno, c01_w.contactp2addrno, c01_w.pataddrno);
	end if;
	exception
	when others then
		begin
		ds_erro_w	:=	substr('NR Sequencia: ' || c01_w.nr_sequencia ||
                        'Cd Pessoa: ' || pessoa_fisica_w.cd_pessoa_fisica || chr(13) || chr(10)  || 
                        dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', ds_erro_w);
		ie_new_patient_w	:= false;

		update	impnpat
		set	ie_status = 'E'	,
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia = c01_w.nr_sequencia;
		end;
	end;
	commit;
end loop;
close current_setting('ger_carga_pck.c01')::CURSOR;

	if (obter_param_funcao_html5(0, 120) in ('BASE', 'ESTAB')) then

		CALL tasy_posicionar_sequence('PESSOA_FISICA_PRONT_ESTAB', 'NR_PRONTUARIO', 'R');
	
	end if;
	

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.proc_impnpat ( nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
