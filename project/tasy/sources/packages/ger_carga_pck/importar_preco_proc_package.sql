-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.importar_preco_proc ( nr_seq_carga_p ger_carga_inicial.nr_sequencia%type, nr_seq_carga_arq_p ger_carga_arq.nr_sequencia%type, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
reg_proc_w			r_reg_proc;
qt_registro_w			bigint;
ds_erro_w			varchar(4000);
vl_procedimento_w		preco_amb.vl_procedimento%type;
qt_pontuacao_w      		preco_amb.qt_pontuacao%type;
cd_edicao_amb_w			edicao_amb.cd_edicao_amb%type;
edicao_amb_w			edicao_amb%rowtype;
preco_amb_w			preco_amb%rowtype;
nr_seq_preco_amb_w		bigint;

current_setting('ger_carga_pck.c01')::CURSOR CURSOR FOR
SELECT	*
from	imp_procedimento_preco_ger
where	nr_seq_carga 	= nr_seq_carga_p
and	((ie_status 	= 'V') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'));

imp_procedimento_preco_ger_w	current_setting('ger_carga_pck.c01')::CURSOR%rowtype;


BEGIN

reg_proc_w.ie_tipo_proc	:= ie_tipo_proc_p;

open current_setting('ger_carga_pck.c01')::CURSOR;
loop
fetch current_setting('ger_carga_pck.c01')::into CURSOR
	imp_procedimento_preco_ger_w;
EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
	begin

	reg_proc_w.nm_tabela	:= 'PRECO_AMB';

	reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, imp_procedimento_preco_ger_w.nr_seq_carga_arq, imp_procedimento_preco_ger_w.nr_linha, imp_procedimento_preco_ger_w.nr_sequencia, 'S');
	CALL ger_carga_pck.atualizar_processamento('IMP_PROCEDIMENTO_PRECO_GER', imp_procedimento_preco_ger_w.nr_sequencia);
	PERFORM set_config('ger_carga_pck.ie_update_w', null, false);

	if (ie_tipo_proc_p = 'IMP') then
		if (coalesce(edicao_amb_w.cd_edicao_amb::text, '') = '') then
			begin
			select 	coalesce(max(cd_edicao_amb)+1, 1)
			into STRICT 	edicao_amb_w.cd_edicao_amb
			from 	edicao_amb;

			if ((imp_procedimento_preco_ger_w.ie_origem_proced)::numeric  = 13) then
				edicao_amb_w.ds_edicao_amb := obter_desc_expressao(959207);
			elsif ((imp_procedimento_preco_ger_w.ie_origem_proced)::numeric  = 14) then
				edicao_amb_w.ds_edicao_amb := obter_desc_expressao(959205);
			end if;

			edicao_amb_w.ie_situacao	:= 'A';
			edicao_amb_w.dt_atualizacao	:= clock_timestamp();
			edicao_amb_w.nm_usuario		:= reg_proc_w.usernametasy;
			edicao_amb_w.ie_origem_proced	:= (imp_procedimento_preco_ger_w.ie_origem_proced)::numeric;

			insert into edicao_amb values (edicao_amb_w.*);
			end;
		end if;

		if (coalesce(imp_procedimento_preco_ger_w.vl_procedimento::text, '') = '' or imp_procedimento_preco_ger_w.vl_procedimento = '') then
			vl_procedimento_w := 0;
		else
			vl_procedimento_w := (imp_procedimento_preco_ger_w.vl_procedimento)::numeric;
		end if;

		if (coalesce(imp_procedimento_preco_ger_w.qt_pontuacao::text, '') = '' or imp_procedimento_preco_ger_w.qt_pontuacao = '') then
			qt_pontuacao_w := 0;
		else
			qt_pontuacao_w := (imp_procedimento_preco_ger_w.qt_pontuacao)::numeric;
		end if;

		if ((imp_procedimento_preco_ger_w.ie_origem_proced)::numeric  = 13) then

			select	nextval('preco_amb_seq')
			into STRICT	nr_seq_preco_amb_w
			;

			insert into preco_amb(nr_sequencia,
				cd_edicao_amb,
				cd_procedimento,
				vl_procedimento,
				cd_moeda,
				dt_atualizacao,
				nm_usuario,
				ie_origem_proced,
				dt_inicio_vigencia,
				dt_final_vigencia,
				qt_pontuacao)
			values (nr_seq_preco_amb_w,
				edicao_amb_w.cd_edicao_amb,
				imp_procedimento_preco_ger_w.cd_procedimento,
				vl_procedimento_w,
				(imp_procedimento_preco_ger_w.cd_moeda)::numeric ,
				clock_timestamp(),
				reg_proc_w.usernametasy,
				(imp_procedimento_preco_ger_w.ie_origem_proced)::numeric ,
				to_date(imp_procedimento_preco_ger_w.dt_inicio_vigencia, current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type),
				to_date(imp_procedimento_preco_ger_w.dt_final_vigencia, current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type),
				qt_pontuacao_w );

		elsif ((imp_procedimento_preco_ger_w.ie_origem_proced)::numeric  = 14) then

			select	nextval('preco_amb_seq')
			into STRICT	nr_seq_preco_amb_w
			;

			insert into preco_amb(nr_sequencia,
				cd_edicao_amb,
				cd_procedimento,
				vl_procedimento,
				cd_moeda,
				dt_atualizacao,
				nm_usuario,
				ie_origem_proced)
			values (nr_seq_preco_amb_w,
				edicao_amb_w.cd_edicao_amb,
				imp_procedimento_preco_ger_w.cd_procedimento,
				vl_procedimento_w,
				(imp_procedimento_preco_ger_w.cd_moeda)::numeric ,
				clock_timestamp(),
				reg_proc_w.usernametasy,
				(imp_procedimento_preco_ger_w.ie_origem_proced)::numeric );
		end if;

	elsif (ie_tipo_proc_p = 'VAL') then

		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'CD_MOEDA', 'CD_MOEDA', imp_procedimento_preco_ger_w.cd_moeda, preco_amb_w.cd_moeda) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; preco_amb_w.cd_moeda := _ora2pg_r.ds_valor_retorno_p;

		begin
		select	1
		into STRICT	qt_registro_w
		from	procedimento
		where	cd_procedimento		= imp_procedimento_preco_ger_w.cd_procedimento
		and	ie_origem_proced	= (imp_procedimento_preco_ger_w.ie_origem_proced)::numeric  LIMIT 1;
		exception
		when others then
			qt_registro_w	:= 0;
		end;

		if (qt_registro_w = 0) then
			
				reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(
				reg_proc_w, '11', substr(wheb_mensagem_pck.get_texto(736989,
					'DS_ELEMENTO=IMP_PROCEDIMENTO_PRECO_GER' ||
					';DS_ATRIBUTO=CD_PROCEDIMENTO;IE_ORIGEM_PROCED' ||
					';NM_TABELA_REFERENCIA=PROCEDIMENTO' ||
					';DS_VALOR='|| imp_procedimento_preco_ger_w.cd_procedimento ||';'|| imp_procedimento_preco_ger_w.ie_origem_proced ),1,4000));
		end if;
	end if;

	if (reg_proc_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		update	imp_procedimento_preco_ger
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= imp_procedimento_preco_ger_w.nr_sequencia;
		end;
	elsif (ie_tipo_proc_p = 'IMP') then
		update	imp_procedimento_preco_ger
		set	ie_status 	= 'I',
			ds_chave_tasy	= edicao_amb_w.cd_edicao_amb||';'||imp_procedimento_preco_ger_w.cd_procedimento||';'||imp_procedimento_preco_ger_w.ie_origem_proced||';',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= imp_procedimento_preco_ger_w.nr_sequencia;
	else
		update	imp_procedimento_preco_ger
		set	ie_status 	= 'V',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= imp_procedimento_preco_ger_w.nr_sequencia;
	end if;

	exception
	when others then
		begin
		ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		 reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import( reg_proc_w, '4', ds_erro_w);

		update	imp_procedimento_preco_ger
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= imp_procedimento_preco_ger_w.nr_sequencia;

		end;
	end;

	commit;

end loop;
close current_setting('ger_carga_pck.c01')::CURSOR;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.importar_preco_proc ( nr_seq_carga_p ger_carga_inicial.nr_sequencia%type, nr_seq_carga_arq_p ger_carga_arq.nr_sequencia%type, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
