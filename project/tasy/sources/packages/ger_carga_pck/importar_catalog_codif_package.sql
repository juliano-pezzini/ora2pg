-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.importar_catalog_codif (nr_seq_carga_p bigint, nr_seq_carga_arq_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


nr_vetor_w			bigint	:= 0;
qt_cursor_w			bigint	:= 0;

nr_versao_w			impcat.nr_versao%type;
ds_descricao_catalogo_w		impcat.ds_descricao_catalogo%type;
ds_rotulo_exibicao_w		impcat.ds_rotulo_exibicao%type;
nr_seq_cat_codif_w		catalogo_codificacao.nr_sequencia%type;
nr_seq_cat_codif_categ_w	catalogo_codif_categ.nr_sequencia%type;
nr_seq_categ_w			catalogo_codif_categ.nr_sequencia%type;
nr_seq_categ_pai_w		catalogo_codif_categ.nr_sequencia%type;
nm_usuario_w			usuario.nm_usuario%type;
nr_sequencia_w			impcat.nr_sequencia%type;
ie_tipo_catalogo_w		impcat.ie_tipo_catalogo%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
cd_tipo_catalogo_w		catalogo_codificacao.ie_tipo_catalogo%type;
qt_reg_w			bigint;
nr_seq_proc_w           procedimento.cd_procedimento%type;

current_setting('ger_carga_pck.c01')::CURSOR CURSOR(nr_seq_carga_p  bigint, nr_seq_carga_arq_p  bigint) FOR
	SELECT  cd_categoria,
		ds_descricao_categoria,
		cd_categoria_pai
	from    impcat
	where   nr_seq_carga = nr_seq_carga_p
	and     nr_seq_carga_arq = nr_seq_carga_arq_p
	and     (cd_categoria IS NOT NULL AND cd_categoria::text <> '')
	and     (ds_descricao_categoria IS NOT NULL AND ds_descricao_categoria::text <> '')
	order	by nr_sequencia;

c01_w		current_setting('ger_carga_pck.c01')::CURSOR%rowtype;

c02 CURSOR(nr_seq_carga_p  bigint, nr_seq_carga_arq_p  bigint) FOR
	SELECT  cd_item,
		ds_item,
		cd_categoria_item
	from    impcat
	where   nr_seq_carga = nr_seq_carga_p
	and     nr_seq_carga_arq = nr_seq_carga_arq_p
	and     (cd_item IS NOT NULL AND cd_item::text <> '')
	and     (ds_item IS NOT NULL AND ds_item::text <> '')
	and	cd_categoria_item = c01_w.cd_categoria
	order	by nr_sequencia;

type reg_c02 is table of c02%RowType;
vet_c02_w 			reg_c02;

type diag_registro is table of catalogo_codif_item%rowtype index by integer;
diag_registro_w		diag_registro;

type registro is table of procedimento%rowtype index by integer;
proc_registros_w	registro;

type registros is table of catalogo_codif_categ_proc%rowtype index by integer;
cat_proc_reg_w		registros;

BEGIN

nm_usuario_w := wheb_usuario_pck.get_nm_usuario;


select  nr_sequencia,
	nr_versao,
	ds_descricao_catalogo,
	ds_rotulo_exibicao,
	ie_tipo_catalogo
into STRICT	nr_sequencia_w,
	nr_versao_w,
	ds_descricao_catalogo_w,
	ds_rotulo_exibicao_w,
	ie_tipo_catalogo_w
from    impcat
where   nr_seq_carga = nr_seq_carga_p
and     nr_seq_carga_arq = nr_seq_carga_arq_p
and     (nr_versao IS NOT NULL AND nr_versao::text <> '');

select	max(nr_sequencia) + 1
into STRICT	nr_seq_cat_codif_w
from    catalogo_codificacao;

if (ie_tipo_proc_p = 'VAL') then
	if (coalesce(nr_versao_w::text, '') = '') then
		CALL gerar_ger_carga_log_import(
				'LOAD_TASY',
				nr_seq_carga_p,
				7,
				obter_desc_expressao(505435)||' ('||nr_versao_w||')',
				null,
				nr_sequencia_w,
				47,
				null);
	end if;
	if (coalesce(ds_descricao_catalogo_w::text, '') = '') then
			CALL gerar_ger_carga_log_import(
				'LOAD_TASY',
				nr_seq_carga_p,
				7,
				obter_desc_expressao(505435)||' ('||ds_descricao_catalogo_w||')',
				null,
				nr_sequencia_w,
				47,
				null);
	end if;
	if (coalesce(ds_rotulo_exibicao_w::text, '') = '') then
			CALL gerar_ger_carga_log_import(
				'LOAD_TASY',
				nr_seq_carga_p,
				7,
				obter_desc_expressao(505435)||' ('||ds_descricao_catalogo_w||')',
				null,
				nr_sequencia_w,
				47,
				null);
	end if;
	
end if;

if (coalesce(ie_tipo_proc_p,'IMP') = 'IMP') then

	if (upper(ie_tipo_catalogo_w) = 'PROCEDURE') then
		cd_tipo_catalogo_w := 'P';

		select	count(1)
		into STRICT	qt_reg_w
		from	area_procedimento
		where	cd_area_procedimento = 99999;
				
		if (coalesce(qt_reg_w,0) = 0) then
			insert into area_procedimento(cd_area_procedimento,
						ds_area_procedimento,
						dt_atualizacao,
						nm_usuario,
						ie_origem_proced,
						cd_original,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
					values (99999,
						'N/A',
						clock_timestamp(),
						nm_usuario_w,
						4,
						99999,
						clock_timestamp(),
						nm_usuario_w);

			commit;

			insert into especialidade_proc(cd_especialidade,
						ds_especialidade,
						dt_atualizacao,
						nm_usuario,
						cd_area_procedimento,
						ie_origem_proced,
						cd_original,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
					values (99999,
						'N/A',
						clock_timestamp(),
						nm_usuario_w,
						99999,
						4,
						99999,
						clock_timestamp(),
						nm_usuario_w);
								
			commit;
						
			insert into grupo_proc(	cd_grupo_proc,
						ds_grupo_proc,
						cd_especialidade,
						ie_situacao,
						dt_atualizacao,
						nm_usuario,
						ie_origem_proced,
						cd_original)
					values (	99999,
						'N/A',
						99999,
						'A',
						clock_timestamp(),
						nm_usuario_w,
						4,
						99999);
								
			commit;

		end if;		

	elsif (upper(ie_tipo_catalogo_w) = 'DIAGNOSIS') then
		cd_tipo_catalogo_w := 'D';
	end if;
	
	
	
	insert into catalogo_codificacao(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_versao,
				ds_descricao_catalogo,
				ds_rotulo_exibicao,
				ie_usar_como_padrao,
				ie_situacao,
				ie_tipo_catalogo
				)
			values (
				nr_seq_cat_codif_w,
				clock_timestamp(),
				nm_usuario_w,
				clock_timestamp(),
				nm_usuario_w,
				to_number(nr_versao_w,'9999.99'),
				ds_descricao_catalogo_w,
				ds_rotulo_exibicao_w,
				'S',
				'A',
				cd_tipo_catalogo_w
				);
				
				

	commit;
	
	open current_setting('ger_carga_pck.c01')::CURSOR(nr_seq_carga_p, nr_seq_carga_arq_p);
	loop
	fetch current_setting('ger_carga_pck.c01')::into CURSOR
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
		begin

		nr_seq_categ_pai_w := null;

		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_cat_codif_categ_w
		from    catalogo_codif_categ;

		select	max(nr_sequencia)
		into STRICT	nr_seq_categ_pai_w
		from	catalogo_codif_categ
		where	cd_categoria = c01_w.cd_categoria_pai;

		insert into catalogo_codif_categ(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_catalogo,
					cd_categoria,
					ds_descricao_categoria,
					nr_seq_categ_pai
					)
				values (
					nr_seq_cat_codif_categ_w,
					clock_timestamp(),
					nm_usuario_w,
					clock_timestamp(),
					nm_usuario_w,
					nr_seq_cat_codif_w,
					c01_w.cd_categoria,
					c01_w.ds_descricao_categoria,
					nr_seq_categ_pai_w
				);

		commit;

		open c02(nr_seq_carga_p, nr_seq_carga_arq_p);
		loop
		fetch c02 bulk collect into vet_c02_w limit 1000;
			for i in 1..vet_c02_w.Count loop
				begin
				
				select	nr_sequencia
				into STRICT	nr_seq_categ_w
				from	catalogo_codif_categ
				where	cd_categoria = vet_c02_w[i].cd_categoria_item
				and	nr_seq_catalogo = nr_seq_cat_codif_w;
				
				if (upper(ie_tipo_catalogo_w) = 'DIAGNOSIS') then

					qt_cursor_w:=	qt_cursor_w + 1;

					diag_registro_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
					diag_registro_w[qt_cursor_w].nm_usuario			:= nm_usuario_w;
					diag_registro_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
					diag_registro_w[qt_cursor_w].nm_usuario_nrec		:= nm_usuario_w;
					diag_registro_w[qt_cursor_w].nr_seq_catalogo		:= nr_seq_cat_codif_w;
					diag_registro_w[qt_cursor_w].cd_item			:= vet_c02_w[i].cd_item;
					diag_registro_w[qt_cursor_w].ds_item			:= vet_c02_w[i].ds_item;
					diag_registro_w[qt_cursor_w].nr_seq_categoria		:= nr_seq_categ_w;

					if (nr_vetor_w >= 1000) then
						forall j in diag_registro_w.first..diag_registro_w.last
							insert into catalogo_codif_item values diag_registro_w(j);

						nr_vetor_w	:= 0;
						diag_registro_w.delete;

						commit;
					end if;

					nr_vetor_w	:= nr_vetor_w 	+ 1;					
					
				elsif (upper(ie_tipo_catalogo_w) = 'PROCEDURE') then
				
					qt_cursor_w:=	qt_cursor_w + 1;

					select  99999||nr_seq_cat_codif_w||nextval('procedimento_seq')
					into STRICT    nr_seq_proc_w
					;
					
					proc_registros_w[qt_cursor_w].cd_procedimento_loc	:= vet_c02_w[i].cd_item;
					proc_registros_w[qt_cursor_w].ds_procedimento		:= vet_c02_w[i].ds_item;
					proc_registros_w[qt_cursor_w].ie_situacao		:= 'A';
					proc_registros_w[qt_cursor_w].cd_grupo_proc		:= '99999';
					proc_registros_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
					proc_registros_w[qt_cursor_w].nm_usuario		:= 'Tasy';
					proc_registros_w[qt_cursor_w].ie_classificacao		:= '1';
					proc_registros_w[qt_cursor_w].ie_origem_proced		:= 4;
					proc_registros_w[qt_cursor_w].ie_exige_autor_sus	:= 'N';
					proc_registros_w[qt_cursor_w].qt_exec_barra		:= 0;
					proc_registros_w[qt_cursor_w].ie_ativ_prof_bpa		:= 'N';
					proc_registros_w[qt_cursor_w].ie_alta_complexidade	:= 'N';
					proc_registros_w[qt_cursor_w].ie_ignora_origem		:= 'N';
					proc_registros_w[qt_cursor_w].ie_classif_custo		:= 'B';
					proc_registros_w[qt_cursor_w].ie_localizador		:= 'S';
					proc_registros_w[qt_cursor_w].cd_procedimento		:= nr_seq_proc_w;
					proc_registros_w[qt_cursor_w].nr_seq_catalogo		:= nr_seq_cat_codif_w;
					
					cat_proc_reg_w[qt_cursor_w].ie_origem_proced		:= 4;
					cat_proc_reg_w[qt_cursor_w].nr_seq_categoria		:= nr_seq_cat_codif_categ_w;
					cat_proc_reg_w[qt_cursor_w].cd_procedimento		:= proc_registros_w[qt_cursor_w].cd_procedimento;
					
					if (nr_vetor_w >= 1000) then
						forall j in proc_registros_w.first..proc_registros_w.last
							insert into procedimento values proc_registros_w(j);

						forall j in cat_proc_reg_w.first..cat_proc_reg_w.last
							insert into catalogo_codif_categ_proc values cat_proc_reg_w(j);

						nr_vetor_w	:= 0;
						proc_registros_w.delete;
						cat_proc_reg_w.delete;

						commit;
					end if;

					nr_vetor_w	:= nr_vetor_w 	+ 1;
				
				end if;

				end;
			end loop;
		EXIT WHEN NOT FOUND; /* apply on c02 */
		end loop;
		close c02;
		end;
	end loop;
	close current_setting('ger_carga_pck.c01')::CURSOR;

	if (proc_registros_w.count > 0) then
		forall l in proc_registros_w.first..proc_registros_w.last
			insert into procedimento values proc_registros_w(l);

		proc_registros_w.delete;

		commit;
	end if;
	
	if (cat_proc_reg_w.count > 0) then
		forall l in cat_proc_reg_w.first..cat_proc_reg_w.last
			insert into catalogo_codif_categ_proc values cat_proc_reg_w(l);
		
		cat_proc_reg_w.delete;

		commit;
	end if;

	if (diag_registro_w.count > 0) then
		forall l in diag_registro_w.first..diag_registro_w.last
			insert into catalogo_codif_item values diag_registro_w(l);

		diag_registro_w.delete;

		commit;
	end if;	
	
end if;


update	ger_carga_inicial
set	ie_acao		= 'DONE' --Finalizado
where	nr_sequencia	= nr_seq_carga_p;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.importar_catalog_codif (nr_seq_carga_p bigint, nr_seq_carga_arq_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
