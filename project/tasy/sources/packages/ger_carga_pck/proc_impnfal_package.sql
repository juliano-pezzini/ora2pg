-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.proc_impnfal ( nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
impnfal_w			impnfal%rowtype;
impnbew_w			impnbew%rowtype;
episodio_paciente_w		episodio_paciente%rowtype;
atendimento_paciente_w		atendimento_paciente%rowtype;
atend_paciente_unidade_w	atend_paciente_unidade%rowtype;
atendimento_paciente_inf_w	atendimento_paciente_inf%rowtype;

reg_proc_w			r_reg_proc;

ds_erro_w			varchar(4000);
dt_atualizacao_w		timestamp;
nm_usuario_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w		varchar(15);
i				integer;
qt_erro_w			bigint;
nr_seq_interno_w		bigint;
qt_reg_w			bigint;
dt_alta_w			timestamp;
ie_tipo_atendimento_w	atendimento_paciente.ie_tipo_atendimento%type;
cd_motivo_alta_w		motivo_alta.cd_motivo_alta%type;
cd_cgc_w			atendimento_paciente.cd_cgc_indicacao%type;
current_setting('ger_carga_pck.nr_atendimento_w')::atendimento_paciente.nr_atendimento%TYPE		atendimento_paciente.nr_atendimento%type;
nr_seq_tipo_admissao_fat_w	varchar(255);
ie_gerar_novo_atendimento_w	tipo_admissao_fat.ie_gerar_novo_atendimento%type;
ie_gerar_passagem_setor_w	tipo_admissao_fat.ie_gerar_passagem_setor%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
ie_tipo_kv_w			tipo_admissao_fat.ie_tipo_kv%type;
ie_criou_admissao_w		varchar(1);
falnr_w				impnfal.falnr%type;

current_setting('ger_carga_pck.c01')::CURSOR CURSOR FOR
SELECT	*
from	impnfal
where	nr_seq_carga 	= nr_seq_carga_p
and	nr_sequencia 	= coalesce(nr_sequencia_p, nr_sequencia)
and	((ie_status 	= 'V' and ie_tipo_proc_p = 'IMP') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'));

c02 CURSOR FOR
SELECT	*
from	impnbew
where	nr_seq_carga	= nr_seq_carga_p
and	falnr		= impnfal_w.falnr
and	coalesce(stdat::text, '') = ''  --Nao cancelado
order by to_date( BWIDT || BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss') asc;


BEGIN

reg_proc_w.ie_tipo_proc	:=	ie_tipo_proc_p;

open current_setting('ger_carga_pck.c01')::CURSOR;
loop
fetch current_setting('ger_carga_pck.c01')::into CURSOR
	impnfal_w;
EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
	begin

	atendimento_paciente_w		:= null;
	episodio_paciente_w		:= null;
	atend_paciente_unidade_w	:= null;
	atendimento_paciente_inf_w	:= null;

	reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnfal_w.nr_seq_carga_arq, impnfal_w.nr_linha, impnfal_w.nr_sequencia, 'S');
	CALL ger_carga_pck.atualizar_processamento('IMPNFAL',impnfal_w.nr_sequencia);

	PERFORM set_config('ger_carga_pck.ie_update_w', null, false);
	nm_usuario_w			:= reg_proc_w.usernametasy;
	dt_atualizacao_w		:= clock_timestamp();
	nm_usuario_nrec_w		:= reg_proc_w.usernametasy;
	dt_atualizacao_nrec_w		:= clock_timestamp();

	select	ltrim( impnfal_w.falnr ,'0')
	into STRICT	falnr_w
	;

	begin
	select	*
	into STRICT	episodio_paciente_w
	from	episodio_paciente
	where	nr_episodio = falnr_w  LIMIT 1;
	exception
	when others then
		episodio_paciente_w.nr_sequencia	:=	null;
	end;

	impnbew_w := null;

	begin
	select	*
	into STRICT	impnbew_w
	from	impnbew
	where	nr_seq_carga	= nr_seq_carga_p
	and	falnr		= impnfal_w.falnr
	and	bewty		= '1' --Admisssion
	and	coalesce(stdat::text, '') = '' --Nao cancelado
  LIMIT 1;
	exception
	when others then
		begin
		select	*
		into STRICT	impnbew_w
		from	impnbew a
		where	a.nr_seq_carga	= nr_seq_carga_p
		and	a.falnr		= impnfal_w.falnr
		and	coalesce(a.stdat::text, '') = '' --Nao cancelado
		and	a.lfdnr		=
			(SELECT	min((x.lfdnr)::numeric )
			from	impnbew x
			where	x.nr_seq_carga	= nr_seq_carga_p
			and	x.falnr		= a.falnr
			and	coalesce(x.stdat::text, '') = '') LIMIT 1;
		exception
		when others then
			impnbew_w.nr_sequencia	:= null;
		end;
	end;

	reg_proc_w.nm_tabela	:=	'ATENDIMENTO_PACIENTE';

	if (coalesce(impnbew_w.nr_sequencia::text, '') = '') then
		--Nao foi localizado movimento de admissao para o registro recebido. Elemento: #@DS_ELEMENTO#@. Atributo: #@DS_ATRIBUTO#@. Valor: #@DS_VALOR#@.
		reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '11', wheb_mensagem_pck.get_texto(1072522,'DS_ELEMENTO=NFAL'||';DS_ATRIBUTO=FALNR'||';DS_VALOR='||impnfal_w.falnr));
	else
		reg_proc_w.nm_tabela	:= 'EPISODIO_PACIENTE';
		reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnfal_w.nr_seq_carga_arq, impnfal_w.nr_linha, impnfal_w.nr_sequencia, 'N');
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'PATNR', 'CD_PESSOA_FISICA', impnfal_w.patnr, episodio_paciente_w.cd_pessoa_fisica) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.cd_pessoa_fisica := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'FALNR', 'NR_EPISODIO', lpad(impnfal_w.falnr,10,'0'), episodio_paciente_w.nr_episodio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.nr_episodio  := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'FALAR', 'NR_SEQ_TIPO_EPISODIO', impnfal_w.falar, episodio_paciente_w.nr_seq_tipo_episodio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.nr_seq_tipo_episodio  := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'FATYP', 'NR_SEQ_SUBTIPO_EPISODIO', impnfal_w.FATYP, episodio_paciente_w.nr_seq_subtipo_episodio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.nr_seq_subtipo_episodio  := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'STATU', 'IE_STATUS', impnfal_w.statu, episodio_paciente_w.ie_status) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.ie_status  := _ora2pg_r.ds_valor_retorno_p;
		--ger_carga_pck.proc_val(reg_proc_w, 'CD_MEDICO_REFERIDO', c01_w.refphys, 'ISHMED', episodio_paciente_w.cd_medico_referido ); nao encontrado campo relacionado.
		begin
		episodio_paciente_w.dt_episodio	:=	to_date(impnfal_w.begdt,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
		exception
		when others then
			episodio_paciente_w.dt_episodio	:=	clock_timestamp();
		end;

		begin
		episodio_paciente_w.dt_fim_episodio	:=	to_date(impnfal_w.enddt,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
		exception
		when others then
			episodio_paciente_w.dt_fim_episodio	:=	null;
		end;

		begin
		episodio_paciente_w.dt_cancelamento	:=	to_date(impnfal_w.stdat,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
		exception
		when others then
			episodio_paciente_w.dt_cancelamento	:=	null;
		end;

		if (episodio_paciente_w.dt_cancelamento IS NOT NULL AND episodio_paciente_w.dt_cancelamento::text <> '') then --Somente preencher o usuario, se vir a data de cancelamento.
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'STUSR', 'NM_USUARIO_CANCELAMENTO', impnfal_w.stusr, episodio_paciente_w.nm_usuario_cancelamento) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; episodio_paciente_w.nm_usuario_cancelamento := _ora2pg_r.ds_valor_retorno_p;
		end if;

		episodio_paciente_w.nm_usuario		:= nm_usuario_w;
		episodio_paciente_w.dt_atualizacao	:= dt_atualizacao_w;

		if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then

			if (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') then

				update	episodio_paciente
				set	row = episodio_paciente_w
				where	nr_sequencia 	= episodio_paciente_w.nr_sequencia
				and	current_setting('ger_carga_pck.ie_atualizar_w')::varchar(1)	= 'S';
				PERFORM set_config('ger_carga_pck.ie_update_w', 'S;', false);
			else
				begin

				select	nextval('episodio_paciente_seq')
				into STRICT	episodio_paciente_w.nr_sequencia
				;

				episodio_paciente_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
				episodio_paciente_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;

				insert into episodio_paciente values (episodio_paciente_w.*);
				end;
			end if;
		end if;

		if (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') then

			if C02 %isopen then
				close C02;
			end if;

			ie_criou_admissao_w	:= 'N';

			open C02;
			loop
			fetch C02 into
				impnbew_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				atendimento_paciente_w		:= null;
				atend_paciente_unidade_w	:= null;

				reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnbew_w.nr_seq_carga_arq, impnbew_w.nr_linha, impnbew_w.nr_sequencia, 'N');
				reg_proc_w.nm_tabela		:= 'ATENDIMENTO_PACIENTE';

				nr_seq_tipo_admissao_fat_w	:=	null;
				if (impnbew_w.bewty in ('1', '4')) then
					begin
					--nr_seq_tipo_admissao_fat_w	:= bkf_obter_conv_interna(null, 'ATENDIMENTO_PACIENTE', 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(impnfal_w.falar || ds_separador_w || impnbew_w.bewty || ds_separador_w || impnbew_w.bwart,1,40), null, reg_proc_w.nr_seq_regra_conv);
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(impnfal_w.falar || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || impnbew_w.bewty || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || impnbew_w.bwart,1,40), nr_seq_tipo_admissao_fat_w, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; nr_seq_tipo_admissao_fat_w := _ora2pg_r.ds_valor_retorno_p;

					ie_tipo_atendimento_w	:= obter_tipo_atend_admissao(nr_seq_tipo_admissao_fat_w);
					end;
				end if;

				select	coalesce(max(ie_gerar_novo_atendimento),'N'),
					coalesce(max(ie_gerar_passagem_setor),'N')
				into STRICT	ie_gerar_novo_atendimento_w,
					ie_gerar_passagem_setor_w
				from	tipo_admissao_fat
				where	nr_sequencia = nr_seq_tipo_admissao_fat_w;

				nr_seq_interno_w	:=	somente_numero(intpd_conv('ATEND_PACIENTE_UNIDADE', 'NR_SEQ_INTERNO',
												substr(lpad(impnbew_w.falnr,10,'0') || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || lpad(impnbew_w.lfdnr,5,'0') ,1,40),
												reg_proc_w.nr_seq_regra_conv, 'I', 'I'));

				if (impnbew_w.bewty in ('1', '3', '4')) then
					begin
					select	nr_atendimento
					into STRICT	current_setting('ger_carga_pck.nr_atendimento_w')::atendimento_paciente.nr_atendimento%TYPE
					from	atend_paciente_unidade
					where	nr_seq_interno = nr_seq_interno_w;

					select	*
					into STRICT	atendimento_paciente_w
					from	atendimento_paciente a
					where	nr_atendimento = current_setting('ger_carga_pck.nr_atendimento_w')::atendimento_paciente.nr_atendimento%TYPE;
					exception
					when others then
						atendimento_paciente_w	:= null;
					end;
				end if;

				if	((impnbew_w.bewty not in ('1', '4')) and (coalesce(nr_seq_interno_w,0) = 0)) or
					((impnbew_w.bewty = '4') and (ie_gerar_novo_atendimento_w = 'N') and (ie_gerar_passagem_setor_w = 'S') and (coalesce(atendimento_paciente_w.nr_atendimento::text, '') = '')) then
					--Se for 4, estiver definido para gerar nao gerar novo atendimento, mas uma nova passagem e nao encontrou atendimento antes, entao busca do ultimo.
					begin
					select	*
					into STRICT	atendimento_paciente_w
					from	atendimento_paciente	a
					where	a.nr_seq_episodio 	= episodio_paciente_w.nr_sequencia
					and	coalesce(a.dt_alta::text, '') = ''
					and	a.nr_atendimento	=
							(SELECT	max(x.nr_atendimento)
							from	atendimento_paciente x
							where	x.nr_seq_episodio = episodio_paciente_w.nr_sequencia);
					exception
					when others then
						atendimento_paciente_w	:= null;
					end;
				end if;

				--Tratamento para criar novo atendimento quando a movimentacao ocorre antes do registro da admissao.
				--Segundo Daniel, todo movimento que ocorre cronologivamente fora do periodo antes da admissao (bewty = 1) e ddepois da alta (bewty = 2),
				-- deve criar um novo atendimento
				if (impnbew_w.bewty = '1') then
					ie_criou_admissao_w := 'S';
				elsif (impnbew_w.bewty = '2') then
					ie_criou_admissao_w := 'N';
				end if;

				/*
				in NBEW check the column BEWTY
				1	Admission
				2	Discharge
				3	Transfer
				4	Outpatient Visit
				6	Absence From
				7	Absence To
				*/
				if (nr_seq_tipo_admissao_fat_w IS NOT NULL AND nr_seq_tipo_admissao_fat_w::text <> '') and
					((ie_gerar_novo_atendimento_w = 'S') or (coalesce(atendimento_paciente_w.nr_atendimento::text, '') = '') or (ie_criou_admissao_w = 'N')) then

					reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnfal_w.nr_seq_carga_arq, impnfal_w.nr_linha, impnfal_w.nr_sequencia, 'N');

					reg_proc_w.nm_tabela	:= 'ATENDIMENTO_PACIENTE';
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EINRI', 'CD_ESTABELECIMENTO', lpad(impnfal_w.EINRI,4,'0'), atendimento_paciente_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'BEKAT', 'NR_SEQ_CLASSIF_ESP', impnfal_w.BEKAT, atendimento_paciente_w.nr_seq_classif_esp) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.nr_seq_classif_esp := _ora2pg_r.ds_valor_retorno_p;
					--ger_carga_pck.proc_val(reg_proc_w, null, 'CD_MEDICO_REFERIDO', null,  /*impnfal_w.refphys,*/  atendimento_paciente_w.cd_medico_referido);
					--ger_carga_pck.proc_val(reg_proc_w, null, 'CD_MEDICO_RESP', null, /*impnfal_w.refphys,*/  atendimento_paciente_w.cd_medico_resp);
					atendimento_paciente_w.nr_seq_tipo_admissao_fat := nr_seq_tipo_admissao_fat_w;
					begin
					atendimento_paciente_w.dt_ultima_menstruacao	:= to_date(impnfal_w.lmper,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
					exception
					when others then
						atendimento_paciente_w.dt_ultima_menstruacao	:= null;
					end;

					reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnbew_w.nr_seq_carga_arq, impnbew_w.nr_linha, impnbew_w.nr_sequencia, 'N');
					if (impnbew_w.EXTKH IS NOT NULL AND impnbew_w.EXTKH::text <> '') then
						begin
						select	cd_cgc
						into STRICT	atendimento_paciente_w.cd_cgc_indicacao
						from	pessoa_juridica
						where	cd_cgc		= impnbew_w.EXTKH  LIMIT 1;
						exception
						when others then
							begin
							select	cd_cgc
							into STRICT	atendimento_paciente_w.cd_cgc_indicacao
							from	pessoa_juridica
							where	ltrim(cd_cgc,'0')	= impnbew_w.EXTKH  LIMIT 1;
							exception
							when others then
								SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTKH', 'CD_CGC_INDICACAO', impnbew_w.EXTKH, atendimento_paciente_w.cd_cgc_indicacao) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.cd_cgc_indicacao := _ora2pg_r.ds_valor_retorno_p;
							end;

						end;
					end if;
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'UNFKZ', 'NR_SEQ_TIPO_ACIDENTE', impnbew_w.UNFKZ, atendimento_paciente_w.nr_seq_tipo_acidente) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.nr_seq_tipo_acidente := _ora2pg_r.ds_valor_retorno_p;

					begin
					atendimento_paciente_w.dt_ocorrencia	:= to_date(impnbew_w.UNFDT || impnbew_w.UNFZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
					exception
					when others then
						begin
						atendimento_paciente_w.dt_ocorrencia	:= to_date(impnbew_w.UNFDT,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type);
						exception
						when others then
							atendimento_paciente_w.dt_ocorrencia	:= null;
						end;
					end;

					--ger_carga_pck.proc_val(reg_proc_w, 'UNFOR', 'CD_MUNICIPIO_OCORRENCIA', impnbew_w.UNFOR, atendimento_paciente_w.cd_municipio_ocorrencia);
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'UNFAV', 'NR_SEQ_FORMA_CHEGADA', impnbew_w.UNFAV, atendimento_paciente_w.nr_seq_forma_chegada) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.nr_seq_forma_chegada := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'BWGR1', 'NR_SEQ_CLASSIFICACAO', impnbew_w.BWGR1, atendimento_paciente_w.nr_seq_classificacao) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.nr_seq_classificacao := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'BWGR2', 'NR_SEQ_QUEIXA', impnbew_w.BWGR2, atendimento_paciente_w.nr_seq_queixa) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.nr_seq_queixa := _ora2pg_r.ds_valor_retorno_p;

					reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnfal_w.nr_seq_carga_arq, impnfal_w.nr_linha, impnfal_w.nr_sequencia, 'N');

					atendimento_paciente_w.nm_usuario	:=	nm_usuario_w;
					atendimento_paciente_w.dt_atualizacao	:=	dt_atualizacao_w;

					if (length(atendimento_paciente_w.cd_cgc_indicacao) > 0) then
						SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_PROCEDENCIA', 'REFHOSPITAL', atendimento_paciente_w.cd_procedencia, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.cd_procedencia := _ora2pg_r.ds_valor_retorno_p;
					elsif (length(atendimento_paciente_w.cd_medico_referido) > 0) then
						SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_PROCEDENCIA', 'REFPHYS', atendimento_paciente_w.cd_procedencia, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.cd_procedencia := _ora2pg_r.ds_valor_retorno_p;
					elsif (impnfal_w.notan = 'X') then
						SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_PROCEDENCIA', 'EMERGADM', atendimento_paciente_w.cd_procedencia, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_w.cd_procedencia := _ora2pg_r.ds_valor_retorno_p;
					else
						--ger_carga_pck.proc_val(reg_proc_w, null, 'CD_PROCEDENCIA', 'DEFAULT', atendimento_paciente_w.cd_procedencia, 'S');
						atendimento_paciente_w.cd_procedencia	:= 3; --Notfall
					end if;

					if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then

						atendimento_paciente_w.ie_tipo_atendimento	:= ie_tipo_atendimento_w;

						if (coalesce(atendimento_paciente_w.ie_tipo_atendimento::text, '') = '') then
							reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '11', 'ATENDIMENTO_PACIENTE.ie_tipo_atendimento'||
												' falar: ' || impnfal_w.falnr ||
												' lfdnr: ' || impnbew_w.lfdnr ||
												' bewty: ' || impnbew_w.bewty ||
												' bwart: ' || impnbew_w.bwart ||
												' Tasy type of visit/admission: '||atendimento_paciente_w.nr_seq_tipo_admissao_fat);
						end if;

						if (coalesce(atendimento_paciente_w.nr_atendimento::text, '') = '') then

							select	nextval('atendimento_paciente_seq')
							into STRICT	atendimento_paciente_w.nr_atendimento
							;

							atendimento_paciente_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
							atendimento_paciente_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
							atendimento_paciente_w.nr_seq_episodio		:=	episodio_paciente_w.nr_sequencia;
							atendimento_paciente_w.cd_pessoa_fisica		:=	episodio_paciente_w.cd_pessoa_fisica;
							atendimento_paciente_w.ie_permite_visita	:=	'S';
							atendimento_paciente_w.nm_usuario		:=	reg_proc_w.usernametasy;

							begin
							atendimento_paciente_w.dt_entrada			:=	to_date( impnbew_w.BWIDT ||' '|| impnbew_w.BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||' hh24:mi:ss');
							exception
							when others then
								atendimento_paciente_w.dt_entrada		:=	null;
							end;

							insert into atendimento_paciente values (atendimento_paciente_w.*);
						end if;

						CALL ish_rzv_insurance_pck.replicar_convenios_atend(episodio_paciente_w.nr_sequencia, null, null);

						/*update	episodio_paciente
						set	dt_episodio	= atendimento_paciente_w.dt_entrada
						where	nr_sequencia	= episodio_paciente_w.nr_sequencia
						and	dt_episodio	> atendimento_paciente_w.dt_entrada;*/
						select	coalesce(max(ie_tipo_kv),'N')
						into STRICT	ie_tipo_kv_w
						from	tipo_admissao_fat
						where	nr_sequencia	= nr_seq_tipo_admissao_fat_w;

						if (ie_tipo_kv_w = 'S') then

							begin
							select	*
							into STRICT	atendimento_paciente_inf_w
							from	atendimento_paciente_inf
							where	nr_atendimento	= atendimento_paciente_w.nr_atendimento  LIMIT 1;
							exception
							when others then
								atendimento_paciente_inf_w.nr_sequencia := null;
							end;

							reg_proc_w.nm_tabela	:= 'ATENDIMENTO_PACIENTE_INF';
							SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'UNFNR', 'NR_ACIDENTE', substr(impnbew_w.UNFNR,1,12), atendimento_paciente_inf_w.nr_acidente) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_inf_w.nr_acidente := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'UNFTX', 'DS_ACIDENTE', substr(impnbew_w.UNFTX,1,255), atendimento_paciente_inf_w.ds_acidente) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atendimento_paciente_inf_w.ds_acidente := _ora2pg_r.ds_valor_retorno_p;

							if ((trim(both impnbew_w.UNFOR) IS NOT NULL AND (trim(both impnbew_w.UNFOR))::text <> '')) then
								atendimento_paciente_inf_w.ds_acidente := substr(atendimento_paciente_inf_w.ds_acidente||' - '||impnbew_w.UNFOR,1,255);
							end if;

							atendimento_paciente_inf_w.cd_municipio_ocorrencia	:= atendimento_paciente_w.cd_municipio_ocorrencia;
							atendimento_paciente_inf_w.nr_seq_forma_chegada		:= atendimento_paciente_w.nr_seq_forma_chegada;
							atendimento_paciente_inf_w.nr_seq_tipo_acidente		:= atendimento_paciente_w.nr_seq_tipo_acidente;
							atendimento_paciente_inf_w.dt_ocorrencia		:= atendimento_paciente_w.dt_ocorrencia;
							atendimento_paciente_inf_w.dt_referencia		:= episodio_paciente_w.dt_episodio;
							atendimento_paciente_inf_w.dt_validade			:=
										Obter_validade_case(atendimento_paciente_inf_w.dt_referencia, atendimento_paciente_w.nr_atendimento);

							if (coalesce(atendimento_paciente_inf_w.nr_sequencia::text, '') = '') then

								select	nextval('atendimento_paciente_inf_seq')
								into STRICT	atendimento_paciente_inf_w.nr_sequencia
								;

								atendimento_paciente_inf_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
								atendimento_paciente_inf_w.dt_atualizacao_nrec		:=	dt_atualizacao_nrec_w;
								atendimento_paciente_inf_w.nm_usuario			:=	nm_usuario_w;
								atendimento_paciente_inf_w.dt_atualizacao		:=	dt_atualizacao_w;
								atendimento_paciente_inf_w.nr_atendimento		:= 	atendimento_paciente_w.nr_atendimento;

								insert	into atendimento_paciente_inf values (atendimento_paciente_inf_w.*);
							end if;
						end if;
					end if;
				end if;

				reg_proc_w.nm_tabela	:=	'ATEND_PACIENTE_UNIDADE';
				reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnbew_w.nr_seq_carga_arq, impnbew_w.nr_linha, impnbew_w.nr_sequencia, 'N');
				atend_paciente_unidade_w.nr_seq_interno	:=	null;

				begin
				select	*
				into STRICT	atend_paciente_unidade_w
				from	atend_paciente_unidade
				where	nr_seq_interno = nr_seq_interno_w;
				exception
				when others then
					atend_paciente_unidade_w	:= null;
				end;

				if (atendimento_paciente_w.nr_atendimento IS NOT NULL AND atendimento_paciente_w.nr_atendimento::text <> '') and (impnbew_w.bewty in ('6', '7')) then --6 Absence From / 7 Absence To
					if (impnbew_w.bewty = '6') then
						begin
						atend_paciente_unidade_w.dt_saida_temporaria	:=	to_date( impnbew_w.BWIDT || impnbew_w.BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
						exception
						when others then
							atend_paciente_unidade_w.dt_saida_temporaria	:= null;
						end;

						select	max(a.nr_seq_interno)
						into STRICT	nr_seq_interno_w
						from	atend_paciente_unidade a
						where	a.nr_atendimento	= atendimento_paciente_w.nr_atendimento
						and	a.dt_entrada_unidade	< atend_paciente_unidade_w.dt_saida_temporaria;

						if (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then

							update	atend_paciente_unidade
							set	dt_saida_temporaria 	= atend_paciente_unidade_w.dt_saida_temporaria
							where	nr_seq_interno		= nr_seq_interno_w
							and	nr_atendimento		= atendimento_paciente_w.nr_atendimento;
						end if;

					else
						begin
						atend_paciente_unidade_w.dt_retorno_saida_temporaria	:=	to_date( impnbew_w.BWIDT || impnbew_w.BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
						exception
						when others then
							atend_paciente_unidade_w.dt_retorno_saida_temporaria	:= null;
						end;

						select	max(a.nr_seq_interno)
						into STRICT	nr_seq_interno_w
						from	atend_paciente_unidade a
						where	a.nr_atendimento	= atendimento_paciente_w.nr_atendimento
						and	a.dt_entrada_unidade	< atend_paciente_unidade_w.dt_retorno_saida_temporaria
						and	(a.dt_saida_temporaria IS NOT NULL AND a.dt_saida_temporaria::text <> '');

						if (nr_seq_interno_w IS NOT NULL AND nr_seq_interno_w::text <> '') then

							update	atend_paciente_unidade
							set	dt_retorno_saida_temporaria 	= atend_paciente_unidade_w.dt_retorno_saida_temporaria
							where	nr_seq_interno			= nr_seq_interno_w
							and	nr_atendimento			= atendimento_paciente_w.nr_atendimento;
						end if;

					end if;

				elsif (coalesce(atend_paciente_unidade_w.nr_seq_interno::text, '') = '') then

					begin
					atend_paciente_unidade_w.dt_saida_unidade	:=	to_date( impnbew_w.bwedt || impnbew_w.bwezt ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
					exception
					when others then
						atend_paciente_unidade_w.dt_saida_unidade	:= null;
					end;

					atend_paciente_unidade_w.cd_setor_atendimento	:=	null;
					atend_paciente_unidade_w.cd_unidade_basica	:=	null;
					atend_paciente_unidade_w.cd_unidade_compl	:=	null;

					begin
					select	cd_setor_atendimento
					into STRICT	atend_paciente_unidade_w.cd_setor_atendimento
					from	setor_atendimento
					where	trim(both cd_setor_externo) = impnbew_w.orgpf  LIMIT 1;
					exception
					when others then
						SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'ORGPF', 'CD_SETOR_ATENDIMENTO', impnbew_w.ORGPF, atend_paciente_unidade_w.cd_setor_atendimento) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atend_paciente_unidade_w.cd_setor_atendimento := _ora2pg_r.ds_valor_retorno_p;
					end;

					begin
					select	cd_unidade_basica,
						cd_unidade_compl
					into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
						atend_paciente_unidade_w.cd_unidade_compl
					from	unidade_atendimento
					where	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
					and	nm_leito_integracao = impnbew_w.ZIMMR || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || impnbew_w.BETT;
					exception
					when others then
						begin
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento
						where	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
						and	cd_unidade_basica = impnbew_w.ZIMMR;
						exception
						when others then
							if (coalesce(impnbew_w.BETT,'X') <> 'X') then
								begin
								SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'ZIMMR', 'CD_UNIDADE_BASICA', impnbew_w.ZIMMR, atend_paciente_unidade_w.cd_unidade_basica) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atend_paciente_unidade_w.cd_unidade_basica := _ora2pg_r.ds_valor_retorno_p;
								SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'BETT', 'CD_UNIDADE_COMPL', impnbew_w.BETT, atend_paciente_unidade_w.cd_unidade_compl) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atend_paciente_unidade_w.cd_unidade_compl := _ora2pg_r.ds_valor_retorno_p;
								end;
							end if;
						end;
					end;

					if (coalesce(impnbew_w.ORGFA,'XPTO') <> 'XPTO') then
						reg_proc_w.nm_tabela 	:= 'DEPARTAMENTO_MEDICO';
						SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'ORGFA', 'CD_DEPARTAMENTO', impnbew_w.ORGFA, atend_paciente_unidade_w.cd_departamento) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atend_paciente_unidade_w.cd_departamento := _ora2pg_r.ds_valor_retorno_p;
						reg_proc_w.nm_tabela	:= 'ATEND_PACIENTE_UNIDADE';
					end if;

					if (coalesce(atend_paciente_unidade_w.cd_unidade_basica::text, '') = '') then
						begin
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento a,
							tipo_acomodacao b
						where	a.cd_tipo_acomodacao  = b.cd_tipo_acomodacao
						and	b.ie_sem_acomodacao = 'S'
						and	a.cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento  LIMIT 1;
						exception
						when others then
							null;
						end;
					end if;

					if (impnbew_w.bewty <> '2') and --se nao for de alta
						(coalesce(atend_paciente_unidade_w.cd_setor_atendimento::text, '') = '') or (coalesce(atend_paciente_unidade_w.cd_unidade_basica::text, '') = '') or (coalesce(atend_paciente_unidade_w.cd_unidade_compl::text, '') = '') then
						--Setor de atendimento nao encontrado
						reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '11', obter_desc_expressao(619365)||
												' falar:'	|| impnbew_w.falnr 	||
												' lfdnr:'	|| impnbew_w.lfdnr 	||
												' orgpf:'	|| impnbew_w.orgpf	||
												' bett:'	|| impnbew_w.bett	||
												' zimmr:'	|| impnbew_w.zimmr	);
					end if;

					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'KZTXT', 'DS_OBSERVACAO', impnbew_w.KZTXT, atend_paciente_unidade_w.DS_OBSERVACAO) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; atend_paciente_unidade_w.DS_OBSERVACAO := _ora2pg_r.ds_valor_retorno_p;

					atend_paciente_unidade_w.nm_usuario	:= nm_usuario_w;
					atend_paciente_unidade_w.dt_atualizacao	:= dt_atualizacao_w;

					if (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then

						if (impnbew_w.bewty = '2') then --Alta
							begin
							dt_alta_w := to_date( impnbew_w.BWIDT || impnbew_w.BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
							exception
							when others then
								dt_alta_w := null;
							end;
							reg_proc_w.nm_tabela	:= 'ATEND_ALTA_HIST';
							SELECT * FROM ger_carga_pck.proc_val( reg_proc_w, 'BWGR1', 'CD_MOTIVO_ALTA', impnbew_w.BWGR1, cd_motivo_alta_w) INTO STRICT _ora2pg_r;
  reg_proc_w := _ora2pg_r.reg_proc_p; cd_motivo_alta_w := _ora2pg_r.ds_valor_retorno_p;

							if (impnbew_w.EXTKH IS NOT NULL AND impnbew_w.EXTKH::text <> '') then
								begin
								select	cd_cgc
								into STRICT	cd_cgc_w
								from	pessoa_juridica
								where	cd_cgc		= impnbew_w.EXTKH  LIMIT 1;
								exception
								when others then
									begin
									select	cd_cgc
									into STRICT	cd_cgc_w
									from	pessoa_juridica
									where	ltrim(cd_cgc,'0')	= impnbew_w.EXTKH  LIMIT 1;
									exception
									when others then
										reg_proc_w.nm_tabela	:= 'ATENDIMENTO_TRANSF';
										SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'EXTKH', 'CD_CGC', impnbew_w.EXTKH, cd_cgc_w) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; cd_cgc_w := _ora2pg_r.ds_valor_retorno_p;
									end;
								end;
							end if;

							reg_proc_w.nm_tabela	:= 'ATEND_PACIENTE_UNIDADE';

							if (cd_motivo_alta_w IS NOT NULL AND cd_motivo_alta_w::text <> '') then	/*Gerar a alta*/
								begin
								gerar_estornar_alta(	atendimento_paciente_w.nr_atendimento,
											'A',
											null, --cd_processo_alta_p
											cd_motivo_alta_w,
											dt_alta_w,
											nm_usuario_nrec_w,
											ds_erro_w,
											null,--nr_seq_motivo_p,
											cd_cgc_w,
											null,--ds_observacao_p
											null,--cd_cgc_transporte_p
											null); --nr_seq_motivo_est_alta_p
								if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
									reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', 'Discharge - falar:'|| lpad(impnbew_w.falnr,10,'0') ||' lfdnr:'||lpad(impnbew_w.lfdnr,5,'0') ||' Internal ID: '||impnbew_w.nr_sequencia||' Error: '|| ds_erro_w);
								else
									select	max(nr_seq_interno)
									into STRICT	nr_seq_interno_w
									from	alta_hospitalar_v
									where	nr_atendimento = atendimento_paciente_w.nr_atendimento;

									update	impnbew
									set	ds_chave_tasy	= nr_seq_interno_w,
										ie_status	= 'I'
									where	nr_sequencia	= impnbew_w.nr_sequencia;

									CALL gerar_conv_meio_externo(null,
												'ATEND_PACIENTE_UNIDADE',
												'NR_SEQ_INTERNO',
												'D=' || nr_seq_interno_w,
												substr(lpad(impnbew_w.falnr,10,'0') || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || lpad(impnbew_w.lfdnr,5,'0') ,1,40),
												null,
												reg_proc_w.nr_seq_regra_conv,
												'A',
												nm_usuario_w);

									commit;
								end if;
								exception
								when others then
									ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
									reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', 'Discharge - falar:'|| lpad(impnbew_w.falnr,10,'0') ||' lfdnr:'||lpad(impnbew_w.lfdnr,5,'0') ||' Internal ID: '||impnbew_w.nr_sequencia||' Error: '|| ds_erro_w);
								end;
							end if;
						else
							begin

							begin
							atend_paciente_unidade_w.dt_entrada_unidade	:=	to_date( impnbew_w.BWIDT || impnbew_w.BWIZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
							exception
							when others then
								atend_paciente_unidade_w.dt_entrada_unidade	:= null;
							end;

							begin
							atend_paciente_unidade_w.dt_saida_unidade	:=	to_date(impnbew_w.BWEDT || impnbew_w.BWEZT ,current_setting('ger_carga_pck.ds_mascara_date_w')::ger_carga_arq.ds_mascara_date%type||'hh24:mi:ss');
							exception
							when others then
								atend_paciente_unidade_w.dt_saida_unidade	:=	null;
							end;

							atend_paciente_unidade_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
							atend_paciente_unidade_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
							atend_paciente_unidade_w.nr_atendimento		:=	atendimento_paciente_w.nr_atendimento;

							--OS 2036451, somar 1 segundo na data inicial, caso ja exista um registro com a mesma data para o mesmo atendimento.
							--Segundo Daniel, no ISH e permitido este tipo de situacao, como pode ser visto no anexo da OS.
							if (atend_paciente_unidade_w.dt_entrada_unidade IS NOT NULL AND atend_paciente_unidade_w.dt_entrada_unidade::text <> '') then
								select	count(1)
								into STRICT	qt_reg_w
								from	atend_paciente_unidade
								where	nr_atendimento		= atendimento_paciente_w.nr_atendimento
								and	dt_entrada_unidade	= atend_paciente_unidade_w.dt_entrada_unidade;

								if (qt_reg_w > 0) then
									--Nos casos em que a data de saida e a mesma que a data de entrada, deve adicionar 1 segundo tambem na data final.
									if (atend_paciente_unidade_w.dt_saida_unidade IS NOT NULL AND atend_paciente_unidade_w.dt_saida_unidade::text <> '') and (atend_paciente_unidade_w.dt_saida_unidade = atend_paciente_unidade_w.dt_entrada_unidade) then
										atend_paciente_unidade_w.dt_saida_unidade := atend_paciente_unidade_w.dt_saida_unidade + 1/24/60/60;
									end if;

									atend_paciente_unidade_w.dt_entrada_unidade := atend_paciente_unidade_w.dt_entrada_unidade + 1/24/60/60;
								end if;
							end if;

							begin

							CALL wheb_usuario_pck.set_ie_executar_trigger('N');

							CALL Gerar_Transferencia_Paciente(
									atend_paciente_unidade_w.nr_atendimento,
									atend_paciente_unidade_w.cd_setor_atendimento,
									atend_paciente_unidade_w.cd_unidade_basica,
									atend_paciente_unidade_w.cd_unidade_compl,
									atend_paciente_unidade_w.cd_tipo_acomodacao,
									null,
									atend_paciente_unidade_w.nr_seq_motivo_transf,
									atend_paciente_unidade_w.ds_observacao,
									atend_paciente_unidade_w.nm_usuario,
									atend_paciente_unidade_w.dt_entrada_unidade);


							select	nr_seq_interno,
								nr_sequencia
							into STRICT	atend_paciente_unidade_w.nr_seq_interno,
								atend_paciente_unidade_w.nr_sequencia
							from	atend_paciente_unidade
							where	nr_atendimento = atend_paciente_unidade_w.nr_atendimento
							and	dt_entrada_unidade = atend_paciente_unidade_w.dt_entrada_unidade;

							if (ie_gerar_passagem_setor_w = 'S') then
								atend_paciente_unidade_w.ie_passagem_setor	:= 'S';
								atend_paciente_unidade_w.dt_saida_interno	:= atend_paciente_unidade_w.dt_saida_unidade;
							end if;

							if (atend_paciente_unidade_w.dt_saida_unidade IS NOT NULL AND atend_paciente_unidade_w.dt_saida_unidade::text <> '') and (trunc(atend_paciente_unidade_w.dt_saida_unidade) < to_date('31.12.9999','dd.mm.yyyy')) then
								update	atend_paciente_unidade
								set	dt_saida_unidade	= atend_paciente_unidade_w.dt_saida_unidade
								where	nr_atendimento 		= atend_paciente_unidade_w.nr_atendimento
								and	dt_entrada_unidade	= atend_paciente_unidade_w.dt_entrada_unidade
								and	coalesce(dt_saida_unidade::text, '') = '';
							end if;

							update	atend_paciente_unidade
							set	cd_departamento		= atend_paciente_unidade_w.cd_departamento
							where	nr_atendimento 		= atend_paciente_unidade_w.nr_atendimento
							and	dt_entrada_unidade	= atend_paciente_unidade_w.dt_entrada_unidade;

							update	impnbew
							set	ds_chave_tasy  	= atend_paciente_unidade_w.nr_sequencia,
								ie_status	= 'I'
							where	nr_sequencia	= impnbew_w.nr_sequencia;

							CALL gerar_conv_meio_externo(
								null,
								'ATEND_PACIENTE_UNIDADE',
								'NR_SEQ_INTERNO',
								atend_paciente_unidade_w.nr_seq_interno,
								substr(lpad(impnbew_w.falnr,10,'0') || current_setting('ger_carga_pck.ds_separador_w')::varchar(10) || lpad(impnbew_w.lfdnr,5,'0'),1,40),
								null,
								reg_proc_w.nr_seq_regra_conv,
								'A',
								atend_paciente_unidade_w.nm_usuario);

							CALL wheb_usuario_pck.set_ie_executar_trigger('S');

							exception
							when others then
								ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
								reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', 'falar:'|| lpad(impnbew_w.falnr,10,'0') ||' lfdnr:'|| lpad(impnbew_w.lfdnr,5,'0') ||' Internal ID: '||impnbew_w.nr_sequencia||' Error: '|| ds_erro_w);

								update	impnbew
								set	ie_status	= 'E'
								where	nr_sequencia	= impnbew_w.nr_sequencia;

								CALL wheb_usuario_pck.set_ie_executar_trigger('S');
							end;

							end;
						end if;
					end if;
				end if;
			end loop;
			close C02;

			if (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') and (ie_tipo_proc_p = 'IMP') and (reg_proc_w.qt_reg_log = 0) then

				update	episodio_paciente a
				set	a.dt_episodio	=
					(SELECT min(x.dt_entrada)
					from	atendimento_paciente x
					where	x.nr_seq_episodio = a.nr_sequencia)
				where	a.nr_sequencia	= episodio_paciente_w.nr_sequencia;

			end if;

		end if;
	end if;

	if (reg_proc_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		update	impnfal
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impnfal_w.nr_sequencia;
		end;
	elsif (ie_tipo_proc_p = 'IMP') then
		update	impnfal
		set	ie_status 	= 'I',
			ds_chave_tasy	= current_setting('ger_carga_pck.ie_update_w')::varchar(2)||episodio_paciente_w.nr_sequencia,
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impnfal_w.nr_sequencia;
	else
		update	impnfal
		set	ie_status 	= 'V',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impnfal_w.nr_sequencia;
	end if;
	exception
	when others then
		begin
		ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', ds_erro_w);

		update	impnfal
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impnfal_w.nr_sequencia;
		end;
	end;

	commit;

end loop;
close current_setting('ger_carga_pck.c01')::CURSOR;

CALL ger_carga_pck.atualizar_unidade_atend_pac(nr_seq_carga_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.proc_impnfal ( nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
