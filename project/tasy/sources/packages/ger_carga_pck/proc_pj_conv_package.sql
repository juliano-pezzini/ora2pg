-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ger_carga_pck.proc_pj_conv (nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
reg_proc_w			r_reg_proc;
impnktr_w			impnktr%rowtype;
impnadr_w			impnadr%rowtype;
convenio_w			convenio%rowtype;
categoria_convenio_w		categoria_convenio%rowtype;
classificacao_convenio_w	classificacao_convenio%rowtype;
convenio_classif_w		convenio_classif%rowtype;
pessoa_juridica_w		pessoa_juridica%rowtype;
convenio_estabelecimento_w	convenio_estabelecimento%rowtype;
cd_empresa_w			empresa.cd_empresa%type;
current_setting('ger_carga_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%TYPE		estabelecimento.cd_estabelecimento%type;
ds_erro_w			varchar(4000);
dt_atualizacao_w		timestamp;
nm_usuario_w			varchar(15);
dt_atualizacao_nrec_w		timestamp;
nm_usuario_nrec_w		varchar(15);
ie_update_conv_w		varchar(2);


current_setting('ger_carga_pck.c01')::CURSOR CURSOR FOR
SELECT	*
from	impngpa
where	nr_seq_carga 		= nr_seq_carga_p
and	nr_seq_tipo_carga_w 	= 18 --Convenios
and	kostr 			= 'X'
and	coalesce(spvon::text, '') = ''  --Blocking Date From (Entry Block)
--and	loekz			is null --Deletion Flag/Indicator
and	nr_sequencia 		= coalesce(nr_sequencia_p, nr_sequencia)
and	((ie_status 	= 'V' and ie_tipo_proc_p = 'IMP') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'))

union

select	*
from	impngpa
where	nr_seq_carga 		= nr_seq_carga_p
and	nr_sequencia 		= coalesce(nr_sequencia_p, nr_sequencia)
and	nr_seq_tipo_carga_w 	= 19 --PJs
and	coalesce(spvon::text, '') = ''  --Blocking Date From (Entry Block)
--and	loekz			is null --Deletion Flag/Indicator
and (arbtg = 'X' 		or krkhs = 'X')
and	((ie_status 	= 'V' and ie_tipo_proc_p = 'IMP') or (ie_status 	in ('L','E') and ie_tipo_proc_p = 'VAL'));

impngpa_w	current_setting('ger_carga_pck.c01')::CURSOR%rowtype;

c02 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	cd_empresa	= cd_empresa_w
and	ie_situacao	= 'A';


BEGIN

reg_proc_w.ie_tipo_proc	:= ie_tipo_proc_p;

open current_setting('ger_carga_pck.c01')::CURSOR;
loop
fetch current_setting('ger_carga_pck.c01')::into CURSOR
	impngpa_w;
EXIT WHEN NOT FOUND; /* apply on current_setting('ger_carga_pck.c01')::CURSOR */
	begin

	reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impngpa_w.nr_seq_carga_arq, impngpa_w.nr_linha, impngpa_w.nr_sequencia, 'S');
	CALL ger_carga_pck.atualizar_processamento('IMPNGPA',impngpa_w.nr_sequencia);

	pessoa_juridica_w		:= null;
	convenio_w			:= null;
	categoria_convenio_w		:= null;
	PERFORM set_config('ger_carga_pck.ie_update_w', null, false);
	ie_update_conv_w		:= null;
	nm_usuario_w			:= reg_proc_w.usernametasy;
	dt_atualizacao_w		:= clock_timestamp();
	nm_usuario_nrec_w		:= reg_proc_w.usernametasy;
	dt_atualizacao_nrec_w		:= clock_timestamp();

	--Pessoa juridica
	begin
	select	cd_cgc
	into STRICT	pessoa_juridica_w.cd_cgc
	from	pessoa_juridica
	where	ltrim(cd_cgc,'0')	= ltrim(impngpa_w.gpart,'0')  LIMIT 1;
	exception
	when others then
		pessoa_juridica_w.cd_cgc := null;
	end;

	pessoa_juridica_w.dt_atualizacao	:= clock_timestamp();
	pessoa_juridica_w.dt_integracao		:= clock_timestamp();
	pessoa_juridica_w.dt_integracao_externa	:= clock_timestamp();
	pessoa_juridica_w.ie_prod_fabric	:= 'N';
	pessoa_juridica_w.ie_situacao		:= 'A';
	if (impngpa_w.LOEKZ = 'X') then
		pessoa_juridica_w.ie_situacao	:= 'I';
	end if;
	pessoa_juridica_w.nm_usuario		:= nm_usuario_w;

	reg_proc_w.nm_tabela	:= 'PESSOA_JURIDICA';

	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_CNES', impngpa_w.instn, pessoa_juridica_w.cd_cnes) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_cnes := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_NOME_ABREV', impngpa_w.kname, pessoa_juridica_w.ds_nome_abrev) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_nome_abrev := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_RAZAO_SOCIAL', impngpa_w.NAME1, pessoa_juridica_w.ds_razao_social) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_razao_social := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NM_FANTASIA', impngpa_w.NAME1, pessoa_juridica_w.nm_fantasia) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nm_fantasia := _ora2pg_r.ds_valor_retorno_p;

	if (impngpa_w.kostr = 'X') then
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_TIPO_PESSOA', 'INSURPROV', pessoa_juridica_w.cd_tipo_pessoa, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_tipo_pessoa := _ora2pg_r.ds_valor_retorno_p;
	elsif (impngpa_w.krkhs = 'X') then
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_TIPO_PESSOA', 'HOSP', pessoa_juridica_w.cd_tipo_pessoa, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_tipo_pessoa := _ora2pg_r.ds_valor_retorno_p;
	elsif (impngpa_w.arbtg = 'X') then
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_TIPO_PESSOA', 'EMPLOYER', pessoa_juridica_w.cd_tipo_pessoa, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_tipo_pessoa := _ora2pg_r.ds_valor_retorno_p;
	end if;

	--Enderecos
	begin
	select	*
	into STRICT	impnadr_w
	from	impnadr
	where	nr_seq_carga		= nr_seq_carga_p
	and	ltrim(adrnr,'0')	= ltrim(impngpa_w.adrnr,'0')  LIMIT 1;
	exception
	when others then
		impnadr_w.nr_sequencia	:= null;
	end;

	if (impnadr_w.nr_sequencia IS NOT NULL AND impnadr_w.nr_sequencia::text <> '') then

		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_CEP', coalesce(impnadr_w.pstlz,'00000'), pessoa_juridica_w.cd_cep) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_cep := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_BAIRRO', impnadr_w.ort2, pessoa_juridica_w.ds_bairro) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_bairro := _ora2pg_r.ds_valor_retorno_p;
		--ger_carga_pck.proc_val(reg_proc_w, 'REGIO', 'SG_ESTADO', 	impnadr_w.einzg, 		pessoa_juridica_w.sg_estado);
		pessoa_juridica_w.sg_estado	:= 'IN';
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'LAND', 'NR_SEQ_PAIS', impnadr_w.land, pessoa_juridica_w.nr_seq_pais) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_seq_pais := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_EMAIL', impnadr_w.email, pessoa_juridica_w.ds_email) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_email := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_ENDERECO', coalesce(impnadr_w.stras,' '), pessoa_juridica_w.ds_endereco) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_endereco := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_MUNICIPIO', impnadr_w.ort, pessoa_juridica_w.ds_municipio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_municipio := _ora2pg_r.ds_valor_retorno_p;

		if (length(impnadr_w.telnr) > 15) then
			pessoa_juridica_w.ds_observacao	:=  obter_desc_expressao(612285)||' '||impnadr_w.telnr;
		else
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_TELEFONE', impnadr_w.telnr, pessoa_juridica_w.nr_telefone) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_telefone := _ora2pg_r.ds_valor_retorno_p;
		end if;

		if (length(impnadr_w.faxnr) > 15) then
			if (coalesce(pessoa_juridica_w.ds_observacao::text, '') = '') then
				pessoa_juridica_w.ds_observacao	:=  obter_desc_expressao(290029)||': '||impnadr_w.faxnr;
			else
				pessoa_juridica_w.ds_observacao	:=  pessoa_juridica_w.ds_observacao||' '||obter_desc_expressao(290029)||': '||impnadr_w.faxnr;
			end if;
		else
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_FAX', impnadr_w.faxnr, pessoa_juridica_w.nr_fax) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_fax := _ora2pg_r.ds_valor_retorno_p;
		end if;
	else
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_CEP', coalesce(impngpa_w.pstlz,'00000'), pessoa_juridica_w.cd_cep) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_cep := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_BAIRRO', impngpa_w.ort2, pessoa_juridica_w.ds_bairro) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_bairro := _ora2pg_r.ds_valor_retorno_p;
		--ger_carga_pck.proc_val(reg_proc_w, 'REGIO', 'SG_ESTADO', 	impnadr_w.einzg, 		pessoa_juridica_w.sg_estado);
		pessoa_juridica_w.sg_estado	:= 'IN';
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'LAND', 'NR_SEQ_PAIS', impngpa_w.land, pessoa_juridica_w.nr_seq_pais, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_seq_pais := _ora2pg_r.ds_valor_retorno_p;
		--ger_carga_pck.proc_val(reg_proc_w, null, 'DS_EMAIL', 		impngpa_w.email, 		pessoa_juridica_w.ds_email);
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_ENDERECO', coalesce(impngpa_w.stras,' '), pessoa_juridica_w.ds_endereco) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_endereco := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_MUNICIPIO', impngpa_w.ort, pessoa_juridica_w.ds_municipio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.ds_municipio := _ora2pg_r.ds_valor_retorno_p;

		if (length(impngpa_w.telfn) > 15) then
			pessoa_juridica_w.ds_observacao	:=  obter_desc_expressao(612285)||' '||impngpa_w.telfn;
		else
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_TELEFONE', impngpa_w.telfn, pessoa_juridica_w.nr_telefone) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_telefone := _ora2pg_r.ds_valor_retorno_p;
		end if;

		if (length(impngpa_w.telfx) > 15) then
			if (coalesce(pessoa_juridica_w.ds_observacao::text, '') = '') then
				pessoa_juridica_w.ds_observacao	:=  obter_desc_expressao(290029)||': '||impngpa_w.telfx;
			else
				pessoa_juridica_w.ds_observacao	:=  pessoa_juridica_w.ds_observacao||' '||obter_desc_expressao(290029)||': '||impngpa_w.telfx;
			end if;
		else
			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'NR_FAX', impngpa_w.telfx, pessoa_juridica_w.nr_fax) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.nr_fax := _ora2pg_r.ds_valor_retorno_p;
		end if;

	end if;

	if (reg_proc_w.qt_reg_log = 0) and (ie_tipo_proc_p = 'IMP') then

		if (coalesce(pessoa_juridica_w.cd_cgc::text, '') = '') then

			SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_CGC', lpad(impngpa_w.gpart,10,'0'), pessoa_juridica_w.cd_cgc) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; pessoa_juridica_w.cd_cgc := _ora2pg_r.ds_valor_retorno_p;

			pessoa_juridica_w.dt_atualizacao_nrec	:= clock_timestamp();
			pessoa_juridica_w.dt_criacao		:= clock_timestamp();
			pessoa_juridica_w.nm_usuario_nrec	:= nm_usuario_w;

			insert into pessoa_juridica values (pessoa_juridica_w.*);
		else

			update	pessoa_juridica
			set	row		= pessoa_juridica_w
			where	cd_cgc		= pessoa_juridica_w.cd_cgc
			and	current_setting('ger_carga_pck.ie_atualizar_w')::varchar(1)	= 'S';

			PERFORM set_config('ger_carga_pck.ie_update_w', 'S;', false);
		end if;
	end if;

	if (impngpa_w.kostr = 'X') then --e convenio
		begin
		select	*
		into STRICT	impnktr_w
		from	impnktr
		where	nr_seq_carga	= nr_seq_carga_p
		and	ltrim(kostr,'0')		= ltrim(impngpa_w.gpart,'0')  LIMIT 1;
		exception
		when others then
			impnktr_w.nr_sequencia	:= null;
		end;

		if (impnktr_w.nr_sequencia > 0) then

			begin
			select	cd_convenio
			into STRICT	convenio_w.cd_convenio
			from	convenio
			where	ltrim(cd_cgc,'0') = ltrim(impngpa_w.gpart,'0')  LIMIT 1;
			exception
			when others then
				convenio_w.cd_convenio := null;
			end;

			if (coalesce(convenio_w.cd_convenio::text, '') = '') then

				reg_proc_w.nm_tabela		:= 'CONVENIO';

				select	max(cd_convenio) + 1
				into STRICT	convenio_w.cd_convenio
				from	convenio;

				reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnktr_w.nr_seq_carga_arq, impnktr_w.nr_linha, impnktr_w.nr_sequencia, 'N');
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'KTART', 'IE_TIPO_CONVENIO', impnktr_w.ktart, convenio_w.ie_tipo_convenio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; convenio_w.ie_tipo_convenio := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_INTERNO', impnktr_w.kksva, convenio_w.cd_interno) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; convenio_w.cd_interno := _ora2pg_r.ds_valor_retorno_p;

				reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impngpa_w.nr_seq_carga_arq, impngpa_w.nr_linha, impngpa_w.nr_sequencia, 'N');
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'DS_CONVENIO', impngpa_w.name1, convenio_w.ds_convenio) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; convenio_w.ds_convenio := _ora2pg_r.ds_valor_retorno_p;
				SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'CD_CGC', pessoa_juridica_w.cd_cgc, convenio_w.cd_cgc) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; convenio_w.cd_cgc := _ora2pg_r.ds_valor_retorno_p;

				convenio_w.dt_inclusao			:= clock_timestamp();
				convenio_w.ie_situacao			:= 'A';
				if (impngpa_w.LOEKZ = 'X') then
					convenio_w.ie_situacao		:= 'I';
				end if;
				convenio_w.dt_atualizacao		:= clock_timestamp();
				convenio_w.nm_usuario  			:= nm_usuario_w;
				convenio_w.dt_atualizacao_nrec		:= clock_timestamp();
				convenio_w.nm_usuario_nrec		:= nm_usuario_w;
				convenio_w.dt_dia_vencimento		:= 30;
				convenio_w.ie_preco_medio_material 	:= 'S';
				convenio_w.qt_conta_protocolo      	:= 0;
				convenio_w.ie_titulo_receber       	:= 'P';
				convenio_w.ie_agenda_consulta      	:= 'S';
				convenio_w.ie_exige_data_ult_pagto 	:= 'N';
				convenio_w.ie_doc_convenio         	:= 'G';
				convenio_w.ie_origem_preco         	:= 'BT';
				convenio_w.ie_precedencia_preco    	:= 'D';
				convenio_w.ie_agrup_item_interf    	:= 'N';
				convenio_w.ie_conversao_mat        	:= 'R';
				convenio_w.ie_rep_cod_usuario      	:= 'S';
				convenio_w.ie_exige_orc_atend      	:= 'N';
				convenio_w.ie_calc_porte           	:= 'G';
				convenio_w.ie_exige_senha_atend    	:= 'S';
				convenio_w.nr_multiplo_envio       	:= 0;
				convenio_w.ie_exige_plano          	:= 'N';
				convenio_w.ie_exige_carteira_atend 	:= 'N';
				convenio_w.ie_exige_validade_atend 	:= 'N';
				convenio_w.ie_solic_exame_tasymed  	:= 'N';
				convenio_w.ie_consiste_autor       	:= 'N';
				convenio_w.ie_exige_tipo_guia      	:= 'N';

				if (reg_proc_w.qt_reg_log = 0) and (ie_tipo_proc_p = 'IMP') then

					insert into convenio values (convenio_w.*);

					CALL gerar_conv_meio_externo(
						null,
						'CONVENIO',
						'CD_CONVENIO',
						convenio_w.cd_convenio,
						lpad(impngpa_w.gpart,10,'0'),
						null,
						reg_proc_w.nr_seq_regra_conv,
						'A',
						convenio_w.nm_usuario);

					--Cria uma categoria padrao, para o convenio.
					--Conforme solicitacao do Daniel
					categoria_convenio_w.cd_categoria			:= '4';
					categoria_convenio_w.cd_convenio			:= convenio_w.cd_convenio;
					categoria_convenio_w.cd_tipo_acomodacao		:= 7;
					categoria_convenio_w.ds_categoria			:= 'ALL';
					categoria_convenio_w.dt_atualizacao		:= clock_timestamp();
					categoria_convenio_w.ie_empresa			:= 'S';
					categoria_convenio_w.ie_idade_dieta     		:= 0;
					categoria_convenio_w.ie_ident_atend       	:= 'S';
					categoria_convenio_w.ie_permite_gerar_pacote	:= 'S';
					categoria_convenio_w.ie_preco_custo        	:= 'N';
					categoria_convenio_w.ie_situacao           	:= 'A';
					categoria_convenio_w.nm_usuario             	:= nm_usuario_w;

					insert into categoria_convenio values (categoria_convenio_w.*);

					reg_proc_w.nm_tabela	:= 'EMPRESA';
					SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, 'MANDT', 'CD_EMPRESA', impnktr_w.MANDT, cd_empresa_w, 'S') INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; cd_empresa_w := _ora2pg_r.ds_valor_retorno_p;

					if (cd_empresa_w IS NOT NULL AND cd_empresa_w::text <> '') then
						open C02;
						loop
						fetch C02 into
							current_setting('ger_carga_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%TYPE;
						EXIT WHEN NOT FOUND; /* apply on C02 */

							select	nextval('convenio_estabelecimento_seq')
							into STRICT	convenio_estabelecimento_w.nr_sequencia
							;

							convenio_estabelecimento_w.cd_estabelecimento		:= current_setting('ger_carga_pck.cd_estabelecimento_w')::estabelecimento.cd_estabelecimento%TYPE;
							convenio_estabelecimento_w.dt_atualizacao		:= clock_timestamp();
							convenio_estabelecimento_w.nm_usuario 			:= nm_usuario_w;
							convenio_estabelecimento_w.cd_convenio			:= convenio_w.cd_convenio;

							reg_proc_w.nm_tabela	:= 'CONVENIO_ESTABELECIMENTO';
							reg_proc_w := ger_carga_pck.set_carga_arq(reg_proc_w, impnktr_w.nr_seq_carga_arq, impnktr_w.nr_linha, impnktr_w.nr_sequencia, 'N');

							SELECT * FROM ger_carga_pck.proc_val(reg_proc_w, null, 'QT_DIA_FIM_CONTA', impnktr_w.ABRTG, convenio_estabelecimento_w.qt_dia_fim_conta) INTO STRICT _ora2pg_r;
 reg_proc_w := _ora2pg_r.reg_proc_p; convenio_estabelecimento_w.qt_dia_fim_conta := _ora2pg_r.ds_valor_retorno_p;
							convenio_estabelecimento_w.ie_titulo_receber		:= 'P';
							convenio_estabelecimento_w.ie_doc_convenio           	:= 'G';
							convenio_estabelecimento_w.ie_exige_data_ult_pagto 	:= 'N';
							convenio_estabelecimento_w.ie_rep_cod_usuario           := 'S';
							convenio_estabelecimento_w.ie_exige_carteira_atend	:= 'N';
							convenio_estabelecimento_w.ie_exige_validade_atend	:= 'N';
							convenio_estabelecimento_w.ie_exige_plano 		:= 'N';
							convenio_estabelecimento_w.ie_protocolo_conta		:= 'T';
							convenio_estabelecimento_w.ie_exige_senha_atend		:= 'N';
							convenio_estabelecimento_w.ie_exige_orc_atend		:= 'N';
							convenio_estabelecimento_w.ie_preco_medio_material 	:= 'S';
							convenio_estabelecimento_w.ie_agenda_consulta		:= 'S';
							convenio_estabelecimento_w.ie_manter_zerado_edicao	:= 'N';
							convenio_estabelecimento_w.qt_conta_protocolo		:= 100;
							convenio_estabelecimento_w.ie_gerar_nf_titulo		:= 'S';
							convenio_estabelecimento_w.ie_cancelar_conta		:= 'S';
							convenio_estabelecimento_w.ie_exige_fim_vigencia     	:= 'N';
							convenio_estabelecimento_w.ie_doc_autorizacao        	:= 'N';
							convenio_estabelecimento_w.ie_fechar_atend_adiant    	:= 'N';
							convenio_estabelecimento_w.ie_partic_resp_cred       	:= 'N';
							convenio_estabelecimento_w.ie_medico_cooperado       	:= 'N';
							convenio_estabelecimento_w.ie_conta_fim_mes          	:= 'N';
							convenio_estabelecimento_w.ie_doc_conv_part_func     	:= 'N';
							convenio_estabelecimento_w.ie_consiste_guia_atend    	:= 'N';
							convenio_estabelecimento_w.ie_regra_prior_edicao	:= 'DT';
							convenio_estabelecimento_w.ie_cgc_cih	    		:= 'S';
							convenio_estabelecimento_w.ie_gerar_nf    		:= 'S';
							convenio_estabelecimento_w.ie_obter_preco_mat_autor	:= 'N';
							convenio_estabelecimento_w.ie_titulo_sem_nf            	:= 'S';
							convenio_estabelecimento_w.ie_forma_geracao_nf        	:= 'T';
							convenio_estabelecimento_w.ie_conversao_mat		:= 'R';
							convenio_estabelecimento_w.ie_exige_lib_bras         	:= 'N';

							insert into convenio_estabelecimento values (convenio_estabelecimento_w.*);

						end loop;
						close C02;
					end if;

					begin
					select	nr_sequencia
					into STRICT	classificacao_convenio_w.nr_sequencia
					from	classificacao_convenio
					where	ds_classificacao	= impnktr_w.ktart  LIMIT 1;
					exception
					when others then
						classificacao_convenio_w.nr_sequencia	:= null;
					end;

					if (coalesce(classificacao_convenio_w.nr_sequencia::text, '') = '') then
						select	nextval('classificacao_convenio_seq')
						into STRICT	classificacao_convenio_w.nr_sequencia
						;

						classificacao_convenio_w.ds_classificacao	:= impnktr_w.ktart;
						classificacao_convenio_w.dt_atualizacao		:= clock_timestamp();
						classificacao_convenio_w.nm_usuario		:= nm_usuario_w;
						classificacao_convenio_w.dt_atualizacao_nrec	:= clock_timestamp();
						classificacao_convenio_w.nm_usuario_nrec	:= nm_usuario_w;

						insert into classificacao_convenio values (classificacao_convenio_w.*);
					end if;

					begin
					select	nr_sequencia
					into STRICT	convenio_classif_w.nr_sequencia
					from	convenio_classif
					where	nr_seq_classificacao	= classificacao_convenio_w.nr_sequencia
					and	cd_convenio		= convenio_w.cd_convenio  LIMIT 1;
					exception
					when others then
						convenio_classif_w.nr_sequencia := null;
					end;

					if (coalesce(convenio_classif_w.nr_sequencia::text, '') = '') then

						select	nextval('convenio_classif_seq')
						into STRICT	convenio_classif_w.nr_sequencia
						;

						convenio_classif_w.NR_SEQ_CLASSIFICACAO		:= classificacao_convenio_w.nr_sequencia;
						convenio_classif_w.CD_CONVENIO            	:= convenio_w.cd_convenio;
						convenio_classif_w.DT_ATUALIZACAO         	:= clock_timestamp();
						convenio_classif_w.NM_USUARIO             	:= nm_usuario_w;
						convenio_classif_w.DT_ATUALIZACAO_NREC    	:= clock_timestamp();
						convenio_classif_w.NM_USUARIO_NREC        	:= nm_usuario_w;

						insert into convenio_classif values (convenio_classif_w.*);
					end if;
				end if;
			elsif (ie_tipo_proc_p = 'IMP') then
				ie_update_conv_w	:= 'S;';
			end if;
		end if;
	end if;

	if (reg_proc_w.qt_reg_log > 0) then
		begin
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		update	impngpa
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;
		end;
	elsif (ie_tipo_proc_p = 'IMP') then
		update	impngpa
		set	ie_status 	= 'I',
			ds_chave_tasy	= current_setting('ger_carga_pck.ie_update_w')::varchar(2)||pessoa_juridica_w.cd_cgc,
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;

		if (impngpa_w.kostr = 'X') then

			update	impnktr
			set	ie_status 	= 'I',
				ds_chave_tasy	= ie_update_conv_w||convenio_w.cd_convenio,
				dt_fim_proc	= clock_timestamp()
			where	nr_sequencia 	= impnktr_w.nr_sequencia;
		end if;

	else
		update	impngpa
		set	ie_status 	= 'V',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;

		if (impngpa_w.kostr = 'X') then

			update	impnktr
			set	ie_status 	= 'V',
				dt_fim_proc	= clock_timestamp()
			where	nr_sequencia 	= impnktr_w.nr_sequencia;
		end if;

	end if;

	exception
	when others then
		begin
		ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);

		rollback;

		reg_proc_w := ger_carga_pck.incluir_ger_carga_log_import(reg_proc_w, '4', ds_erro_w);

		update	impngpa
		set	ie_status 	= 'E',
			dt_fim_proc	= clock_timestamp()
		where	nr_sequencia 	= impngpa_w.nr_sequencia;

		end;
	end;

	commit;
end loop;
close current_setting('ger_carga_pck.c01')::CURSOR;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ger_carga_pck.proc_pj_conv (nr_seq_carga_p bigint, nr_sequencia_p bigint, ie_tipo_proc_p text) FROM PUBLIC;
