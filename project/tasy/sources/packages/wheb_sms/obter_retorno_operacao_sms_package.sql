-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION wheb_sms.obter_retorno_operacao_sms (nm_usuario_p text, parametros_sms_p lt_parametros_sms) RETURNS T_LIST_OF_XML AS $body$
DECLARE

		tipo_w				constant integer := dbms_crypto.encrypt_aes128 + dbms_crypto.chain_ecb + dbms_crypto.pad_pkcs5;
		chave_w				constant bytea     := '193915579efa5663c0a4da213a219b5f';
		req_w				utl_http.req;
		res_w				utl_http.resp;
		xml_string_w			varchar(2000);
		encrypted_xml_w			bytea;
		url_w				varchar(100);
		ip_w				varchar(255);
		xml_w				xml;
		linha_w				varchar(32767);
		buffer_criptografado_w		bytea;
		buffer_descriptografado_w	bytea;
		lista_w				t_list_of_xml;
	
BEGIN
		lista_w := t_list_of_xml();

		ip_w                     := coalesce(current_setting('wheb_sms.ip_whebservidorsms_w')::varchar(255), obter_valor_param_usuario(9041,5,coalesce(wheb_usuario_pck.get_cd_perfil,0),nm_usuario_p, coalesce(wheb_usuario_pck.get_cd_estabelecimento,1)));

		url_w                    := ip_w || '/WhebServidorSMS/ServerSMSServlet';
    CALL wheb_sms.logmodo_debug('WhebServidorSMS Address: ' || url_w);
		xml_w                    := xmlparse(DOCUMENT, convert_from(, 'utf-8'));
		xml_string_w             := xml_w;
		encrypted_xml_w          := dbms_crypto.encrypt(encode(xml_string_w::bytea, 'hex')::bytea, tipo_w, chave_w);

		req_w                    := utl_http.begin_request(url => url_w, method => 'POST');
		utl_http.set_header(r => req_w, name => 'Content-Type', value => 'text/plain;charset=UTF-8');
		utl_http.set_header(r => req_w, name => 'Content-Length', value => length(encrypted_xml_w));
    CALL wheb_sms.logmodo_debug('Message to send:' || xml_string_w);
		utl_http.write_text(r => req_w, data => encrypted_xml_w);

    begin
      CALL wheb_sms.logmodo_debug('Reading response...');
			res_w := utl_http.get_response(req_w);
      CALL wheb_sms.logmodo_debug('Received Response. WhebServidorSMS Communication ok');
			loop
				--Le uma linha da resposta (eh um arquivo XML por linha)

				--a resposta eh um hexadecimal em forma de texto (content-type: text/plain;charset=UTF-8)

				utl_http.read_line(res_w, linha_w);

				--retira fim de linha e espacos em branco (tem que ser um hexadecimal valido)

				linha_w := replace(replace(replace(linha_w, chr(13), ''), chr(10), ''), ' ', '');
        CALL wheb_sms.logmodo_debug('Encrypted Response:' || linha_w);
        
				buffer_criptografado_w := cast(linha_w as bytea); --ex: varchar2 'FFFF para raw 'FFFF'

				if (utl_raw.length(buffer_criptografado_w) > 0) then
					buffer_descriptografado_w := dbms_crypto.decrypt(buffer_criptografado_w, tipo_w, chave_w);
          CALL wheb_sms.logmodo_debug('Decrypted Response:' || utl_raw.cast_to_varchar2(buffer_descriptografado_w));
					--cada item eh um XML completo

					lista_w.extend;
					lista_w(lista_w.last) := utl_raw.cast_to_varchar2(buffer_descriptografado_w);
				end if;
			end loop;
			utl_http.end_response(res_w);
		exception
			when utl_http.end_of_body then
				utl_http.end_response(res_w);
			when others then
				utl_http.end_response(res_w);
         if ( current_setting('wheb_sms.exibemsg_w')::varchar(1) = 'S' ) then
		   CALL wheb_mensagem_pck.exibir_mensagem_abort(349244, 'ERROR=' || sqlerrm(SQLSTATE));
         end if;
		end;

		return lista_w;
	end;

	/*INICIO metodos integracao Comunika*/



$body$
LANGUAGE PLPGSQL
 STABLE;
-- REVOKE ALL ON FUNCTION wheb_sms.obter_retorno_operacao_sms (nm_usuario_p text, parametros_sms_p lt_parametros_sms) FROM PUBLIC;
