-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ptu_a550_imp_pck.gerencia_integracao_cmb ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


c01 CURSOR FOR
SELECT 	prp.nr_sequencia
from 	pls_recebimento_ptu prp
where 	prp.ie_status 		= 'A'
and 	prp.ie_tipo_arquivo	= 'A550'
order by prp.dt_envio, substr(prp.nm_arquivo,3,1);


c02 CURSOR(	nr_sequencia_pc bigint,
		ie_tipo_arquivo_pc text) FOR
	SELECT 	prpa.nm_arquivo,
		prpa.ds_endereco_arquivo,
		prpa.ds_arquivo,
		prpa.ie_tipo_arquivo,
		prpa.nr_sequencia
	from 	pls_recebimento_ptu_arq prpa
	where 	prpa.nr_seq_receb_ptu = nr_sequencia_pc
	and 	prpa.ie_tipo_arquivo = ie_tipo_arquivo_pc;

	
nr_seq_arq_xml_w  	ptu_aviso_arq_xml.nr_sequencia%type;
nr_seq_contestacao_w   	pls_recebimento_ptu.nr_seq_contestacao%type;
ds_erro_w		varchar(4000);
nr_seq_lote_contest_w ptu_camara_contestacao.nr_seq_lote_contest%type;
	
	
BEGIN

-- limpa os arquivos antigos

CALL ptu_a550_imp_pck.limpar_arq_a550_xml('A550',nm_usuario_p, cd_estabelecimento_p);

-- para cada arquivo aguardando importacao

for r01 in c01 loop
	
	begin

		update 	pls_recebimento_ptu prp
		set 	prp.ie_status = 'E',
			prp.dt_atualizacao = clock_timestamp(),
			prp.nm_usuario = nm_usuario_p
		where 	prp.nr_sequencia = r01.nr_sequencia;

		commit;

		-- pega o arquivo da fatura para importar

		for r02 in c02(r01.nr_sequencia,'F') loop

			insert into ptu_aviso_arq_xml(	nr_sequencia,      		dt_atualizacao,		nm_usuario,
							dt_atualizacao_nrec,		nm_usuario_nrec,	ds_arquivo,
							ie_tipo_arquivo,		nm_arquivo)		
			values (			nextval('ptu_aviso_arq_xml_seq'),	clock_timestamp(),		nm_usuario_p,
							clock_timestamp(),			nm_usuario_p,		r02.ds_arquivo,
							'A550',				r02.nm_arquivo) returning nr_sequencia into nr_seq_arq_xml_w;
			commit;
			
			nr_seq_contestacao_w := null;
			ds_erro_w := null;
	
			begin
				nr_seq_camara_p		=> nr_seq_contestacao_w := ptu_a550_imp_pck.carregar_arq_a550_xml(	nr_seq_arq_xml_p	=> nr_seq_arq_xml_w, ie_tipo_arquivo_p	=> 'A550', nm_usuario_p		=> nm_usuario_p, cd_estabelecimento_p	=> cd_estabelecimento_p, nr_seq_camara_p		=> nr_seq_contestacao_w);
			exception
				when others then
					ds_erro_w := 'Erro ao processar a sequencia '|| r01.nr_sequencia ||' em carregar_arq_a550_xml: '|| sqlerrm;
			end;

			if coalesce(ds_erro_w::text, '') = '' then
				begin
					-- atualizar valores

					CALL pls_atualiza_valores_contes(	nr_seq_contestacao_p 	=> nr_seq_contestacao_w,
									cd_estabelecimento_p  	=> cd_estabelecimento_p,
									nm_usuario_p          	=> nm_usuario_p,
									ie_commit_p           	=> 'N');
				exception
					when others then
						ds_erro_w := 'Erro ao processar a sequencia '|| r01.nr_sequencia ||' em pls_atualiza_valores_contes: '|| sqlerrm;
				end;
			end if;
	

			if coalesce(ds_erro_w::text, '') = '' then
				begin
				-- gerar lote

				CALL pls_gerar_lote_camara_contest(	nr_seq_camara_contest_p => nr_seq_contestacao_w,
								cd_estabelecimento_p 	=> cd_estabelecimento_p,
								nm_usuario_p 		=> nm_usuario_p,
								ie_commit_p 		=> 'N');

				exception
					when others then
						ds_erro_w := 'Erro ao processar a sequencia '|| r01.nr_sequencia ||' em pls_gerar_lote_camara_contest: '|| sqlerrm;
				end;
			end if;
			
			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				CALL ptu_atualizar_status_imp_a550(	nr_seq_camara_contest_p => nr_seq_contestacao_w,
								ie_status_imp_p 	=> 'IN',
								ie_commit_p 		=> 'N' );

			end if;
			
			if coalesce(ds_erro_w::text, '') = '' then
				begin

					select 	max(con.nr_seq_lote_contest)
					into STRICT 	nr_seq_lote_contest_w
					from 	ptu_camara_contestacao con
					where 	con.nr_sequencia = nr_seq_contestacao_w;

					if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
						CALL pls_valida_imp_contest(nr_seq_lote_p => nr_seq_lote_contest_w);
					end if;

				exception
					when others then
						ds_erro_w := 'Erro ao processar a sequencia '|| r01.nr_sequencia ||' em pls_valida_imp_contest: '|| sqlerrm;
				end;

			end if;

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				-- desfaz as importacoes

				rollback;
							
				update	pls_recebimento_ptu 	prp
				set 	prp.ie_status 		= 'R',
					prp.dt_atualizacao 	= clock_timestamp(),
					prp.nm_usuario 		= nm_usuario_p
				where 	prp.nr_sequencia 	= r01.nr_sequencia;
			
				update 	pls_recebimento_ptu_arq prpa
				  set 	prpa.ds_erro 		= ds_erro_w,
				  	prpa.dt_atualizacao 	= clock_timestamp(),
					prpa.nm_usuario 	= nm_usuario_p
				where 	prpa.nr_sequencia 	= r02.nr_sequencia;
				commit;
				-- salva a atualizacao do status

	
			else
				update 	pls_recebimento_ptu prp
				set 	prp.ie_status = 'I',
					prp.dt_atualizacao = clock_timestamp(),
					prp.nm_usuario = nm_usuario_p,
					prp.nr_seq_contestacao 	= nr_seq_contestacao_w
				where 	prp.nr_sequencia = r01.nr_sequencia;
			commit;
				
			end if;

			
		end loop;

	exception
		when others then
			ds_erro_w := 'Erro ao processar a sequencia '|| r01.nr_sequencia ||') . Erro: ' || sqlerrm;		

			update	pls_recebimento_ptu 	prp
			set 	prp.ie_status 		= 'R',
				prp.dt_atualizacao 	= clock_timestamp(),
				prp.nm_usuario 		= nm_usuario_p,
				prp.nr_seq_contestacao 	= nr_seq_contestacao_w
			where 	prp.nr_sequencia 	= r01.nr_sequencia;

	end;

end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a550_imp_pck.gerencia_integracao_cmb ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
