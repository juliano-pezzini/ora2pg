-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Carregar o arquivo A550 de XML

CREATE TYPE reg_cabecalho AS (		nr_vertra_ptu_cab		varchar(2),
					cd_uni_destino_cab		varchar(4),
					cd_uni_origem_cab		varchar(4),
					cd_uni_cred_cab			varchar(4),
					dt_geracao_cab			varchar(8),
					tp_cobranca_cab			varchar(10),
					tp_arquivo_cab			varchar(5),
					st_conclusao_cab		varchar(1),
					tp_arq_parcial_cab		varchar(1),
					nr_doc_1_a500_cab		varchar(30),
					vl_tot_cont_doc_1_cab		varchar(15),
					vl_tot_pago_doc_1_cab		varchar(15),
					nr_ndc_1_cab			varchar(11),
					dt_venc_ndc_1_cab		varchar(8),
					nr_doc_2_a500_cab		varchar(30),
					vl_tot_cont_doc_2_cab		varchar(15),
					vl_tot_pago_doc_2_cab		varchar(15),
					nr_ndc_2_cab			varchar(11),
					dt_venc_ndc_2_cab		varchar(8),
					hash				varchar(255),	-- HASH
					dt_postagem			varchar(255),	-- DATA POSTAGEM CARIMBO CMB
					nr_protocolo			varchar(10));
CREATE TYPE reg_questionamento AS (	cd_unimed_quest			varchar(4),
					id_benef_quest			varchar(13),
					nm_benef_quest			varchar(25),
					nr_lote_quest			varchar(8),
					nr_nota_quest			varchar(20),
					nr_lote_prest_quest		varchar(12),
					nr_guia_tiss_prest_quest	varchar(20),
					nr_guia_tiss_prestador_quest	varchar(20),
					nr_guia_tiss_operadora_quest	varchar(20),
					seq_item_txt_proc		varchar(8),
					seq_item_xml_proc		varchar(4),
					id_item_unico_proc_quest	varchar(28),
					tp_tabela_proc_quest		varchar(2),
					cd_servico_proc_quest		varchar(10),
					dt_acordo_proc_quest		varchar(8),
					tp_acordo_proc_quest		varchar(10),
					qt_reconh_proc_quest		varchar(255),
					qt_acordada_proc_quest		varchar(10),
					vl_reconh_serv_quest		varchar(15),
					vl_acordo_serv_quest		varchar(15),
					vl_reconh_co_quest		varchar(15),
					vl_acordo_co_quest		varchar(15),
					vl_reconh_filme_quest		varchar(15),
					vl_acordo_filme_quest		varchar(15),
					vl_reconh_adic_serv_quest	varchar(15),
					vl_acordo_adic_serv_quest	varchar(15),
					vl_reconh_adic_co_quest		varchar(15),
					vl_acordo_adic_co_quest		varchar(15),
					vl_reconh_adic_filme_quest	varchar(15),
					vl_acordo_adic_filme_quest	varchar(15),
					ie_aceite_quest			smallint);
CREATE TYPE reg_questionamento_cod AS (	id_quest			varchar(255),
					cd_motivo_quest			varchar(10),
					ds_motivo_quest			varchar(500),
					cd_servico_proc_quest		varchar(10),
					id_benef_quest			varchar(13));
CREATE TYPE reg_quest_nf_forn AS (	nr_nf_fornecedor		varchar(20),
                                        nr_guia_tiss_principal		varchar(20),
					cd_unimed_nf_forn		varchar(4),
                                        id_benef_nf_forn		varchar(13),
                                        nm_benef_nf_forn		varchar(25),
					seq_item_proc_nf_forn		varchar(4),
                                        id_item_unico_nf_forn		varchar(28),
                                        tp_tabela_nf_forn		varchar(2),
                                        cd_servico_nf_forn		varchar(10),
					dt_acordo_nf_forn		varchar(8),
                                        tp_acordo_nf_forn		varchar(10),
                                        qt_reconh_nf_forn		varchar(8),
                                        qt_acordada_nf_forn		varchar(10),
					vl_reconh_serv_nf_forn		varchar(15),
					vl_acordo_serv_nf_forn		varchar(15),
					vl_reconh_adic_serv_nf_forn	varchar(15),
                                        vl_acordo_adic_serv_nf_forn	varchar(15),
					ie_aceite_nf_forn		smallint);
CREATE TYPE reg_motivo_ques_nf_forn AS (	id_motivo_quest			varchar(255),
						cd_motivo_nf_forn		varchar(10),
						ds_motivo_nf_forn		varchar(500));
CREATE TYPE reg_quest_reemb AS (	seq_item				varchar(10),
					cd_unimed_quest_reemb			varchar(4),
					id_benef_quest_reemb			varchar(13),
					seq_item_quest_reemb			varchar(10),
					tp_particip_quest_reemb			varchar(1),
					tp_tabela_quest_reemb			varchar(2),
					cd_servico_quest_reemb			varchar(15),
					vl_reconh_serv_quest_reemb		varchar(15),
					vl_acordo_serv_quest_reemb		varchar(15),
					dt_acordo_quest_reemb			varchar(8),
					tp_acordo_quest_reemb			varchar(10),
					qt_reconh_quest_reemb			varchar(13),
					qt_acordada_quest_reemb			varchar(13),
					id_reembolso				varchar(20),
					id_item_unico_proc_reemb		varchar(28),
					seq_item_txt_proc_reemb			varchar(8),
					seq_item_xml_proc_reemb			varchar(4),
					ie_aceite_quest_reemb			smallint);
CREATE TYPE reg_quest_reemb_cod AS (	id_quest			varchar(255),
					cd_motivo_quest_reemb		varchar(10),
					ds_motivo_quest_reemb		varchar(500),
					cd_servico_proc_quest		varchar(10),
					id_benef_quest			varchar(13));


CREATE OR REPLACE PROCEDURE ptu_a550_imp_pck.carregar_arq_a550_xml_int ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_camara_p INOUT bigint) AS $body$
DECLARE

						
-- CABECALHO
	-- NUMERO PROTOCOLO CARIMBO CMB
					
type tab_cabecalho is table of reg_cabecalho index by integer;

-- QUESTIONAMENTO


type tab_questionamento is table of reg_questionamento index by integer;

-- QUESTIONAMENTO CODIGO


type tab_questionamento_cod is table of reg_questionamento_cod index by integer;

-- QUESTIONAMENTO NOTA FISCAL FORNECEDOR


type tab_quest_nf_forn is table of reg_quest_nf_forn index by integer;

-- MOTIVO QUESTIONAMENTO NOTA FISCAL FORNECEDOR

						
type tab_motivo_ques_nf_forn is table of reg_motivo_ques_nf_forn index by integer;

-- QUESTIONAMENTO REEMBOLSO


type tab_quest_reemb is table of reg_quest_reemb index by integer;

-- QUESTIONAMENTO	REEMBOLSO CODIGO


type tab_quest_reemb_cod is table of reg_quest_reemb_cod index by integer;


-- VARIAVEIS CABECALHO

vet_tab_cabecalho_w		tab_cabecalho;
ica				integer;

-- VARIAVEIS QUESTIONAMENTO

vet_tab_quest_w			tab_questionamento;
iq				integer;
iqp       			integer;

-- VARIAVEIS QUESTIONAMENTO CODIGO

vet_tab_quest_cod_w		tab_questionamento_cod;
imq				integer;

-- VARIAVEIS QUESTIONAMENTO NF FORNECEDOR

vet_tab_quest_nf_forn_w		tab_quest_nf_forn;
iqnf				integer;

-- MOTIVO QUESTIONAMENTO NOTA FISCAL FORNECEDOR

vet_tab_mot_ques_nf_forn_w	tab_motivo_ques_nf_forn;
imqnf				integer;

-- VARIAVEIS QUESTIONAMENTO REEMBOLSO

vet_tab_quest_reemb_w		tab_quest_reemb;
iqr				integer;
iqrp				integer;

-- VARIAVEIS QUESTIONAMENTO REEMBOLSO CODIGO

vet_tab_quest_reemb_cod_w	tab_quest_reemb_cod;
imqr				integer;

-- Variaveis

nm_id_sid_w			ptu_camara_contestacao.ds_sid_processo%type;
nm_id_serial_w			ptu_camara_contestacao.ds_serial_processo%type;
cd_unimed_operadora_w		varchar(10);
ie_operacao_w			varchar(1) := 'E';
nr_seq_contestacao_w		bigint;
nr_seq_pls_fatura_w		bigint;
cd_unimed_origem_w		smallint;
cd_unimed_credora_w		smallint;
nr_fatura_head_w		ptu_camara_contestacao.nr_fatura%type;
nr_nota_credito_debito_a500_w	ptu_camara_contestacao.nr_nota_credito_debito_a500%type;
ie_tp_arquivo_w			smallint;
nr_seq_lote_contest_w		bigint;
qt_arq_fec_compl_w		integer := 0;
qt_arquivo_w			bigint := 0;
nr_lote_w			integer;
nr_lote_prest_w			varchar(12);
cd_unimed_w			smallint;
id_benef_w			varchar(13);
nm_benef_w                      varchar(25);
ie_tipo_tabela_w		smallint;
ie_tipo_tabela_tiss_w		varchar(2);
cd_servico_w			bigint;
cd_servico_tiss_w		bigint;
vl_reconhecido_w                double precision;
vl_acordo_w                     double precision;
ie_tipo_acordo_w		varchar(10);
vl_reconh_co_w			double precision;
vl_acordo_co_w                  double precision;
vl_reconh_filme_w		double precision;
vl_acordo_filme_w               double precision;
vl_reconh_adic_serv_w           double precision;
vl_acordo_adic_serv_w           double precision;
vl_reconh_adic_co_w             double precision;
vl_acordo_adic_co_w             double precision;
vl_reconh_adic_filme_w          double precision;
vl_acordo_adic_filme_w          double precision;
nr_nota_cred_deb_number_w	numeric(30);
nr_seq_ptu_fatura_w		bigint;
qt_reconh_w			double precision;
qt_acordada_w			double precision;
dt_acordo_w			timestamp;
nr_seq_conta_proc_w   		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w    			pls_conta_mat.nr_sequencia%type;
nr_seq_nota_servico_w  		ptu_nota_servico.nr_sequencia%type;
nr_seq_conta_w                  pls_conta.nr_sequencia%type;
nr_seq_nota_cobranca_w          ptu_nota_cobranca.nr_sequencia%type;
nr_seq_camara_contest_w		bigint;
nr_seq_a500_w			bigint;
nr_seq_a500_reemb_w		bigint;
cd_unimed_quest_reem_w		ptu_questionamento_rrs.cd_unimed%type;
id_benef_quest_reem_w		ptu_questionamento_rrs.id_benef%type;
nr_seq_quest_rrs_w		ptu_questionamento_rrs.nr_sequencia%type;
tp_particip_quest_reemb_w	ptu_quest_serv_rrs.tp_particip%type;
tp_tabela_quest_reemb_w		varchar(2);
cd_servico_quest_reemb_w	ptu_quest_serv_rrs.cd_servico%type;
tp_acordo_quest_reemb_w		ptu_quest_serv_rrs.tp_acordo%type;
qt_reconh_quest_reemb_w		ptu_quest_serv_rrs.qt_reconh%type;
qt_acordada_quest_reemb_w	ptu_quest_serv_rrs.qt_acordada%type;
dt_acordo_quest_reemb_w		ptu_quest_serv_rrs.dt_acordo%type;
nr_seq_quest_serv_rrs_w		ptu_quest_serv_rrs.nr_sequencia%type;
nr_seq_questionamento_rrs_w	ptu_questionamento_rrs.nr_sequencia%type;
vl_reconh_serv_quest_reemb_w	ptu_quest_serv_rrs.vl_reconh_serv%type;
vl_acordo_serv_quest_reemb_w	ptu_quest_serv_rrs.vl_acordo_serv%type;
nr_seq_nota_serv_rrs_w		ptu_nota_servico_rrs.nr_sequencia%type;
nr_seq_nota_cobr_rrs_w		ptu_nota_cobranca_rrs.nr_sequencia%type;
nr_seq_questionamento_w		ptu_questionamento.nr_sequencia%type;
nr_seq_lote_disc_w		pls_lote_discussao.nr_sequencia%type;
id_reembolso_w			ptu_questionamento_rrs.id_reembolso%type;
nr_nota_quest_w			ptu_questionamento.nr_nota%type;
nr_seq_motivo_quest_w		ptu_motivo_questionamento.nr_sequencia%type;

nr_nf_fornecedor_w		ptu_questionamento.nr_nota_fiscal_forn%type;
nr_guia_tiss_principal_w	ptu_questionamento.nr_guia_tiss_principal%type;
cd_item_unico_w			ptu_questionamento.cd_item_unico%type;
nr_guia_tiss_prest_quest_w	ptu_questionamento.nr_guia_tiss_prestador%type;
nr_guia_tiss_operadora_quest_w	ptu_questionamento.nr_guia_tiss_operadora%type;

ie_novo_imp_a550_w		pls_visible_false.ie_novo_imp_a550%type;
nr_nota_numerico_w		ptu_questionamento.nr_nota_numerico%type;
qtd_cabecalho_w       		smallint;

vl_cobrado_w			ptu_questionamento.vl_cobrado%type;
vl_cobr_co_w			ptu_questionamento.vl_cobr_co%type;
vl_cobr_filme_w			ptu_questionamento.vl_cobr_filme%type;
vl_cobr_adic_serv_w		ptu_questionamento.vl_cobr_adic_serv%type;
vl_cobr_adic_co_w		ptu_questionamento.vl_cobr_adic_co%type;
vl_cobr_adic_filme_w		ptu_questionamento.vl_cobr_adic_filme%type;
qt_cobrada_w			ptu_questionamento.qt_cobrada%type;

vl_pago_benef_w			ptu_nota_servico_rrs.vl_pago_benef%type;
vl_dif_vl_inter_w		ptu_nota_servico_rrs.vl_dif_vl_inter%type;


dt_geracao_w			timestamp;
dt_venc_ndc_1_w			timestamp;	
dt_venc_ndc_2_w			timestamp;

ie_aceite_quest_w		ptu_questionamento.ie_aceite%type;
ie_aceite_quest_reemb_w		ptu_quest_serv_rrs.ie_aceite%type;

-- CURSORES

-- CABECALHO

C01 CURSOR( nr_seq_arq_xml_pc	ptu_aviso_arq_xml.nr_sequencia%type ) FOR
	SELECT	xml.createxml(ds_arquivo) ds_arq_xml
	from	ptu_aviso_arq_xml
	where	nr_sequencia = nr_seq_arq_xml_pc;
	
	c_cabecalho CURSOR( ds_arq_xml_pc		xml ) FOR
		SELECT	*
		from	xmltable('/ptuA550/cabecalho' passing ds_arq_xml_pc columns
			nr_vertra_ptu_cab			varchar(2)	path	'nrVerTra_PTU',
			unimed_cab				xml		path	'unimed',
			dados_cobranca_cab			xml		path	'dadosCobranca',
			documento1_cab				xml		path	'documento1',
			documento2_cab				xml		path	'documento2');
			
		c_cabecalho_unimed CURSOR( unimed_pc		xml ) FOR
			SELECT	*
			from	xmltable('/unimed' passing unimed_pc columns
				cd_uni_destino_cab			varchar(4)	path	'cd_Uni_Destino',
				cd_uni_origem_cab			varchar(4)	path	'cd_Uni_Origem',
				cd_uni_cred_cab				varchar(4)	path	'cd_uni_cred');
			
		c_cabecalho_dados_cobranca CURSOR( dados_cobranca_pc		xml ) FOR
			SELECT	*
			from	xmltable('/dadosCobranca' passing dados_cobranca_pc columns
				dt_geracao_cab				varchar(8)	path	'dt_Geracao',
				tp_cobranca_cab				varchar(10)	path	'tp_Cobranca',
				tp_arquivo_cab				varchar(5)	path	'tp_Arquivo',
				st_conclusao_cab			varchar(1)	path	'st_Conclusao',
				tp_arq_parcial_cab			varchar(1)	path	'tp_arq_parcial');
			
		c_cabecalho_documento1 CURSOR( documento1_pc		xml ) FOR
			SELECT	*
			from	xmltable('/documento1' passing documento1_pc columns			
				nr_doc_1_a500_cab			varchar(30)	path	'nr_Doc_1_A500',
				vl_tot_cont_doc_1_cab			varchar(15)	path	'vl_Tot_Cont_Doc_1',
				vl_tot_pago_doc_1_cab			varchar(15)	path	'vl_Tot_Pago_Doc_1',
				nr_ndc_1_cab				varchar(11)	path	'Nr_NDC_1',
				dt_venc_ndc_1_cab			varchar(8)	path	'dt_Venc_NDC_1');
					
		c_cabecalho_documento2 CURSOR( documento2_pc		xml ) FOR
			SELECT	*
			from	xmltable('/documento2' passing documento2_pc columns
				nr_doc_2_a500_cab			varchar(30) 	path	'nr_Doc_2_A500',
				vl_tot_cont_doc_2_cab			varchar(15)	path	'vl_Tot_Cont_Doc_2',
				vl_tot_pago_doc_2_cab			varchar(15)	path	'vl_Tot_Pago_Doc_2',
				nr_ndc_2_cab				varchar(11)	path	'Nr_NDC_2',
				dt_venc_ndc_2_cab			varchar(8)	path	'dt_Venc_NDC_2');

	-- HASH

	c_hash CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA550/hash' passing ds_arq_xml_pc columns
		hash					varchar(255)	path	'hash');
	
	-- CARIMBO CMB

	c_carimbo_cmb CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA550/carimboCMB' passing ds_arq_xml_pc columns
		dt_postagem				varchar(21)	path	'dt_postagem',
		nr_protocolo				varchar(10)	path	'nr_protocolo');

	c_tipo_quest CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA550/Tipo_Questionamento' passing ds_arq_xml_pc columns
		quest					xml		path	'Quest',
		questionamento_reemb			xml		path	'Quest_Reembolso');
		
		c_quest CURSOR( quest_pc		xml ) FOR
		SELECT	*
		from	xmltable('/Quest' passing quest_pc columns
			questionamento				xml		path	'Questionamento',
			questionamento_nf_fornecedor		xml		path	'Questionamento_NFiscalFornec');

			-- QUESTIONAMENTO

			c_questionamento CURSOR( questionamento_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Questionamento' passing questionamento_pc columns
				identificacao_benef			xml		path	'identificacaoBenef',
				dados_lote_guia_quest			xml		path	'DadosLoteGuia',
				proc_quest				xml		path	'Procedimento');
				
				-- IDENTIFICACAO BENEFICARIO

				c_quest_ident_benef CURSOR( quest_ident_benef_pc		xml ) FOR
				SELECT	*
				from	xmltable('/identificacaoBenef' passing quest_ident_benef_pc columns
					cd_unimed_quest			varchar(4)	path	'cd_Unimed',
					id_benef_quest			varchar(13)	path	'id_Benef',
					nm_benef_quest			varchar(25)	path	'nm_benef');
				
				-- DADOS LOTE GUIA

				c_dados_lote_guia_quest CURSOR( dados_guia_pc		xml ) FOR
				SELECT	*
				from	xmltable('/DadosLoteGuia' passing dados_guia_pc columns
					txt				xml		path	'TXT',
					xml				xml		path	'XML');
					
					c_txt_quest CURSOR( txt_pc		xml ) FOR
					SELECT	*
					from	xmltable('/TXT' passing txt_pc columns
						nr_lote_quest				varchar(8)	path	'nr_Lote',
						nr_nota_quest				varchar(20)	path	'nr_Nota');
						
					c_xml_quest CURSOR( xml_pc		xml ) FOR
					SELECT	*
					from	xmltable('/XML' passing xml_pc columns
						nr_lote_prest_quest			varchar(12)	path	'nr_LotePrestador',
						nr_guia_tiss_prest_quest		varchar(20)	path	'nr_GuiaTissPrestador',
						nr_guia_tiss_operadora_quest		varchar(20)	path	'nr_GuiaTissOperadora');

				-- PROCEDIMENTOS

				c_quest_procedimento CURSOR( quest_procedimento_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Procedimento' passing quest_procedimento_pc columns
					seq_item_proc_quest			xml		path	'SeqItem',
					id_item_unico_proc_quest		varchar(28)	path	'id_itemUnico',
					tp_tabela_proc_quest			varchar(2)	path	'tp_Tabela',
					cd_servico_proc_quest			varchar(10)	path	'cd_Servico',
					dt_acordo_proc_quest			varchar(8)	path	'dt_acordo',
					tp_acordo_proc_quest			varchar(10)	path	'tp_Acordo',
					qt_reconh_proc_quest			varchar(255)	path	'qt_Reconh',
					qt_acordada_proc_quest			varchar(10)	path	'qt_Acordada',
					valores_proc_quest			xml		path	'Valores',
					taxas_proc_quest			xml		path	'Taxas',
					ie_aceite_quest				smallint	path	'tp_Aceite',
					motivo_questionamento			xml		path	'Motivo_Questionamento');
					
					-- SEQUENCIA ITEM

					c_seq_item_proc CURSOR( seq_item_proc_quest_pc		xml ) FOR
					SELECT	*
					from	xmltable('/SeqItem' passing seq_item_proc_quest_pc columns
						seq_item_txt_proc			varchar(8)	path	'seq_itemTXT',
						seq_item_xml_proc			varchar(4)	path	'seq_itemXML');
						
					-- VALORES PROCEDIMENTOS

					c_valores_proc CURSOR( valores_proc_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Valores' passing valores_proc_pc columns
						vl_reconh_serv_quest		varchar(15)	path	'vl_Reconh_Serv',
						vl_acordo_serv_quest		varchar(15)	path	'vl_Acordo_Serv',
						vl_reconh_co_quest		varchar(15)	path	'vl_Reconh_CO',
						vl_acordo_co_quest		varchar(15)	path	'vl_Acordo_CO',
						vl_reconh_filme_quest		varchar(15)	path	'vl_Reconh_Filme',
						vl_acordo_filme_quest		varchar(15)	path	'vl_Acordo_Filme');
					
					-- TAXAS PROCEDIMENTOS

					c_taxas_proc CURSOR( taxas_proc_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Taxas' passing taxas_proc_pc columns
						vl_reconh_adic_serv_quest	varchar(15)	path	'vl_Reconh_Adic_Serv',
						vl_acordo_adic_serv_quest	varchar(15)	path	'vl_Acordo_Adic_Serv',
						vl_reconh_adic_co_quest		varchar(15)	path	'vl_Reconh_Adic_CO',
						vl_acordo_adic_co_quest		varchar(15)	path	'vl_Acordo_Adic_CO',
						vl_reconh_adic_filme_quest	varchar(15)	path	'vl_Reconh_Adic_Filme',
						vl_acordo_adic_filme_quest	varchar(15)	path	'vl_Acordo_Adic_Filme');
				
					-- MOTIVO QUESTIONAMENTO

					c_mot_quest CURSOR( mot_quest_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Motivo_Questionamento' passing mot_quest_pc columns
						cd_motivo_quest			varchar(10)	path	'cd_Motivo_Ques',
						ds_motivo_quest			varchar(500)	path	'ds_Motivo_Ques');
			
			-- QUESTIONAMENTO NOTA FISCAL FORNECEDOR

			c_questionamento_nf_forn CURSOR( questionamento_nf_forn_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Questionamento_NFiscalFornec' passing questionamento_nf_forn_pc columns
				identificacao_benef			xml		path	'identificacaoBenef',
				nr_nf_fornecedor			varchar(20)	path	'nr_NotaFiscalFornecedor',
				nr_guia_tiss_principal			varchar(20)	path	'nr_GuiaTissPrincipal',
				procedimentos_nf_fornec			xml		path	'Procedimento');
				
				-- IDENTIFICACAO BENEFICIARIO NOTA FISCAL FORNECEDOR

				c_ident_benef_nf_forn CURSOR( ident_benef_pc		xml ) FOR
				SELECT	*
				from	xmltable('/identificacaoBenef' passing ident_benef_pc columns
					cd_unimed_nf_forn			varchar(4)	path	'cd_Unimed',
					id_benef_nf_forn			varchar(13)	path	'id_Benef',
					nm_benef_nf_forn			varchar(25)	path	'nm_benef');
				
				-- PROCEDIMENTOS NOTA FISCAL FORNECEDOR

				c_procedimento_nf_forn CURSOR( procedimento_nf_forn_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Procedimento' passing procedimento_nf_forn_pc columns
					seq_item_proc_nf_forn		varchar(4)	path	'seq_item',
					id_item_unico_nf_forn		varchar(28)	path	'id_itemUnico',
					tp_tabela_nf_forn		varchar(2)	path	'tp_Tabela',
					cd_servico_nf_forn		varchar(10)	path	'cd_Servico',
					valores_nf_forn			xml		path	'Valores',
					taxas_nf_forn			xml		path	'Taxas',
					dt_acordo_nf_forn		varchar(8)	path	'dt_acordo',
					tp_acordo_nf_forn		varchar(10)	path	'tp_Acordo',
					qt_reconh_nf_forn		varchar(8)	path	'qt_Reconh',
					qt_acordada_nf_forn		varchar(10)	path	'qt_Acordada',
					ie_aceite_nf_forn		smallint	path	'tp_Aceite',
					motivo_quest_nf_forn		xml		path	'Motivo_Questionamento');
					
					c_valores_nf_forn CURSOR( valores_nf_forn_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Valores' passing valores_nf_forn_pc columns
						vl_reconh_serv_nf_forn		varchar(15)	path	'vl_Reconh_Serv',
						vl_acordo_serv_nf_forn		varchar(15)	path	'vl_Acordo_Serv');
						
					c_taxas_nf_forn CURSOR( taxas_nf_forn_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Taxas' passing taxas_nf_forn_pc columns
						vl_reconh_adic_serv_nf_forn	varchar(15)	path	'vl_Reconh_Adic_Serv',
						vl_acordo_adic_serv_nf_forn	varchar(15)	path	'vl_Acordo_Adic_Serv');
						
					
					c_motivo_quest_nf_forn CURSOR( motivo_quest_nf_forn_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Motivo_Questionemento' passing motivo_quest_nf_forn_pc columns
						cd_motivo_nf_forn			varchar(10)	path	'cd_Motivo_Ques',
						ds_motivo_nf_forn			varchar(500)	path	'ds_Motivo_Ques');
			
		-- REEMBOLSO		

		c_questionamento_reemb CURSOR( questionamento_reeb_pc		xml ) FOR
		SELECT	*
		from	xmltable('/Quest_Reembolso' passing questionamento_reeb_pc columns
			id_reembolso				varchar(20)	path	'idReembolso',
			identificacao_benef			xml		path	'identificacaoBenef',
			procedimento_reembolso			xml		path	'Procedimento');

			c_quest_reemb_ident_benef CURSOR( quest_reemb_ident_benef_pc		xml ) FOR
			SELECT	*
			from	xmltable('/identificacaoBenef' passing quest_reemb_ident_benef_pc columns
				cd_unimed_quest_reemb			varchar(4)	path	'cd_Unimed',
				id_benef_quest_reemb			varchar(13)	path	'id_Benef');
				
			c_procedimento_reembolso CURSOR( procedimento_reembolso_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Procedimento' passing procedimento_reembolso_pc columns
				seq_item_proc_reemb			xml		path	'SeqItem',
				id_item_unico_proc_reemb		varchar(28)	path	'id_itemUnico',
				tp_tabela_quest_reemb			varchar(2)	path 	'tp_Tabela',
				cd_servico_quest_reemb			varchar(15)	path 	'cd_Servico',
				valores					xml		path	'Valores',
				dt_acordo_quest_reemb			varchar(8)	path 	'dt_Acordo',
				tp_acordo_quest_reemb			varchar(10)	path 	'tp_Acordo',
				qt_reconh_quest_reemb			varchar(13)	path 	'qt_Reconh',
				qt_acordada_quest_reemb			varchar(13)	path 	'qt_Acordada',
				ie_aceite_quest_reemb			smallint	path	'tp_Aceite',	
				motivo_quest_quest_reemb		xml		path	'Motivo_Questionamento');
			
			c_seq_item_proc_reemb CURSOR( seq_item_proc_reemb_pc		xml ) FOR
			SELECT	*
			from	xmltable('/SeqItem' passing seq_item_proc_reemb_pc columns
				seq_item_txt_proc_reemb				varchar(8)	path	'seq_itemTXT',
				seq_item_xml_proc_reemb				varchar(4)	path	'seq_itemXML');

			c_quest_reemb_valores CURSOR( quest_reemb_valores_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Valores' passing quest_reemb_valores_pc columns
				vl_reconh_serv_quest_reemb		varchar(15)	path	'vl_Reconh_Serv',
				vl_acordo_serv_quest_reemb		varchar(15)	path	'vl_Acordo_Serv');

			c_mot_quest_reemb CURSOR( mot_quest_reemb_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Motivo_Questionamento' passing mot_quest_reemb_pc columns
				cd_motivo_quest_reemb			varchar(10)	path	'cd_Motivo_Ques',
				ds_motivo_quest_reemb			varchar(500)	path	'ds_Motivo_Ques');

BEGIN

select	coalesce(max(ie_novo_imp_a550),'N')
into STRICT	ie_novo_imp_a550_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_p;

qtd_cabecalho_w := 0;

CALL ptu_a550_imp_pck.prepara_arquivo(nr_seq_arq_xml_p);

-- ARQUIVO XML

for r_c01_w in c01( nr_seq_arq_xml_p ) loop
	-- CABECALHO


	for r_cabecalho_w in c_cabecalho( r_c01_w.ds_arq_xml ) loop
	
		ica := vet_tab_cabecalho_w.count + 1;
		qtd_cabecalho_w := 1;
			
		vet_tab_cabecalho_w[ica].nr_vertra_ptu_cab			:= r_cabecalho_w.nr_vertra_ptu_cab;
		
		for r_cabecalho_unimed_w in c_cabecalho_unimed( r_cabecalho_w.unimed_cab ) loop
			vet_tab_cabecalho_w[ica].cd_uni_destino_cab			:= r_cabecalho_unimed_w.cd_uni_destino_cab;
			vet_tab_cabecalho_w[ica].cd_uni_origem_cab			:= r_cabecalho_unimed_w.cd_uni_origem_cab;
			vet_tab_cabecalho_w[ica].cd_uni_cred_cab			:= r_cabecalho_unimed_w.cd_uni_cred_cab;
		end loop;
		
		for r_cabecalho_dados_cobranca_w in c_cabecalho_dados_cobranca( r_cabecalho_w.dados_cobranca_cab ) loop
			vet_tab_cabecalho_w[ica].dt_geracao_cab				:= r_cabecalho_dados_cobranca_w.dt_geracao_cab;
			vet_tab_cabecalho_w[ica].tp_cobranca_cab			:= r_cabecalho_dados_cobranca_w.tp_cobranca_cab;
			vet_tab_cabecalho_w[ica].tp_arquivo_cab				:= r_cabecalho_dados_cobranca_w.tp_arquivo_cab;
			vet_tab_cabecalho_w[ica].st_conclusao_cab			:= r_cabecalho_dados_cobranca_w.st_conclusao_cab;
			vet_tab_cabecalho_w[ica].tp_arq_parcial_cab			:= r_cabecalho_dados_cobranca_w.tp_arq_parcial_cab;
		end loop;
		
		for r_cabecalho_documento1_w in c_cabecalho_documento1( r_cabecalho_w.documento1_cab ) loop
			vet_tab_cabecalho_w[ica].nr_doc_1_a500_cab			:= r_cabecalho_documento1_w.nr_doc_1_a500_cab;
			vet_tab_cabecalho_w[ica].vl_tot_cont_doc_1_cab			:= r_cabecalho_documento1_w.vl_tot_cont_doc_1_cab;
			vet_tab_cabecalho_w[ica].vl_tot_pago_doc_1_cab			:= r_cabecalho_documento1_w.vl_tot_pago_doc_1_cab;
			vet_tab_cabecalho_w[ica].nr_ndc_1_cab				:= r_cabecalho_documento1_w.nr_ndc_1_cab;
			vet_tab_cabecalho_w[ica].dt_venc_ndc_1_cab			:= r_cabecalho_documento1_w.dt_venc_ndc_1_cab;	
		end loop;
		
		for r_cabecalho_documento2_w in c_cabecalho_documento2( r_cabecalho_w.documento2_cab ) loop
			vet_tab_cabecalho_w[ica].nr_doc_2_a500_cab			:= r_cabecalho_documento2_w.nr_doc_2_a500_cab;
			vet_tab_cabecalho_w[ica].vl_tot_cont_doc_2_cab			:= r_cabecalho_documento2_w.vl_tot_cont_doc_2_cab;
			vet_tab_cabecalho_w[ica].vl_tot_pago_doc_2_cab			:= r_cabecalho_documento2_w.vl_tot_pago_doc_2_cab;
			vet_tab_cabecalho_w[ica].nr_ndc_2_cab				:= r_cabecalho_documento2_w.nr_ndc_2_cab;
			vet_tab_cabecalho_w[ica].dt_venc_ndc_2_cab			:= r_cabecalho_documento2_w.dt_venc_ndc_2_cab;	
		end loop;
		
		-- HASH

		for r_hash_w in c_hash( r_c01_w.ds_arq_xml ) loop
			vet_tab_cabecalho_w[ica].hash		:= r_hash_w.hash;
		end loop;
		
		-- CARIMBO CMB

		for r_carimbo_cmb in c_carimbo_cmb( r_c01_w.ds_arq_xml ) loop
			vet_tab_cabecalho_w[ica].dt_postagem		:= r_carimbo_cmb.dt_postagem;
			vet_tab_cabecalho_w[ica].nr_protocolo		:= r_carimbo_cmb.nr_protocolo;
			vet_tab_cabecalho_w[ica].dt_postagem :=  to_char(to_date(substr(vet_tab_cabecalho_w[ica].dt_postagem,1,18), 'yyyy/mm/ddhh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
		end loop;
		
	end loop;
	
	-- TIPO QUESTIONAMENTO

	for r_tipo_quest_w in c_tipo_quest( r_c01_w.ds_arq_xml ) loop
	
		-- QUEST

		for r_quest_w in c_quest( r_tipo_quest_w.quest ) loop

			-- QUESTIONAMENTO

			for r_questionamento_w in c_questionamento( r_quest_w.questionamento ) loop
			
				iq := vet_tab_quest_w.count + 1;
				
				-- IDENTIFICAO BENEF QUESTIONAMENTO

				for r_quest_ident_benef_w in c_quest_ident_benef( r_questionamento_w.identificacao_benef ) loop
					vet_tab_quest_w[iq].cd_unimed_quest				:= r_quest_ident_benef_w.cd_unimed_quest;
					vet_tab_quest_w[iq].id_benef_quest				:= r_quest_ident_benef_w.id_benef_quest;
					vet_tab_quest_w[iq].nm_benef_quest				:= r_quest_ident_benef_w.nm_benef_quest;
				end loop;
				
				-- DADOS LOTE GUIA QUESTIONAMENTO

				for r_dados_lote_guia_quest_w in c_dados_lote_guia_quest( r_questionamento_w.dados_lote_guia_quest ) loop
				
					-- TXT

					for r_txt_quest_w in c_txt_quest( r_dados_lote_guia_quest_w.txt ) loop
						vet_tab_quest_w[iq].nr_lote_quest				:= r_txt_quest_w.nr_lote_quest;
						vet_tab_quest_w[iq].nr_nota_quest				:= r_txt_quest_w.nr_nota_quest;
					end loop;
					
					-- XML

					for r_xml_quest_w in c_xml_quest( r_dados_lote_guia_quest_w.xml ) loop
						vet_tab_quest_w[iq].nr_lote_prest_quest				:= r_xml_quest_w.nr_lote_prest_quest;
						vet_tab_quest_w[iq].nr_guia_tiss_prest_quest			:= r_xml_quest_w.nr_guia_tiss_prest_quest;
						vet_tab_quest_w[iq].nr_guia_tiss_operadora_quest		:= r_xml_quest_w.nr_guia_tiss_operadora_quest;						
					end loop;
				end loop;
				
				iqp := 0;
				
				-- PRECEDIMENTO QUESTIONAMENTO

				for r_quest_procedimento_w in c_quest_procedimento( r_questionamento_w.proc_quest ) loop
					if iqp > 0 then  					
						iq := vet_tab_quest_w.count + 1;
						vet_tab_quest_w(iq) := vet_tab_quest_w(iq-1);
					end if;

					-- SEQUENCIA ITEM TXT OU XML

					for r_seq_item_proc_w in c_seq_item_proc( r_quest_procedimento_w.seq_item_proc_quest ) loop
						vet_tab_quest_w[iq].seq_item_txt_proc			:= r_seq_item_proc_w.seq_item_txt_proc;
						vet_tab_quest_w[iq].seq_item_xml_proc			:= r_seq_item_proc_w.seq_item_xml_proc;
					end loop;
					
					vet_tab_quest_w[iq].id_item_unico_proc_quest			:= r_quest_procedimento_w.id_item_unico_proc_quest;
					vet_tab_quest_w[iq].tp_tabela_proc_quest			:= r_quest_procedimento_w.tp_tabela_proc_quest;
					vet_tab_quest_w[iq].cd_servico_proc_quest			:= r_quest_procedimento_w.cd_servico_proc_quest;
					vet_tab_quest_w[iq].dt_acordo_proc_quest			:= r_quest_procedimento_w.dt_acordo_proc_quest;
					vet_tab_quest_w[iq].tp_acordo_proc_quest			:= r_quest_procedimento_w.tp_acordo_proc_quest;
					vet_tab_quest_w[iq].qt_reconh_proc_quest			:= r_quest_procedimento_w.qt_reconh_proc_quest;
					vet_tab_quest_w[iq].qt_acordada_proc_quest			:= r_quest_procedimento_w.qt_acordada_proc_quest;
					
					-- VALORES PROCEDIMENTO QUESTIONAMENTO

					vet_tab_quest_w[iq].vl_reconh_serv_quest			:= 0;
					vet_tab_quest_w[iq].vl_acordo_serv_quest			:= 0;
					vet_tab_quest_w[iq].vl_reconh_co_quest				:= 0;
					vet_tab_quest_w[iq].vl_acordo_co_quest				:= 0;
					vet_tab_quest_w[iq].vl_reconh_filme_quest			:= 0;
					vet_tab_quest_w[iq].vl_acordo_filme_quest			:= 0;

					for r_valores_proc_w in c_valores_proc( r_quest_procedimento_w.valores_proc_quest ) loop
						vet_tab_quest_w[iq].vl_reconh_serv_quest			:= r_valores_proc_w.vl_reconh_serv_quest;
						vet_tab_quest_w[iq].vl_acordo_serv_quest			:= r_valores_proc_w.vl_acordo_serv_quest;
						vet_tab_quest_w[iq].vl_reconh_co_quest				:= r_valores_proc_w.vl_reconh_co_quest;
						vet_tab_quest_w[iq].vl_acordo_co_quest				:= r_valores_proc_w.vl_acordo_co_quest;
						vet_tab_quest_w[iq].vl_reconh_filme_quest			:= r_valores_proc_w.vl_reconh_filme_quest;
						vet_tab_quest_w[iq].vl_acordo_filme_quest			:= r_valores_proc_w.vl_acordo_filme_quest;
					end loop;
					
					-- TAXAS PROCEDIMENTO QUESTIONAMENTO

					vet_tab_quest_w[iq].vl_reconh_adic_serv_quest		:= 0;
					vet_tab_quest_w[iq].vl_acordo_adic_serv_quest		:= 0;
					vet_tab_quest_w[iq].vl_reconh_adic_co_quest		:= 0;
					vet_tab_quest_w[iq].vl_acordo_adic_co_quest		:= 0;
					vet_tab_quest_w[iq].vl_reconh_adic_filme_quest		:= 0;
					vet_tab_quest_w[iq].vl_acordo_adic_filme_quest		:= 0;
					
					for r_taxas_proc_w in c_taxas_proc( r_quest_procedimento_w.taxas_proc_quest ) loop
						vet_tab_quest_w[iq].vl_reconh_adic_serv_quest		:= r_taxas_proc_w.vl_reconh_adic_serv_quest;
						vet_tab_quest_w[iq].vl_acordo_adic_serv_quest		:= r_taxas_proc_w.vl_acordo_adic_serv_quest;
						vet_tab_quest_w[iq].vl_reconh_adic_co_quest		:= r_taxas_proc_w.vl_reconh_adic_co_quest;
						vet_tab_quest_w[iq].vl_acordo_adic_co_quest		:= r_taxas_proc_w.vl_acordo_adic_co_quest;
						vet_tab_quest_w[iq].vl_reconh_adic_filme_quest		:= r_taxas_proc_w.vl_reconh_adic_filme_quest;
						vet_tab_quest_w[iq].vl_acordo_adic_filme_quest		:= r_taxas_proc_w.vl_acordo_adic_filme_quest;
					end loop;
					
					vet_tab_quest_w[iq].ie_aceite_quest				:= r_quest_procedimento_w.ie_aceite_quest;
					
					-- MOTIVO QUESTIONAMENTO

					for r_mot_quest_w in c_mot_quest( r_quest_procedimento_w.motivo_questionamento ) loop
				
						imq := vet_tab_quest_cod_w.count + 1;
						
						vet_tab_quest_cod_w[imq].id_quest					:= iq;
						vet_tab_quest_cod_w[imq].cd_motivo_quest				:= r_mot_quest_w.cd_motivo_quest;
						vet_tab_quest_cod_w[imq].ds_motivo_quest				:= r_mot_quest_w.ds_motivo_quest;
						vet_tab_quest_cod_w[imq].cd_servico_proc_quest  			:= vet_tab_quest_w[iq].cd_servico_proc_quest;
						vet_tab_quest_cod_w[imq].id_benef_quest         			:= vet_tab_quest_w[iq].id_benef_quest;
					
					end loop;
					
					iqp := iqp + 1;

				end loop;
			end loop;
			
			-- QUESTIONAMENTO NOTA FISCAL FORNECEDOR

			for r_questionamento_nf_forn_w in c_questionamento_nf_forn( r_quest_w.questionamento_nf_fornecedor) loop
			
				iqnf := vet_tab_quest_nf_forn_w.count + 1;
				
				-- IDENTIFICACAO BENEFICIARIO NOTA FISCAL FORNECEDOR

				for r_ident_benef_nf_forn_w in c_ident_benef_nf_forn( r_questionamento_nf_forn_w.identificacao_benef ) loop
					vet_tab_quest_nf_forn_w[iqnf].cd_unimed_nf_forn				:= r_ident_benef_nf_forn_w.cd_unimed_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].id_benef_nf_forn				:= r_ident_benef_nf_forn_w.id_benef_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].nm_benef_nf_forn				:= r_ident_benef_nf_forn_w.nm_benef_nf_forn;
				end loop;
				
				vet_tab_quest_nf_forn_w[iqnf].nr_nf_fornecedor				:= r_questionamento_nf_forn_w.nr_nf_fornecedor;
				vet_tab_quest_nf_forn_w[iqnf].nr_guia_tiss_principal			:= r_questionamento_nf_forn_w.nr_guia_tiss_principal;
				
				-- PROCEDIMENTOS PROCEDIMENTOS NOTA FISCAL FORNECEDOR

				for r_procedimento_nf_forn_w in c_procedimento_nf_forn( r_questionamento_nf_forn_w.procedimentos_nf_fornec  ) loop
					vet_tab_quest_nf_forn_w[iqnf].seq_item_proc_nf_forn			:= r_procedimento_nf_forn_w.seq_item_proc_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].id_item_unico_nf_forn			:= r_procedimento_nf_forn_w.id_item_unico_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].tp_tabela_nf_forn				:= r_procedimento_nf_forn_w.tp_tabela_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].cd_servico_nf_forn			:= r_procedimento_nf_forn_w.cd_servico_nf_forn;
					
					-- VALORES PROCEDIMENTOS NOTA FISCAL FORNECEDOR

					
					vet_tab_quest_nf_forn_w[iqnf].vl_reconh_serv_nf_forn			:= 0;
					vet_tab_quest_nf_forn_w[iqnf].vl_acordo_serv_nf_forn			:= 0;
					
					for r_valores_nf_forn_w in c_valores_nf_forn( r_procedimento_nf_forn_w.valores_nf_forn) loop
						vet_tab_quest_nf_forn_w[iqnf].vl_reconh_serv_nf_forn			:= r_valores_nf_forn_w.vl_reconh_serv_nf_forn;
						vet_tab_quest_nf_forn_w[iqnf].vl_acordo_serv_nf_forn			:= r_valores_nf_forn_w.vl_acordo_serv_nf_forn;
					end loop;

					-- TAXAS PROCEDIMENTOS NOTA FISCAL FORNECEDOR

					for r_taxas_nf_forn_w in c_taxas_nf_forn( r_procedimento_nf_forn_w.taxas_nf_forn) loop
						vet_tab_quest_nf_forn_w[iqnf].vl_reconh_adic_serv_nf_forn		:= r_taxas_nf_forn_w.vl_reconh_adic_serv_nf_forn;
						vet_tab_quest_nf_forn_w[iqnf].vl_acordo_adic_serv_nf_forn		:= r_taxas_nf_forn_w.vl_acordo_adic_serv_nf_forn;
					end loop;
					
					vet_tab_quest_nf_forn_w[iqnf].dt_acordo_nf_forn				:= r_procedimento_nf_forn_w.dt_acordo_nf_forn;	
					vet_tab_quest_nf_forn_w[iqnf].tp_acordo_nf_forn				:= r_procedimento_nf_forn_w.tp_acordo_nf_forn;	
					vet_tab_quest_nf_forn_w[iqnf].qt_reconh_nf_forn				:= r_procedimento_nf_forn_w.qt_reconh_nf_forn;	
					vet_tab_quest_nf_forn_w[iqnf].qt_acordada_nf_forn			:= r_procedimento_nf_forn_w.qt_acordada_nf_forn;
					vet_tab_quest_nf_forn_w[iqnf].ie_aceite_nf_forn				:= r_procedimento_nf_forn_w.ie_aceite_nf_forn;
					
					-- MOTIVO QUESTIONAMENTO NOTA FISCAL DO FORNECEDOR

					for r_motivo_quest_nf_forn_w in c_motivo_quest_nf_forn(r_procedimento_nf_forn_w.motivo_quest_nf_forn) loop
						
						imqnf := vet_tab_mot_ques_nf_forn_w.count + 1;
						
						vet_tab_mot_ques_nf_forn_w[imqnf].cd_motivo_nf_forn			:= r_motivo_quest_nf_forn_w.cd_motivo_nf_forn;
						vet_tab_mot_ques_nf_forn_w[imqnf].ds_motivo_nf_forn			:= r_motivo_quest_nf_forn_w.ds_motivo_nf_forn;
					end loop;
				end loop;
			end loop;
		end loop;
		
		-- QUESTIONAMENTO REEMBOLSO

		for r_questionamento_reemb_w in c_questionamento_reemb( r_tipo_quest_w.questionamento_reemb ) loop
		
			iqr := vet_tab_quest_reemb_w.count + 1;
			
			vet_tab_quest_reemb_w[iqr].id_reembolso			:= r_questionamento_reemb_w.id_reembolso;
			
			-- IDENTIFICACAO BENEFICIARIO REEMBOLSO

			for r_quest_reemb_ident_benef_w in c_quest_reemb_ident_benef( r_questionamento_reemb_w.identificacao_benef ) loop
				vet_tab_quest_reemb_w[iqr].cd_unimed_quest_reemb		:= r_quest_reemb_ident_benef_w.cd_unimed_quest_reemb;
				vet_tab_quest_reemb_w[iqr].id_benef_quest_reemb			:= r_quest_reemb_ident_benef_w.id_benef_quest_reemb;
			end loop;
			
			
			for r_procedimento_reembolso_w in c_procedimento_reembolso(r_questionamento_reemb_w.procedimento_reembolso) loop
				
				if iqrp > 0 then
					iqr := vet_tab_quest_reemb_w.count + 1;
					vet_tab_quest_reemb_w(iqr) := vet_tab_quest_reemb_w(iqr-1);
				end if;
				
				-- SEQUENCIA PROCEDIMENTO TXT OU XML REEMBOLSO

				for r_seq_item_proc_reemb_w in c_seq_item_proc_reemb( r_procedimento_reembolso_w.seq_item_proc_reemb ) loop
					vet_tab_quest_reemb_w[iqr].seq_item_txt_proc_reemb		:= r_seq_item_proc_reemb_w.seq_item_txt_proc_reemb;
					vet_tab_quest_reemb_w[iqr].seq_item_xml_proc_reemb		:= r_seq_item_proc_reemb_w.seq_item_xml_proc_reemb;
				end loop;
				
				vet_tab_quest_reemb_w[iqr].id_item_unico_proc_reemb		:= r_procedimento_reembolso_w.id_item_unico_proc_reemb;
				vet_tab_quest_reemb_w[iqr].tp_tabela_quest_reemb		:= r_procedimento_reembolso_w.tp_tabela_quest_reemb;
				vet_tab_quest_reemb_w[iqr].cd_servico_quest_reemb		:= r_procedimento_reembolso_w.cd_servico_quest_reemb;
				
				-- VALORES PROCEDIMENTOS REEMBOLSO

				vet_tab_quest_reemb_w[iqr].vl_reconh_serv_quest_reemb		:= 0;
				vet_tab_quest_reemb_w[iqr].vl_acordo_serv_quest_reemb		:= 0;
				
				for r_quest_reemb_valores_w in c_quest_reemb_valores( r_procedimento_reembolso_w.valores ) loop
					vet_tab_quest_reemb_w[iqr].vl_reconh_serv_quest_reemb		:= r_quest_reemb_valores_w.vl_reconh_serv_quest_reemb;
					vet_tab_quest_reemb_w[iqr].vl_acordo_serv_quest_reemb		:= r_quest_reemb_valores_w.vl_acordo_serv_quest_reemb;
				end loop;
				
				vet_tab_quest_reemb_w[iqr].dt_acordo_quest_reemb		:= r_procedimento_reembolso_w.dt_acordo_quest_reemb;
				vet_tab_quest_reemb_w[iqr].tp_acordo_quest_reemb		:= r_procedimento_reembolso_w.tp_acordo_quest_reemb;
				vet_tab_quest_reemb_w[iqr].qt_reconh_quest_reemb		:= r_procedimento_reembolso_w.qt_reconh_quest_reemb;
				vet_tab_quest_reemb_w[iqr].qt_acordada_quest_reemb		:= r_procedimento_reembolso_w.qt_acordada_quest_reemb;
				vet_tab_quest_reemb_w[iqr].ie_aceite_quest_reemb		:= r_procedimento_reembolso_w.ie_aceite_quest_reemb;
				
				-- MOTIVO QUESTIONAMENTO REEMBOLSO

				for r_mot_quest_reemb_w in c_mot_quest_reemb( r_procedimento_reembolso_w.motivo_quest_quest_reemb ) loop
				
					imqr := vet_tab_quest_reemb_cod_w.count + 1;
				
					vet_tab_quest_reemb_cod_w[imqr].id_quest			:= iqr;
					vet_tab_quest_reemb_cod_w[imqr].cd_motivo_quest_reemb		:= r_mot_quest_reemb_w.cd_motivo_quest_reemb;
					vet_tab_quest_reemb_cod_w[imqr].ds_motivo_quest_reemb		:= r_mot_quest_reemb_w.ds_motivo_quest_reemb;
				end loop;
				
				iqrp := iqrp + 1;
			end loop;
		end loop;
	end loop;	
end loop;

-- quando nao encontra cabecalho deve dar mensagem de arquivo invalido

if qtd_cabecalho_w = 0 then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1032704);
end if;


for i in 1..vet_tab_cabecalho_w.count loop

	cd_unimed_operadora_w				:= pls_obter_unimed_estab(cd_estabelecimento_p);
	cd_unimed_origem_w				:= vet_tab_cabecalho_w[i].cd_uni_origem_cab;
	cd_unimed_credora_w				:= vet_tab_cabecalho_w[i].cd_uni_cred_cab;
	
	vet_tab_cabecalho_w[i].nr_doc_1_a500_cab 	:= trim(both vet_tab_cabecalho_w[i].nr_doc_1_a500_cab);
	vet_tab_cabecalho_w[i].nr_doc_2_a500_cab 	:= trim(both vet_tab_cabecalho_w[i].nr_doc_2_a500_cab);
	
	nr_fatura_head_w				:= trim(both vet_tab_cabecalho_w[i].nr_doc_1_a500_cab);
	nr_nota_credito_debito_a500_w			:= trim(both vet_tab_cabecalho_w[i].nr_doc_2_a500_cab);
	nr_nota_cred_deb_number_w 			:= somente_numero(vet_tab_cabecalho_w[i].nr_doc_2_a500_cab);
	ie_tp_arquivo_w					:= vet_tab_cabecalho_w[i].tp_arquivo_cab;
	
	if (lpad(cd_unimed_operadora_w,4,'0') = lpad(cd_unimed_credora_w,4,'0')) and (lpad(cd_unimed_operadora_w,4,'0') <> lpad(cd_unimed_origem_w,4,'0')) then
		ie_operacao_w := 'R'; -- Faturamento
	else
		ie_operacao_w := 'E'; -- Pagamento
	end if;	
	
	if (coalesce(nr_fatura_head_w,'0') <> '0') and (coalesce(nr_nota_cred_deb_number_w,0) > 0) then -- NDR A500 (Reembolso) e Fatura
		if (ie_operacao_w = 'R') then -- Faturamento
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_fatura			= nr_fatura_head_w
			and	nr_nota_credito_debito_a500	= nr_nota_credito_debito_a500_w
			and	lpad(cd_unimed_origem,4,'0')	= lpad(cd_unimed_origem_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		else
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_fatura			= nr_fatura_head_w
			and	nr_nota_credito_debito_a500	= nr_nota_credito_debito_a500_w
			and	lpad(cd_unimed_destino,4,'0')	= lpad(cd_unimed_credora_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		end if;
		
		if (coalesce(nr_seq_contestacao_w::text, '') = '') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_pls_fatura_w
			from	pls_fatura	a,
				ptu_fatura	b
			where	a.nr_sequencia			= b.nr_seq_pls_fatura
			and	b.nr_fatura			= nr_fatura_head_w
			and	b.nr_nota_credito_debito	= nr_nota_credito_debito_a500_w;
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_lote_contest_w
			from	pls_lote_contestacao
			where	nr_seq_pls_fatura = nr_seq_pls_fatura_w;
		end if;
		
	elsif (coalesce(nr_fatura_head_w,'0') <> '0') then -- Fatura
		if (ie_operacao_w = 'R') then -- Faturamento
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_fatura			= nr_fatura_head_w
			and	lpad(cd_unimed_origem,4,'0')	= lpad(cd_unimed_origem_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		else
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_fatura			= nr_fatura_head_w
			and	lpad(cd_unimed_destino,4,'0')	= lpad(cd_unimed_credora_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		end if;
		
		if (coalesce(nr_seq_contestacao_w::text, '') = '') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_pls_fatura_w
			from	pls_fatura	a,
				ptu_fatura	b
			where	a.nr_sequencia	= b.nr_seq_pls_fatura
			and	b.nr_fatura	= nr_fatura_head_w;
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_lote_contest_w
			from	pls_lote_contestacao
			where	nr_seq_pls_fatura = nr_seq_pls_fatura_w;
		end if;
	
	elsif (coalesce(nr_nota_cred_deb_number_w,0) > 0) then -- NDR A500 (Reembolso)
		if (ie_operacao_w = 'R') then -- Faturamento
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_nota_credito_debito_a500	= nr_nota_credito_debito_a500_w
			and	lpad(cd_unimed_origem,4,'0')	= lpad(cd_unimed_origem_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		else
			select	max(nr_sequencia)
			into STRICT	nr_seq_contestacao_w
			from	ptu_camara_contestacao
			where	nr_nota_credito_debito_a500	= nr_nota_credito_debito_a500_w
			and	lpad(cd_unimed_destino,4,'0')	= lpad(cd_unimed_credora_w,4,'0')
			and	ie_operacao 			= ie_operacao_w;
		end if;
		
		if (coalesce(nr_seq_contestacao_w::text, '') = '') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_pls_fatura_w
			from	pls_fatura	a,
				ptu_fatura	b
			where	a.nr_sequencia		= b.nr_seq_pls_fatura
			and	b.nr_nota_credito_debito= nr_nota_credito_debito_a500_w;
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_lote_contest_w
			from	pls_lote_contestacao
			where	nr_seq_pls_fatura = nr_seq_pls_fatura_w;
		end if;
	end if;	
	
	if (nr_seq_contestacao_w IS NOT NULL AND nr_seq_contestacao_w::text <> '') and (ie_tp_arquivo_w in (1,5,6,7,8)) then
		select	max(nr_seq_lote_contest)
		into STRICT	nr_seq_lote_contest_w
		from	ptu_camara_contestacao
		where	nr_sequencia = nr_seq_contestacao_w;
		
		select	max(nr_seq_ptu_fatura)
		into STRICT	nr_seq_ptu_fatura_w
		from	pls_lote_contestacao
		where	nr_sequencia = nr_seq_lote_contest_w;
		
		if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
			select	count(1)
			into STRICT	qt_arquivo_w
			from	pls_lote_discussao
			where	nr_seq_lote_contest	= nr_seq_lote_contest_w
			and	ie_tipo_arquivo		= ie_tp_arquivo_w
			and	coalesce(ie_status,'A')	<> 'C';
		end if;
		
		if (qt_arquivo_w > 0) or ((nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') and ie_tp_arquivo_w = 1) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(267354,'IE_TIPO_ARQUIVO_W=' || ie_tp_arquivo_w); -- Nao e possivel importar este tipo de arquivo (tipo #@IE_TIPO_ARQUIVO_W#@) para este lote de contestacao. O arquivo pode ja ter sido importado.
		end if;
	end if;
	
	if (nr_seq_contestacao_w IS NOT NULL AND nr_seq_contestacao_w::text <> '') then
		nr_seq_camara_p	:= nr_seq_contestacao_w;
	end if;
	
	-- Se o tipo de arquivo que esta sendo importado for do tipo 3 ou 4 (Fechamento parcial) ou do tipo 5 ou 6 (Arquivo de fechamento)

	if (ie_tp_arquivo_w in (3,4,5,6)) then
		-- E se ja tem discussoes do tipo 7 ou 8 (Fechamento complementar)

		select	count(1)
		into STRICT	qt_arq_fec_compl_w
		from	pls_lote_discussao
		where	nr_seq_lote_contest = nr_seq_lote_contest_w
		and	ie_tipo_arquivo in (7,8) -- (Fechamento complementar)
		and	coalesce(ie_status,'A') <> 'C';
		
		-- Se tiver discussao com o tipo de arquivo complementar exibir mensagem e para o processo

		if (qt_arq_fec_compl_w > 0) then
			if (ie_tp_arquivo_w in (3,4)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(717186); -- Nao e permitido importar arquivos do tipo fechamento parcial apos importar arquivo do tipo fechamento complementar.
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(717187); -- Nao e permitido importar arquivos do tipo arquivo de fechamento apos importar arquivo do tipo fechamento complementar.
			end if;
		end if;
	end if;
	
	if (ie_tp_arquivo_w in (7,8)) then
		select	count(1)
		into STRICT	qt_arquivo_w
		from	pls_lote_discussao
		where	nr_seq_lote_contest = nr_seq_lote_contest_w
		and	ie_tipo_arquivo in (3,4,9) -- 3 e 4 arquivo parcial, 9 e arquivo parcial que entrou em decurso de prazo
		and	coalesce(ie_status,'A') <> 'C';
		
		if (qt_arquivo_w = 0) then
			--Para importar um arquivo complementar de fechamento deve-se antes ser importado arquivo de fechamento parcial.

			CALL wheb_mensagem_pck.exibir_mensagem_abort(658483);
		end if;
	end if;
	
	-- Verificar se possui arquivo de inclusao importado

	if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') and (ie_tp_arquivo_w != 1) then
		
		qt_arquivo_w := 0;
		if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
			select	count(1)
			into STRICT	qt_arquivo_w
			from	pls_lote_discussao
			where	nr_seq_lote_contest = nr_seq_lote_contest_w
			and	ie_tipo_arquivo in (1) -- inclusao
			and	coalesce(ie_status,'A') <> 'C';
		end if;
		
		if (qt_arquivo_w = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1090815); -- Favor importar primeiro o arquivo de inclusao (tipo 1).
		end if;
	end if;
	
	-- Se for fatura de origem OPS - Contas de Intercambio e o tipo de arquivo e "1", nao permitir a importacao

	if (ie_operacao_w = 'E') and (coalesce(nr_seq_pls_fatura_w::text, '') = '') and (ie_tp_arquivo_w = 1) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1079340); -- Nao e possivel importar arquivo A550 do tipo "1" para uma contestacao de fatura a pagar.
	end if;
	
	-- Verificar se deve atualizar o campo NR_SEQ_A500 dos servicos

	-- Este campo e de extrema importancia para identificacao dos servicos na rotina "PTU_RECONH_ITENS_CONTEST_A550"

	if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
		CALL pls_atualizar_seq_a500( nr_seq_pls_fatura_w, 'N');
	end if;
	
	select	sid,
		serial#
	into STRICT	nm_id_sid_w,
		nm_id_serial_w
	from	v$session
	where 	audsid = userenv('SESSIONID');
	
	if (coalesce(nr_seq_contestacao_w::text, '') = '') then
		select	nextval('ptu_camara_contestacao_seq')
		into STRICT	nr_seq_contestacao_w
		;

		-- conversoes

		vet_tab_cabecalho_w[i].vl_tot_pago_doc_2_cab 		:= to_number(replace(vet_tab_cabecalho_w[i].vl_tot_pago_doc_2_cab, ',','.'), '999999999999.99');
		vet_tab_cabecalho_w[i].vl_tot_cont_doc_1_cab		:= to_number(replace(vet_tab_cabecalho_w[i].vl_tot_cont_doc_1_cab, ',','.'), '999999999999.99');
		vet_tab_cabecalho_w[i].vl_tot_pago_doc_1_cab		:= to_number(replace(vet_tab_cabecalho_w[i].vl_tot_pago_doc_1_cab, ',','.'), '999999999999.99');
		vet_tab_cabecalho_w[i].vl_tot_cont_doc_2_cab		:= to_number(replace(vet_tab_cabecalho_w[i].vl_tot_cont_doc_2_cab, ',','.'), '999999999999.99');
		
		
		begin
			dt_geracao_w	:= ptu_a550_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_geracao_cab);
		exception
		when others then
			dt_geracao_w	:= null;
		end;

		begin
			dt_venc_ndc_1_w := ptu_a550_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_venc_ndc_1_cab);
		exception
		when others then
			dt_venc_ndc_1_w := null;
		end;

		begin
			dt_venc_ndc_2_w := ptu_a550_imp_pck.converte_data(vet_tab_cabecalho_w[i].dt_venc_ndc_2_cab);
		exception
		when others then
			dt_venc_ndc_2_w := null;
		end;
		
		if (ie_novo_imp_a550_w = 'S') then
			-- Iniciar importacao A550

			pls_gerar_log_imp_a550(nr_seq_contestacao_w, 'IA', 'PR', nm_usuario_p, clock_timestamp(), null, null, ie_tp_arquivo_w, 'S');
		end if;
		
		insert into ptu_camara_contestacao(	nr_sequencia, 						dt_atualizacao, 				nm_usuario,
							dt_atualizacao_nrec, 					nm_usuario_nrec, 				cd_unimed_destino,
							cd_unimed_origem, 					dt_geracao, 					nr_fatura,
							vl_total_fatura, 					nr_versao_transacao, 				cd_estabelecimento,
							cd_unimed_credora, 					dt_venc_fatura, 				vl_total_contestacao,
							vl_total_acordo, 					ie_tipo_arquivo, 				vl_total_pago,
							ie_operacao, 						nr_documento, 					dt_venc_doc,
							ie_conclusao,						ie_classif_cobranca_a500,			nr_nota_credito_debito_a500,
							dt_vencimento_ndc_a500,					vl_total_ndc_a500,				vl_total_contest_ndc,
							vl_total_pago_ndc,					nr_documento2,					dt_venc_doc2,
							nr_seq_lote_contest,					ie_status_imp,					ds_sid_processo,
							ds_serial_processo, 					tp_arq_parcial,					ds_hash)	
						values (nr_seq_contestacao_w, 					clock_timestamp(), 					nm_usuario_p,
							clock_timestamp(), 						nm_usuario_p, 					vet_tab_cabecalho_w[i].cd_uni_destino_cab,
							vet_tab_cabecalho_w[i].cd_uni_origem_cab, 		dt_geracao_w, 					vet_tab_cabecalho_w[i].nr_doc_1_a500_cab,
							0, 							vet_tab_cabecalho_w[i].nr_vertra_ptu_cab, 	cd_estabelecimento_p,
							vet_tab_cabecalho_w[i].cd_uni_cred_cab, 		null, 						vet_tab_cabecalho_w[i].vl_tot_cont_doc_1_cab,
							0, 							vet_tab_cabecalho_w[i].tp_arquivo_cab, 		vet_tab_cabecalho_w[i].vl_tot_pago_doc_1_cab,
							'R', 							vet_tab_cabecalho_w[i].nr_ndc_1_cab, 		dt_venc_ndc_1_w,
							vet_tab_cabecalho_w[i].st_conclusao_cab,		vet_tab_cabecalho_w[i].tp_cobranca_cab,		vet_tab_cabecalho_w[i].nr_doc_2_a500_cab,
							null,							0,						vet_tab_cabecalho_w[i].vl_tot_cont_doc_2_cab,
							vet_tab_cabecalho_w[i].vl_tot_pago_doc_2_cab,		vet_tab_cabecalho_w[i].nr_ndc_2_cab,		dt_venc_ndc_2_w,
							nr_seq_lote_contest_w,					'EI',						nm_id_sid_w,
							nm_id_serial_w, 					vet_tab_cabecalho_w[i].tp_arq_parcial_cab,	vet_tab_cabecalho_w[i].hash);
							
		update	ptu_camara_contestacao
		set	dt_postagem_arquivo	= to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss')
		where	nr_sequencia		= nr_seq_contestacao_w;
	else
		
		-- Caso esteja recebendo novamente

		update	ptu_camara_contestacao
		set	vl_total_acordo		= 0,
			vl_total_pago		= to_number(replace(vet_tab_cabecalho_w[i].vl_tot_pago_doc_1_cab, ',','.'), '999999999999.99'),
			vl_total_contestacao	=  to_number(replace(vet_tab_cabecalho_w[i].vl_tot_cont_doc_1_cab, ',','.'), '999999999999.99'),
			ie_tipo_arquivo		=  to_number(replace(vet_tab_cabecalho_w[i].tp_arquivo_cab, ',','.'), '999999999999.99'),
			ds_sid_processo		= nm_id_sid_w,
			ds_serial_processo	= nm_id_serial_w,
			tp_arq_parcial		= vet_tab_cabecalho_w[i].tp_arq_parcial_cab,
			nr_versao_transacao	= vet_tab_cabecalho_w[i].nr_vertra_ptu_cab,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_contestacao_w;
		
	end if;
	
	nr_seq_camara_p := nr_seq_contestacao_w;

	-- QUESTIONAMENTO

	for i in 1..vet_tab_quest_w.count loop
	
			-- Obter sequencia da contestacao da qual o questionamento ira ser vinculado

		if (ie_novo_imp_a550_w = 'N') then
			select	max(nr_sequencia),
				max(ie_operacao)
			into STRICT	nr_seq_contestacao_w,
				ie_operacao_w
			from	ptu_camara_contestacao
			where	nm_usuario_nrec = nm_usuario_p;
		else
			select	max(nr_sequencia),
				max(ie_operacao)
			into STRICT	nr_seq_contestacao_w,
				ie_operacao_w
			from	ptu_camara_contestacao
			where	nr_sequencia = nr_seq_contestacao_w;
		end if;

		nr_lote_w			:= vet_tab_quest_w[i].nr_lote_quest;
		nr_lote_prest_w			:= vet_tab_quest_w[i].nr_lote_prest_quest;
		cd_unimed_w			:= vet_tab_quest_w[i].cd_unimed_quest;
		id_benef_w			:= vet_tab_quest_w[i].id_benef_quest;
		nm_benef_w			:= vet_tab_quest_w[i].nm_benef_quest;
			
		ie_tipo_tabela_tiss_w		:= vet_tab_quest_w[i].tp_tabela_proc_quest;
		cd_servico_w			:= vet_tab_quest_w[i].cd_servico_proc_quest;
		vl_reconhecido_w		:= to_number(replace(vet_tab_quest_w[i].vl_reconh_serv_quest, ',','.'), '999999999999.99');
		vl_acordo_w			:= to_number(replace(vet_tab_quest_w[i].vl_acordo_serv_quest, ',','.'), '999999999999.99');
		ie_tipo_acordo_w		:= vet_tab_quest_w[i].tp_acordo_proc_quest;
		nr_nota_quest_w			:= vet_tab_quest_w[i].nr_nota_quest;
		nr_guia_tiss_prest_quest_w	:= ptu_somente_caracter_permitido(vet_tab_quest_w[i].nr_guia_tiss_prest_quest,'ANSE');
		nr_guia_tiss_operadora_quest_w	:= ptu_somente_caracter_permitido(vet_tab_quest_w[i].nr_guia_tiss_operadora_quest,'ANSE');
		cd_item_unico_w			:= trim(both vet_tab_quest_w[i].id_item_unico_proc_quest);

		begin
		qt_reconh_w		:= to_number(replace(vet_tab_quest_w[i].qt_reconh_proc_quest, ',','.'), '99999.9999');
		exception
		when others then
			qt_reconh_w	:= null;
		end;

		begin
		qt_acordada_w		:= to_number(replace(vet_tab_quest_w[i].qt_acordada_proc_quest, ',','.'), '99999.9999');
		exception
		when others then
			qt_acordada_w	:= null;
		end;
		
		begin
		dt_acordo_w		:= ptu_a550_imp_pck.converte_data(vet_tab_quest_w[i].dt_acordo_proc_quest);
		exception
		when others then
			dt_acordo_w := null;
		end;
		
		nr_seq_a500_w			:= coalesce(vet_tab_quest_w[i].seq_item_txt_proc,vet_tab_quest_w[i].seq_item_xml_proc);
		vl_reconh_co_w			:= to_number(replace(vet_tab_quest_w[i].vl_reconh_co_quest, ',','.'), '999999999999.99');
		vl_acordo_co_w			:= to_number(replace(vet_tab_quest_w[i].vl_acordo_co_quest, ',','.'), '999999999999.99');
		vl_reconh_filme_w		:= to_number(replace(vet_tab_quest_w[i].vl_reconh_filme_quest, ',','.'), '999999999999.99');
		vl_acordo_filme_w		:= to_number(replace(vet_tab_quest_w[i].vl_acordo_filme_quest, ',','.'), '999999999999.99');
		vl_reconh_adic_serv_w		:= to_number(replace(vet_tab_quest_w[i].vl_reconh_adic_serv_quest, ',','.'), '999999999999.99');
		vl_acordo_adic_serv_w		:= to_number(replace(vet_tab_quest_w[i].vl_acordo_adic_serv_quest, ',','.'), '999999999999.99');
		vl_reconh_adic_co_w		:= to_number(replace(vet_tab_quest_w[i].vl_reconh_adic_co_quest, ',','.'), '999999999999.99');
		vl_acordo_adic_co_w		:= to_number(replace(vet_tab_quest_w[i].vl_acordo_adic_co_quest, ',','.'), '999999999999.99');
		vl_reconh_adic_filme_w		:= to_number(replace(vet_tab_quest_w[i].vl_reconh_adic_filme_quest, ',','.'), '999999999999.99');
		vl_acordo_adic_filme_w		:= to_number(replace(vet_tab_quest_w[i].vl_acordo_adic_filme_quest, ',','.'), '999999999999.99');
		nr_seq_conta_proc_w		:= null;
		nr_seq_conta_mat_w		:= null;
		nr_seq_nota_servico_w		:= null;
		nr_seq_conta_w			:= null;
		nr_seq_nota_cobranca_w		:= null;
		ie_aceite_quest_w		:= vet_tab_quest_w[i].ie_aceite_quest;
		
		-- busca os dados da cobranca

		qt_cobrada_w			:= 0;
		vl_cobr_adic_co_w		:= 0;
		vl_cobr_adic_filme_w		:= 0;
		vl_cobr_adic_serv_w		:= 0;
		vl_cobr_co_w			:= 0;
		vl_cobr_filme_w			:= 0;
		vl_cobrado_w			:= 0;
		
		--O numero do doc1 fica no nr_fatura e o doc2 fica na nr_nota_credito_debito da Ptu_fatura

		if (coalesce(nr_fatura_head_w,'0') <> '0') and (coalesce(nr_nota_cred_deb_number_w,0) > 0) then -- NDR A500 (Reembolso) e Fatura
			-- quando for faturamento

			if ie_operacao_w = 'R' then
				select	coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from 	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where 	pt.nr_fatura 			= nr_fatura_head_w
				and 	pnc.nr_seq_fatura 		= pt.nr_sequencia
				and	pt.nr_nota_credito_debito	= nr_nota_credito_debito_a500_w
				and   	((pnc.nr_lote_prest = nr_lote_prest_w and pnc.nr_guia_tiss_prestador = nr_guia_tiss_prest_quest_w and pt.ie_tipo_exportacao = 'XML') or (pnc.nr_lote = nr_lote_w and pnc.nr_nota = nr_nota_quest_w and pt.ie_tipo_exportacao = 'TXT'))
				and 	pns.nr_seq_nota_cobr 		= pnc.nr_sequencia
				and 	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
				and	((pns.nr_seq_a500 		= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
        			and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			else
			-- quando for pagamento

				select  coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT  	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from  	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where   pt.nr_fatura    		= nr_fatura_head_w
				and   	pnc.nr_seq_fatura   		= pt.nr_sequencia
				and   	pns.nr_seq_nota_cobr  		= pnc.nr_sequencia
				and   	((pnc.nr_lote_prest = nr_lote_prest_w and pnc.nr_guia_tiss_prestador = nr_guia_tiss_prest_quest_w and pt.ie_tipo_exportacao = 'XML') or (pnc.nr_lote = nr_lote_w and pnc.nr_nota = nr_nota_quest_w and pt.ie_tipo_exportacao = 'TXT'))
				and	pt.nr_nota_credito_debito	= nr_nota_credito_debito_a500_w
				and   	coalesce(pt.nr_seq_pls_fatura::text, '') = ''
				and	((pns.nr_seq_a500 		= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
        			and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			end if;		
		-- se for faturamento busca de OPS - Faturamento

		elsif (coalesce(nr_fatura_head_w,'0') <> '0') then -- Fatura
			-- quando for faturamento

			if ie_operacao_w = 'R' then
				select	coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from 	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where 	pt.nr_fatura 		= nr_fatura_head_w
				and 	pnc.nr_seq_fatura 	= pt.nr_sequencia
				and 	pns.nr_seq_nota_cobr 	= pnc.nr_sequencia
				and   	((pnc.nr_lote_prest = nr_lote_prest_w and pnc.nr_guia_tiss_prestador = nr_guia_tiss_prest_quest_w and pt.ie_tipo_exportacao = 'XML') or (pnc.nr_lote = nr_lote_w and pnc.nr_nota = nr_nota_quest_w and pt.ie_tipo_exportacao = 'TXT'))
				and 	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
				and	((pns.nr_seq_a500 	= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
				and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			else
			-- quando for pagamento

				select  coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT  	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from  	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where   pt.nr_fatura    	= nr_fatura_head_w
				and   	pnc.nr_seq_fatura   	= pt.nr_sequencia
				and   	pns.nr_seq_nota_cobr  	= pnc.nr_sequencia
				and   	((pnc.nr_lote_prest = nr_lote_prest_w and pnc.nr_guia_tiss_prestador = nr_guia_tiss_prest_quest_w and pt.ie_tipo_exportacao = 'XML') or (pnc.nr_lote = nr_lote_w and pnc.nr_nota = nr_nota_quest_w and pt.ie_tipo_exportacao = 'TXT')					)
				and   	coalesce(pt.nr_seq_pls_fatura::text, '') = ''
				and	((pns.nr_seq_a500 	= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
				and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			end if;
		elsif (coalesce(nr_nota_cred_deb_number_w,0) > 0) then -- NDR A500 (Reembolso)
			if ie_operacao_w = 'R' then
				select	coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from 	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where 	pnc.nr_seq_fatura 		= pt.nr_sequencia
				and	pt.nr_nota_credito_debito	= nr_nota_credito_debito_a500_w
				and 	pns.nr_seq_nota_cobr 		= pnc.nr_sequencia
				and 	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
				and	((pns.nr_seq_a500 		= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
				and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			else
			-- quando for pagamento

				select  coalesce(max(qt_procedimento),0),
					coalesce(max(vl_adic_co),0),
					coalesce(max(vl_adic_filme),0),
					coalesce(max(vl_adic_procedimento),0),
					coalesce(max(vl_custo_operacional),0),
					coalesce(max(vl_filme),0),
					coalesce(max(vl_procedimento),0)
				into STRICT  	qt_cobrada_w,
					vl_cobr_adic_co_w,
					vl_cobr_adic_filme_w,
					vl_cobr_adic_serv_w,
					vl_cobr_co_w,
					vl_cobr_filme_w,
					vl_cobrado_w
				from  	ptu_fatura pt,
					ptu_nota_cobranca pnc,
					ptu_nota_servico pns
				where   pnc.nr_seq_fatura   		= pt.nr_sequencia
				and   	pns.nr_seq_nota_cobr  		= pnc.nr_sequencia
				and	pt.nr_nota_credito_debito	= nr_nota_credito_debito_a500_w
				and   	coalesce(pt.nr_seq_pls_fatura::text, '') = ''
				and	((pns.nr_seq_a500 		= nr_seq_a500_w AND pt.ie_tipo_exportacao = 'TXT') or (pns.nr_seq_item = nr_seq_a500_w AND pt.ie_tipo_exportacao = 'XML'))
				and 	((pt.ie_tipo_exportacao = 'XML' and coalesce(pns.cd_item_unico,cd_item_unico_w) = cd_item_unico_w) or (pt.ie_tipo_exportacao = 'TXT'))
				and	coalesce(pt.ie_tipo_cobranca_fatura,'C') = 'C';
			end if;
		end if;
		
		nr_nota_numerico_w		:= nr_guia_tiss_prest_quest_w;
		
		select	max(pq.nr_sequencia)
		into STRICT	nr_seq_camara_contest_w
		from	ptu_questionamento pq
		where	pq.nr_seq_contestacao 		= nr_seq_contestacao_w
		and	pq.nr_seq_a500 			= nr_seq_a500_w
		and 	((pq.cd_item_unico 		= cd_item_unico_w)
		or 	((coalesce(pq.cd_item_unico::text, '') = '') and (coalesce(cd_item_unico_w::text, '') = '')))
    		and 	(((pq.nr_lote_prest = nr_lote_prest_w and pq.nr_guia_tiss_prestador = nr_guia_tiss_prest_quest_w)
		and	((pq.nr_guia_tiss_operadora = nr_guia_tiss_operadora_quest_w) or (coalesce(pq.nr_guia_tiss_operadora::text, '') = '' and coalesce(nr_guia_tiss_operadora_quest_w::text, '') = '')))
		or (pq.nr_lote = nr_lote_w and pq.nr_nota = nr_nota_quest_w));
		

		cd_servico_tiss_w 	:= cd_servico_w;
		ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(ie_tipo_tabela_tiss_w, cd_servico_w, 'R', null);
		cd_servico_w		:= ptu_conversao_item_tabela(ie_tipo_tabela_tiss_w, cd_servico_w, null);
		
		if (coalesce(nr_seq_camara_contest_w::text, '') = '') then
			insert into ptu_questionamento(	nr_sequencia,				nr_nota,					cd_usuario_plano,
							dt_atualizacao,				nm_usuario,					dt_atualizacao_nrec,
							nm_usuario_nrec,			ie_tipo_tabela_tiss,				dt_acordo,
							ie_tipo_acordo,				vl_acordo,					cd_unimed,
							dt_atendimento,				cd_servico,					vl_cobrado,
							vl_reconhecido,				nm_beneficiario,				nr_seq_contestacao,
							nr_lote,				qt_cobrada,					ds_servico,
							nr_seq_a500,				vl_cobr_co,					vl_reconh_co,
							vl_acordo_co,				vl_cobr_filme,					vl_reconh_filme,
							vl_acordo_filme,			vl_cobr_adic_serv,				vl_reconh_adic_serv,
							vl_acordo_adic_serv,			vl_cobr_adic_co,				vl_reconh_adic_co,
							vl_acordo_adic_co,			vl_cobr_adic_filme,				vl_reconh_adic_filme,
							vl_acordo_adic_filme,			nr_seq_conta_proc,				nr_seq_conta_mat,
							ie_pacote,				cd_pacote,					dt_servico,
							hr_realiz,				qt_acordada,					fat_mult_serv,
							nr_seq_conta,				nr_seq_nota_servico,				nr_seq_nota_cobranca,
							qt_reconh,				nr_guia_tiss_prestador,				cd_item_unico,
							nr_nota_numerico, 			ie_tipo_tabela, 				cd_servico_tiss,
							nr_guia_tiss_operadora,			ie_aceite,					nr_lote_prest)
						values (	nextval('ptu_questionamento_seq'),		coalesce(nr_nota_quest_w,nr_nota_numerico_w),	id_benef_w,
							clock_timestamp(),				nm_usuario_p,					clock_timestamp(),
							nm_usuario_p,				ie_tipo_tabela_tiss_w,				dt_acordo_w,
							ie_tipo_acordo_w,			vl_acordo_w,					cd_unimed_w,
							null,					cd_servico_w,					vl_cobrado_w,
							vl_reconhecido_w,			nm_benef_w,					nr_seq_contestacao_w,
							nr_lote_w,				qt_cobrada_w,					null,
							nr_seq_a500_w,				vl_cobr_co_w,					vl_reconh_co_w,
							vl_acordo_co_w,				vl_cobr_filme_w,				vl_reconh_filme_w,
							vl_acordo_filme_w,			vl_cobr_adic_serv_w,				vl_reconh_adic_serv_w,
							vl_acordo_adic_serv_w,			vl_cobr_adic_co_w,				vl_reconh_adic_co_w,
							vl_acordo_adic_co_w,			vl_cobr_adic_filme_w,				vl_reconh_adic_filme_w,
							vl_acordo_adic_filme_w,			nr_seq_conta_proc_w,				nr_seq_conta_mat_w,
							null,					null,						null,
							null,					qt_acordada_w,					null,
							nr_seq_conta_w,				nr_seq_nota_servico_w,				nr_seq_nota_cobranca_w,
							qt_reconh_w,				nr_guia_tiss_prest_quest_w,			cd_item_unico_w,
							nr_nota_numerico_w, 			ie_tipo_tabela_w, 				cd_servico_tiss_w,
							nr_guia_tiss_operadora_quest_w,		ie_aceite_quest_w,				nr_lote_prest_w) returning nr_sequencia into nr_seq_questionamento_w;
			update	ptu_camara_contestacao
			set	ie_tipo_arquivo_cob	= '502'
			where	nr_sequencia		= nr_seq_contestacao_w
			and	coalesce(ie_tipo_arquivo_cob::text, '') = '';
			
			if (ie_operacao_w = 'R') then
				ptu_reconh_itens_contest_a550( nr_seq_questionamento_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_nota_servico_w, nr_seq_nota_cobranca_w);
				
				update	ptu_questionamento pq
				set	pq.nr_seq_conta		= nr_seq_conta_w,
					pq.nr_seq_conta_proc	= nr_seq_conta_proc_w,
					pq.nr_seq_conta_mat	= nr_seq_conta_mat_w,
					pq.nr_seq_nota_servico	= nr_seq_nota_servico_w,
					pq.nr_seq_nota_cobranca	= nr_seq_nota_cobranca_w,
					pq.dt_atualizacao	= clock_timestamp(),
					pq.nm_usuario		= nm_usuario_p
				where 	pq.nr_sequencia		= nr_seq_questionamento_w
				and	pq.nr_seq_a500		= nr_seq_a500_w
				and 	((pq.cd_item_unico = cd_item_unico_w) or ((coalesce(pq.cd_item_unico::text, '') = '') and (coalesce(cd_item_unico_w::text, '') = '')));
			end if;
		else		
			-- Caso esteja recebendo novamente

			update	ptu_questionamento pq
			set	pq.vl_acordo		= vl_acordo_w,
				pq.vl_acordo_adic_co	= vl_acordo_adic_co_w,
				pq.vl_acordo_adic_filme	= vl_acordo_adic_filme_w,
				pq.vl_acordo_adic_serv	= vl_acordo_adic_serv_w,
				pq.vl_acordo_co		= vl_acordo_co_w,
				pq.vl_acordo_filme	= vl_acordo_filme_w,
				pq.vl_reconh_adic_co	= vl_reconh_adic_co_w,
				pq.vl_reconh_adic_filme	= vl_reconh_adic_filme_w,
				pq.vl_reconh_adic_serv  = vl_reconh_adic_serv_w,
				pq.vl_reconh_co         = vl_reconh_co_w,
				pq.vl_reconhecido	= vl_reconhecido_w,
				pq.vl_reconh_filme	= vl_reconh_filme_w,
				pq.dt_acordo		= dt_acordo_w,
				pq.ie_tipo_acordo 	= ie_tipo_acordo_w,
				pq.qt_acordada		= qt_acordada_w,
				pq.qt_reconh		= qt_reconh_w,
				pq.dt_atualizacao	= clock_timestamp(),
				pq.nm_usuario		= nm_usuario_p,
				pq.qt_cobrada		= qt_cobrada_w,
				pq.vl_cobr_adic_co	= vl_cobr_adic_co_w,
				pq.vl_cobr_adic_filme	= vl_cobr_adic_filme_w,
				pq.vl_cobr_adic_serv	= vl_cobr_adic_serv_w,
				pq.vl_cobr_co		= vl_cobr_co_w,
				pq.vl_cobr_filme	= vl_cobr_filme_w,
				pq.vl_cobrado		= vl_cobrado_w
			where	pq.nr_sequencia		= nr_seq_camara_contest_w
			and	pq.nr_seq_a500		= nr_seq_a500_w
			and 	((pq.cd_item_unico = cd_item_unico_w) or ((coalesce(pq.cd_item_unico::text, '') = '') and (coalesce(cd_item_unico_w::text, '') = '')));
		end if;
		
		-- MOTIVO DE QUESTIONAMENTO 

		
		for im in 1..vet_tab_quest_cod_w.count loop
		
			if (vet_tab_quest_cod_w[im].id_quest = i) then
			
				--- se for mesmo beneficiario e procedimento

				if 	vet_tab_quest_cod_w[im].id_benef_quest 		= vet_tab_quest_w[i].id_benef_quest and
					vet_tab_quest_cod_w[im].cd_servico_proc_quest 	= vet_tab_quest_w[i].cd_servico_proc_quest then

					select	max(nr_sequencia)
					into STRICT	nr_seq_motivo_quest_w
					from	ptu_motivo_questionamento
					where	pls_elimina_zeros_esquerda(cd_motivo)	= pls_elimina_zeros_esquerda(vet_tab_quest_cod_w[im].cd_motivo_quest);

					if 	coalesce(nr_seq_motivo_quest_w::text, '') = '' then
						select 	mot.nr_sequencia
						into STRICT 	nr_seq_motivo_quest_w
						from 	ptu_motivo_questionamento mot
						where 	somente_numero(mot.cd_motivo) = 99; -- busca uma padrao
					end if;

					insert into ptu_questionamento_codigo(	nr_sequencia,				dt_atualizacao,					nm_usuario,
										dt_atualizacao_nrec,			ds_motivo,					nm_usuario_nrec,
										nr_seq_registro,			nr_seq_mot_questionamento,			ds_parecer_glosa,
										nr_seq_contestacao )	
					values (					nextval('ptu_questionamento_codigo_seq'),	clock_timestamp(),					nm_usuario_p,
										clock_timestamp(),				vet_tab_quest_cod_w[im].ds_motivo_quest,	nm_usuario_p,
										nr_seq_questionamento_w,		nr_seq_motivo_quest_w,				vet_tab_quest_cod_w[im].ds_motivo_quest,
										nr_seq_contestacao_w);	
				end if;
			end if;
		end loop;					
		
	end loop;

	-- QUESTIONAMENTO NOTA FISCAL DO FORNECEDOR

	for i in 1..vet_tab_quest_nf_forn_w.count loop
	
		-- POPULAR VARIAVEIS

		nr_seq_a500_w      		:= vet_tab_quest_nf_forn_w[i].seq_item_proc_nf_forn;
		id_benef_w     			:= vet_tab_quest_nf_forn_w[i].id_benef_nf_forn;
		ie_tipo_tabela_tiss_w   	:= vet_tab_quest_nf_forn_w[i].tp_tabela_nf_forn;
		ie_tipo_acordo_w    		:= vet_tab_quest_nf_forn_w[i].tp_acordo_nf_forn;
		vl_acordo_w      		:= to_number(replace(vet_tab_quest_nf_forn_w[i].vl_acordo_serv_nf_forn, ',','.'), '999999999999.99');
		cd_unimed_w      		:= vet_tab_quest_nf_forn_w[i].cd_unimed_nf_forn;
		cd_servico_w      		:= vet_tab_quest_nf_forn_w[i].cd_servico_nf_forn;
		vl_reconhecido_w    		:= to_number(replace(vet_tab_quest_nf_forn_w[i].vl_reconh_serv_nf_forn, ',','.'), '999999999999.99');
		nm_benef_w      		:= vet_tab_quest_nf_forn_w[i].nm_benef_nf_forn;
		vl_reconh_adic_serv_w    	:= to_number(replace(vet_tab_quest_nf_forn_w[i].vl_reconh_adic_serv_nf_forn, ',','.'), '999999999999.99');
		vl_acordo_adic_serv_w    	:= to_number(replace( vet_tab_quest_nf_forn_w[i].vl_acordo_adic_serv_nf_forn, ',','.'), '999999999999.99');
		
		-- falta acrescentar no insert e criar campo

		nr_nf_fornecedor_w		:= vet_tab_quest_nf_forn_w[i].nr_nf_fornecedor;
		nr_guia_tiss_principal_w	:= vet_tab_quest_nf_forn_w[i].nr_guia_tiss_principal;
		cd_item_unico_w			:= vet_tab_quest_nf_forn_w[i].id_item_unico_nf_forn;
		
		ie_aceite_quest_w		:=  vet_tab_quest_nf_forn_w[i].ie_aceite_nf_forn;
		
		
		nr_seq_conta_proc_w		:= null;
		nr_seq_conta_mat_w		:= null;
		nr_seq_nota_servico_w		:= null;
		nr_seq_conta_w			:= null;
		nr_seq_nota_cobranca_w		:= null;
		
		begin
		qt_reconh_w		:= to_number(replace(vet_tab_quest_nf_forn_w[i].qt_reconh_nf_forn, ',','.'), '99999.9999');
		exception
		when others then
			qt_reconh_w	:= null;
		end;

		begin
		qt_acordada_w		:= to_number(replace(vet_tab_quest_nf_forn_w[i].qt_acordada_nf_forn, ',','.'), '99999.9999');
		exception
		when others then
			qt_acordada_w	:= null;
		end;
		
		begin
		dt_acordo_w		:= ptu_a550_imp_pck.converte_data(vet_tab_quest_nf_forn_w[i].dt_acordo_nf_forn);
		exception
		when others then
			dt_acordo_w := null;
		end;
	
		select	max(nr_sequencia)
		into STRICT	nr_seq_camara_contest_w
		from	ptu_questionamento
		where	nr_seq_contestacao 	= nr_seq_contestacao_w
		and	nr_seq_a500		= nr_seq_a500_w
		and	cd_item_unico		= cd_item_unico_w;

		cd_servico_tiss_w	:= cd_servico_w;
		ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(ie_tipo_tabela_tiss_w, cd_servico_w, 'R', null);
		cd_servico_w		:= ptu_conversao_item_tabela(ie_tipo_tabela_tiss_w, cd_servico_w, null);
		
		if (coalesce(nr_seq_camara_contest_w::text, '') = '') then
		
			insert into ptu_questionamento(	nr_sequencia,				nr_nota,				cd_usuario_plano,
							dt_atualizacao,				nm_usuario,				dt_atualizacao_nrec,
							nm_usuario_nrec,			ie_tipo_tabela,				dt_acordo,
							ie_tipo_acordo,				vl_acordo,				cd_unimed,
							dt_atendimento,				cd_servico,				vl_cobrado,
							vl_reconhecido,				nm_beneficiario,			nr_seq_contestacao,
							nr_lote,				qt_cobrada,				ds_servico,
							nr_seq_a500,				vl_cobr_co,				vl_reconh_co,
							vl_acordo_co,				vl_cobr_filme,				vl_reconh_filme,
							vl_acordo_filme,			vl_cobr_adic_serv,			vl_reconh_adic_serv,
							vl_acordo_adic_serv,			vl_cobr_adic_co,			vl_reconh_adic_co,
							vl_acordo_adic_co,			vl_cobr_adic_filme,			vl_reconh_adic_filme,
							vl_acordo_adic_filme,			nr_seq_conta_proc,			nr_seq_conta_mat,
							ie_pacote,				cd_pacote,				dt_servico,
							hr_realiz,				qt_acordada,				fat_mult_serv,
							nr_seq_conta,				nr_seq_nota_servico,			nr_seq_nota_cobranca,
							qt_reconh,				nr_nota_fiscal_forn,			nr_guia_tiss_principal,
							cd_item_unico, 				ie_tipo_tabela_tiss, 			cd_servico_tiss,
							ie_aceite)
						values (	nextval('ptu_questionamento_seq'),		null,					id_benef_w,
							clock_timestamp(),				nm_usuario_p,				clock_timestamp(),
							nm_usuario_p,				ie_tipo_tabela_w,			dt_acordo_w,
							ie_tipo_acordo_w,			vl_acordo_w,				cd_unimed_w,
							null,					cd_servico_w,				null,
							vl_reconhecido_w,			nm_benef_w,				nr_seq_contestacao_w,
							null,					null,					null,
							nr_seq_a500_w,				null,					null,
							null,					null,					null,
							null,					null,					vl_reconh_adic_serv_w,
							vl_acordo_adic_serv_w,			null,					null,
							null,					null,					null,
							null,					nr_seq_conta_proc_w,			nr_seq_conta_mat_w,
							null,					null,					null,
							null,					qt_acordada_w,				null,
							nr_seq_conta_w,				nr_seq_nota_servico_w,			nr_seq_nota_cobranca_w,
							qt_reconh_w,				nr_nf_fornecedor_w,			nr_guia_tiss_principal_w,
							cd_item_unico_w, 			ie_tipo_tabela_tiss_w, 			cd_servico_tiss_w,
							ie_aceite_quest_w) returning nr_sequencia into nr_seq_questionamento_w;
							
			update	ptu_camara_contestacao
			set	ie_tipo_arquivo_cob	= '502'
			where	nr_sequencia		= nr_seq_contestacao_w
			and	coalesce(ie_tipo_arquivo_cob::text, '') = '';

			if (ie_operacao_w = 'R') then
				ptu_reconh_itens_contest_a550( nr_seq_questionamento_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_nota_servico_w, nr_seq_nota_cobranca_w);
				
				update	ptu_questionamento
				set	nr_seq_conta		= nr_seq_conta_w,
					nr_seq_conta_proc	= nr_seq_conta_proc_w,
					nr_seq_conta_mat	= nr_seq_conta_mat_w,
					nr_seq_nota_servico	= nr_seq_nota_servico_w,
					nr_seq_nota_cobranca	= nr_seq_nota_cobranca_w,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where 	nr_sequencia		= nr_seq_questionamento_w
				and	nr_seq_a500		= nr_seq_a500_w;
			end if;
		
		else
			-- Caso esteja recebendo novamente

			update	ptu_questionamento
			set	vl_acordo		= vl_acordo_w,
				vl_acordo_adic_serv	= vl_acordo_adic_serv_w,
				vl_reconh_adic_serv     = vl_reconh_adic_serv_w,
				vl_reconhecido         	= vl_reconhecido_w,
				dt_acordo		= dt_acordo_w,
				ie_tipo_acordo 		= ie_tipo_acordo_w,
				qt_acordada		= qt_acordada_w,
				qt_reconh		= qt_reconh_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_sequencia		= nr_seq_camara_contest_w
			and	nr_seq_a500		= nr_seq_a500_w
			and	cd_item_unico		= cd_item_unico_w;
		end if;
		
		-- MOTIVO DE QUESTIONAMENTO 

		for im in 1..vet_tab_mot_ques_nf_forn_w.count loop
		
			if (vet_tab_mot_ques_nf_forn_w[im].id_motivo_quest = i) then
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_motivo_quest_w
				from	ptu_motivo_questionamento
				where	pls_elimina_zeros_esquerda(cd_motivo)	= pls_elimina_zeros_esquerda(vet_tab_mot_ques_nf_forn_w[im].cd_motivo_nf_forn);

				if 	coalesce(nr_seq_motivo_quest_w::text, '') = '' then
					select 	mot.nr_sequencia
					into STRICT 	nr_seq_motivo_quest_w
					from 	ptu_motivo_questionamento mot
					where 	somente_numero(mot.cd_motivo) = 99; -- busca uma padrao
				end if;
			
				insert into ptu_questionamento_codigo(	nr_sequencia,				dt_atualizacao,						nm_usuario,
									dt_atualizacao_nrec,			ds_motivo,						nm_usuario_nrec,
									nr_seq_registro,			nr_seq_mot_questionamento,				ds_parecer_glosa,
									nr_seq_contestacao )	
								values (	nextval('ptu_questionamento_codigo_seq'),	clock_timestamp(),						nm_usuario_p,
									clock_timestamp(),				vet_tab_mot_ques_nf_forn_w[im].ds_motivo_nf_forn,	nm_usuario_p,
									nr_seq_questionamento_w,		nr_seq_motivo_quest_w,					vet_tab_mot_ques_nf_forn_w[im].ds_motivo_nf_forn,
									nr_seq_contestacao_w);	
			end if;
		end loop;
	end loop;

	-- QUESTIONAMENTO DA COBRANCA DE REEMBOLSO 

	for i in 1..vet_tab_quest_reemb_w.count loop

		cd_unimed_quest_reem_w		:= vet_tab_quest_reemb_w[i].cd_unimed_quest_reemb;
		id_benef_quest_reem_w		:= vet_tab_quest_reemb_w[i].id_benef_quest_reemb;
		--id_reembolso_w			:= vet_tab_quest_reemb_w(i).;

		
		select	max(nr_sequencia)
		into STRICT	nr_seq_quest_rrs_w
		from	ptu_questionamento_rrs
		where	nr_seq_contestacao 	= nr_seq_contestacao_w
		and	id_benef		= id_benef_quest_reem_w;
		
		if (coalesce(nr_seq_quest_rrs_w::text, '') = '') then
			insert into ptu_questionamento_rrs(	nr_sequencia,				dt_atualizacao,			nm_usuario,
								dt_atualizacao_nrec,			nm_usuario_nrec,		nr_seq_contestacao,
								cd_unimed,				id_benef,			nm_beneficiario,
								dt_reembolso,				nr_cnpj_cpf,			nm_prestador,
								nr_seq_conta,				nr_seq_nota_cobr_rrs,		nr_lote,
								nr_nota,				nr_nota_numerico,		id_reembolso)
							values (	nextval('ptu_questionamento_rrs_seq'),	clock_timestamp(),			nm_usuario_p,
								clock_timestamp(),				nm_usuario_p,			nr_seq_contestacao_w,
								cd_unimed_quest_reem_w,			id_benef_quest_reem_w,		null,
								null,					null,				null,
								null,					null,				null,
								null,					null,				id_reembolso_w) returning nr_sequencia into nr_seq_quest_rrs_w;

			update	ptu_camara_contestacao
			set	ie_tipo_arquivo_cob	= '507'
			where	nr_sequencia		= nr_seq_contestacao_w;
			
			-- Vincular os motivos de questionamento

			update	ptu_questionamento_codigo
			set	nr_seq_registro_rrs	= nr_seq_quest_rrs_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_seq_contestacao	= nr_seq_contestacao_w
			and	nm_usuario_nrec 	= nm_usuario_p
			and	coalesce(nr_seq_registro::text, '') = '';
		end if;
		
		nr_seq_a500_reemb_w		:= coalesce(vet_tab_quest_reemb_w[i].seq_item_txt_proc_reemb,vet_tab_quest_reemb_w[i].seq_item_xml_proc_reemb);

		tp_particip_quest_reemb_w	:= vet_tab_quest_reemb_w[i].tp_particip_quest_reemb;
		tp_tabela_quest_reemb_w		:= vet_tab_quest_reemb_w[i].tp_tabela_quest_reemb;
		cd_servico_quest_reemb_w	:= vet_tab_quest_reemb_w[i].cd_servico_quest_reemb;
		
		begin
		dt_acordo_quest_reemb_w		:= ptu_a550_imp_pck.converte_data(vet_tab_quest_reemb_w[i].dt_acordo_quest_reemb);
		exception
		when others then
			dt_acordo_quest_reemb_w	:= null;
		end;
		
		tp_acordo_quest_reemb_w		:= vet_tab_quest_reemb_w[i].tp_acordo_quest_reemb;
		qt_reconh_quest_reemb_w		:= to_number(replace(vet_tab_quest_reemb_w[i].qt_reconh_quest_reemb, ',','.'), '99999.9999');
		qt_acordada_quest_reemb_w	:= to_number(replace(vet_tab_quest_reemb_w[i].qt_acordada_quest_reemb, ',','.'), '99999.9999');
		
    		vl_reconh_serv_quest_reemb_w	:= to_number(replace(vet_tab_quest_reemb_w[i].vl_reconh_serv_quest_reemb, ',','.'), '999999999999.99');
		vl_acordo_serv_quest_reemb_w	:= to_number(replace(vet_tab_quest_reemb_w[i].vl_acordo_serv_quest_reemb, ',','.'), '999999999999.99');
		cd_item_unico_w			:= vet_tab_quest_reemb_w[i].id_item_unico_proc_reemb;
		
		vl_pago_benef_w			:= 0;
		vl_dif_vl_inter_w		:= 0;
		
		ie_aceite_quest_reemb_w		:= vet_tab_quest_reemb_w[i].ie_aceite_quest_reemb;
		
		

		select	max(nr_sequencia)
		into STRICT	nr_seq_quest_rrs_w
		from	ptu_questionamento_rrs
		where	nr_seq_contestacao 	= nr_seq_contestacao_w;
		
		select	max(s.nr_sequencia),
            		max(c.nr_sequencia)
		into STRICT	nr_seq_quest_serv_rrs_w,
          		nr_seq_questionamento_rrs_w
		from	ptu_questionamento_rrs	c,
			ptu_quest_serv_rrs	s
		where	c.nr_sequencia		= s.nr_seq_quest_rrs
		and	c.nr_seq_contestacao 	= nr_seq_contestacao_w
		and	s.nr_seq_a500		= nr_seq_a500_reemb_w
		and	s.cd_item_unico		= cd_item_unico_w;
		
		if (coalesce(nr_fatura_head_w,'0') <> '0') then
			-- quando for faturamento

			if 	ie_operacao_w = 'R' then
				
				select	coalesce(max(vl_dif_vl_inter),0)
				into STRICT	vl_dif_vl_inter_w
				from 	ptu_fatura 		pt,
					ptu_nota_cobranca_rrs 	pnc,
					ptu_nota_servico_rrs 	pns
				where 	pt.nr_fatura 			= nr_fatura_head_w
				and 	pnc.nr_seq_fatura 		= pt.nr_sequencia
				and 	pns.nr_seq_nota_cobr_rrs 	= pnc.nr_sequencia
				and 	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
				and 	pns.nr_seq_a500 		= nr_seq_a500_reemb_w;

				select 	coalesce(max(vl_liberado),0) 
				into STRICT 	vl_pago_benef_w
				from (
					SELECT	pcc.vl_liberado
					from  	ptu_fatura    		pt,
						ptu_nota_cobranca_rrs   pnc,
						ptu_nota_servico_rrs  	pns,
						pls_conta             	pc,
						pls_conta_proc        	pcc
					where   pt.nr_fatura      	= nr_fatura_head_w
					and   	pnc.nr_seq_fatura     	= pt.nr_sequencia
					and   	pns.nr_seq_nota_cobr_rrs  = pnc.nr_sequencia
					and   	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
					and 	pc.nr_sequencia 	= pnc.nr_seq_conta
					and   	pns.nr_seq_a500     	= nr_seq_a500_reemb_w
					and 	pcc.nr_seq_conta 	= pc.nr_sequencia
					and 	pcc.nr_sequencia 	= pns.nr_seq_conta_proc
					
union

					SELECT 	pcm.vl_liberado
					from  	ptu_fatura    		pt,
						ptu_nota_cobranca_rrs   pnc,
						ptu_nota_servico_rrs  	pns,
						pls_conta             	pc,
						pls_conta_mat        	pcm
					where   pt.nr_fatura      	= nr_fatura_head_w
					and   	pnc.nr_seq_fatura     	= pt.nr_sequencia
					and   	pns.nr_seq_nota_cobr_rrs  = pnc.nr_sequencia
					and   	(pt.nr_seq_pls_fatura IS NOT NULL AND pt.nr_seq_pls_fatura::text <> '')
					and 	pc.nr_sequencia 	= pnc.nr_seq_conta
					and   	pns.nr_seq_a500     	= nr_seq_a500_reemb_w
					and 	pcm.nr_seq_conta 	= pc.nr_sequencia
					and 	pcm.nr_sequencia 	= pns.nr_seq_conta_mat
				) alias4;

			else
				select	coalesce(max(vl_pago_benef),0),
					coalesce(max(vl_dif_vl_inter),0)
				into STRICT	vl_pago_benef_w,
					vl_dif_vl_inter_w
				from 	ptu_fatura 		pt,
					ptu_nota_cobranca_rrs 	pnc,
					ptu_nota_servico_rrs 	pns
				where 	pt.nr_fatura 			= nr_fatura_head_w
				and 	pnc.nr_seq_fatura 		= pt.nr_sequencia
				and 	pns.nr_seq_nota_cobr_rrs 	= pnc.nr_sequencia
				and   	coalesce(pt.nr_seq_pls_fatura::text, '') = ''
				and 	pns.nr_seq_a500 		= nr_seq_a500_reemb_w;
			end if;
		end if;
		
		cd_servico_tiss_w 	:= cd_servico_quest_reemb_w;
		ie_tipo_tabela_w	:= ptu_conversao_tipo_tabela(tp_tabela_quest_reemb_w, cd_servico_quest_reemb_w, 'R', null);
		cd_servico_quest_reemb_w	:= ptu_conversao_item_tabela(tp_tabela_quest_reemb_w, cd_servico_quest_reemb_w, null);

		if (coalesce(nr_seq_quest_serv_rrs_w::text, '') = '') then
			insert into ptu_quest_serv_rrs(	nr_sequencia,				dt_atualizacao,			nm_usuario,
							dt_atualizacao_nrec,			nm_usuario_nrec,		nr_seq_quest_rrs,
							nr_lote,				nr_nota,			nr_seq_a500,
							tp_particip,				ie_tipo_tabela_tiss,		cd_servico,
							dt_servico,				vl_dif_vl_inter,		vl_serv,
							vl_reconh_serv,				vl_acordo_serv,			tp_acordo,
							qt_cobrada,				qt_reconh,			qt_acordada,
							nm_profissional,			dt_acordo,			sg_cons_prof,
							nr_cons_prof,				sg_uf_cons_prof,		nr_autoriz,
							nr_seq_nota_serv_rrs,			nr_seq_conta_mat,		nr_seq_conta_proc,
							nr_nota_numerico,			cd_item_unico, 			cd_servico_tiss, 
							tp_tabela,				ie_aceite)	
						values (	nextval('ptu_quest_serv_rrs_seq'),		clock_timestamp(),			nm_usuario_p,
							clock_timestamp(),				nm_usuario_p,			nr_seq_quest_rrs_w,
							null,					null,				nr_seq_a500_reemb_w,
							tp_particip_quest_reemb_w,		tp_tabela_quest_reemb_w,	cd_servico_quest_reemb_w,
							null,					vl_dif_vl_inter_w,		vl_pago_benef_w,
							vl_reconh_serv_quest_reemb_w,		vl_acordo_serv_quest_reemb_w,	tp_acordo_quest_reemb_w,
							null,					qt_reconh_quest_reemb_w,	qt_acordada_quest_reemb_w,
							null,					dt_acordo_quest_reemb_w,	null,
							null,					null,				null,
							null,					null,				null,
							null,					cd_item_unico_w, 		cd_servico_tiss_w, 
							ie_tipo_tabela_w,			ie_aceite_quest_reemb_w) returning nr_sequencia into nr_seq_quest_serv_rrs_w;
				
			if (ie_operacao_w = 'R') then
				ptu_reconh_contest_reemb_a550( nr_seq_quest_serv_rrs_w, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_nota_cobr_rrs_w, nr_seq_nota_serv_rrs_w);
				
				update	ptu_quest_serv_rrs
				set	nr_seq_conta_proc	= nr_seq_conta_proc_w,
					nr_seq_conta_mat	= nr_seq_conta_mat_w,
					nr_seq_nota_serv_rrs	= nr_seq_nota_serv_rrs_w,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= nr_seq_quest_serv_rrs_w
				and	nr_seq_a500		= nr_seq_a500_reemb_w;
				
				update	ptu_questionamento_rrs
				set	nr_seq_conta		= nr_seq_conta_w,
					nr_seq_nota_cobr_rrs	= nr_seq_nota_cobr_rrs_w,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= nr_seq_quest_rrs_w;
			end if;
				
		else
			-- Caso esteja recebendo novamente

			update	ptu_quest_serv_rrs
			set	dt_acordo		= dt_acordo_quest_reemb_w,
				qt_acordada		= qt_acordada_quest_reemb_w,
				qt_reconh		= qt_reconh_quest_reemb_w,
				tp_acordo		= tp_acordo_quest_reemb_w,
				vl_acordo_serv		= vl_acordo_serv_quest_reemb_w,
				vl_reconh_serv		= vl_reconh_serv_quest_reemb_w,
				vl_dif_vl_inter		= vl_dif_vl_inter_w,
				vl_serv			= vl_pago_benef_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_sequencia		= nr_seq_quest_serv_rrs_w
			and	nr_seq_a500		= nr_seq_a500_reemb_w
			and	cd_item_unico		= cd_item_unico_w;
			
		end if;
		
		-- MOTIVO DE QUESTIONAMENTO 

		for im in 1..vet_tab_quest_reemb_cod_w.count loop
		
			if (vet_tab_quest_reemb_cod_w[im].id_quest = i) then
		
				select	max(nr_sequencia)
				into STRICT	nr_seq_motivo_quest_w
				from	ptu_motivo_questionamento
				where	pls_elimina_zeros_esquerda(cd_motivo)	= pls_elimina_zeros_esquerda(vet_tab_quest_reemb_cod_w[im].cd_motivo_quest_reemb);

				if 	coalesce(nr_seq_motivo_quest_w::text, '') = '' then
					select 	mot.nr_sequencia
					into STRICT 	nr_seq_motivo_quest_w
					from 	ptu_motivo_questionamento mot
					where 	somente_numero(mot.cd_motivo) = 99; -- busca uma padrao
				end if;

				
				insert into ptu_questionamento_codigo(	nr_sequencia,				dt_atualizacao,							nm_usuario,
									dt_atualizacao_nrec,			ds_motivo,							nm_usuario_nrec,
									nr_seq_registro_rrs,			nr_seq_mot_questionamento,					ds_parecer_glosa,
									nr_seq_contestacao )			
								values (	nextval('ptu_questionamento_codigo_seq'),	clock_timestamp(),							nm_usuario_p,
									clock_timestamp(),				vet_tab_quest_reemb_cod_w[im].ds_motivo_quest_reemb,		nm_usuario_p,
									nr_seq_questionamento_rrs_w,		nr_seq_motivo_quest_w,		vet_tab_quest_reemb_cod_w[im].ds_motivo_quest_reemb,
									nr_seq_contestacao_w);
			end if;								
		end loop;
	end loop;
	
	if (coalesce(nr_seq_contestacao_w,0) > 0) then		
		select	max(ld.nr_sequencia)
		into STRICT	nr_seq_lote_disc_w
		from	ptu_camara_contestacao	cc,
			pls_lote_contestacao	lc,
			pls_lote_discussao	ld
		where	lc.nr_sequencia	= cc.nr_seq_lote_contest
		and	lc.nr_sequencia	= ld.nr_seq_lote_contest
		and	cc.nr_sequencia	= nr_seq_contestacao_w
		and	ld.ds_hash_a550	= vet_tab_cabecalho_w[i].hash
		and	ld.ie_status	!= 'C';
		
		if (nr_seq_lote_disc_w IS NOT NULL AND nr_seq_lote_disc_w::text <> '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(762476,'NR_SEQ_LOTE_DISC=' || nr_seq_lote_disc_w); -- Nao foi possivel importar este arquivo, ele ja foi importado gerando o lote de discussao #@NR_SEQ_LOTE_DISC#@.
		end if;
	end if;

end loop;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a550_imp_pck.carregar_arq_a550_xml_int ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_camara_p INOUT bigint) FROM PUBLIC;
