-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE philips_audit_pck.montarjsonupdaterecordvalues () AS $body$
DECLARE

		auxOldValue varchar(32000);
		auxNewValue varchar(32000);
	
BEGIN
		jsonUpdateRecordValues := '';

		auxOldValue := '';
		auxNewValue := '';

		if (ListRecordFields.COUNT > 0) then
			for i in 1 .. ListRecordFields.COUNT loop

				if i > 1 then
				  auxOldValue := auxOldValue || ',';
				  auxNewValue := auxNewValue || ',';
				end if;

				auxOldValue := auxOldValue ||
									'"'||ListRecordFields[i].ColumnName||'": {' ||
									'"tableName" : "'||ListRecordFields[i].TableName||'",'||
									'"columnName" : "'||ListRecordFields[i].ColumnName||'",'||
									'"columnDescription" : "'||ListRecordFields[i].ColumnDescription||'",'||
									'"type" : "'||philips_audit_pck.getjsonrecordtype(ListRecordFields[i].ColumnType) || '",'||
									'"value" : '||GetJsonRecordValue(ListRecordFields[i].ColumnType, ListRecordFields[i].ColumnOldValue)||'}';

				auxNewValue := auxNewValue ||
									'"'||ListRecordFields[i].ColumnName||'": {' ||
									'"tableName" : "'||ListRecordFields[i].TableName||'",'||
									'"columnName" : "'||ListRecordFields[i].ColumnName||'",'||
									'"columnDescription" : "'||ListRecordFields[i].ColumnDescription||'",'||
									'"type" : "'||philips_audit_pck.getjsonrecordtype(ListRecordFields[i].ColumnType) || '",'||
									'"value" : '||GetJsonRecordValue(ListRecordFields[i].ColumnType, ListRecordFields[i].ColumnNewValue)||'}';

			end loop;
		end if;

		auxOldValue := '"changedFieldsOldValue" : { ' || auxOldValue || '},';
		auxNewValue := '"changedFieldsNewValue" : { ' || auxNewValue || '}';

		jsonUpdateRecordValues := auxOldValue || auxNewValue;
	end;

begin

  ADDRESS_SERVER := philips_audit_pck.getaddress();

  IF (ADDRESS_SERVER IS NOT NULL AND ADDRESS_SERVER::text <> '') THEN

	CALL philips_audit_pck.montarjsonupdaterecordvaluespk();
	CALL philips_audit_pck.montarjsonupdaterecordvalues();

	CONTENT_DATA := '{
			  ' || philips_audit_pck.getjsonparentid(current_setting('philips_audit_pck.parentidlist_w')::varchar(10000)) || ',
			  "userID" : "' || current_setting('philips_audit_pck.nm_usuario_w')::varchar(15) || '",
			  "userFullName" : "' || current_setting('philips_audit_pck.ds_usuario_w')::varchar(100) || '",
			  "tableName" : "' || table_name_p || '",
			  ' || jsonUpdateRecordValuesPK || '
               		  "establishment" : {
                         	"code" : ' || current_setting('philips_audit_pck.cd_estabelecimento_w')::bigint || ',
							"name" : "' || current_setting('philips_audit_pck.ds_estabelecimento_w')::varchar(100) || '"
	                  },
			  ' || jsonUpdateRecordValues || '
			}';

    UTL_HTTP.set_wallet(getWallet, NULL);
    REQ := utl_http.begin_request(ADDRESS_SERVER || '/philips-audit/UpdateRecordEvent', 'POST');
	utl_http.set_header(REQ, 'content-type', 'application/json');
	utl_http.set_header(REQ, 'Content-Length', LENGTH(CONTENT_DATA));

	utl_http.write_text(REQ, CONTENT_DATA);

	RES := utl_http.get_response(REQ);

	BEGIN
		utl_http.end_response(RES);
	EXCEPTION
		WHEN utl_http.end_of_body THEN
			utl_http.end_response(RES);
	END;
  END IF;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE philips_audit_pck.montarjsonupdaterecordvalues () FROM PUBLIC;
