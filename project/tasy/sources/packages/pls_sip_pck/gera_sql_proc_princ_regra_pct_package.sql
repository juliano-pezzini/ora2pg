-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_sip_pck.gera_sql_proc_princ_regra_pct ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, nr_seq_pacote_p pls_pacote_proc_princ.nr_seq_pacote%type, cd_area_procedimento_p pls_pacote_proc_princ.cd_area_procedimento%type, cd_especialidade_p pls_pacote_proc_princ.cd_especialidade%type, cd_grupo_proc_p pls_pacote_proc_princ.cd_grupo_proc%type, nr_seq_grupo_servico_p pls_pacote_proc_princ.nr_seq_grupo_servico%type, cd_procedimento_p pls_pacote_proc_princ.cd_procedimento%type, ie_origem_proced_p pls_pacote_proc_princ.ie_origem_proced%type, bind_dados_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Levanta o sql para buscar os procedimentos principais, conforme a regra

	Os filtros relacionados a estrutura do procedimento, serao criados seguindo uma hierarquia, para evitar sql desnecessario.
	
	Os demais filtros irao atuar em conjunto com os filtros de estrutura	
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_retorno_w	varchar(32000) := '';


BEGIN

ds_retorno_w	:= ds_retorno_w	||	'select	b.cd_procedimento, ' || pls_util_pck.enter_w ||
					'	b.ie_origem_proced, ' || pls_util_pck.enter_w ||
					'	t.nr_seq_conta ' || pls_util_pck.enter_w ||
					'from (	select	max(a.nr_seq_conta_proc) nr_seq_conta_proc, a.nr_seq_conta ' || pls_util_pck.enter_w ||
					'	from	sip_nv_dados	a ' || pls_util_pck.enter_w ||
					'	where	exists(	select	x.nr_seq_conta  ' || pls_util_pck.enter_w ||
					'			from	sip_nv_dados_pct_v	x ' || pls_util_pck.enter_w ||
					'			where	x.nr_seq_lote_sip	= :nr_seq_lote_sip_p ' || pls_util_pck.enter_w ||
					'			and	x.nr_seq_pacote		= :nr_seq_pacote_p ' || pls_util_pck.enter_w ||
					'			and	x.nr_seq_conta		= a.nr_seq_conta ' || pls_util_pck.enter_w ||
					'			and	x.cd_procedimento_pct	is null ' || pls_util_pck.enter_w ||
					'			and	x.qt_itens_aberto	= 0 ) ' || pls_util_pck.enter_w;
bind_dados_p := sql_pck.bind_variable(':nr_seq_lote_sip_p', nr_seq_lote_sip_p, bind_dados_p);
bind_dados_p := sql_pck.bind_variable(':nr_seq_pacote_p', nr_seq_pacote_p, bind_dados_p);

-- Primeiro verifica se a regra e por procedimento

if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '')	then

	ds_retorno_w	:= ds_retorno_w	||	'	and	exists (	select	1 ' || pls_util_pck.enter_w ||
						'				from	estrutura_procedimento_v	x ' || pls_util_pck.enter_w || 
						'				where	x.cd_procedimento		= :cd_procedimento_p ' || pls_util_pck.enter_w || 
						'				and	x.ie_origem_proced		= :ie_origem_proced_p ' || pls_util_pck.enter_w || 
						'				and	x.cd_procedimento		= a.cd_procedimento ' || pls_util_pck.enter_w || 
						'				and	x.ie_origem_proced		= a.ie_origem_proced ) ' || pls_util_pck.enter_w;
						
	bind_dados_p := sql_pck.bind_variable(':cd_procedimento_p', cd_procedimento_p, bind_dados_p);
	bind_dados_p := sql_pck.bind_variable(':ie_origem_proced_p', ie_origem_proced_p, bind_dados_p);

-- Grupo do procedimento

elsif (cd_grupo_proc_p IS NOT NULL AND cd_grupo_proc_p::text <> '') then

	ds_retorno_w	:= ds_retorno_w	||	'	and	exists (	select	1 ' || pls_util_pck.enter_w ||
						'				from	estrutura_procedimento_v	x ' || pls_util_pck.enter_w || 
						'				where	x.cd_grupo_proc			= :cd_grupo_proc_p ' || pls_util_pck.enter_w || 
						'				and	x.cd_procedimento		= a.cd_procedimento ' || pls_util_pck.enter_w || 
						'				and	x.ie_origem_proced		= a.ie_origem_proced ) ' || pls_util_pck.enter_w;
						
	bind_dados_p := sql_pck.bind_variable(':cd_grupo_proc_p', cd_grupo_proc_p, bind_dados_p);

-- Especialidade	

elsif (cd_especialidade_p IS NOT NULL AND cd_especialidade_p::text <> '') then

	ds_retorno_w	:= ds_retorno_w	||	'	and	exists (	select	1 ' || pls_util_pck.enter_w ||
						'				from	estrutura_procedimento_v	x ' || pls_util_pck.enter_w || 
						'				where	x.cd_especialidade		= :cd_especialidade_p ' || pls_util_pck.enter_w || 
						'				and	x.cd_procedimento		= a.cd_procedimento ' || pls_util_pck.enter_w || 
						'				and	x.ie_origem_proced		= a.ie_origem_proced ) ' || pls_util_pck.enter_w;
						
	bind_dados_p := sql_pck.bind_variable(':cd_especialidade_p', cd_especialidade_p, bind_dados_p);
	
-- Area

elsif (cd_area_procedimento_p IS NOT NULL AND cd_area_procedimento_p::text <> '') then

	ds_retorno_w	:= ds_retorno_w	||	'	and	exists (	select	1 ' || pls_util_pck.enter_w ||
						'				from	estrutura_procedimento_v	x ' || pls_util_pck.enter_w || 
						'				where	x.cd_area_procedimento		= :cd_area_procedimento_p ' || pls_util_pck.enter_w || 
						'				and	x.cd_procedimento		= a.cd_procedimento ' || pls_util_pck.enter_w || 
						'				and	x.ie_origem_proced		= a.ie_origem_proced ) ' || pls_util_pck.enter_w;
						
	bind_dados_p := sql_pck.bind_variable(':cd_area_procedimento_p', cd_area_procedimento_p, bind_dados_p);
end if;


-- Filtros que ficam fora da hierarquia estrutura


-- Grupo de servico

if (nr_seq_grupo_servico_p IS NOT NULL AND nr_seq_grupo_servico_p::text <> '') then

	ds_retorno_w	:= ds_retorno_w	||	'	and	exists (	select	1 ' || pls_util_pck.enter_w ||
						'				from	pls_grupo_servico_tm	tm ' || pls_util_pck.enter_w ||
						'				where	tm.cd_procedimento	= a.cd_procedimento ' || pls_util_pck.enter_w ||
						'				and	tm.ie_origem_proced	= a.ie_origem_proced ' || pls_util_pck.enter_w ||
						'				and	tm.nr_seq_grupo_servico	= :nr_seq_grupo_servico_p ) '|| pls_util_pck.enter_w;
						
	bind_dados_p := sql_pck.bind_variable(':nr_seq_grupo_servico_p', nr_seq_grupo_servico_p, bind_dados_p);
end if;


 ds_retorno_w	:= ds_retorno_w ||	' group by a.nr_seq_conta )	t, ' || pls_util_pck.enter_w ||
					'sip_nv_dados	b ' || pls_util_pck.enter_w ||
					'where	b.nr_seq_conta_proc	= t.nr_seq_conta_proc ' || pls_util_pck.enter_w ||
					'and	b.nr_seq_conta		= t.nr_seq_conta ' || pls_util_pck.enter_w ||
					'and	b.nr_seq_lote_sip	= :nr_seq_lote_sip_p ' || pls_util_pck.enter_w;

bind_dados_p := sql_pck.bind_variable(':nr_seq_lote_sip_p', nr_seq_lote_sip_p, bind_dados_p);

 
return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_sip_pck.gera_sql_proc_princ_regra_pct ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, nr_seq_pacote_p pls_pacote_proc_princ.nr_seq_pacote%type, cd_area_procedimento_p pls_pacote_proc_princ.cd_area_procedimento%type, cd_especialidade_p pls_pacote_proc_princ.cd_especialidade%type, cd_grupo_proc_p pls_pacote_proc_princ.cd_grupo_proc%type, nr_seq_grupo_servico_p pls_pacote_proc_princ.nr_seq_grupo_servico%type, cd_procedimento_p pls_pacote_proc_princ.cd_procedimento%type, ie_origem_proced_p pls_pacote_proc_princ.ie_origem_proced%type, bind_dados_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
