-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sip_pck.sip_nv_alimenta_dados_finais ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE


tb_nr_seq_item_assist_w		pls_util_cta_pck.t_number_table;
tb_ie_tipo_contratacao_w	pls_util_cta_pck.t_varchar2_table_2;
tb_ie_segmentacao_sip_w		pls_util_cta_pck.t_number_table;
tb_sg_uf_w			pls_util_cta_pck.t_varchar2_table_2;
tb_dt_atendimento_w		pls_util_cta_pck.t_date_table;


ie_tipo_geracao_w	varchar(10);

c01 CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type,
		ie_tipo_geracao_pc	text) FOR
	SELECT	distinct
		b.nr_seq_item_assist,
		a.ie_tipo_contratacao,
		a.ie_segmentacao_sip,
		CASE WHEN ie_tipo_geracao_pc='por_uf' THEN  a.sg_uf  ELSE 'NC' END  sg_uf,
		a.dt_atendimento dt_ocorrencia
	from 	sip_nv_dados a,
		sip_nv_regra_vinc_it b
	where	a.nr_seq_lote_sip = nr_seq_lote_pc
	and	b.nr_seq_sip_nv_dados = a.nr_sequencia;


BEGIN
	-- obter o tipo de geracao do lote, se mais de 50.000 vidas sera geraod por uf

	ie_tipo_geracao_w := pls_sip_pck.obter_tipo_geracao_lote(nr_seq_lote_p);
	
	-- alimenta o ie_segmentacao_sip

	CALL pls_sip_pck.sip_nv_alimenta_segmentacao(nr_seq_lote_p, nm_usuario_p);
	
	-- tabela temporaria que armazena todas as datas de atendimento que existem no lote do SIP

	EXECUTE 'truncate table w_sip_dt_atendimento';
	
	-- insere todos os dados existentes no lote do SIP na tabela W_SIP_DT_ATENDIMENTO

	-- esses dados sao usados na procedure sip_nv_totaliza_dados_regra para contabilizacao dos totais dos dados

	-- foi criada esta estrutura por motivos de performance

	open c01(nr_seq_lote_p, ie_tipo_geracao_w);
	loop
		tb_nr_seq_item_assist_w.delete;
		tb_ie_tipo_contratacao_w.delete;
		tb_ie_segmentacao_sip_w.delete;
		tb_sg_uf_w.delete;
		tb_dt_atendimento_w.delete;
		
		fetch c01 bulk collect into 	tb_nr_seq_item_assist_w, tb_ie_tipo_contratacao_w,
						tb_ie_segmentacao_sip_w, tb_sg_uf_w,
						tb_dt_atendimento_w
		limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;
		
		exit when tb_dt_atendimento_w.count = 0;
		
		forall i in tb_dt_atendimento_w.first .. tb_dt_atendimento_w.last
			insert	into w_sip_dt_atendimento(
				nr_seq_item_assist,
				ie_tipo_contratacao,
				ie_segmentacao_sip,
				sg_uf,
				dt_atendimento
			) values (
				tb_nr_seq_item_assist_w(i),
				coalesce(tb_ie_tipo_contratacao_w(i), 'I'),
				coalesce(tb_ie_segmentacao_sip_w(i), 1),
				tb_sg_uf_w(i),
				tb_dt_atendimento_w(i)
			);
		commit;
	end loop;
	close c01;
	
	-- e responsavel por selecionar os dados que foram "casados" com as regras e fazer a contagem de eventos e valor da despesa

	CALL pls_sip_pck.sip_nv_totaliza_dados_regra(null, ie_tipo_geracao_w, nr_seq_lote_p, nm_usuario_p);
	-- faz a soma dos itens que nao possuem regras

	CALL pls_sip_pck.executa_soma_itens_sem_regra(nr_seq_lote_p, nm_usuario_p);
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.sip_nv_alimenta_dados_finais ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;
