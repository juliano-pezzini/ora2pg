-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sip_pck.gerar_carencia_item_assist ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Correlaciona as carencias incidentes do lote SIP, com os itens assistenciais.
	
	E levantado os itens assistenciais que devem ter sua exposicao calculada.
	Para cada item, existem uma ou mais regra de exposicao, que devem ser consideradas.
	
	Para cada regra de exposicao, sera levantado uma query que vai cruzar as informacoes
	com as carencias levantadas, que devem ser persistidas.
	
	E necessario varrer todas as regras de exposicao, ao inves de parar  o processo do item
	quando encontrar algum resultado, pois as regras podem ser diferentes, e cada uma 
	ser considerada em carencias diferentes,
	
	Nao deve-se repetir a composicao item + carencia.
		
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


-- Cursor com as carencias

ds_sql_cursor_w		varchar(32000);
dados_bind_w		sql_pck.t_dado_bind;
cur_carencia_w		sql_pck.t_cursor;

-- tabelas virtuais

tb_nr_seq_w_exp_carencia_w	pls_util_cta_pck.t_number_table;

-- Itens assistenciais que precisam calcular o exposto

C01 CURSOR(nr_seq_lote_pc	pls_lote_sip.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_item_assist,
		b.nr_sequencia nr_seq_item_exp_regra,
		b.cd_area_procedimento,
		b.cd_especialidade,
		b.cd_grupo_proc,
		b.nr_seq_grupo_servico,
		b.cd_procedimento,
		b.ie_origem_proced
	from	sip_item_assistencial		a,
		sip_item_exposicao_regra	b
	where	b.nr_seq_item_assist	= a.nr_sequencia
	and	a.ie_benef_carencia = 'S'
	and	exists (	SELECT	1
				from	sip_lote_item_assistencial x
				where	x.nr_seq_lote = nr_seq_lote_pc
				and	x.nr_seq_item_sip = a.nr_sequencia)
	order by
		a.nr_sequencia, b.nr_sequencia;


BEGIN

-- Limpa a tabela

CALL pls_sip_pck.desfazer_carencia_item_assist(nr_seq_lote_p);



-- Abre as regras dos itens assistenciais que precisam ser calculadas

for r_c01_w in c01(nr_seq_lote_p) loop

	-- Limpa as informacoes a cada iteracao

	dados_bind_w.delete;
	if (cur_carencia_w%isopen) then
	
		close cur_carencia_w;
	end if;
	
	-- busca o sql conforme regra

	dados_bind_w := pls_sip_pck.gera_sql_car_item_assist(	r_c01_w.cd_area_procedimento, r_c01_w.cd_especialidade, r_c01_w.cd_grupo_proc, r_c01_w.nr_seq_grupo_servico, r_c01_w.cd_procedimento, r_c01_w.ie_origem_proced, r_c01_w.nr_seq_item_assist, nr_seq_lote_p, dados_bind_w);
							
	dados_bind_w := sql_pck.executa_sql_cursor(ds_sql_cursor_w, dados_bind_w);
	-- navega pelas carencias levantadas

	loop
	fetch cur_carencia_w bulk collect into tb_nr_seq_w_exp_carencia_w limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;
	exit when tb_nr_seq_w_exp_carencia_w.count = 0;
	
		-- Grava na tabela temporaria

		tb_nr_seq_w_exp_carencia_w := pls_sip_pck.grava_carencia_item_assist(tb_nr_seq_w_exp_carencia_w, r_c01_w.nr_seq_item_assist, r_c01_w.nr_seq_item_exp_regra, nr_seq_lote_p, nm_usuario_p, 'S', 'S');
	end loop; --fim carencias

	-- ao sair do loop do cursor, fecha ele caso esteja aberto.

	-- e uma repeticao do codigo que tem acima, mas precisa pois quando o loop de regra chegar ao fim

	-- o cursor ficara aberto.

	if (cur_carencia_w%isopen) then
	
		close cur_carencia_w;
	end if;
end loop; -- fim regras itens assistenciais

-- atualiza as estatisticas da temporaria

CALL CALL pls_sip_pck.atualiza_estatistica('W_SIP_CAR_ITEM_ASSIST',100);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.gerar_carencia_item_assist ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
