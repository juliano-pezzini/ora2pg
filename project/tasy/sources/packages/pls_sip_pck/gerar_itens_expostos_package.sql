-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



-- Gera os itens que e obrigarorio o envio dos expostos e nao contem eventos informados.



CREATE OR REPLACE PROCEDURE pls_sip_pck.gerar_itens_expostos ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_sequencia_w	sip_lote_item_assistencial.nr_sequencia%type;
-- Cursor utilizado para buscar os itens que faltam ser gerados para cada quadro assistencial.

-- Para cada quadro e ncessario que todos os itens assistenciais "pais" sejam gerados, por que e ncessario que 

-- as informacoes de expostos sejam iguais para todos estes.

-- Os parametos cd_X_pc referem-se aos itens que devem ter informacao caso o outro seja gerado.

c_mundos CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type,
			cd_1_pc			text,
			cd_2_pc			text,
			cd_3_pc			text,
			cd_4_pc			text) FOR
	SELECT	*
	from	(SELECT	x.nr_seq_item_sip nr_seq_item_assist,
			x.ie_tipo_contratacao,
			x.sg_uf,
			x.cd_classificacao_sip,
			x.ie_segmentacao_sip,
			x.dt_ocorrencia,
			(select	count(1)
			from	sip_lote_item_assistencial y
			where 	y.nr_seq_lote = x.nr_seq_lote
			and	y.cd_classificacao_sip = cd_1_pc
			and	y.sg_uf = x.sg_uf
			and	y.ie_segmentacao_sip = x.ie_segmentacao_sip
			and	y.ie_tipo_contratacao = x.ie_tipo_contratacao
			and	y.dt_ocorrencia = x.dt_ocorrencia) qtde_a,
			(select	count(1)
			from	sip_lote_item_assistencial y
			where	y.nr_seq_lote = x.nr_seq_lote
			and	y.cd_classificacao_sip = cd_2_pc
			and	y.sg_uf = x.sg_uf
			and	y.ie_segmentacao_sip = x.ie_segmentacao_sip
			and	y.ie_tipo_contratacao = x.ie_tipo_contratacao
			and	y.dt_ocorrencia = x.dt_ocorrencia) qtde_b,
			(select	count(1)
			from	sip_lote_item_assistencial y
			where	y.nr_seq_lote = x.nr_seq_lote
			and	y.cd_classificacao_sip = cd_3_pc
			and	y.ie_segmentacao_sip = x.ie_segmentacao_sip
			and	y.ie_tipo_contratacao = x.ie_tipo_contratacao
			and	y.sg_uf = x.sg_uf
			and	y.dt_ocorrencia = x.dt_ocorrencia) qtde_c,
			(select count(1)
			from	sip_lote_item_assistencial y
			where	y.nr_seq_lote = x.nr_seq_lote
			and	y.cd_classificacao_sip = cd_4_pc
			and	y.sg_uf = x.sg_uf
			and	y.ie_segmentacao_sip = x.ie_segmentacao_sip
			and	y.ie_tipo_contratacao = x.ie_tipo_contratacao
			and	y.dt_ocorrencia = x.dt_ocorrencia) qtde_d
		from	sip_lote_item_assistencial x
		where	x.nr_seq_lote = nr_seq_lote_pc
		and	x.cd_classificacao_sip in (cd_1_pc, cd_2_pc, cd_3_pc, cd_4_pc)
		) alias10 
	where	qtde_a = 0
	or	qtde_b = 0 
	or	qtde_c = 0
	or	qtde_d = 0;

-- Identifica os itens e os quadros assistenciais que devem ser gerados.

-- Verificando se o pai tiver gerado o filho tambem deve ter para calcular os expostos iguais nos dois.

cs_gerar_itens CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type) FOR
	SELECT  distinct
		a.ie_tipo_contratacao,
		a.sg_uf,
		c.nr_sequencia nr_seq_item_assist,
		a.ie_segmentacao_sip,
		a.dt_ocorrencia
	from	sip_lote_item_assistencial  a,
		sip_item_assistencial       b,
		sip_item_assistencial       c
	where	a.nr_seq_lote		= nr_seq_lote_pc
	and  	b.nr_sequencia		= a.nr_seq_item_sip
	and  	b.ie_benef_carencia	= 'S'
	and  	c.nr_seq_superior	= b.nr_sequencia
	and  	c.ie_benef_carencia	= 'S'
	and	not exists (	SELECT  1
				from	sip_lote_item_assistencial  x
				where	x.nr_seq_lote		= a.nr_seq_lote
				and	x.nr_seq_item_sip	= c.nr_sequencia
				and	x.sg_uf			= a.sg_uf
				and	x.ie_segmentacao_sip	= a.ie_segmentacao_sip
				and	x.ie_tipo_contratacao	= a.ie_tipo_contratacao
				and	x.dt_ocorrencia		= a.dt_ocorrencia);
BEGIN

-- Varrer os itens e gerar para o mundo ambulatorial

-- Tem que gerar para:

-- A - Consultas Medicas

-- B - Outros Antendimentos Ambulatoriais

-- C - Exames

-- D - Terapias

for	rw_mundos_w in c_mundos(nr_seq_lote_p, 'A', 'B', 'C', 'D') loop
	
	-- Se nao tiver gerado para o A - Consultas Medicas

	if (rw_mundos_w.qtde_a = 0) then
		
		-- Inserir registro em A. 

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(1, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;

	--  Se nao tiver gerado para o B - Outros Antendimentos Ambulatoriais

	if (rw_mundos_w.qtde_b = 0) then
	
		-- Inserir registro em B. 

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(29, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;

	--  Se nao tiver gerado para o C - Exames

	if (rw_mundos_w.qtde_c = 0) then
		
		-- Inserir registro em C. 

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(35, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;

	--  Se nao tiver gerado para o D - Terapias

	if (rw_mundos_w.qtde_d = 0) then
		
		-- Inserir registro em D. 

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(57, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
	end if;
end loop;

-- Varrer os itens e gerar para o mundo de internacoes

-- Tem que gerar para:

-- E - Internacoes

-- F - Causas selecionadas de internacao

-- G - Nascido Vivo

-- H - Outros Atendimento Ambulatoriais

for	rw_mundos_w in c_mundos(nr_seq_lote_p, 'E', 'F', 'G', 'H') loop

	-- Se nao tiver gerado para o E - Internacoes

	if (rw_mundos_w.qtde_a = 0) then
		
		--  Se nao tiver gerado para o E - Internacoes

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(64, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;

	-- Se nao tiver gerado para o F - Causas selecionadas de internacao

	if (rw_mundos_w.qtde_b = 0) then
		
		--  Se nao tiver gerado para o F - Causas selecionadas de internacao

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(88, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;
	
	-- Se nao tiver gerado para o G - Nascido Vivo

	if (rw_mundos_w.qtde_c = 0) then
		
		--  Se nao tiver gerado para o G - Nascido Vivo

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(108, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
			
	end if;
		
	-- Se nao tiver gerado para o H - Outros Atendimento Ambulatoriais

	if (rw_mundos_w.qtde_d = 0) then
	
		--  Se nao tiver gerado para o H - Outros Atendimento Ambulatoriais

		nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(109, nr_seq_lote_p, rw_mundos_w.sg_uf, rw_mundos_w.ie_tipo_contratacao, rw_mundos_w.ie_segmentacao_sip, rw_mundos_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
	end if;
end loop;

-- Varrer os itens e gerar as estruturas.

-- Sempre que gerar num pai gera no filho tambem.

for	rw_itens_w in cs_gerar_itens(nr_seq_lote_p) loop

	nr_sequencia_w := pls_sip_pck.sip_nv_insere_lote(rw_itens_w.nr_seq_item_assist, nr_seq_lote_p, rw_itens_w.sg_uf, rw_itens_w.ie_tipo_contratacao, rw_itens_w.ie_segmentacao_sip, rw_itens_w.dt_ocorrencia, 0, 0, nm_usuario_p, nr_sequencia_w);
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.gerar_itens_expostos ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
