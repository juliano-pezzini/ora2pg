-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sip_pck.aplicar_indice_exp_sip_per ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Rotina responsavel por atualizar o indice de exposicao no lote SIP fora do periodo SIP

	Conforme determinacao da ANS, os itens assitenciais que tem a data de ocorrencia fora do periodo do lote atual
	devem buscar o exposto em um lote similar. 
	Deve-se considerar como "fora do periodo" os itens com data de ocorrencia anterior ao inicio do lote atual.
	
	Neste caso e feito uma busca para a data, UF, contratacao, segmentacao e classificacao correspondente ao item atual.
	
	Se nao for encontrado um item assistencial compativel, sera mantido o valor ja existente no item

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
	

dt_periodo_inicial_w		pls_lote_sip.dt_periodo_inicial%type;

tb_nr_seq_item_assist_w		dbms_sql.number_table;
tb_qt_beneficiario_original_w	dbms_sql.number_table;
tb_qt_beneficiario_novo_w	dbms_sql.number_table;

-- carrega os itens com data fora do lote, e tenta achar sua contraparte

c01 CURSOR(	nr_seq_lote_sip_pc	pls_lote_sip.nr_sequencia%type,
		dt_periodo_inicial_pc	pls_lote_sip.dt_periodo_inicial%type) FOR
	SELECT	a.nr_sequencia,
		a.qt_beneficiario qt_beneficiario_original,
		(	SELECT	max(x.qt_beneficiario)
			from	sip_lote_item_assistencial	x
			where	x.cd_classificacao_sip		= a.cd_classificacao_sip
			-- atualmente nao e gravada a hora, permitindo fazer a comparacao sem trunc

			and	x.dt_ocorrencia			= a.dt_ocorrencia
			and	x.ie_segmentacao_sip		= a.ie_segmentacao_sip
			and	x.ie_tipo_contratacao		= a.ie_tipo_contratacao
			and	x.nr_seq_item_sip		= a.nr_seq_item_sip
			and	x.nr_sequencia			!= a.nr_sequencia
			and	x.nr_seq_lote			!= nr_seq_lote_sip_pc) qt_beneficiario_novo
	from	sip_lote_item_assistencial	a
	where	a.nr_seq_lote			= nr_seq_lote_sip_pc
	and	a.dt_ocorrencia			< trunc(dt_periodo_inicial_pc, 'dd');

BEGIN

-- carrega o periodo

select	max(dt_periodo_inicial)
into STRICT	dt_periodo_inicial_w
from	pls_lote_sip
where	nr_sequencia = nr_seq_lote_sip_p;

-- abre o cursor carregando os itens a serem atualizados

open c01(nr_seq_lote_sip_p, dt_periodo_inicial_w);
loop
fetch c01 bulk collect into	tb_nr_seq_item_assist_w,
				tb_qt_beneficiario_original_w,
				tb_qt_beneficiario_novo_w limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;
exit when tb_nr_seq_item_assist_w.count = 0;

	forall i in tb_nr_seq_item_assist_w.first..tb_nr_seq_item_assist_w.last
		update	sip_lote_item_assistencial
		set	qt_beneficiario		= CASE WHEN coalesce(tb_qt_beneficiario_novo_w(i), 0)=0 THEN  tb_qt_beneficiario_original_w(i)  ELSE tb_qt_beneficiario_novo_w(i) END
		where	nr_sequencia		= tb_nr_seq_item_assist_w(i);
		
	
	commit;

	tb_nr_seq_item_assist_w.delete;
	tb_qt_beneficiario_original_w.delete;
	tb_qt_beneficiario_novo_w.delete;

end loop;

if (c01%isopen) then

	close c01;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.aplicar_indice_exp_sip_per ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type) FROM PUBLIC;
