-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Monta as resticoes para o comando que sera executado nesta regra.



CREATE OR REPLACE FUNCTION pls_sip_pck.montar_restricao_regra ( dados_regra_p pls_sip_pck.c_regra_item, ie_busca_guia_ref_p boolean, ie_tipo_atend_p sip_nv_dados.ie_tipo_atendimento%type) RETURNS DADOS_SQL_REGRA AS $body$
DECLARE

					
dados_sql_regra_w	dados_sql_regra;


BEGIN
dados_sql_regra_w.regra_sql		:= '';

-- obtem as restricoes do tipo o que pode e o que nao pode

-- fazendo os tratamentos especificos para internacao

dados_sql_regra_w.dados_binds := pls_sip_pck.obter_restr_pode_npode(	dados_regra_p, ie_busca_guia_ref_p, dados_sql_regra_w.dados_binds);

-- tratamento para tipo de atendimento de cada item assistencial, quando for atendimento odontologico por enquanto nao sera filtrado pelo tipo de atendimento.

if ((ie_tipo_atend_p IS NOT NULL AND ie_tipo_atend_p::text <> '') and ie_tipo_atend_p <> 'O') then
	
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_tipo_atendimento = :ie_tipo_atend ';
	
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_tipo_atend', ie_tipo_atend_p, dados_sql_regra_w.dados_binds);
end if;

-- Montados os acessos e as regras de negocio agora montamos as restricoes de acordo com a regra. Sempre deve ser informado mesmos binds na mesma ordem

-- portanto tomar cuidado para atribuir valores inimaginaveis ao campo da regra caso ele esteja nulo e montar a restricao com o bind de forma posicional.

-- Tipo de guia.

if (dados_regra_p.ie_tipo_guia IS NOT NULL AND dados_regra_p.ie_tipo_guia::text <> '') then
	
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_tipo_guia = :ie_tipo_guia ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_tipo_guia', dados_regra_p.ie_tipo_guia, dados_sql_regra_w.dados_binds);
end if;

-- Prestador executor.

if (dados_regra_p.nr_seq_prestador_exec IS NOT NULL AND dados_regra_p.nr_seq_prestador_exec::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.nr_seq_prestador_exec = :nr_seq_prestador_exec ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_prestador_exec', dados_regra_p.nr_seq_prestador_exec, dados_sql_regra_w.dados_binds);
end if;

-- quando se fala em CBO temos dois caminhos: pela sequencia e pelo codigo do CBO

if (dados_regra_p.nr_seq_cbo_saude IS NOT NULL AND dados_regra_p.nr_seq_cbo_saude::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.nr_seq_cbo_saude = :nr_seq_cbo_saude ';
		
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_cbo_saude', dados_regra_p.nr_seq_cbo_saude, dados_sql_regra_w.dados_binds);
else
	-- se tem pelo codigo padrao do cbo

	-- Para obter o CBO pelo codigo, deve ser buscado todos os CBOs que tenham o mesmo codigo, pois estes pertencem a mesma especialidade medica, segundo o padrao TISS, que pode ser encontrado

	-- na Tabela de Dominios, disponibilizada pela ANS no portal. Para  versao 2.02.03 do TISS o link desta tabela e: 

	-- http://www.ans.gov.br/images/stories/Plano_de_saude_e_Operadoras/tiss/Padrao_tiss/20100525_tabelas_de_dominio_tiss.pdf

	-- Portanto codigos iguais devem ser vinculados ao mesmo item assistencial, e nao havera problemas de contas em itens errados.

	if (dados_regra_p.cd_cbo IS NOT NULL AND dados_regra_p.cd_cbo::text <> '') then
					
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
						' and a.nr_seq_cbo_saude in (	select z.nr_sequencia ' || pls_util_pck.enter_w ||
						' from cbo_saude z ' || pls_util_pck.enter_w ||
						' where z.cd_cbo = :cd_cbo_saude ) ';
							
		dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_cbo_saude', dados_regra_p.cd_cbo, dados_sql_regra_w.dados_binds);
	end if;
end if;

-- CID doenca.

if (dados_regra_p.cd_doenca_cid IS NOT NULL AND dados_regra_p.cd_doenca_cid::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.cd_doenca_dig = :cd_doenca_dig ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_doenca_dig', dados_regra_p.cd_doenca_cid, dados_sql_regra_w.dados_binds);
end if;

-- Categoria do CID doenca

if (dados_regra_p.cd_categoria_cid IS NOT NULL AND dados_regra_p.cd_categoria_cid::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.cd_categoria_cid = :cd_categoria_cid';
	
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_categoria_cid', dados_regra_p.cd_categoria_cid, dados_sql_regra_w.dados_binds);
end if;

--Grupo CID

--Estes grupos sao gerados na funcao OPS - Regras e Criterios de precos > Cadastros,

if (dados_regra_p.nr_seq_grupo_doenca IS NOT NULL AND dados_regra_p.nr_seq_grupo_doenca::text <> '') then
					
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and exists 	(select	1'|| pls_util_pck.enter_w ||
					'		 from 	pls_preco_grupo_doenca xz, '|| pls_util_pck.enter_w ||
					'			pls_preco_doenca yu' || pls_util_pck.enter_w ||
					'		 where 	xz.nr_sequencia = :nr_seq_grupo_doenca' || pls_util_pck.enter_w ||
					'		 and 	xz.ie_situacao = ''A''' || pls_util_pck.enter_w ||
					'		 and	yu.nr_seq_grupo = xz.nr_sequencia' || pls_util_pck.enter_w ||
					'		 and	yu.cd_doenca_cid = a.cd_doenca_dig)';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_grupo_doenca', dados_regra_p.nr_seq_grupo_doenca, dados_sql_regra_w.dados_binds);
end if;

-- Tipo de atendimento

if (dados_regra_p.nr_seq_tipo_atendimento IS NOT NULL AND dados_regra_p.nr_seq_tipo_atendimento::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.nr_seq_tipo_atendimento = :nr_seq_tipo_atendimento ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_tipo_atendimento', dados_regra_p.nr_seq_tipo_atendimento, dados_sql_regra_w.dados_binds);
end if;

-- Regime atendimento

if (dados_regra_p.ie_regime_atendimento IS NOT NULL AND dados_regra_p.ie_regime_atendimento::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_regime_atendimento = :ie_regime_atendimento ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_regime_atendimento', dados_regra_p.ie_regime_atendimento, dados_sql_regra_w.dados_binds);
end if;

-- Saude ocupacional

if (dados_regra_p.ie_saude_ocupacional IS NOT NULL AND dados_regra_p.ie_saude_ocupacional::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_saude_ocupacional = :ie_saude_ocupacional ';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_saude_ocupacional', dados_regra_p.ie_saude_ocupacional, dados_sql_regra_w.dados_binds);
end if;

-- Tipo de internacao.

if (dados_regra_p.nr_seq_clinica IS NOT NULL AND dados_regra_p.nr_seq_clinica::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.nr_seq_clinica = :nr_seq_clinica';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_clinica', dados_regra_p.nr_seq_clinica, dados_sql_regra_w.dados_binds);
end if;

-- Regime de internacao.

if (dados_regra_p.ie_regime_internacao IS NOT NULL AND dados_regra_p.ie_regime_internacao::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_regime_internacao = :ie_regime_internacao';
	
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_regime_internacao', dados_regra_p.ie_regime_internacao, dados_sql_regra_w.dados_binds);
end if;

-- Sexo do beneficiario

if (dados_regra_p.ie_sexo IS NOT NULL AND dados_regra_p.ie_sexo::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_sexo = :ie_sexo';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_sexo', dados_regra_p.ie_sexo, dados_sql_regra_w.dados_binds);
end if;

-- Procedimento

-- se for filtrado o procedimento, filtra ele mesmo ignorando qualquer coisa que foi informada da sua estrutura

if (dados_regra_p.cd_procedimento IS NOT NULL AND dados_regra_p.cd_procedimento::text <> '') then
	
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.ie_origem_proced = :ie_origem_proced and a.cd_procedimento = :cd_procedimento ';
	
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':ie_origem_proced', dados_regra_p.ie_origem_proced, dados_sql_regra_w.dados_binds);
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_procedimento', dados_regra_p.cd_procedimento, dados_sql_regra_w.dados_binds);
	
elsif (dados_regra_p.nr_seq_grupo_servico IS NOT NULL AND dados_regra_p.nr_seq_grupo_servico::text <> '') then

	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and exists (	select	1' || pls_util_pck.enter_w ||
					'		from	pls_grupo_servico_tm gpxu' || pls_util_pck.enter_w ||
					'		where	gpxu.nr_seq_grupo_servico = :nr_seq_grupo_servico_pc' || pls_util_pck.enter_w ||
					'		and	gpxu.ie_origem_proced = a.ie_origem_proced' || pls_util_pck.enter_w ||
					'		and 	gpxu.cd_procedimento = a.cd_procedimento)';
					
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':nr_seq_grupo_servico_pc', dados_regra_p.nr_seq_grupo_servico, dados_sql_regra_w.dados_binds);
	
elsif ((dados_regra_p.cd_area_procedimento IS NOT NULL AND dados_regra_p.cd_area_procedimento::text <> '') or
	(dados_regra_p.cd_especialidade IS NOT NULL AND dados_regra_p.cd_especialidade::text <> '') or 
	(dados_regra_p.cd_grupo_proc IS NOT NULL AND dados_regra_p.cd_grupo_proc::text <> '')) then
	
	dados_sql_regra_w.ds_tabela :=	dados_sql_regra_w.ds_tabela || ',' || pls_util_pck.enter_w ||
					'table( pls_grupos_pck.obter_procs_estrutura( 	null,' || pls_util_pck.enter_w ||
					'						null,' || pls_util_pck.enter_w ||
					' 						null,' || pls_util_pck.enter_w ||
					'						:cd_grupo_proc,' || pls_util_pck.enter_w ||
					'						:cd_especialidade,' || pls_util_pck.enter_w || 
					'						:cd_area_procedimento )) proc_regra';
					
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					'and a.ie_origem_proced = proc_regra.ie_origem_proced' || pls_util_pck.enter_w ||
					'and a.cd_procedimento = proc_regra.cd_procedimento';
		
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_grupo_proc', dados_regra_p.cd_grupo_proc, dados_sql_regra_w.dados_binds);
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_especialidade', dados_regra_p.cd_especialidade, dados_sql_regra_w.dados_binds);
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':cd_area_procedimento', dados_regra_p.cd_area_procedimento, dados_sql_regra_w.dados_binds);
end if;

-- Idade do beneficiario.

if ((dados_regra_p.qt_idade_inicial IS NOT NULL AND dados_regra_p.qt_idade_inicial::text <> '') and
	(dados_regra_p.qt_idade_final IS NOT NULL AND dados_regra_p.qt_idade_final::text <> '') and 
	(dados_regra_p.ie_unid_tempo_idade IS NOT NULL AND dados_regra_p.ie_unid_tempo_idade::text <> '')) then
	
	-- se for por ano

	if (dados_regra_p.ie_unid_tempo_idade = 'A') then
	
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w || 
						' and a.qt_idade between :qt_idade_inicial and :qt_idade_final ';
	-- ou mes

	elsif (dados_regra_p.ie_unid_tempo_idade = 'M') then
	
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
						' and a.qt_idade_mes between :qt_idade_inicial and :qt_idade_final';
	-- senao filtra por dia

	else
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
						' and a.qt_idade_dia between :qt_idade_inicial and :qt_idade_final';
	end if;
	
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_idade_inicial', dados_regra_p.qt_idade_inicial, dados_sql_regra_w.dados_binds);
	dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_idade_final', dados_regra_p.qt_idade_final, dados_sql_regra_w.dados_binds);
end if;

-- Contas com nascidos vivos;

if (dados_regra_p.ie_nascido_vivo = 'S') then
	
	dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
					' and a.qt_nasc_vivos_total > 0 ';
end if;

-- Longevidade do atendimento.

-- Por Horas

if (dados_regra_p.ie_unid_tempo_atend = '1') then
	
	-- Se tem as duas informadas faz o between.

	if (dados_regra_p.qt_tempo_atend_inicial IS NOT NULL AND dados_regra_p.qt_tempo_atend_inicial::text <> '' AND dados_regra_p.qt_tempo_atend_final IS NOT NULL AND dados_regra_p.qt_tempo_atend_final::text <> '') then
	
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
				' and a.qt_horas_atendimento between :qt_tempo_atend_inicial and :qt_tempo_atend_final ';
						
		dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_tempo_atend_inicial', dados_regra_p.qt_tempo_atend_inicial, dados_sql_regra_w.dados_binds);
		dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_tempo_atend_final', dados_regra_p.qt_tempo_atend_final, dados_sql_regra_w.dados_binds);
						
	-- Se nao compara uma a uma e monta o bind da outra para nao ter problema no using.

	elsif (dados_regra_p.qt_tempo_atend_inicial IS NOT NULL AND dados_regra_p.qt_tempo_atend_inicial::text <> '') then
	
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
						' and a.qt_horas_atendimento > :qt_tempo_atend_inicial ';
						
		dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_tempo_atend_inicial', dados_regra_p.qt_tempo_atend_inicial, dados_sql_regra_w.dados_binds);
		
	-- Mesma cois para o final

	elsif (dados_regra_p.qt_tempo_atend_final IS NOT NULL AND dados_regra_p.qt_tempo_atend_final::text <> '') then
	
		dados_sql_regra_w.regra_sql :=	dados_sql_regra_w.regra_sql || pls_util_pck.enter_w ||
						' and a.qt_horas_atendimento < :qt_tempo_atend_final ';
						
		dados_sql_regra_w.dados_binds := sql_pck.bind_variable(':qt_tempo_atend_final', dados_regra_p.qt_tempo_atend_final, dados_sql_regra_w.dados_binds);
	end if;
end if;

return dados_sql_regra_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_sip_pck.montar_restricao_regra ( dados_regra_p pls_sip_pck.c_regra_item, ie_busca_guia_ref_p boolean, ie_tipo_atend_p sip_nv_dados.ie_tipo_atendimento%type) FROM PUBLIC;
