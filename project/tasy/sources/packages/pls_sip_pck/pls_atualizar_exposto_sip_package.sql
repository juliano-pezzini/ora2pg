-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





-- Calcula a quantidade de expostos para cada item gerado.

CREATE TYPE tp_benef_exp AS (
	nr_sequencia		dbms_sql.number_table,
	dt_atualizacao		dbms_sql.date_table,
	nm_usuario		dbms_sql.varchar2_table,
	dt_atualizacao_nrec	dbms_sql.date_table,
	nm_usuario_nrec		dbms_sql.varchar2_table,
	nr_seq_segurado		dbms_sql.number_table,
	qt_idade		dbms_sql.number_table,
	ie_segmentacao		dbms_sql.varchar2_table,
	ie_sexo			dbms_sql.varchar2_table,
	dt_ultima_carencia	dbms_sql.date_table,
	ie_situacao		dbms_sql.varchar2_table,
	ie_tipo_contratacao	dbms_sql.varchar2_table,
	nr_seq_contrato		dbms_sql.number_table,
	nr_seq_plano		dbms_sql.number_table,
	dt_contratacao		dbms_sql.date_table,
	dt_rescisao		dbms_sql.date_table,
	qt_carencia_benef	dbms_sql.number_table,
	qt_carencia_contrato	dbms_sql.number_table,
	qt_carencia_produto	dbms_sql.number_table
);


CREATE OR REPLACE PROCEDURE pls_sip_pck.pls_atualizar_exposto_sip ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, ie_sip_p pls_controle_estab.ie_sip%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_periodo_inicial_p pls_lote_sip.dt_periodo_inicial%type default null, dt_periodo_final_p pls_lote_sip.dt_periodo_final%type default null) AS $body$
DECLARE


tb_benef_exp_w			tp_benef_exp;

ds_sql_w			varchar(2000);
ds_filtro_sql_w			varchar(1000);

qt_idade_inicial_w		sip_nv_dados.qt_idade%type;
qt_idade_final_w		sip_nv_dados.qt_idade%type;
ie_sexo_benef_w			sip_nv_dados.ie_sexo%type;
dt_periodo_inicial_w		pls_lote_sip.dt_periodo_inicial%type;
dt_periodo_final_w		pls_lote_sip.dt_periodo_final%type;
qt_benef_ambulatorial_w		sip_lote_item_assistencial.qt_beneficiario%type;
qt_benef_hosp_sem_obs_w		sip_lote_item_assistencial.qt_beneficiario%type;
qt_benef_hospitalar_w		sip_lote_item_assistencial.qt_beneficiario%type;
qt_benef_odonto_w		sip_lote_item_assistencial.qt_beneficiario%type;

ie_utiliza_novo_calculo_w	varchar(1);
ie_novo_sip_w			pls_visible_false.ie_novo_sip%type;

cs_benef_exp CURSOR(	dt_periodo_inicial_pc	pls_lote_sip.dt_periodo_inicial%type,
			dt_periodo_final_pc	pls_lote_sip.dt_periodo_final%type,
			ie_sip_pc		pls_controle_estab.ie_sip%type,
			cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	nextval('w_sip_benef_exposto_seq') nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_segurado,
		qt_idade,
		ie_segmentacao,
		ie_sexo,
		dt_ultima_carencia,
		ie_situacao,
		ie_tipo_contratacao,
		nr_seq_contrato,
		nr_seq_plano,
		dt_contratacao,
		dt_rescisao,
		qt_carencia_benef,
		qt_carencia_contrato,
		qt_carencia_produto
	from	(SELECT	null nr_sequencia,
			clock_timestamp() dt_atualizacao,
			nm_usuario_p nm_usuario,
			clock_timestamp() dt_atualizacao_nrec,
			nm_usuario_p nm_usuario_nrec,
			a.nr_sequencia nr_seq_segurado,
			pls_sip_pck.obter_idade(c.dt_nascimento, dt_periodo_inicial_pc, 'A') qt_idade,
			b.ie_segmentacao ie_segmentacao,
			c.ie_sexo ie_sexo,
			a.dt_ultima_carencia dt_ultima_carencia,
			'A' ie_situacao,
			b.ie_tipo_contratacao ie_tipo_contratacao,
			a.nr_seq_contrato,
			a.nr_seq_plano,
			a.dt_contratacao,
			a.dt_rescisao,
			-- apenas verifica se tem carenca vinculada, para verificar o nivel que devea ser tratado, nao valida mais nenhuma regra

			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_segurado	= a.nr_sequencia),0) qt_carencia_benef,
			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_contrato	= a.nr_seq_contrato),0) qt_carencia_contrato,
			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_plano		= a.nr_seq_plano),0) qt_carencia_produto
		from    pls_segurado    a,
			pessoa_fisica	c,
			pls_plano       b
		where   a.ie_tipo_segurado in ('B','R')
		and     a.dt_contratacao <= dt_periodo_final_pc
		and (a.dt_ultima_carencia <= dt_periodo_final_pc or coalesce(a.dt_ultima_carencia::text, '') = '')
		and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao > dt_periodo_inicial_pc)
		and	c.cd_pessoa_fisica = a.cd_pessoa_fisica
		and	b.nr_sequencia = a.nr_seq_plano
		and	ie_sip_pc = 'N'
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		
union all

		select	null nr_sequencia,
			clock_timestamp() dt_atualizacao,
			nm_usuario_p nm_usuario,
			clock_timestamp() dt_atualizacao_nrec,
			nm_usuario_p nm_usuario_nrec,
			a.nr_sequencia nr_seq_segurado,
			pls_sip_pck.obter_idade(c.dt_nascimento, dt_periodo_inicial_pc, 'A') qt_idade,
			b.ie_segmentacao ie_segmentacao,
			c.ie_sexo ie_sexo,
			a.dt_ultima_carencia dt_ultima_carencia,
			'A' ie_situacao,
			b.ie_tipo_contratacao ie_tipo_contratacao,
			a.nr_seq_contrato,
			a.nr_seq_plano,
			a.dt_contratacao,
			a.dt_rescisao,
			-- apenas verifica se tem carenca vinculada, para verificar o nivel que devea ser tratado, nao valida mais nenhuma regra

			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_segurado	= a.nr_sequencia),0) qt_carencia_benef,
			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_contrato	= a.nr_seq_contrato),0) qt_carencia_contrato,
			coalesce((	select	sum(CASE WHEN x.ie_cpt='N' THEN  1  ELSE 0 END )
				from	pls_carencia		x
				where	x.nr_seq_plano		= a.nr_seq_plano),0) qt_carencia_produto
		from    pls_segurado    a,
			pessoa_fisica	c,
			pls_plano       b
		where   a.ie_tipo_segurado in ('B','R')
		and     a.dt_contratacao <= dt_periodo_final_pc
		and (a.dt_ultima_carencia <= dt_periodo_final_pc or coalesce(a.dt_ultima_carencia::text, '') = '')
		and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao > dt_periodo_inicial_pc)
		and	c.cd_pessoa_fisica = a.cd_pessoa_fisica
		and	b.nr_sequencia = a.nr_seq_plano
		and	ie_sip_pc = 'S'
		and	a.cd_estabelecimento = cd_estabelecimento_pc
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')) alias38;
		
C02 CURSOR(nr_seq_lote_p	pls_lote_sip.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_item_assist,
		a.cd_classificacao cd_classificacao,
		a.ie_hospitalar,
		a.ie_hospitalar_obs,
		a.ie_ambulatorial,
		a.ie_odontologico
	from	sip_item_assistencial a
	where	a.ie_benef_carencia = 'S'
	and	exists (	SELECT	1
				from	sip_lote_item_assistencial x
				where	x.nr_seq_lote = nr_seq_lote_p
				and	x.nr_seq_item_sip = a.nr_sequencia)
	order by
		a.nr_seq_apres;
		
C03 CURSOR(	nr_seq_lote_p		pls_lote_sip.nr_sequencia%type,
		nr_seq_item_assist_p	sip_lote_item_assistencial.nr_seq_item_sip%type) FOR
	SELECT	a.vl_dominio ie_tipo_contratacao_sip
	from	valor_dominio_v	a
	where	a.cd_dominio = 1666
	and	exists (	SELECT	1
				from	sip_lote_item_assistencial	x
				where	x.nr_seq_lote		= nr_seq_lote_p
				and	x.nr_seq_item_sip	= nr_seq_item_assist_p
				and	x.ie_tipo_contratacao	= a.vl_dominio);
	
BEGIN

EXECUTE 'truncate table w_sip_benef_exposto';

if (coalesce(dt_periodo_inicial_p::text, '') = '' or coalesce(dt_periodo_final_p::text, '') = '') then
	select	dt_periodo_inicial,
		dt_periodo_final
	into STRICT	dt_periodo_inicial_w,
		dt_periodo_final_w
	from	pls_lote_sip
	where	nr_sequencia = nr_seq_lote_sip_p;
else
	dt_periodo_inicial_w	:= dt_periodo_inicial_p;
	dt_periodo_final_w	:= dt_periodo_final_p;
end if;
	
--adiconado o nvl no parametro "ie_sip_p", pois,  este processo e chamado pelo delphi e o parametro vinha nulo e nao retornava dados zerando os expostos devio ao truncate acima

open cs_benef_exp(dt_periodo_inicial_w, dt_periodo_final_w, coalesce(ie_sip_p,pls_obter_se_controle_estab('SIP')), cd_estabelecimento_p);
loop

tb_benef_exp_w.nr_sequencia.delete;
tb_benef_exp_w.dt_atualizacao.delete;
tb_benef_exp_w.nm_usuario.delete;
tb_benef_exp_w.dt_atualizacao_nrec.delete;
tb_benef_exp_w.nm_usuario_nrec.delete;
tb_benef_exp_w.qt_idade.delete;
tb_benef_exp_w.ie_sexo.delete;
tb_benef_exp_w.dt_ultima_carencia.delete;
tb_benef_exp_w.ie_situacao.delete;
tb_benef_exp_w.ie_tipo_contratacao.delete;
tb_benef_exp_w.nr_seq_contrato.delete;
tb_benef_exp_w.nr_seq_plano.delete;
tb_benef_exp_w.dt_contratacao.delete;
tb_benef_exp_w.dt_rescisao.delete;



fetch cs_benef_exp bulk collect into	tb_benef_exp_w.nr_sequencia, tb_benef_exp_w.dt_atualizacao, tb_benef_exp_w.nm_usuario,
					tb_benef_exp_w.dt_atualizacao_nrec, tb_benef_exp_w.nm_usuario_nrec, tb_benef_exp_w.nr_seq_segurado,
					tb_benef_exp_w.qt_idade, tb_benef_exp_w.ie_segmentacao, tb_benef_exp_w.ie_sexo,
					tb_benef_exp_w.dt_ultima_carencia, tb_benef_exp_w.ie_situacao, tb_benef_exp_w.ie_tipo_contratacao,
					tb_benef_exp_w.nr_seq_contrato, tb_benef_exp_w.nr_seq_plano, tb_benef_exp_w.dt_contratacao, tb_benef_exp_w.dt_rescisao,
					tb_benef_exp_w.qt_carencia_benef, tb_benef_exp_w.qt_carencia_contrato, tb_benef_exp_w.qt_carencia_produto
					
limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;			
exit when tb_benef_exp_w.nr_sequencia.count = 0;
	forall i in tb_benef_exp_w.nr_sequencia.first..tb_benef_exp_w.nr_sequencia.last
		insert into w_sip_benef_exposto(nr_sequencia, dt_atualizacao, nm_usuario,
			 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
			 qt_idade, ie_segmentacao, ie_sexo,	
			 dt_ultima_carencia, ie_situacao, ie_tipo_contratacao, nr_seq_contrato, nr_seq_plano, dt_contratacao, dt_rescisao, ie_nivel_carencia)
		values	(tb_benef_exp_w.nr_sequencia(i), tb_benef_exp_w.dt_atualizacao(i), tb_benef_exp_w.nm_usuario(i),
		         tb_benef_exp_w.dt_atualizacao_nrec(i), tb_benef_exp_w.nm_usuario_nrec(i), tb_benef_exp_w.nr_seq_segurado(i),
		         tb_benef_exp_w.qt_idade(i), tb_benef_exp_w.ie_segmentacao(i), tb_benef_exp_w.ie_sexo(i),
		         tb_benef_exp_w.dt_ultima_carencia(i), tb_benef_exp_w.ie_situacao(i), tb_benef_exp_w.ie_tipo_contratacao(i),
			 tb_benef_exp_w.nr_seq_contrato(i), tb_benef_exp_w.nr_seq_plano(i), tb_benef_exp_w.dt_contratacao(i), tb_benef_exp_w.dt_rescisao(i), (case when(tb_benef_exp_w.qt_carencia_benef(i) > 0) then 'B' when(tb_benef_exp_w.qt_carencia_contrato(i) > 0) then 'C' when(tb_benef_exp_w.qt_carencia_produto(i) > 0) then 'P' else 'B' end));
	commit;
end loop;
close cs_benef_exp;

-- atualiza as estatisticas da temporaria

CALL CALL pls_sip_pck.atualiza_estatistica('W_SIP_BENEF_EXPOSTO',100);

-- Verifica se e para utiliza o novo calculo do exposto.

ie_utiliza_novo_calculo_w := pls_sip_pck.utilizar_nv_calculo_exposto(cd_estabelecimento_p);

-- Busca da tabela por enquanto, pois essa chamada via desktop nao carrega o param_w

if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then

	select	coalesce(max(ie_novo_sip), 'N')
	into STRICT	ie_novo_sip_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;
else
	
	select	coalesce(max(ie_novo_sip), 'N')
	into STRICT	ie_novo_sip_w
	from	pls_visible_false;
end if;

-- Se for para utilizar o novo calculo

if	(ie_utiliza_novo_calculo_w = 'S' AND ie_novo_sip_w = 'S') then

	-- atualiza a estrutura de servico se necessario

	CALL pls_gerencia_upd_obj_pck.atualizar_objetos(nm_usuario_p, 'PLS_SIP_PCK.GERAR_SIP()', 'PLS_GRUPO_SERVICO_TM');

	-- Por seguranca, exclui os indices de exposicao que porventura estejam gerados no lote

	CALL pls_sip_pck.desfaz_indice_exp_benef(nr_seq_lote_sip_p);
	
	-- Carrega as carencias que podem afetar algum beneficiario dentro do periodo do lote

	CALL pls_sip_pck.gerar_carencia_incidente_exp(nr_seq_lote_sip_p, trunc(dt_periodo_inicial_w, 'dd'), fim_dia(dt_periodo_final_w), nm_usuario_p);

	-- Realiza o cruzamento entre as carencias incidentes com os itens assistenciais. para sabermos que carencias se encaixam na exposicao do item assistencial

	CALL pls_sip_pck.gerar_carencia_item_assist(nr_seq_lote_sip_p, nm_usuario_p);

	-- Gerar os indices de exposicao para os beneficiario contidos no lote do sip

	CALL pls_sip_pck.gera_indice_exp_benef(nr_seq_lote_sip_p, trunc(dt_periodo_inicial_w, 'dd'), fim_dia(dt_periodo_final_w), nm_usuario_p);

	-- Desfaz a eleicao do melhor indice de exposicao, por seguranca, pois so deve existir um indice deste por beneficiario e item assistencial

	CALL pls_sip_pck.desfaz_eleger_ind_exp_benef(nr_seq_lote_sip_p);

	-- Elege o indice apropriado por beneficiario e item assitencial

	CALL pls_sip_pck.elege_indice_exp_benef(nr_seq_lote_sip_p);

	-- Manda o indice de exposicao para o SIP.

	CALL pls_sip_pck.atualizar_indice_exp_sip(nr_seq_lote_sip_p);
	
	-- aplica os indices "retroativos" nos itens necessarios

	CALL pls_sip_pck.aplicar_indice_exp_sip_per(nr_seq_lote_sip_p);
	
	-- Verifica e ajusta a arvore de exposicao

	CALL pls_sip_pck.valida_arvore_exposto(nr_seq_lote_sip_p);

else
-- Se for para realizar o calculo antigo



	-- Itens Assistenciais que devem ser somados os beneficiarios

	for	r_C02_w in C02(nr_seq_lote_sip_p) loop

		ds_sql_w := '	select	sum(qt_benef_amb) qt_benef_amb, sum(qt_benef_hosp_sem_obs) qt_benef_hosp_sem_obs, sum(qt_benef_hosp) qt_benef_hosp, sum(qt_benef_odonto) qt_benef_odonto ' ||
			    '	from	(select	decode(pls_sip_pck.obter_segmentacao_sip(:ie_hospitalar, :ie_hospitalar_obs, :ie_ambulatorial, :ie_odontologico, ie_segmentacao),''1'',1,0) qt_benef_amb, ' ||
			    '			decode(pls_sip_pck.obter_segmentacao_sip(:ie_hospitalar, :ie_hospitalar_obs, :ie_ambulatorial, :ie_odontologico, ie_segmentacao),''2'',1,0) qt_benef_hosp_sem_obs, ' ||
			    '			decode(pls_sip_pck.obter_segmentacao_sip(:ie_hospitalar, :ie_hospitalar_obs, :ie_ambulatorial, :ie_odontologico, ie_segmentacao),''3'',1,0) qt_benef_hosp, ' ||
			    '			decode(pls_sip_pck.obter_segmentacao_sip(:ie_hospitalar, :ie_hospitalar_obs, :ie_ambulatorial, :ie_odontologico, ie_segmentacao),''4'',1,0) qt_benef_odonto ' ||
			    '		from	w_sip_benef_exposto ' ||
			    '		where	ie_tipo_contratacao = :ie_tipo_contratacao_sip ';
		
		ds_filtro_sql_w := '';
		
		ie_sexo_benef_w := null;
		qt_idade_inicial_w := null;
		qt_idade_final_w := null;
		
		if (r_C02_w.cd_classificacao = 'EX4.1') then
			qt_idade_inicial_w	:= 0;
			qt_idade_final_w	:= 5;
		elsif (r_C02_w.cd_classificacao = 'EX2.4') then
			qt_idade_inicial_w	:= 60;
			qt_idade_final_w	:= 999;
		elsif (r_C02_w.cd_classificacao = 'C3') then
			ie_sexo_benef_w := 'F';
			qt_idade_inicial_w	:= 25;
			qt_idade_final_w	:= 59;
		elsif (r_C02_w.cd_classificacao = 'C10.1') then
			ie_sexo_benef_w := 'F';
			qt_idade_inicial_w	:= 50;
			qt_idade_final_w	:= 69;
		elsif (r_C02_w.cd_classificacao = 'C14') then
			qt_idade_inicial_w	:= 50;
			qt_idade_final_w	:= 69;
		elsif (r_C02_w.cd_classificacao in ('I3.3', 'I5', 'I8')) then
			qt_idade_inicial_w	:= 0;
			qt_idade_final_w	:= 11;
		elsif (r_C02_w.cd_classificacao in ('I4', 'I6', 'I7', 'I9')) then
			qt_idade_inicial_w	:= 12;
			qt_idade_final_w	:= 999;
		end if;
		
		if (qt_idade_inicial_w IS NOT NULL AND qt_idade_inicial_w::text <> '' AND qt_idade_final_w IS NOT NULL AND qt_idade_final_w::text <> '') then
			ds_filtro_sql_w := ds_filtro_sql_w || ' and qt_idade between :qt_idade_inicial and :qt_idade_final ';
		end if;
		
		if (ie_sexo_benef_w IS NOT NULL AND ie_sexo_benef_w::text <> '') then
			ds_filtro_sql_w := ds_filtro_sql_w || ' and ie_sexo = :ie_sexo ';
		end if;
		
		-- SQL Dinamico para somar os expostos e atualizar os itens assistenciais.

		ds_sql_w := ds_sql_w || ds_filtro_sql_w || ')';
		
		-- Tipo de contratacao SIP.

		for	r_C03_w in C03(nr_seq_lote_sip_p, r_C02_w.nr_seq_item_assist) loop
			if ((qt_idade_inicial_w IS NOT NULL AND qt_idade_inicial_w::text <> '') and (qt_idade_final_w IS NOT NULL AND qt_idade_final_w::text <> '') and (ie_sexo_benef_w IS NOT NULL AND ie_sexo_benef_w::text <> '')) then
				EXECUTE ds_sql_w
				into STRICT qt_benef_ambulatorial_w, qt_benef_hosp_sem_obs_w, qt_benef_hospitalar_w, qt_benef_odonto_w
				using	r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C03_w.ie_tipo_contratacao_sip, qt_idade_inicial_w, qt_idade_final_w, ie_sexo_benef_w;
			elsif (qt_idade_inicial_w IS NOT NULL AND qt_idade_inicial_w::text <> '' AND qt_idade_final_w IS NOT NULL AND qt_idade_final_w::text <> '') then
				EXECUTE ds_sql_w
				into STRICT qt_benef_ambulatorial_w, qt_benef_hosp_sem_obs_w, qt_benef_hospitalar_w, qt_benef_odonto_w
				using	r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C03_w.ie_tipo_contratacao_sip, qt_idade_inicial_w, qt_idade_final_w;
			elsif (ie_sexo_benef_w IS NOT NULL AND ie_sexo_benef_w::text <> '') then
				EXECUTE ds_sql_w
				into STRICT qt_benef_ambulatorial_w, qt_benef_hosp_sem_obs_w, qt_benef_hospitalar_w, qt_benef_odonto_w
				using	r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C03_w.ie_tipo_contratacao_sip, ie_sexo_benef_w;
			else
				EXECUTE ds_sql_w
				into STRICT qt_benef_ambulatorial_w, qt_benef_hosp_sem_obs_w, qt_benef_hospitalar_w, qt_benef_odonto_w
				using	r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C02_w.ie_hospitalar, r_C02_w.ie_hospitalar_obs, r_C02_w.ie_ambulatorial, r_C02_w.ie_odontologico,
					r_C03_w.ie_tipo_contratacao_sip;
			end if;
				
			update	sip_lote_item_assistencial
			set	qt_beneficiario		= coalesce(CASE WHEN ie_segmentacao_sip=1 THEN qt_benef_ambulatorial_w WHEN ie_segmentacao_sip=2 THEN qt_benef_hosp_sem_obs_w WHEN ie_segmentacao_sip=3 THEN qt_benef_hospitalar_w WHEN ie_segmentacao_sip=4 THEN qt_benef_odonto_w END ,0)
			where	cd_classificacao_sip	= r_C02_w.cd_classificacao
			and	nr_seq_lote		= nr_seq_lote_sip_p
			and	ie_tipo_contratacao	= r_C03_w.ie_tipo_contratacao_sip;
		end loop;
	end loop;

end if; -- Fim tipo de calculo do exposto (novo ou antigo)


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.pls_atualizar_exposto_sip ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, ie_sip_p pls_controle_estab.ie_sip%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_periodo_inicial_p pls_lote_sip.dt_periodo_inicial%type default null, dt_periodo_final_p pls_lote_sip.dt_periodo_final%type default null) FROM PUBLIC;
