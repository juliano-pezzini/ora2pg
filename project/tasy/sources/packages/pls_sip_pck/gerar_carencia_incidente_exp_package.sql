-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sip_pck.gerar_carencia_incidente_exp ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, dt_periodo_inicial_p pls_lote_sip.dt_periodo_inicial%type, dt_periodo_final_p pls_lote_sip.dt_periodo_final%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera as carencias que de alguma forma serao incidentes no periodo do lote SIP
	
	O objetivo e carregar apenas as carencias necessarias em uma tabela temporaria,
	para que apenas as carencias realmente necessarias tenham sua regra comparada
	com a regra de exposicao do item assistencial
	
	Para tratar o estabelecimento da forma mais otimizada, foi duplicado cada union,
	onde o mesmo pode levantar 
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


tb_nr_seq_tipo_carencia_w	pls_util_cta_pck.t_number_table;

dt_inicio_lote_w		pls_lote_sip.dt_periodo_inicial%type;
dt_fim_lote_w			pls_lote_sip.dt_periodo_final%type;
qt_dias_max_w			pls_carencia.qt_dias%type;

-- Carrega as carencias necessarias 

c01 CURSOR(	dt_inicio_periodo_pc	pls_lote_sip.dt_periodo_inicial%type,
		dt_fim_periodo_pc	pls_lote_sip.dt_periodo_final%type) FOR
	SELECT	t.nr_seq_tipo_carencia
	from (	SELECT	a.nr_seq_tipo_carencia
		from	pls_carencia		a
		where	a.dt_inicio_vigencia + coalesce(a.qt_dias_fora_abrang_ant, a.qt_dias)  >= dt_inicio_periodo_pc
		and	a.dt_inicio_vigencia <= dt_fim_periodo_pc  -- para os casos de "carencia futura"
		
union all

		-- Carencia por Produto

		select	c.nr_sequencia nr_seq_tipo_carencia
		from	w_sip_benef_exposto	a,
			pls_carencia		b,
			pls_tipo_carencia	c
		where	b.nr_seq_plano		= a.nr_seq_plano
		and	c.nr_sequencia		= b.nr_seq_tipo_carencia
		-- Apenas carencias de produto vigentes no periodo

		-- A vigencia do produto sera comparada com a contratacao do beneficiario

		and	a.dt_contratacao between b.dt_inicio_vig_plano_ref and b.dt_fim_vig_plano_ref
		-- Hoje coloca essa regra aqui, porque a tabela de exposto deve ser varrida por completo, pois e gerada apenas para esse proposito

		and	c.ie_sexo		in (a.ie_sexo, 'A')
		and	a.dt_contratacao + b.qt_dias >= dt_inicio_periodo_pc
		-- Grupo de carencia no produto

		
union all

		select	c.nr_sequencia nr_seq_tipo_carencia
		from	w_sip_benef_exposto	a,
			pls_carencia		b,
			pls_tipo_carencia	c
		where	b.nr_seq_plano		= a.nr_seq_plano
		and	c.nr_seq_grupo		= b.nr_seq_grupo_carencia
		-- Apenas carencias de produto vigentes no periodo

		-- vigencia que iniciou antes do fim do lote sip

		and	a.dt_contratacao between b.dt_inicio_vig_plano_ref and b.dt_fim_vig_plano_ref
		-- Hoje coloca essa regra aqui, porque a tabela de exposto deve ser varrida por completo, pois e gerada apenas para esse proposito

		and	c.ie_sexo		in (a.ie_sexo, 'A')
		and	a.dt_contratacao + b.qt_dias >= dt_inicio_periodo_pc ) t
	where	(t.nr_seq_tipo_carencia IS NOT NULL AND t.nr_seq_tipo_carencia::text <> '')
	group by t.nr_seq_tipo_carencia;
	
	
	
-- Carencia por contrato

c02 CURSOR(	dt_inicio_periodo_pc	pls_lote_sip.dt_periodo_inicial%type,
		dt_fim_periodo_pc	pls_lote_sip.dt_periodo_final%type,
		qt_dias_max_pc		pls_carencia.qt_dias%type) is
with benef as (	SELECT	x.nr_seq_contrato,
			x.nr_seq_plano,
			x.dt_contratacao
		from	w_sip_benef_exposto	x
		where (add_months(x.dt_contratacao, 1) + qt_dias_max_pc) >= dt_inicio_periodo_pc)
SELECT	b.nr_seq_tipo_carencia
from	benef		a,
	pls_carencia	b
where	b.nr_seq_contrato		= a.nr_seq_contrato
-- a principio, como sera feito um table full scan na w sip benef exposto de qualquer forma, foi mantido o "OR"

and	((b.nr_seq_plano_contrato	= a.nr_seq_plano) or (coalesce(b.nr_seq_plano_contrato::text, '') = ''))
-- Hoje coloca essa regra aqui, porque a tabela de exposto deve ser varrida por completo, pois e gerada apenas para esse proposito

and	CASE WHEN coalesce(b.ie_mes_posterior, 'N')='S' THEN  trunc(add_months(a.dt_contratacao, 1), 'MONTH')  ELSE a.dt_contratacao END  + b.qt_dias >= dt_inicio_periodo_pc
and	(b.nr_seq_tipo_carencia IS NOT NULL AND b.nr_seq_tipo_carencia::text <> '')
group by b.nr_seq_tipo_carencia;


BEGIN

dt_inicio_lote_w	:= trunc(dt_periodo_inicial_p, 'dd');
dt_fim_lote_w		:= fim_dia(dt_periodo_final_p);

-- levanta inf da carencia, para fins de otimizacao

select	max(a.qt_dias)
into STRICT	qt_dias_max_w
from	pls_carencia	a;

-- Limpa a tabela

CALL pls_sip_pck.desfazer_carencia_incid_exp(nr_seq_lote_sip_p);

-- carrega as carencias

open c01(dt_inicio_lote_w, dt_fim_lote_w);
loop

	fetch c01 bulk collect into tb_nr_seq_tipo_carencia_w limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;
	exit when tb_nr_seq_tipo_carencia_w.count = 0;
	
	tb_nr_seq_tipo_carencia_w := pls_sip_pck.grava_carencia_incidente_exp(tb_nr_seq_tipo_carencia_w, nr_seq_lote_sip_p, nm_usuario_p, 'S', 'S');
	
end loop;


-- se o cursor estiver aberto ainda

if (c01%isopen) then

	close c01;
end if;


-- carrega as carencias por contrato (separado por performance)

open c02(dt_inicio_lote_w, dt_fim_lote_w, qt_dias_max_w);
loop

	fetch c02 bulk collect into tb_nr_seq_tipo_carencia_w limit current_setting('pls_sip_pck.qt_registro_transacao_w')::integer;
	exit when tb_nr_seq_tipo_carencia_w.count = 0;
	
	tb_nr_seq_tipo_carencia_w := pls_sip_pck.grava_carencia_incidente_exp(tb_nr_seq_tipo_carencia_w, nr_seq_lote_sip_p, nm_usuario_p, 'S', 'S');
	
end loop;

-- se o cursor estiver aberto ainda

if (c02%isopen) then

	close c02;
end if;

-- atualiza as estatisticas da temporaria

CALL CALL pls_sip_pck.atualiza_estatistica('W_SIP_EXP_CARENCIA',100);


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.gerar_carencia_incidente_exp ( nr_seq_lote_sip_p pls_lote_sip.nr_sequencia%type, dt_periodo_inicial_p pls_lote_sip.dt_periodo_inicial%type, dt_periodo_final_p pls_lote_sip.dt_periodo_final%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
