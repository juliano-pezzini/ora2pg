-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_sip_pck.sip_nv_popula_ie_glosa_conta ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_glosa_conta_w		pls_conta.ie_glosa%type;
tb_rowid_w			pls_util_cta_pck.t_rowid;
tb_ie_glosa_w			pls_util_cta_pck.t_varchar2_table_1;
nr_indice_w			integer;
						
c01 CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type) FOR
	SELECT	distinct a.nr_seq_conta,
		a.ie_tipo_protocolo
	from	sip_nv_dados a
	where	a.nr_seq_lote_sip = nr_seq_lote_pc
	and	a.ie_origem_info = 'CM';
	
c02 CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type,
		nr_seq_conta_lote_pc	sip_nv_dados.nr_seq_conta%type) FOR
	SELECT	oid
	from	sip_nv_dados a
	where	a.nr_seq_lote_sip = nr_seq_lote_pc
	and	a.nr_seq_conta = nr_seq_conta_lote_pc
	-- e necessario a restricao abaixo para que nao peguem os rowid's dos recursos de glosas e cetar o campo ie_glosa_conta para 'S' indevidamente. Pois se 'S'  nao permite que os recursos sejam vinculados'

	and	a.ie_origem_info != 'RG';

-- Carega as contas de intercambio para validar que estao com a conta original completamente glosada, depois do tratamento do c01

c03 CURSOR(	nr_seq_lote_pc		pls_lote_sip.nr_sequencia%type) FOR
	SELECT	a.oid,
		a.nr_seq_conta nr_seq_conta_original,
		a.ie_tipo_protocolo,
		pls_obter_dados_contestacao(b.nr_seq_contestacao, 'NC') nr_seq_conta_contest
	from	sip_nv_dados			a,
		pls_contestacao_discussao	b
	where	a.nr_seq_lote_sip		= nr_seq_lote_pc
	and	b.nr_sequencia			= a.nr_seq_discussao
	and	a.ie_origem_info		= 'CI'
	and	a.ie_glosa_conta		= 'S';
	
	
-- Carrega as contas de intercambio

					
BEGIN

-- busca todas as contas que fazem parte do envio do SIP da parte de contas medicas

nr_indice_w := 0;
for r_c01_w in c01(nr_seq_lote_p) loop
	
	-- busca o ie_glosa diretamente da funcao para fins de performance

	-- Quando for reembolso,  utiliza uma function diferente

	if (r_c01_w.ie_tipo_protocolo = 'R') then
	
		ie_glosa_conta_w := pls_sip_pck.obter_se_reembolso_glosado(r_c01_w.nr_seq_conta);
	else
	
		ie_glosa_conta_w := pls_obter_se_conta_glosada(r_c01_w.nr_seq_conta);
	end if;
		
	-- retornar todos os registros da sip_nv_dados que precisam ser alterados com os dados da conta 

	-- original da abertura

	for r_c02_w in c02(nr_seq_lote_p, r_c01_w.nr_seq_conta) loop

		tb_rowid_w(nr_indice_w) := r_c02_w.rowid;
		tb_ie_glosa_w(nr_indice_w) := ie_glosa_conta_w;
		
		-- se atingiu a quantidade de registros manda para o banco

		if (nr_indice_w >= current_setting('pls_sip_pck.qt_registro_transacao_w')::integer) then
			
			SELECT * FROM pls_sip_pck.p_grava_dado_ie_glosa_cta(	tb_rowid_w, tb_ie_glosa_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_rowid_w := _ora2pg_r.tb_rowid_p; tb_ie_glosa_w := _ora2pg_r.tb_ie_glosa_conta_p;
					
			nr_indice_w := 0;
			
		-- se nao bota na fila e fica na espera.

		else
			nr_indice_w := nr_indice_w + 1;
		end if;

	end loop;
end loop;

-- se sobrou algo manda para o banco

SELECT * FROM pls_sip_pck.p_grava_dado_ie_glosa_cta(	tb_rowid_w, tb_ie_glosa_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_rowid_w := _ora2pg_r.tb_rowid_p; tb_ie_glosa_w := _ora2pg_r.tb_ie_glosa_conta_p;

-- Carrega agora as contas de contestacao. Esta rotina deve validar APENAS as contestacoes cujo conta original foi complementamente glosada.

-- Isso e necessario pois nestes casos os valores sao levantados corretamente, mas a vinculacao na regra quando olhar a conta CI, vai encontrar ela completamente glosada, 

-- e vai acabar nao vinculando corretamente a regra.

-- IMPORTANTE, executar esse processo so depois do C01, que determina quais contas de producao medica estao completamente glosadas

nr_indice_w := 0;
for r_c03_w in c03(nr_seq_lote_p) loop

	-- Verifica se a conta de contestacao esta de fato completamente glosada tambem.

	ie_glosa_conta_w := pls_obter_se_conta_glosada(r_c03_w.nr_seq_conta_contest);
	
	tb_rowid_w(nr_indice_w) := r_c03_w.rowid;
	tb_ie_glosa_w(nr_indice_w) := ie_glosa_conta_w;
	
	-- se atingiu a quantidade de registros manda para o banco

	if (nr_indice_w >= current_setting('pls_sip_pck.qt_registro_transacao_w')::integer) then
		
		SELECT * FROM pls_sip_pck.p_grava_dado_ie_glosa_cta(	tb_rowid_w, tb_ie_glosa_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_rowid_w := _ora2pg_r.tb_rowid_p; tb_ie_glosa_w := _ora2pg_r.tb_ie_glosa_conta_p;
				
		nr_indice_w := 0;
		
	-- se nao bota na fila e fica na espera.

	else
		nr_indice_w := nr_indice_w + 1;
	end if;

end loop;

-- se sobrou algo manda para o banco

SELECT * FROM pls_sip_pck.p_grava_dado_ie_glosa_cta(	tb_rowid_w, tb_ie_glosa_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_rowid_w := _ora2pg_r.tb_rowid_p; tb_ie_glosa_w := _ora2pg_r.tb_ie_glosa_conta_p;
				
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sip_pck.sip_nv_popula_ie_glosa_conta ( nr_seq_lote_p pls_lote_sip.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
