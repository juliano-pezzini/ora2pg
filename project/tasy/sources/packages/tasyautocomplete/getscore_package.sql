-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Calculates the score and highlight hints of a term with an array of input words.
--Implements the multiword prefix algorithm.
CREATE OR REPLACE FUNCTION tasyautocomplete.getscore ( pText text ,pWords strArray ) RETURNS SCORING AS $body$
DECLARE

i integer;
lWord varchar(2000); -- The current input word used for matching
lMatch varchar(2000); -- The full word from the text that matches the input word
--lMatchForScore VARCHAR2(2000);
lMatchText varchar(4000) := pText; -- The text used for the matching algorithm, starting with the input text
lResult scoring; -- The scoring of the term, initially null
matchIndex bigint;
--lpartialMatch number(5) :=0 ;
BEGIN
--Repeat for each input word
FOR i IN 1 .. pWords.COUNT
LOOP
--Store the word locally
lWord := pWords(i);
--Retrieve the full matching word from the input texot, if there is a match
lMatch := regexp_substr( lMatchText, lWord || '[[:alnum:].'']*' );
--lMatchForScore := trim(regexp_substr( lMatchText, ' [[:alnum:].'']*' || trim(lWord) || '[[:alnum:].'']*' ));
IF coalesce(lMatch::text, '') = '' THEN
--No match, return nothing
RETURN NULL;
ELSIF coalesce(lResult::text, '') = '' THEN
--Scoring was not yet initialized, initialize the scoring to 0.
lResult := scoring('', 0.0);
END IF;
--If the algorithm reaches here, the current word matched the string.
--Add the matching range of the input word to the string containing the highlight hints.
lResult.matchRange := lResult.matchRange || TasyAutocomplete.getRange(lMatchText, lWord);
--Increase the score by the length of the input word divided by the length of the full word match.
/*score := (LENGTH(lWord) / LENGTH(lMatch));
if instr(lMatchForScore, lWord) > 1 then
--decrease score based on the distance of the match from word start
score := score * POWER(3, -INSTR(lMatchForScore, lWord));
--indicate that a partial match happened
lpartialMatch := lpartialMatch + 1;
end if;
lResult.itemScore := lResult.itemScore + score;*/
matchIndex := position(lWord in lMatchText);
IF matchIndex > 0 THEN
lResult.itemScore := lResult.itemScore + LENGTH(lWord) / LENGTH(lMatch) / POWER(matchIndex, 3);
END IF;
--Replace the matched word by white space, so that it cannot be matched twice.
lMatchText := TasyAutocomplete.EraseWord(lMatchText, lMatch);
END LOOP;

--Divide the score by the amount of words in the input text.
-- partial matches boost the word count
--lResult.itemScore := lResult.itemScore / ( tasyautocomplete.countwords(pText) * ( ln(lpartialMatch+ 1) +1 ) );
--score:=lResult.itemScore;
RETURN lResult;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 IMMUTABLE;
-- REVOKE ALL ON FUNCTION tasyautocomplete.getscore ( pText text ,pWords strArray ) FROM PUBLIC;
