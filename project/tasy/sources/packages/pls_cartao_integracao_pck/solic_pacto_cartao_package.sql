-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cartao_integracao_pck.solic_pacto_cartao (nr_seq_pagador_fin_p pls_contrato_pagador_fin.nr_sequencia%type, nr_titulo_p titulo_receber.nr_titulo%type, qt_parcela_p pls_solic_pagto_cartao_cr.qt_parcela%type, ds_curta_fatura_p pls_solic_pagto_cartao_cr.ds_curta_fatura%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

        reg_integracao_w              gerar_int_padrao.reg_integracao;
        nr_sequencia_w                pls_solic_pagto_cartao_cr.nr_sequencia%type;
        vl_solicitacao_w              pls_solic_pagto_cartao_cr.vl_solicitacao%type;
        ds_retorno_integracao_w       varchar(4000);
        ie_tasy_interface_engine_w    pls_cartao_parametro.ie_tasy_interface_engine%type;
        ds_token_w                    pls_contrato_pagador_fin.ds_token%type;
        ie_att_valor_cartao_reenvio_w pls_parametros.ie_att_valor_cartao_reenvio%type;
        cd_estabelecimento_w          estabelecimento.cd_estabelecimento%type;

BEGIN
    
        select tr.vl_titulo,
               cd_estabelecimento
          into STRICT vl_solicitacao_w,
               cd_estabelecimento_w
          from titulo_receber tr
         where tr.nr_titulo = nr_titulo_p;

        select coalesce(ie_att_valor_cartao_reenvio, 'N')
          into STRICT ie_att_valor_cartao_reenvio_w
          from pls_parametros
         where cd_estabelecimento = cd_estabelecimento_w;

        if (ie_att_valor_cartao_reenvio_w = 'S') then
            vl_solicitacao_w := vl_solicitacao_w + obter_juros_multa_titulo(nr_titulo_p, clock_timestamp(), 'R', 'A');
        end if;

        insert into pls_solic_pagto_cartao_cr(nr_sequencia,
             nr_seq_pagador_fin,
             vl_solicitacao,
             qt_parcela,
             ds_curta_fatura,
             ie_situacao,
             nr_titulo,
             dt_atualizacao_nrec,
             nm_usuario_nrec,
             dt_atualizacao,
             nm_usuario,
             ie_reenviado)
        values (nextval('pls_solic_pagto_cartao_cr_seq'),
             nr_seq_pagador_fin_p,
             vl_solicitacao_w,
             qt_parcela_p,
             ds_curta_fatura_p,
             0,
             nr_titulo_p,
             clock_timestamp(),
             nm_usuario_p,
             clock_timestamp(),
             nm_usuario_p,
             'N')
        returning nr_sequencia into nr_sequencia_w;

        commit;

        select coalesce(max(ie_tasy_interface_engine), 'N')
          into STRICT ie_tasy_interface_engine_w
          from pls_cartao_parametro
         where cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento();

        -- gerar integracao cielo

        if (ie_tasy_interface_engine_w = 'S') then
            select ds_token into STRICT ds_token_w from pls_contrato_pagador_fin where nr_sequencia = nr_seq_pagador_fin_p;

            if (coalesce(ds_token_w::text, '') = '') then
                insert into pls_ret_pagto_cartao_cr(nr_sequencia,
                     dt_atualizacao,
                     dt_atualizacao_nrec,
                     nm_usuario,
                     nm_usuario_nrec,
                     nr_seq_solic_pagto_cartao,
                     dt_processamento,
                     ds_mensagem_retorno,
                     nr_parte_retorno,
                     vl_solicitacao)
                values (nextval('pls_ret_pagto_cartao_cr_seq'),
                     clock_timestamp(),
                     clock_timestamp(),
                     nm_usuario_p,
                     nm_usuario_p,
                     nr_sequencia_w,
                     clock_timestamp(),
                     wheb_mensagem_pck.get_texto(1165645),
                     1,
                     vl_solicitacao_w);

                update pls_solic_pagto_cartao_cr set ie_situacao = 5 where nr_sequencia = nr_sequencia_w;
                commit;
            else
                select bifrost.send_integration('credit.card.payment',
                                                'com.philips.tasy.integration.requestcardpayment.RequestCardPaymentCallback',
                                                '{"id" : ' || nr_sequencia_w || '}',
                                                nm_usuario_p)
                  into STRICT ds_retorno_integracao_w
;
            end if;
        else
            reg_integracao_p     => reg_integracao_w := gerar_int_padrao.gravar_integracao(ie_evento_p          => current_setting('pls_cartao_integracao_pck.ie_evento_recorrencia_propria')::valor_dominio.vl_dominio%type, nr_seq_documento_p   => nr_sequencia_w, nm_usuario_p         => nm_usuario_p, reg_integracao_p     => reg_integracao_w, ds_parametros_adic_p => null);
        end if;

    end;

    /*
    Procedimento para realizar a solicitacao de pagamento
    %param nr_seq_lote_p numero do lote da mensalidade
    %param nm_usuario_p nome do usuario que fez a solicitocao do pagamento
    */



$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cartao_integracao_pck.solic_pacto_cartao (nr_seq_pagador_fin_p pls_contrato_pagador_fin.nr_sequencia%type, nr_titulo_p titulo_receber.nr_titulo%type, qt_parcela_p pls_solic_pagto_cartao_cr.qt_parcela%type, ds_curta_fatura_p pls_solic_pagto_cartao_cr.ds_curta_fatura%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
