-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cartao_integracao_pck.retorno_pagto_cartao_cr (nr_sequencia_p intpd_fila_transmissao.nr_sequencia%type) AS $body$
DECLARE

        c_01 CURSOR(ds_sigla_moeda_p moeda.ds_sigla_moeda%type) FOR
            SELECT cd_moeda from moeda where ds_sigla_moeda = ds_sigla_moeda_p;

        c_02 CURSOR(sg_pais_p pais.sg_pais%type) FOR
            SELECT nr_sequencia from pais where sg_pais = sg_pais_p;

        ret_pagto_cartao_cr_w pls_ret_pagto_cartao_cr%rowtype;
        ds_log_w              text;
        nm_usuario_w          usuario.nm_usuario%type;
        retorno_w             philips_json;
        payment_w             philips_json;
        credit_card           philips_json;
        customer_w            philips_json;
        links_w               philips_json_list;
        nr_seq_documento_w    intpd_fila_transmissao.nr_seq_documento%type;
        ie_evento_w           intpd_fila_transmissao.ie_evento%type;
        ie_status_http_w      intpd_fila_transmissao.ie_status_http%type;
        erro_w                cielo_error_tab;
        nr_parte_retorno_w    pls_ret_pagto_cartao_cr.nr_parte_retorno%type := 0;

BEGIN
        select ift.ds_message_response,
               ift.nm_usuario,
               ift.nr_seq_documento,
               ift.ie_status_http,
               ift.ie_evento
          into STRICT ds_log_w,
               nm_usuario_w,
               nr_seq_documento_w,
               ie_status_http_w,
               ie_evento_w
          from intpd_fila_transmissao ift
         where ift.nr_sequencia = nr_sequencia_p;

        select nextval('pls_ret_pagto_cartao_cr_seq') into STRICT ret_pagto_cartao_cr_w.nr_sequencia;

        ret_pagto_cartao_cr_w.ie_comercio_eletronico := null;
        ret_pagto_cartao_cr_w.ie_evento              := ie_evento_w;
        ret_pagto_cartao_cr_w.dt_atualizacao_nrec    := clock_timestamp();
        ret_pagto_cartao_cr_w.nm_usuario_nrec        := nm_usuario_w;
        ret_pagto_cartao_cr_w.dt_atualizacao         := clock_timestamp();
        ret_pagto_cartao_cr_w.nm_usuario             := nm_usuario_w;
        ret_pagto_cartao_cr_w.dt_processamento       := clock_timestamp();
        case
            when ie_status_http_w in (200, 201) then
                ret_pagto_cartao_cr_w.nr_parte_retorno := 1;
                retorno_w                              := philips_json(ds_log_w);
                if retorno_w.exist('MerchantOrderId') then
                    ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao := retorno_w.get['MerchantOrderId'].get_string();
                else
                    ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao := (nr_seq_documento_w)::numeric;
                end if;
                if retorno_w.exist('Payment') then
                    payment_w := philips_json(retorno_w.get('Payment'));
                    if payment_w.exist('CreditCard') then
                        credit_card := philips_json(payment_w.get('CreditCard'));
                    end if;
                end if;
                if retorno_w.exist('Customer') then
                    customer_w := philips_json(retorno_w.get('Customer'));
                end if;

                if payment_w.exist('Links') then
                    links_w := philips_json_list(payment_w.get('Links'));
                end if;

                if payment_w.exist('Currency') then
                    open c_01(payment_w.get['Currency'].get_string());
                    fetch c_01
                        into ret_pagto_cartao_cr_w.cd_moeda;
                    close c_01;
                end if;
                if payment_w.exist('Country') then
                    open c_02(payment_w.get['Country'].get_string());
                    fetch c_02
                        into ret_pagto_cartao_cr_w.nr_seq_pais;
                    close c_02;
                end if;
                if payment_w.exist('ProofOfSale') then
                    ret_pagto_cartao_cr_w.nr_nsu := payment_w.get['ProofOfSale'].get_string();
                end if;
                if payment_w.exist('Tid') then
                    ret_pagto_cartao_cr_w.ds_tid := payment_w.get['Tid'].get_string();
                end if;
                if payment_w.exist('AuthorizationCode') then
                    ret_pagto_cartao_cr_w.cd_autorizacao := payment_w.get['AuthorizationCode'].get_string();
                end if;
                if payment_w.exist('PaymentId') then
                    ret_pagto_cartao_cr_w.nr_pagamento := payment_w.get['PaymentId'].get_string();
                end if;
                if payment_w.exist('Status') then
                    ret_pagto_cartao_cr_w.ie_status := payment_w.get['Status'].get_string();
                end if;
                if payment_w.exist('ReturnCode') then
                    ret_pagto_cartao_cr_w.cd_retorno := payment_w.get['ReturnCode'].get_string();
                end if;
                if payment_w.exist('ReturnMessage') then
                    ret_pagto_cartao_cr_w.ds_mensagem_retorno := payment_w.get['ReturnMessage'].get_string();
                end if;
                if payment_w.exist('Amount') then
                    ret_pagto_cartao_cr_w.vl_solicitacao := payment_w.get['Amount'].get_number() / 100;
                end if;
                insert into pls_ret_pagto_cartao_cr values (ret_pagto_cartao_cr_w.*);
            when ie_status_http_w = 400 then
                ret_pagto_cartao_cr_w.nr_parte_retorno := 0;
                erro_w                                 := pls_cartao_integracao_pck.cielo_error(ds_log_w);
                for i in 1 .. erro_w.count loop
                    ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao := (nr_seq_documento_w)::numeric;
                    ret_pagto_cartao_cr_w.ds_mensagem_retorno       := erro_w[i].message;
                    ret_pagto_cartao_cr_w.cd_retorno                := erro_w[i].code;
                    ret_pagto_cartao_cr_w.nr_parte_retorno          := ret_pagto_cartao_cr_w.nr_parte_retorno + 1;
                    insert into pls_ret_pagto_cartao_cr values (ret_pagto_cartao_cr_w.*);
                end loop;

            when ie_status_http_w = 404 then
                ret_pagto_cartao_cr_w.nr_parte_retorno          := 1;
                ret_pagto_cartao_cr_w.ds_mensagem_retorno       := 'Not found';
                ret_pagto_cartao_cr_w.cd_retorno                := '404';
                ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao := (nr_seq_documento_w)::numeric;
                insert into pls_ret_pagto_cartao_cr values (ret_pagto_cartao_cr_w.*);
            else
                ret_pagto_cartao_cr_w.nr_parte_retorno          := 1;
                ret_pagto_cartao_cr_w.ds_mensagem_retorno       := 'Unknown status: ' || ie_status_http_w;
                ret_pagto_cartao_cr_w.cd_retorno                := ie_status_http_w;
                ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao := (nr_seq_documento_w)::numeric;
                insert into pls_ret_pagto_cartao_cr values (ret_pagto_cartao_cr_w.*);
        end case;

        -- atualizar a situacao  da solicitacao

        if not pls_cartao_integracao_pck.atualiza_situacao(nr_seq_solict_pagto_p => ret_pagto_cartao_cr_w.nr_seq_solic_pagto_cartao,
                                 ie_situacao_p         => 0,
                                 ie_situacao_novo_p    => '1',
                                 nm_usuario_p          => nm_usuario_w) then
            CALL wheb_mensagem_pck.exibir_mensagem_abort(1030340); -- 'Situacao da solicitacao foi modificado antes do recebimento to retorno.'
        end if;

        update intpd_fila_transmissao set ie_status = 'S' where nr_sequencia = nr_sequencia_p;

    exception
        when others then
            update intpd_fila_transmissao set ie_status = 'E' where nr_sequencia = nr_sequencia_p;
    end;

    /*
    Procedimento para processar o retorno do cancelamento da solicitacao de pagamento
    %param nr_sequencia_p Sequencia da  fila de trasmicao
    */


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cartao_integracao_pck.retorno_pagto_cartao_cr (nr_sequencia_p intpd_fila_transmissao.nr_sequencia%type) FROM PUBLIC;
