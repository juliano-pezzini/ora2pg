-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Cria o agrupamento de contas (an?lise) caso ainda n?o houver e gerar o fluxo de an?lise dos itens



CREATE OR REPLACE PROCEDURE pls_analise_cta_pck.vincular_contas_analise ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


nr_seq_plano_w      pls_segurado.nr_sequencia%type;
nr_seq_analise_w    pls_analise_conta.nr_sequencia%type;
ie_tipo_guia_atualizar_w  pls_analise_conta.ie_tipo_guia%type;
tb_tipo_guia_update_w   dbms_sql.varchar2_table;
tb_nr_seq_analise_update_w  dbms_sql.number_table;
tb_seq_conta_w      dbms_sql.number_table;
dados_analise_w     table_dados_analise_conta;
nr_update_index_w   integer;
nr_insert_index_w   integer;
tb_seq_conta_insert_w   dbms_sql.number_table;
vetor_analise_w     t_analise;
indice_vetor_analise_w    varchar(100);
ie_pcmso_w        pls_guia_plano.ie_pcmso%type;
ie_forma_agrupamento_w  pls_regra_geracao_analise.ie_forma_agrupamento%type;
nr_seq_regra_agrup_w  pls_regra_geracao_analise.nr_sequencia%type;

C01 CURSOR( nr_seq_lote_pc    pls_lote_protocolo_conta.nr_sequencia%type,
    nr_seq_protocolo_pc pls_protocolo_conta.nr_sequencia%type,
    nr_seq_lote_processo_pc pls_cta_lote_processo.nr_sequencia%type,
    nr_seq_conta_pc   pls_conta.nr_sequencia%type) FOR

  SELECT  a.nr_sequencia,
    a.nr_seq_segurado,
    a.nr_seq_lote_conta,
    a.cd_guia_referencia cd_guia,
    a.nr_seq_congenere,
    a.nr_seq_protocolo,
    a.nr_seq_fatura,
    a.ie_origem_conta,
    a.ie_tipo_guia ie_tipo_guia,
    c.ie_tipo_guia ie_tipo_guia_analise,
    coalesce(a.nr_seq_prestador_prot, a.nr_seq_prestador_exec) nr_seq_prestador,
    a.nr_seq_plano,
    a.nr_fatura,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  'N'  ELSE 'S' END  ie_intercambio,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  1  ELSE 3 END ie_origem_analise,
    (SELECT b.ie_preco
     from   pls_segurado z,
      pls_plano b 
    where   z.nr_sequencia = a.nr_seq_segurado 
    and   b.nr_sequencia = z.nr_seq_plano) ie_preco,
    substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'N'), 1, 255) nm_segurado,
    substr(pls_obter_dados_prestador(a.nr_seq_prestador,'N'), 1, 255) nm_prestador,
    substr(pls_obter_nome_congenere(a.nr_seq_congenere), 1, 255) nm_cooperativa,
    substr(pls_obter_seq_codigo_coop(a.nr_seq_congenere, ''), 1, 10) cd_cooperativa,
    CASE WHEN a.ie_status_fatura='EI' THEN 'S' WHEN a.ie_status_fatura='V' THEN  'S'  ELSE 'N' END  ie_pre_analise,
    trunc(a.dt_atendimento) dt_atendimento,
    a.vl_total_imp,
    a.nr_seq_guia
  FROM pls_conta_v a
LEFT OUTER JOIN pls_analise_conta c ON (a.nr_seq_analise = c.nr_sequencia)
WHERE a.nr_seq_lote_conta = nr_seq_lote_pc and a.ie_status       in ('A', 'L', 'P', 'U','S') and a.ie_status_protocolo     in ('1', '2', '5','7')  
union all

  select  a.nr_sequencia,
    a.nr_seq_segurado,
    a.nr_seq_lote_conta,
    a.cd_guia_referencia cd_guia,
    a.nr_seq_congenere,
    a.nr_seq_protocolo,
    a.nr_seq_fatura,
    a.ie_origem_conta,
    a.ie_tipo_guia  ie_tipo_guia,
    c.ie_tipo_guia ie_tipo_guia_analise,
    coalesce(a.nr_seq_prestador_prot, a.nr_seq_prestador_exec) nr_seq_prestador,
    a.nr_seq_plano,
    a.nr_fatura,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  'N'  ELSE 'S' END  ie_intercambio,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  1  ELSE 3 END ie_origem_analise,
    (select b.ie_preco
     from   pls_segurado z, 
      pls_plano b 
    where   z.nr_sequencia = a.nr_seq_segurado 
    and   b.nr_sequencia = z.nr_seq_plano) ie_preco,
    substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'N'), 1, 255) nm_segurado,
    substr(pls_obter_dados_prestador(a.nr_seq_prestador,'N'), 1, 255) nm_prestador,
    substr(pls_obter_nome_congenere(a.nr_seq_congenere), 1, 255) nm_cooperativa,
    substr(pls_obter_seq_codigo_coop(a.nr_seq_congenere, ''), 1, 10) cd_cooperativa,
    CASE WHEN a.ie_status_fatura='EI' THEN 'S' WHEN a.ie_status_fatura='V' THEN  'S'  ELSE 'N' END  ie_pre_analise,
    trunc(a.dt_atendimento) dt_atendimento,
    a.vl_total_imp,
    a.nr_seq_guia
  FROM pls_conta_v a
LEFT OUTER JOIN pls_analise_conta c ON (a.nr_seq_analise = c.nr_sequencia)
WHERE a.nr_seq_protocolo = nr_seq_protocolo_pc and a.ie_status       in ('A', 'L', 'P', 'U','S') and a.ie_status_protocolo     in ('1', '2', '5','7')  
union all

  select  a.nr_sequencia,
    a.nr_seq_segurado,
    a.nr_seq_lote_conta,
    a.cd_guia_referencia cd_guia,
    a.nr_seq_congenere,
    a.nr_seq_protocolo,
    a.nr_seq_fatura,
    a.ie_origem_conta,
    a.ie_tipo_guia ie_tipo_guia,
    c.ie_tipo_guia ie_tipo_guia_analise,
    coalesce(a.nr_seq_prestador_prot, a.nr_seq_prestador_exec) nr_seq_prestador,
    a.nr_seq_plano,
    a.nr_fatura,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  'N'  ELSE 'S' END  ie_intercambio,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  1  ELSE 3 END ie_origem_analise,
    (select b.ie_preco
     from   pls_segurado z, 
      pls_plano b 
    where   z.nr_sequencia = a.nr_seq_segurado 
    and   b.nr_sequencia = z.nr_seq_plano) ie_preco,
    substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'N'), 1, 255) nm_segurado,
    substr(pls_obter_dados_prestador(a.nr_seq_prestador,'N'), 1, 255) nm_prestador,
    substr(pls_obter_nome_congenere(a.nr_seq_congenere), 1, 255) nm_cooperativa,
    substr(pls_obter_seq_codigo_coop(a.nr_seq_congenere, ''), 1, 10) cd_cooperativa,
    CASE WHEN a.ie_status_fatura='EI' THEN 'S' WHEN a.ie_status_fatura='V' THEN  'S'  ELSE 'N' END  ie_pre_analise,
    trunc(a.dt_atendimento) dt_atendimento,
    a.vl_total_imp,
    a.nr_seq_guia
  FROM pls_conta_v a
LEFT OUTER JOIN pls_analise_conta c ON (a.nr_seq_analise = c.nr_sequencia)
WHERE a.ie_status       in ('A', 'L', 'P', 'U','S') and a.ie_status_protocolo     in ('1', '2', '5','7') and exists (select  1
      from  pls_cta_lote_proc_conta p
      where p.nr_seq_lote_processo = nr_seq_lote_processo_pc
      and p.nr_seq_conta = a.nr_sequencia)  
union all

  select  a.nr_sequencia,
    a.nr_seq_segurado,
    a.nr_seq_lote_conta,
    a.cd_guia_referencia cd_guia,
    a.nr_seq_congenere,
    a.nr_seq_protocolo,
    a.nr_seq_fatura,
    a.ie_origem_conta,
    a.ie_tipo_guia ie_tipo_guia,
    c.ie_tipo_guia ie_tipo_guia_analise,
    coalesce(a.nr_seq_prestador_prot, a.nr_seq_prestador_exec) nr_seq_prestador,
    a.nr_seq_plano,
    a.nr_fatura,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  'N'  ELSE 'S' END  ie_intercambio,
    CASE WHEN coalesce(a.nr_fatura::text, '') = '' THEN  1  ELSE 3 END ie_origem_analise,
    (select b.ie_preco
     from   pls_segurado z, 
      pls_plano b 
    where   z.nr_sequencia = a.nr_seq_segurado 
    and   b.nr_sequencia = z.nr_seq_plano) ie_preco,
    substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'N'), 1, 255) nm_segurado,
    substr(pls_obter_dados_prestador(a.nr_seq_prestador,'N'), 1, 255) nm_prestador,
    substr(pls_obter_nome_congenere(a.nr_seq_congenere), 1, 255) nm_cooperativa,
    substr(pls_obter_seq_codigo_coop(a.nr_seq_congenere, ''), 1, 10) cd_cooperativa,
    CASE WHEN a.ie_status_fatura='EI' THEN 'S' WHEN a.ie_status_fatura='V' THEN  'S'  ELSE 'N' END  ie_pre_analise,
    trunc(a.dt_atendimento) dt_atendimento,
    a.vl_total_imp,
    a.nr_seq_guia
  FROM pls_conta_v a
LEFT OUTER JOIN pls_analise_conta c ON (a.nr_seq_analise = c.nr_sequencia)
WHERE a.nr_sequencia = nr_seq_conta_pc and a.ie_status       in ('A', 'L', 'P', 'U','S') and a.ie_status_protocolo     in ('1', '2', '5','7')  order by  vl_total_imp desc,
      dt_atendimento, 
      nr_sequencia;
BEGIN

nr_update_index_w := 0;
nr_insert_index_w := 0;
tb_tipo_guia_update_w.delete;
tb_nr_seq_analise_update_w.delete;
tb_seq_conta_w.delete;
dados_analise_w := pls_analise_cta_pck.limpa_tabela_dados_analise(dados_analise_w);

for r_C01_w in C01(nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop

  -- Para ler apenas uma vez a regra.

  if (coalesce(ie_forma_agrupamento_w::text, '') = '') then
    ie_forma_agrupamento_w := pls_obter_regra_agrup_analise(r_C01_w.nr_sequencia, r_C01_w.ie_origem_conta, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_agrup_w);
  end if;

  if (coalesce(r_C01_w.nr_seq_lote_conta::text, '') = '') then
    --Se n?o tiver lote, ent?o gera nesse momento

    pls_gerar_lote_analise( r_C01_w.nr_seq_prestador, r_C01_w.nr_seq_congenere, nm_usuario_p,
          cd_estabelecimento_p, null, r_C01_w.nr_seq_lote_conta);

    --Vincula??o do protocolo com o lote gerado

    CALL pls_vinc_protocolo_lote_conta(r_C01_w.nr_seq_lote_conta, r_C01_w.nr_seq_protocolo, nm_usuario_p);
  end if;

  --Se for agrupamento por conta, ent?o tem que criar nova an?lise a cada itera??o do cursos. Se for por an?lise mant?m o padr?o. Obs: Se n?o tiver regra, a vari?vel estar? com valor A

  if (ie_forma_agrupamento_w = 'A') then
    --Obtendo o n?mero da an?lise

    --Foi criada essa estrutura com uma variavel tabela indexada por varchar, pois quando estivermos trabalhando com v?rias contas, em um primeiro momento

    --uma conta pode n?o ter uma an?lise, nesse caso, os dados dela ser?o armazenados em variaveis tabela(mem?ria) para que somente depois de x registros seja

    --feito um insert atrav?s de um forall, por?m antes de ocorrer esse insert, podem surgir contas que teriam os mesmos dados da conta anterior e devem fazer parte 

    --da mesma an?lise, nesse caso, guardamos a sequencia de an?lise obtida anteriormente(pois nesse momento ainda existe somente em mem?ria) e utilizamos para 

    --as outras contas similares.

    indice_vetor_analise_w := r_C01_w.cd_guia||r_C01_w.nr_seq_lote_conta||r_C01_w.nr_seq_segurado||r_C01_w.ie_origem_analise;
    --Se existir, ? que a an?lise foi gerada recentemente e ela ser? utilizada para a conta atual(iitera??o atual do cursor)

    if (vetor_analise_w.exists(indice_vetor_analise_w)) then
      nr_seq_analise_w := vetor_analise_w(indice_vetor_analise_w);

    --Caso n?o exista, ? que ainda n?o passou por aqui nenhuma conta com segurado, lote de protocolo, cd_guia igual a esta atual .

    else
      --Obt?m a sequencia da an?lise. Se tiver, guarda a sequencia no vetor_analise para  outras contas 

      --que venham a fazer parte da mesma an?lise utilizarem posteriormente. caso contr?rio, ser? necess?rio fazer insert.

      nr_seq_analise_w := obter_seq_analise(r_C01_w.cd_guia, r_C01_w.nr_seq_lote_conta, r_C01_w.nr_seq_segurado, r_C01_w.ie_origem_analise);

      if (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
        vetor_analise_w(indice_vetor_analise_w) := nr_seq_analise_w;
      end if;
    end if;
  else
    nr_seq_analise_w := null;
  end if;

  --Se tiver an?lise

  if (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then

    --Obt?m o tipo de guia que ser? utilizado ao atualizar a an?lise

    ie_tipo_guia_atualizar_w := pls_analise_cta_pck.obter_tipo_guia_analise_update(nr_seq_analise_w, r_C01_w.ie_tipo_guia);

    if (coalesce(ie_tipo_guia_atualizar_w::text, '') = '') then
      ie_tipo_guia_atualizar_w := r_C01_w.ie_tipo_guia;
    end if;
    --Popula as vari?veis tabela

    tb_tipo_guia_update_w(nr_update_index_w) := ie_tipo_guia_atualizar_w;
    tb_nr_seq_analise_update_w(nr_update_index_w) := nr_seq_analise_w;
    tb_seq_conta_w(nr_update_index_w) := r_C01_w.nr_sequencia;
    --REalizei esta altera??o de forma paliativa devido a necessidade de vincular as guias filhas

    --Se as vari?veis tabelas atingirem a quantidade de registros pr?-definida para update

    if ((nr_update_index_w + nr_insert_index_w)>= 1) then

      --Faz os inserts e  updates de todos os registros presentes nas tabelas.

      CALL pls_analise_cta_pck.insere_analise_conta(dados_analise_w, tb_seq_conta_insert_w, nm_usuario_p, cd_estabelecimento_p);
      CALL pls_analise_cta_pck.atualiza_analise_conta(tb_nr_seq_analise_update_w, tb_seq_conta_w, tb_tipo_guia_update_w);

      nr_update_index_w := 0;
      nr_insert_index_w := 0;
      --Limpa da mem?ria os dados de update

      tb_tipo_guia_update_w.delete;
      tb_nr_seq_analise_update_w.delete;
      tb_seq_conta_w.delete;
      tb_seq_conta_insert_w.delete;
      --Limpa da mem?ria os dados para insert

      dados_analise_w := pls_analise_cta_pck.limpa_tabela_dados_analise(dados_analise_w);

    --Se limite de registros n?o for atingido, ent?o incrementa o contador.

    else
      nr_update_index_w := nr_update_index_w + 1;
    end if;

  --Se n?o tiver an?lise

  else
    if  ((r_C01_w.nr_seq_congenere IS NOT NULL AND r_C01_w.nr_seq_congenere::text <> '') or (r_C01_w.nr_seq_prestador IS NOT NULL AND r_C01_w.nr_seq_prestador::text <> '')) then
      
      ie_pcmso_w  := pls_analise_cta_pck.pls_obter_pcmso_guia(r_c01_w.nr_seq_guia);

      select  nextval('pls_analise_conta_seq')
      into STRICT  nr_seq_analise_w
;

      --guarda a sequencia da conta, que ser? atualizada ap?s inserir novo registro na pls_analise_conta

      tb_seq_conta_insert_w(nr_insert_index_w)    :=r_C01_w.nr_sequencia;

      --popula todos os campos da estrutura table_dados_analise_conta

      dados_analise_w.nr_sequencia(nr_insert_index_w)   := nr_seq_analise_w;
      dados_analise_w.ie_pre_analise(nr_insert_index_w)   := r_C01_w.ie_pre_analise;
      dados_analise_w.nr_seq_lote_protocolo(nr_insert_index_w):= r_C01_w.nr_seq_lote_conta;
      dados_analise_w.nr_seq_prestador(nr_insert_index_w) := r_C01_w.nr_seq_prestador;
      dados_analise_w.nr_seq_segurado(nr_insert_index_w)  := r_C01_w.nr_seq_segurado;
      dados_analise_w.cd_guia(nr_insert_index_w)    := r_C01_w.cd_guia;
      dados_analise_w.nr_seq_congenere(nr_insert_index_w) := r_C01_w.nr_seq_congenere;
      dados_analise_w.ie_origem_analise(nr_insert_index_w)  := r_C01_w.ie_origem_analise;
      dados_analise_w.nr_fatura(nr_insert_index_w)    := r_C01_w.nr_fatura;
      dados_analise_w.ie_origem_conta(nr_insert_index_w)  := r_C01_w.ie_origem_conta;
      dados_analise_w.ie_preco(nr_insert_index_w)     := r_C01_w.ie_preco;
      dados_analise_w.cd_estabelecimento(nr_insert_index_w) := cd_estabelecimento_p;
      dados_analise_w.ie_tipo_guia(nr_insert_index_w)   := r_C01_w.ie_tipo_guia;
      dados_analise_w.nm_segurado(nr_insert_index_w)    := r_C01_w.nm_segurado;
      dados_analise_w.nm_prestador(nr_insert_index_w)   := r_C01_w.nm_prestador;
      dados_analise_w.nm_cooperativa(nr_insert_index_w) := r_C01_w.nm_cooperativa;
      dados_analise_w.cd_cooperativa(nr_insert_index_w) := r_C01_w.cd_cooperativa;
      dados_analise_w.ie_pcmso(nr_insert_index_w)   := ie_pcmso_w;
      dados_analise_w.nr_seq_regra_agrup(nr_insert_index_w) := nr_seq_regra_agrup_w;
      --REalizei esta altera??o de forma paliativa devido a necessidade de vincular as guias filhas 

      --Se as vari?veis tabelas atingirem a quantidade de registros pr?-definida para update

      if ((nr_update_index_w + nr_insert_index_w)>= 1) then

        --Faz os inserts e  updates de todos os registros presentes nas tabelas.

        CALL pls_analise_cta_pck.insere_analise_conta(dados_analise_w, tb_seq_conta_insert_w, nm_usuario_p, cd_estabelecimento_p);
        CALL pls_analise_cta_pck.atualiza_analise_conta(tb_nr_seq_analise_update_w, tb_seq_conta_w, tb_tipo_guia_update_w);

        --Limpa das tabelas os dados para update

        nr_update_index_w := 0;
        nr_insert_index_w := 0;
        tb_tipo_guia_update_w.delete;
        tb_nr_seq_analise_update_w.delete;
        tb_seq_conta_w.delete;
        tb_seq_conta_insert_w.delete;
        --Limpa das tabelas os dados para insert

        dados_analise_w := pls_analise_cta_pck.limpa_tabela_dados_analise(dados_analise_w);
      
      --Se o limite de registros n?o for alcan?ada, ent?o incrementa contador

      else
        nr_insert_index_w := nr_insert_index_w + 1;
      end if;

      --Se for agrupamento por conta, ent?o tem que criar nova an?lise a cada itera??o do cursos. Se for por an?lise mant?m o padr?o. Obs: Se n?o tiver regra, a vari?vel estar? com valor A

      if (ie_forma_agrupamento_w = 'A') then
        --Para quando novas contas com mesmos dados(guia, protocolo, segurado) precisarem obter a  an?lise

        vetor_analise_w(indice_vetor_analise_w) := nr_seq_analise_w;
      end if;
    end if;

  end if;

end loop;

CALL pls_analise_cta_pck.insere_analise_conta(dados_analise_w, tb_seq_conta_insert_w, nm_usuario_p, cd_estabelecimento_p);
CALL pls_analise_cta_pck.atualiza_analise_conta(tb_nr_seq_analise_update_w, tb_seq_conta_w, tb_tipo_guia_update_w);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_cta_pck.vincular_contas_analise ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
