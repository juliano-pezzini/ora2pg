-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

-- determina o prazo em que uma an?lise deve ser realizado



CREATE OR REPLACE PROCEDURE pls_analise_cta_pck.determinar_prazo_analise ( nr_seq_analise_p pls_analise_conta.nr_sequencia%type, ie_commit_p text default 'S') AS $body$
DECLARE


qt_dias_limite_w  pls_regra_prazo_an_cta.qt_dias_limite%type;
qt_dias_limite_ww pls_regra_prazo_an_cta.qt_dias_limite%type;
dt_base_w   timestamp;
dt_base_ww    timestamp;
dt_prazo_analise_w  pls_analise_conta.dt_prazo_analise%type;
ie_usa_venc_fatura_w  varchar(1) := 'N';

-- cursor que vai buscar todas as contas

c01 CURSOR( nr_seq_analise_p  pls_analise_conta.nr_sequencia%type) FOR
  SELECT  a.cd_estabelecimento,
    b.ie_origem_protocolo,
    a.ie_tipo_guia,
    pls_obter_tipo_intercambio(a.nr_seq_congenere, a.cd_estabelecimento) ie_tipo_intercambio, -- verificar origem do campo
    c.ie_tipo_relacao,
    b.nr_seq_congenere,
    b.nr_seq_prestador,
    c.nr_seq_tipo_prestador,
    b.dt_recebimento,
    a.nr_seq_fatura
  FROM pls_conta a, pls_protocolo_conta b
LEFT OUTER JOIN pls_prestador c ON (b.nr_seq_prestador = c.nr_sequencia)
WHERE b.nr_sequencia    = a.nr_seq_protocolo  and a.nr_seq_analise  = nr_seq_analise_p;

-- cursor que vai buscar as regras

c02 CURSOR( cd_estabelecimento_pc   pls_regra_prazo_an_cta.cd_estabelecimento%type,
    ie_origem_protocolo_pc    pls_regra_prazo_an_cta.ie_origem_protocolo%type,
    ie_tipo_guia_pc     pls_regra_prazo_an_cta.ie_tipo_guia%type,
    ie_tipo_intercambio_pc    pls_regra_prazo_an_cta.ie_tipo_intercambio%type,
    ie_tipo_relacao_pc    pls_regra_prazo_an_cta.ie_tipo_relacao%type,
    nr_seq_congenere_pc   pls_regra_prazo_an_cta.nr_seq_congenere%type,
    nr_seq_prestador_pc   pls_regra_prazo_an_cta.nr_seq_prestador%type,
    nr_seq_tipo_prestador_pc  pls_regra_prazo_an_cta.nr_seq_tipo_prestador%type) FOR
  SELECT  a.qt_dias_limite
  from  pls_regra_prazo_an_cta  a
  where a.cd_estabelecimento  = cd_estabelecimento_pc
  and clock_timestamp() between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia, clock_timestamp())
  and ((coalesce(a.ie_origem_protocolo::text, '') = '')  or (a.ie_origem_protocolo = ie_origem_protocolo_pc))
  and ((coalesce(a.ie_tipo_guia::text, '') = '')   or (a.ie_tipo_guia    = ie_tipo_guia_pc))
  and ((coalesce(a.ie_tipo_intercambio::text, '') = '')  or (a.ie_tipo_intercambio in (ie_tipo_intercambio_pc, 'A')))
  and ((coalesce(a.ie_tipo_relacao::text, '') = '')    or (a.ie_tipo_relacao     = ie_tipo_relacao_pc))
  and ((coalesce(a.nr_seq_congenere::text, '') = '')     or (a.nr_seq_congenere    = nr_seq_congenere_pc))
  and ((coalesce(a.nr_seq_grupo_operadora::text, '') = '') or (exists ( SELECT  1
                  from  pls_preco_operadora x
                  where x.nr_seq_congenere  = nr_seq_congenere_pc
                  and x.nr_seq_grupo    = a.nr_seq_grupo_operadora)))
  and ((coalesce(a.nr_seq_grupo_prestador::text, '') = '') or (exists (  select  1
                  from  pls_preco_prestador x
                  where x.nr_seq_prestador  = nr_seq_prestador_pc
                  and x.nr_seq_grupo    = a.nr_seq_grupo_prestador)))
  and ((coalesce(a.nr_seq_prestador::text, '') = '')   or (a.nr_seq_prestador    = nr_seq_prestador_pc))
  and ((coalesce(a.nr_seq_tipo_prestador::text, '') = '')  or (a.nr_seq_tipo_prestador = nr_seq_tipo_prestador_pc))
    order by nr_ordem_execucao asc, qt_dias_limite desc;

BEGIN


-- s? executa se tiver analise informada

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') then
  
  qt_dias_limite_w  := null;
  dt_base_w   := null;

  -- carrega as contas

  for r_c01_w in c01(nr_seq_analise_p) loop
    
    qt_dias_limite_ww := null;

    -- Carrega as regras

    for r_c02_w in c02(  r_c01_w.cd_estabelecimento,
          r_c01_w.ie_origem_protocolo,
          r_c01_w.ie_tipo_guia,
          r_c01_w.ie_tipo_intercambio,
          r_c01_w.ie_tipo_relacao,
          r_c01_w.nr_seq_congenere,
          r_c01_w.nr_seq_prestador,
          r_c01_w.nr_seq_tipo_prestador) loop
          
      qt_dias_limite_ww := r_c02_w.qt_dias_limite;

    end loop; -- fim as regras encontradas para a conta
    
    -- como as contas podem carregar varias regras, sempre sera visto o menor prazo

    -- se alguma regra possuir "zero", esse ? o prazo que ser? utilizado

    if  ((coalesce(qt_dias_limite_w, 0) > coalesce(qt_dias_limite_ww, 0)) or (qt_dias_limite_ww = 0) or ((qt_dias_limite_ww IS NOT NULL AND qt_dias_limite_ww::text <> '') and coalesce(qt_dias_limite_w::text, '') = '')) then

      qt_dias_limite_w := qt_dias_limite_ww;
    end if;

    -- verifica qual data deve ser utilizada, se for de A500 ou A700, busca da fatura, sen?o usa a data de recebimento do protocolo

    -- N?o foi incluido o join da fatura no cursor c01, pois a maioria das contas n?o ser?o A500

    -- causando uma sobrecarga desnecess?ria

    if (r_c01_w.ie_origem_protocolo  in ('A','Z')) and (r_c01_w.nr_seq_fatura IS NOT NULL AND r_c01_w.nr_seq_fatura::text <> '') then -- A500 ou A700
      
      select  min(dt_vencimento_fatura)
      into STRICT  dt_base_ww
      from  ptu_fatura
      where nr_sequencia  = r_c01_w.nr_seq_fatura;

      -- Marca que est? usando o vencimento da fatura. Atualmente quando for o vencimento da fatura, o prazo

      -- deve ser aplicado ANTES do vencimento, diferente dos demais, onde o prazo deve ser DEPOIS do recebimento

      ie_usa_venc_fatura_w := 'S';
    else
      dt_base_ww := r_c01_w.dt_recebimento;
    end if; -- fim escolhe dada
    
    -- utiliza a menor data encontrada

    if  ((qt_dias_limite_w IS NOT NULL AND qt_dias_limite_w::text <> '') and (dt_base_ww IS NOT NULL AND dt_base_ww::text <> '') and ((dt_base_w > dt_base_ww) or (coalesce(dt_base_w::text, '') = ''))) then

      dt_base_w := dt_base_ww;
    end if;
  end loop; -- fim cursor contas
  
  -- atualiza a an?lise, se encontrar algum prazo

  if (dt_base_w IS NOT NULL AND dt_base_w::text <> '') then

  
    -- define a data de prazo

    -- Se est? usando o vencimento da fatura o prazo deve ser aplicado ANTES do vencimento, diferente dos demais, onde o prazo deve ser DEPOIS do recebimento

    if (ie_usa_venc_fatura_w = 'S') then
      
      dt_prazo_analise_w := dt_base_w - coalesce(qt_dias_limite_w,0);
    else

      dt_prazo_analise_w := dt_base_w + coalesce(qt_dias_limite_w,0);
    end if;

    update  pls_analise_conta
    set dt_prazo_analise  = dt_prazo_analise_w
    where nr_sequencia    = nr_seq_analise_p;

    if (coalesce(ie_commit_p, 'S') = 'S') then
  
      commit;
    end if;
  end if;

end if; -- fim se tiver analise informada
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_cta_pck.determinar_prazo_analise ( nr_seq_analise_p pls_analise_conta.nr_sequencia%type, ie_commit_p text default 'S') FROM PUBLIC;
