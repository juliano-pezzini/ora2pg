-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION wheb_inconsistencia.analisar (nm_tabela_p text, nm_objeto_p text, nr_seq_motivo_p bigint) RETURNS SETOF LT_ANALISE_INCONSIST_TABLE AS $body$
DECLARE

    count_w                      bigint;
    ds_analise_para_usuario_w    varchar(255);
    ie_tipo_acompanhamento_w     varchar(1);
    ie_tipo_ajuste_w             varchar(1);
    indice_w                     INDICE%rowtype;
    integridade_referencial_w    INTEGRIDADE_REFERENCIAL%rowtype;
    tasy_config_inconsistencia_w TASY_CONFIG_INCONSISTENCIA%rowtype;

BEGIN
    CALL WHEB_INCONSISTENCIA_LOG.SET_NM_TABELA(nm_tabela_p);
    CALL WHEB_INCONSISTENCIA_LOG.SET_NM_OBJETO(nm_objeto_p);
    CALL WHEB_INCONSISTENCIA_LOG.SET_NR_SEQ_MOTIVO(nr_seq_motivo_p);

    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_manual')::varchar(255);
    ie_tipo_acompanhamento_w  := current_setting('wheb_inconsistencia.ie_tipo_acompanhamento_nenhum')::varchar(1);
    ie_tipo_ajuste_w          := current_setting('wheb_inconsistencia.ie_tipo_ajuste_manual')::varchar(1);

    CASE
      -- TABELAS
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.tabela_inexistente')::bigint) THEN
      BEGIN
        IF NOT WHEB_DB.IS_PHILIPS_TABLE(nm_tabela_p) THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_tabela')::varchar(255);
        ELSE
          IF wheb_inconsistencia.do_count_config_script(nm_tabela_p, NULL, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_table')::varchar(15))) > 0 THEN
            ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_tabela')::varchar(255);
          END IF;
        END IF;
      END;

      -- CAMPOS
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.campo_inexistente')::bigint, current_setting('wheb_inconsistencia.tipo_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.tamanho_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.precisao_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.obrigatoriedade_inconsistente')::bigint) THEN
      BEGIN
        IF NOT WHEB_DB.IS_PHILIPS_FIELD(nm_tabela_p, nm_objeto_p) THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_campo')::varchar(255);
        ELSE
          IF wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_column')::varchar(15))) > 0 THEN
            ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_campo')::varchar(255);
          END IF;
        END IF;
      END;

      -- INDICES
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.indice_inexistente')::bigint, current_setting('wheb_inconsistencia.composicao_campos_indice')::bigint, current_setting('wheb_inconsistencia.ordem_campos_indice')::bigint, current_setting('wheb_inconsistencia.indice_incorreto_integridade')::bigint, current_setting('wheb_inconsistencia.indice_unico_sem_constraint')::bigint, current_setting('wheb_inconsistencia.constraint_uk_indice_incorreto')::bigint, current_setting('wheb_inconsistencia.indice_sem_atributos')::bigint) THEN
      BEGIN
        IF NOT WHEB_DB.IS_PHILIPS_INDEX(nm_tabela_p, nm_objeto_p) THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_indice')::varchar(255);
        ELSE
          indice_w := WHEB_DB.GET_INDICE(nm_tabela_p, nm_objeto_p);
          ds_analise_para_usuario_w := wheb_inconsistencia.analisar_ajuste_manual(indice_w);

          IF ds_analise_para_usuario_w = current_setting('wheb_inconsistencia.an_manual')::varchar(255) AND wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15))) > 0 THEN
            ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_indice')::varchar(255);
          END IF;
	
	  if (nr_seq_motivo_p in (current_setting('wheb_inconsistencia.composicao_campos_indice')::bigint,current_setting('wheb_inconsistencia.ordem_campos_indice')::bigint)) and (not wheb_inconsistencia.is_blocked_table(nm_tabela_p))	then
		ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_indice')::varchar(255);
	  end if;
	
        END IF;
      END;

      -- INDICES + INTEGRIDADES
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.integridade_inexistente_09')::bigint, current_setting('wheb_inconsistencia.integridade_inexistente_10')::bigint) THEN
      BEGIN
        IF WHEB_DB.IS_PHILIPS_CONSTRAINT(nm_tabela_p, nm_objeto_p) THEN
          integridade_referencial_w := WHEB_DB.GET_INTEGRIDADE_REFERENCIAL(nm_tabela_p, nm_objeto_p);
          ds_analise_para_usuario_w := wheb_inconsistencia.analisar_ajuste_manual(integridade_referencial_w);
        ELSE
          IF WHEB_DB.IS_PHILIPS_INDEX(nm_tabela_p, nm_objeto_p) THEN
            indice_w := WHEB_DB.GET_INDICE(nm_tabela_p, nm_objeto_p);
            ds_analise_para_usuario_w := wheb_inconsistencia.analisar_ajuste_manual(indice_w);
          ELSE
            ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_integridade')::varchar(255);
          END IF;
        END IF;

        IF ds_analise_para_usuario_w = current_setting('wheb_inconsistencia.an_manual')::varchar(255) AND wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15))) > 0 THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_integridade')::varchar(255);
        END IF;
      END;

      -- INTEGRIDADES
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.composicao_campos_integridade')::bigint, current_setting('wheb_inconsistencia.ordem_campos_integridade')::bigint, current_setting('wheb_inconsistencia.integridade_desabilitada')::bigint) THEN
      BEGIN
        IF NOT WHEB_DB.IS_PHILIPS_CONSTRAINT(nm_tabela_p, nm_objeto_p) THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_integridade')::varchar(255);
        ELSE
          integridade_referencial_w := WHEB_DB.GET_INTEGRIDADE_REFERENCIAL(nm_tabela_p, nm_objeto_p);
          tasy_config_inconsistencia_w := wheb_inconsistencia.get_config_auto(integridade_referencial_w);

          IF wheb_inconsistencia.is_ajusta_automaticamente(tasy_config_inconsistencia_w) THEN
            ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_recriar_integridade')::varchar(255);

            -- INTEGRIDADE DESABILITADA
            IF nr_seq_motivo_p = current_setting('wheb_inconsistencia.integridade_desabilitada')::bigint THEN

              count_w := wheb_inconsistencia.do_count_incrows(integridade_referencial_w);

              -- No inconsistent rows
              IF count_w <= 0 THEN
                ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255);
              ELSE
                CASE
                  -- Action 1
                  WHEN tasy_config_inconsistencia_w.ie_acao_prioridade1 NOT IN (current_setting('wheb_inconsistencia.domain_action_inc_script')::varchar(1), current_setting('wheb_inconsistencia.domain_action_inc_none')::varchar(1)) THEN
                    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255);

                  -- Action 2
                  WHEN tasy_config_inconsistencia_w.ie_acao_prioridade2 NOT IN (current_setting('wheb_inconsistencia.domain_action_inc_script')::varchar(1), current_setting('wheb_inconsistencia.domain_action_inc_none')::varchar(1)) THEN
                    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255);

                  -- Action 3
                  WHEN tasy_config_inconsistencia_w.ie_acao_prioridade3 NOT IN (current_setting('wheb_inconsistencia.domain_action_inc_script')::varchar(1), current_setting('wheb_inconsistencia.domain_action_inc_none')::varchar(1)) THEN
                    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255);

                  -- Action 4
                  WHEN tasy_config_inconsistencia_w.ie_acao_prioridade4 NOT IN (current_setting('wheb_inconsistencia.domain_action_inc_script')::varchar(1), current_setting('wheb_inconsistencia.domain_action_inc_none')::varchar(1)) THEN
                    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255);
                ELSE
                  ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_manual')::varchar(255);
                END CASE;
              END IF;
            END IF;
          END IF;
        END IF;

        IF ds_analise_para_usuario_w = current_setting('wheb_inconsistencia.an_manual')::varchar(255) AND wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15))) > 0 THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_integridade')::varchar(255);
        END IF;
	
	if (nr_seq_motivo_p in (current_setting('wheb_inconsistencia.composicao_campos_integridade')::bigint, current_setting('wheb_inconsistencia.ordem_campos_integridade')::bigint)) and (not wheb_inconsistencia.is_blocked_table(nm_tabela_p))	then
	    ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_integridade')::varchar(255);
	end if;
	
      END;

      -- OBJETOS
      WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.objeto_inexistente')::bigint, current_setting('wheb_inconsistencia.trigger_desabilitada')::bigint) THEN
      BEGIN
        IF NOT WHEB_DB.IS_PHILIPS_OBJECT(nm_tabela_p, nm_objeto_p) THEN
          ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_nao_eh_philips_objeto')::varchar(255);
        ELSE
		ie_tipo_ajuste_w := current_setting('wheb_inconsistencia.ie_tipo_ajuste_automatico')::varchar(1);
		IF wheb_inconsistencia.do_count_config_script(NULL, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_function')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_package')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_packagebody')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_procedure')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_trigger')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_type')::varchar(15),
                                                                         current_setting('wheb_inconsistencia.domain_obj_type_view')::varchar(15))) > 0 THEN
			ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_ajuste_base_objeto')::varchar(255);
		END IF;
        END IF;
      END;

    -- NENHUM DOS NR_SEQ_MOTIVO ANTERIORES
    ELSE
      ds_analise_para_usuario_w := current_setting('wheb_inconsistencia.an_manual')::varchar(255);
    END CASE;

    IF ds_analise_para_usuario_w IN (current_setting('wheb_inconsistencia.an_ajuste_base_campo')::varchar(255), current_setting('wheb_inconsistencia.an_ajuste_base_indice')::varchar(255), current_setting('wheb_inconsistencia.an_ajuste_base_integridade')::varchar(255),
                                     current_setting('wheb_inconsistencia.an_ajuste_base_objeto')::varchar(255), current_setting('wheb_inconsistencia.an_ajuste_base_tabela')::varchar(255), current_setting('wheb_inconsistencia.an_auto_habilitar_integridade')::varchar(255),
                                     current_setting('wheb_inconsistencia.an_auto_recriar_indice')::varchar(255), current_setting('wheb_inconsistencia.an_auto_recriar_integridade')::varchar(255)) THEN
      ie_tipo_ajuste_w := current_setting('wheb_inconsistencia.ie_tipo_ajuste_automatico')::varchar(1);
    END IF;

    IF ds_analise_para_usuario_w IN (current_setting('wheb_inconsistencia.an_manual_acompanhamento_dba')::varchar(255)) THEN
      ie_tipo_acompanhamento_w := current_setting('wheb_inconsistencia.ie_tipo_acompanhamento_dba')::varchar(1);
    END IF;

    RETURN NEXT LT_Analise_Inconsist(ds_analise_para_usuario_w, ie_tipo_acompanhamento_w, ie_tipo_ajuste_w);
    RETURN;
  END;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION wheb_inconsistencia.analisar (nm_tabela_p text, nm_objeto_p text, nr_seq_motivo_p bigint) FROM PUBLIC;
