-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION wheb_inconsistencia.ajustar (nm_tabela_p text, nm_objeto_p text, nr_seq_motivo_p bigint) RETURNS varchar AS $body$
DECLARE

    indice_w                     INDICE%rowtype;
    integridade_referencial_w    INTEGRIDADE_REFERENCIAL%rowtype;
    tasy_config_inconsistencia_w TASY_CONFIG_INCONSISTENCIA%rowtype;
    script_count_w               bigint;

BEGIN
    CALL WHEB_INCONSISTENCIA_LOG.SET_NM_TABELA(nm_tabela_p);
    CALL WHEB_INCONSISTENCIA_LOG.SET_NM_OBJETO(nm_objeto_p);
    CALL WHEB_INCONSISTENCIA_LOG.SET_NR_SEQ_MOTIVO(nr_seq_motivo_p);
    SAVEPOINT SavePoint_w;
    BEGIN
      CASE
        -- Tables
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.tabela_inexistente')::bigint) THEN
        BEGIN
          script_count_w := wheb_inconsistencia.do_count_config_script(nm_tabela_p, NULL, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_table')::varchar(15)));
		
          IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean AND NOT WHEB_DB.IS_PHILIPS_TABLE(nm_tabela_p) AND script_count_w = 0 THEN
            RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
          END IF;

          CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, NULL, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_table')::varchar(15)));
        END;

        -- Fields
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.campo_inexistente')::bigint, current_setting('wheb_inconsistencia.tipo_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.tamanho_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.precisao_campo_inconsistente')::bigint, current_setting('wheb_inconsistencia.obrigatoriedade_inconsistente')::bigint) THEN
        BEGIN
          script_count_w := wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_column')::varchar(15)));
		
          IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean AND NOT WHEB_DB.IS_PHILIPS_FIELD(nm_tabela_p, nm_objeto_p) AND script_count_w = 0 THEN
            RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
          END IF;

          CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_column')::varchar(15)));
        END;

        -- Indexes
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.indice_inexistente')::bigint, current_setting('wheb_inconsistencia.composicao_campos_indice')::bigint, current_setting('wheb_inconsistencia.ordem_campos_indice')::bigint, current_setting('wheb_inconsistencia.indice_incorreto_integridade')::bigint, current_setting('wheb_inconsistencia.indice_unico_sem_constraint')::bigint, current_setting('wheb_inconsistencia.constraint_uk_indice_incorreto')::bigint, current_setting('wheb_inconsistencia.indice_sem_atributos')::bigint) THEN
        BEGIN
          script_count_w := wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15)));

          IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean AND NOT WHEB_DB.IS_PHILIPS_INDEX(nm_tabela_p, nm_objeto_p) AND script_count_w = 0 THEN
            RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
          END IF;

          indice_w := WHEB_DB.GET_INDICE(nm_tabela_p, nm_objeto_p);

          IF wheb_inconsistencia.stop_execution(indice_w) AND (nr_seq_motivo_p not in (current_setting('wheb_inconsistencia.composicao_campos_indice')::bigint, current_setting('wheb_inconsistencia.ordem_campos_indice')::bigint)) THEN
            IF script_count_w = 0 OR wheb_inconsistencia.is_acompanhamento_dba(indice_w) THEN
              RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
            END IF;
          END IF;

          IF script_count_w > 0 THEN
            CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15)));
          ELSE
            CASE
              WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.indice_inexistente')::bigint, current_setting('wheb_inconsistencia.composicao_campos_indice')::bigint, current_setting('wheb_inconsistencia.ordem_campos_indice')::bigint, current_setting('wheb_inconsistencia.indice_sem_atributos')::bigint) THEN
              BEGIN
                IF WHEB_DB.IS_PRIMARY_KEY(indice_w) THEN
                  CALL WHEB_DB.DO_DROP_PK_REFERENCES(indice_w.NM_INDICE);
                END IF;

                CALL WHEB_DB.DO_DROP_INCORRECT_INDEX(indice_w);
                CALL WHEB_DB.DO_RECREATE_INDEX(indice_w);
              END;

              WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.indice_incorreto_integridade')::bigint, current_setting('wheb_inconsistencia.constraint_uk_indice_incorreto')::bigint) THEN
              BEGIN
                CALL WHEB_DB.DO_DROP_INCORRECT_INDEX(indice_w);
                CALL WHEB_DB.DO_RECREATE_INDEX(nm_tabela_p, nm_objeto_p);
                CALL WHEB_DB.DO_MODIFY_CONSTRAINT_INDEX(indice_w.NM_TABELA, indice_w.NM_INDICE, indice_w.NM_INDICE);
              END;

              WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.indice_unico_sem_constraint')::bigint) THEN
              BEGIN
                integridade_referencial_w := WHEB_DB.GET_INTEGRIDADE_REFERENCIAL(nm_tabela_p, nm_objeto_p);
                CALL WHEB_DB.DO_RECREATE_CONSTRAINT(integridade_referencial_w);
              END;
            END CASE;
          END IF;

        END;

        -- INDICES + INTEGRIDADES
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.integridade_inexistente_09')::bigint, current_setting('wheb_inconsistencia.integridade_inexistente_10')::bigint) THEN
        BEGIN		
          script_count_w := wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15)));
		
          IF WHEB_DB.IS_PHILIPS_CONSTRAINT(nm_tabela_p, nm_objeto_p) THEN
            integridade_referencial_w := WHEB_DB.GET_INTEGRIDADE_REFERENCIAL(nm_tabela_p, nm_objeto_p);

            IF wheb_inconsistencia.stop_execution(integridade_referencial_w) THEN
			  IF script_count_w = 0 OR wheb_inconsistencia.is_acompanhamento_dba(integridade_referencial_w) THEN
                RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
			  END IF;
            END IF;
	          tasy_config_inconsistencia_w := wheb_inconsistencia.get_config_auto(integridade_referencial_w);
	
	    begin
              IF NOT wheb_inconsistencia.habilitar_integridade(integridade_referencial_w, tasy_config_inconsistencia_w) THEN
                CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15)));
              END IF;
	    exception
	    when others then
	    	null;
	    end;
	
	    CALL WHEB_DB.DO_RECREATE_CONSTRAINT(integridade_referencial_w);
            CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15),current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15)));
	
          ELSE
            IF WHEB_DB.IS_PHILIPS_INDEX(nm_tabela_p, nm_objeto_p) THEN
              indice_w := WHEB_DB.GET_INDICE(nm_tabela_p, nm_objeto_p);

              IF wheb_inconsistencia.stop_execution(indice_w) THEN
			    IF script_count_w = 0 OR wheb_inconsistencia.is_acompanhamento_dba(indice_w) THEN
                  RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
				END IF;
              END IF;

              CALL WHEB_DB.DO_RECREATE_INDEX(indice_w);
              CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15)));
            ELSE
              IF script_count_w > 0 THEN
                CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15),current_setting('wheb_inconsistencia.domain_obj_type_index')::varchar(15), current_setting('wheb_inconsistencia.domain_obj_type_uniqueindex')::varchar(15)));
              ELSE
                RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
              END IF;
            END IF;
          END IF;
        END;

        -- INTEGRIDADES
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.composicao_campos_integridade')::bigint, current_setting('wheb_inconsistencia.ordem_campos_integridade')::bigint, current_setting('wheb_inconsistencia.integridade_desabilitada')::bigint) THEN
        BEGIN
          script_count_w := wheb_inconsistencia.do_count_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15)));

          IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean AND NOT WHEB_DB.IS_PHILIPS_CONSTRAINT(nm_tabela_p, nm_objeto_p) AND script_count_w = 0 THEN
            RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
          END IF;

          integridade_referencial_w := WHEB_DB.GET_INTEGRIDADE_REFERENCIAL(nm_tabela_p, nm_objeto_p);
	
          CASE
            WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.composicao_campos_integridade')::bigint, current_setting('wheb_inconsistencia.ordem_campos_integridade')::bigint) THEN
            BEGIN
              CALL WHEB_DB.DO_RECREATE_CONSTRAINT(integridade_referencial_w);
              CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15)));
            END;

            WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.integridade_desabilitada')::bigint) THEN
            BEGIN
              tasy_config_inconsistencia_w := wheb_inconsistencia.get_config_auto(integridade_referencial_w);
	      CALL WHEB_DB.DO_RECREATE_CONSTRAINT(integridade_referencial_w);
              IF NOT wheb_inconsistencia.habilitar_integridade(integridade_referencial_w, tasy_config_inconsistencia_w) THEN
                CALL wheb_inconsistencia.do_execute_config_script(nm_tabela_p, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_constraint')::varchar(15)));
              END IF;
            END;
          END CASE;
        END;

	--TRIGGER_DESABILITADA
	WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.trigger_desabilitada')::bigint) THEN
	BEGIN
          script_count_w := wheb_inconsistencia.do_count_config_script(null, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_trigger')::varchar(15)));

          IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean AND NOT WHEB_DB.IS_PHILIPS_OBJECT(nm_tabela_p, nm_objeto_p) and script_count_w = 0 THEN
            RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
          END IF;

          CALL wheb_inconsistencia.do_execute_config_script(NULL, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_trigger')::varchar(15)));
        END;
	
        -- OBJETOS
        WHEN nr_seq_motivo_p IN (current_setting('wheb_inconsistencia.objeto_inexistente')::bigint) THEN
        BEGIN
		script_count_w := wheb_inconsistencia.do_count_config_script(null, nm_objeto_p, WHEB_DB.GETSQL_IN(
						current_setting('wheb_inconsistencia.domain_obj_type_function')::varchar(15),
						current_setting('wheb_inconsistencia.domain_obj_type_package')::varchar(15),
						current_setting('wheb_inconsistencia.domain_obj_type_packagebody')::varchar(15),
						current_setting('wheb_inconsistencia.domain_obj_type_procedure')::varchar(15),
						current_setting('wheb_inconsistencia.domain_obj_type_type')::varchar(15),
						current_setting('wheb_inconsistencia.domain_obj_type_view')::varchar(15)));
		IF current_setting('wheb_inconsistencia.enforcevalidations')::boolean and script_count_w = 0 THEN
			begin
			
				PERFORM set_config('wheb_inconsistencia.ds_sql_w', ' select	ds_script_criacao,'||
							' nvl(ie_criptografia, ''N'') '||
							' from	tasy_versao.objeto_sistema '||
							' where	nm_objeto = :nm_objeto_p', false);

				EXECUTE current_setting('wheb_inconsistencia.ds_sql_w')::varchar(4000)
				into STRICT	current_setting('wheb_inconsistencia.ds_script_criacao_w')::objeto_sistema.ds_script_criacao%type,
						current_setting('wheb_inconsistencia.ie_criptografia_w')::objeto_sistema.ie_criptografia%type
				using   nm_objeto_p;

				if (current_setting('wheb_inconsistencia.ds_script_criacao_w')::objeto_sistema.ds_script_criacao%(type IS NOT NULL AND type::text <> '')) then
					EXECUTE current_setting('wheb_inconsistencia.ds_script_criacao_w')::objeto_sistema.ds_script_criacao%type;
					if (current_setting('wheb_inconsistencia.ie_criptografia_w')::objeto_sistema.ie_criptografia%type = 'S') then
						CALL tasy_wrapped_objetos(nm_objeto_p);
					end if;
					
					RETURN current_setting('wheb_inconsistencia.aj_retorno_sucesso')::varchar(1);
				end if;

				RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
			EXCEPTION
			WHEN OTHERS THEN
				RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
			end;
		END IF;

          CALL wheb_inconsistencia.do_execute_config_script(NULL, nm_objeto_p, WHEB_DB.GETSQL_IN(current_setting('wheb_inconsistencia.domain_obj_type_function')::varchar(15),
                                                                        current_setting('wheb_inconsistencia.domain_obj_type_package')::varchar(15),
                                                                        current_setting('wheb_inconsistencia.domain_obj_type_packagebody')::varchar(15),
                                                                        current_setting('wheb_inconsistencia.domain_obj_type_procedure')::varchar(15),
                                                                        current_setting('wheb_inconsistencia.domain_obj_type_type')::varchar(15),
                                                                        current_setting('wheb_inconsistencia.domain_obj_type_view')::varchar(15)));
        END;

      -- NENHUM DOS NR_SEQ_MOTIVO ANTERIORES
      ELSE
        RETURN current_setting('wheb_inconsistencia.aj_retorno_nada_feito')::varchar(1);
      END CASE;

      COMMIT WRITE IMMEDIATE NOWAIT;
    EXCEPTION
      WHEN OTHERS THEN
	begin
		ROLLBACK TO SavePoint_w;
	exception
	when others then
		null;
	end;

	
        CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(sqlerrm(SQLSTATE));
    END;
    CALL gravar_processo_longo('','',0);
    RETURN current_setting('wheb_inconsistencia.aj_retorno_sucesso')::varchar(1);
  END;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION wheb_inconsistencia.ajustar (nm_tabela_p text, nm_objeto_p text, nr_seq_motivo_p bigint) FROM PUBLIC;
