-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- Carregar o arquivo A560 de XML
CREATE TYPE reg_cabecalho AS (		nr_vertra_ptu_cab		varchar(2),
					cd_uni_destino_cab		varchar(4),
					cd_uni_origem_cab		varchar(4),
					tp_arquivoNDC_cab		varchar(1),
					tp_arq_parcial_cab		varchar(1),
					hash				varchar(255),	-- HASH
					dt_postagem			varchar(255),	-- DATA POSTAGEM CARIMBO CMB
					nr_protocolo			varchar(10));
CREATE TYPE reg_doc_1_nota_deb AS (	nr_doc_A500_doc_1		varchar(20),
					nr_nota_debito_doc_1		varchar(11),
					dt_emissao_ndc_doc_1		varchar(8),
					dt_ven_ndc_doc_1		varchar(8),
					vl_ndc_doc_1			varchar(15),
					nr_linha_doc_1			varchar(2),
					ds_linha_doc_1			varchar(74));
CREATE TYPE reg_doc_1_boleto AS (	nr_banco_doc_1			varchar(5),
					agencia_cd_cedente_doc_1	varchar(25),
					nosso_numero_doc_1		varchar(20),
					uso_banco_doc_1			varchar(15),
					ds_carteira_doc_1		varchar(10),
					especie_doc_1			varchar(4),
					especie_doc_doc_1		varchar(5),
					aceite_doc_1			varchar(2),
					dt_proces_doc_1			varchar(8),
					local_pgto_doc_1		varchar(60),
					obs_local_pagto_doc_1		varchar(60),
					ds_instrucao_doc_1_1    varchar(60),
					ds_instrucao_doc_1_2    varchar(60),
					ds_instrucao_doc_1_3    varchar(60),
					ds_observacao_doc_1_1    varchar(60),
					ds_observacao_doc_1_2    varchar(60),
					ds_observacao_doc_1_3    varchar(60),
					ds_observacao_doc_1_4    varchar(60),
					ds_observacao_doc_1_5    varchar(60),
					linha_digitavel_doc_1		varchar(60),
					cd_barras_doc_1			varchar(44));
CREATE TYPE reg_doc_2_nota_deb AS (	nr_doc_a500_doc2		varchar(20),
					nr_nota_debito_doc_2		varchar(11),
					dt_emissao_ndc_doc_2		varchar(8),
					dt_ven_ndc_doc_2		varchar(8),
					vl_ndc_doc_2			varchar(15),
					nr_linha_doc_2			varchar(2),
					ds_linha_doc_2			varchar(74));
CREATE TYPE reg_doc_2_boleto AS (	nr_banco_doc_2			varchar(5),
                                        agencia_cd_cedente_doc_2	varchar(25),
                                        nosso_numero_doc_2		varchar(20),
                                        uso_banco_doc_2			varchar(15),
                                        ds_carteira_doc_2		varchar(10),
                                        especie_doc_2			varchar(4),
                                        especie_doc_doc_2		varchar(5),
                                        aceite_doc_2			varchar(2),
                                        dt_proces_doc_2			varchar(8),
                                        local_pgto_doc_2		varchar(60),
                                        obs_local_pagto_doc_2		varchar(60),
                                        ds_instrucao_doc_2_1    varchar(60),
                                        ds_instrucao_doc_2_2    varchar(60),
                                        ds_instrucao_doc_2_3    varchar(60),
                                        ds_observacao_doc_2_1    varchar(60),
                                        ds_observacao_doc_2_2    varchar(60),
                                        ds_observacao_doc_2_3    varchar(60),
                                        ds_observacao_doc_2_4    varchar(60),
                                        ds_observacao_doc_2_5    varchar(60),
                                        linha_digitavel_doc_2		varchar(60),
                                        cd_barras_doc_2			varchar(44));
CREATE TYPE reg_cred AS (		nm_credora		varchar(60),
					tp_logradouro_cred	varchar(2),
					ds_lograd_cred		varchar(40),
					nr_lograd_cred		varchar(6),
					compl_lograd_cred	varchar(20),
					ds_bairro_cred		varchar(30),
					cd_munic_cred		varchar(7),
					nr_cep_cred		varchar(8),
					cd_cpf_cred		varchar(11),
					cd_cnpj_cred		varchar(14),
					tp_fone_cred		varchar(1),
					nr_ddd_cred		varchar(4),
					nr_fone_cred		varchar(9));
CREATE TYPE reg_dev AS (		nm_devedora		varchar(60),
					tp_logradouro_dev	varchar(2),
					ds_lograd_dev		varchar(40),
					nr_lograd_dev		varchar(6),
					compl_lograd_dev	varchar(20),
					ds_bairro_dev		varchar(30),
					cd_munic_dev		varchar(7),
					nr_cep_dev		varchar(8),
					cd_cpf_dev		varchar(11),
					cd_cnpj_dev		varchar(14),
					tp_fone_dev		varchar(1),
					nr_ddd_dev		varchar(4),
					nr_fone_dev		varchar(9));


CREATE OR REPLACE PROCEDURE ptu_a560_imp_pck.carregar_arq_a560_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nr_seq_camara_contest_p ptu_camara_contestacao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_nota_debito_p INOUT bigint) AS $body$
DECLARE


-- CABECALHO										
	-- NUMERO PROTOCOLO CARIMBO CMB					
type tab_cabecalho is table of 		reg_cabecalho index by integer;
------------------------------------------------------ ------DOCUMENTO 1 ---------------------------------------------------------------------
-- DOCUMENTO 1 - NOTA DEBITO	
type tab_doc_1_nota_deb is table of 	reg_doc_1_nota_deb index by integer;

-- DOCUMENTO 1 - BOLETO										
type tab_doc_1_boleto is table of 	reg_doc_1_boleto index by integer;

------------------------------------------------------ ------DOCUMENTO 2---------------------------------------------------------------------
-- DOCUMENTO 2 - NOTA DEBITO	
type tab_doc_2_nota_deb is table of 	reg_doc_2_nota_deb index by integer;

-- DOCUMENTO 2 - BOLETO										
type tab_doc_2_boleto is table of 	reg_doc_2_boleto index by integer;

-- DADOS CREDORA										
type tab_cred is table of 		reg_cred index by integer;

-- DADOS DEVEDORA										
type tab_dev is table of 		reg_dev index by integer;

-- VARIAVEIS CABECALHO
vet_tab_cabecalho_w		tab_cabecalho;
ica				integer;
-------------------------- DOCUMENTO 1 ------------------------------------
-- NOTA DEBITO
vet_tab_doc_1_nota_deb_w	tab_doc_1_nota_deb;
idoc1notadeb			integer;

-- BOLETO
vet_tab_doc_1_bol_w		tab_doc_1_boleto;
idoc1bol			integer;
-------------------------- DOCUMENTO 2 ------------------------------------
-- NOTA DEBITO
vet_tab_doc_2_nota_deb_w	tab_doc_2_nota_deb;
idoc2notadeb			integer;

-- BOLETO
vet_tab_doc_2_bol_w		tab_doc_2_boleto;
idoc2bol			integer;
---------------------------------------------------------------------------------
-- VARIAVEIS DADOS CREDORA
vet_tab_cred_w			tab_cred;
icred				integer;

-- VARIAVEIS DADOS CREDORA
vet_tab_dev_w			tab_dev;
idev				integer;

-- Variaveis
nr_seq_ptu_fatura_w		bigint;
nr_seq_nota_debito_w		bigint;
nr_seq_nota_deb_bol_w		bigint;
nr_seq_nota_conclusao_w		bigint;
nr_seq_pls_fatura_w		bigint;
cd_unimed_origem_w		varchar(4);
nr_fatura_w			ptu_nota_debito.nr_fatura%type;
nr_nota_credito_debito_a500_w	ptu_nota_debito.nr_nota_credito_debito_a500%type;
nr_nota_debito_w		bigint;
tp_arquivo_w			varchar(1);
nr_seq_lote_contest_w		bigint;
qt_registro_w			bigint := 0;
ie_parametro_12_w		funcao_param_usuario.vl_parametro%type;
qt_inconsistente_w		integer := 0;
nr_fatura_contest_w		ptu_fatura.nr_fatura%type;
nr_nota_cred_deb_contest_w	ptu_fatura.nr_nota_credito_debito%type;
ie_novo_imp_a550_w		pls_visible_false.ie_novo_imp_a550%type;
tp_documento_1_w		ptu_fatura.tp_documento_1%type;
nr_fatura_contest_tit_w		pls_fatura.nr_titulo%type;
ds_cidade_w 			varchar(30);
cd_uf_w				varchar(2);
vl_total_fatura_w		ptu_fatura.vl_total_fatura%type;
vl_total_ndc_w      		ptu_fatura.vl_total_ndc%type;
dt_emissao_fatura_w		ptu_fatura.dt_emissao_fatura%type;
tp_arq_parcial_w      		ptu_nota_debito.tp_arq_parcial%type;

-- CURSORES
C01 CURSOR( nr_seq_arq_xml_pc	ptu_aviso_arq_xml.nr_sequencia%type ) FOR
	SELECT	xml.createxml(ds_arquivo) ds_arq_xml
	from	ptu_aviso_arq_xml
	where	nr_sequencia = nr_seq_arq_xml_pc;
	
	-- CABECALHO
	c_cabecalho CURSOR( ds_arq_xml_pc		xml ) FOR
		SELECT	*
		from	xmltable('/ptuA560/cabecalho' passing ds_arq_xml_pc columns
			nr_vertra_ptu_cab			varchar(1)	path	'nrVerTra_PTU',
			unimed_cab				xml		path	'unimed',
			tp_arquivoNDC_cab			varchar(1)	path	'tp_arquivoNDC',
			tp_arq_parcial_cab			varchar(1)	path	'tp_arq_parcial');
			
		c_cabecalho_unimed CURSOR( unimed_pc		xml ) FOR
			SELECT	*
			from	xmltable('/unimed' passing unimed_pc columns
				cd_uni_destino_cab			varchar(4)	path	'cd_Uni_Destino',
				cd_uni_origem_cab			varchar(4)	path	'cd_Uni_Origem');
				
	-- ARQUIVO A560
	c_arquivo_A560 CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA560/arquivoA560' passing ds_arq_xml_pc columns
		documento1				xml		path	'Documento1',
		documento2				xml		path	'Documento2',
		dados_credora				xml		path	'Dados_Credora',
		dados_devedora				xml		path	'Dados_Devedora');

		-- DOCUMENTO 1
		c_documento_1 CURSOR( documento_1_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Documento1' passing documento_1_pc columns
				nr_doc_A500_doc_1		varchar(20)	path	'nr_Doc_A500',
				nota_debito_doc_1		xml		path	'Nota_Debito',
				boleto_doc_1			xml		path	'Boleto');
			
			-- NOTA DEBITO DOC 1
			c_nota_debito_doc_1 CURSOR( nota_debito_doc_1_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Nota_Debito' passing nota_debito_doc_1_pc columns
					nr_nota_debito_doc_1		varchar(11)		path	'nr_Nota_Debito',
					dt_emissao_ndc_doc_1		varchar(8)		path	'dt_Emissao_NDC',
					dt_ven_ndc_doc_1		varchar(8)		path	'dt_Ven_NDC',
					vl_ndc_doc_1			varchar(15)		path	'vl_NDC',
					linha_doc_1			xml			path	'Linha');

				-- LINHA - NOTA DEBITO DOC 1
				c_linha_nota_deb_doc_1 CURSOR( linha_nota_deb_doc_1_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Linha' passing linha_nota_deb_doc_1_pc columns
						nr_linha_doc_1		varchar(2)		path	'nr_Linha',
						ds_linha_doc_1		varchar(74)		path	'ds_linha');
					
			-- BOLETO DOC 1
			c_boleto_doc_1 CURSOR( boleto_doc_1_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Boleto' passing boleto_doc_1_pc columns					
					nr_banco_doc_1			varchar(5)		path	'nr_Banco',
					agencia_cd_cedente_doc_1	varchar(25)		path	'agencia_Cd_Cedente',
					nosso_numero_doc_1		varchar(20)		path	'nosso_Numero',
					uso_banco_doc_1			varchar(15)		path	'uso_banco',
					ds_carteira_doc_1		varchar(10)		path	'ds_carteira',
					especie_doc_1			varchar(4)		path	'especie',
					especie_doc_doc_1		varchar(5)		path	'especie_doc',
					aceite_doc_1			varchar(2)		path	'aceite',
					dt_proces_doc_1			varchar(8)		path	'dt_proces',
					local_pgto_doc_1		varchar(60)		path	'local_pgto',
					obs_local_pagto_doc_1		varchar(60)		path	'obs_local_pagto',
					ds_instrucao_doc_1_1    varchar(60)    path  'ds_instrucao[1]',
					ds_instrucao_doc_1_2    varchar(60)    path  'ds_instrucao[2]',
					ds_instrucao_doc_1_3    varchar(60)    path  'ds_instrucao[3]',
					ds_observacao_doc_1_1    varchar(60)    path  'ds_observacao[1]',
					ds_observacao_doc_1_2    varchar(60)    path  'ds_observacao[2]',
					ds_observacao_doc_1_3    varchar(60)    path  'ds_observacao[3]',
					ds_observacao_doc_1_4    varchar(60)    path  'ds_observacao[4]',
					ds_observacao_doc_1_5    varchar(60)    path  'ds_observacao[5]',
					linha_digitavel_doc_1		varchar(60)		path	'linha_digitavel',
					cd_barras_doc_1			varchar(44)		path	'cd_barras');
			
		-- DOCUMENTO 2
		c_documento_2 CURSOR( documento_2_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Documento2' passing documento_2_pc columns
				nr_doc_a500_doc2		varchar(20)	path	'nr_Doc_A500',
				nota_debito_doc_2		xml		path	'Nota_Debito',
				boleto_doc_2			xml		path	'Boleto');
			
			-- NOTA DEBITO DOC 2
			c_nota_debito_doc_2 CURSOR( nota_debito_doc_2_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Nota_Debito' passing nota_debito_doc_2_pc columns
					nr_nota_debito_doc_2		varchar(11)		path	'nr_Nota_Debito',
					dt_emissao_ndc_doc_2		varchar(8)		path	'dt_Emissao_NDC',
					dt_ven_ndc_doc_2		varchar(8)		path	'dt_Ven_NDC',
					vl_ndc_doc_2			varchar(15)		path	'vl_NDC',
					linha_doc_2			xml			path	'Linha');
			
				-- LINHA - NOTA DEBITO DOC 2
				c_linha_nota_deb_doc_2 CURSOR( linha_nota_deb_doc_2_pc		xml ) FOR
					SELECT	*
					from	xmltable('/Linha' passing linha_nota_deb_doc_2_pc columns
						nr_linha_doc_2		varchar(2)		path	'nr_Linha',
						ds_linha_doc_2		varchar(74)		path	'ds_linha');
			
			-- BOLETO DOC 2
			c_boleto_doc_2 CURSOR( boleto_doc_2_pc		xml ) FOR
				SELECT	*
				from	xmltable('/Boleto' passing boleto_doc_2_pc columns					
					nr_banco_doc_2			varchar(5)		path	'nr_Banco',
					agencia_cd_cedente_doc_2	varchar(25)		path	'agencia_Cd_Cedente',
					nosso_numero_doc_2		varchar(20)		path	'nosso_Numero',
					uso_banco_doc_2			varchar(15)		path	'uso_banco',
					ds_carteira_doc_2		varchar(10)		path	'ds_carteira',
					especie_doc_2			varchar(4)		path	'especie',
					especie_doc_doc_2		varchar(5)		path	'especie_doc',
					aceite_doc_2			varchar(2)		path	'aceite',
					dt_proces_doc_2			varchar(8)		path	'dt_proces',
					local_pgto_doc_2		varchar(60)		path	'local_pgto',
					obs_local_pagto_doc_2		varchar(60)		path	'obs_local_pagto',
					ds_instrucao_doc_2_1    varchar(60)    path  'ds_instrucao[1]',
					ds_instrucao_doc_2_2    varchar(60)    path  'ds_instrucao[2]',
					ds_instrucao_doc_2_3    varchar(60)    path  'ds_instrucao[3]',
					ds_observacao_doc_2_1    varchar(60)    path  'ds_observacao[1]',
					ds_observacao_doc_2_2    varchar(60)    path  'ds_observacao[2]',
					ds_observacao_doc_2_3    varchar(60)    path  'ds_observacao[3]',
					ds_observacao_doc_2_4    varchar(60)    path  'ds_observacao[4]',
					ds_observacao_doc_2_5    varchar(60)    path  'ds_observacao[5]',
					linha_digitavel_doc_2		varchar(60)		path	'linha_digitavel',
					cd_barras_doc_2			varchar(44)		path	'cd_barras');
				
		-- DADOS CREDORA
		c_dados_credora CURSOR( dados_credora_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Dados_Credora' passing dados_credora_pc columns
				nm_credora		varchar(60)		path	'nm_credora',
				info_endereco_cred	xml			path	'info_endereco',
				cpf_cnpj_cred		xml			path	'cpf_cnpj',
				telefone_cred		xml			path	'telefone');
			
			-- INFO ENDERECO - CREDORA
			c_info_endereco_cred CURSOR( info_endereco_cred_pc		xml ) FOR
				SELECT	*
				from	xmltable('/info_endereco' passing info_endereco_cred_pc columns
					tp_logradouro_cred	varchar(2)		path	'tp_logradouro',
					ds_lograd_cred		varchar(40)		path	'ds_lograd',
					nr_lograd_cred		varchar(6)		path	'nr_lograd',
					compl_lograd_cred	varchar(20)		path	'compl_lograd',
					ds_bairro_cred		varchar(30)		path	'ds_bairro',
					cd_munic_cred		varchar(7)		path	'cd_munic',
					nr_cep_cred		varchar(8)		path	'nr_cep');
	
			-- CPF_CNPJ - CREDORA
			c_cpf_cnpj_cred CURSOR( cpf_cnpj_cred_pc		xml ) FOR
				SELECT	*
				from	xmltable('/cpf_cnpj' passing cpf_cnpj_cred_pc columns
					cd_cpf_cred	varchar(11)		path	'cd_cpf',
					cd_cnpj_cred	varchar(14)		path	'cd_cnpj');
					
			-- TELEFONE - CREDORA
			c_telefone_cred CURSOR( telefone_cred_pc		xml ) FOR
				SELECT	*
				from	xmltable('/telefone' passing telefone_cred_pc columns
					tp_fone_cred	varchar(1)		path	'tp_fone',
					nr_ddd_cred	varchar(4)		path	'nr_ddd',
					nr_fone_cred	varchar(9)		path	'nr_fone');
					
					
					
		-- DADOS DEVEDORA
		c_dados_devedora CURSOR( dados_devedora_pc		xml ) FOR
			SELECT	*
			from	xmltable('/Dados_Devedora' passing dados_devedora_pc columns
				nm_devedora		varchar(60)		path	'nm_devedora',
				info_endereco_dev	xml			path	'info_endereco',
				cpf_cnpj_dev		xml			path	'cpf_cnpj',
				telefone_dev		xml			path	'telefone');
				
			-- INFO ENDERECO - DEVEDORA
			c_info_endereco_dev CURSOR( info_endereco_dev_pc		xml ) FOR
				SELECT	*
				from	xmltable('/info_endereco' passing info_endereco_dev_pc columns
					tp_logradouro_dev	varchar(2)		path	'tp_logradouro',
					ds_lograd_dev		varchar(40)		path	'ds_lograd',
					nr_lograd_dev		varchar(6)		path	'nr_lograd',
					compl_lograd_dev	varchar(20)		path	'compl_lograd',
					ds_bairro_dev		varchar(30)		path	'ds_bairro',
					cd_munic_dev		varchar(7)		path	'cd_munic',
					nr_cep_dev		varchar(8)		path	'nr_cep');
					
			-- CPF_CNPJ - DEVEDORA
			c_cpf_cnpj_dev CURSOR( cpf_cnpj_dev_pc		xml ) FOR
				SELECT	*
				from	xmltable('/cpf_cnpj' passing cpf_cnpj_dev_pc columns
					cd_cpf_dev	varchar(11)		path	'cd_cpf',
					cd_cnpj_dev	varchar(14)		path	'cd_cnpj');
					
			-- TELEFONE - DEVEDORA
			c_telefone_dev CURSOR( telefone_dev_pc		xml ) FOR
				SELECT	*
				from	xmltable('/telefone' passing telefone_dev_pc columns
					tp_fone_dev	varchar(1)		path	'tp_fone',
					nr_ddd_dev	varchar(4)		path	'nr_ddd',
					nr_fone_dev	varchar(9)		path	'nr_fone');
	
	-- HASH
	c_hash CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA560' passing ds_arq_xml_pc columns
		hash					varchar(255)	path	'hash');
	
	-- CARIMBO CMB
	c_carimbo_cmb CURSOR( ds_arq_xml_pc		xml ) FOR
	SELECT	*
	from	xmltable('/ptuA560/carimboCMB' passing ds_arq_xml_pc columns
		dt_postagem				varchar(21)	path	'dt_postagem',
		nr_protocolo				varchar(10)	path	'nr_protocolo');
		
BEGIN


CALL ptu_a550_imp_pck.prepara_arquivo(nr_seq_arq_xml_p);
		
-- ARQUIVO XML
for r_c01_w in c01( nr_seq_arq_xml_p ) loop

	-- CABECALHO
	for r_cabecalho_w in c_cabecalho( r_c01_w.ds_arq_xml ) loop
	
		ica := vet_tab_cabecalho_w.count + 1;
			
			
		vet_tab_cabecalho_w[ica].nr_vertra_ptu_cab		:= r_cabecalho_w.nr_vertra_ptu_cab;
		
		for r_cabecalho_unimed_w in c_cabecalho_unimed( r_cabecalho_w.unimed_cab ) loop
			vet_tab_cabecalho_w[ica].cd_uni_destino_cab		:= r_cabecalho_unimed_w.cd_uni_destino_cab;
			vet_tab_cabecalho_w[ica].cd_uni_origem_cab		:= r_cabecalho_unimed_w.cd_uni_origem_cab;
		end loop;
		
		vet_tab_cabecalho_w[ica].tp_arquivoNDC_cab		:= r_cabecalho_w.tp_arquivoNDC_cab;
		vet_tab_cabecalho_w[ica].tp_arq_parcial_cab		:= r_cabecalho_w.tp_arq_parcial_cab;
		
		-- HASH
		for r_hash_w in c_hash( r_c01_w.ds_arq_xml ) loop
			vet_tab_cabecalho_w[ica].hash				:= r_hash_w.hash;
		end loop;
		
		-- CARIMBO CMB
		for r_carimbo_cmb in c_carimbo_cmb( r_c01_w.ds_arq_xml ) loop
			vet_tab_cabecalho_w[ica].dt_postagem			:= r_carimbo_cmb.dt_postagem;
			vet_tab_cabecalho_w[ica].nr_protocolo			:= r_carimbo_cmb.nr_protocolo;
		end loop;
		
		if (vet_tab_cabecalho_w[ica](.dt_postagem IS NOT NULL AND .dt_postagem::text <> '')) then
			vet_tab_cabecalho_w[ica].dt_postagem			:=  to_char(to_date(substr(vet_tab_cabecalho_w[ica].dt_postagem,1,18), 'yyyy/mm/ddhh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
		end if;	
	end loop;
	
	-- ARQUIVO A560
	for r_arquivo_A560_w in c_arquivo_A560( r_c01_w.ds_arq_xml ) loop
	
		-- DOCUMENTO 1
		for r_documento_1_w in c_documento_1( r_arquivo_A560_w.documento1 ) loop
			
			idoc1notadeb	:= vet_tab_doc_1_nota_deb_w.count + 1;
			
			vet_tab_doc_1_nota_deb_w[idoc1notadeb].nr_doc_A500_doc_1	:= r_documento_1_w.nr_doc_A500_doc_1;
			
			-- NOTA DEBITO DOC 1
			for r_nota_debito_doc_1_w in c_nota_debito_doc_1( r_documento_1_w.nota_debito_doc_1 ) loop
			
				vet_tab_doc_1_nota_deb_w[idoc1notadeb].nr_nota_debito_doc_1		:= r_nota_debito_doc_1_w.nr_nota_debito_doc_1;
			        vet_tab_doc_1_nota_deb_w[idoc1notadeb].dt_emissao_ndc_doc_1		:= r_nota_debito_doc_1_w.dt_emissao_ndc_doc_1;
			        vet_tab_doc_1_nota_deb_w[idoc1notadeb].dt_ven_ndc_doc_1			:= r_nota_debito_doc_1_w.dt_ven_ndc_doc_1;
			        vet_tab_doc_1_nota_deb_w[idoc1notadeb].vl_ndc_doc_1			:= r_nota_debito_doc_1_w.vl_ndc_doc_1;
				
				-- LINHA DOCUMENTO 1
				for r_linha_nota_deb_doc_1_w in c_linha_nota_deb_doc_1( r_nota_debito_doc_1_w.linha_doc_1 ) loop
					vet_tab_doc_1_nota_deb_w[idoc1notadeb].nr_linha_doc_1			:= r_linha_nota_deb_doc_1_w.nr_linha_doc_1;
					vet_tab_doc_1_nota_deb_w[idoc1notadeb].ds_linha_doc_1			:= r_linha_nota_deb_doc_1_w.ds_linha_doc_1;
				end loop;	
			end loop;
			
			-- BOLETO DOCUMENTO 1
			for r_boleto_doc_1_w in c_boleto_doc_1( r_documento_1_w.boleto_doc_1 ) loop
			
				idoc1bol := vet_tab_doc_1_bol_w.count + 1;
		
				vet_tab_doc_1_bol_w[idoc1bol].nr_banco_doc_1 				:= r_boleto_doc_1_w.nr_banco_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].agencia_cd_cedente_doc_1 			:= r_boleto_doc_1_w.agencia_cd_cedente_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].nosso_numero_doc_1 			:= r_boleto_doc_1_w.nosso_numero_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].uso_banco_doc_1 				:= r_boleto_doc_1_w.uso_banco_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].ds_carteira_doc_1 			:= r_boleto_doc_1_w.ds_carteira_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].especie_doc_1 				:= r_boleto_doc_1_w.especie_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].especie_doc_doc_1 			:= r_boleto_doc_1_w.especie_doc_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].aceite_doc_1 				:= r_boleto_doc_1_w.aceite_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].dt_proces_doc_1 				:= r_boleto_doc_1_w.dt_proces_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].local_pgto_doc_1 				:= r_boleto_doc_1_w.local_pgto_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].obs_local_pagto_doc_1 			:= r_boleto_doc_1_w.obs_local_pagto_doc_1;
				vet_tab_doc_1_bol_w[idoc1bol].ds_instrucao_doc_1_1       := r_boleto_doc_1_w.ds_instrucao_doc_1_1;
				vet_tab_doc_1_bol_w[idoc1bol].ds_instrucao_doc_1_2       := r_boleto_doc_1_w.ds_instrucao_doc_1_2;
				vet_tab_doc_1_bol_w[idoc1bol].ds_instrucao_doc_1_3       := r_boleto_doc_1_w.ds_instrucao_doc_1_3;
				vet_tab_doc_1_bol_w[idoc1bol].ds_observacao_doc_1_1       := r_boleto_doc_1_w.ds_observacao_doc_1_1;
				vet_tab_doc_1_bol_w[idoc1bol].ds_observacao_doc_1_2       := r_boleto_doc_1_w.ds_observacao_doc_1_2;
				vet_tab_doc_1_bol_w[idoc1bol].ds_observacao_doc_1_3       := r_boleto_doc_1_w.ds_observacao_doc_1_3;
				vet_tab_doc_1_bol_w[idoc1bol].ds_observacao_doc_1_4       := r_boleto_doc_1_w.ds_observacao_doc_1_4;
				vet_tab_doc_1_bol_w[idoc1bol].ds_observacao_doc_1_5       := r_boleto_doc_1_w.ds_observacao_doc_1_5;
				vet_tab_doc_1_bol_w[idoc1bol].linha_digitavel_doc_1 			:= r_boleto_doc_1_w.linha_digitavel_doc_1;	
				vet_tab_doc_1_bol_w[idoc1bol].cd_barras_doc_1 				:= r_boleto_doc_1_w.cd_barras_doc_1;				
			end loop;
		end loop;
		
		-- DOCUMENTO 2
		for r_documento_2_w in c_documento_2( r_arquivo_A560_w.documento2 ) loop
		
			idoc2notadeb	:= vet_tab_doc_2_nota_deb_w.count + 1;
			
			vet_tab_doc_2_nota_deb_w[idoc2notadeb].nr_doc_a500_doc2		:= r_documento_2_w.nr_doc_a500_doc2;
			
			-- NOTA DEBITO DOCUMENTO 2
			for r_nota_debito_doc_2_w in c_nota_debito_doc_2( r_documento_2_w.nota_debito_doc_2 ) loop
			
				vet_tab_doc_2_nota_deb_w[idoc2notadeb].nr_nota_debito_doc_2		:= r_nota_debito_doc_2_w.nr_nota_debito_doc_2;
				vet_tab_doc_2_nota_deb_w[idoc2notadeb].dt_emissao_ndc_doc_2		:= r_nota_debito_doc_2_w.dt_emissao_ndc_doc_2;
				vet_tab_doc_2_nota_deb_w[idoc2notadeb].dt_ven_ndc_doc_2			:= r_nota_debito_doc_2_w.dt_ven_ndc_doc_2;
				vet_tab_doc_2_nota_deb_w[idoc2notadeb].vl_ndc_doc_2			:= r_nota_debito_doc_2_w.vl_ndc_doc_2;
				
				-- LINHA DOCUMENTO 2
				for r_linha_nota_deb_doc_2_w in c_linha_nota_deb_doc_2( r_nota_debito_doc_2_w.linha_doc_2 ) loop
					vet_tab_doc_2_nota_deb_w[idoc2notadeb].nr_linha_doc_2			:= r_linha_nota_deb_doc_2_w.nr_linha_doc_2;
					vet_tab_doc_2_nota_deb_w[idoc2notadeb].ds_linha_doc_2			:= r_linha_nota_deb_doc_2_w.ds_linha_doc_2;
				end loop;
			end loop;
			
			-- BOLETO DOCUMENTO 2
			for r_boleto_doc_2_w in c_boleto_doc_2( r_documento_2_w.boleto_doc_2 ) loop
			
				vet_tab_doc_2_bol_w[idoc2bol].nr_banco_doc_2 				:= r_boleto_doc_2_w.nr_banco_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].agencia_cd_cedente_doc_2 			:= r_boleto_doc_2_w.agencia_cd_cedente_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].nosso_numero_doc_2 			:= r_boleto_doc_2_w.nosso_numero_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].uso_banco_doc_2 				:= r_boleto_doc_2_w.uso_banco_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].ds_carteira_doc_2 			:= r_boleto_doc_2_w.ds_carteira_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].especie_doc_2 				:= r_boleto_doc_2_w.especie_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].especie_doc_doc_2 			:= r_boleto_doc_2_w.especie_doc_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].aceite_doc_2 				:= r_boleto_doc_2_w.aceite_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].dt_proces_doc_2 				:= r_boleto_doc_2_w.dt_proces_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].local_pgto_doc_2 				:= r_boleto_doc_2_w.local_pgto_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].obs_local_pagto_doc_2 			:= r_boleto_doc_2_w.obs_local_pagto_doc_2;
				vet_tab_doc_2_bol_w[idoc2bol].ds_instrucao_doc_2_1       := r_boleto_doc_2_w.ds_instrucao_doc_2_1;
				vet_tab_doc_2_bol_w[idoc2bol].ds_instrucao_doc_2_2       := r_boleto_doc_2_w.ds_instrucao_doc_2_2;
				vet_tab_doc_2_bol_w[idoc2bol].ds_instrucao_doc_2_3       := r_boleto_doc_2_w.ds_instrucao_doc_2_3;
				vet_tab_doc_2_bol_w[idoc2bol].ds_observacao_doc_2_1       := r_boleto_doc_2_w.ds_observacao_doc_2_1;
				vet_tab_doc_2_bol_w[idoc2bol].ds_observacao_doc_2_2       := r_boleto_doc_2_w.ds_observacao_doc_2_2;
				vet_tab_doc_2_bol_w[idoc2bol].ds_observacao_doc_2_3       := r_boleto_doc_2_w.ds_observacao_doc_2_3;
				vet_tab_doc_2_bol_w[idoc2bol].ds_observacao_doc_2_4       := r_boleto_doc_2_w.ds_observacao_doc_2_4;
				vet_tab_doc_2_bol_w[idoc2bol].ds_observacao_doc_2_5       := r_boleto_doc_2_w.ds_observacao_doc_2_5;
				vet_tab_doc_2_bol_w[idoc2bol].linha_digitavel_doc_2 			:= r_boleto_doc_2_w.linha_digitavel_doc_2;	
				vet_tab_doc_2_bol_w[idoc2bol].cd_barras_doc_2 				:= r_boleto_doc_2_w.cd_barras_doc_2;				
			end loop;
		end loop;
		
		-- DADOS CREDORA
		for r_dados_credora_w in c_dados_credora( r_arquivo_A560_w.dados_credora ) loop
			
			icred := vet_tab_cred_w.count + 1;

			vet_tab_cred_w[icred].nm_credora := r_dados_credora_w.nm_credora;
			
			-- INFORMACAO ENDERECO CREDORA
			for r_info_endereco_cred_w in c_info_endereco_cred( r_dados_credora_w.info_endereco_cred ) loop
				vet_tab_cred_w[icred].tp_logradouro_cred 				:= r_info_endereco_cred_w.tp_logradouro_cred;
				vet_tab_cred_w[icred].ds_lograd_cred 					:= r_info_endereco_cred_w.ds_lograd_cred;
				vet_tab_cred_w[icred].nr_lograd_cred 					:= r_info_endereco_cred_w.nr_lograd_cred;
				vet_tab_cred_w[icred].compl_lograd_cred 				:= r_info_endereco_cred_w.compl_lograd_cred;
				vet_tab_cred_w[icred].ds_bairro_cred 					:= r_info_endereco_cred_w.ds_bairro_cred;
				vet_tab_cred_w[icred].cd_munic_cred 					:= r_info_endereco_cred_w.cd_munic_cred;
				vet_tab_cred_w[icred].nr_cep_cred 					:= r_info_endereco_cred_w.nr_cep_cred;
			end loop;
			
			-- CPF/CNPJ CREDORA
			for r_cpf_cnpj_cred_w in c_cpf_cnpj_cred( r_dados_credora_w.cpf_cnpj_cred ) loop
				vet_tab_cred_w[icred].cd_cpf_cred 					:= r_cpf_cnpj_cred_w.cd_cpf_cred;
				vet_tab_cred_w[icred].cd_cnpj_cred 					:= r_cpf_cnpj_cred_w.cd_cnpj_cred;
			end loop;
			
			-- TELEFONE CREDORA
			for r_telefone_cred_w in c_telefone_cred( r_dados_credora_w.telefone_cred ) loop
				vet_tab_cred_w[icred].tp_fone_cred 					:= r_telefone_cred_w.tp_fone_cred;
				vet_tab_cred_w[icred].nr_ddd_cred 					:= r_telefone_cred_w.nr_ddd_cred;
				vet_tab_cred_w[icred].nr_fone_cred 					:= r_telefone_cred_w.nr_fone_cred;
			end loop;
		end loop;
		
		-- DADOS DEVEDORA
		for r_dados_devedora_w in c_dados_devedora( r_arquivo_A560_w.dados_devedora ) loop
			
			idev := vet_tab_dev_w.count + 1;

			vet_tab_dev_w[idev].nm_devedora := r_dados_devedora_w.nm_devedora;
			
			-- INFORMACAO ENDERECO DEVEDORA
			for r_info_endereco_dev_w in c_info_endereco_dev( r_dados_devedora_w.info_endereco_dev ) loop
				vet_tab_dev_w[idev].tp_logradouro_dev 		:= r_info_endereco_dev_w.tp_logradouro_dev;
				vet_tab_dev_w[idev].ds_lograd_dev 		:= r_info_endereco_dev_w.ds_lograd_dev;
				vet_tab_dev_w[idev].nr_lograd_dev 		:= r_info_endereco_dev_w.nr_lograd_dev;
				vet_tab_dev_w[idev].compl_lograd_dev 		:= r_info_endereco_dev_w.compl_lograd_dev;
				vet_tab_dev_w[idev].ds_bairro_dev 		:= r_info_endereco_dev_w.ds_bairro_dev;
				vet_tab_dev_w[idev].cd_munic_dev 		:= r_info_endereco_dev_w.cd_munic_dev;
				vet_tab_dev_w[idev].nr_cep_dev 			:= r_info_endereco_dev_w.nr_cep_dev;
			end loop;
			
			-- CPF/CNPJ DEVEDORA
			for r_cpf_cnpj_dev_w in c_cpf_cnpj_dev( r_dados_devedora_w.cpf_cnpj_dev ) loop
				vet_tab_dev_w[idev].cd_cpf_dev 		:= r_cpf_cnpj_dev_w.cd_cpf_dev;
				vet_tab_dev_w[idev].cd_cnpj_dev 	:= r_cpf_cnpj_dev_w.cd_cnpj_dev;
			end loop;
			
			-- TELEFONE DEVEDORA
			for r_telefone_dev_w in c_telefone_dev( r_dados_devedora_w.telefone_dev ) loop
				vet_tab_dev_w[idev].tp_fone_dev 	:= r_telefone_dev_w.tp_fone_dev;
				vet_tab_dev_w[idev].nr_ddd_dev 		:= r_telefone_dev_w.nr_ddd_dev;
				vet_tab_dev_w[idev].nr_fone_dev 	:= r_telefone_dev_w.nr_fone_dev;
			end loop;
		end loop;
	end loop;
end loop;

-- CABECALHO
for i in 1..vet_tab_cabecalho_w.count loop
	begin
	select	nr_seq_ptu_fatura,
		nr_seq_lote_contest,
		nr_seq_pls_fatura
	into STRICT	nr_seq_ptu_fatura_w,
		nr_seq_lote_contest_w,
		nr_seq_pls_fatura_w
	from	pls_lote_contestacao	c,
		ptu_camara_contestacao	b
	where	c.nr_sequencia	= b.nr_seq_lote_contest
	and	b.nr_sequencia	= nr_seq_camara_contest_p;
	exception
	when others then
		nr_seq_ptu_fatura_w	:= null;
		nr_seq_lote_contest_w	:= null;
		nr_seq_pls_fatura_w	:= null;
	end;
	
	select  count(1)
	into STRICT    qt_registro_w
	from    pls_lote_discussao
	where   nr_seq_lote_contest	= nr_seq_lote_contest_w
	and	ie_tipo_arquivo		<> '1'
	and     ie_status		= 'F';

	if (qt_registro_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1076872);
	end if;
	
	Obter_Param_Usuario(1334, 12, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_12_w);
	
	if (coalesce(ie_parametro_12_w, 'S') = 'N') then
		select	count(1)
		into STRICT	qt_inconsistente_w
		
		where	exists (SELECT	1
				from	pls_conta_proc		x,
					pls_contestacao_proc 	c,
					pls_contestacao		b,
					pls_lote_contestacao	a
				where	a.nr_sequencia	= b.nr_seq_lote
				and	b.nr_sequencia	= c.nr_seq_contestacao
				and	x.nr_sequencia	= c.nr_seq_conta_proc
				and	coalesce(x.cd_procedimento::text, '') = ''
				and	a.nr_sequencia	= nr_seq_lote_contest_w
				
union

				SELECT	1
				from	pls_conta_mat		x,
					pls_contestacao_mat 	c,
					pls_contestacao		b,
					pls_lote_contestacao	a
				where	a.nr_sequencia	= b.nr_seq_lote
				and	b.nr_sequencia	= c.nr_seq_contestacao
				and	x.nr_sequencia	= c.nr_seq_conta_mat
				and	coalesce(x.nr_seq_material::text, '') = ''
				and	a.nr_sequencia	= nr_seq_lote_contest_w);
				
		if (qt_inconsistente_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(291156);
		end if;
	end if;
	
	select	coalesce(max(ie_novo_imp_a550),'N')
	into STRICT	ie_novo_imp_a550_w
	from	pls_visible_false
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	-- Caso esteja utilizando a novo contestacao, permitir importar arquivo A560 com lote de discussao em aberto.
	if (ie_novo_imp_a550_w = 'N') then
		select	count(1)
		into STRICT	qt_inconsistente_w
		from	pls_lote_discussao
		where	nr_seq_lote_contest	= nr_seq_lote_contest_w
		and	ie_status not in ('C')
		and	coalesce(dt_fechamento::text, '') = '';
		
		if (qt_inconsistente_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(291158);
		end if;
	end if;
	
	nr_fatura_w		:= somente_numero(vet_tab_doc_1_nota_deb_w[i].nr_doc_A500_doc_1);
  	tp_arq_parcial_w 	:= trim(both somente_numero(vet_tab_cabecalho_w[i].tp_arq_parcial_cab));

	begin
		nr_nota_credito_debito_a500_w := somente_numero(vet_tab_doc_2_nota_deb_w[i].nr_doc_a500_doc2);
	exception
	when others then
		nr_nota_credito_debito_a500_w := 0;
	end;
	
	insert into ptu_nota_debito(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_unimed_origem,
		cd_unimed_destino,
		nr_fatura,
		vl_total_fatura,
		nr_nota_debito, -- 562
		dt_ven_nota, -- 562
		nr_seq_fatura,
		nr_seq_camara_contest,
		nr_nota_credito_debito_a500,
		vl_total_ndc_a500,
		ie_conclusao_ndc,
		ie_origem,
		tp_arquivo,
		tp_arq_parcial,
		ds_hash,
		dt_postagem)
	values (nextval('ptu_nota_debito_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		vet_tab_cabecalho_w[i].cd_uni_origem_cab,
		vet_tab_cabecalho_w[i].cd_uni_destino_cab,
		nr_fatura_w,
		0,
		0,
		null,
		nr_seq_ptu_fatura_w,
		nr_seq_camara_contest_p,
		nr_nota_credito_debito_a500_w,
		0,
		null,
		'I',
		coalesce(vet_tab_cabecalho_w[i].tp_arquivoNDC_cab,'1'),
		vet_tab_cabecalho_w[i].tp_arq_parcial_cab,
		vet_tab_cabecalho_w[i].hash,
		to_date(vet_tab_cabecalho_w[i].dt_postagem, 'dd/mm/yyyy hh24:mi:ss'));

	if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') or (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
		
		tp_documento_1_w	:= '';
		nr_fatura_contest_tit_w	:= '';
		if (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then		
			select	max(a.nr_fatura),
				max(a.nr_nota_credito_debito),
				max(a.vl_total_fatura),
				max(a.dt_emissao_fatura),
        			max(a.vl_total_ndc)
			into STRICT	nr_fatura_contest_w,
				nr_nota_cred_deb_contest_w,
				vl_total_fatura_w,
				dt_emissao_fatura_w,
        			vl_total_ndc_w
			from	ptu_fatura	a
			where	a.nr_sequencia = nr_seq_ptu_fatura_w;
			
		elsif (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
			select	max(a.nr_fatura),
				max(a.nr_nota_credito_debito),
				max(a.tp_documento_1),
				max(a.vl_total_fatura),
				max(a.dt_emissao_fatura),
        			max(a.vl_total_ndc)
			into STRICT	nr_fatura_contest_w,
				nr_nota_cred_deb_contest_w,
				tp_documento_1_w,
				vl_total_fatura_w,
				dt_emissao_fatura_w,
        			vl_total_ndc_w
			from	ptu_fatura	a
			where	a.nr_seq_pls_fatura = nr_seq_pls_fatura_w;
			
			if (tp_documento_1_w = 3) then
				select	max(a.nr_titulo)
				into STRICT	nr_fatura_contest_tit_w
				from	ptu_fatura		b,
					pls_fatura		a
				where	a.nr_sequencia		= b.nr_seq_pls_fatura
				and	b.nr_seq_pls_fatura 	= nr_seq_pls_fatura_w;
			end if;
		end if;
		
		nr_fatura_contest_w 		:= somente_numero(nr_fatura_contest_w);
		nr_nota_cred_deb_contest_w 	:= somente_numero(nr_nota_cred_deb_contest_w);
		nr_fatura_w 			:= somente_numero(nr_fatura_w);
		nr_nota_credito_debito_a500_w 	:= somente_numero(nr_nota_credito_debito_a500_w);
		
		-- Consistir se a importacao esta ocorrendo no local certo
		if	((nr_fatura_w <> nr_fatura_contest_w) and (nr_fatura_w <> coalesce(nr_fatura_contest_tit_w,0))) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(310034);
			
		elsif (nr_nota_credito_debito_a500_w <> nr_nota_cred_deb_contest_w) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(310034);
		end if;
	end if;
		
	-- Se for Integral ou Complementar a contestacao esta concluida
	if (tp_arquivo_w in ('1','3')) and (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') then
		
		CALL pls_altera_status_contestacao(nr_seq_lote_contest_w, 'C', nm_usuario_p);
		
	end if;
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_nota_debito_w
	from	ptu_nota_debito
	where	nm_usuario	= nm_usuario_p
	and	ie_origem	= 'I';
	
	select	max(cd_unimed_origem),
		max(tp_arquivo),
		max(nr_fatura)
	into STRICT	cd_unimed_origem_w,
		tp_arquivo_w,
		nr_fatura_w
	from	ptu_nota_debito
	where	nr_sequencia = nr_seq_nota_debito_w;
	
	cd_unimed_origem_w	:= lpad(cd_unimed_origem_w,4,'0');

	-- DOCUMENTO 1
	for i in 1..vet_tab_doc_1_nota_deb_w.count loop
		
	if (trim(both vet_tab_doc_1_nota_deb_w[idoc1notadeb].nr_nota_debito_doc_1) IS NOT NULL AND (trim(both vet_tab_doc_1_nota_deb_w[idoc1notadeb].nr_nota_debito_doc_1))::text <> '') then
		
		nr_nota_debito_w	:= vet_tab_doc_1_nota_deb_w[i].nr_nota_debito_doc_1;
		
		select	max(nr_seq_camara_contest)
		into STRICT	qt_registro_w
		from	ptu_nota_deb_conclusao b,
			ptu_nota_debito a
		where	a.nr_sequencia			= b.nr_seq_nota_debito
		and	coalesce(a.ie_cancelamento,'N')	<> 'S'
		and	lpad(a.cd_unimed_origem,4,'0')	= lpad(cd_unimed_origem_w,4,'0')
		and	b.nr_nota_debito		= nr_nota_debito_w
		and	a.tp_arquivo			= tp_arquivo_w
    		and 	((a.tp_arq_parcial 		= tp_arq_parcial_w) or (coalesce(a.tp_arq_parcial::text, '') = '' and tp_arq_parcial_w = 0 ))
		and	a.nr_fatura			= nr_fatura_w;
		
		if (qt_registro_w > 0) then
			delete	FROM ptu_nota_debito
			where	nr_sequencia	= nr_seq_nota_debito_w;
			
			commit;
			CALL wheb_mensagem_pck.exibir_mensagem_abort(271597);
		end if;
		
		vet_tab_doc_1_nota_deb_w[i].dt_emissao_ndc_doc_1 	:= ptu_a560_imp_pck.converte_data(vet_tab_doc_1_nota_deb_w[i].dt_emissao_ndc_doc_1);
		vet_tab_doc_1_nota_deb_w[i].dt_ven_ndc_doc_1		:= ptu_a560_imp_pck.converte_data(vet_tab_doc_1_nota_deb_w[i].dt_ven_ndc_doc_1);
		
		insert into ptu_nota_deb_conclusao( 	nr_sequencia,					dt_atualizacao,					nm_usuario,
							dt_atualizacao_nrec,				nm_usuario_nrec,				nr_nota_debito,
							dt_ven_nota,					id_ndc_conclusao,				nr_seq,
							tp_reg,						nr_seq_nota_debito)
						values (	nextval('ptu_nota_deb_conclusao_seq'),		clock_timestamp(),					nm_usuario_p,
							clock_timestamp(),					nm_usuario_p,					nr_nota_debito_w,
							vet_tab_doc_1_nota_deb_w[i].dt_ven_ndc_doc_1,	2,						null,
							null,						nr_seq_nota_debito_w);
			
		select	max(x.nr_sequencia),
			max(a.nr_sequencia)
		into STRICT	nr_seq_nota_debito_w,
			nr_seq_nota_conclusao_w
		from	ptu_nota_deb_conclusao a,
			ptu_nota_debito x
		where	x.nr_sequencia	= a.nr_seq_nota_debito
		and	x.nm_usuario	= nm_usuario_p
		and	x.ie_origem	= 'I';
		
		
		vet_tab_doc_1_nota_deb_w[i].vl_ndc_doc_1		:= to_number(replace(vet_tab_doc_1_nota_deb_w[i].vl_ndc_doc_1, ',','.'), '999999999999.99');
		
		insert into ptu_nota_deb_dados(nr_sequencia,						dt_atualizacao,					nm_usuario,
						dt_atualizacao_nrec,					nm_usuario_nrec,				nr_seq_nota_debito,
						dt_emissao_ndc,						dt_ven_ndc,					nr_linha,
						ds_linha,						vl_ndc,						nr_seq,
						tp_reg,							nr_seq_nota_deb_conclusao,			tp_doc_568)
					values (	nextval('ptu_nota_deb_dados_seq'),				clock_timestamp(),					nm_usuario_p,
						clock_timestamp(),						nm_usuario_p,					nr_seq_nota_debito_w,
						vet_tab_doc_1_nota_deb_w[i].dt_emissao_ndc_doc_1,	vet_tab_doc_1_nota_deb_w[i].dt_ven_ndc_doc_1,	vet_tab_doc_1_nota_deb_w[i].nr_linha_doc_1,
						vet_tab_doc_1_nota_deb_w[i].ds_linha_doc_1,		vet_tab_doc_1_nota_deb_w[i].vl_ndc_doc_1,	0,
						'568',							nr_seq_nota_conclusao_w,			2);
		
	end if;
		-- BOLETO DOCUMENTO 1
		for i in 1..vet_tab_doc_1_bol_w.count loop		

			vet_tab_doc_1_bol_w[i].dt_proces_doc_1		:= ptu_a560_imp_pck.converte_data(vet_tab_doc_1_bol_w[i].dt_proces_doc_1);

			insert into ptu_nota_deb_bol(	nr_sequencia,					dt_atualizacao,					nm_usuario,
							dt_atualizacao_nrec,				nm_usuario_nrec,				nr_seq,
							tp_reg,						nr_banco,					agencia_cd_cedente,
							nosso_numero,					uso_banco,					ds_carteira,
							especie,					vlr_documento,					dt_documento,
							especie_doc,					aceite,						dt_proces,
							local_pagto,					obs_local_pagto,				tp_boleto,
							nr_seq_nota_debito,				nr_seq_nota_deb_conclusao)
						values (nextval('ptu_nota_deb_bol_seq'),			clock_timestamp(),					nm_usuario_p,
							clock_timestamp(),					nm_usuario_p,					0,
							'563',						vet_tab_doc_1_bol_w[i].nr_banco_doc_1,		vet_tab_doc_1_bol_w[i].agencia_cd_cedente_doc_1,
							vet_tab_doc_1_bol_w[i].nosso_numero_doc_1,	vet_tab_doc_1_bol_w[i].uso_banco_doc_1,		vet_tab_doc_1_bol_w[i].ds_carteira_doc_1,
							vet_tab_doc_1_bol_w[i].especie_doc_1,		vet_tab_doc_1_nota_deb_w[i].vl_ndc_doc_1,	null,
							vet_tab_doc_1_bol_w[i].especie_doc_doc_1,	vet_tab_doc_1_bol_w[i].aceite_doc_1,		vet_tab_doc_1_bol_w[i].dt_proces_doc_1,
							vet_tab_doc_1_bol_w[i].local_pgto_doc_1,	vet_tab_doc_1_bol_w[i].obs_local_pagto_doc_1,	'1',
							nr_seq_nota_debito_w,				nr_seq_nota_conclusao_w);
				
			select	max(z.nr_sequencia)
			into STRICT	nr_seq_nota_deb_bol_w
			from	ptu_nota_debito 	x,
				ptu_nota_deb_bol 	z
			where	x.nr_sequencia		= z.nr_seq_nota_debito
			and	x.nm_usuario		= nm_usuario_p
			and	x.ie_origem		= 'I';

			if (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_1) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_1))::text <> '') then
				insert into ptu_nota_deb_bol_inst(	nr_sequencia,				dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									tp_reg,					ds_instrucao,					nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_inst_seq'),	clock_timestamp(),					nm_usuario_p,
									clock_timestamp(),				nm_usuario_p,					0,
									'564',        				vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_1,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_2) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_2))::text <> '') then
				insert into ptu_nota_deb_bol_inst(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_instrucao,          				nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_inst_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'564',        				vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_2,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_3) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_3))::text <> '') then
				insert into ptu_nota_deb_bol_inst(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_instrucao,          				nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_inst_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'564',        				vet_tab_doc_1_bol_w[i].ds_instrucao_doc_1_3,  	nr_seq_nota_deb_bol_w);
			end if;

			if (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_1) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_1))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,				dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									tp_reg,					ds_observacao,					nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),	clock_timestamp(),					nm_usuario_p,
									clock_timestamp(),				nm_usuario_p,					0,
									'565',        				vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_1,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_2) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_2))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,        			dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									tp_reg,					ds_observacao,        				nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_obs_seq'), 	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,         				0,
									'565', 					vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_2,	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_3) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_3))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_observacao,          			nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,					0,
									'565',        				vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_3,	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_4) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_4))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia, 				dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec, 				nr_seq,
									tp_reg,        				ds_observacao,          			nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',        				vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_4,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_5) IS NOT NULL AND (trim(both vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_5))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,				dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									tp_reg,       				ds_observacao,          			nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',       				vet_tab_doc_1_bol_w[i].ds_observacao_doc_1_5,	nr_seq_nota_deb_bol_w);
			end if;

			insert into ptu_nota_deb_bol_ld( nr_sequencia,				dt_atualizacao,					nm_usuario,
							 dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
							 tp_reg,				linha_digitavel,				cd_barras,				
							 nr_seq_nota_deb_bol)
						values ( nextval('ptu_nota_deb_bol_ld_seq'),	clock_timestamp(),					nm_usuario_p,
							 clock_timestamp(),				nm_usuario_p,					0,
							 '566',					vet_tab_doc_1_bol_w[i].linha_digitavel_doc_1,	vet_tab_doc_1_bol_w[i].cd_barras_doc_1,	
							 nr_seq_nota_deb_bol_w);
				
		end loop;
			
		-- DADOS CREDORA DOCUMENTO 1
		for i in 1..vet_tab_cred_w.count loop
		
			ds_cidade_w := obter_desc_municipio_ibge(vet_tab_cred_w[i].cd_munic_cred);
			cd_uf_w := obter_uf_ibge(vet_tab_cred_w[i].cd_munic_cred);
		
			insert into ptu_nota_deb_credor_deved(
				nr_sequencia,						dt_atualizacao,									nm_usuario,
				dt_atualizacao_nrec,					nm_usuario_nrec,								nr_seq_nota_debito,
				tp_cred_dev,						nm_cred_dev,									ds_endereco,
				ds_end_cpl,						nr_end,										ds_bairro,
				nr_cep,							cd_municipio_ibge,								ds_cidade,
				cd_uf,							cd_cnpj_cpf,									ie_tipo_fone,
				nr_ddd,							nr_fone,									nr_fax,
				nr_seq,							tp_reg,										nr_seq_nota_deb_conclusao)
			values (	nextval('ptu_nota_deb_credor_deved_seq'),			clock_timestamp(),									nm_usuario_p,
				clock_timestamp(),						nm_usuario_p,									nr_seq_nota_debito_w,
				'1',							vet_tab_cred_w[i].nm_credora,							vet_tab_cred_w[i].ds_lograd_cred,
				vet_tab_cred_w[i].compl_lograd_cred,			vet_tab_cred_w[i].nr_lograd_cred,						vet_tab_cred_w[i].ds_bairro_cred,
				vet_tab_cred_w[i].nr_cep_cred,				vet_tab_cred_w[i].cd_munic_cred,						ds_cidade_w,
				cd_uf_w,						coalesce(vet_tab_cred_w[i].cd_cpf_cred, vet_tab_cred_w[i].cd_cnpj_cred),		vet_tab_cred_w[i].tp_fone_cred,		
				vet_tab_cred_w[i].nr_ddd_cred,				vet_tab_cred_w[i].nr_fone_cred,							null,
				0,							'567',										nr_seq_nota_conclusao_w);
		
		end loop;
		
		-- DADOS DEVEDORA DOCUMENTO 1		
		for i in 1..vet_tab_dev_w.count loop
		
			ds_cidade_w := obter_desc_municipio_ibge(vet_tab_dev_w[i].cd_munic_dev);
			cd_uf_w := obter_uf_ibge(vet_tab_dev_w[i].cd_munic_dev);
		
			insert into ptu_nota_deb_credor_deved(	
				nr_sequencia,						dt_atualizacao,									nm_usuario,
				dt_atualizacao_nrec,					nm_usuario_nrec,								nr_seq_nota_debito,
				tp_cred_dev,						nm_cred_dev,									ds_endereco,
				ds_end_cpl,						nr_end,										ds_bairro,
				nr_cep,							cd_municipio_ibge,								ds_cidade,
				cd_uf,							cd_cnpj_cpf,									ie_tipo_fone,
				nr_ddd,							nr_fone,									nr_fax,
				nr_seq,							tp_reg,										nr_seq_nota_deb_conclusao)
			values (	nextval('ptu_nota_deb_credor_deved_seq'),			clock_timestamp(),									nm_usuario_p,
				clock_timestamp(),						nm_usuario_p,									nr_seq_nota_debito_w,
				'2',							vet_tab_dev_w[i].nm_devedora,							vet_tab_dev_w[i].ds_lograd_dev,
				vet_tab_dev_w[i].compl_lograd_dev,			vet_tab_dev_w[i].nr_lograd_dev,							vet_tab_dev_w[i].ds_bairro_dev,
				vet_tab_dev_w[i].nr_cep_dev,				vet_tab_dev_w[i].cd_munic_dev,							ds_cidade_w,
				cd_uf_w,						coalesce(vet_tab_dev_w[i].cd_cpf_dev,vet_tab_dev_w[i].cd_cnpj_dev),			vet_tab_dev_w[i].tp_fone_dev,
				vet_tab_dev_w[i].nr_ddd_dev,				vet_tab_dev_w[i].nr_fone_dev,							null,
				0,							'567',										nr_seq_nota_conclusao_w);
		end loop;
		
		insert into ptu_nota_deb_fat_ndr(	
			nr_sequencia,					dt_atualizacao,					nm_usuario,
			dt_atualizacao_nrec,				nm_usuario_nrec,				nr_seq_nota_debito,
			nr_fatura,					dt_emissao_fatura,				vl_tot_fat,
			nr_ndr,						dt_emissao_ndr,					vl_tot_ndr,
			nr_seq,						tp_reg,						nr_seq_nota_deb_conclusao)
		values (	nextval('ptu_nota_deb_fat_ndr_seq'),		clock_timestamp(),					nm_usuario_p,
			clock_timestamp(),					nm_usuario_p,					nr_seq_nota_debito_w,
			vet_tab_doc_1_nota_deb_w[i].nr_doc_A500_doc_1,	dt_emissao_fatura_w,				vl_total_fatura_w, 			
			null,						null,						null,
			0,						'569',						nr_seq_nota_conclusao_w);
			
		update	ptu_nota_debito
		set	vl_total_fatura	= vl_total_fatura_w,
			nr_fatura	= vet_tab_doc_1_nota_deb_w[i].nr_doc_A500_doc_1
		where	nr_sequencia	= nr_seq_nota_debito_w;
			
	end loop;

	-- DOCUMENTO 2
	for i in 1..vet_tab_doc_2_nota_deb_w.count loop
		
		nr_nota_debito_w	:= vet_tab_doc_2_nota_deb_w[i].nr_nota_debito_doc_2;
    		nr_fatura_w		:= somente_numero(vet_tab_doc_2_nota_deb_w[i].nr_doc_a500_doc2);

		select	max(nr_seq_camara_contest)
		into STRICT	qt_registro_w
		from	ptu_nota_deb_conclusao b,
			ptu_nota_debito a
		where	a.nr_sequencia			= b.nr_seq_nota_debito
		and	coalesce(a.ie_cancelamento,'N')	<> 'S'
		and	lpad(a.cd_unimed_origem,4,'0')	= lpad(cd_unimed_origem_w,4,'0')
		and	b.nr_nota_debito		= nr_nota_debito_w
    		and 	((a.tp_arq_parcial 		= tp_arq_parcial_w) or (coalesce(a.tp_arq_parcial::text, '') = '' and tp_arq_parcial_w = 0 ))
		and	a.tp_arquivo			= tp_arquivo_w
		and	a.nr_fatura			= nr_fatura_w;
		
		if (qt_registro_w > 0) then
			delete	FROM ptu_nota_debito
			where	nr_sequencia	= nr_seq_nota_debito_w;
			
			commit;
			CALL wheb_mensagem_pck.exibir_mensagem_abort(271597);
		end if;
		
		vet_tab_doc_2_nota_deb_w[i].dt_emissao_ndc_doc_2 	:= ptu_a560_imp_pck.converte_data(vet_tab_doc_2_nota_deb_w[i].dt_emissao_ndc_doc_2);
		vet_tab_doc_2_nota_deb_w[i].dt_ven_ndc_doc_2		:= ptu_a560_imp_pck.converte_data(vet_tab_doc_2_nota_deb_w[i].dt_ven_ndc_doc_2);
		
		
		insert into ptu_nota_deb_conclusao( 	nr_sequencia,					dt_atualizacao,					nm_usuario,
							dt_atualizacao_nrec,				nm_usuario_nrec,				nr_nota_debito,
							dt_ven_nota,					id_ndc_conclusao,				nr_seq,
							tp_reg,						nr_seq_nota_debito)
						values (	nextval('ptu_nota_deb_conclusao_seq'),		clock_timestamp(),					nm_usuario_p,
							clock_timestamp(),					nm_usuario_p,					nr_nota_debito_w,
							vet_tab_doc_2_nota_deb_w[i].dt_ven_ndc_doc_2,	1,						null,
							null,						nr_seq_nota_debito_w);
			
		select	max(x.nr_sequencia),
			max(a.nr_sequencia)
		into STRICT	nr_seq_nota_debito_w,
			nr_seq_nota_conclusao_w
		from	ptu_nota_deb_conclusao a,
			ptu_nota_debito x
		where	x.nr_sequencia	= a.nr_seq_nota_debito
		and	x.nm_usuario	= nm_usuario_p
		and	x.ie_origem	= 'I';

		vet_tab_doc_2_nota_deb_w[i].vl_ndc_doc_2		:= to_number(replace(vet_tab_doc_2_nota_deb_w[i].vl_ndc_doc_2, ',','.'), '999999999999.99');
		
		insert into ptu_nota_deb_dados(nr_sequencia,						dt_atualizacao,					nm_usuario,
						dt_atualizacao_nrec,					nm_usuario_nrec,				nr_seq_nota_debito,
						dt_emissao_ndc,						dt_ven_ndc,					nr_linha,
						ds_linha,						vl_ndc,						nr_seq,
						tp_reg,							nr_seq_nota_deb_conclusao,			tp_doc_568)
					values (	nextval('ptu_nota_deb_dados_seq'),				clock_timestamp(),					nm_usuario_p,
						clock_timestamp(),						nm_usuario_p,					nr_seq_nota_debito_w,
						vet_tab_doc_2_nota_deb_w[i].dt_emissao_ndc_doc_2,	vet_tab_doc_2_nota_deb_w[i].dt_ven_ndc_doc_2,	vet_tab_doc_2_nota_deb_w[i].nr_linha_doc_2,
						vet_tab_doc_2_nota_deb_w[i].ds_linha_doc_2,		vet_tab_doc_2_nota_deb_w[i].vl_ndc_doc_2,	0,
						'568',							nr_seq_nota_conclusao_w,			1);
	
	
		-- BOLETO DOCUMENTO 2
		for i in 1..vet_tab_doc_2_bol_w.count loop
			
			vet_tab_doc_2_bol_w[i].dt_proces_doc_2		:= ptu_a560_imp_pck.converte_data(vet_tab_doc_2_bol_w[i].dt_proces_doc_2);

			insert into ptu_nota_deb_bol(	nr_sequencia,					dt_atualizacao,					nm_usuario,
							dt_atualizacao_nrec,				nm_usuario_nrec,				nr_seq,tp_reg,nr_banco,
							agencia_cd_cedente,				nosso_numero,					uso_banco,
							ds_carteira,					especie,					vlr_documento,dt_documento,
							especie_doc,					aceite,						dt_proces,
							local_pagto,					obs_local_pagto,				tp_boleto,
							nr_seq_nota_debito,				nr_seq_nota_deb_conclusao)
						values (nextval('ptu_nota_deb_bol_seq'),clock_timestamp(),nm_usuario_p,
							clock_timestamp(),					nm_usuario_p,					0,
							'563',						vet_tab_doc_2_bol_w[i].nr_banco_doc_2,		vet_tab_doc_2_bol_w[i].agencia_cd_cedente_doc_2,
							vet_tab_doc_2_bol_w[i].nosso_numero_doc_2,	vet_tab_doc_2_bol_w[i].uso_banco_doc_2,		vet_tab_doc_2_bol_w[i].ds_carteira_doc_2,
							vet_tab_doc_2_bol_w[i].especie_doc_2,		vet_tab_doc_2_nota_deb_w[i].vl_ndc_doc_2,	null,
							vet_tab_doc_2_bol_w[i].especie_doc_doc_2,	vet_tab_doc_2_bol_w[i].aceite_doc_2,		vet_tab_doc_2_bol_w[i].dt_proces_doc_2,
							vet_tab_doc_2_bol_w[i].local_pgto_doc_2,	vet_tab_doc_2_bol_w[i].obs_local_pagto_doc_2,	'2',
							nr_seq_nota_debito_w,				nr_seq_nota_conclusao_w);
				
			select	max(z.nr_sequencia)
			into STRICT	nr_seq_nota_deb_bol_w
			from	ptu_nota_debito 	x,
				ptu_nota_deb_bol 	z
			where	x.nr_sequencia		= z.nr_seq_nota_debito
			and	x.nm_usuario		= nm_usuario_p
			and	x.ie_origem		= 'I';

			if (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_1) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_1))::text <> '') then
				insert into ptu_nota_deb_bol_inst(nr_sequencia,				dt_atualizacao,					nm_usuario,
									  dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									  tp_reg,				ds_instrucao,					nr_seq_nota_deb_bol)
								values ( nextval('ptu_nota_deb_bol_inst_seq'),	clock_timestamp(),					nm_usuario_p,
									  clock_timestamp(),				nm_usuario_p,					0,
				  '564',        vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_1,  nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_2) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_2))::text <> '') then
				insert into ptu_nota_deb_bol_inst(	nr_sequencia,				dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_instrucao,          				nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_inst_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'564',        				vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_2,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_3) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_3))::text <> '') then
				insert into ptu_nota_deb_bol_inst(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_instrucao,          				nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_inst_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'564',        				vet_tab_doc_2_bol_w[i].ds_instrucao_doc_2_3,  	nr_seq_nota_deb_bol_w);
			end if;

			if (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_1) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_1))::text <> '') then
				insert into ptu_nota_deb_bol_obs( 	nr_sequencia,				dt_atualizacao,					nm_usuario,
									dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
									tp_reg,					ds_observacao,					nr_seq_nota_deb_bol)
							values (	nextval('ptu_nota_deb_bol_obs_seq'),	clock_timestamp(),					nm_usuario_p,
									clock_timestamp(),				nm_usuario_p,					0,
									'565',        				vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_1,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_2) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_2))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_observacao,          			nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',        				vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_2,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_3) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_3))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_observacao,         				nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',        				vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_3,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_4) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_4))::text <> '') then
				insert into ptu_nota_deb_bol_obs(	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_observacao,          			nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),         				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',        				vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_4,  	nr_seq_nota_deb_bol_w);
			end if;
			
			if (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_5) IS NOT NULL AND (trim(both vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_5))::text <> '') then
				insert into ptu_nota_deb_bol_obs( 	nr_sequencia,        			dt_atualizacao,          			nm_usuario,
									dt_atualizacao_nrec,      		nm_usuario_nrec,        			nr_seq,
									tp_reg,        				ds_observacao,         				nr_seq_nota_deb_bol)
							values ( 	nextval('ptu_nota_deb_bol_obs_seq'),  	clock_timestamp(),          				nm_usuario_p,
									clock_timestamp(),        			nm_usuario_p,          				0,
									'565',        				vet_tab_doc_2_bol_w[i].ds_observacao_doc_2_5,  	nr_seq_nota_deb_bol_w);
			end if;

			insert into ptu_nota_deb_bol_ld( nr_sequencia,				dt_atualizacao,					nm_usuario,
							 dt_atualizacao_nrec,			nm_usuario_nrec,				nr_seq,
							 tp_reg,				linha_digitavel,				cd_barras,				
							 nr_seq_nota_deb_bol)
						values ( nextval('ptu_nota_deb_bol_ld_seq'),	clock_timestamp(),					nm_usuario_p,
							 clock_timestamp(),				nm_usuario_p,					0,
							 '566',					vet_tab_doc_2_bol_w[i].linha_digitavel_doc_2,	vet_tab_doc_2_bol_w[i].cd_barras_doc_2,	
							 nr_seq_nota_deb_bol_w);
		end loop;
		
		-- DADOS CREDORA DOCUMENTO 2
		for i in 1..vet_tab_cred_w.count loop
		
			ds_cidade_w := obter_desc_municipio_ibge(vet_tab_cred_w[i].cd_munic_cred);
			cd_uf_w := obter_uf_ibge(vet_tab_cred_w[i].cd_munic_cred);
		
			insert into ptu_nota_deb_credor_deved(
				nr_sequencia,						dt_atualizacao,									nm_usuario,
				dt_atualizacao_nrec,					nm_usuario_nrec,								nr_seq_nota_debito,
				tp_cred_dev,						nm_cred_dev,									ds_endereco,
				ds_end_cpl,						nr_end,										ds_bairro,
				nr_cep,							cd_municipio_ibge,								ds_cidade,
				cd_uf,							cd_cnpj_cpf,									ie_tipo_fone,
				nr_ddd,							nr_fone,									nr_fax,
				nr_seq,							tp_reg,										nr_seq_nota_deb_conclusao)
			values (	nextval('ptu_nota_deb_credor_deved_seq'),			clock_timestamp(),									nm_usuario_p,
				clock_timestamp(),						nm_usuario_p,									nr_seq_nota_debito_w,
				'1',							vet_tab_cred_w[i].nm_credora,							vet_tab_cred_w[i].ds_lograd_cred,
				vet_tab_cred_w[i].compl_lograd_cred,			vet_tab_cred_w[i].nr_lograd_cred,						vet_tab_cred_w[i].ds_bairro_cred,
				vet_tab_cred_w[i].nr_cep_cred,				vet_tab_cred_w[i].cd_munic_cred,						ds_cidade_w,
				cd_uf_w,						coalesce(vet_tab_cred_w[i].cd_cpf_cred, vet_tab_cred_w[i].cd_cnpj_cred),		vet_tab_cred_w[i].tp_fone_cred,		
				vet_tab_cred_w[i].nr_ddd_cred,				vet_tab_cred_w[i].nr_fone_cred,							null,
				0,							'567',										nr_seq_nota_conclusao_w);
		
		end loop;
		
		-- DADOS DEVEDORA DOCUMENTO 2
		for i in 1..vet_tab_dev_w.count loop
		
			ds_cidade_w := obter_desc_municipio_ibge(vet_tab_dev_w[i].cd_munic_dev);
			cd_uf_w := obter_uf_ibge(vet_tab_dev_w[i].cd_munic_dev);
		
			insert into ptu_nota_deb_credor_deved(	
				nr_sequencia,						dt_atualizacao,									nm_usuario,
				dt_atualizacao_nrec,					nm_usuario_nrec,								nr_seq_nota_debito,
				tp_cred_dev,						nm_cred_dev,									ds_endereco,
				ds_end_cpl,						nr_end,										ds_bairro,
				nr_cep,							cd_municipio_ibge,								ds_cidade,
				cd_uf,							cd_cnpj_cpf,									ie_tipo_fone,
				nr_ddd,							nr_fone,									nr_fax,
				nr_seq,							tp_reg,										nr_seq_nota_deb_conclusao)
			values (	nextval('ptu_nota_deb_credor_deved_seq'),			clock_timestamp(),									nm_usuario_p,
				clock_timestamp(),						nm_usuario_p,									nr_seq_nota_debito_w,
				'2',							vet_tab_dev_w[i].nm_devedora,							vet_tab_dev_w[i].ds_lograd_dev,
				vet_tab_dev_w[i].compl_lograd_dev,			vet_tab_dev_w[i].nr_lograd_dev,							vet_tab_dev_w[i].ds_bairro_dev,
				vet_tab_dev_w[i].nr_cep_dev,				vet_tab_dev_w[i].cd_munic_dev,							ds_cidade_w,
				cd_uf_w,						coalesce(vet_tab_dev_w[i].cd_cpf_dev,vet_tab_dev_w[i].cd_cnpj_dev),			vet_tab_dev_w[i].tp_fone_dev,
				vet_tab_dev_w[i].nr_ddd_dev,				vet_tab_dev_w[i].nr_fone_dev,							null,
				0,							'567',										nr_seq_nota_conclusao_w);
		end loop;
		
		insert into ptu_nota_deb_fat_ndr(	
			nr_sequencia,					dt_atualizacao,					nm_usuario,
			dt_atualizacao_nrec,				nm_usuario_nrec,				nr_seq_nota_debito,
			nr_fatura,					dt_emissao_fatura,				vl_tot_fat,
			nr_ndr,						dt_emissao_ndr,					vl_tot_ndr,
			nr_seq,						tp_reg,						nr_seq_nota_deb_conclusao)
		values (	nextval('ptu_nota_deb_fat_ndr_seq'),		clock_timestamp(),					nm_usuario_p,
			clock_timestamp(),					nm_usuario_p,					nr_seq_nota_debito_w,
			null,						null,						null,
			vet_tab_doc_2_nota_deb_w[i].nr_doc_a500_doc2,	dt_emissao_fatura_w,				vl_total_ndc_w,
			0,						'569',						nr_seq_nota_conclusao_w);

		update	ptu_nota_debito
		set	vl_total_ndc_a500		= vl_total_ndc_w,
			nr_nota_credito_debito_a500	= vet_tab_doc_2_nota_deb_w[i].nr_doc_a500_doc2
		where	nr_sequencia	= nr_seq_nota_debito_w;
	end loop;
end loop;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_a560_imp_pck.carregar_arq_a560_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p ptu_aviso_arq_xml.ie_tipo_arquivo%type, nr_seq_camara_contest_p ptu_camara_contestacao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_nota_debito_p INOUT bigint) FROM PUBLIC;
