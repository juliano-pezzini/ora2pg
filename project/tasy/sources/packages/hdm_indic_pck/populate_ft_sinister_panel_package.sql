-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

	
	/*				*
	*	SINISTER PANEL FACTS	*
	*				*/

		


CREATE OR REPLACE PROCEDURE hdm_indic_pck.populate_ft_sinister_panel () AS $body$
DECLARE

	ds_programs_w			hdm_indic_ft_panel_sinist.ds_programs%type;
	pr_sinister_year_w		hdm_indic_ft_panel_sinist.pr_sinister_year%type;
	pr_sinister_semester_w		hdm_indic_ft_panel_sinist.pr_sinister_semester%type;
	pr_sinister_quarter_w		hdm_indic_ft_panel_sinist.pr_sinister_quarter%type;
	pr_sinister_month_w		hdm_indic_ft_panel_sinist.pr_sinister_month%type;
	pr_sinister_year_before_w	hdm_indic_ft_panel_sinist.pr_sinister_year_before%type;
	c_persons CURSOR(dt_start_pc timestamp, dt_end_pc timestamp) FOR
		SELECT	pes.cd_pessoa_fisica,
			pro_par.nr_seq_participante nr_seq_partic,
			ben.nr_seq_segurado,
			pes.nm_pessoa_fisica nm_person,
			coalesce(trunc(months_between(clock_timestamp(), pes.dt_nascimento) / 12),0) qt_age,
			coalesce(pes.ie_sexo,'I') si_sex,
			min(pro_par.dt_inclusao) dt_inclusion,				
			(CASE WHEN (pro_par.nr_seq_participante IS NOT NULL AND pro_par.nr_seq_participante::text <> '') THEN 'S' ELSE 'N' END) si_participant
		FROM mprev_participante par
LEFT OUTER JOIN mprev_programa_partic pro_par ON (par.nr_sequencia = pro_par.nr_seq_participante)
LEFT OUTER JOIN (	
			SELECT	nr_seq_segurado,	
				(select cd_pessoa_fisica from pls_segurado where nr_sequencia = nr_seq_segurado) cd_pessoa_fisica
			from (
				select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
					nr_seq_segurado
				from (
					select	sum(coalesce(vl_mensalidade, 0)) + sum(coalesce(vl_faturado, 0)) + sum(coalesce(vl_taxa, 0)) vl_receitas,
						sum(coalesce(vl_conta, 0)) + sum(coalesce(vl_ressarcir, 0)) + sum(coalesce(vl_recurso, 0)) vl_assist,
						a.nr_seq_segurado nr_seq_segurado
					from	pls_ar_dados_v a
					group by a.nr_seq_segurado
					) alias23
				where	vl_assist > 0 and vl_receitas > 0
				) alias24
			where	pr_sinistralidade > 0
			) ben ON (par.cd_pessoa_fisica = ben.cd_pessoa_fisica)
, pessoa_fisica pes
LEFT OUTER JOIN mprev_participante par ON (pes.cd_pessoa_fisica = par.cd_pessoa_fisica)
WHERE pes.cd_pessoa_fisica = ben.cd_pessoa_fisica group by	pes.cd_pessoa_fisica,
				pes.nm_pessoa_fisica,
				pes.dt_nascimento,
				pes.ie_sexo,
				pro_par.nr_seq_participante,
				ben.nr_seq_segurado;WITH RECURSIVE cte AS (

	
BEGIN		
		for r_c_persons in c_persons(current_setting('hdm_indic_pck.dt_start_w')::timestamp, current_setting('hdm_indic_pck.dt_end_w')::timestamp) loop
			select	max(ltrim(nm_programa,','))
			into STRICT	ds_programs_w
			from (	SELECT	nm_programa,
					row_number() over (order by pro.nr_sequencia) as fila
				from	mprev_programa pro,
					mprev_programa_partic pro_par
				where	pro.nr_sequencia = pro_par.nr_seq_programa
				and	pro_par.nr_seq_participante = r_c_persons.nr_seq_partic) alias8 WHERE fila = 1
  UNION ALL

	
BEGIN		
		for r_c_persons in c_persons(current_setting('hdm_indic_pck.dt_start_w')::timestamp, current_setting('hdm_indic_pck.dt_end_w')::timestamp) loop
			select	c.ds_programs_w || ',' || max(ltrim(nm_programa,','))
			into STRICT	ds_programs_w
			from (	SELECT	nm_programa, 
					row_number() over (order by pro.nr_sequencia) as fila
				from	mprev_programa pro,
					mprev_programa_partic pro_par
				where	pro.nr_sequencia = pro_par.nr_seq_programa
				and	pro_par.nr_seq_participante = r_c_persons.nr_seq_partic) JOIN cte c ON (c.prior fila = alias8.(fila-1))

) SELECT * FROM cte WHERE connect_by_isleaf = 1;
;
			
			select	max(coalesce(pv.pr_sinistralidade,'0'))
			into STRICT	pr_sinister_year_w
			from	pls_segurado ps,
				(	SELECT	round((pr_sinistralidade)::numeric,2) pr_sinistralidade,
						nr_seq_segurado,
						dt_mes_competencia
					from (	select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
								nr_seq_segurado,
								dt_mes_competencia
							from (	select  sum(coalesce(vl_mensalidade,0)) + sum(coalesce(vl_faturado,0)) + sum(coalesce(vl_taxa,0)) vl_receitas,
										sum(coalesce(vl_conta,0)) + sum(coalesce(vl_ressarcir,0)) + sum(coalesce(vl_recurso,0)) vl_assist,
										a.nr_seq_segurado nr_seq_segurado,
										a.dt_mes_competencia
									from    pls_ar_dados_v a
									where	a.nr_seq_segurado = r_c_persons.nr_seq_segurado
									group by a.nr_seq_segurado,
										 a.dt_mes_competencia
								) alias17
							where	vl_assist > 0 and vl_receitas > 0
						) alias18
					where	pr_sinistralidade > 0) pv
			where	pv.dt_mes_competencia between pkg_date_utils.add_month(current_setting('hdm_indic_pck.dt_end_w')::timestamp, -12, 0) and current_setting('hdm_indic_pck.dt_end_w')::timestamp
			and	ps.nr_sequencia = pv.nr_seq_segurado
			and	ps.cd_pessoa_fisica = r_c_persons.cd_pessoa_fisica;
						
			select	max(coalesce(pv.pr_sinistralidade,0))
			into STRICT	pr_sinister_semester_w
			from	pls_segurado ps,
				(	SELECT	round((pr_sinistralidade)::numeric,2) pr_sinistralidade,
						nr_seq_segurado,
						dt_mes_competencia
					from (	select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
								nr_seq_segurado,
								dt_mes_competencia
							from (	select  sum(coalesce(vl_mensalidade,0)) + sum(coalesce(vl_faturado,0)) + sum(coalesce(vl_taxa,0)) vl_receitas,
										sum(coalesce(vl_conta,0)) + sum(coalesce(vl_ressarcir,0)) + sum(coalesce(vl_recurso,0)) vl_assist,
										a.nr_seq_segurado nr_seq_segurado,
										a.dt_mes_competencia
									from    pls_ar_dados_v a
									where	a.nr_seq_segurado = r_c_persons.nr_seq_segurado
									group by a.nr_seq_segurado,
										 a.dt_mes_competencia
								) alias17
							where	vl_assist > 0 and vl_receitas > 0
						) alias18
					where	pr_sinistralidade > 0) pv
			where	pv.dt_mes_competencia between pkg_date_utils.add_month(current_setting('hdm_indic_pck.dt_end_w')::timestamp, -6, 0) and current_setting('hdm_indic_pck.dt_end_w')::timestamp
			and	ps.nr_sequencia = pv.nr_seq_segurado
			and	ps.cd_pessoa_fisica = r_c_persons.cd_pessoa_fisica;
			
			select	max(coalesce(pv.pr_sinistralidade,0))
			into STRICT	pr_sinister_quarter_w
			from	pls_segurado ps,
				(	SELECT	round((pr_sinistralidade)::numeric,2) pr_sinistralidade,
						nr_seq_segurado,
						dt_mes_competencia
					from (	select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
								nr_seq_segurado,
								dt_mes_competencia
							from (	select  sum(coalesce(vl_mensalidade,0)) + sum(coalesce(vl_faturado,0)) + sum(coalesce(vl_taxa,0)) vl_receitas,
										sum(coalesce(vl_conta,0)) + sum(coalesce(vl_ressarcir,0)) + sum(coalesce(vl_recurso,0)) vl_assist,
										a.nr_seq_segurado nr_seq_segurado,
										a.dt_mes_competencia
									from    pls_ar_dados_v a
									where	a.nr_seq_segurado = r_c_persons.nr_seq_segurado
									group by a.nr_seq_segurado,
										 a.dt_mes_competencia
								) alias17
							where	vl_assist > 0 and vl_receitas > 0
						) alias18
					where	pr_sinistralidade > 0) pv
			where	pv.dt_mes_competencia between pkg_date_utils.add_month(current_setting('hdm_indic_pck.dt_end_w')::timestamp, -3, 0) and current_setting('hdm_indic_pck.dt_end_w')::timestamp
			and	ps.nr_sequencia = pv.nr_seq_segurado
			and	ps.cd_pessoa_fisica = r_c_persons.cd_pessoa_fisica;
			
			select	max(coalesce(pv.pr_sinistralidade,0))
			into STRICT	pr_sinister_month_w
			from	pls_segurado ps,
				(	SELECT	round((pr_sinistralidade)::numeric,2) pr_sinistralidade,
						nr_seq_segurado,
						dt_mes_competencia
					from (	select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
								nr_seq_segurado,
								dt_mes_competencia
							from (	select  sum(coalesce(vl_mensalidade,0)) + sum(coalesce(vl_faturado,0)) + sum(coalesce(vl_taxa,0)) vl_receitas,
										sum(coalesce(vl_conta,0)) + sum(coalesce(vl_ressarcir,0)) + sum(coalesce(vl_recurso,0)) vl_assist,
										a.nr_seq_segurado nr_seq_segurado,
										a.dt_mes_competencia
									from    pls_ar_dados_v a
									where	a.nr_seq_segurado = r_c_persons.nr_seq_segurado
									group by a.nr_seq_segurado,
										 a.dt_mes_competencia
								) alias17
							where	vl_assist > 0 and vl_receitas > 0
						) alias18
					where	pr_sinistralidade > 0) pv
			where	pv.dt_mes_competencia between pkg_date_utils.add_month(current_setting('hdm_indic_pck.dt_end_w')::timestamp, -1, 0) and current_setting('hdm_indic_pck.dt_end_w')::timestamp
			and	ps.nr_sequencia = pv.nr_seq_segurado
			and	ps.cd_pessoa_fisica = r_c_persons.cd_pessoa_fisica;
			
			select	max(coalesce(pv.pr_sinistralidade,0))
			into STRICT	pr_sinister_year_before_w
			from	pls_segurado ps,
				(	SELECT	round((pr_sinistralidade)::numeric,2) pr_sinistralidade,
						nr_seq_segurado,
						dt_mes_competencia
					from (	select (vl_assist / vl_receitas) * 100 pr_sinistralidade,
								nr_seq_segurado,
								dt_mes_competencia
							from (	select  sum(coalesce(vl_mensalidade,0)) + sum(coalesce(vl_faturado,0)) + sum(coalesce(vl_taxa,0)) vl_receitas,
										sum(coalesce(vl_conta,0)) + sum(coalesce(vl_ressarcir,0)) + sum(coalesce(vl_recurso,0)) vl_assist,
										a.nr_seq_segurado nr_seq_segurado,
										a.dt_mes_competencia
									from    pls_ar_dados_v a
									where	a.nr_seq_segurado = r_c_persons.nr_seq_segurado
									group by a.nr_seq_segurado,
										 a.dt_mes_competencia
								) alias17
							where	vl_assist > 0 and vl_receitas > 0
						) alias18
					where	pr_sinistralidade > 0) pv
			where	pv.dt_mes_competencia between pkg_date_utils.add_month(r_c_persons.dt_inclusion, -12, 0) and r_c_persons.dt_inclusion
			and	ps.nr_sequencia = pv.nr_seq_segurado
			and	ps.cd_pessoa_fisica = r_c_persons.cd_pessoa_fisica;

			insert into hdm_indic_ft_panel_sinist(	nr_sequencia,
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					nm_person, 
					qt_age, 
					si_sex, 
					dt_inclusion, 
					ds_programs, 
					pr_sinister_year, 
					pr_sinister_semester, 
					pr_sinister_quarter, 
					pr_sinister_month, 
					pr_sinister_year_before, 
					si_participant)
			values (	nextval('hdm_indic_ft_panel_sinist_seq'),
					clock_timestamp(),
					current_setting('hdm_indic_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('hdm_indic_pck.nm_usuario_w')::usuario.nm_usuario%type,
					r_c_persons.nm_person, 
					r_c_persons.qt_age, 
					r_c_persons.si_sex, 
					r_c_persons.dt_inclusion, 
					ds_programs_w,
					coalesce(pr_sinister_year_w,0),
					coalesce(pr_sinister_semester_w,0),
					coalesce(pr_sinister_quarter_w,0),
					coalesce(pr_sinister_month_w,0),
					coalesce(pr_sinister_year_before_w,0),
					r_c_persons.si_participant);
		
			if (current_setting('hdm_indic_pck.qt_record_w')::integer >= current_setting('hdm_indic_pck.qt_rec_commit_w')::integer) then
				commit;
				PERFORM set_config('hdm_indic_pck.qt_record_w', 0, false);
			end if;
			PERFORM set_config('hdm_indic_pck.qt_record_w', current_setting('hdm_indic_pck.qt_record_w')::integer + 1, false);
		end loop;
		
		commit;
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hdm_indic_pck.populate_ft_sinister_panel () FROM PUBLIC;
