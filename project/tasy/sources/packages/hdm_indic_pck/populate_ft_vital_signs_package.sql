-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


CREATE TYPE vs_data AS (qt_imc			atendimento_sinal_vital.qt_imc%type,
				qt_pa_sistolica		atendimento_sinal_vital.qt_pa_sistolica%type,
				qt_glicemia_capilar	atendimento_sinal_vital.qt_glicemia_capilar%type,
				nr_seq_bmi_range	bigint,
				nr_seq_bp_range		bigint,
				nr_seq_glyc_range	bigint,
				cd_pessoa_fisica	pessoa_fisica.cd_pessoa_fisica%type,
				ie_sexo			pessoa_fisica.ie_sexo%type,
				nr_seq_participante	mprev_participante.nr_sequencia%type,
				dt_nascimento		pessoa_fisica.dt_nascimento%type,
				nr_seq_patient_group	bigint);


CREATE OR REPLACE PROCEDURE hdm_indic_pck.populate_ft_vital_signs () AS $body$
DECLARE

	i			bigint	:= 1;
	j			bigint	:= 1;
	k			bigint	:= 1;
	nr_seq_patient_group_w	bigint	:= null;
	nr_seq_bmi_range_w	bigint	:= null;
	nr_seq_bp_range_w	bigint	:= null;
	nr_seq_glyc_range_w	bigint	:= null;
	dt_trunc_month_vital_sign_w	timestamp;
	/* Vectors */
	
	vector_person_w			vector_person;
	type vector_vs_data is table of vs_data index by integer;
	
	vector_vs_data_w		vector_vs_data;
	
	c_persons CURSOR(dt_start_pc timestamp, dt_end_pc timestamp) FOR
		SELECT	/*+ USE_CONCAT */
			distinct
			/*+ USE_CONCAT */

			pf.cd_pessoa_fisica,
			pf.ie_sexo,
			pt.nr_sequencia nr_seq_participante,
			pf.dt_nascimento
		FROM atendimento_sinal_vital sv, pessoa_fisica pf
LEFT OUTER JOIN mprev_participante pt ON (pf.cd_pessoa_fisica = pt.cd_pessoa_fisica)
WHERE sv.cd_paciente	= pf.cd_pessoa_fisica  and sv.dt_sinal_vital between dt_start_pc and dt_end_pc and ((sv.qt_imc IS NOT NULL AND sv.qt_imc::text <> '') or (sv.qt_pa_sistolica IS NOT NULL AND sv.qt_pa_sistolica::text <> '') or (sv.qt_glicemia_capilar IS NOT NULL AND sv.qt_glicemia_capilar::text <> ''));
	
	c_vital_sign_data CURSOR(dt_start_pc timestamp,
				dt_end_pc timestamp, 
				cd_pessoa_fisica_pc text) FOR
		SELECT	/*+ USE_CONCAT */
			sv.qt_imc,
			sv.qt_pa_sistolica,
			sv.qt_glicemia_capilar
		from	atendimento_sinal_vital sv
		where	sv.dt_sinal_vital between dt_start_pc and dt_end_pc
		and	sv.cd_paciente	= cd_pessoa_fisica_pc
		and ((sv.qt_imc IS NOT NULL AND sv.qt_imc::text <> '') or (sv.qt_pa_sistolica IS NOT NULL AND sv.qt_pa_sistolica::text <> '') or (sv.qt_glicemia_capilar IS NOT NULL AND sv.qt_glicemia_capilar::text <> ''))
		group by
			sv.qt_imc,
			sv.qt_pa_sistolica,
			sv.qt_glicemia_capilar;
	
	
BEGIN	
		/* Generate person vector */


		i	:= 1;
		for r_c_persons in c_persons(current_setting('hdm_indic_pck.dt_start_w')::timestamp,current_setting('hdm_indic_pck.dt_end_w')::timestamp) loop
			nr_seq_patient_group_w	:= hdm_indic_pck.get_patient_group(	r_c_persons.cd_pessoa_fisica,
									r_c_persons.nr_seq_participante,
									r_c_persons.dt_nascimento,
									r_c_persons.ie_sexo);
									
			vector_person_w[i].cd_pessoa_fisica 		:= r_c_persons.cd_pessoa_fisica;
			vector_person_w[i].nr_seq_participante 		:= r_c_persons.nr_seq_participante;
			vector_person_w[i].dt_nascimento 		:= r_c_persons.dt_nascimento;
			vector_person_w[i].ie_sexo 			:= r_c_persons.ie_sexo;
			vector_person_w[i].nr_seq_patient_group 	:= nr_seq_patient_group_w;
			i	:= i + 1;
		end loop;
		
		/* Open person vector */


		j	:= 1;
		i := vector_person_w.count;
		for k in 1.. i loop
			for r_c_vital_sign_data in c_vital_sign_data(	current_setting('hdm_indic_pck.dt_start_w')::timestamp,
									current_setting('hdm_indic_pck.dt_end_w')::timestamp,
									vector_person_w[k].cd_pessoa_fisica) loop

				nr_seq_bmi_range_w	:= hdm_indic_pck.get_bmi_range(r_c_vital_sign_data.qt_imc, vector_person_w[k].dt_nascimento, vector_person_w[k].ie_sexo);
				nr_seq_bp_range_w	:= hdm_indic_pck.get_bp_range(r_c_vital_sign_data.qt_pa_sistolica, vector_person_w[k].dt_nascimento, vector_person_w[k].ie_sexo);
				nr_seq_glyc_range_w	:= hdm_indic_pck.get_glycemia_range(r_c_vital_sign_data.qt_glicemia_capilar, vector_person_w[k].dt_nascimento, vector_person_w[k].ie_sexo);
				
				vector_vs_data_w[j].cd_pessoa_fisica 		:= vector_person_w[k].cd_pessoa_fisica;
				vector_vs_data_w[j].nr_seq_participante 	:= vector_person_w[k].nr_seq_participante;
				vector_vs_data_w[j].dt_nascimento 		:= vector_person_w[k].dt_nascimento;
				vector_vs_data_w[j].ie_sexo 			:= vector_person_w[k].ie_sexo;
				vector_vs_data_w[j].nr_seq_patient_group 	:= vector_person_w[k].nr_seq_patient_group;
				
	
				vector_vs_data_w[j].qt_imc 		:= r_c_vital_sign_data.qt_imc;
				vector_vs_data_w[j].qt_pa_sistolica	:= r_c_vital_sign_data.qt_pa_sistolica;
				vector_vs_data_w[j].qt_glicemia_capilar	:= r_c_vital_sign_data.qt_glicemia_capilar;
				vector_vs_data_w[j].nr_seq_bmi_range	:= nr_seq_bmi_range_w;
				vector_vs_data_w[j].nr_seq_bp_range	:= nr_seq_bp_range_w;
				vector_vs_data_w[j].nr_seq_glyc_range	:= nr_seq_glyc_range_w;
		
				j	:= j + 1;
			end loop;
		end loop;
		
		/* Open vital sign data vector */


		PERFORM set_config('hdm_indic_pck.qt_record_w', 0, false);
		i := vector_vs_data_w.count;
		for k in 1.. i loop
			insert into hdm_indic_ft_vital_sign(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_dif_person,
					nr_seq_day,
					nr_seq_month,
					nr_seq_patient_group,
					nr_seq_bmi_range,
					nr_seq_bp_range, 
					nr_seq_glyc_range, 
					qt_measurement,
					qt_bmi,    
					qt_bp_systolic,
					qt_glycemia)
				SELECT	nextval('hdm_indic_ft_vital_sign_seq'),
					current_setting('hdm_indic_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					current_setting('hdm_indic_pck.nm_usuario_w')::usuario.nm_usuario%type,
					clock_timestamp(),
					vector_vs_data_w[k].cd_pessoa_fisica,
					(SELECT	max(x.nr_sequencia)
					from	hdm_indic_dm_day x
					where	x.dt_complete_date = ft.dt_day) nr_seq_day,
					(select	max(x.nr_sequencia)
					from	hdm_indic_dm_month x
					where	x.dt_complete_date = ft.dt_month) nr_seq_month,
					vector_vs_data_w[k].nr_seq_patient_group,
					vector_vs_data_w[k].nr_seq_bmi_range,
					vector_vs_data_w[k].nr_seq_bp_range,
					vector_vs_data_w[k].nr_seq_glyc_range,
					ft.qt_record,
					vector_vs_data_w[k].qt_imc,
					vector_vs_data_w[k].qt_pa_sistolica,
					vector_vs_data_w[k].qt_glicemia_capilar
				from (select	pkg_date_utils.start_of(sv.dt_sinal_vital,'DD', 0) dt_day,
						pkg_date_utils.start_of(sv.dt_sinal_vital,'MONTH', 0) dt_month,
						count(1) qt_record
					from	atendimento_sinal_vital sv
					where	sv.dt_sinal_vital between current_setting('hdm_indic_pck.dt_start_w')::timestamp and current_setting('hdm_indic_pck.dt_end_w')::timestamp
					and	sv.cd_paciente	= vector_vs_data_w[k].cd_pessoa_fisica
					and (sv.qt_imc		= vector_vs_data_w[k].qt_imc or (coalesce(sv.qt_imc::text, '') = '' and vector_vs_data_w[k]coalesce(.qt_imc::text, '') = ''))
					and (sv.qt_pa_sistolica	= vector_vs_data_w[k].qt_pa_sistolica or (coalesce(sv.qt_pa_sistolica::text, '') = '' and vector_vs_data_w[k]coalesce(.qt_pa_sistolica::text, '') = ''))
					and (sv.qt_glicemia_capilar	= vector_vs_data_w[k].qt_glicemia_capilar or (coalesce(sv.qt_glicemia_capilar::text, '') = '' and vector_vs_data_w[k]coalesce(.qt_glicemia_capilar::text, '') = ''))
					and ((sv.qt_imc IS NOT NULL AND sv.qt_imc::text <> '') or (sv.qt_pa_sistolica IS NOT NULL AND sv.qt_pa_sistolica::text <> '') or (sv.qt_glicemia_capilar IS NOT NULL AND sv.qt_glicemia_capilar::text <> ''))
					group by
						pkg_date_utils.start_of(sv.dt_sinal_vital,'DD', 0),
						pkg_date_utils.start_of(sv.dt_sinal_vital,'MONTH', 0)
					) ft;
					
				if (current_setting('hdm_indic_pck.qt_record_w')::integer >= current_setting('hdm_indic_pck.qt_rec_commit_w')::integer) then
					commit;
					PERFORM set_config('hdm_indic_pck.qt_record_w', 0, false);
				end if;
				PERFORM set_config('hdm_indic_pck.qt_record_w', current_setting('hdm_indic_pck.qt_record_w')::integer + 1, false);
		end loop;
		
		commit;

		CALL hdm_indic_pck.link_campaign_with_vs_fact();
		CALL hdm_indic_pck.link_activ_group_with_vs_fact();
		CALL hdm_indic_pck.link_program_with_vs_fact();
		CALL hdm_indic_pck.link_risk_disease_with_vs_fact();
		
		CALL hdm_indic_pck.generate_vital_sign_range_var();
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hdm_indic_pck.populate_ft_vital_signs () FROM PUBLIC;
