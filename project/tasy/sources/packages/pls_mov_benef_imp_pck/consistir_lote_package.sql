-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_mov_benef_imp_pck.consistir_lote ( nr_seq_lote_p pls_mov_benef_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


qt_inconsistencia_w	integer;

C00 CURSOR(	ie_tipo_consistencia_pc	pls_mov_benef_regra_incons.ie_tipo_consistencia%type) FOR
	SELECT	cd_inconsistencia,
		nr_sequencia nr_seq_inconsistencia
	from	pls_mov_benef_regra_incons
	where	ie_situacao = 'A'
	and	ie_tipo_consistencia  = ie_tipo_consistencia_pc
	order by 1;

C01 CURSOR FOR
	SELECT	*
	from	pls_mov_benef_contrato
	where	nr_seq_lote = nr_seq_lote_p
	order by 1;

C02 CURSOR FOR
	SELECT	*
	from	pls_mov_benef_plano
	where	nr_seq_lote = nr_seq_lote_p
	order by 1;

C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_intercambio,
		a.nr_seq_mov_contrato,
		a.nr_cpf,
		a.nr_identidade,
		a.ds_orgao_emissor_ci,
		a.sg_emissora_ci,
		a.nm_mae,
		a.nr_pis_pasep,
		a.nr_cartao_nac_sus,
		a.ie_tipo_movimentacao,
		a.cd_motivo_rescisao,
		a.dt_inclusao_operadora,
		a.cd_dependencia,
		a.cd_titular,
		a.dt_contratacao,
		a.dt_rescisao,
		a.cd_familia,
		a.cd_matricula_estipulante,
		a.dt_compartilhamento,
		a.dt_fim_compartilhamento,
		a.ie_tipo_repasse,
		(SELECT	count(1)
		from	pls_mov_benef_segurado x
		where	x.nr_sequencia <> a.nr_sequencia
		and	x.cd_usuario_plano = a.cd_usuario_plano
		and	x.nr_seq_lote = a.nr_seq_lote) qt_benef_duplicado
	from	pls_mov_benef_segurado a
	where	nr_seq_lote = nr_seq_lote_p
	order by
		1;

C04 CURSOR(	nr_seq_mov_segurado_pc	pls_mov_benef_segurado.nr_sequencia%type) FOR
	SELECT	*
	from	pls_mov_benef_seg_carencia
	where	nr_seq_mov_segurado = nr_seq_mov_segurado_pc
	order by 1;

C05 CURSOR(	nr_seq_mov_segurado_pc	pls_mov_benef_segurado.nr_sequencia%type) FOR
	SELECT	*
	from	pls_mov_benef_seg_sca
	where	nr_seq_mov_segurado = nr_seq_mov_segurado_pc
	order by 1;

C06 CURSOR(	nr_seq_mov_segurado_pc	pls_mov_benef_segurado.nr_sequencia%type) FOR
	SELECT	*
	from	pls_mov_benef_seg_compl
	where	nr_seq_mov_segurado = nr_seq_mov_segurado_pc
	order by 1;
BEGIN

CALL pls_mov_benef_imp_pck.definir_movimentacao(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);

delete	from	pls_mov_benef_lote_incons a
where	exists (SELECT	1
		from	pls_mov_benef_segurado x
		where	x.nr_sequencia	= a.nr_seq_beneficiario
		and	x.nr_seq_lote	= nr_seq_lote_p);


--Inconsistências para o Beneficiário
for r_c00_w in C00('3') loop
	begin
	for r_c03_w in C03 loop
		
		if (r_c00_w.cd_inconsistencia = '1') then --Contrato não encontrado
			if (coalesce(r_c03_w.nr_seq_intercambio::text, '') = '') and (coalesce(r_c03_w.nr_seq_mov_contrato::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '2') then --CPF inválido
			if (coalesce(r_c03_w.nr_cpf::text, '') = '') or (obter_se_cpf_valido(r_c03_w.nr_cpf) = 'N') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '3') then --Identidade inválida
			if (coalesce(r_c03_w.nr_identidade::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;		
		elsif (r_c00_w.cd_inconsistencia = '4') then --Órgão emissor inválido
			if (coalesce(r_c03_w.ds_orgao_emissor_ci::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '5') then --UF emissor inválido
			if (coalesce(r_c03_w.sg_emissora_ci::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;		
		elsif (r_c00_w.cd_inconsistencia = '6') then --Nome da mãe inválido
			if (coalesce(r_c03_w.nm_mae::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '7') then --PIS/Pasep inválido
			if (coalesce(r_c03_w.nr_pis_pasep::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '8') then --Cartão SUS inválido
			if (coalesce(r_c03_w.nr_cartao_nac_sus::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '9') then --Motivo exclusao inválido
			if (r_c03_w.ie_tipo_movimentacao = 'E' and coalesce(r_c03_w.cd_motivo_rescisao::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '10') then --Data inclusão operadora inválido
			if (r_c03_w.ie_tipo_movimentacao = 'I' and coalesce(r_c03_w.dt_inclusao_operadora::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '11') then --Código dependente inválido
			if (coalesce(r_c03_w.cd_dependencia::text, '') = '' and (r_c03_w.cd_titular IS NOT NULL AND r_c03_w.cd_titular::text <> '')) then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '12') then --Cartão do titular inválido
			if ((r_c03_w.cd_dependencia IS NOT NULL AND r_c03_w.cd_dependencia::text <> '') and coalesce(r_c03_w.cd_titular::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '13') then --Data contratação inválida
			if (coalesce(r_c03_w.dt_contratacao::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;	
		elsif (r_c00_w.cd_inconsistencia = '14') then --Data rescisão inválida
			if (r_c03_w.ie_tipo_movimentacao = 'E' and coalesce(r_c03_w.dt_rescisao::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia(	nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '15') then --Código família inválido
			if (coalesce(r_c03_w.cd_familia::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '16') then --Matrícula estipulante inválido
			if (coalesce(r_c03_w.cd_matricula_estipulante::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '17') then --Data compartilhamento inválida
			if (coalesce(r_c03_w.dt_compartilhamento::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '18') then --Data fim compartilhamento inválida
			if (coalesce(r_c03_w.dt_fim_compartilhamento::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '19') then --Tipo de compartilhamento inválido
			if (coalesce(r_c03_w.ie_tipo_repasse::text, '') = '') then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		elsif (r_c00_w.cd_inconsistencia = '20') then --Movimentação duplicada
			if (r_c03_w.qt_benef_duplicado > 0) then
				CALL CALL CALL pls_mov_benef_imp_pck.inserir_inconsistencia( nr_seq_lote_p, null, null, r_c03_w.nr_sequencia,
							null, null,null, r_c00_w.nr_seq_inconsistencia, nm_usuario_p);
			end if;
		end if;
	end loop;
	end;
end loop;

CALL CALL pls_mov_benef_imp_pck.alterar_status_lote(nr_seq_lote_p,'C',nm_usuario_p);

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mov_benef_imp_pck.consistir_lote ( nr_seq_lote_p pls_mov_benef_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
