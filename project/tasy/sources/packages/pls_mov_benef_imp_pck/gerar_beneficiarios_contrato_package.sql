-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_mov_benef_imp_pck.gerar_beneficiarios_contrato ( nr_seq_lote_p pls_mov_benef_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_titular_w		pls_segurado.nr_seq_titular%type;
dt_inicio_vig_cart_w		pls_segurado_carteira.dt_inicio_vigencia%type;
dt_validade_w			pls_segurado_carteira.dt_validade_carteira%type;
ie_tipo_compartilhamento_w	pls_mov_benef_contrato.ie_tipo_compartilhamento%type;
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
ie_tipo_parentesco_w		grau_parentesco.ie_tipo_parentesco%type;
ds_observacao_w			varchar(4000);
nr_seq_motivo_w			pls_motivo_cancelamento.nr_sequencia%type;
ds_orgao_emissor_ci_w		pessoa_fisica.ds_orgao_emissor_ci%type;
ie_estado_civil_w		pessoa_fisica.ie_estado_civil%type;
ie_sexo_w			pessoa_fisica.ie_sexo%type;
nm_abreviado_w			pessoa_fisica.nm_abreviado%type;
nm_beneficiario_w		pessoa_fisica.nm_pessoa_fisica%type;
nm_social_w			pessoa_fisica.nm_social%type;
nr_cpf_w			pessoa_fisica.nr_cpf%type;
nr_identidade_w			pessoa_fisica.nr_identidade%type;
nr_pis_pasep_w			pessoa_fisica.nr_pis_pasep%type;
sg_emissora_ci_w		pessoa_fisica.sg_emissora_ci%type;
nr_seq_solic_w			tasy_solic_alteracao.nr_sequencia%type;	

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_segurado,
		a.cd_usuario_plano,
		a.nm_beneficiario,
		a.dt_nascimento,
		a.nr_cpf,
		a.nm_abreviado,
		a.nm_social,
		a.ie_estado_civil,
		a.ie_sexo,
		a.nr_pis_pasep,
		a.nr_identidade,
		a.sg_emissora_ci,
		a.ds_orgao_emissor_ci,
		a.nr_cartao_nac_sus,
		a.nm_mae,
		a.cd_titular,
		a.dt_compartilhamento,
		a.dt_validade_carteira,
		a.nr_via_carteira,
		a.nr_seq_plano,
		a.ie_tipo_repasse,
		a.dt_contratacao,
		a.dt_inclusao_operadora,
		a.dt_rescisao,
		a.ie_nascido_plano,
		a.cd_familia,
		a.cd_matricula_estipulante,
		coalesce(a.nr_seq_intercambio,(	SELECT	max(x.nr_seq_intercambio)
						from	pls_mov_benef_contrato x
						where	x.nr_seq_lote	= nr_seq_lote_p
						and	x.nr_contrato	= a.nr_contrato)) nr_seq_intercambio,
		(select	max(x.cd_empresa)
		from	pls_mov_benef_contrato x
		where	x.nr_seq_lote	= nr_seq_lote_p
		and	x.nr_contrato	= a.nr_contrato) cd_empresa,
		(select	max(x.nr_sequencia)
		from	grau_parentesco x
		where	x.cd_ptu	= a.cd_dependencia) nr_seq_parentesco,
		(select	coalesce(max(x.ie_pcmso),'N')
		from	pls_plano x
		where	x.nr_sequencia	= a.nr_seq_plano) ie_pcmso,
		a.ie_tipo_movimentacao,
		a.cd_motivo_rescisao,
		a.nr_seq_lote,
		a.dt_fim_compartilhamento
	from	pls_mov_benef_segurado a
	where	a.nr_seq_lote = nr_seq_lote_p
	order by
		coalesce(cd_titular,' '); --Gerar primeiro os titulares
BEGIN

for r_c01_w in C01 loop
	begin
	if (r_c01_w.ie_tipo_movimentacao = 'I') then
		if (r_c01_w.nr_seq_segurado IS NOT NULL AND r_c01_w.nr_seq_segurado::text <> '') then
			nr_seq_segurado_w	:= r_c01_w.nr_seq_segurado;
		else
			select	max(b.cd_pessoa_fisica)
			into STRICT	cd_pessoa_fisica_w
			from	pessoa_fisica	b
			where	trunc(b.dt_nascimento, 'dd')	= trunc(r_c01_w.dt_nascimento, 'dd')
			and	upper(trim(both b.nm_pessoa_fisica))	= upper(trim(both r_c01_w.nm_beneficiario));
			
			if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
				select	max(b.cd_pessoa_fisica)
				into STRICT	cd_pessoa_fisica_w
				from	pessoa_fisica	b
				where	trunc(b.dt_nascimento, 'dd')	= trunc(r_c01_w.dt_nascimento, 'dd')
				and	nr_cpf				= r_c01_w.nr_cpf;
			end if;
			
			if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
				insert	into	pessoa_fisica(	cd_pessoa_fisica, nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,
						nm_pessoa_fisica, nm_abreviado, nm_social, dt_nascimento,
						nr_cpf, ie_estado_civil ,ie_sexo, nr_pis_pasep,
						nr_identidade, sg_emissora_ci, ds_orgao_emissor_ci, cd_estabelecimento,
						nr_cartao_nac_sus, ie_tipo_pessoa )
				values (	nextval('pessoa_fisica_seq'), nm_usuario_p, nm_usuario_p, clock_timestamp(), clock_timestamp(),
						r_c01_w.nm_beneficiario, r_c01_w.nm_abreviado, r_c01_w.nm_social, r_c01_w.dt_nascimento,
						r_c01_w.nr_cpf, r_c01_w.ie_estado_civil, r_c01_w.ie_sexo, r_c01_w.nr_pis_pasep,
						r_c01_w.nr_identidade, r_c01_w.sg_emissora_ci, r_c01_w.ds_orgao_emissor_ci, cd_estabelecimento_p,
						r_c01_w.nr_cartao_nac_sus, 2 )
				returning cd_pessoa_fisica into cd_pessoa_fisica_w;
				
				if (r_c01_w.nm_mae IS NOT NULL AND r_c01_w.nm_mae::text <> '') then
					insert	into	compl_pessoa_fisica(	nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento, nm_contato,
							dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec)
						values (1, cd_pessoa_fisica_w, 5, r_c01_w.nm_mae,
							clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p);
				end if;
			end if;
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_pagador_w
			from	pls_contrato_pagador
			where	nr_seq_congenere	= current_setting('pls_mov_benef_imp_pck.pls_mov_benef_lote_w')::pls_mov_benef_lote%rowtype.nr_seq_congenere_origem;
			
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_titular_w
			from	pls_segurado		a,
				pls_segurado_carteira	b
			where	a.nr_sequencia		= b.nr_seq_segurado
			and	a.nr_seq_intercambio	= r_c01_w.nr_seq_intercambio
			and	b.nr_cartao_intercambio = r_c01_w.cd_titular;
			
			if (r_c01_w.nr_seq_parentesco IS NOT NULL AND r_c01_w.nr_seq_parentesco::text <> '') then
				select	max(ie_tipo_parentesco)
				into STRICT	ie_tipo_parentesco_w
				from	grau_parentesco
				where	nr_sequencia	= r_c01_w.nr_seq_parentesco;
			else
				ie_tipo_parentesco_w	:= null;
			end if;
			
			insert	into	pls_segurado(	nr_sequencia, nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,
					cd_pessoa_fisica, nr_seq_intercambio, dt_inclusao_operadora, dt_contratacao,
					cd_matricula_estipulante, cd_matricula_familia, ie_nascido_plano, nr_seq_parentesco,
					dt_rescisao, ie_tipo_segurado, ie_tipo_repasse, ie_situacao_atend,
					cd_operadora_empresa, nr_seq_pagador, nr_seq_plano, nr_seq_titular,
					ie_tipo_parentesco, dt_liberacao, dt_comp_risco, ie_pcmso )
				values (	nextval('pls_segurado_seq'), nm_usuario_p, nm_usuario_p, clock_timestamp(), clock_timestamp(),
					cd_pessoa_fisica_w, r_c01_w.nr_seq_intercambio, r_c01_w.dt_inclusao_operadora, r_c01_w.dt_contratacao,
					r_c01_w.cd_matricula_estipulante, r_c01_w.cd_familia, r_c01_w.ie_nascido_plano, r_c01_w.nr_seq_parentesco,
					r_c01_w.dt_rescisao, 'T', r_c01_w.ie_tipo_repasse, 'A',
					r_c01_w.cd_empresa, nr_seq_pagador_w, r_c01_w.nr_seq_plano, nr_seq_titular_w,
					ie_tipo_parentesco_w, clock_timestamp(), r_c01_w.dt_compartilhamento, r_c01_w.ie_pcmso )
				returning nr_sequencia into nr_seq_segurado_w;
			
			CALL pls_gerar_segurado_historico(nr_seq_segurado_w, '104', clock_timestamp(), 'Inclusão gerada pelo lote de movimentação '||nr_seq_lote_p, 'pls_mov_benef_imp_pck', null, null, null, null, clock_timestamp(), null, null, null, null, null, null, nm_usuario_p,'N');
			CALL pls_gerar_grupos_intercambio(nr_seq_segurado_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_ops_congenere_benef(nr_seq_segurado_w, r_c01_w.cd_usuario_plano, cd_estabelecimento_p, nm_usuario_p, 'N');
			
			update	pls_mov_benef_segurado
			set	nr_seq_segurado	= nr_seq_segurado_w
			where	nr_sequencia	= r_c01_w.nr_sequencia;
			
			--Gerar carteirinha
			CALL pls_gerar_carteira_usuario(nr_seq_segurado_w, nr_seq_titular_w, dt_inicio_vig_cart_w, dt_validade_w, 'P', 'N',null, nm_usuario_p);
			
			begin --Setar o cartão de intercâmbio
			update	pls_segurado_carteira
			set	nr_cartao_intercambio	= r_c01_w.cd_usuario_plano,
				dt_validade_carteira	= r_c01_w.dt_validade_carteira,
				nr_via_solicitacao	= r_c01_w.nr_via_carteira
			where	nr_seq_segurado		= nr_seq_segurado_w;
			exception
			when others then
				null;
			end;
			
			CALL pls_mov_benef_imp_pck.gerar_compl_benef(r_c01_w.nr_sequencia, cd_pessoa_fisica_w, nm_usuario_p, cd_estabelecimento_p);
			CALL pls_mov_benef_imp_pck.gerar_sca_beneficiario(r_c01_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p);
			CALL pls_mov_benef_imp_pck.gerar_carencias_beneficiario(r_c01_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p);
		end if;
	elsif (r_c01_w.ie_tipo_movimentacao = 'A') then
		
		nr_seq_segurado_w	:= r_c01_w.nr_seq_segurado;		
		
		select	max(b.cd_pessoa_fisica)
		into STRICT	cd_pessoa_fisica_w
		from	pls_segurado a,
			pessoa_fisica	b
		where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and	trunc(b.dt_nascimento, 'dd')	= trunc(r_c01_w.dt_nascimento, 'dd')
		and	upper(trim(both b.nm_pessoa_fisica))	= upper(trim(both r_c01_w.nm_beneficiario))
		and	(((nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and a.nr_sequencia = nr_seq_segurado_w) or (coalesce(nr_seq_segurado_w::text, '') = ''));
		
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			select 	ds_orgao_emissor_ci,
				ie_estado_civil,
				ie_sexo,
				nm_abreviado,
				nm_pessoa_fisica,
				nm_social,
				nr_cpf,
				nr_identidade,
				nr_pis_pasep,
				sg_emissora_ci
			into STRICT	ds_orgao_emissor_ci_w,
				ie_estado_civil_w,
				ie_sexo_w, 
				nm_abreviado_w,
				nm_beneficiario_w,
				nm_social_w,
				nr_cpf_w,
				nr_identidade_w,
				nr_pis_pasep_w,
				sg_emissora_ci_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;
			
			-- Dados pessoa física
			if (coalesce(r_c01_w.ds_orgao_emissor_ci, ds_orgao_emissor_ci_w ) <> ds_orgao_emissor_ci_w) then
				pls_gravar_solic_alteracao(ds_orgao_emissor_ci_w, r_c01_w.ds_orgao_emissor_ci, 'DS_ORGAO_EMISSOR_CI','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;			
			if (coalesce(r_c01_w.ie_estado_civil,ie_estado_civil_w) <> ie_estado_civil_w) then
				pls_gravar_solic_alteracao(ie_estado_civil_w, r_c01_w.ie_estado_civil, 'IE_ESTADO_CIVIL','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;		
			if (coalesce(r_c01_w.ie_sexo,ie_sexo_w) <> ie_sexo_w) then
				pls_gravar_solic_alteracao(ie_sexo_w, r_c01_w.ie_sexo, 'IE_SEXO','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;			
			if (coalesce(r_c01_w.nm_abreviado,nm_abreviado_w) <> nm_abreviado_w ) then
				pls_gravar_solic_alteracao(nm_abreviado_w, r_c01_w.nm_abreviado, 'NM_ABREVIADO','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;
			if (coalesce(r_c01_w.nm_beneficiario,nm_beneficiario_w)  <> nm_beneficiario_w) then
				pls_gravar_solic_alteracao(nm_beneficiario_w, r_c01_w.nm_beneficiario, 'NM_PESSOA_FISICA','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;
			if (coalesce(r_c01_w.nm_social,nm_social_w) <> nm_social_w) then
				pls_gravar_solic_alteracao(nm_social_w, r_c01_w.nm_social, 'NM_SOCIAL','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;
			if (coalesce(r_c01_w.nr_cpf,nr_cpf_w) <> nr_cpf_w)then
				pls_gravar_solic_alteracao(nr_cpf_w, r_c01_w.nr_cpf, 'NR_CPF','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);

			end if;
			if (coalesce(r_c01_w.nr_identidade,nr_identidade_w) <> nr_identidade_w) then
				pls_gravar_solic_alteracao(nr_identidade_w, r_c01_w.nr_identidade, 'NR_IDENTIDADE','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;
			if (coalesce(r_c01_w.nr_pis_pasep,nr_pis_pasep_w) <> nr_pis_pasep_w) then
				pls_gravar_solic_alteracao(nr_pis_pasep_w, r_c01_w.nr_pis_pasep, 'NR_PIS_PASEP','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;
			if (coalesce(r_c01_w.sg_emissora_ci,sg_emissora_ci_w) <> sg_emissora_ci_w) then
				pls_gravar_solic_alteracao(sg_emissora_ci_w,r_c01_w.sg_emissora_ci, 'SG_EMISSORA_CI','PESSOA_FISICA',cd_pessoa_fisica_w,nm_usuario_p,null,
							    null,null,null,cd_estabelecimento_p,1286,nr_seq_solic_w);
			end if;			
		end if;
		CALL pls_mov_benef_imp_pck.gerar_compl_benef(r_c01_w.nr_sequencia, cd_pessoa_fisica_w, nm_usuario_p, cd_estabelecimento_p);
	elsif (r_c01_w.ie_tipo_movimentacao = 'E') then
		if (r_c01_w.cd_motivo_rescisao IS NOT NULL AND r_c01_w.cd_motivo_rescisao::text <> '') then
			select max(nr_sequencia)
			into STRICT	nr_seq_motivo_w
			from	pls_motivo_cancelamento
			where	cd_motivo_cancelamento = r_c01_w.cd_motivo_rescisao;		
		end if;
		
		ds_observacao_w := 'Rescisão realizada a partir da movimentação cadastral de beneficiários. Lote: '||r_c01_w.nr_seq_lote;
		CALL pls_rescindir_segurado( r_c01_w.nr_seq_segurado,r_c01_w.dt_rescisao,r_c01_w.dt_rescisao,nr_seq_motivo_w,
					ds_observacao_w	, cd_estabelecimento_p,	nm_usuario_p,'B',
					null,null,r_c01_w.dt_fim_compartilhamento,null);
	end if;
	end;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mov_benef_imp_pck.gerar_beneficiarios_contrato ( nr_seq_lote_p pls_mov_benef_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
