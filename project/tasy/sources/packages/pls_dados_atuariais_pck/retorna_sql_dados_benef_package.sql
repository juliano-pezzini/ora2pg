-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_benef ( lote_benef_p lote_atuarial, dado_bind_benef_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o sql dinamico com os filtro necessarios para os dados do beneficiario,
	bem como gera o bind dos parametros

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_retorno_w			varchar(32000):= '';

ie_beneficiario_cancelado_w	pls_atu_benef_regra.ie_beneficiario_cancelado%type;
ie_beneficiario_liberado_w	pls_atu_benef_regra.ie_beneficiario_liberado%type;
qt_tipo_operacao_w		integer;
qt_regulamentacao_w		integer;
ds_tipo_operacao_w		varchar(4000);
ds_regulamentacao_w		varchar(4000);


BEGIN

-- Levanta as inf da regra

select	coalesce(max(a.ie_beneficiario_cancelado), 'N') ie_beneficiario_cancelado,
	coalesce(max(a.ie_beneficiario_liberado), 'S') ie_beneficiario_liberado,
	-- Contagem de quantas regras de produto por tipo existem

	max((	select	count(1) contador
		from	pls_atu_benef_regra_plano	x
		where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
		and	(x.ie_tipo_operacao IS NOT NULL AND x.ie_tipo_operacao::text <> ''))),
	-- Contagem de quantas regras de produto por regulamentacao que existem

	max((	select	count(1) contador
		from	pls_atu_benef_regra_plano	x
		where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
		and	(x.ie_regulamentacao IS NOT NULL AND x.ie_regulamentacao::text <> ''))),
	-- Levante das regras por tipo de produto

	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_tipo_operacao,3)||''''
		from (	select	x.ie_tipo_operacao,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_operacao) seq
			from	pls_atu_benef_regra_plano	x
			where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
			and	(x.ie_tipo_operacao IS NOT NULL AND x.ie_tipo_operacao::text <> '')
			group by x.ie_tipo_operacao, x.nr_seq_regra) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_tipo_operacao,3)||''''
		from (	select	x.ie_tipo_operacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_operacao) seq
			from	pls_atu_benef_regra_plano	x
			where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
			and	(x.ie_tipo_operacao IS NOT NULL AND x.ie_tipo_operacao::text <> '')
			group by x.ie_tipo_operacao, x.nr_seq_regra) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por regulamentacao de produto

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_regulamentacao ,3)||''''
		from (	select	x.ie_regulamentacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_regulamentacao ) seq
			from	pls_atu_benef_regra_plano	x
			where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
			and	(x.ie_regulamentacao IS NOT NULL AND x.ie_regulamentacao::text <> '')
			group by x.ie_regulamentacao, x.nr_seq_regra) t WHERE t.seq = 1
  UNION ALL
(select	c.,3)||'''' || ''',' || substr(''''||t.ie_regulamentacao ,3)||''''
		from (	select	x.ie_regulamentacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_regulamentacao ) seq
			from	pls_atu_benef_regra_plano	x
			where	x.nr_seq_regra			= lote_benef_p.nr_seq_benef_regra
			and	(x.ie_regulamentacao IS NOT NULL AND x.ie_regulamentacao::text <> '')
			group by x.ie_regulamentacao, x.nr_seq_regra) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
))		
into STRICT	ie_beneficiario_cancelado_w,
	ie_beneficiario_liberado_w,
	qt_tipo_operacao_w,
	qt_regulamentacao_w,
	ds_tipo_operacao_w,
	ds_regulamentacao_w
from	pls_atu_benef_regra	a
where	a.nr_sequencia		= lote_benef_p.nr_seq_benef_regra;


ds_retorno_w	:=	'insert into pls_atu_benef_item (	nr_sequencia, '|| pls_util_pck.enter_w ||
			'		cd_cgc_estip, '|| pls_util_pck.enter_w ||
			'		cd_usuario_plano, '|| pls_util_pck.enter_w ||
			'		dt_atualizacao, '|| pls_util_pck.enter_w ||
			'		dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
			'		dt_contratacao, '|| pls_util_pck.enter_w ||
			'		dt_final_cpt, '|| pls_util_pck.enter_w ||
			'		dt_nascimento, '|| pls_util_pck.enter_w ||
			'		dt_rescisao, '|| pls_util_pck.enter_w ||
			'		ie_sexo, '|| pls_util_pck.enter_w ||
			'		ie_tipo_contratacao, '|| pls_util_pck.enter_w ||
			'		nm_beneficiario, '|| pls_util_pck.enter_w ||
			'		nm_usuario, '|| pls_util_pck.enter_w ||
			'		nm_usuario_nrec, '|| pls_util_pck.enter_w ||
			'		nr_cpf_benef, '|| pls_util_pck.enter_w ||
			'		nr_seq_lote, '|| pls_util_pck.enter_w ||
			'		nr_seq_plano, '|| pls_util_pck.enter_w ||
			'		nr_seq_segurado, '|| pls_util_pck.enter_w ||
			'		nr_seq_titular) '|| pls_util_pck.enter_w ||
			'select	pls_atu_benef_item_seq.nextval nr_sequencia, '|| pls_util_pck.enter_w ||
			'	c.cd_cgc_estipulante, '|| pls_util_pck.enter_w ||
			'	(	select	max(x.cd_usuario_plano) '|| pls_util_pck.enter_w ||
			'		from	pls_segurado_carteira	x '|| pls_util_pck.enter_w ||
			'		where	x.nr_seq_segurado	= a.nr_sequencia) cd_usuario_plano, '|| pls_util_pck.enter_w ||
			'	sysdate, '|| pls_util_pck.enter_w ||
			'	sysdate, '|| pls_util_pck.enter_w ||
			'	a.dt_contratacao, '|| pls_util_pck.enter_w ||
			'	(	select	max(nvl(x.dt_inicio_vigencia, nvl(a.dt_inclusao_operadora,a.dt_contratacao)) + x.qt_dias) '|| pls_util_pck.enter_w ||
			'		from	pls_carencia		x '|| pls_util_pck.enter_w ||
			'		where	x.nr_seq_segurado	= a.nr_sequencia '|| pls_util_pck.enter_w ||
			'		and	x.ie_cpt		= ''S'') dt_final_cpt, '|| pls_util_pck.enter_w ||
			'	b.dt_nascimento, '|| pls_util_pck.enter_w ||
			'	a.dt_rescisao, '|| pls_util_pck.enter_w ||
			'	b.ie_sexo, '|| pls_util_pck.enter_w ||
			'	d.ie_tipo_contratacao, '|| pls_util_pck.enter_w ||
			'	b.nm_pessoa_fisica, '|| pls_util_pck.enter_w ||
			'	:nm_usuario_p nm_usuario, '|| pls_util_pck.enter_w ||
			'	:nm_usuario_p nm_usuario_nrec, '|| pls_util_pck.enter_w ||
			'	b.nr_cpf, '|| pls_util_pck.enter_w ||
			'	:nr_seq_lote nr_seq_lote, '|| pls_util_pck.enter_w ||
			'	a.nr_seq_plano, '|| pls_util_pck.enter_w ||
			'	a.nr_sequencia nr_seq_segurado, '|| pls_util_pck.enter_w ||
			'	a.nr_seq_titular '|| pls_util_pck.enter_w ||
			'from	pls_segurado	a, '|| pls_util_pck.enter_w ||
			'	pessoa_fisica	b, '|| pls_util_pck.enter_w ||
			'	pls_contrato	c, '|| pls_util_pck.enter_w ||
			'	pls_plano	d '|| pls_util_pck.enter_w ||
			'where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica '|| pls_util_pck.enter_w ||
			'and	a.nr_seq_contrato	= c.nr_sequencia '|| pls_util_pck.enter_w ||
			'and	a.nr_seq_plano		= d.nr_sequencia '|| pls_util_pck.enter_w;
if (ie_beneficiario_cancelado_w	= 'N') then

	ds_retorno_w	:= ds_retorno_w||'and	a.dt_cancelamento	is null '|| pls_util_pck.enter_w;
	
end if;

if (ie_beneficiario_liberado_w	= 'S') then

	ds_retorno_w	:= ds_retorno_w||'and	a.dt_liberacao		is not null  '|| pls_util_pck.enter_w;
	
end if;


ds_retorno_w	:= ds_retorno_w||'and	a.cd_estabelecimento	= :cd_estabelecimento '|| pls_util_pck.enter_w;

-- binds dos campos "fixos"

dado_bind_benef_p := sql_pck.bind_variable(':nm_usuario_p', nm_usuario_p, dado_bind_benef_p);
dado_bind_benef_p := sql_pck.bind_variable(':nr_seq_lote', lote_benef_p.nr_sequencia, dado_bind_benef_p);
dado_bind_benef_p := sql_pck.bind_variable(':cd_estabelecimento', lote_benef_p.cd_estabelecimento, dado_bind_benef_p);
			
if (lote_benef_p.dt_inicio_comp IS NOT NULL AND lote_benef_p.dt_inicio_comp::text <> '') then
	
	ds_retorno_w	:= ds_retorno_w || 'and	a.dt_contratacao	between :dt_inicial_p and :dt_final_p '|| pls_util_pck.enter_w;
	
	dado_bind_benef_p := sql_pck.bind_variable(':dt_inicial_p', lote_benef_p.dt_inicio_comp, dado_bind_benef_p);
	dado_bind_benef_p := sql_pck.bind_variable(':dt_final_p', lote_benef_p.dt_fim_comp, dado_bind_benef_p);
	
end if;

-- verifica se tem ao menos um tipo de produto informado,

if (qt_tipo_operacao_w > 0) then

	-- a variavel ja deve estar com o valor do IN preparado

	ds_retorno_w	:= ds_retorno_w || 'and	d.ie_tipo_operacao 	in ('||ds_tipo_operacao_w||') '|| pls_util_pck.enter_w;	

end if;

-- verifica se tem ao menos uma regulamentacao informada

if (qt_regulamentacao_w > 0) then

	-- a variavel ja deve estar com o valor do IN preparado

	ds_retorno_w	:= ds_retorno_w || 'and	d.ie_regulamentacao 	in ('||ds_regulamentacao_w||') '|| pls_util_pck.enter_w;	

end if;

-- Gravar log

CALL pls_dados_atuariais_pck.gravar_log(	lote_benef_p.nr_sequencia,
					lote_benef_p.nr_seq_benef_regra, 
					lote_benef_p.ie_tipo_arquivo, 
					ds_retorno_w, 
					dado_bind_benef_p := pls_dados_atuariais_pck.obter_bind_log(dado_bind_benef_p), 
					dbms_utility.format_error_backtrace, 
					nm_usuario_p);

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_benef ( lote_benef_p lote_atuarial, dado_bind_benef_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
