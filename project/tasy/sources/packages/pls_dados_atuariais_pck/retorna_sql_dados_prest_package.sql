-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_prest ( lote_prest_p INOUT lote_atuarial, dado_bind_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o sql dinamico com os filtro necessarios para os dados dos prestadores,
	bem como gera o bind dos parametros

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_retorno_w		varchar(32000):= '';
ds_tipo_relacao_in_w	varchar(10000);
qt_tipo_prest_w		integer;
nr_seq_tipo_prestador_w	pls_atu_prest_regra_prest.nr_seq_tipo_prestador%type;


BEGIN

-- Carrega as inf dos filtros

select	-- Levante o tipo de relacao dos filtros
	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_tipo_relacao,3)||''''
		from (	select	x.ie_tipo_relacao,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_relacao) seq
			from	pls_atu_prest_regra_prest	x
			where	x.nr_seq_regra			= lote_prest_p.nr_seq_proced_regra
			and	(x.ie_tipo_relacao IS NOT NULL AND x.ie_tipo_relacao::text <> '')) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_tipo_relacao,3)||''''
		from (	select	x.ie_tipo_relacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_relacao) seq
			from	pls_atu_prest_regra_prest	x
			where	x.nr_seq_regra			= lote_prest_p.nr_seq_proced_regra
			and	(x.ie_tipo_relacao IS NOT NULL AND x.ie_tipo_relacao::text <> '')) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Quantidade de filtros por tipo de prestador

	-- E adiciona um distinct aqui, para trazer apenas a contagem distinta, pois se tiver apenas um nr_seq_tipo_prestador, sera feito um tratamento diferente para performance

	max((	select	count(distinct x.nr_seq_tipo_prestador)
		from	pls_atu_prest_regra_prest	x
		where	x.nr_seq_regra			= lote_prest_p.nr_seq_prest_regra)),
	-- retorna o maior tipo prestador, sera utilizado quando a contagem retornar apenas 1

	max((	select	max(x.nr_seq_tipo_prestador)
		from	pls_atu_prest_regra_prest	x
		where	x.nr_seq_regra			= lote_prest_p.nr_seq_prest_regra))
into STRICT	ds_tipo_relacao_in_w,
	qt_tipo_prest_w,
	nr_seq_tipo_prestador_w
from	pls_atu_prest_regra_prest	a
where	a.nr_seq_regra			= lote_prest_p.nr_seq_prest_regra;


ds_retorno_w	:= ds_retorno_w||	'insert into pls_atu_prest_item (nr_sequencia, '|| pls_util_pck.enter_w ||
					'				cd_municipio_ibge, '|| pls_util_pck.enter_w ||
					'				cd_prestador, '|| pls_util_pck.enter_w ||
					'				dt_atualizacao, '|| pls_util_pck.enter_w ||
					'				dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'				ie_tipo_relacao, '|| pls_util_pck.enter_w ||
					'				nm_prestador, '|| pls_util_pck.enter_w ||
					'				nm_usuario, '|| pls_util_pck.enter_w ||
					'				nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'				nr_seq_classificacao, '|| pls_util_pck.enter_w ||
					'				nr_seq_lote, '|| pls_util_pck.enter_w ||
					'				nr_seq_prestador, '|| pls_util_pck.enter_w ||
					'				nr_seq_tipo_prestador) '|| pls_util_pck.enter_w ||
					'select	pls_atu_prest_item_seq.nextval nr_sequencia, '|| pls_util_pck.enter_w ||
					'	decode(t.cd_pessoa_fisica, null, nvl(cd_municipio_ibge_pj, cd_municipio_ibge_pj_compl), nvl(cd_municipio_ibge_pf, cd_municipio_ibge_pf_compl)) cd_municipio_ibge, '|| pls_util_pck.enter_w ||
					'	t.cd_prestador, '|| pls_util_pck.enter_w ||
					'	t.dt_atualizacao, '|| pls_util_pck.enter_w ||
					'	t.dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'	t.ie_tipo_relacao, '|| pls_util_pck.enter_w ||
					'	decode(t.nm_interno, null, decode(t.cd_pessoa_fisica, null, t.ds_razao_social, t.nm_pessoa_fisica), t.nm_interno) nm_prestador, '|| pls_util_pck.enter_w ||
					'	t.nm_usuario, '|| pls_util_pck.enter_w ||
					'	t.nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_classificacao, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_lote, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_prestador, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_tipo_prestador '|| pls_util_pck.enter_w ||
					'from (	select	(	select	max(b.cd_municipio_ibge) '|| pls_util_pck.enter_w ||
					'			from	pessoa_fisica b '|| pls_util_pck.enter_w ||
					'			where	b.cd_pessoa_fisica = a.cd_pessoa_fisica) cd_municipio_ibge_pf, '|| pls_util_pck.enter_w ||
					'		(	select	max(b.cd_municipio_ibge) '|| pls_util_pck.enter_w ||
					'			from	compl_pessoa_fisica b '|| pls_util_pck.enter_w ||
					'			where	b.cd_pessoa_fisica = a.cd_pessoa_fisica) cd_municipio_ibge_pf_compl, '|| pls_util_pck.enter_w ||
					'		(	select	max(b.cd_municipio_ibge) '|| pls_util_pck.enter_w ||
					'			from	pessoa_juridica b '|| pls_util_pck.enter_w ||
					'			where	b.cd_cgc = a.cd_cgc) cd_municipio_ibge_pj, '|| pls_util_pck.enter_w ||
					'		(	select	max(b.cd_municipio_ibge) '|| pls_util_pck.enter_w ||
					'			from	pessoa_juridica_compl b '|| pls_util_pck.enter_w ||
					'			where	b.cd_cgc = a.cd_cgc) cd_municipio_ibge_pj_compl, '|| pls_util_pck.enter_w ||
					'		a.cd_prestador, '|| pls_util_pck.enter_w ||
					'		sysdate dt_atualizacao, '|| pls_util_pck.enter_w ||
					'		sysdate dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'		a.ie_tipo_relacao, '|| pls_util_pck.enter_w ||
					'		a.nm_interno, '|| pls_util_pck.enter_w ||
					'		(	select	max(ds_razao_social) '|| pls_util_pck.enter_w ||
					'			from	pessoa_juridica '|| pls_util_pck.enter_w ||
					'			where	cd_cgc	= a.cd_cgc) ds_razao_social, '|| pls_util_pck.enter_w ||
					'			 '|| pls_util_pck.enter_w ||
					'		(	select	max(nm_pessoa_fisica) '|| pls_util_pck.enter_w ||
					'			from	pessoa_fisica '|| pls_util_pck.enter_w ||
					'			where	cd_pessoa_fisica	= a.cd_pessoa_fisica) nm_pessoa_fisica, '|| pls_util_pck.enter_w ||
					'		:nm_usuario_p nm_usuario, '|| pls_util_pck.enter_w ||
					'		:nm_usuario_p nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'		a.nr_seq_classificacao, '|| pls_util_pck.enter_w ||
					'		:nr_seq_lote nr_seq_lote, '|| pls_util_pck.enter_w ||
					'		a.nr_sequencia nr_seq_prestador, '|| pls_util_pck.enter_w ||
					'		a.nr_seq_tipo_prestador, '|| pls_util_pck.enter_w ||
					'		a.cd_pessoa_fisica '|| pls_util_pck.enter_w ||
					'	from	pls_prestador		a, '|| pls_util_pck.enter_w ||
					'		pls_protocolo_conta	b '|| pls_util_pck.enter_w ||
					'	where	b.nr_seq_prestador	= a.nr_sequencia '|| pls_util_pck.enter_w ||
					'	and	b.ie_status		in(''3'', ''6'') '|| pls_util_pck.enter_w ||
					'	and	a.cd_estabelecimento	= :cd_estabelecimento '|| pls_util_pck.enter_w;
dado_bind_p := sql_pck.bind_variable(':nm_usuario_p', nm_usuario_p, dado_bind_p);
dado_bind_p := sql_pck.bind_variable(':nr_seq_lote', lote_prest_p.nr_sequencia, dado_bind_p);
dado_bind_p := sql_pck.bind_variable(':cd_estabelecimento', lote_prest_p.cd_estabelecimento, dado_bind_p);


if (lote_prest_p.dt_inicio_comp IS NOT NULL AND lote_prest_p.dt_inicio_comp::text <> '') then
					
	ds_retorno_w	:= ds_retorno_w||						'	and	b.dt_mes_competencia	between :dt_inicial_p and :dt_final_p  '|| pls_util_pck.enter_w;
	
	dado_bind_p := sql_pck.bind_variable(':dt_inicial_p', lote_prest_p.dt_inicio_comp, dado_bind_p);
	dado_bind_p := sql_pck.bind_variable(':dt_final_p', lote_prest_p.dt_fim_comp, dado_bind_p);
end if;


if (ds_tipo_relacao_in_w IS NOT NULL AND ds_tipo_relacao_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	 a.ie_tipo_relacao	in ('||ds_tipo_relacao_in_w||') '|| pls_util_pck.enter_w;
	
end if;

-- Verifica quantos registros tem nos filtros relacionados ao tipo de prestador.

-- 	Se nao tiver nenhum, nao sera adicionado o filtro

--	Se tiver um, sera feito uma comparacao de "="

--	Se tiver mais de um, sera feito um "Exists".

-- Como essa tabela e um cadastro que a operadora pode criar conforme a necessidade, ele pode ter varios registros, o que podera

-- dependendo do filtro, perder performance utilizando o "IN" apenas.

if (qt_tipo_prest_w > 1) then

	ds_retorno_w	:= ds_retorno_w||	'	and	 exists(	select	1 ' || pls_util_pck.enter_w ||
						'		 		from	 pls_atu_prest_regra_prest	x ' || pls_util_pck.enter_w ||
						'		 		where	x.nr_seq_tipo_prestador		= a.nr_seq_tipo_prestador ' || pls_util_pck.enter_w ||
						'		 		and	x.nr_seq_regra			=  :nr_seq_prest_regra )' || pls_util_pck.enter_w;
						
	dado_bind_p := sql_pck.bind_variable(':nr_seq_prest_regra', lote_prest_p.nr_seq_prest_regra, dado_bind_p);
						
elsif (qt_tipo_prest_w = 1) then

	ds_retorno_w	:= ds_retorno_w||	'	and	 a.nr_seq_tipo_prestador	= :nr_seq_tipo_prestador ' || pls_util_pck.enter_w;
	dado_bind_p := sql_pck.bind_variable(':nr_seq_tipo_prestador', nr_seq_tipo_prestador_w, dado_bind_p);
	
end if;
					
ds_retorno_w	:= ds_retorno_w||	'	group by	a.cd_pessoa_fisica, '|| pls_util_pck.enter_w ||
					'			a.cd_cgc, '|| pls_util_pck.enter_w ||
					'			a.cd_prestador, '|| pls_util_pck.enter_w ||
					'			a.ie_tipo_relacao, '|| pls_util_pck.enter_w ||
					'			a.nm_interno, '|| pls_util_pck.enter_w ||
					'			a.nr_seq_classificacao, '|| pls_util_pck.enter_w ||
					'			a.nr_sequencia, '|| pls_util_pck.enter_w ||
					'			a.nr_seq_tipo_prestador	) t '|| pls_util_pck.enter_w;

-- Gravar log

CALL pls_dados_atuariais_pck.gravar_log(	lote_prest_p.nr_sequencia,
					lote_prest_p.nr_seq_prest_regra, 
					lote_prest_p.ie_tipo_arquivo, 
					ds_retorno_w, 
					dado_bind_p := pls_dados_atuariais_pck.obter_bind_log(dado_bind_p), 
					dbms_utility.format_error_backtrace, 
					nm_usuario_p);
	
return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_prest ( lote_prest_p INOUT lote_atuarial, dado_bind_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
