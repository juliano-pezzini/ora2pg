-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_dados_atuariais_pck.gerencia_gerar_arquivo ( nr_seq_lote_p pls_atuarial_lote.nr_sequencia%type, nr_seq_regra_p pls_atuarial_arq_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o arquivo conforme lote e regra.

	Deve-se inicialmente fazer as validacoes.
	Consistir os dados da regra
	Comparar se os dados da regra estao condizentes com os dados do lote
	
	Depois com os dados da regra carregados, deve-se  verificar qual o tipo
	do lote a ser gerado, e chamar a geracao condizente.	

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

lote_atuarial_w	lote_atuarial;
regra_arquivo_w	regra_arquivo;

ds_erro_sql_p	varchar(4000);


BEGIN

-- Carrega o lote e a regra

lote_atuarial_w := pls_dados_atuariais_pck.retorna_lote_atuarial(nr_seq_lote_p);
regra_arquivo_w := pls_dados_atuariais_pck.retorna_regra_arquivo(nr_seq_regra_p);

-- Pega o nome do arquivo

SELECT * FROM pls_dados_atuariais_pck.nome_arquivo_com_macro(lote_atuarial_w, regra_arquivo_w) INTO STRICT _ora2pg_r;
 lote_atuarial_w := _ora2pg_r.lote_atuarial_p; regra_arquivo_w := _ora2pg_r.regra_arquivo_p;

begin
	-- Marca o inicio da geracao do arquivo

	lote_atuarial_w := pls_dados_atuariais_pck.inicio_geracao_arq_lote(lote_atuarial_w, nm_usuario_p);
	
	-- Validacoes

	ds_erro_sql_p := pls_dados_atuariais_pck.consistir_regra_arquivo(nr_seq_regra_p, ds_erro_sql_p);
	
	-- Verifica se nao ocorreu nenhum erro de sintax de sql

	if (coalesce(ds_erro_sql_p::text, '') = '') then
	
		-- Se chegou ate aqui, nao foi emitido nenhum abort e nenhum erro de sintax de sql, entao gera o arquivo

		SELECT * FROM pls_dados_atuariais_pck.gerar_arquivo(lote_atuarial_w, regra_arquivo_w) INTO STRICT _ora2pg_r;
 lote_atuarial_w := _ora2pg_r.lote_atuarial_p; regra_arquivo_w := _ora2pg_r.regra_arquivo_p;
	
		-- Marca o final da geracao do arquivo, e importante que esta seja a ultima rotina processada no fluxo normal

		lote_atuarial_w := pls_dados_atuariais_pck.fim_geracao_arq_lote(lote_atuarial_w, nm_usuario_p);
		commit;
	else
		-- se tem alguma inconsistencia, marca como falha

		lote_atuarial_w := pls_dados_atuariais_pck.falha_geracao_arq_lote(lote_atuarial_w, ds_erro_sql_p, null, nm_usuario_p);
	end if; -- fim se esta tudo valido para gerar o arquivo
	
exception
	when others then
		-- Marca como falha

		lote_atuarial_w := pls_dados_atuariais_pck.falha_geracao_arq_lote(lote_atuarial_w, sqlerrm, substr(dbms_utility.format_error_backtrace,1,4000), nm_usuario_p);
		commit;
end;



END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_dados_atuariais_pck.gerencia_gerar_arquivo ( nr_seq_lote_p pls_atuarial_lote.nr_sequencia%type, nr_seq_regra_p pls_atuarial_arq_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
