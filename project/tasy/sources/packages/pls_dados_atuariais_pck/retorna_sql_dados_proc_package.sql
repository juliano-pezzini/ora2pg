-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_proc ( lote_proc_p INOUT lote_atuarial, dado_bind_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o sql dinamico com os filtro necessarios para os dados dos produtos,
	bem como gera o bind dos parametros

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_retorno_w		varchar(32000):= '';

cd_area_procedimento_in_w	varchar(1000);
cd_especialidade_in_w		varchar(1000);
cd_grupo_proc_in_w		varchar(1000);
ie_classificacao_in_w		varchar(1000);
ie_origem_proced_in_w		varchar(1000);
ie_tipo_despesa_tiss_in_w	varchar(1000);



BEGIN


-- levante dos filtros da regra

select	-- Levante das regras por area de procedimento
	max((WITH RECURSIVE cte AS (
select	substr(t.cd_area_procedimento,2)
		from (	select	x.cd_area_procedimento,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_area_procedimento) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_area_procedimento IS NOT NULL AND x.cd_area_procedimento::text <> '')
			group by x.nr_seq_regra, x.cd_area_procedimento) t WHERE t.seq = 1
  UNION ALL
select	c. || ',' || substr(t.cd_area_procedimento,2)
		from (	select	x.cd_area_procedimento, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_area_procedimento) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_area_procedimento IS NOT NULL AND x.cd_area_procedimento::text <> '')
			group by x.nr_seq_regra, x.cd_area_procedimento) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por especialidade de procedimento

	max((WITH RECURSIVE cte AS (
(select	substr(t.cd_especialidade,2)
		from (	select	x.cd_especialidade, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_especialidade) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_especialidade IS NOT NULL AND x.cd_especialidade::text <> '')
			group by x.nr_seq_regra, x.cd_especialidade) t WHERE t.seq = 1
  UNION ALL
(select	c. || ',' || substr(t.cd_especialidade,2)
		from (	select	x.cd_especialidade, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_especialidade) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_especialidade IS NOT NULL AND x.cd_especialidade::text <> '')
			group by x.nr_seq_regra, x.cd_especialidade) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por grupo de procedimento

	max((WITH RECURSIVE cte AS (
(select	substr(t.cd_grupo_proc,2)
		from (	select	x.cd_grupo_proc, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_grupo_proc) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_grupo_proc IS NOT NULL AND x.cd_grupo_proc::text <> '')
			group by x.nr_seq_regra, x.cd_grupo_proc) t WHERE t.seq = 1
  UNION ALL
(select	c. || ',' || substr(t.cd_grupo_proc,2)
		from (	select	x.cd_grupo_proc, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.cd_grupo_proc) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.cd_grupo_proc IS NOT NULL AND x.cd_grupo_proc::text <> '')
			group by x.nr_seq_regra, x.cd_grupo_proc) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por classificacao de procedimento

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_classificacao,3)||''''
		from (	select	x.ie_classificacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_classificacao) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_classificacao IS NOT NULL AND x.ie_classificacao::text <> '')
			group by x.nr_seq_regra, x.ie_classificacao) t WHERE t.seq = 1
  UNION ALL
(select	c. || ''',' || substr(''''||t.ie_classificacao,3)||''''
		from (	select	x.ie_classificacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_classificacao) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_classificacao IS NOT NULL AND x.ie_classificacao::text <> '')
			group by x.nr_seq_regra, x.ie_classificacao) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por origem de procedimento

	max((WITH RECURSIVE cte AS (
(select	substr(t.ie_origem_proced,2)
		from (	select	x.ie_origem_proced, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_origem_proced) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_origem_proced IS NOT NULL AND x.ie_origem_proced::text <> '')
			group by x.nr_seq_regra, x.ie_origem_proced) t WHERE t.seq = 1
  UNION ALL
(select	c. || ',' || substr(t.ie_origem_proced,2)
		from (	select	x.ie_origem_proced, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_origem_proced) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_origem_proced IS NOT NULL AND x.ie_origem_proced::text <> '')
			group by x.nr_seq_regra, x.ie_origem_proced) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levante das regras por Despesa TISS

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_tipo_despesa_tiss,3)||''''
		from (	select	x.ie_tipo_despesa_tiss, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa_tiss) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_tipo_despesa_tiss IS NOT NULL AND x.ie_tipo_despesa_tiss::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa_tiss) t WHERE t.seq = 1
  UNION ALL
(select	c. || ''',' || substr(''''||t.ie_tipo_despesa_tiss,3)||''''
		from (	select	x.ie_tipo_despesa_tiss, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa_tiss) seq
			from	pls_atu_proced_regra_proc	x
			where	x.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra
			and	(x.ie_tipo_despesa_tiss IS NOT NULL AND x.ie_tipo_despesa_tiss::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa_tiss) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
))
into STRICT	cd_area_procedimento_in_w,
	cd_especialidade_in_w,
	cd_grupo_proc_in_w,
	ie_classificacao_in_w,
	ie_origem_proced_in_w,
	ie_tipo_despesa_tiss_in_w
from	pls_atu_proced_regra_proc	a
where	a.nr_seq_regra			= lote_proc_p.nr_seq_proced_regra;


ds_retorno_w	:= ds_retorno_w||	'insert into pls_atu_proced_item (	nr_sequencia, '|| pls_util_pck.enter_w ||
					'					cd_grupo_proc, '|| pls_util_pck.enter_w ||
					'					cd_procedimento, '|| pls_util_pck.enter_w ||
					'					ds_procedimento, '|| pls_util_pck.enter_w ||
					'					dt_atualizacao, '|| pls_util_pck.enter_w ||
					'					dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'					ie_classificacao, '|| pls_util_pck.enter_w ||
					'					ie_origem_proced, '|| pls_util_pck.enter_w ||
					'					ie_tipo_despesa_tiss, '|| pls_util_pck.enter_w ||
					'					nm_usuario, '|| pls_util_pck.enter_w ||
					'					nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'					nr_seq_grupo_rec, '|| pls_util_pck.enter_w ||
					'					nr_seq_lote) '|| pls_util_pck.enter_w ||
					'select	pls_atu_proced_item_seq.nextval nr_sequencia, '|| pls_util_pck.enter_w ||
					'	t.cd_grupo_proc, '|| pls_util_pck.enter_w ||
					'	t.cd_procedimento, '|| pls_util_pck.enter_w ||
					'	t.ds_procedimento, '|| pls_util_pck.enter_w ||
					'	t.dt_atualizacao, '|| pls_util_pck.enter_w ||
					'	t.dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'	t.ie_classificacao, '|| pls_util_pck.enter_w ||
					'	t.ie_origem_proced, '|| pls_util_pck.enter_w ||
					'	t.ie_tipo_despesa_tiss, '|| pls_util_pck.enter_w ||
					'	t.nm_usuario, '|| pls_util_pck.enter_w ||
					'	t.nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_grupo_rec, '|| pls_util_pck.enter_w ||
					'	t.nr_seq_lote '|| pls_util_pck.enter_w ||
					'from (	select	d.cd_grupo_proc, '|| pls_util_pck.enter_w ||
					'		d.cd_procedimento, '|| pls_util_pck.enter_w ||
					'		d.ds_procedimento, '|| pls_util_pck.enter_w ||
					'		sysdate dt_atualizacao, '|| pls_util_pck.enter_w ||
					'		sysdate dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
					'		d.ie_classificacao, '|| pls_util_pck.enter_w ||
					'		d.ie_origem_proced, '|| pls_util_pck.enter_w ||
					'		d.ie_tipo_despesa_tiss, '|| pls_util_pck.enter_w ||
					'		:nm_usuario_p nm_usuario, '|| pls_util_pck.enter_w ||
					'		:nm_usuario_p nm_usuario_nrec, '|| pls_util_pck.enter_w ||
					'		max((	select	max(x.nr_seq_grupo_rec) '|| pls_util_pck.enter_w ||
					'			from	procedimento	x '|| pls_util_pck.enter_w ||
					'			where	x.cd_procedimento	= d.cd_procedimento '|| pls_util_pck.enter_w ||
					'			and	x.ie_origem_proced	= d.ie_origem_proced)) nr_seq_grupo_rec, '|| pls_util_pck.enter_w ||
					'		:nr_seq_lote nr_seq_lote '|| pls_util_pck.enter_w ||
					'	from	pls_protocolo_conta		a, '|| pls_util_pck.enter_w ||
					'		pls_conta			b, '|| pls_util_pck.enter_w ||
					'		pls_conta_proc			c, '|| pls_util_pck.enter_w ||
					'		estrutura_procedimento_v	d '|| pls_util_pck.enter_w ||
					'	where	b.nr_seq_protocolo	= a.nr_sequencia '|| pls_util_pck.enter_w ||
					'	and	c.nr_seq_conta		= b.nr_sequencia '|| pls_util_pck.enter_w ||
					'	and	d.cd_procedimento	= c.cd_procedimento '|| pls_util_pck.enter_w ||
					'	and	d.ie_origem_proced	= c.ie_origem_proced '|| pls_util_pck.enter_w ||
					'	and	a.ie_status		in(''3'', ''6'') '|| pls_util_pck.enter_w ||
					'	and	c.ie_status		not in(''D'', ''M'') '|| pls_util_pck.enter_w ||
					'	and	a.cd_estabelecimento	= :cd_estabelecimento '|| pls_util_pck.enter_w;
dado_bind_p := sql_pck.bind_variable(':nm_usuario_p', nm_usuario_p, dado_bind_p);
dado_bind_p := sql_pck.bind_variable(':nr_seq_lote', lote_proc_p.nr_sequencia, dado_bind_p);
dado_bind_p := sql_pck.bind_variable(':cd_estabelecimento', lote_proc_p.cd_estabelecimento, dado_bind_p);

if (lote_proc_p.dt_inicio_comp IS NOT NULL AND lote_proc_p.dt_inicio_comp::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	a.dt_mes_competencia	between :dt_inicial_p and :dt_final_p '|| pls_util_pck.enter_w;
	
	dado_bind_p := sql_pck.bind_variable(':dt_inicial_p', lote_proc_p.dt_inicio_comp, dado_bind_p);
	dado_bind_p := sql_pck.bind_variable(':dt_final_p', lote_proc_p.dt_fim_comp, dado_bind_p);

end if;

-- Area procedimento

if (cd_area_procedimento_in_w IS NOT NULL AND cd_area_procedimento_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.cd_area_procedimento	in ('||cd_area_procedimento_in_w||') '|| pls_util_pck.enter_w;
end if;

-- Especialidade procedimento

if (cd_especialidade_in_w IS NOT NULL AND cd_especialidade_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.cd_especialidade	in ('||cd_especialidade_in_w||') '|| pls_util_pck.enter_w;
end if;

-- Grupo procedimento

if (cd_grupo_proc_in_w IS NOT NULL AND cd_grupo_proc_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.cd_grupo_proc		in ('||cd_grupo_proc_in_w||') '|| pls_util_pck.enter_w;
end if;

-- Classificacao procedimento

if (ie_classificacao_in_w IS NOT NULL AND ie_classificacao_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.ie_classificacao	in ('||ie_classificacao_in_w||') '|| pls_util_pck.enter_w;
end if;

-- Classificacao procedimento

if (ie_origem_proced_in_w IS NOT NULL AND ie_origem_proced_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.ie_origem_proced	in ('||ie_origem_proced_in_w||') '|| pls_util_pck.enter_w;
end if;

-- Classificacao procedimento

if (ie_tipo_despesa_tiss_in_w IS NOT NULL AND ie_tipo_despesa_tiss_in_w::text <> '') then

	ds_retorno_w	:= ds_retorno_w||	'	and	d.ie_tipo_despesa_tiss	in ('||ie_tipo_despesa_tiss_in_w||') '|| pls_util_pck.enter_w;
end if;





ds_retorno_w	:= ds_retorno_w||	'	group by	d.cd_grupo_proc, '|| pls_util_pck.enter_w ||
					'			d.cd_area_procedimento, '|| pls_util_pck.enter_w ||
					'			d.cd_especialidade, '|| pls_util_pck.enter_w ||
					'			d.cd_procedimento, '|| pls_util_pck.enter_w ||
					'			d.ds_procedimento, '|| pls_util_pck.enter_w ||
					'			d.ie_classificacao, '|| pls_util_pck.enter_w ||
					'			d.ie_origem_proced, '|| pls_util_pck.enter_w ||
					'			d.ie_tipo_despesa_tiss ) t '|| pls_util_pck.enter_w;

-- Gravar log

CALL pls_dados_atuariais_pck.gravar_log(	lote_proc_p.nr_sequencia,
					lote_proc_p.nr_seq_proced_regra, 
					lote_proc_p.ie_tipo_arquivo, 
					ds_retorno_w, 
					dado_bind_p := pls_dados_atuariais_pck.obter_bind_log(dado_bind_p), 
					dbms_utility.format_error_backtrace, 
					nm_usuario_p);
	
return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_proc ( lote_proc_p INOUT lote_atuarial, dado_bind_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
