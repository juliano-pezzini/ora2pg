-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_dados_atuariais_pck.duplicar_regra_arq ( nr_seq_regra_p pls_atuarial_arq_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_regra_nova_p INOUT pls_atuarial_arq_regra.nr_sequencia%type) AS $body$
DECLARE

_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Duplicar uma regra de geracao de arquivo.

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


-- tabelas virtuais

tb_nr_seq_campo_w	dbms_sql.number_table;
tb_ds_function_w	dbms_sql.varchar2_table;
tb_ds_mascara_w		dbms_sql.varchar2_table;
tb_ds_preenchimento_w	dbms_sql.varchar2_table;
tb_ds_titulo_w		dbms_sql.varchar2_table;
tb_ie_alinhamento_w	dbms_sql.varchar2_table;
tb_ie_campo_w		dbms_sql.varchar2_table;
tb_ie_padrao_w		dbms_sql.varchar2_table;
tb_ie_tamanho_w		dbms_sql.number_table;
tb_nr_ordem_w		dbms_sql.number_table;
tb_nr_seq_registro_w	dbms_sql.number_table;

-- Regra nova

c01 CURSOR(	nr_seq_regra_pc	pls_atuarial_arq_regra.nr_sequencia%type) FOR
	SELECT	nextval('pls_atuarial_arq_regra_seq') nr_seq_regra,
		a.cd_estabelecimento,
		a.ds_arquivo,
		a.ds_regra,
		a.ie_situacao,
		a.ie_tipo_arquivo
	from	pls_atuarial_arq_regra	a
	where	a.nr_sequencia		= nr_seq_regra_pc;
	
-- Registros novos

c02 CURSOR(	nr_seq_regra_pc	pls_atuarial_arq_regra.nr_sequencia%type) FOR
	SELECT	nextval('pls_atuarial_arq_reg_seq') nr_seq_reg,
		a.ie_separador,
		a.ie_tipo_registro,
		a.nr_sequencia nr_seq_reg_antigo
	from	pls_atuarial_arq_reg	a
	where	a.nr_seq_regra		= nr_seq_regra_pc;
	
-- Campos novos

c03 CURSOR(	nr_seq_reg_pc		pls_atuarial_arq_reg.nr_sequencia%type,
		nr_seq_reg_novo_pc	pls_atuarial_arq_reg.nr_sequencia%type) FOR
	SELECT	nextval('pls_atuarial_arq_campo_seq') nr_seq_campo,
		a.ds_function,
		a.ds_mascara,
		a.ds_preenchimento,
		a.ds_titulo,
		a.ie_alinhamento,
		a.ie_campo,
		a.ie_padrao,
		a.ie_tamanho,
		a.nr_ordem,
		nr_seq_reg_novo_pc nr_seq_registro
	from	pls_atuarial_arq_campo	a
	where	a.nr_seq_registro	= nr_seq_reg_pc;

BEGIN

begin
	-- Abre os dados da regra

	for r_c01_w in c01(nr_seq_regra_p) loop

		nr_seq_regra_nova_p := r_c01_w.nr_seq_regra;
		
		-- grava o registro

		CALL pls_dados_atuariais_pck.grava_regra_arq(	r_c01_w.nr_seq_regra,
					r_c01_w.cd_estabelecimento,
					r_c01_w.ds_arquivo,
					r_c01_w.ds_regra,
					r_c01_w.ie_situacao,
					r_c01_w.ie_tipo_arquivo,
					nm_usuario_p);

		-- abre os registros

		for r_c02_w in c02(nr_seq_regra_p) loop
		
			-- grava o registro

			CALL pls_dados_atuariais_pck.grava_regra_arq_reg(	r_c02_w.nr_seq_reg,
						nr_seq_regra_nova_p,
						r_c02_w.ie_separador,
						r_c02_w.ie_tipo_registro,
						nm_usuario_p);
			
			-- busca os campos pertinentes ao registro e grava eles

			open c03(	r_c02_w.nr_seq_reg_antigo,
					r_c02_w.nr_seq_reg);
			loop
			fetch c03 bulk collect into	tb_nr_seq_campo_w,
							tb_ds_function_w,
							tb_ds_mascara_w,
							tb_ds_preenchimento_w,
							tb_ds_titulo_w,
							tb_ie_alinhamento_w,
							tb_ie_campo_w,
							tb_ie_padrao_w,
							tb_ie_tamanho_w,
							tb_nr_ordem_w,
							tb_nr_seq_registro_w limit pls_util_pck.qt_registro_transacao_w;
			exit when tb_nr_seq_campo_w.count = 0;
			
				SELECT * FROM pls_dados_atuariais_pck.grava_regra_arq_campo(	tb_nr_seq_campo_w, tb_ds_function_w, tb_ds_mascara_w, tb_ds_preenchimento_w, tb_ds_titulo_w, tb_ie_alinhamento_w, tb_ie_campo_w, tb_ie_padrao_w, tb_ie_tamanho_w, tb_nr_ordem_w, tb_nr_seq_registro_w, nm_usuario_p, 'S') INTO STRICT _ora2pg_r;
 	tb_nr_seq_campo_w := _ora2pg_r.tb_nr_seq_campo_p; tb_ds_function_w := _ora2pg_r.tb_ds_function_p; tb_ds_mascara_w := _ora2pg_r.tb_ds_mascara_p; tb_ds_preenchimento_w := _ora2pg_r.tb_ds_preenchimento_p; tb_ds_titulo_w := _ora2pg_r.tb_ds_titulo_p; tb_ie_alinhamento_w := _ora2pg_r.tb_ie_alinhamento_p; tb_ie_campo_w := _ora2pg_r.tb_ie_campo_p; tb_ie_padrao_w := _ora2pg_r.tb_ie_padrao_p; tb_ie_tamanho_w := _ora2pg_r.tb_ie_tamanho_p; tb_nr_ordem_w := _ora2pg_r.tb_nr_ordem_p; tb_nr_seq_registro_w := _ora2pg_r.tb_nr_seq_registro_p;
			end loop;
			
			if (c03%isopen) then
			
				close c03;
			end if;
			
						
		end loop; -- fim registros
	end loop; -- fim regra

	commit;
exception
	when others then
		rollback;
		
		if (c03%isopen) then
			
			close c03;
		end if;
		
		CALL wheb_mensagem_pck.exibir_mensagem_abort(881240, 'ERRO=' ||sqlerrm ||';CALL=' || dbms_utility.format_error_backtrace);
end;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_dados_atuariais_pck.duplicar_regra_arq ( nr_seq_regra_p pls_atuarial_arq_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_regra_nova_p INOUT pls_atuarial_arq_regra.nr_sequencia%type) FROM PUBLIC;
