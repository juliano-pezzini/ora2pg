-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_cta ( lote_cta_p INOUT lote_atuarial, dado_bind_cta_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o sql dinamico com os filtro necessarios para os dados do beneficiario,
	bem como gera o bind dos parametros

-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

	
Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_retorno_w			varchar(32000):= '';

ie_status_prot_in_w		varchar(1000);
ie_apresentacao_in_w		varchar(1000);
qt_ie_apresentacao_w		integer;

ie_status_cta_in_w		varchar(1000);
nr_seq_atend_cta_w		pls_atu_conta_regra_conta.nr_seq_tipo_atendimento%type;
qt_nr_seq_atend_cta_w		integer;

ie_tipo_despesa_proc_in_w	varchar(1000);
ie_status_proc_in_w		varchar(1000);

ie_tipo_despesa_mat_in_w	varchar(1000);
ie_status_mat_in_w		varchar(1000);

ie_regime_atendimento_cta_w	pls_atu_conta_regra_conta.ie_regime_atendimento%type;
qt_ie_regime_atendimento_cta_w	integer;

ie_saude_ocupacional_cta_w	pls_atu_conta_regra_conta.ie_saude_ocupacional%type;
qt_ie_saude_ocupacional_cta_w	integer;


BEGIN


-- Levanta os filtros do protocolo

select	-- Status
	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_prot	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_prot	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Apresentacao no formato IN

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_apresentacao,3)||''''
		from (	select	x.ie_apresentacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_apresentacao) seq
			from	pls_atu_conta_regra_prot	x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_apresentacao IS NOT NULL AND x.ie_apresentacao::text <> '')
			group by x.nr_seq_regra, x.ie_apresentacao) t WHERE t.seq = 1
  UNION ALL
(select	c. || ''',' || substr(''''||t.ie_apresentacao,3)||''''
		from (	select	x.ie_apresentacao, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_apresentacao) seq
			from	pls_atu_conta_regra_prot	x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_apresentacao IS NOT NULL AND x.ie_apresentacao::text <> '')
			group by x.nr_seq_regra, x.ie_apresentacao) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Contagem da apresentacao, sera utilizado par aotimizacao

	max((	select	count(distinct x.ie_apresentacao)
		from	pls_atu_conta_regra_prot	x
		where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
		and	(x.ie_apresentacao IS NOT NULL AND x.ie_apresentacao::text <> '')))
into STRICT	ie_status_prot_in_w,
	ie_apresentacao_in_w,
	qt_ie_apresentacao_w		
from	pls_atu_conta_regra_prot	a
where	a.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra;


-- Levanta os filtros de contas

select	-- Levanta quantos tipos de atendimento distintos a conta possuir
	max((	select	count(distinct x.nr_seq_tipo_atendimento)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.nr_seq_tipo_atendimento IS NOT NULL AND x.nr_seq_tipo_atendimento::text <> ''))),
	-- Levanta o maior tipo de atendimento da regra, pode ser utilizado conforme a quantidade de distintos

	max((	select	max(x.nr_seq_tipo_atendimento)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.nr_seq_tipo_atendimento IS NOT NULL AND x.nr_seq_tipo_atendimento::text <> ''))),
	-- Levanta o status dos filtros

	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_conta	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_conta	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levanta quantos regimes de atendimento distintos a conta possuir

	max((	select	count(distinct x.ie_regime_atendimento)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.ie_regime_atendimento IS NOT NULL AND x.ie_regime_atendimento::text <> ''))),
	-- Levanta o maior regime de atendimento da regra, pode ser utilizado conforme a quantidade de distintos

	max((	select	max(x.ie_regime_atendimento)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.ie_regime_atendimento IS NOT NULL AND x.ie_regime_atendimento::text <> ''))),
	-- Levanta quantos saudes ocupacionais distintos a conta possuir

	max((	select	count(distinct x.ie_saude_ocupacional)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.ie_saude_ocupacional IS NOT NULL AND x.ie_saude_ocupacional::text <> ''))),
	-- Levanta o maior saude ocupacional da regra, pode ser utilizado conforme a quantidade de distintos

	max((	select	max(x.ie_saude_ocupacional)
		from	pls_atu_conta_regra_conta	x
		where	x.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra
		and	(x.ie_saude_ocupacional IS NOT NULL AND x.ie_saude_ocupacional::text <> '')))
into STRICT	qt_nr_seq_atend_cta_w,
	nr_seq_atend_cta_w,
	ie_status_cta_in_w,
	qt_ie_regime_atendimento_cta_w,
	ie_regime_atendimento_cta_w,
	qt_ie_saude_ocupacional_cta_w,
	ie_saude_ocupacional_cta_w
from	pls_atu_conta_regra_conta	a
where	a.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra;

-- Levanta os filtros de procedimentos

select	-- Levanta o tipo de despesa do filtro
	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_tipo_despesa,3)||''''
		from (	select	x.ie_tipo_despesa,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa) seq
			from	pls_atu_conta_regra_proc	x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_tipo_despesa IS NOT NULL AND x.ie_tipo_despesa::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_tipo_despesa,3)||''''
		from (	select	x.ie_tipo_despesa, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa) seq
			from	pls_atu_conta_regra_proc	x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_tipo_despesa IS NOT NULL AND x.ie_tipo_despesa::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levanta o status do filtro

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_proc	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) t WHERE t.seq = 1
  UNION ALL
(select	c. || ''',' || substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_proc	x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
))
into STRICT	ie_tipo_despesa_proc_in_w,
	ie_status_proc_in_w
from	pls_atu_conta_regra_proc	a
where	a.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra;


-- Levanta os filtros de material

select	-- Levanta o tipo de despesa do filtro
	max((WITH RECURSIVE cte AS (
select	substr(''''||t.ie_tipo_despesa,3)||''''
		from (	select	x.ie_tipo_despesa,
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa) seq
			from	pls_atu_conta_regra_mat		x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_tipo_despesa IS NOT NULL AND x.ie_tipo_despesa::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa) t WHERE t.seq = 1
  UNION ALL
select	c. || ''',' || substr(''''||t.ie_tipo_despesa,3)||''''
		from (	select	x.ie_tipo_despesa, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_tipo_despesa) seq
			from	pls_atu_conta_regra_mat		x
			where	x.nr_seq_regra		= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_tipo_despesa IS NOT NULL AND x.ie_tipo_despesa::text <> '')
			group by x.nr_seq_regra, x.ie_tipo_despesa) JOIN cte c ON (c.prior seq + 1 = t.seq)

) SELECT * FROM cte WHERE seq	= cnt;
)),
	-- Levanta o status do filtro

	max((WITH RECURSIVE cte AS (
(select	substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_mat		x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) t WHERE t.seq = 1
  UNION ALL
(select	c. || ''',' || substr(''''||t.ie_status,3)||''''
		from (	select	x.ie_status, 
				count(1) over (partition by x.nr_seq_regra) cnt,
				row_number() over (partition by x.nr_seq_regra order by x.ie_status) seq
			from	pls_atu_conta_regra_mat		x
			where	x.nr_seq_regra	= lote_cta_p.nr_seq_conta_regra
			and	(x.ie_status IS NOT NULL AND x.ie_status::text <> '')
			group by x.nr_seq_regra, x.ie_status) JOIN cte c ON (c.prior seq + 1 = t.seq))

) SELECT * FROM cte WHERE seq	= cnt;
))
into STRICT	ie_tipo_despesa_mat_in_w,
	ie_status_mat_in_w
from	pls_atu_conta_regra_mat		a
where	a.nr_seq_regra			= lote_cta_p.nr_seq_conta_regra;


ds_retorno_w	:= 	'insert into pls_atu_conta_item (	nr_sequencia, '|| pls_util_pck.enter_w ||
			'					cd_guia, '|| pls_util_pck.enter_w ||
			'					cd_guia_referencia, '|| pls_util_pck.enter_w ||
			'					cd_material_ops, '|| pls_util_pck.enter_w ||
			'					cd_procedimento, '|| pls_util_pck.enter_w ||
			'					cd_usuario_plano, '|| pls_util_pck.enter_w ||
			'					dt_alta, '|| pls_util_pck.enter_w ||
			'					dt_atendimento_mat, '|| pls_util_pck.enter_w ||
			'					dt_atualizacao, '|| pls_util_pck.enter_w ||
			'					dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
			'					dt_entrada, '|| pls_util_pck.enter_w ||
			'					dt_mes_compet_prot, '|| pls_util_pck.enter_w ||
			'					dt_procedimento, '|| pls_util_pck.enter_w ||
			'					dt_recebimento, '|| pls_util_pck.enter_w ||
			'					ie_origem_proced, '|| pls_util_pck.enter_w ||
			'					ie_tipo_desp_mat, '|| pls_util_pck.enter_w ||
			'					ie_tipo_desp_proc, '|| pls_util_pck.enter_w ||
			'					ie_tipo_guia, '|| pls_util_pck.enter_w ||
			'					ie_tipo_segurado, '|| pls_util_pck.enter_w ||
			'					nm_usuario, '|| pls_util_pck.enter_w ||
			'					nm_usuario_nrec, '|| pls_util_pck.enter_w ||
			'					nr_seq_clinica, '|| pls_util_pck.enter_w ||
			'					nr_seq_conta, '|| pls_util_pck.enter_w ||
			'					nr_seq_conta_mat, '|| pls_util_pck.enter_w ||
			'					nr_seq_conta_proc, '|| pls_util_pck.enter_w ||
			'					nr_seq_lote, '|| pls_util_pck.enter_w ||
			'					nr_seq_material, '|| pls_util_pck.enter_w ||
			'					nr_seq_plano, '|| pls_util_pck.enter_w ||
			'					nr_seq_prestador_exec, '|| pls_util_pck.enter_w ||
			'					nr_seq_prestador_prot, '|| pls_util_pck.enter_w ||
			'					nr_seq_protocolo, '|| pls_util_pck.enter_w ||
			'					nr_seq_segurado, '|| pls_util_pck.enter_w ||
			'					nr_seq_titular, '|| pls_util_pck.enter_w ||
			'					vl_cobrado, '|| pls_util_pck.enter_w ||
			'					vl_coparticipacao, '|| pls_util_pck.enter_w ||
			'					vl_liberado, '|| pls_util_pck.enter_w ||
			'					vl_total) '|| pls_util_pck.enter_w ||
			'			select	pls_atu_conta_item_seq.nextVal nr_sequencia, '|| pls_util_pck.enter_w ||
			'				t.cd_guia, '|| pls_util_pck.enter_w ||
			'				t.cd_guia_referencia, '|| pls_util_pck.enter_w ||
			'				t.cd_material_ops, '|| pls_util_pck.enter_w ||
			'				t.cd_procedimento, '|| pls_util_pck.enter_w ||
			'				t.cd_usuario_plano, '|| pls_util_pck.enter_w ||
			'				t.dt_alta, '|| pls_util_pck.enter_w ||
			'				t.dt_atendimento_mat, '|| pls_util_pck.enter_w ||
			'				t.dt_atualizacao, '|| pls_util_pck.enter_w ||
			'				t.dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
			'				t.dt_entrada, '|| pls_util_pck.enter_w ||
			'				t.dt_mes_competencia, '|| pls_util_pck.enter_w ||
			'				t.dt_procedimento, '|| pls_util_pck.enter_w ||
			'				t.dt_recebimento, '|| pls_util_pck.enter_w ||
			'				t.ie_origem_proced, '|| pls_util_pck.enter_w ||
			'				t.ie_tipo_desp_mat, '|| pls_util_pck.enter_w ||
			'				t.ie_tipo_desp_proc, '|| pls_util_pck.enter_w ||
			'				t.ie_tipo_guia, '|| pls_util_pck.enter_w ||
			'				t.ie_tipo_segurado, '|| pls_util_pck.enter_w ||
			'				t.nm_usuario, '|| pls_util_pck.enter_w ||
			'				t.nm_usuario_nrec, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_clinica, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_conta, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_conta_mat, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_conta_proc, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_lote, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_material, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_plano, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_prestador_exec, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_prestador, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_protocolo, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_segurado, '|| pls_util_pck.enter_w ||
			'				t.nr_seq_titular, '|| pls_util_pck.enter_w ||
			'				t.vl_cobrado, '|| pls_util_pck.enter_w ||
			'				t.vl_coparticipacao, '|| pls_util_pck.enter_w ||
			'				t.vl_liberado, '|| pls_util_pck.enter_w ||
			'				t.vl_total '|| pls_util_pck.enter_w ||
			'			from (	select	b.cd_guia, '|| pls_util_pck.enter_w ||
			'					b.cd_guia_referencia, '|| pls_util_pck.enter_w ||
			'					null cd_material_ops, '|| pls_util_pck.enter_w ||
			'					c.cd_procedimento, '|| pls_util_pck.enter_w ||
			'					(	select	max(x.cd_usuario_plano) '|| pls_util_pck.enter_w ||
			'						from	pls_segurado_carteira	x '|| pls_util_pck.enter_w ||
			'						where	x.nr_seq_segurado	= b.nr_seq_segurado) cd_usuario_plano, '|| pls_util_pck.enter_w ||
			'					nvl(b.dt_fim_faturamento, b.dt_alta) dt_alta, '|| pls_util_pck.enter_w ||
			'					null dt_atendimento_mat, '|| pls_util_pck.enter_w ||
			'					sysdate dt_atualizacao, '|| pls_util_pck.enter_w ||
			'					sysdate dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
			'					nvl(b.dt_inicio_faturamento, b.dt_entrada) dt_entrada, '|| pls_util_pck.enter_w ||
			'					a.dt_mes_competencia, '|| pls_util_pck.enter_w ||
			'					c.dt_procedimento, '|| pls_util_pck.enter_w ||
			'					a.dt_recebimento, '|| pls_util_pck.enter_w ||
			'					c.ie_origem_proced, '|| pls_util_pck.enter_w ||
			'					null ie_tipo_desp_mat, '|| pls_util_pck.enter_w ||
			'					c.ie_tipo_despesa ie_tipo_desp_proc, '|| pls_util_pck.enter_w ||
			'					b.ie_tipo_guia, '|| pls_util_pck.enter_w ||
			'					nvl(nvl(b.ie_tipo_segurado,d.ie_tipo_segurado), ''B'') ie_tipo_segurado, '|| pls_util_pck.enter_w ||
			'					:nm_usuario_p nm_usuario, '|| pls_util_pck.enter_w ||
			'					:nm_usuario_p nm_usuario_nrec, '|| pls_util_pck.enter_w ||
			'					b.nr_seq_clinica, '|| pls_util_pck.enter_w ||
			'					b.nr_sequencia nr_seq_conta, '|| pls_util_pck.enter_w ||
			'					c.nr_sequencia nr_seq_conta_proc, '|| pls_util_pck.enter_w ||
			'					null nr_seq_conta_mat, '|| pls_util_pck.enter_w ||
			'					:nr_seq_lote nr_seq_lote, '|| pls_util_pck.enter_w ||
			'					null nr_seq_material, '|| pls_util_pck.enter_w ||
			'					d.nr_seq_plano, '|| pls_util_pck.enter_w ||
			'					b.nr_seq_prestador_exec, '|| pls_util_pck.enter_w ||
			'					a.nr_seq_prestador, '|| pls_util_pck.enter_w ||
			'					a.nr_sequencia nr_seq_protocolo, '|| pls_util_pck.enter_w ||
			'					d.nr_sequencia nr_seq_segurado, '|| pls_util_pck.enter_w ||
			'					d.nr_seq_titular, '|| pls_util_pck.enter_w ||
			'					b.vl_cobrado, '|| pls_util_pck.enter_w ||
			'					(	select	nvl(sum(vl_coparticipacao),0) '|| pls_util_pck.enter_w ||
			'						from	pls_conta_coparticipacao	z '|| pls_util_pck.enter_w ||
			'						where	z.nr_seq_conta_proc		= c.nr_sequencia) vl_coparticipacao, '|| pls_util_pck.enter_w ||
			'					c.vl_liberado, '|| pls_util_pck.enter_w ||
			'					c.vl_liberado vl_total '|| pls_util_pck.enter_w ||
			'				from	pls_protocolo_conta	a, '|| pls_util_pck.enter_w ||
			'					pls_conta		b, '|| pls_util_pck.enter_w ||
			'					pls_conta_proc		c, '|| pls_util_pck.enter_w ||
			'					pls_segurado		d '|| pls_util_pck.enter_w ||
			'				where	b.nr_seq_protocolo	= a.nr_sequencia '|| pls_util_pck.enter_w ||
			'				and	c.nr_seq_conta		= b.nr_sequencia '|| pls_util_pck.enter_w ||
			'				and	d.nr_sequencia		= b.nr_seq_segurado '|| pls_util_pck.enter_w ||
			'				and	a.cd_estabelecimento	= :cd_estabelecimento '|| pls_util_pck.enter_w;
			
dado_bind_cta_p := sql_pck.bind_variable(':nm_usuario_p', nm_usuario_p, dado_bind_cta_p);
dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_lote', lote_cta_p.nr_sequencia, dado_bind_cta_p);
dado_bind_cta_p := sql_pck.bind_variable(':cd_estabelecimento', lote_cta_p.cd_estabelecimento, dado_bind_cta_p);

if (lote_cta_p.dt_inicio_comp IS NOT NULL AND lote_cta_p.dt_inicio_comp::text <> '') then
	
	ds_retorno_w := ds_retorno_w || '				and	a.dt_mes_competencia between :dt_inicial_p and :dt_final_p '|| pls_util_pck.enter_w;
	
	dado_bind_cta_p := sql_pck.bind_variable(':dt_inicial_p', lote_cta_p.dt_inicio_comp, dado_bind_cta_p);
	dado_bind_cta_p := sql_pck.bind_variable(':dt_final_p', lote_cta_p.dt_fim_comp, dado_bind_cta_p);
	
end if;

-- Filtros protocolo

if (ie_status_prot_in_w IS NOT NULL AND ie_status_prot_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	a.ie_status in('||ie_status_prot_in_w||') '|| pls_util_pck.enter_w;
end if;

-- E verificado a quantidade de filtros distintos para a apresentacao do protocolo.

-- Atualmente existem 2 valores possiveis, apresentado ou reaprasentacao, nao esta previsto novos valores

-- Entao como e um filtro que pode onerar a performance, e feita uma verificacao, se a quantidade distinta for 1,

-- deve-se aplicar o filtro (pode-se usar o IN nesse caso, que o Oracle vai transformar em "=")

-- Se tiver 0 (zero) ou 2 (dois), entao e entendido que todas as alternativas estao presentes nos filtros, portanto

-- pode-se despreza-lo, melhorando o plano de performance.

if (qt_ie_apresentacao_w = 1) then

	ds_retorno_w := ds_retorno_w||	'				and	a.ie_apresentacao in('||ie_apresentacao_in_w||') '|| pls_util_pck.enter_w;
end if;


-- Filtros Conta

if (ie_status_cta_in_w IS NOT NULL AND ie_status_cta_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	b.ie_status in('||ie_status_cta_in_w||') '|| pls_util_pck.enter_w;
end if;

-- E verificado a quantidade de filtros distintos para o tipo de atendimento da conta medica

-- Essa informacao e cadastrada pela operadora, ou seja, nao existe limite determinado para a quantidade de informacoes disponiveis

-- portanto e mais indicado a utilizacao da sentenca "EXISTS", sendo mais performatica conforme a quantidade de informacao do filtro

-- Ainda e feita uma avaliacao da quantidade distinta de filtros por tipo de atendimento, se a quantidade for igual a 1, entao

-- e feito uma sentenca "=", que e mais performatica. Se tiver mais de 1, entao e utilizado o EXISTS

-- Se tiver 0 (zero), o filtro e desconsiderado


if (qt_nr_seq_atend_cta_w > 1 ) then
	-- Cria com o Exists

	ds_retorno_w := ds_retorno_w||	'				and	exists(	select	1 '|| pls_util_pck.enter_w ||
					'				and		from	pls_atu_conta_regra_conta	x '|| pls_util_pck.enter_w ||
					'				and		where	x.nr_seq_tipo_atendimento	= b.nr_seq_tipo_atendimento '|| pls_util_pck.enter_w ||
					'				and		and	x.nr_seq_regra			= :nr_seq_regra )'|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_regra', lote_cta_p.nr_seq_conta_regra, dado_bind_cta_p);
	
elsif (qt_nr_seq_atend_cta_w = 1 ) then
	-- Cria com o "="

	ds_retorno_w := ds_retorno_w||	'				and	b.nr_seq_tipo_atendimento	= :nr_seq_tipo_atendimento '|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_tipo_atendimento', nr_seq_atend_cta_w, dado_bind_cta_p);
end if;

if (qt_ie_regime_atendimento_cta_w > 1 ) then
	-- Cria com o Exists

	ds_retorno_w := ds_retorno_w||	'				and	exists(	select	1 '|| pls_util_pck.enter_w ||
					'				and		from	pls_atu_conta_regra_conta	x '|| pls_util_pck.enter_w ||
					'				and		where	x.ie_regime_atendimento		= b.ie_regime_atendimento '|| pls_util_pck.enter_w ||
					'				and		and	x.nr_seq_regra			= :nr_seq_regra )'|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_regra', lote_cta_p.nr_seq_conta_regra, dado_bind_cta_p);
	
elsif (qt_ie_regime_atendimento_cta_w = 1 ) then
	-- Cria com o "="

	ds_retorno_w := ds_retorno_w||	'				and	b.ie_regime_atendimento	= :ie_regime_atendimento '|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':ie_regime_atendimento', ie_regime_atendimento_cta_w, dado_bind_cta_p);
end if;

if (qt_ie_saude_ocupacional_cta_w > 1 ) then
	-- Cria com o Exists

	ds_retorno_w := ds_retorno_w||	'				and	exists(	select	1 '|| pls_util_pck.enter_w ||
					'				and		from	pls_atu_conta_regra_conta	x '|| pls_util_pck.enter_w ||
					'				and		where	x.ie_saude_ocupacional		= b.ie_saude_ocupacional '|| pls_util_pck.enter_w ||
					'				and		and	x.nr_seq_regra			= :nr_seq_regra )'|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_regra', lote_cta_p.nr_seq_conta_regra, dado_bind_cta_p);
	
elsif (qt_ie_saude_ocupacional_cta_w = 1 ) then
	-- Cria com o "="

	ds_retorno_w := ds_retorno_w||	'				and	b.ie_saude_ocupacional	= :ie_saude_ocupacional '|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':ie_saude_ocupacional', ie_saude_ocupacional_cta_w, dado_bind_cta_p);
end if;

-- Filtros procedimentos

if (ie_tipo_despesa_proc_in_w IS NOT NULL AND ie_tipo_despesa_proc_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	c.ie_tipo_despesa	in ('|| ie_tipo_despesa_proc_in_w ||') ' || pls_util_pck.enter_w;
end if;


if (ie_status_proc_in_w IS NOT NULL AND ie_status_proc_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	c.ie_status	in ('|| ie_status_proc_in_w ||') ' || pls_util_pck.enter_w;
end if;

	

ds_retorno_w := ds_retorno_w||	'				union all '|| pls_util_pck.enter_w ||
				'				select	b.cd_guia, '|| pls_util_pck.enter_w ||
				'					b.cd_guia_referencia, '|| pls_util_pck.enter_w ||
				'					e.cd_material_ops, '|| pls_util_pck.enter_w ||
				'					null cd_procedimento, '|| pls_util_pck.enter_w ||
				'					(	select	max(x.cd_usuario_plano) '|| pls_util_pck.enter_w ||
				'						from	pls_segurado_carteira	x '|| pls_util_pck.enter_w ||
				'						where	x.nr_seq_segurado	= b.nr_seq_segurado) cd_usuario_plano, '|| pls_util_pck.enter_w ||
				'					nvl(b.dt_fim_faturamento, b.dt_alta) dt_alta, '|| pls_util_pck.enter_w ||
				'					c.dt_atendimento_referencia dt_atendimento_mat, '|| pls_util_pck.enter_w ||
				'					sysdate dt_atualizacao, '|| pls_util_pck.enter_w ||
				'					sysdate dt_atualizacao_nrec, '|| pls_util_pck.enter_w ||
				'					nvl(b.dt_inicio_faturamento, b.dt_entrada) dt_entrada, '|| pls_util_pck.enter_w ||
				'					a.dt_mes_competencia, '|| pls_util_pck.enter_w ||
				'					null dt_procedimento, '|| pls_util_pck.enter_w ||
				'					a.dt_recebimento, '|| pls_util_pck.enter_w ||
				'					null ie_origem_proced, '|| pls_util_pck.enter_w ||
				'					c.ie_tipo_despesa ie_tipo_desp_mat, '|| pls_util_pck.enter_w ||
				'					null ie_tipo_desp_proc, '|| pls_util_pck.enter_w ||
				'					b.ie_tipo_guia, '|| pls_util_pck.enter_w ||
				'					nvl(nvl(b.ie_tipo_segurado,d.ie_tipo_segurado), ''B'') ie_tipo_segurado, '|| pls_util_pck.enter_w ||
				'					:nm_usuario_p nm_usuario, '|| pls_util_pck.enter_w ||
				'					:nm_usuario_p nm_usuario_nrec, '|| pls_util_pck.enter_w ||
				'					b.nr_seq_clinica, '|| pls_util_pck.enter_w ||
				'					b.nr_sequencia nr_seq_conta, '|| pls_util_pck.enter_w ||
				'					null nr_seq_conta_proc, '|| pls_util_pck.enter_w ||
				'					c.nr_sequencia nr_seq_conta_mat, '|| pls_util_pck.enter_w ||
				'					:nr_seq_lote nr_seq_lote, '|| pls_util_pck.enter_w ||
				'					c.nr_seq_material, '|| pls_util_pck.enter_w ||
				'					d.nr_seq_plano, '|| pls_util_pck.enter_w ||
				'					b.nr_seq_prestador_exec, '|| pls_util_pck.enter_w ||
				'					a.nr_seq_prestador, '|| pls_util_pck.enter_w ||
				'					a.nr_sequencia nr_seq_protocolo, '|| pls_util_pck.enter_w ||
				'					d.nr_sequencia nr_seq_segurado, '|| pls_util_pck.enter_w ||
				'					d.nr_seq_titular, '|| pls_util_pck.enter_w ||
				'					b.vl_cobrado, '|| pls_util_pck.enter_w ||
				'					(	select	nvl(sum(vl_coparticipacao),0) '|| pls_util_pck.enter_w ||
				'						from	pls_conta_coparticipacao	z '|| pls_util_pck.enter_w ||
				'						where	z.nr_seq_conta_mat		= c.nr_sequencia) vl_coparticipacao, '|| pls_util_pck.enter_w ||
				'					c.vl_liberado, '|| pls_util_pck.enter_w ||
				'					c.vl_liberado vl_total '|| pls_util_pck.enter_w ||
				'				from	pls_protocolo_conta	a, '|| pls_util_pck.enter_w ||
				'					pls_conta		b, '|| pls_util_pck.enter_w ||
				'					pls_conta_mat		c, '|| pls_util_pck.enter_w ||
				'					pls_segurado		d, '|| pls_util_pck.enter_w ||
				'					pls_material		e '|| pls_util_pck.enter_w ||
				'				where	b.nr_seq_protocolo	= a.nr_sequencia '|| pls_util_pck.enter_w ||
				'				and	c.nr_seq_conta		= b.nr_sequencia '|| pls_util_pck.enter_w ||
				'				and	d.nr_sequencia		= b.nr_seq_segurado '|| pls_util_pck.enter_w ||
				'				and	e.nr_sequencia		= c.nr_seq_material '|| pls_util_pck.enter_w ||
				'				and	a.cd_estabelecimento	= :cd_estabelecimento '|| pls_util_pck.enter_w;
			
dado_bind_cta_p := sql_pck.bind_variable(':nm_usuario_p', nm_usuario_p, dado_bind_cta_p);
dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_lote', lote_cta_p.nr_sequencia, dado_bind_cta_p);
dado_bind_cta_p := sql_pck.bind_variable(':cd_estabelecimento', lote_cta_p.cd_estabelecimento, dado_bind_cta_p);

if (lote_cta_p.dt_inicio_comp IS NOT NULL AND lote_cta_p.dt_inicio_comp::text <> '') then
	
	ds_retorno_w := ds_retorno_w || '				and	a.dt_mes_competencia between :dt_inicial_p and :dt_final_p '|| pls_util_pck.enter_w;
	
	dado_bind_cta_p := sql_pck.bind_variable(':dt_inicial_p', lote_cta_p.dt_inicio_comp, dado_bind_cta_p);
	dado_bind_cta_p := sql_pck.bind_variable(':dt_final_p', lote_cta_p.dt_fim_comp, dado_bind_cta_p);
	
end if;


-- Filtros protocolo

if (ie_status_prot_in_w IS NOT NULL AND ie_status_prot_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	a.ie_status in('||ie_status_prot_in_w||') '|| pls_util_pck.enter_w;
end if;

-- E verificado a quantidade de filtros distintos para a apresentacao do protocolo.

-- Atualmente existem 2 valores possiveis, apresentado ou reaprasentacao, nao esta previsto novos valores

-- Entao como e um filtro que pode onerar a performance, e feita uma verificacao, se a quantidade distinta for 1,

-- deve-se aplicar o filtro (pode-se usar o IN nesse caso, que o Oracle vai transformar em "=")

-- Se tiver 0 (zero) ou 2 (dois), entao e entendido que todas as alternativas estao presentes nos filtros, portanto

-- pode-se despreza-lo, melhorando o plano de performance.

if (qt_ie_apresentacao_w = 1) then

	ds_retorno_w := ds_retorno_w||	'				and	a.ie_apresentacao in('||ie_apresentacao_in_w||') '|| pls_util_pck.enter_w;
end if;



-- Filtros Conta

if (ie_status_cta_in_w IS NOT NULL AND ie_status_cta_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	b.ie_status in('||ie_status_cta_in_w||') '|| pls_util_pck.enter_w;
end if;

-- E verificado a quantidade de filtros distintos para o tipo de atendimento da conta medica

-- Essa informacao e cadastrada pela operadora, ou seja, nao existe limite determinado para a quantidade de informacoes disponiveis

-- portanto e mais indicado a utilizacao da sentenca "EXISTS", sendo mais performatica conforme a quantidade de informacao do filtro

-- Ainda e feita uma avaliacao da quantidade distinta de filtros por tipo de atendimento, se a quantidade for igual a 1, entao

-- e feito uma sentenca "=", que e mais performatica. Se tiver mais de 1, entao e utilizado o EXISTS

-- Se tiver 0 (zero), o filtro e desconsiderado


if (qt_nr_seq_atend_cta_w > 1 ) then

	-- Cria com o Exists

	ds_retorno_w := ds_retorno_w||	'				and	exists(	select	1 '|| pls_util_pck.enter_w ||
					'				and		from	pls_atu_conta_regra_conta	x '|| pls_util_pck.enter_w ||
					'				and		where	x.nr_seq_tipo_atendimento	= b.nr_seq_tipo_atendimento '|| pls_util_pck.enter_w ||
					'				and		and	x.nr_seq_regra			= :nr_seq_regra )'|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_regra', lote_cta_p.nr_seq_conta_regra, dado_bind_cta_p);
	
elsif (qt_nr_seq_atend_cta_w = 1 ) then

	-- Cria com o "="

	ds_retorno_w := ds_retorno_w||	'				and	b.nr_seq_tipo_atendimento	= :nr_seq_tipo_atendimento '|| pls_util_pck.enter_w;
	dado_bind_cta_p := sql_pck.bind_variable(':nr_seq_tipo_atendimento', nr_seq_atend_cta_w, dado_bind_cta_p);
end if;


-- Filtros Materiais

if (ie_tipo_despesa_mat_in_w IS NOT NULL AND ie_tipo_despesa_mat_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	c.ie_tipo_despesa	in ('|| ie_tipo_despesa_mat_in_w ||') ' || pls_util_pck.enter_w;
end if;


if (ie_status_mat_in_w IS NOT NULL AND ie_status_mat_in_w::text <> '') then

	ds_retorno_w := ds_retorno_w||	'				and	c.ie_status	in ('|| ie_status_mat_in_w ||') ' || pls_util_pck.enter_w;
end if;


ds_retorno_w := ds_retorno_w||	'				) t '|| pls_util_pck.enter_w;

-- Gravar log

CALL pls_dados_atuariais_pck.gravar_log(	lote_cta_p.nr_sequencia,
					lote_cta_p.nr_seq_conta_regra, 
					lote_cta_p.ie_tipo_arquivo, 
					ds_retorno_w, 
					dado_bind_cta_p := pls_dados_atuariais_pck.obter_bind_log(dado_bind_cta_p), 
					dbms_utility.format_error_backtrace, 
					nm_usuario_p);

return;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_dados_atuariais_pck.retorna_sql_dados_cta ( lote_cta_p INOUT lote_atuarial, dado_bind_cta_p INOUT sql_pck.t_dado_bind, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
