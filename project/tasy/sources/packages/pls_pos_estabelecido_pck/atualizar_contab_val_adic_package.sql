-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



/*Rotina que faz o trabalho da pls_atualizar_contab_val_adic na nova geracao  de p_s*/




CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.atualizar_contab_val_adic ( dt_mes_competencia_p timestamp, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type default null, nr_seq_conta_p pls_conta.nr_sequencia%type default null, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, ds_tipo_lote_contabil_p INOUT tipo_lote_contabil.ds_tipo_lote_contabil%type  DEFAULT NULL) AS $body$
DECLARE


dt_ref_inicial_w	timestamp;
dt_ref_final_w		timestamp;
ie_opcao_w 		varchar(1);
qt_reg_w		integer 	:= 0;
index_w			integer 	:= 0;
index_pos_w		integer	:= 0;
i_mat_w			integer 	:= 0;
i_cop_w			integer	:= 0;
nr_seq_conta_resumo_w	pls_conta_medica_resumo.nr_sequencia%type;
ds_tipo_lote_contabil_w	tipo_lote_contabil.ds_tipo_lote_contabil%type;
ie_opcao_tb_w			pls_util_cta_pck.t_varchar2_table_1;
nr_seq_conta_pos_tb_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_tb_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_resumo_tb_w	pls_util_cta_pck.t_number_table;	
nr_seq_conta_pos_contab_tb_w	pls_util_cta_pck.t_number_table;	
nr_seq_conta_resumo_mat_tb_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_pos_mat_ctb_tb_w	pls_util_cta_pck.t_number_table;
nr_seq_resumo_cop_tb_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_co_contab_tb_w	pls_util_cta_pck.t_number_table;
			
C00 CURSOR(	dt_ref_inicial_pc	timestamp,	
		dt_ref_final_pc	timestamp,	
                nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type,
                nr_seq_conta_pc		pls_conta.nr_sequencia%type,
                nr_seq_proc_pc		pls_conta_proc.nr_sequencia%type,
		nr_seq_mat_pc		pls_conta_mat.nr_sequencia%type
		) FOR
	SELECT	cta.nr_sequencia
	from	pls_conta 		cta
	where 	cta.nr_sequencia in ( 	SELECT	p.nr_seq_conta
					from	pls_conta_proc_v	p
					where	p.dt_mes_competencia 	between dt_ref_inicial_pc and dt_ref_final_pc
					and	coalesce(nr_seq_protocolo_pc::text, '') = ''
					and	coalesce(nr_seq_conta_pc::text, '') = ''
					and	coalesce(nr_seq_proc_pc::text, '') = ''
					and	coalesce(nr_seq_mat_pc::text, '') = ''
					and	p.ie_status 		in ('A', 'C', 'L', 'P', 'S', 'U', 'M')
					and	p.ie_status_conta 	in ('A','L','P','U','F')
					
union all

					select  p.nr_seq_conta
					from	pls_conta_proc_v	p
					where	p.dt_mes_competencia 	between dt_ref_inicial_pc and dt_ref_final_pc
					and	p.nr_sequencia		= nr_seq_proc_pc
					and	p.ie_status 		in ('A', 'C', 'L', 'P', 'S', 'U', 'M')
					and	p.ie_status_conta 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	m.nr_seq_conta
					from	pls_conta_mat_v	m
					where	m.dt_mes_competencia 	between dt_ref_inicial_pc and dt_ref_final_pc
					and	m.nr_sequencia		= nr_seq_mat_pc
					and	m.ie_status 		in ('A', 'C', 'L', 'P', 'S', 'U', 'M')
					and	m.ie_status_conta 	in ('A','L','P','U','F')
					and	m.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_seq_conta
					from	pls_conta_proc_v	p
					where	p.dt_mes_competencia 	between dt_ref_inicial_pc and dt_ref_final_pc
					and	p.nr_seq_conta		= nr_seq_conta_pc
					and	p.ie_status 		in ('A', 'C', 'L', 'P', 'S', 'U', 'M')
					and	p.ie_status_conta 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
					
union all

					select 	p.nr_seq_conta
					from	pls_conta_proc_v	p
					where	p.dt_mes_competencia 	between dt_ref_inicial_pc and dt_ref_final_pc
					and	p.nr_seq_protocolo	= nr_seq_protocolo_pc
					and	p.ie_status 		in ('A', 'C', 'L', 'P', 'S', 'U', 'M')
					and	p.ie_status_conta 	in ('A','L','P','U','F')
					and	p.ie_status_protocolo in ('1','2','3','5')
				);
				
C02 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type)	 FOR
	SELECT  x.nr_sequencia,
		w.nr_seq_conta,
		w.nr_seq_conta_proc,
		null nr_seq_conta_mat,
		z.ie_origem_protocolo,
		(	SELECT	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= w.nr_seq_conta
			and	nr_seq_conta_proc	= w.nr_seq_conta_proc
			and	ie_situacao		= 'A') nr_seq_resumo_proc,
		null	nr_seq_resumo_mat
	from	pls_conta_pos_proc_contab  x,
		pls_conta_pos_proc w,
		pls_conta      y,
		pls_protocolo_conta    z
	where	x.nr_seq_conta_pos_proc = w.nr_sequencia
	and	w.nr_seq_conta  = y.nr_sequencia
	and	z.nr_sequencia  = y.nr_seq_protocolo
	and	y.ie_status 	= 'F'
	and	y.nr_sequencia 	= nr_seq_conta_pc
	and	not exists ( 	select  1
				from 	pls_conta_medica_resumo  a
				where	a.nr_sequencia	= x.nr_seq_conta_resumo
				and	a.nr_seq_conta  = x.nr_seq_conta)
	and	(x.nr_seq_conta_resumo IS NOT NULL AND x.nr_seq_conta_resumo::text <> '')
	
union all

	select  x.nr_sequencia,
		w.nr_seq_conta,
		null nr_seq_conta_proc,
		w.nr_seq_conta_mat,
		z.ie_origem_protocolo,
		null nr_seq_resumo_proc,
		(	select	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= w.nr_seq_conta
			and	nr_seq_conta_mat	= w.nr_seq_conta_mat
			and	ie_situacao		= 'A') nr_seq_resumo_mat
	from	pls_conta_pos_mat_contab  x,
		pls_conta_pos_mat w,
		pls_conta      y,
		pls_protocolo_conta    z
	where	x.nr_seq_conta_mat_pos = w.nr_sequencia
	and	w.nr_seq_conta  = y.nr_sequencia
	and	z.nr_sequencia  = y.nr_seq_protocolo
	and	y.ie_status 	= 'F'
	and	y.nr_sequencia 	= nr_seq_conta_pc
	and	not exists ( 	select  1
				from 	pls_conta_medica_resumo  a
				where	a.nr_sequencia	= x.nr_seq_conta_resumo
				and	a.nr_seq_conta  = x.nr_seq_conta)
	and	(x.nr_seq_conta_resumo IS NOT NULL AND x.nr_seq_conta_resumo::text <> '');
	
C03 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type)	 FOR
	SELECT  x.nr_sequencia,
		x.nr_seq_conta,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		z.ie_origem_protocolo,
		(	SELECT	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= x.nr_seq_conta
			and	nr_seq_conta_proc	= a.nr_seq_conta_proc
			and	ie_situacao		= 'A') nr_seq_resumo_proc,
		(	select	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= x.nr_seq_conta
			and	nr_seq_conta_mat	= a.nr_seq_conta_mat
			and	ie_situacao		= 'A') nr_seq_resumo_mat	
	from	pls_conta_copartic_contab  x,
		pls_conta_coparticipacao a,
		pls_conta      y,
		pls_protocolo_conta    z
	where	y.nr_sequencia 	= nr_seq_conta_pc
	and	x.nr_seq_conta  = y.nr_sequencia
	and	a.nr_sequencia 	= x.nr_seq_conta_copartic
	and	a.nr_seq_conta 	= y.nr_sequencia
	and	z.nr_sequencia  = y.nr_seq_protocolo
	and	y.ie_status	= 'F'
	and	not exists ( 	select  1
				from 	pls_conta_medica_resumo  a
				where	a.nr_sequencia	= x.nr_seq_conta_resumo
				and	a.nr_seq_conta  = x.nr_seq_conta)
	and	(x.nr_seq_conta_resumo IS NOT NULL AND x.nr_seq_conta_resumo::text <> '');
			
C04 CURSOR(	nr_seq_conta_pc pls_conta.nr_sequencia%type)	 FOR
	SELECT  x.nr_sequencia,
		x.nr_seq_conta,
		(	SELECT	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= x.nr_seq_conta
			and	nr_seq_conta_proc	= x2.nr_seq_conta_proc
			and	ie_situacao		= 'A') nr_seq_resumo_proc,
		z.ie_origem_protocolo
	from	pls_conta_pos_proc_tx_ctb  x,
		pls_conta_pos_proc_tx x1,
		pls_conta_pos_proc x2,
		pls_conta      y,
		pls_protocolo_conta    z
	where	y.nr_sequencia = nr_seq_conta_pc
	and	x.nr_seq_conta  = y.nr_sequencia
	and	x.nr_seq_proc_pos_tx = x1.nr_sequencia
	and	x1.nr_seq_conta_pos_proc = x2.nr_sequencia
	and	z.nr_sequencia  = y.nr_seq_protocolo
	and	y.ie_status = 'F'
	and	not exists ( 	select  1
				from 	pls_conta_medica_resumo  a
				where	a.nr_sequencia	= x.nr_seq_conta_resumo
				and	a.nr_seq_conta  = x.nr_seq_conta)
	and	(x.nr_seq_conta_resumo IS NOT NULL AND x.nr_seq_conta_resumo::text <> '');
	
C05 CURSOR(	nr_seq_conta_pc pls_conta.nr_sequencia%type)	 FOR
	SELECT  x.nr_sequencia,
		x.nr_seq_conta,
		( 	SELECT	max(nr_sequencia)
			from	pls_conta_medica_resumo
			where	nr_seq_conta		= x.nr_seq_conta
			and	nr_seq_conta_mat	= x2.nr_seq_conta_mat
			and	ie_situacao		= 'A') nr_seq_resumo_mat,
		z.ie_origem_protocolo
	from	pls_conta_pos_mat_tx_ctb  x,
		pls_conta_pos_mat_tx x1,
		pls_conta_pos_mat x2,
		pls_conta      y,
		pls_protocolo_conta    z
	where	y.nr_sequencia = nr_seq_conta_pc
	and	x.nr_seq_conta  = y.nr_sequencia
	and	x.nr_seq_pos_mat_tx = x1.nr_sequencia
	and	x1.nr_seq_conta_mat_pos = x2.nr_sequencia
	and	z.nr_sequencia  = y.nr_seq_protocolo
	and	y.ie_status = 'F'
	and	not exists ( 	select  1
				from 	pls_conta_medica_resumo  a
				where	a.nr_sequencia	= x.nr_seq_conta_resumo
				and	a.nr_seq_conta  = x.nr_seq_conta)
	and	(x.nr_seq_conta_resumo IS NOT NULL AND x.nr_seq_conta_resumo::text <> '');
			
BEGIN		
	CALL gravar_processo_longo('Atualizar registros cont_beis adicionais' ,'ATUALIZAR_CONTAB_VAL_ADIC',0);

	dt_ref_inicial_w:= trunc(trunc(dt_mes_competencia_p,'month'),'dd');
	dt_ref_final_w	:= fim_dia(fim_mes(dt_mes_competencia_p));

	select	max(b.ds_tipo_lote_contabil)
	into STRICT	ds_tipo_lote_contabil_w
	from	lote_contabil		a,
		tipo_lote_contabil	b
	where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
	and	b.cd_tipo_lote_contabil	in (43,44) /* OPS - Provis_o de Faturamento / OPS - Receitas com Faturamento */

	and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
	and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
	and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');
	
	if (coalesce(ds_tipo_lote_contabil_w::text, '') = '') then
		for r_c00_w in C00(dt_ref_inicial_w, dt_ref_final_w, nr_seq_protocolo_p, nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p) loop
		
			ie_opcao_w 	:= '';
			qt_reg_w 	:= 0;
				
			select	count(1)
			into STRICT	qt_reg_w
			from	pls_conta_coparticipacao
			where	nr_seq_conta	= r_c00_w.nr_sequencia  LIMIT 1;
			
			if (qt_reg_w	> 0) then
				ie_opcao_w	:= 'C';
			else
				select 	count(1)
				into STRICT	qt_reg_w
				from	pls_conta_pos_proc_contab a,
					pls_pos_estab_dados_contab b
				where 	a.nr_seq_conta		= r_c00_w.nr_sequencia
				and	b.nr_seq_pos_proc_contab = a.nr_sequencia
				and ((b.nr_lote_contabil_prov IS NOT NULL AND b.nr_lote_contabil_prov::text <> '')	or
					 (b.nr_lote_contabil IS NOT NULL AND b.nr_lote_contabil::text <> '')	);
				
				if ( qt_reg_w = 0 ) then
					select 	count(1)
					into STRICT	qt_reg_w
					from	pls_conta_pos_mat_contab a,
						pls_pos_estab_dados_contab b
					where 	a.nr_seq_conta		= r_c00_w.nr_sequencia
					and	b.nr_seq_pos_mat_contab = a.nr_sequencia
					and ((b.nr_lote_contabil_prov IS NOT NULL AND b.nr_lote_contabil_prov::text <> '')	or
						 (b.nr_lote_contabil IS NOT NULL AND b.nr_lote_contabil::text <> '')	);
						
					if (qt_reg_w	= 0) then

						ie_opcao_w	:= 'P';
					end if;					
				end if;
			
			end if;
		
			if ( ie_opcao_w = 'C') then
		
				nr_seq_conta_tb_w(index_w)	:= r_c00_w.nr_sequencia;
				ie_opcao_tb_w(index_w)		:= ie_opcao_w;	
				index_w	:= index_w + 1;
			
				if ( index_w	>= pls_util_cta_pck.qt_registro_transacao_w) then
					for i in nr_seq_conta_tb_w.first..nr_seq_conta_tb_w.last loop
						begin	
						CALL gravar_processo_longo('Atualizando a conta ' || nr_seq_conta_tb_w(i) ,'ATUALIZAR_CONTAB_VAL_ADIC',-1);
						CALL pls_gerar_contab_val_adic(nr_seq_conta_tb_w(i),null,null,null,null,null,null,ie_opcao_tb_w(i),'N',nm_usuario_p);				
						end;
					end loop;
					commit;
					nr_seq_conta_tb_w.delete;
					ie_opcao_tb_w.delete;
					index_w	:= 0;
				end if;		
			elsif (ie_opcao_w = 'P') then
			
				nr_seq_conta_pos_tb_w(index_pos_w)	:= r_c00_w.nr_sequencia;	
				index_pos_w	:= index_pos_w + 1;
				
				if (index_pos_w	>= pls_util_cta_pck.qt_registro_transacao_w) then

					for i in nr_seq_conta_pos_tb_w.first..nr_seq_conta_pos_tb_w.last loop
						
						CALL gravar_processo_longo('Atualizando a conta ' || nr_seq_conta_pos_tb_w(i) ,'ATUALIZAR_CONTAB_VAL_ADIC',-1);
						CALL pls_pos_estabelecido_pck.geracao_valores_contabeis( null, null, null, nr_seq_conta_pos_tb_w(i), nm_usuario_p, cd_estabelecimento_p);				
						
					end loop;
					nr_seq_conta_pos_tb_w.delete;
					index_pos_w := 0;
				end if;
			end if;
		
		end loop;
		
		--Geracao dos valores cont_beis de coparticipacao

		if (nr_seq_conta_tb_w.count > 0) then
			for i in nr_seq_conta_tb_w.first..nr_seq_conta_tb_w.last loop
							
				CALL gravar_processo_longo('Atualizando a conta ' || nr_seq_conta_tb_w(i) ,'ATUALIZAR_CONTAB_VAL_ADIC',-1);
				CALL pls_gerar_contab_val_adic(nr_seq_conta_tb_w(i),null,null,null,null,null,null,ie_opcao_tb_w(i),'N',nm_usuario_p);
				
			end loop;
		end if;
		
		--Geracao dos valores cont_beis de p_s-estabelecido

		if (nr_seq_conta_pos_tb_w.count > 0) then
			for i in nr_seq_conta_pos_tb_w.first..nr_seq_conta_pos_tb_w.last loop
							
				CALL gravar_processo_longo('Atualizando a conta ' || nr_seq_conta_pos_tb_w(i) ,'ATUALIZAR_CONTAB_VAL_ADIC',-1);
				CALL pls_pos_estabelecido_pck.geracao_valores_contabeis( null, null, null, nr_seq_conta_pos_tb_w(i), nm_usuario_p, cd_estabelecimento_p);				
				
			end loop;
		end if;
		commit;
	end if;
	
	--Percorre as contas a serem processadas

	for r_c00_w in C00(dt_ref_inicial_w, dt_ref_final_w, nr_seq_protocolo_p, nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p) loop
	
		for r_c02_w in C02(r_c00_w.nr_sequencia) loop
			
			--Apenas atualizar caso tenha a informacao ou a conta seja de A500

			if	((r_c02_w.nr_seq_conta_proc IS NOT NULL AND r_c02_w.nr_seq_conta_proc::text <> '') and
				((r_c02_w.nr_seq_resumo_proc IS NOT NULL AND r_c02_w.nr_seq_resumo_proc::text <> '') or (r_c02_w.ie_origem_protocolo = 'A'))) then
				
				nr_seq_conta_resumo_tb_w(index_w)	:= r_c02_w.nr_seq_resumo_proc;
				nr_seq_conta_pos_contab_tb_w(index_w)	:= r_c02_w.nr_sequencia;
				index_w	:= index_w + 1;
				
				if (index_w	>= pls_util_cta_pck.qt_registro_transacao_w) then
					forall i in nr_seq_conta_resumo_tb_w.first..nr_seq_conta_resumo_tb_w.last
						update	pls_conta_pos_proc_contab
						set	nr_seq_conta_resumo	= nr_seq_conta_resumo_tb_w(i)
						where	nr_sequencia		= nr_seq_conta_pos_contab_tb_w(i);

					nr_seq_conta_resumo_tb_w.delete;
					nr_seq_conta_pos_contab_tb_w.delete;
					index_w	:= 0;
					commit;
				end if;	
			elsif	((r_c02_w.nr_seq_conta_mat IS NOT NULL AND r_c02_w.nr_seq_conta_mat::text <> '') and
				((r_c02_w.nr_seq_resumo_mat IS NOT NULL AND r_c02_w.nr_seq_resumo_mat::text <> '') or (r_c02_w.ie_origem_protocolo = 'A'))) then	
				
				nr_seq_conta_resumo_mat_tb_w(i_mat_w)	:= r_c02_w.nr_seq_resumo_mat;
				nr_seq_conta_pos_mat_ctb_tb_w(i_mat_w)	:= r_c02_w.nr_sequencia;
				i_mat_w	:= i_mat_w + 1;
				
				if ( i_mat_w	>= pls_util_cta_pck.qt_registro_transacao_w) then
					forall i in nr_seq_conta_resumo_mat_tb_w.first..nr_seq_conta_resumo_mat_tb_w.last
						update	pls_conta_pos_mat_contab
						set	nr_seq_conta_resumo	= nr_seq_conta_resumo_mat_tb_w(i)
						where	nr_sequencia		= nr_seq_conta_pos_mat_ctb_tb_w(i);

					nr_seq_conta_resumo_mat_tb_w.delete;
					nr_seq_conta_pos_mat_ctb_tb_w.delete;
					i_mat_w	:= 0;
					commit;
				end if;	
			end if;
		end loop;
		
		for r_c03_w in C03(r_c00_w.nr_sequencia) loop
		
			nr_seq_conta_resumo_w	:= null;
			if (r_c03_w.nr_seq_conta_proc IS NOT NULL AND r_c03_w.nr_seq_conta_proc::text <> '') then
				nr_seq_conta_resumo_w := r_c03_w.nr_seq_resumo_proc;		
			elsif (r_c03_w.nr_seq_conta_mat IS NOT NULL AND r_c03_w.nr_seq_conta_mat::text <> '') then
				nr_seq_conta_resumo_w := r_c03_w.nr_seq_resumo_mat;
				
			end if;
			
			--Apenas atualizar caso tenha a informacao ou a conta seja de A500

			if	((nr_seq_conta_resumo_w IS NOT NULL AND nr_seq_conta_resumo_w::text <> '') or (r_c03_w.ie_origem_protocolo = 'A')) then
				
				nr_seq_resumo_cop_tb_w(i_cop_w)		:= nr_seq_conta_resumo_w;
				nr_seq_conta_co_contab_tb_w(i_cop_w)	:= r_c03_w.nr_sequencia;
				i_cop_w	:= i_cop_w + 1;
				
				if ( i_cop_w	>= pls_util_cta_pck.qt_registro_transacao_w) then
					forall i in nr_seq_resumo_cop_tb_w.first..nr_seq_resumo_cop_tb_w.last
						update	pls_conta_copartic_contab
						set	nr_seq_conta_resumo	= nr_seq_resumo_cop_tb_w(i)
						where	nr_sequencia		= nr_seq_conta_co_contab_tb_w(i);

					nr_seq_resumo_cop_tb_w.delete;
					nr_seq_conta_co_contab_tb_w.delete;
					i_cop_w	:= 0;
					commit;
				end if;	
			end if;

		end loop;
		
	end loop;
	
	if (nr_seq_conta_resumo_tb_w.count > 0) then
	
		forall i in nr_seq_conta_resumo_tb_w.first..nr_seq_conta_resumo_tb_w.last
			update	pls_conta_pos_proc_contab
			set	nr_seq_conta_resumo	= nr_seq_conta_resumo_tb_w(i)
			where	nr_sequencia		= nr_seq_conta_pos_contab_tb_w(i);
	end if;
	
	if (nr_seq_conta_resumo_mat_tb_w.count > 0) then
		forall i in nr_seq_conta_resumo_mat_tb_w.first..nr_seq_conta_resumo_mat_tb_w.last
			update	pls_conta_pos_mat_contab
			set	nr_seq_conta_resumo	= nr_seq_conta_resumo_mat_tb_w(i)
			where	nr_sequencia		= nr_seq_conta_pos_mat_ctb_tb_w(i);
	end if;
	
	if ( nr_seq_resumo_cop_tb_w.count > 0) then
		forall i in nr_seq_resumo_cop_tb_w.first..nr_seq_resumo_cop_tb_w.last
			update	pls_conta_copartic_contab
			set	nr_seq_conta_resumo	= nr_seq_resumo_cop_tb_w(i)
			where	nr_sequencia		= nr_seq_conta_co_contab_tb_w(i);
	end if;
	commit;
	
	nr_seq_conta_resumo_tb_w.delete;
	nr_seq_conta_pos_contab_tb_w.delete;
	index_w := 0;
	
	--Percorre as contas a serem processadas

	for r_c00_w in C00(dt_ref_inicial_w, dt_ref_final_w, nr_seq_protocolo_p, nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p) loop
	
		for r_c04_w in C04(r_c00_w.nr_sequencia) loop
		
			if	((r_c04_w.nr_seq_resumo_proc IS NOT NULL AND r_c04_w.nr_seq_resumo_proc::text <> '') or (r_c04_w.ie_origem_protocolo = 'A')) then
				
				nr_seq_conta_resumo_tb_w(index_w)	:= r_c04_w.nr_seq_resumo_proc;
				nr_seq_conta_pos_contab_tb_w(index_w)	:= r_c04_w.nr_sequencia;
				index_w	:= index_w + 1;
				
				if (index_w	>= pls_util_cta_pck.qt_registro_transacao_w) then
					
					forall i in nr_seq_conta_resumo_tb_w.first..nr_seq_conta_resumo_tb_w.last
						update	pls_conta_pos_proc_tx_ctb
						set	nr_seq_conta_resumo	= nr_seq_conta_resumo_tb_w(i)
						where	nr_sequencia		= nr_seq_conta_pos_contab_tb_w(i);

					nr_seq_conta_resumo_tb_w.delete;
					nr_seq_conta_pos_contab_tb_w.delete;
					index_w	:= 0;
					commit;
				end if;	
			end if;
		
		end loop;
		
		i_mat_w := 0;
		nr_seq_conta_resumo_mat_tb_w.delete;
		nr_seq_conta_pos_mat_ctb_tb_w.delete;
		for r_c05_w in C05(r_c00_w.nr_sequencia) loop
		
			if	((r_c05_w.nr_seq_resumo_mat IS NOT NULL AND r_c05_w.nr_seq_resumo_mat::text <> '') or (r_c05_w.ie_origem_protocolo = 'A')) then
				
				nr_seq_conta_resumo_mat_tb_w(i_mat_w)	:= r_c05_w.nr_seq_resumo_mat;
				nr_seq_conta_pos_mat_ctb_tb_w(i_mat_w)	:= r_c05_w.nr_sequencia;
				i_mat_w	:= i_mat_w + 1;
				
				if ( i_mat_w >= pls_util_cta_pck.qt_registro_transacao_w) then
					
					forall i in nr_seq_conta_resumo_mat_tb_w.first..nr_seq_conta_resumo_mat_tb_w.last
						update	pls_conta_pos_mat_tx_ctb
						set	nr_seq_conta_resumo	= nr_seq_conta_resumo_mat_tb_w(i)
						where	nr_sequencia		= nr_seq_conta_pos_mat_ctb_tb_w(i);

					nr_seq_conta_resumo_mat_tb_w.delete;
					nr_seq_conta_pos_mat_ctb_tb_w.delete;
					i_mat_w	:= 0;
					commit;
				end if;	
			end if;
		
		end loop;
	
	end loop;
	
	if (nr_seq_conta_resumo_tb_w.count > 0) then
		forall i in nr_seq_conta_resumo_tb_w.first..nr_seq_conta_resumo_tb_w.last
			update	pls_conta_pos_proc_tx_ctb
			set	nr_seq_conta_resumo	= nr_seq_conta_resumo_tb_w(i)
			where	nr_sequencia		= nr_seq_conta_pos_contab_tb_w(i);
	end if;

	if (nr_seq_conta_resumo_mat_tb_w.count > 0) then
		forall i in nr_seq_conta_resumo_mat_tb_w.first..nr_seq_conta_resumo_mat_tb_w.last
			update	pls_conta_pos_mat_tx_ctb
			set	nr_seq_conta_resumo	= nr_seq_conta_resumo_mat_tb_w(i)
			where	nr_sequencia		= nr_seq_conta_pos_mat_ctb_tb_w(i);
	end if;
	
	ds_tipo_lote_contabil_p := ds_tipo_lote_contabil_w;
	
	commit;
	
END;									

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.atualizar_contab_val_adic ( dt_mes_competencia_p timestamp, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type default null, nr_seq_conta_p pls_conta.nr_sequencia%type default null, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type default null, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type default null, nm_usuario_p text DEFAULT NULL, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, ds_tipo_lote_contabil_p INOUT tipo_lote_contabil.ds_tipo_lote_contabil%type  DEFAULT NULL) FROM PUBLIC;
