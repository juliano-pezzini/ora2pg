-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*
	OBS : ALTERAcaES REALIZADAS NESSA ROTINA, DEVEM SER REPLICADAS NA PLS_ATUALIZA_VALOR_PROC_INT

*/



CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.pls_atualiza_valor_proc_pos ( nr_sequencia_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_pos_cab_p pls_conta_pos_cabecalho.nr_sequencia%type, ie_tipo_despesa_p text, ie_gravar_log_p text, nm_usuario_p usuario.nm_usuario%type, tx_intercambio_p INOUT bigint, ie_pos_estab_faturamento_p pls_parametros.ie_pos_estab_faturamento%type, ie_geracao_pos_estabelecido_p pls_parametros.ie_geracao_pos_estabelecido%type, ie_preco_interc_congenere_p pls_parametros.ie_preco_interc_congenere%type, nr_seq_regra_p INOUT pls_regra_preco_proc.nr_sequencia%type, vl_beneficiario_p INOUT bigint, dados_regra_preco_proc_p INOUT dados_regra_preco_proc) AS $body$
DECLARE


nr_seq_categoria_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_contrato_w		bigint;
cd_convenio_w			bigint;
cd_categoria_w			varchar(10);
nr_seq_outorgante_w		bigint;
ie_tipo_contratacao_w		varchar(10);
dt_preco_w			timestamp;
nr_seq_classificacao_prest_w	bigint;
vl_beneficiario_w		double precision	:= 0;
nr_seq_regra_autogerado_w	bigint;
ie_tipo_vinculo_w		varchar(10);
nr_seq_intercambio_w		bigint;
dt_vigencia_w			timestamp;
cd_tabela_servico_w		smallint;
ie_tipo_intercambio_w		varchar(255);
nr_seq_congenere_seg_w		bigint;
ie_calculo_pacote_w		varchar(5);
nr_contrato_w			bigint;
nr_seq_pacote_w			bigint;
nr_seq_regra_pacote_w		bigint;
cd_proc_pacote_w		bigint;
ie_origem_pacote_w		bigint;
ie_tipo_segurado_w		varchar(10);
cd_medico_conta_w		varchar(10);
vl_procedimento_ptu_w		double precision	:= 0;
vl_co_ptu_w			double precision	:= 0;
vl_material_ptu_w		double precision	:= 0;
nr_seq_regra_inter_w		bigint;
vl_taxa_co_w			double precision;
vl_taxa_servico_w		double precision;
vl_taxa_material_w		double precision;
tx_intercambio_w		double precision;

vl_medico_w			double precision	:= 0;
vl_materiais_w			double precision	:= 0;
vl_anestesista_w		double precision	:= 0;
vl_auxiliares_w			double precision	:= 0;
vl_custo_operacional_w		double precision	:= 0;
vl_filme_w			double precision	:= 0;
vl_medico_ptu_w			double precision	:= 0;
tx_item_w			double precision	:= 0;
vl_total_partic_w		double precision;
nr_auxiliares_w			bigint;
qt_porte_anestesico_w		bigint;
cd_edicao_amb_w			integer;
ie_tipo_partic_prof_w		varchar(10);
cd_moeda_autogerado_w		smallint;
ds_observacao_log_w		varchar(4000);
ie_internado_w			varchar(1);
ie_repassa_medico_w		varchar(1);
ie_tipo_intercambio_benef_w	varchar(1);
ie_carater_internacao_w		varchar(2);
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_clinica_w		bigint;
nr_seq_congenere_w		bigint;
dt_procedimento_w		timestamp;
dt_inicio_proc_w		timestamp;
ie_tipo_congenere_w		pls_congenere.ie_tipo_congenere%type;
ie_nao_gera_tx_inter_w		pls_regra_preco_proc.ie_nao_gera_tx_inter%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
nr_seq_cabecalho_w		pls_conta_pos_cabecalho.nr_sequencia%type;
dados_prestador_prot_w		pls_cta_valorizacao_pck.dados_prestador_prot;
dados_prestador_exec_w		pls_cta_valorizacao_pck.dados_prestador_exec;
dados_adic_horario_w		pls_cta_valorizacao_pck.dados_adic_horario;
dados_procedimento_w		pls_cta_valorizacao_pck.dados_procedimento;
dados_conta_valor_w		pls_cta_valorizacao_pck.dados_conta;
dados_conta_proc_valor_w	pls_cta_valorizacao_pck.dados_conta_proc;
dados_beneficiario_valor_w	pls_cta_valorizacao_pck.dados_beneficiario;
ie_honorario_pos_w		pls_parametros.ie_honorario_pos%type;
vl_ch_honorarios_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_oper_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_filme_w		cotacao_moeda.vl_cotacao%type;
vl_ch_anestesista_w		cotacao_moeda.vl_cotacao%type;
dados_regra_preco_proc_w	pls_cta_valorizacao_pck.dados_regra_preco_proc;
dados_regra_preco_servico_w	pls_cta_valorizacao_pck.dados_regra_preco_servico;
ie_preco_informado_w		pls_regra_preco_proc.ie_preco_informado%type;
cd_prestador_solic_w		pls_prestador.cd_prestador%type;
vl_medico_ww			pls_conta_proc.vl_unitario%type;
dados_guia_w			pls_cta_valorizacao_pck.dados_guia;
nr_seq_ops_congenere_seg_w	pls_segurado.nr_seq_ops_congenere%type;
cd_estab_cad_benef_w		estabelecimento.cd_estabelecimento%type;
nr_seq_regra_tx_w		pls_regra_tx_proc_int.nr_sequencia%type;
tx_item_regra_w			pls_regra_tx_proc_int.tx_procedimento%type;
ie_status_w			pls_conta_proc.ie_status%type;
nr_seq_regra_pct_fat_w		pls_conta_proc.nr_seq_regra_pct_fat%type;
vl_procedimento_w		pls_conta_proc.vl_procedimento%type;

C01 CURSOR FOR
	SELECT	max(coalesce(d.dt_item, coalesce(a.dt_item,clock_timestamp()))) 		dt_procedimento,
		max(b.nr_seq_conta)					nr_seq_conta,
		max(coalesce(d.cd_procedimento,a.cd_procedimento)) 		cd_procedimento,
		max(coalesce(d.ie_origem_proced,a.ie_origem_proced)) 	ie_origem_proced,
		max(a.ie_tecnica_utilizada)				ie_tecnica_utilizada,
		max(coalesce(a.tx_item,100))					tx_item,
		max(coalesce(a.qt_item,1))					qt_procedimento,
		max(coalesce(d.dt_inicio_item,a.dt_inicio_proc)) 		dt_inicio_proc,
		max(coalesce(d.dt_fim_item,a.dt_fim_proc)) 			dt_fim_proc,
		max(a.ie_criterio_horario) 				ie_criterio_horario,
		max(a.ie_status_proc)					ie_status,
		max(a.ie_repassa_medico)				ie_repassa_medico,
		max(coalesce(a.tx_custo_operacional,100))			tx_custo_operacional,
		max(coalesce(a.tx_material,100))				tx_material,
		max(coalesce(a.tx_medico,100))				tx_medico,
		max(coalesce(a.tx_auxiliares,100))				tx_auxiliares,
		max(coalesce(a.tx_anestesista,100))				tx_anestesista,
		max(b.cd_estabelecimento)				cd_estabelecimento,
		max(b.nr_seq_segurado)					nr_seq_segurado,
		max(coalesce(b.nr_seq_tipo_acomodacao,0))			nr_seq_tipo_acomodacao,
		max(coalesce(b.nr_seq_tipo_atendimento,0))			nr_seq_tipo_atendimento,
		max(b.nr_seq_clinica)					nr_seq_clinica,
		max(trunc(coalesce(b.dt_alta, clock_timestamp()) - b.dt_entrada)) 	qt_dias_internacao,
		max(b.nr_seq_prestador_exec)				nr_seq_prestador_exec,
		max(pls_obter_se_internado(a.nr_seq_conta, 'C'))	ie_internado,
		max(b.ie_carater_internacao)				ie_carater_internacao,	
		max(b.ie_tipo_guia)					ie_tipo_guia,
		max(b.ie_origem_conta) 					ie_origem_conta,
		max(b.nr_seq_grau_partic)				nr_seq_grau_partic,
		max(coalesce(b.cd_guia_referencia,b.cd_guia))		cd_guia,
		max(b.ie_tipo_acomodacao_ptu)				ie_tipo_acomodacao_ptu,
		max(b.nr_seq_congenere)					nr_seq_congenere,
		max(b.ie_tipo_protocolo)				ie_tipo_protocolo,
		max(a.nr_seq_cbo_saude)					nr_seq_cbo_saude,
		max(a.nr_seq_cbo_saude_solic)				nr_seq_cbo_saude_solic,
		max(coalesce(a.ie_tipo_conta,'O')) 				ie_tipo_conta,	
		max(a.nr_seq_rp_combinada)				nr_seq_rp_combinada,
		max(a.nr_seq_conta_referencia)				nr_seq_conta_referencia,
		max(a.nr_seq_protocolo)					nr_seq_protocolo,
		max(a.dt_alta)						dt_alta,
		max(b.ie_tipo_consulta)					ie_tipo_consulta,
		max(a.nr_seq_guia) 					nr_seq_guia,
		max(a.nr_seq_prestador_solic_ref)			nr_seq_prestador_solic_ref,
		max(a.ie_via_acesso) 					ie_via_acesso,
		max(a.ie_tipo_tabela_valorizacao)			ie_tipo_tabela_valorizacao,
		max(coalesce(b.dt_atendimento, coalesce(a.dt_autorizacao, coalesce(b.dt_entrada, clock_timestamp())))) 	dt_conta,
		max(a.nr_seq_conta_proc)				nr_seq_conta_proc,
		max(b.ie_tipo_segurado)				ie_tipo_segurado,
		max(b.ie_regime_atendimento)				ie_regime_atendimento,
		max(b.ie_saude_ocupacional)				ie_saude_ocupacional
	FROM pls_conta_pos_cabecalho b, w_pls_conta_pos_proc a
LEFT OUTER JOIN pls_conta_pos_proc d ON (a.nr_sequencia = d.nr_seq_conta_proc)
WHERE a.nr_seq_conta 		= b.nr_seq_conta  and b.nr_sequencia		= nr_seq_conta_pos_cab_p and a.nr_sequencia		= nr_sequencia_p;

BEGIN
	

	tx_intercambio_w := coalesce(tx_intercambio_p, 0);
	for r_c01_w in C01 loop
	
		select	max(cd_prestador)
		into STRICT	cd_prestador_solic_w
		from	pls_prestador
		where	nr_sequencia	= r_c01_w.nr_seq_prestador_solic_ref;

		if (r_c01_w.dt_inicio_proc IS NOT NULL AND r_c01_w.dt_inicio_proc::text <> '') then
			dt_inicio_proc_w	:= to_date(to_char(r_c01_w.dt_procedimento,'dd/mm/yyyy') || ' ' || to_char(r_c01_w.dt_inicio_proc,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		else
			dt_inicio_proc_w	:= r_c01_w.dt_procedimento;
		end if;

		if (r_c01_w.dt_fim_proc IS NOT NULL AND r_c01_w.dt_fim_proc::text <> '') then
			dados_conta_proc_valor_w.dt_fim_proc	:= to_date(to_char(r_c01_w.dt_procedimento,'dd/mm/yyyy') || ' ' || to_char(r_c01_w.dt_fim_proc,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		else
			dados_conta_proc_valor_w.dt_fim_proc := null;
		end if;
		--dados do procedimento utilizados pelas function e rotinas ao decorer desta

		dados_conta_proc_valor_w.nr_sequencia		:= r_c01_w.nr_seq_conta_proc;
		dados_conta_proc_valor_w.nr_seq_conta		:= r_c01_w.nr_seq_conta;
		dados_conta_proc_valor_w.ie_origem_proced	:= r_c01_w.ie_origem_proced;
		dados_conta_proc_valor_w.cd_procedimento	:= r_c01_w.cd_procedimento;
		dados_conta_proc_valor_w.dt_procedimento	:= r_c01_w.dt_procedimento;
		dados_conta_proc_valor_w.ie_criterio_horario	:= r_c01_w.ie_criterio_horario;
		dados_conta_proc_valor_w.ie_via_acesso		:= r_c01_w.ie_via_acesso;
	
		select  cd_grupo_proc,
			cd_especialidade,
			cd_area_procedimento,
			nr_seq_grupo_rec,
			nr_seq_prestador_prot,
			cd_prestador_solic,
			ie_vinc_internado,
			ie_status,
			nr_seq_regra_pct_fat,
			coalesce(vl_procedimento,0)
		into STRICT	dados_procedimento_w.cd_grupo_proc,
			dados_procedimento_w.cd_especialidade,
			dados_procedimento_w.cd_area_procedimento,
			dados_procedimento_w.nr_seq_grupo_rec,
			dados_prestador_prot_w.nr_seq_prestador,
			dados_conta_valor_w.cd_prestador_solic,
			dados_conta_valor_w.ie_ref_guia_internacao,
			ie_status_w,
			nr_seq_regra_pct_fat_w,
			vl_procedimento_w
		from	pls_conta_proc_v
		where	nr_sequencia	= r_c01_w.nr_seq_conta_proc;
			
		select	max(ie_tipo_consulta),
			max(ie_pcmso),
			max(nr_seq_tipo_acomodacao)
		into STRICT	dados_guia_w.ie_tipo_consulta_guia,
			dados_conta_valor_w.ie_atend_pcmso,
			dados_guia_w.nr_seq_tipo_acomodacao
		from	pls_guia_plano
		where	nr_sequencia = r_c01_w.nr_seq_guia;

		--dados da conta ser_ utilizado ao longo desta

		dados_conta_valor_w.nr_sequencia 		:= r_c01_w.nr_seq_conta;
		dados_conta_valor_w.ie_origem_conta		:= r_c01_w.ie_origem_conta;
		dados_conta_valor_w.ie_tipo_conta		:= r_c01_w.ie_tipo_conta;
		dados_conta_valor_w.nr_seq_segurado		:= r_c01_w.nr_seq_segurado;

		dados_conta_valor_w.dt_alta			:= r_c01_w.dt_alta;
		dados_conta_valor_w.ie_tipo_guia		:= r_c01_w.ie_tipo_guia;
		dados_conta_valor_w.dt_atendimento		:= r_c01_w.dt_conta;

		if (dados_prestador_prot_w.nr_seq_prestador IS NOT NULL AND dados_prestador_prot_w.nr_seq_prestador::text <> '') then
			select	max(nr_seq_tipo_prestador),
				max(nr_seq_classificacao),
				max(ie_tipo_vinculo),
				max(cd_prestador)
			into STRICT	dados_prestador_prot_w.nr_seq_tipo_prestador,
				dados_prestador_prot_w.nr_seq_classificacao,
				dados_prestador_prot_w.ie_tipo_vinculo,
				dados_prestador_prot_w.cd_prestador
			from	pls_prestador
			where	nr_sequencia	= dados_prestador_prot_w.nr_seq_prestador;
		end if;

		if (r_c01_w.nr_seq_prestador_exec IS NOT NULL AND r_c01_w.nr_seq_prestador_exec::text <> '') then
			select	max(nr_seq_tipo_prestador),
				max(nr_seq_classificacao),
				max(ie_tipo_vinculo),
				max(cd_prestador),
				max(nr_sequencia)
			into STRICT	dados_prestador_exec_w.nr_seq_tipo_prestador,
				dados_prestador_exec_w.nr_seq_classificacao,
				dados_prestador_exec_w.ie_tipo_vinculo,
				dados_prestador_exec_w.cd_prestador,
				dados_prestador_exec_w.nr_seq_prestador
			from	pls_prestador
			where	nr_sequencia	= r_c01_w.nr_seq_prestador_exec;
		end if;
		
		ie_internado_w 		:= r_c01_w.ie_internado;
		ie_repassa_medico_w	:= r_c01_w.ie_repassa_medico;
		if (ie_internado_w	= 'N') then
			ie_internado_w	:= 'A';
		end if;
		if (r_c01_w.ie_status	= 'M') then
			ie_repassa_medico_w := 'S';
		end if;

		if (r_c01_w.ie_tipo_guia in ('4','6') ) and (ie_internado_w	= 'S')then
			
			select	max(ie_carater_internacao),
				max(nr_seq_tipo_acomodacao),
				max(nr_seq_clinica)
			into STRICT	ie_carater_internacao_w,
				nr_seq_tipo_acomodacao_w,
				nr_seq_clinica_w
			from	pls_conta
			where	ie_tipo_guia = 5
			and	nr_seq_segurado = r_c01_w.nr_seq_segurado
			and	coalesce(cd_guia_referencia,cd_guia) = r_c01_w.cd_guia;
		end if;

		select	coalesce(max(pls_obter_produto_benef(nr_sequencia,r_c01_w.dt_conta)),0),	
			coalesce(max(nr_seq_contrato),0),
			max(pls_obter_conv_cat_segurado(nr_sequencia, 1)),
			max(pls_obter_conv_cat_segurado(nr_sequencia, 2)),
			max(nr_seq_intercambio),
			max(nr_seq_congenere),
			max(nr_seq_ops_congenere),
			max(ie_tipo_segurado),
			max(cd_estabelecimento)
		into STRICT	nr_seq_plano_w,
			nr_seq_contrato_w,
			cd_convenio_w,
			cd_categoria_w,
			nr_seq_intercambio_w,
			nr_seq_congenere_seg_w,
			nr_seq_ops_congenere_seg_w,
			ie_tipo_segurado_w,
			cd_estab_cad_benef_w
		from	pls_segurado
		where	nr_sequencia	= r_c01_w.nr_seq_segurado;
		
		if (r_c01_w.ie_tipo_segurado IS NOT NULL AND r_c01_w.ie_tipo_segurado::text <> '') then
			ie_tipo_segurado_w := r_c01_w.ie_tipo_segurado;
		end if;

		ie_tipo_intercambio_benef_w 	:= pls_obter_tipo_intercambio(coalesce(nr_seq_ops_congenere_seg_w, nr_seq_congenere_seg_w), cd_estab_cad_benef_w);
		nr_seq_congenere_w		:= r_c01_w.nr_seq_congenere;
		if (nr_seq_congenere_seg_w IS NOT NULL AND nr_seq_congenere_seg_w::text <> '') then
			nr_seq_congenere_w	:= nr_seq_congenere_seg_w;
		end if;

		dados_beneficiario_valor_w.nr_sequencia		:= r_c01_w.nr_seq_segurado;
		dados_beneficiario_valor_w.nr_seq_intercambio	:= nr_seq_intercambio_w;
		dados_beneficiario_valor_w.nr_seq_plano		:= nr_seq_plano_w;
		dados_beneficiario_valor_w.ie_tipo_beneficiario	:= ie_tipo_segurado_w;
		dados_beneficiario_valor_w.nr_seq_contrato	:= nr_seq_contrato_w;
		dados_beneficiario_valor_w.ie_tipo_intercambio	:= ie_tipo_intercambio_benef_w;

		--Obter dados do plano 

		select	max(nr_seq_outorgante),
			max(ie_tipo_contratacao)
		into STRICT	nr_seq_outorgante_w,
			ie_tipo_contratacao_w
		from	pls_plano
		where	nr_sequencia	= nr_seq_plano_w;

		-- Obter a categoria do tipo de acomodacao 

		if (nr_seq_tipo_acomodacao_w IS NOT NULL AND nr_seq_tipo_acomodacao_w::text <> '') then
			select	max(nr_seq_categoria)
			into STRICT	nr_seq_categoria_w
			from	pls_regra_categoria 
			where	nr_seq_tipo_acomodacao	= nr_seq_tipo_acomodacao_w;
		end if;

		-- Obter dados do prestador 

		select	max(nr_seq_classificacao),
			max(ie_tipo_vinculo)
		into STRICT	nr_seq_classificacao_prest_w,
			ie_tipo_vinculo_w
		from	pls_prestador
		where	nr_sequencia = r_c01_w.nr_seq_prestador_exec;

		-- Obter a UF da operadora do benefici_rio eventual ou que enviou o protocolo

		select	coalesce(max(a.sg_estado),'X'),
			max(b.ie_tipo_congenere)
		into STRICT	sg_estado_int_w,
			ie_tipo_congenere_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= nr_seq_congenere_w;
		--Obtem o tipo de intercambio do atendimento	

		ie_tipo_intercambio_w	:= pls_obter_tipo_intercambio(nr_seq_congenere_w, r_c01_w.cd_estabelecimento);

		dados_conta_valor_w.ie_tipo_intercambio		:= ie_tipo_intercambio_w;
		dados_conta_valor_w.nr_seq_congenere		:= nr_seq_congenere_w;

		dt_preco_w	:= pls_obter_data_preco_item(r_c01_w.nr_seq_conta_proc, 'P');
		
		select	coalesce(max(ie_calculo_pacote),'P'),
			coalesce(max(ie_honorario_pos),'S')
		into STRICT	ie_calculo_pacote_w,
			ie_honorario_pos_w
		from	pls_parametros
		where	cd_estabelecimento	= r_c01_w.cd_estabelecimento;
				
		select	max(nr_contrato)
		into STRICT	nr_contrato_w
		from	pls_contrato
		where	nr_sequencia = nr_seq_contrato_w;

		if (r_c01_w.nr_seq_guia IS NOT NULL AND r_c01_w.nr_seq_guia::text <> '') then
			select	max(ie_pcmso)
			into STRICT	dados_conta_valor_w.ie_atend_pcmso
			from	pls_guia_plano
			where	nr_sequencia	= r_c01_w.nr_seq_guia;
		end if;
		
		if (r_c01_w.nr_seq_conta_referencia IS NOT NULL AND r_c01_w.nr_seq_conta_referencia::text <> '') and (coalesce(nr_seq_clinica_w::text, '') = '') then
			select	max(nr_seq_clinica)
			into STRICT	nr_seq_clinica_w
			from	pls_conta
			where	nr_sequencia	= r_c01_w.nr_seq_conta_referencia;
		end if;

		dados_conta_valor_w.ie_carater_internacao := ie_carater_internacao_w;
		
		
		
			if (ie_tipo_despesa_p = '1') or (ie_tipo_despesa_p = '4' AND ie_calculo_pacote_w = 'R') then  --  Atualizar o valor do procedimento ou Atualizar o valor dos pacotes quando o par_metro geral da operadora ssim indicar 
				
				pls_define_preco_proc(	r_c01_w.cd_estabelecimento, r_c01_w.nr_seq_prestador_exec, nr_seq_categoria_w,
							dt_preco_w, null, r_c01_w.cd_procedimento,
							r_c01_w.ie_origem_proced, nr_seq_tipo_acomodacao_w, r_c01_w.nr_seq_tipo_atendimento,
							nr_seq_clinica_w, nr_seq_plano_w, r_c01_w.ie_tipo_tabela_valorizacao,
							nr_seq_contrato_w, 0, r_c01_w.nr_seq_conta_proc,
							ie_gravar_log_p, cd_convenio_w, cd_categoria_w,
							ie_tipo_contratacao_w, r_c01_w.qt_dias_internacao, r_c01_w.nr_seq_segurado,
							nr_seq_intercambio_w, '', nr_seq_classificacao_prest_w,
							cd_medico_conta_w, ie_internado_w, r_c01_w.ie_tecnica_utilizada,
							r_c01_w.ie_tipo_guia, ie_tipo_intercambio_w, sg_estado_int_w,
							r_c01_w.nr_seq_cbo_saude, ie_carater_internacao_w, r_c01_w.dt_procedimento,
							r_c01_w.ie_tipo_acomodacao_ptu, r_c01_w.nr_seq_rp_combinada, dados_prestador_prot_w,
							dados_guia_w, dados_conta_valor_w, dados_regra_preco_proc_w, r_c01_w.nr_seq_cbo_saude_solic,
							r_c01_w.ie_regime_atendimento, null, r_c01_w.ie_saude_ocupacional);

							vl_procedimento_ptu_w		:= dados_regra_preco_proc_w.vl_procedimento;
							vl_co_ptu_w			:= dados_regra_preco_proc_w.vl_custo_operacional;
							vl_anestesista_w		:= dados_regra_preco_proc_w.vl_anestesista;
							vl_medico_ptu_w			:= dados_regra_preco_proc_w.vl_medico;
							vl_medico_ww			:= dados_regra_preco_proc_w.vl_medico;
							vl_material_ptu_w		:= dados_regra_preco_proc_w.vl_filme;
							vl_auxiliares_w			:= dados_regra_preco_proc_w.vl_auxiliares;
							nr_seq_regra_inter_w		:= dados_regra_preco_proc_w.nr_sequencia;
							cd_edicao_amb_w			:= dados_regra_preco_proc_w.cd_edicao_amb;
							nr_seq_regra_autogerado_w	:= dados_regra_preco_proc_w.nr_seq_regra_autogerado;
							cd_moeda_autogerado_w		:= dados_regra_preco_proc_w.cd_moeda_autogerado;
							vl_ch_honorarios_w		:= dados_regra_preco_proc_w.vl_ch_honorarios;
							vl_ch_custo_oper_w		:= dados_regra_preco_proc_w.vl_ch_custo_oper;
							vl_ch_custo_filme_w		:= dados_regra_preco_proc_w.vl_ch_custo_filme;
							vl_ch_anestesista_w		:= dados_regra_preco_proc_w.vl_ch_anestesista;
				
				if (r_c01_w.ie_origem_proced	= 5) then
					begin
					select	a.nr_auxiliar,
						a.nr_porte_anest
					into STRICT	nr_auxiliares_w,
						qt_porte_anestesico_w
					from	cbhpm_preco a
					where	a.cd_procedimento	= r_c01_w.cd_procedimento
					and	a.ie_origem_proced	= r_c01_w.ie_origem_proced
					and	coalesce(a.dt_vigencia,clock_timestamp() - interval '3650 days') =
							(SELECT	max(coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days'))
							from	cbhpm_preco b
							where	b.cd_procedimento	= r_c01_w.cd_procedimento
							and	b.ie_origem_proced	= r_c01_w.ie_origem_proced
							and	coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days')	<= r_c01_w.dt_conta);
					exception
					when others then
						qt_porte_anestesico_w 	:= 0;
						nr_auxiliares_w		:= 0;
					end;
				else
					begin
					select	a.nr_auxiliares,
						a.qt_porte_anestesico
					into STRICT	nr_auxiliares_w,
						qt_porte_anestesico_w
					from	preco_amb a
					where	a.cd_procedimento	= r_c01_w.cd_procedimento
					and	a.cd_edicao_amb		= cd_edicao_amb_w
					and	coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	=
							(SELECT	max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
							from	preco_amb b
							where	b.cd_edicao_amb		= cd_edicao_amb_w
							and	b.cd_procedimento	= r_c01_w.cd_procedimento
							and	coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	<= r_c01_w.dt_conta);
					exception
					when others then
						qt_porte_anestesico_w 	:= 0;
						nr_auxiliares_w		:= 0;
					end;
				end if;
				
				--incid_ncia da taxa da regra de quantidade de execucao

				vl_medico_ptu_w		:= dividir((vl_medico_ptu_w 	* coalesce(r_c01_w.tx_medico,100)),100);
				vl_co_ptu_w		:= dividir((vl_co_ptu_w 	* coalesce(r_c01_w.tx_custo_operacional,100)),100);
				vl_anestesista_w	:= dividir((vl_anestesista_w 	* coalesce(r_c01_w.tx_anestesista,100)),100);
				vl_auxiliares_w		:= dividir((vl_auxiliares_w 	* coalesce(r_c01_w.tx_auxiliares,100)),100);
				tx_item_w		:= r_c01_w.tx_item;
				
				if (pls_cta_valorizacao_pck.obter_se_taxa_filme( r_c01_w.nr_seq_prestador_exec, r_c01_w.cd_estabelecimento) = 'S') then	
					vl_material_ptu_w	:= dividir((vl_material_ptu_w * coalesce(r_c01_w.tx_material,100)),100);
				end if;
				
				if (ie_tipo_despesa_p = '1') then
					pls_obter_regra_tx_proc_inter(dados_conta_proc_valor_w, dados_beneficiario_valor_w, nr_seq_regra_tx_w, tx_item_regra_w);
					
					if (tx_item_regra_w IS NOT NULL AND tx_item_regra_w::text <> '') then
						tx_item_w := tx_item_regra_w;
					end if;
				end if;
				
				if (coalesce(tx_item_w::text, '') = '') then
					tx_item_w := 100;
				end if;
				--Aplicacao da taxa do item 

				vl_medico_ptu_w		:= dividir((vl_medico_ptu_w 	* tx_item_w),100);
				vl_co_ptu_w		:= dividir((vl_co_ptu_w 	* tx_item_w),100);
				vl_anestesista_w	:= dividir((vl_anestesista_w	* tx_item_w),100);
				vl_auxiliares_w		:= dividir((vl_auxiliares_w	* tx_item_w),100);
				
				if (pls_cta_valorizacao_pck.obter_se_taxa_filme( r_c01_w.nr_seq_prestador_exec, r_c01_w.cd_estabelecimento) = 'S') then	
					vl_material_ptu_w	:= dividir((vl_material_ptu_w * tx_item_w),100);
				end if;
				-- Tratar os adicionais por hor_rio 

				
				dados_adic_horario_w := pls_cta_valorizacao_pck.pls_define_adic_horario(     	dados_conta_proc_valor_w, dados_prestador_exec_w, dados_prestador_prot_w, dados_conta_valor_w, dados_procedimento_w, dados_beneficiario_valor_w, 'O', nm_usuario_p, r_c01_w.cd_estabelecimento, dados_adic_horario_w);
				
				vl_material_ptu_w	:= (dados_adic_horario_w.tx_materiais			* vl_material_ptu_w);
				vl_co_ptu_w		:= (coalesce(dados_adic_horario_w.tx_custo_operacional,1)	* vl_co_ptu_w);
				vl_medico_ptu_w		:= (coalesce(dados_adic_horario_w.tx_medico,1)		* vl_medico_ptu_w);
				vl_total_partic_w	:= (dados_adic_horario_w.tx_medico			* vl_total_partic_w);
				vl_auxiliares_w		:= (dados_adic_horario_w.tx_auxiliares			* vl_auxiliares_w);
				vl_anestesista_w	:= (dados_adic_horario_w.tx_anestesista			* vl_anestesista_w);
				
				vl_material_ptu_w	:= (r_c01_w.qt_procedimento	* vl_material_ptu_w);
				vl_co_ptu_w		:= (r_c01_w.qt_procedimento	* vl_co_ptu_w);
				vl_medico_ptu_w		:= (r_c01_w.qt_procedimento	* vl_medico_ptu_w);
				vl_total_partic_w	:= (r_c01_w.qt_procedimento	* vl_total_partic_w);
				vl_auxiliares_w		:= (r_c01_w.qt_procedimento	* vl_auxiliares_w);
				vl_anestesista_w	:= (r_c01_w.qt_procedimento	* vl_anestesista_w);
				
				if (ie_gravar_log_p = 'S') then
					ds_observacao_log_w	:= 'Regra: '||dados_adic_horario_w.nr_sequencia||'; Tx proced: '||dados_adic_horario_w.tx_procedimento||
								   '; Tx m_dico: '||dados_adic_horario_w.tx_medico||'; Tx custo: '||dados_adic_horario_w.tx_custo_operacional||
								   '; Tx mat: '||dados_adic_horario_w.tx_materiais;
					CALL pls_gravar_log_calculo_proc(	'S', r_c01_w.nr_seq_conta_proc, r_c01_w.cd_estabelecimento,
									'Regra hor_rio', ds_observacao_log_w, 'pls_atualiza_valor_proc_pos',
									0, vl_material_ptu_w, vl_co_ptu_w,
									vl_total_partic_w, 0, 0,
									4, null, null,
									null, null, 'PLS_CONTA_POS_PROC', nm_usuario_p);
				end if;

				pls_gerar_honorario_proc( 	r_c01_w.nr_seq_conta_proc, r_c01_w.cd_procedimento, r_c01_w.ie_origem_proced, r_c01_w.nr_seq_grau_partic,
								r_c01_w.ie_tipo_guia, r_c01_w.nr_seq_tipo_atendimento, r_c01_w.ie_tipo_conta,
								r_c01_w.nr_seq_prestador_exec, r_c01_w.ie_tipo_protocolo, nr_auxiliares_w,
								r_c01_w.ie_status, ie_repassa_medico_w, vl_anestesista_w,
								vl_medico_ptu_w, vl_auxiliares_w, r_c01_w.cd_estabelecimento, r_c01_w.dt_procedimento,
								nm_usuario_p, nr_seq_categoria_w, dt_preco_w,
								nr_seq_tipo_acomodacao_w, nr_seq_clinica_w, nr_seq_plano_w,
								'O', nr_seq_contrato_w, cd_convenio_w,
								cd_categoria_w,ie_tipo_contratacao_w, r_c01_w.qt_dias_internacao,
								r_c01_w.nr_seq_segurado,nr_seq_intercambio_w,ie_internado_w,
								r_c01_w.ie_tecnica_utilizada,'A', 'X',
								ie_carater_internacao_w,'P', vl_total_partic_w,
								ie_tipo_partic_prof_w, null,null, 'A' );
					
				select	coalesce(max(ie_nao_gera_tx_inter), 'N'),
					max(ie_preco_informado)
				into STRICT	ie_nao_gera_tx_inter_w,
					ie_preco_informado_w
				from	pls_regra_preco_proc
				where	nr_sequencia	= nr_seq_regra_inter_w;
										
			elsif (ie_tipo_despesa_p in ('2','3')) then  -- Atualizar os valores das taxas e di_rias 

				pls_define_preco_servico(	r_c01_w.cd_estabelecimento, r_c01_w.nr_seq_prestador_exec, dt_preco_w,
								r_c01_w.cd_procedimento, r_c01_w.ie_origem_proced, r_c01_w.ie_tipo_tabela_valorizacao,
								r_c01_w.nr_seq_conta_proc, ie_gravar_log_p, ie_tipo_contratacao_w,
								nr_seq_plano_w, 
								'', '', '', 
								nr_seq_contrato_w, nr_seq_classificacao_prest_w, nr_seq_categoria_w,
								ie_internado_w, ie_tipo_vinculo_w, nr_seq_intercambio_w,
								r_c01_w.nr_seq_segurado, ie_tipo_intercambio_w, r_c01_w.ie_tipo_guia, r_c01_w.nr_seq_cbo_saude, 
								ie_carater_internacao_w, nr_seq_clinica_w, r_c01_w.nr_seq_tipo_atendimento, 
								nr_seq_tipo_acomodacao_w, dados_prestador_prot_w,
								dados_conta_valor_w, dados_regra_preco_servico_w, null, cd_prestador_solic_w,
								r_c01_w.ie_regime_atendimento, r_c01_w.ie_saude_ocupacional);
				
				nr_seq_regra_inter_w		:= dados_regra_preco_servico_w.nr_sequencia;
				vl_procedimento_ptu_w 		:= dados_regra_preco_servico_w.vl_servico;
				cd_tabela_servico_w		:= dados_regra_preco_servico_w.cd_tabela_servico;
				dt_vigencia_w			:= dados_regra_preco_servico_w.dt_vigencia;
				
				select	coalesce(max(ie_nao_gera_tx_inter),'N')
				into STRICT	ie_nao_gera_tx_inter_w
				from	pls_regra_preco_servico
				where	nr_sequencia	= nr_seq_regra_inter_w;
				
			elsif (ie_tipo_despesa_p = '4') then

				pls_define_preco_pacote(	r_c01_w.cd_estabelecimento, r_c01_w.nr_seq_prestador_exec, nr_seq_tipo_acomodacao_w,
								dt_preco_w, r_c01_w.cd_procedimento, r_c01_w.ie_origem_proced,
								ie_internado_w, nr_seq_plano_w, nr_contrato_w,
								nr_seq_congenere_w, nm_usuario_p, r_c01_w.ie_origem_conta,
								ie_tipo_intercambio_w, nr_seq_pacote_w,	nr_seq_regra_pacote_w,
								cd_proc_pacote_w, ie_origem_pacote_w, vl_beneficiario_w,
								vl_medico_w, vl_anestesista_w, vl_auxiliares_w,
								vl_custo_operacional_w, vl_filme_w, nr_seq_intercambio_w,
								nr_seq_classificacao_prest_w, r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_segurado,
								null, 'S', null, 1);
							
			end if;

			if (ie_tipo_despesa_p in ('2','3'))or
				((ie_tipo_despesa_p = '4') and (coalesce(ie_calculo_pacote_w,'X') != 'R')) then
				-- Tratar os adicionais por hor_rio 

				dados_adic_horario_w := pls_cta_valorizacao_pck.pls_define_adic_horario(     	dados_conta_proc_valor_w, dados_prestador_exec_w, dados_prestador_prot_w, dados_conta_valor_w, dados_procedimento_w, dados_beneficiario_valor_w, 'O', nm_usuario_p, r_c01_w.cd_estabelecimento, dados_adic_horario_w);

				vl_material_ptu_w	:= (dados_adic_horario_w.tx_materiais		* vl_material_ptu_w);
				vl_co_ptu_w		:= (dados_adic_horario_w.tx_custo_operacional	* vl_co_ptu_w);
				vl_medico_ptu_w		:= (dados_adic_horario_w.tx_medico		* vl_medico_ptu_w);
				vl_total_partic_w	:= (dados_adic_horario_w.tx_medico		* vl_total_partic_w);

				if (ie_gravar_log_p = 'S') then
					ds_observacao_log_w	:= 'Regra: '||dados_adic_horario_w.nr_sequencia||'; Tx proced: '||dados_adic_horario_w.tx_procedimento||'; Tx m_dico: '||dados_adic_horario_w.tx_medico||'; Tx custo: '||dados_adic_horario_w.tx_custo_operacional||'; Tx mat: '||dados_adic_horario_w.tx_materiais;
					CALL pls_gravar_log_calculo_proc(	'S', r_c01_w.nr_seq_conta_proc, r_c01_w.cd_estabelecimento,
									'Regra hor_rio', ds_observacao_log_w, 'pls_atualiza_valor_proc_pos',
									0, vl_material_ptu_w, vl_co_ptu_w,
									vl_total_partic_w, 0, 0,
									4, null, null,
									null, null, 'PLS_CONTA_POS_PROC', nm_usuario_p);
				end if;

			end if;
			if (ie_nao_gera_tx_inter_w = 'S') then
				tx_intercambio_w	:= 0;
			end if;

			if (ie_tipo_despesa_p = '4') and (coalesce(ie_calculo_pacote_w,'R') != 'R') then
				
				vl_procedimento_ptu_w := r_c01_w.qt_procedimento * coalesce(vl_beneficiario_w,0);
				vl_beneficiario_w := vl_procedimento_ptu_w;
				--Taxa do item sobre todos os  valores do procedimento

				if (coalesce(tx_item_w,100) <> 100 ) then
					vl_beneficiario_w	:= dividir((coalesce(vl_beneficiario_w,0) 	* tx_item_w),100);
					vl_procedimento_ptu_w	:= dividir((vl_procedimento_ptu_w * tx_item_w),100);
					vl_co_ptu_w		:= r_c01_w.qt_procedimento * dividir((vl_co_ptu_w * tx_item_w),100);
					vl_material_ptu_w	:= r_c01_w.qt_procedimento * dividir((vl_material_ptu_w * tx_item_w),100);
				end if;
				
			elsif	((ie_tipo_despesa_p = '1') or			
				(ie_tipo_despesa_p = '4' AND ie_calculo_pacote_w = 'R')) then		
				
				--C_lculado do valor de faturamento que deve ser a soma de co + medico + filme respeitando a regra de honor_rio quando se tratar de tipo de despesa procedimento

				if (ie_repassa_medico_w	= 'H') and (ie_honorario_pos_w	= 'S') then
					vl_procedimento_ptu_w	:= coalesce(vl_total_partic_w,0);
					---taxa de interc_mbio

					vl_taxa_co_w		:= 0; -- OS 437002 - Conforme conversado com Paulo, valor da taxa deve ser sobre o valor total
					vl_taxa_material_w	:= 0;
					vl_co_ptu_w		:= 0;
					vl_material_ptu_w	:= 0;
					
				elsif (ie_repassa_medico_w IS NOT NULL AND ie_repassa_medico_w::text <> '') then
					
					--Taxa de interc_mbio

					vl_procedimento_ptu_w	:= coalesce(vl_total_partic_w,0);
					vl_co_ptu_w		:= coalesce(vl_co_ptu_w,0);
					
					if (pls_cta_valorizacao_pck.obter_se_taxa_filme(r_c01_w.nr_seq_prestador_exec, r_c01_w.cd_estabelecimento) = 'S') then
						vl_material_ptu_w := coalesce(vl_material_ptu_w,0);
					end if;
					vl_taxa_co_w		:= dividir((vl_co_ptu_w * tx_intercambio_w),100); -- OS 437002 - Conforme conversado com Paulo, valor da taxa deve ser sobre o valor total
					vl_taxa_material_w	:= dividir((vl_material_ptu_w * tx_intercambio_w),100);
					
					--vl_procedimento_ptu_w	:= nvl(vl_total_partic_w,0) + nvl(vl_co_ptu_w,0) + nvl(vl_material_ptu_w,0);

				else
					vl_procedimento_ptu_w 	:= 0;
					--insid_ncia da taxa de interc_mbio

					vl_taxa_co_w		:= 0;
					vl_taxa_material_w	:= 0;
				end if;
				
				--taxa de hor_rio sobre o procedimento

				vl_procedimento_ptu_w	:= (coalesce(dados_adic_horario_w.tx_procedimento,1) * vl_procedimento_ptu_w);
				vl_taxa_servico_w	:= dividir((vl_total_partic_w * tx_intercambio_w),100);
				if (ie_nao_gera_tx_inter_w	= 'F') then
					vl_taxa_servico_w	:= vl_taxa_servico_w - vl_taxa_material_w;
					vl_taxa_material_w	:= 0;
				end if;
				vl_beneficiario_w	:= coalesce(vl_procedimento_ptu_w,0);
				
			else
				vl_taxa_co_w		:= 0;
				vl_taxa_material_w	:= 0;
				vl_procedimento_ptu_w	:= r_c01_w.qt_procedimento * (coalesce(dados_adic_horario_w.tx_procedimento,1) * vl_procedimento_ptu_w);
				vl_taxa_servico_w	:= dividir((vl_procedimento_ptu_w * tx_intercambio_w),100);
				vl_beneficiario_w	:= coalesce(vl_procedimento_ptu_w,0);
				vl_medico_w		:= coalesce(vl_procedimento_ptu_w,0);
				
				--Insid_ncia da taxa do item sobre todos os  valores do procedimento

				if (coalesce(tx_item_w,100) <> 100 ) then
					vl_beneficiario_w	:= dividir((coalesce(vl_beneficiario_w,0) * tx_item_w),100);
					vl_medico_w		:= dividir((coalesce(vl_medico_w,0) * tx_item_w),100);

				end if;
			end if;
		
		if (ie_status_w = 'M') and (nr_seq_regra_pct_fat_w IS NOT NULL AND nr_seq_regra_pct_fat_w::text <> '') and (vl_procedimento_w > 0) then
			vl_procedimento_ptu_w := vl_procedimento_w;
			vl_procedimento_ptu_w := vl_procedimento_ptu_w * r_c01_w.qt_procedimento;
			vl_taxa_servico_w := dividir(vl_procedimento_ptu_w * tx_intercambio_w,100);
			vl_taxa_co_w := 0;
			vl_taxa_material_w := 0;
			vl_material_ptu_w := 0;
			vl_co_ptu_w := 0;
			nr_seq_regra_inter_w := null;
			nr_seq_regra_pacote_w := null;
		end if;
		
		/*Na rotina original, alguns campos de valor ~s_o atualizados na pls_conta_proc, aqui apenas retornar_ os valores  para que posteriormente ocorra uma atualizacao
		uitilizando um forall, atualizando tamb_m na tabela tempor_ria de procedimentos outros campos necess_rios em etapas posteriores*/

		
		tx_intercambio_p					:= tx_intercambio_w;
		vl_beneficiario_p 					:= coalesce(vl_beneficiario_w,0);
		nr_seq_regra_p	 					:= nr_seq_regra_inter_w;
		dados_regra_preco_proc_p.vl_proc_tabela			:= coalesce(dados_regra_preco_proc_w.vl_proc_tabela,dados_regra_preco_servico_w.vl_servico);
		dados_regra_preco_proc_p.vl_ch_honorarios		:= coalesce(dados_regra_preco_proc_w.vl_ch_honorarios,dados_regra_preco_servico_w.vl_ch_servico);
		dados_regra_preco_proc_p.cd_moeda_autogerado		:= coalesce(dados_regra_preco_proc_w.cd_moeda_autogerado,dados_regra_preco_servico_w.cd_moeda);
		dados_regra_preco_proc_p.vl_custo_operacional_tab 	:= dados_regra_preco_proc_w.vl_custo_operacional_tab;
		dados_regra_preco_proc_p.qt_filme_tab 			:= dados_regra_preco_proc_w.qt_filme_tab;
		dados_regra_preco_proc_p.vl_base_filme			:= dados_regra_preco_proc_w.vl_base_filme;
		dados_regra_preco_proc_p.cd_porte_anestesico		:= dados_regra_preco_proc_w.cd_porte_anestesico;
		dados_regra_preco_proc_p.ie_nao_gera_tx_inter		:= ie_nao_gera_tx_inter_w;
		dados_regra_preco_proc_p.nr_seq_criterio_horario	:= dados_adic_horario_w.nr_sequencia;
		dados_regra_preco_proc_p.vl_medico_tab			:= vl_medico_ww;
		dados_regra_preco_proc_p.tx_item			:= tx_item_regra_w;
		dados_regra_preco_proc_p.nr_seq_regra_tx_proc_int	:= nr_seq_regra_tx_w;
		dados_regra_preco_proc_p.nr_seq_regra_preco		:= coalesce(nr_seq_regra_inter_w,nr_seq_regra_pacote_w);
		dados_regra_preco_proc_p.vl_taxa_co			:= vl_taxa_co_w;
		dados_regra_preco_proc_p.vl_taxa_material		:= coalesce(vl_taxa_material_w,0);
		dados_regra_preco_proc_p.vl_taxa_servico		:= coalesce(vl_taxa_servico_w,0);
		dados_regra_preco_proc_p.vl_materiais			:= vl_material_ptu_w;
		dados_regra_preco_proc_p.vl_medico			:= vl_procedimento_ptu_w;
		dados_regra_preco_proc_p.vl_custo_operacional		:= vl_co_ptu_w;
		dados_regra_preco_proc_p.nr_seq_proc			:= r_c01_w.nr_seq_conta_proc;
		dados_regra_preco_proc_p.tx_intercambio			:= tx_intercambio_w;
		dados_regra_preco_proc_p.ie_nao_gera_tx_inter		:= ie_nao_gera_tx_inter_w;
				
	end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.pls_atualiza_valor_proc_pos ( nr_sequencia_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_pos_cab_p pls_conta_pos_cabecalho.nr_sequencia%type, ie_tipo_despesa_p text, ie_gravar_log_p text, nm_usuario_p usuario.nm_usuario%type, tx_intercambio_p INOUT bigint, ie_pos_estab_faturamento_p pls_parametros.ie_pos_estab_faturamento%type, ie_geracao_pos_estabelecido_p pls_parametros.ie_geracao_pos_estabelecido%type, ie_preco_interc_congenere_p pls_parametros.ie_preco_interc_congenere%type, nr_seq_regra_p INOUT pls_regra_preco_proc.nr_sequencia%type, vl_beneficiario_p INOUT bigint, dados_regra_preco_proc_p INOUT dados_regra_preco_proc) FROM PUBLIC;
