-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.gerar_contab_taxa_adm_pos ( tb_nr_seq_conta_pos_estab_p pls_util_cta_pck.t_number_table, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

				
_ora2pg_r RECORD;
tb_seq_resumo_ins_proc_w	pls_util_cta_pck.t_number_table;
tb_seq_pos_estab_tx_ins_proc_w	pls_util_cta_pck.t_number_table;
tb_seq_prest_pgto_ins_proc_w	pls_util_cta_pck.t_number_table;
tb_vl_taxa_ins_proc_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_ins_proc_w		pls_util_cta_pck.t_number_table;
tb_cta_contab_taxa_upd_proc_w	pls_util_cta_pck.t_number_table;
tb_vl_contab_taxa_upd_proc_w	pls_util_cta_pck.t_number_table;
tb_seq_resumo_upd_proc_w	pls_util_cta_pck.t_number_table;
tb_seq_resumo_ins_mat_w		pls_util_cta_pck.t_number_table;
tb_seq_pos_estab_tx_ins_mat_w	pls_util_cta_pck.t_number_table;
tb_seq_prest_pgto_ins_mat_w	pls_util_cta_pck.t_number_table;
tb_vl_taxa_ins_mat_w		pls_util_cta_pck.t_number_table;
tb_seq_conta_ins_mat_w		pls_util_cta_pck.t_number_table;
tb_cta_contab_taxa_upd_mat_w	pls_util_cta_pck.t_number_table;
tb_vl_contab_taxa_upd_mat_w	pls_util_cta_pck.t_number_table;
tb_seq_resumo_upd_mat_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_contab_taxa_w	pls_conta_pos_taxa_contab.nr_sequencia%type;
vl_taxa_manutencao_w		pls_conta_pos_estab_taxa.vl_taxa_manutencao%type;
vl_validacao_w			pls_conta_pos_mat_tx_ctb.vl_taxa%type;
i_upd_proc_w			integer := 0;
i_ins_proc_w			integer := 0;
i_upd_mat_w			integer := 0;
i_ins_mat_w			integer := 0;
pr_pagamento_liberado_w		double precision;
vl_contab_taxa_w		double precision;
vl_diferenca_w			double precision;
				
C01 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_lib_original) vl_lib_pagamento,
		a.nr_seq_conta_mat,
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta	= nr_seq_conta_pc 
	and	a.ie_tipo_item 	!= 'I'
	and	a.ie_situacao 	= 'A'
	--and	a.nr_seq_exame_coleta is null

	group by a.nr_seq_conta,
		 a.nr_seq_conta_mat,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto;

C02 CURSOR(	nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type) FOR
	SELECT	a.nr_sequencia nr_seq_conta_estab_taxa,
		a.vl_taxa_manutencao,
		c.vl_liberado,
		'P' ie_tipo_item
	from	pls_conta_pos_proc_tx	a,
		pls_conta_pos_proc	b,
		pls_conta_proc		c
	where	a.nr_seq_conta_pos_proc	= b.nr_sequencia
	and	b.nr_seq_conta_proc	= c.nr_sequencia
	and	c.nr_sequencia		= nr_seq_conta_proc_pc
	and	a.vl_taxa_manutencao	>= 0
	
union all

	SELECT	a.nr_sequencia nr_seq_conta_estab_taxa,
		a.vl_taxa_manutencao,
		c.vl_liberado,
		'M' ie_tipo_item
	from	pls_conta_pos_mat_tx	a,
		pls_conta_pos_mat	b,
		pls_conta_mat		c
	where	a.nr_seq_conta_mat_pos	= b.nr_sequencia
	and	b.nr_seq_conta_mat	= c.nr_sequencia
	and	c.nr_sequencia		= nr_seq_conta_mat_pc
	and	a.vl_taxa_manutencao	>= 0;

C03_mat CURSOR(nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	nr_seq_pos_mat_tx,
		sum(vl_taxa) vl_contab
	from	pls_conta_pos_mat_tx_ctb
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_pos_mat_tx;
	
C03_proc CURSOR(nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	nr_seq_proc_pos_tx,
		sum(vl_taxa) vl_contab
	from	pls_conta_pos_proc_tx_ctb
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_proc_pos_tx;

C04 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_conta	= 'I'
	and	a.ie_status	!= 'M'
	
union all

	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_conta	= 'I'
	and	a.ie_status	!= 'M'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_mat 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_proc 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_protocolo	= 'R'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_protocolo	= 'R';

BEGIN
	
	if ( tb_nr_seq_conta_pos_estab_p.count > 0) then
		--Percorre todas as contas selecionadas para geracao dos valores cont_beis da taxa administrativa de p_s.

		for j in tb_nr_seq_conta_pos_estab_p.first..tb_nr_seq_conta_pos_estab_p.last loop
		
			--percorre os registros na conta m_dica resumo

			for r_c01_w in C01(tb_nr_seq_conta_pos_estab_p(j)) loop
			
				--percorre os registros referentes a taxa adminstrativa dos itens

				for r_c02_w in C02(r_c01_w.nr_seq_conta_proc,r_c01_w.nr_seq_conta_mat) loop
				
					--Existem casos que n_o tem valor liberado, por_m tem coparticipacao, ent_o o percentual de pagamento _ 1

					if (r_c01_w.vl_lib_pagamento <> 0) then
						/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
					else
						pr_pagamento_liberado_w	:= 1;
					end if;
					
					/* Aplicar o percentual obtido sobre o valor de coparticipacao */


					vl_contab_taxa_w	:= round((r_c02_w.vl_taxa_manutencao * pr_pagamento_liberado_w)::numeric,2);
					
					if (r_c02_w.ie_tipo_item = 'P') then
						nr_seq_conta_contab_taxa_w	:= null;
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_proc_tx_ctb
						where	nr_seq_conta		= tb_nr_seq_conta_pos_estab_p(j)
						and	nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo;
							
						-- N_o vai ter conta m_dica resumo apenas se a conta for de origem interc_mbio

						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') and ( coalesce(r_c01_w.nr_seq_conta_resumo::text, '') = '') then
							
							select	max(nr_sequencia)
							into STRICT	nr_seq_conta_contab_taxa_w
							from	pls_conta_pos_proc_tx_ctb
							where	nr_seq_proc_pos_tx	= r_c02_w.nr_seq_conta_estab_taxa;
							
						end if;	
						
						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						
							tb_seq_resumo_ins_proc_w(i_ins_proc_w)		:= r_c01_w.nr_seq_conta_resumo;
							tb_seq_pos_estab_tx_ins_proc_w(i_ins_proc_w)	:= r_c02_w.nr_seq_conta_estab_taxa;	
							tb_seq_prest_pgto_ins_proc_w(i_ins_proc_w)	:= r_c01_w.nr_seq_prestador_pgto;
							tb_vl_taxa_ins_proc_w(i_ins_proc_w)		:= vl_contab_taxa_w;
							tb_seq_conta_ins_proc_w(i_ins_proc_w)		:= tb_nr_seq_conta_pos_estab_p(j);	

							--Abaixo an_lise a quantidade de registros nas estruturas e se foi ultrapassada a quantidade de registros, insere ou atualiza as respectivas tabelas no banco

							if (i_ins_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
							
								SELECT * FROM pls_pos_estabelecido_pck.ins_contab_tx_pos( 	tb_seq_resumo_ins_proc_w, tb_seq_pos_estab_tx_ins_proc_w, tb_seq_prest_pgto_ins_proc_w, tb_vl_taxa_ins_proc_w, tb_seq_conta_ins_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_seq_resumo_ins_proc_w := _ora2pg_r.tb_seq_resumo_p; tb_seq_pos_estab_tx_ins_proc_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_seq_prest_pgto_ins_proc_w := _ora2pg_r.tb_seq_prest_pgto_p; tb_vl_taxa_ins_proc_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_proc_w := _ora2pg_r.tb_seq_conta_p;
								i_ins_proc_w := 0;
							
							else
								i_ins_proc_w := i_ins_proc_w + 1;
							end if;
							
						else
						
							tb_cta_contab_taxa_upd_proc_w(i_upd_proc_w)  	:= r_c01_w.nr_seq_conta_resumo;	
							tb_vl_contab_taxa_upd_proc_w(i_upd_proc_w)  	:= vl_contab_taxa_w;	
							tb_seq_resumo_upd_proc_w(i_upd_proc_w)		:= nr_seq_conta_contab_taxa_w;
							
							if (i_upd_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
											
								SELECT * FROM pls_pos_estabelecido_pck.upd_contab_tx_pos( 	tb_cta_contab_taxa_upd_proc_w, tb_vl_contab_taxa_upd_proc_w, tb_seq_resumo_upd_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_cta_contab_taxa_upd_proc_w := _ora2pg_r.tb_cta_contab_taxa_p; tb_vl_contab_taxa_upd_proc_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_seq_resumo_upd_proc_w := _ora2pg_r.tb_seq_resumo_p;
								i_upd_proc_w := 0;
							
							else
								i_upd_proc_w := i_upd_proc_w + 1;
							end if;
							
						end if;
					else
					
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_mat_tx_ctb
						where	nr_seq_conta		= tb_nr_seq_conta_pos_estab_p(j)
						and	nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo;
							
						-- N_o vai ter conta m_dica resumo apenas se a conta for de origem interc_mbio

						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') and ( coalesce(r_c01_w.nr_seq_conta_resumo::text, '') = '') then
							
							select	max(nr_sequencia)
							into STRICT	nr_seq_conta_contab_taxa_w
							from	pls_conta_pos_mat_tx_ctb
							where	nr_seq_pos_mat_tx	= r_c02_w.nr_seq_conta_estab_taxa;
							
						end if;	
				
						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						
							tb_seq_resumo_ins_mat_w(i_ins_mat_w)		:= r_c01_w.nr_seq_conta_resumo;
							tb_seq_pos_estab_tx_ins_mat_w(i_ins_mat_w)	:= r_c02_w.nr_seq_conta_estab_taxa;	
							tb_seq_prest_pgto_ins_mat_w(i_ins_mat_w)	:= r_c01_w.nr_seq_prestador_pgto;
							tb_vl_taxa_ins_mat_w(i_ins_mat_w)		:= vl_contab_taxa_w;
							tb_seq_conta_ins_mat_w(i_ins_mat_w)		:= tb_nr_seq_conta_pos_estab_p(j);	
					
							if (i_ins_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
								SELECT * FROM pls_pos_estabelecido_pck.ins_contab_tx_pos( 	tb_seq_resumo_ins_mat_w, tb_seq_pos_estab_tx_ins_mat_w, tb_seq_prest_pgto_ins_mat_w, tb_vl_taxa_ins_mat_w, tb_seq_conta_ins_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_seq_resumo_ins_mat_w := _ora2pg_r.tb_seq_resumo_p; tb_seq_pos_estab_tx_ins_mat_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_seq_prest_pgto_ins_mat_w := _ora2pg_r.tb_seq_prest_pgto_p; tb_vl_taxa_ins_mat_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_mat_w := _ora2pg_r.tb_seq_conta_p;
								i_ins_mat_w := 0;
							
							else
								i_ins_mat_w := i_ins_mat_w + 1;
							end if;
						
						else
				
							tb_cta_contab_taxa_upd_mat_w(i_upd_mat_w)  	:= r_c01_w.nr_seq_conta_resumo;	
							tb_vl_contab_taxa_upd_mat_w(i_upd_mat_w)  	:= vl_contab_taxa_w;	
							tb_seq_resumo_upd_mat_w(i_upd_mat_w)		:= nr_seq_conta_contab_taxa_w;
							
							if (i_upd_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
								SELECT * FROM pls_pos_estabelecido_pck.upd_contab_tx_pos( 	tb_cta_contab_taxa_upd_mat_w, tb_vl_contab_taxa_upd_mat_w, tb_seq_resumo_upd_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_cta_contab_taxa_upd_mat_w := _ora2pg_r.tb_cta_contab_taxa_p; tb_vl_contab_taxa_upd_mat_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_seq_resumo_upd_mat_w := _ora2pg_r.tb_seq_resumo_p;
								i_upd_mat_w := 0;
							
							else
								i_upd_mat_w := i_upd_mat_w + 1;
							end if;
							
						end if;
					
					end if;
								
				end loop;
			
			end loop;
		
		end loop;
		
		--se sobrarem registros nas estruturas, persiste no banco.

		SELECT * FROM pls_pos_estabelecido_pck.ins_contab_tx_pos( 	tb_seq_resumo_ins_proc_w, tb_seq_pos_estab_tx_ins_proc_w, tb_seq_prest_pgto_ins_proc_w, tb_vl_taxa_ins_proc_w, tb_seq_conta_ins_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_seq_resumo_ins_proc_w := _ora2pg_r.tb_seq_resumo_p; tb_seq_pos_estab_tx_ins_proc_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_seq_prest_pgto_ins_proc_w := _ora2pg_r.tb_seq_prest_pgto_p; tb_vl_taxa_ins_proc_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_proc_w := _ora2pg_r.tb_seq_conta_p;
		
		SELECT * FROM pls_pos_estabelecido_pck.ins_contab_tx_pos( 	tb_seq_resumo_ins_mat_w, tb_seq_pos_estab_tx_ins_mat_w, tb_seq_prest_pgto_ins_mat_w, tb_vl_taxa_ins_mat_w, tb_seq_conta_ins_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_seq_resumo_ins_mat_w := _ora2pg_r.tb_seq_resumo_p; tb_seq_pos_estab_tx_ins_mat_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_seq_prest_pgto_ins_mat_w := _ora2pg_r.tb_seq_prest_pgto_p; tb_vl_taxa_ins_mat_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_mat_w := _ora2pg_r.tb_seq_conta_p;
					
		SELECT * FROM pls_pos_estabelecido_pck.upd_contab_tx_pos( 	tb_cta_contab_taxa_upd_proc_w, tb_vl_contab_taxa_upd_proc_w, tb_seq_resumo_upd_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_cta_contab_taxa_upd_proc_w := _ora2pg_r.tb_cta_contab_taxa_p; tb_vl_contab_taxa_upd_proc_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_seq_resumo_upd_proc_w := _ora2pg_r.tb_seq_resumo_p;
					
		SELECT * FROM pls_pos_estabelecido_pck.upd_contab_tx_pos( 	tb_cta_contab_taxa_upd_mat_w, tb_vl_contab_taxa_upd_mat_w, tb_seq_resumo_upd_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_cta_contab_taxa_upd_mat_w := _ora2pg_r.tb_cta_contab_taxa_p; tb_vl_contab_taxa_upd_mat_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_seq_resumo_upd_mat_w := _ora2pg_r.tb_seq_resumo_p;

		--Percorre todas as contas selecionadas para geracao dos valores cont_beis da taxa administrativa de p_s.

		for j in tb_nr_seq_conta_pos_estab_p.first..tb_nr_seq_conta_pos_estab_p.last loop
		
			for r_c04_w in C04(tb_nr_seq_conta_pos_estab_p(j)) loop

				for r_c02_w in C02(r_c04_w.nr_seq_conta_proc,r_c04_w.nr_seq_conta_mat) loop
					
					--Existem casos que n_o tem valor liberado, por_m tem coparticipacao, ent_o o percentual de pagamento _ 1

					if (r_c04_w.vl_lib_pagamento <> 0) then
						/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c04_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
					else
						pr_pagamento_liberado_w	:= 1;
					end if;
					
					/* Aplicar o percentual obtido sobre o valor de coparticipacao */


					vl_contab_taxa_w	:= round((r_c02_w.vl_taxa_manutencao * pr_pagamento_liberado_w)::numeric,2);
					
					if (r_c02_w.ie_tipo_item = 'P') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_proc_tx_ctb
						where	nr_seq_conta		= tb_nr_seq_conta_pos_estab_p(j)
						and	nr_seq_proc_pos_tx	= r_c02_w.nr_seq_conta_estab_taxa;
										
						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						
							tb_seq_pos_estab_tx_ins_proc_w(i_ins_proc_w)	:= r_c02_w.nr_seq_conta_estab_taxa;
							tb_vl_taxa_ins_proc_w(i_ins_proc_w)		:= vl_contab_taxa_w;
							tb_seq_conta_ins_proc_w(i_ins_proc_w)		:= tb_nr_seq_conta_pos_estab_p(j);	
							
							if (i_ins_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
								SELECT * FROM pls_pos_estabelecido_pck.ins_atualiza_vl_tx_contab( 	tb_seq_pos_estab_tx_ins_proc_w, tb_vl_taxa_ins_proc_w, tb_seq_conta_ins_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_seq_pos_estab_tx_ins_proc_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_vl_taxa_ins_proc_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_proc_w := _ora2pg_r.tb_seq_conta_p;
												
								i_ins_proc_w := 0;
							else
								i_ins_proc_w := i_ins_proc_w + 1;
							end if;							
						else
							
							tb_vl_contab_taxa_upd_proc_w(i_upd_proc_w)	:= vl_contab_taxa_w;
							tb_cta_contab_taxa_upd_proc_w(i_upd_proc_w)	:= nr_seq_conta_contab_taxa_w;
							
							if (i_upd_proc_w > pls_util_cta_pck.qt_registro_transacao_w) then
						
								SELECT * FROM pls_pos_estabelecido_pck.upd_atualiza_vl_tx_contab( 	tb_vl_contab_taxa_upd_proc_w, tb_cta_contab_taxa_upd_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_vl_contab_taxa_upd_proc_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_cta_contab_taxa_upd_proc_w := _ora2pg_r.tb_cta_contab_taxa_p;
								i_upd_proc_w := 0;
							else
								i_upd_proc_w := i_upd_proc_w + 1;
							end if;
							
						end if;
					else
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_mat_tx_ctb
						where	nr_seq_conta		= tb_nr_seq_conta_pos_estab_p(j)
						and	nr_seq_pos_mat_tx	= r_c02_w.nr_seq_conta_estab_taxa;
						
						if ( coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						
							tb_seq_pos_estab_tx_ins_mat_w(i_ins_mat_w)	:= r_c02_w.nr_seq_conta_estab_taxa;
							tb_vl_taxa_ins_mat_w(i_ins_mat_w)		:= vl_contab_taxa_w;
							tb_seq_conta_ins_mat_w(i_ins_mat_w)		:= tb_nr_seq_conta_pos_estab_p(j);
							
							if (i_ins_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
								SELECT * FROM pls_pos_estabelecido_pck.ins_atualiza_vl_tx_contab( 	tb_seq_pos_estab_tx_ins_mat_w, tb_vl_taxa_ins_mat_w, tb_seq_conta_ins_mat_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_seq_pos_estab_tx_ins_mat_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_vl_taxa_ins_mat_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_mat_w := _ora2pg_r.tb_seq_conta_p;
								i_ins_mat_w := 0;
							else
								i_ins_mat_w := i_ins_mat_w + 1;
							end if;
							
						else
						
							tb_vl_contab_taxa_upd_mat_w(i_upd_mat_w)	:= vl_contab_taxa_w;
							tb_cta_contab_taxa_upd_mat_w(i_upd_mat_w)	:= nr_seq_conta_contab_taxa_w;
							
							if (i_upd_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
					
								SELECT * FROM pls_pos_estabelecido_pck.upd_atualiza_vl_tx_contab( 	tb_vl_contab_taxa_upd_mat_w, tb_cta_contab_taxa_upd_mat_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_vl_contab_taxa_upd_mat_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_cta_contab_taxa_upd_mat_w := _ora2pg_r.tb_cta_contab_taxa_p;
								i_upd_mat_w := 0;
							else
								i_upd_mat_w := i_upd_mat_w + 1;
							end if;
							
						end if;
						
					end if;
				
				end loop;

			end loop;
		end loop; --fim do loop pelas contas. --> tb_nr_seq_conta_pos_estab_p

		--Sobrando registros, manda para o banco.

		SELECT * FROM pls_pos_estabelecido_pck.ins_atualiza_vl_tx_contab( 	tb_seq_pos_estab_tx_ins_proc_w, tb_vl_taxa_ins_proc_w, tb_seq_conta_ins_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_seq_pos_estab_tx_ins_proc_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_vl_taxa_ins_proc_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_proc_w := _ora2pg_r.tb_seq_conta_p;
						
		SELECT * FROM pls_pos_estabelecido_pck.upd_atualiza_vl_tx_contab( 	tb_vl_contab_taxa_upd_proc_w, tb_cta_contab_taxa_upd_proc_w, nm_usuario_p, 'P') INTO STRICT _ora2pg_r;
  	tb_vl_contab_taxa_upd_proc_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_cta_contab_taxa_upd_proc_w := _ora2pg_r.tb_cta_contab_taxa_p;
		
		SELECT * FROM pls_pos_estabelecido_pck.ins_atualiza_vl_tx_contab( 	tb_seq_pos_estab_tx_ins_mat_w, tb_vl_taxa_ins_mat_w, tb_seq_conta_ins_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_seq_pos_estab_tx_ins_mat_w := _ora2pg_r.tb_seq_pos_estab_tx_p; tb_vl_taxa_ins_mat_w := _ora2pg_r.tb_vl_taxa_p; tb_seq_conta_ins_mat_w := _ora2pg_r.tb_seq_conta_p;
						
		SELECT * FROM pls_pos_estabelecido_pck.upd_atualiza_vl_tx_contab( 	tb_vl_contab_taxa_upd_mat_w, tb_cta_contab_taxa_upd_mat_w, nm_usuario_p, 'M') INTO STRICT _ora2pg_r;
  	tb_vl_contab_taxa_upd_mat_w := _ora2pg_r.tb_vl_contab_taxa_p; tb_cta_contab_taxa_upd_mat_w := _ora2pg_r.tb_cta_contab_taxa_p;

		--Percorre todas as contas selecionadas para geracao dos valores cont_beis da taxa administrativa de p_s.

		for j in tb_nr_seq_conta_pos_estab_p.first..tb_nr_seq_conta_pos_estab_p.last loop
		
			--Ajuste de diverg_ncia de valores	

			for r_c03_w in C03_mat(tb_nr_seq_conta_pos_estab_p(j)) loop
				begin
				select	sum(vl_taxa_manutencao)
				into STRICT	vl_taxa_manutencao_w
				from	pls_conta_pos_mat_tx
				where	nr_sequencia	= r_c03_w.nr_seq_pos_mat_tx;
				
				if ( coalesce(vl_taxa_manutencao_w,0)	!= coalesce(r_c03_w.vl_contab,0)) then
					
					vl_diferenca_w	:= coalesce(vl_taxa_manutencao_w,0) - coalesce(r_c03_w.vl_contab,0);
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_conta_contab_taxa_w
					from	pls_conta_pos_mat_tx_ctb
					where	nr_seq_pos_mat_tx	= r_c03_w.nr_seq_pos_mat_tx
					and	vl_taxa			> vl_diferenca_w;
					
					if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_mat_tx_ctb
						where	nr_seq_pos_mat_tx	= r_c03_w.nr_seq_pos_mat_tx;
					end if;
					
					update	pls_conta_pos_mat_tx_ctb
					set 	vl_taxa		= coalesce(vl_taxa,0) + vl_diferenca_w
					where	nr_sequencia 	= nr_seq_conta_contab_taxa_w;
					
					select	sum(vl_taxa)
					into STRICT	vl_validacao_w
					from	pls_conta_pos_mat_tx_ctb
					where	nr_seq_pos_mat_tx	= r_c03_w.nr_seq_pos_mat_tx;
					
					if (coalesce(vl_taxa_manutencao_w,0)	!= coalesce(vl_validacao_w,0)) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(378414,	';VL_ADIC=' || vl_taxa_manutencao_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
												';NR_SEQ_CONTA='||tb_nr_seq_conta_pos_estab_p(j)||';NR_SEQ_POS_ESTAB_TAXA='||r_c03_w.nr_seq_pos_mat_tx);

					end if;
				end if;
				
				end;
			end loop;	
			
			--Ajuste de diverg_ncia de valores em procedimentos

			for r_c03_proc_w in C03_proc(tb_nr_seq_conta_pos_estab_p(j)) loop
				begin
				select	sum(vl_taxa_manutencao)
				into STRICT	vl_taxa_manutencao_w
				from	pls_conta_pos_proc_tx
				where	nr_sequencia	= r_c03_proc_w.nr_seq_proc_pos_tx;
				
				if ( coalesce(vl_taxa_manutencao_w,0)	!= coalesce(r_c03_proc_w.vl_contab,0)) then
					
					vl_diferenca_w	:= coalesce(vl_taxa_manutencao_w,0) - coalesce(r_c03_proc_w.vl_contab,0);
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_conta_contab_taxa_w
					from	pls_conta_pos_proc_tx_ctb
					where	nr_seq_proc_pos_tx	= r_c03_proc_w.nr_seq_proc_pos_tx
					and	vl_taxa			> vl_diferenca_w;
					
					if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_taxa_w
						from	pls_conta_pos_proc_tx_ctb
						where	nr_seq_proc_pos_tx	= r_c03_proc_w.nr_seq_proc_pos_tx;
					end if;
					
					update	pls_conta_pos_proc_tx_ctb
					set 	vl_taxa		= coalesce(vl_taxa,0) + vl_diferenca_w
					where	nr_sequencia 	= nr_seq_conta_contab_taxa_w;
					
					select	sum(vl_taxa)
					into STRICT	vl_validacao_w
					from	pls_conta_pos_proc_tx_ctb
					where	nr_seq_proc_pos_tx	= r_c03_proc_w.nr_seq_proc_pos_tx;
					
					if (coalesce(vl_taxa_manutencao_w,0)	!= coalesce(vl_validacao_w,0)) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(378414,	';VL_ADIC=' || vl_taxa_manutencao_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
												';NR_SEQ_CONTA='||tb_nr_seq_conta_pos_estab_p(j)||';NR_SEQ_POS_ESTAB_TAXA='||r_c03_proc_w.nr_seq_proc_pos_tx);

					end if;
				end if;
				
				end;
			end loop;		
		end loop; --fim do loop das contas
				
		commit;
	end if;
			
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.gerar_contab_taxa_adm_pos ( tb_nr_seq_conta_pos_estab_p pls_util_cta_pck.t_number_table, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
