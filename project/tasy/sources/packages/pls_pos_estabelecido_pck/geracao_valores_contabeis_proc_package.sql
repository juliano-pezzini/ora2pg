-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

		
--Rotina respons_vel pela geracao de valores cont_beis de p_s-estabelecido.		



CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.geracao_valores_contabeis_proc (nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


_ora2pg_r RECORD;
vl_lib_taxa_co_w		pls_conta_pos_proc.vl_lib_taxa_co%type;
vl_lib_taxa_material_w		pls_conta_pos_proc.vl_lib_taxa_material%type;
vl_lib_taxa_servico_w		pls_conta_pos_proc.vl_lib_taxa_servico%type;
vl_medico_w			pls_conta_pos_proc.vl_medico%type;
vl_custo_operacional_w		pls_conta_pos_proc.vl_custo_operacional%type;
vl_materiais_w			pls_conta_pos_proc.vl_materiais%type;
nr_seq_participante_w		pls_conta_medica_resumo.nr_seq_participante%type;
vl_participante_w		pls_conta_pos_proc_part.vl_participante_pos%type;
nr_seq_conta_contab_w		pls_conta_pos_proc_contab.nr_sequencia%type;
vl_participante_pos_w		pls_conta_pos_proc_part.vl_participante_pos%type;
vl_admin_partic_w		pls_conta_pos_proc_part.vl_administracao%type;
qt_pos_estab_partic_w		integer := 0;
vl_contab_pos_estab_part_w	double precision;
pr_pagamento_liberado_w		double precision;
tb_nr_seq_conta_ins         	pls_util_cta_pck.t_number_table;	
tb_nr_seq_conta_proc_pos_ins	pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_resumo_ins  	pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_pgto_ins	pls_util_cta_pck.t_number_table;
tb_vl_tx_mat_ins   		pls_util_cta_pck.t_number_table;
tb_vl_materiais_ins  	        pls_util_cta_pck.t_number_table;
tb_vl_tx_co_ins   		pls_util_cta_pck.t_number_table;
tb_vl_co_ins  	        	pls_util_cta_pck.t_number_table;
tb_vl_tx_servico_ins   		pls_util_cta_pck.t_number_table;
tb_vl_servico_ins  	        pls_util_cta_pck.t_number_table;
tb_dt_mes_w			pls_util_cta_pck.t_date_table;
tb_nr_sequencia_upd        	pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_upd         	pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_proc_pos_upd	pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_resumo_upd  	pls_util_cta_pck.t_number_table;
tb_nr_seq_prestador_pgto_upd	pls_util_cta_pck.t_number_table;
tb_vl_administracao_upd    	pls_util_cta_pck.t_number_table;
tb_vl_materiais_upd  		pls_util_cta_pck.t_number_table;	
tb_vl_tx_co_upd   		pls_util_cta_pck.t_number_table;
tb_vl_co_upd  	        	pls_util_cta_pck.t_number_table;
tb_vl_tx_servico_upd   		pls_util_cta_pck.t_number_table;
tb_vl_servico_upd  	        pls_util_cta_pck.t_number_table;
tb_seq_pos_proc_w		pls_util_cta_pck.t_number_table;
tb_upd_vl_prov_w		pls_util_cta_pck.t_number_table;
tb_dt_mes_comp_upd_w		pls_util_cta_pck.t_date_table;
qt_registro_w			integer := 0;
i				integer := 0;
i_upd				integer := 0;

C00 CURSOR FOR
	SELECT	nr_seq_conta_proc,
		nr_seq_conta,
		dt_mes_competencia,
		nr_seq_ajuste_fat,
		nr_seq_proc_princ,
		(SELECT nr_seq_conta from pls_conta_proc where nr_sequencia = proc.nr_seq_proc_princ) nr_seq_conta_refat
	from	w_pls_conta_pos_proc proc
	where	proc.ie_gera_valor_pos_estab in ('S', 'SB');

--Se n_o for conta oriunda de ajuste de regaturamento, busca registro no resumo com pr_prio seq_mat, sen_o buscar_ do registro refer_ncia

C01 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_ajuste_fat_pc	w_pls_conta_pos_proc.nr_seq_ajuste_fat%type,
		nr_seq_proc_princ_pc	w_pls_conta_pos_proc.nr_seq_proc_princ%type,
		nr_seq_conta_refat_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_liberado) vl_lib_pagamento,
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item		
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc 
	and 	a.nr_seq_conta 		= nr_seq_conta_pc 
	and	a.ie_tipo_item 		!= 'I'
	and	a.ie_situacao 		= 'A'
	and	coalesce(nr_seq_ajuste_fat_pc::text, '') = ''
	and	((a.vl_lib_original > 0) or (ie_tipo_item in ('M','P')))
	group by a.nr_seq_conta,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto
	
union all

	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_liberado) vl_lib_pagamento,      
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item		
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta_proc	= nr_seq_proc_princ_pc 
	and 	a.nr_seq_conta 		= nr_seq_conta_refat_pc 
	and	a.ie_tipo_item 		!= 'I'
	and	a.ie_situacao 		= 'A'
	and 	(nr_seq_ajuste_fat_pc IS NOT NULL AND nr_seq_ajuste_fat_pc::text <> '')
	and	((a.vl_lib_original > 0) or (ie_tipo_item in ('M','P')))
	group by a.nr_seq_conta,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto;
		
C02 CURSOR(	nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type)FOR
	SELECT	a.nr_sequencia,
		(a.vl_materiais + a.vl_custo_operacional + a.vl_medico) vl_beneficiario,
		coalesce((SELECT	sum(x.vl_liberado)
		from	pls_conta_medica_resumo x
		where	x.nr_seq_conta		= b.nr_seq_conta
		and	x.nr_seq_conta_proc 	= b.nr_seq_conta_proc
		and	x.ie_situacao 		= 'A'
		and	x.ie_tipo_item 		!= 'I'), b.vl_prestador_pag) vl_liberado,
		(coalesce(a.vl_lib_taxa_co,0)+coalesce(a.vl_lib_taxa_material,0) + coalesce(a.vl_lib_taxa_servico,0)) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
		coalesce(a.vl_materiais,0) vl_materiais,
		coalesce(a.vl_provisao, 0) vl_provisao
	from	pls_conta_pos_proc a,
		w_pls_conta_pos_proc b
	where	a.nr_seq_conta_proc	= b.nr_seq_conta_proc
	and	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc;
	
C03 CURSOR(	nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type) FOR
	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		b.vl_prestador_pag vl_lib_pagamento,
		a.nr_seq_conta_proc nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_pos_proc a,
		w_pls_conta_pos_proc b
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc
	and 	a.nr_seq_conta_proc	= b.nr_seq_conta_proc
	and	b.ie_tipo_conta	in ('I','D')
	and	b.ie_status_proc	!= 'M'
	
union all

	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		b.vl_prestador_pag vl_lib_pagamento,
		a.nr_seq_conta_proc nr_seq_conta_proc,        
		b.nr_seq_prestador_exec nr_seq_prestador_pgto
	from	pls_conta_pos_proc a,
		w_pls_conta_pos_proc b
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc
	and 	a.nr_seq_conta_proc	= b.nr_seq_conta_proc
	and	b.ie_status_proc	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_proc 	= a.nr_seq_conta_proc);

BEGIN
	--Percore todos os registros de procedimentos selecionados na tabela tempor_ria para geracao de p_s-estabelecido

	for r_c00_w in C00 loop
	
		--Cursor com valores do resumo do respectivo procedimento

		for r_c01_w in C01(r_c00_w.nr_seq_conta, r_c00_w.nr_seq_conta_proc, r_c00_w.nr_seq_ajuste_fat, r_c00_w.nr_seq_proc_princ, r_c00_w.nr_seq_conta_refat) loop
		
			--Registros de procedimentos gerados na tabela de pos_estab_proc

			for r_c02_w in C02(r_c00_w.nr_seq_conta_proc) loop
			
				nr_seq_participante_w	:= null;
				vl_lib_taxa_co_w	:= 0;
				vl_lib_taxa_material_w	:= 0;
				vl_lib_taxa_servico_w	:= 0;
				vl_medico_w		:= 0;
				vl_custo_operacional_w	:= 0;
				vl_materiais_w		:= 0;
				
				--Se n_o for conta oriunda de ajuste de regaturamento, busca registro no resumo com pr_prio seq_mat, sen_o buscar_ do registro refer_ncia

				if (coalesce(r_c00_w.nr_seq_ajuste_fat::text, '') = '') then
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_conta_medica_resumo
					where	nr_seq_conta_proc	= r_c00_w.nr_seq_conta_proc
					and	nr_seq_conta		= r_c00_w.nr_seq_conta
					and	nr_seq_prestador_pgto	!= r_c01_w.nr_seq_prestador_pgto
					and	ie_tipo_item		!= 'I'
					and	ie_situacao		= 'A'
					--and	nr_seq_exame_coleta	is null

					and	vl_liberado		> 0;
				else	
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_conta_medica_resumo
					where	nr_seq_conta_proc	= r_c00_w.nr_seq_proc_princ
					and	nr_seq_conta		= r_c01_w.nr_seq_conta
					and	nr_seq_prestador_pgto	!= r_c01_w.nr_seq_prestador_pgto
					and	ie_tipo_item		!= 'I'
					and	ie_situacao		= 'A'
					--and	nr_seq_exame_coleta	is null

					and	vl_liberado		> 0;
				end if;
				
				--obtencao dos valores quando todos foram agrupados em apenas um registro contabil

				if (qt_registro_w	= 0) then
					vl_contab_pos_estab_part_w := 0;
					
					--Existem casos que n_o tem valor liberado, por_m tem p_s-estabelecido, ent_o o percentual de pagamento _ 1

					if (r_c01_w.vl_lib_pagamento <> 0) and (r_c02_w.vl_liberado <> 0 ) then
						/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


						pr_pagamento_liberado_w	:= round((dividir_sem_round( r_c01_w.vl_lib_pagamento, r_c02_w.vl_liberado))::numeric,10);
					else
						pr_pagamento_liberado_w	:= 1;
					end if;
					
					/* Aplicar o percentual obtido sobre o valor p_s estabelecido */


					vl_lib_taxa_co_w		:= round((r_c02_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_material_w		:= round((r_c02_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_servico_w		:= round((r_c02_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
					vl_medico_w			:= round((r_c02_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
					vl_custo_operacional_w		:= round((r_c02_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
					vl_materiais_w			:= round((r_c02_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
					vl_contab_pos_estab_part_w	:= ( vl_medico_w + vl_lib_taxa_servico_w );
			
					if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') then
											
						select  sum(vl_participante_pos)
						into STRICT	vl_participante_w
						from	pls_conta_pos_proc_part
						where	nr_seq_proc_partic	= r_c01_w.nr_seq_participante;
						
						if ( vl_participante_w	= vl_contab_pos_estab_part_w ) or ( vl_participante_w	= r_c02_w.vl_beneficiario ) then
							nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
						end if;
					end if;
					
				--agrupamento dos registros quando estes foram agrupados em mais de um registro contabil isto se faz necess_rio devido aos registros poderem ser aplicados em mais de um evento de faturamento

				elsif (qt_registro_w	= 1) then
					--para os valores de participante n_o pode haver valor de co e mat para n_o haver problema na contabilizacao e geracao do faturamento

					if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') or (r_c01_w.ie_tipo_item	= 'C') then
						
						vl_lib_taxa_co_w	:= 0;
						vl_lib_taxa_material_w	:= 0;
						vl_lib_taxa_servico_w	:= r_c02_w.vl_lib_taxa_servico;
						vl_medico_w		:= r_c02_w.vl_medico;
						vl_custo_operacional_w	:= 0;
						vl_materiais_w		:= 0;
						nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
					else
						vl_lib_taxa_co_w	:= r_c02_w.vl_lib_taxa_co;
						vl_lib_taxa_material_w	:= r_c02_w.vl_lib_taxa_material;
						vl_lib_taxa_servico_w	:= 0;
						vl_medico_w		:= 0;
						vl_custo_operacional_w	:= r_c02_w.vl_custo_operacional;
						vl_materiais_w		:= r_c02_w.vl_materiais;

					end if;
				--agrupamento dos registros quando estes foram agrupados em mais de um registro contabil isto se faz necess_rio devido aos registros poderem ser aplicados em mais de um evento de faturamento	

				else
					--para os valores de participante n_o pode haver valor de co e mat para n_o haver problema na contabilizacao e geracao do faturamento

					if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') then
					
						select 	count(1)
						into STRICT	qt_pos_estab_partic_w
						from	pls_conta_pos_proc_part
						where	nr_seq_proc_partic = r_c01_w.nr_seq_participante;
					
						if (qt_pos_estab_partic_w > 0) then
							--Existem casos que n_o tem valor liberado, por_m tem p_s-estabelecido, ent_o o percentual de pagamento _ 1

							select (coalesce(vl_participante_pos,0) -  coalesce(vl_administracao,0)),
								coalesce(vl_administracao,0)
							into STRICT	vl_participante_pos_w,
								vl_admin_partic_w
							from	pls_conta_pos_proc_part
							where	nr_seq_proc_partic = r_c01_w.nr_seq_participante;
						else
							vl_participante_pos_w	:= 0;
							vl_admin_partic_w	:= 0;
						end if;
						
						if ( vl_participante_pos_w	> 0) then
						
							vl_lib_taxa_servico_w	:= round((vl_admin_partic_w)::numeric,2);
							vl_medico_w		:= round((vl_participante_pos_w)::numeric,2);
							vl_lib_taxa_co_w	:= 0;
							vl_lib_taxa_material_w	:= 0;
							vl_custo_operacional_w	:= 0;
							vl_materiais_w		:= 0;
						else
							if (r_c01_w.vl_lib_pagamento <> 0) then
								/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


								pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_hm,r_c02_w.vl_medico))::numeric,10);
							else
								pr_pagamento_liberado_w	:= 1;
							end if;
						
							/* Aplicar o percentual obtido sobre o valor p_s estabelecido */


							vl_lib_taxa_servico_w	:= round((r_c02_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
							vl_medico_w		:= round((r_c02_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
							vl_lib_taxa_co_w	:= 0;
							vl_lib_taxa_material_w	:= 0;
							vl_custo_operacional_w	:= 0;
							vl_materiais_w		:= 0;
						end if;
						
						nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
					else
						--Existem casos que n_o tem valor liberado, por_m tem p_s-estabelecido, ent_o o percentual de pagamento _ 1

						if (r_c01_w.vl_lib_pagamento <> 0) then
							/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


							pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_co_pag, r_c02_w.vl_custo_operacional))::numeric,10);
						else
							pr_pagamento_liberado_w	:= 1;
						end if;
						
						vl_lib_taxa_co_w	:= round((r_c02_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
						vl_custo_operacional_w	:= round((r_c02_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
						
						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_materiais_pag, r_c02_w.vl_materiais))::numeric,10);
						
						vl_lib_taxa_material_w	:= round((r_c02_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
						vl_materiais_w		:= round((r_c02_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
						vl_lib_taxa_servico_w	:= 0;
						vl_medico_w		:= 0;
					end if;
				end if;
				
				nr_seq_conta_contab_w	:= null;

				select	max(t.nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_proc_contab	t,
					pls_conta_pos_proc		a
				where	t.nr_seq_conta		= r_c00_w.nr_seq_conta
				and	a.nr_sequencia		= t.nr_seq_conta_pos_proc
				and	t.nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo;
				
				if (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c00_w.nr_seq_conta_proc IS NOT NULL AND r_c00_w.nr_seq_conta_proc::text <> '') then
					
					select	max(t.nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_proc_contab	t,
						pls_conta_pos_proc		a
					where	t.nr_seq_conta		= r_c00_w.nr_seq_conta
					and	a.nr_seq_conta_proc	= r_c00_w.nr_seq_conta_proc
					and	a.nr_sequencia		= t.nr_seq_conta_pos_proc
					and	t.nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
									
				end if;
				
				if ( coalesce(nr_seq_conta_contab_w::text, '') = '') then
					tb_nr_seq_conta_ins(i)         	:= r_c00_w.nr_seq_conta;
					tb_nr_seq_conta_proc_pos_ins(i)	:= r_c02_w.nr_sequencia;
					tb_nr_seq_conta_resumo_ins(i)  	:= r_c01_w.nr_seq_conta_resumo;
					tb_nr_seq_prestador_pgto_ins(i)	:= r_c01_w.nr_seq_prestador_pgto;
					tb_vl_tx_mat_ins(i)     	:= vl_lib_taxa_material_w;
					tb_vl_materiais_ins(i)  	:= vl_materiais_w;
					tb_vl_tx_co_ins(i)     		:= vl_lib_taxa_co_w;
					tb_vl_co_ins(i)  		:= vl_custo_operacional_w;
					tb_vl_tx_servico_ins(i)     	:= vl_lib_taxa_servico_w;
					tb_vl_servico_ins(i)  		:= vl_medico_w;
					tb_dt_mes_w(i)			:= r_c00_w.dt_mes_competencia;
				
					select 	nextval('pls_conta_pos_proc_contab_seq')
					into STRICT	tb_seq_pos_proc_w(i)
					;
				
					if (i > pls_util_cta_pck.qt_registro_transacao_w) then
					
						SELECT * FROM pls_pos_estabelecido_pck.inserir_reg_contabeis_proc( 	tb_nr_seq_conta_ins, tb_nr_seq_conta_proc_pos_ins, tb_nr_seq_conta_resumo_ins, tb_nr_seq_prestador_pgto_ins, tb_vl_tx_mat_ins, tb_vl_materiais_ins, tb_vl_tx_co_ins, tb_vl_co_ins, tb_vl_tx_servico_ins, tb_vl_servico_ins, tb_dt_mes_w, tb_seq_pos_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
  	tb_nr_seq_conta_ins := _ora2pg_r.tb_nr_seq_conta_ins_p; tb_nr_seq_conta_proc_pos_ins := _ora2pg_r.tb_nr_seq_conta_proc_pos_ins_p; tb_nr_seq_conta_resumo_ins := _ora2pg_r.tb_nr_seq_conta_resumo_ins_p; tb_nr_seq_prestador_pgto_ins := _ora2pg_r.tb_nr_seq_prestador_pgto_ins_p; tb_vl_tx_mat_ins := _ora2pg_r.tb_vl_administracao_ins_p; tb_vl_materiais_ins := _ora2pg_r.tb_vl_materiais_ins_p; tb_vl_tx_co_ins := _ora2pg_r.tb_vl_tx_co_ins_p; tb_vl_co_ins := _ora2pg_r.tb_vl_co_ins_p; tb_vl_tx_servico_ins := _ora2pg_r.tb_vl_tx_servico_ins_p; tb_vl_servico_ins := _ora2pg_r.tb_vl_servico_ins_p; tb_dt_mes_w := _ora2pg_r.tb_dt_mes_p; tb_seq_pos_proc_w := _ora2pg_r.tb_seq_pos_proc;
						
						i := 0;
					else
						i := i + 1;
					end if;
					
				else
					tb_nr_sequencia_upd(i_upd)         	:= nr_seq_conta_contab_w;
					tb_nr_seq_conta_upd(i_upd)         	:= r_c00_w.nr_seq_conta;
					tb_nr_seq_conta_proc_pos_upd(i_upd)	:= r_c02_w.nr_sequencia;
					tb_nr_seq_conta_resumo_upd(i_upd)	:= r_c01_w.nr_seq_conta_resumo;
					tb_nr_seq_prestador_pgto_upd(i_upd)	:= r_c01_w.nr_seq_prestador_pgto;
					tb_vl_administracao_upd(i_upd)     	:= vl_lib_taxa_material_w;
					tb_vl_materiais_upd(i_upd)  		:= vl_materiais_w;
					tb_vl_tx_co_upd(i_upd)   		:= vl_lib_taxa_co_w;
					tb_vl_co_upd(i_upd) 			:= vl_custo_operacional_w;
					tb_vl_tx_servico_upd(i_upd)		:= vl_lib_taxa_servico_w;
					tb_vl_servico_upd(i_upd)		:= vl_medico_w;
					tb_dt_mes_comp_upd_w(i_upd)		:= r_c00_w.dt_mes_competencia;
					tb_upd_vl_prov_w(i_upd)			:= r_c02_w.vl_provisao;
					
					if (i_upd > pls_util_cta_pck.qt_registro_transacao_w) then
					
						SELECT * FROM pls_pos_estabelecido_pck.atualizar_reg_contabeis_proc(	tb_nr_sequencia_upd, tb_nr_seq_conta_upd, tb_nr_seq_conta_proc_pos_upd, tb_nr_seq_conta_resumo_upd, tb_nr_seq_prestador_pgto_upd, tb_vl_administracao_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_upd_vl_prov_w, tb_dt_mes_comp_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_sequencia_upd := _ora2pg_r.tb_nr_sequencia_upd_p; tb_nr_seq_conta_upd := _ora2pg_r.tb_nr_seq_conta_upd_p; tb_nr_seq_conta_proc_pos_upd := _ora2pg_r.tb_nr_seq_conta_proc_pos_upd_p; tb_nr_seq_conta_resumo_upd := _ora2pg_r.tb_nr_seq_conta_resumo_upd_p; tb_nr_seq_prestador_pgto_upd := _ora2pg_r.tb_nr_seq_prestador_pgto_upd_p; tb_vl_administracao_upd := _ora2pg_r.tb_vl_administracao_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_upd_vl_prov_w := _ora2pg_r.tb_vl_provisao_upd_p; tb_dt_mes_comp_upd_w := _ora2pg_r.dt_mes_competencia_p;
						i_upd := 0;
					else
						i_upd := i + 1;
					end if;
				end if;
				
			end loop; --fim cursor02
			
		end loop;--Fim cursor01
	
	end loop;--fim cursor00
	
	
	SELECT * FROM pls_pos_estabelecido_pck.inserir_reg_contabeis_proc( 	tb_nr_seq_conta_ins, tb_nr_seq_conta_proc_pos_ins, tb_nr_seq_conta_resumo_ins, tb_nr_seq_prestador_pgto_ins, tb_vl_tx_mat_ins, tb_vl_materiais_ins, tb_vl_tx_co_ins, tb_vl_co_ins, tb_vl_tx_servico_ins, tb_vl_servico_ins, tb_dt_mes_w, tb_seq_pos_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
  	tb_nr_seq_conta_ins := _ora2pg_r.tb_nr_seq_conta_ins_p; tb_nr_seq_conta_proc_pos_ins := _ora2pg_r.tb_nr_seq_conta_proc_pos_ins_p; tb_nr_seq_conta_resumo_ins := _ora2pg_r.tb_nr_seq_conta_resumo_ins_p; tb_nr_seq_prestador_pgto_ins := _ora2pg_r.tb_nr_seq_prestador_pgto_ins_p; tb_vl_tx_mat_ins := _ora2pg_r.tb_vl_administracao_ins_p; tb_vl_materiais_ins := _ora2pg_r.tb_vl_materiais_ins_p; tb_vl_tx_co_ins := _ora2pg_r.tb_vl_tx_co_ins_p; tb_vl_co_ins := _ora2pg_r.tb_vl_co_ins_p; tb_vl_tx_servico_ins := _ora2pg_r.tb_vl_tx_servico_ins_p; tb_vl_servico_ins := _ora2pg_r.tb_vl_servico_ins_p; tb_dt_mes_w := _ora2pg_r.tb_dt_mes_p; tb_seq_pos_proc_w := _ora2pg_r.tb_seq_pos_proc;
	
	SELECT * FROM pls_pos_estabelecido_pck.atualizar_reg_contabeis_proc(	tb_nr_sequencia_upd, tb_nr_seq_conta_upd, tb_nr_seq_conta_proc_pos_upd, tb_nr_seq_conta_resumo_upd, tb_nr_seq_prestador_pgto_upd, tb_vl_administracao_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_upd_vl_prov_w, tb_dt_mes_comp_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_sequencia_upd := _ora2pg_r.tb_nr_sequencia_upd_p; tb_nr_seq_conta_upd := _ora2pg_r.tb_nr_seq_conta_upd_p; tb_nr_seq_conta_proc_pos_upd := _ora2pg_r.tb_nr_seq_conta_proc_pos_upd_p; tb_nr_seq_conta_resumo_upd := _ora2pg_r.tb_nr_seq_conta_resumo_upd_p; tb_nr_seq_prestador_pgto_upd := _ora2pg_r.tb_nr_seq_prestador_pgto_upd_p; tb_vl_administracao_upd := _ora2pg_r.tb_vl_administracao_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_upd_vl_prov_w := _ora2pg_r.tb_vl_provisao_upd_p; tb_dt_mes_comp_upd_w := _ora2pg_r.dt_mes_competencia_p;
	
	i := 0;
	i_upd := 0;
		
	--Percore todos os registros de procedimentos selecionados na tabela tempor_ria para geracao de p_s-estabelecido

	for r_c00_w in C00 loop
		
		
		for r_c03_w in C03(r_c00_w.nr_seq_conta_proc) loop
		
			--Registros de procedimentos gerados na tabela de pos_estab_proc

			for r_c02_w in C02(r_c03_w.nr_seq_conta_proc) loop
				
				nr_seq_conta_contab_w	:= null;
				
				--Existem casos que n_o tem valor liberado, por_m tem p_s-estabelecido, ent_o o percentual de pagamento _ 1

				if (r_c03_w.vl_lib_pagamento <> 0) then
					/* Obter o percentual do valor pago em relacao ao liberado do item da conta m_dica */


					pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c03_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
				else
					pr_pagamento_liberado_w	:= 1;
				end if;
				
				/* Aplicar o percentual obtido sobre o valor p_s estabelecido */


				vl_lib_taxa_co_w	:= round((r_c02_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
				vl_lib_taxa_material_w	:= round((r_c02_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
				vl_lib_taxa_servico_w	:= round((r_c02_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
				vl_medico_w		:= round((r_c02_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
				vl_custo_operacional_w	:= round((r_c02_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
				vl_materiais_w		:= round((r_c02_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
				
				if (r_c03_w.nr_seq_conta_proc IS NOT NULL AND r_c03_w.nr_seq_conta_proc::text <> '') then
					
					select	max(t.nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_proc_contab	t,
						pls_conta_pos_proc		a
					where	t.nr_seq_conta		= r_c03_w.nr_seq_conta
					and	a.nr_sequencia		= t.nr_seq_conta_pos_proc
					and	a.nr_seq_conta_proc 	= r_c03_w.nr_seq_conta_proc;
					
				end if;
				
				if ( coalesce(nr_seq_conta_contab_w::text, '') = '') then	
					tb_nr_seq_conta_ins(i)         	:= r_c03_w.nr_seq_conta;
					tb_nr_seq_conta_proc_pos_ins(i)	:= r_c02_w.nr_sequencia;
					tb_nr_seq_conta_resumo_ins(i)  	:= r_c03_w.nr_seq_conta_resumo;
					tb_nr_seq_prestador_pgto_ins(i)	:= r_c03_w.nr_seq_prestador_pgto;
					tb_vl_tx_mat_ins(i)     	:= vl_lib_taxa_material_w;
					tb_vl_materiais_ins(i)  	:= vl_materiais_w;
					tb_vl_tx_co_ins(i)     		:= vl_lib_taxa_co_w;
					tb_vl_co_ins(i)  		:= vl_custo_operacional_w;
					tb_vl_tx_servico_ins(i)     	:= vl_lib_taxa_servico_w;
					tb_vl_servico_ins(i)  		:= vl_medico_w;
					tb_dt_mes_w(i)			:= r_c00_w.dt_mes_competencia;
				
					select 	nextval('pls_conta_pos_proc_contab_seq')
					into STRICT	tb_seq_pos_proc_w(i)
					;
				
					if (i > pls_util_cta_pck.qt_registro_transacao_w) then
					
						SELECT * FROM pls_pos_estabelecido_pck.inserir_reg_contabeis_proc( 	tb_nr_seq_conta_ins, tb_nr_seq_conta_proc_pos_ins, tb_nr_seq_conta_resumo_ins, tb_nr_seq_prestador_pgto_ins, tb_vl_tx_mat_ins, tb_vl_materiais_ins, tb_vl_tx_co_ins, tb_vl_co_ins, tb_vl_tx_servico_ins, tb_vl_servico_ins, tb_dt_mes_w, tb_seq_pos_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
  	tb_nr_seq_conta_ins := _ora2pg_r.tb_nr_seq_conta_ins_p; tb_nr_seq_conta_proc_pos_ins := _ora2pg_r.tb_nr_seq_conta_proc_pos_ins_p; tb_nr_seq_conta_resumo_ins := _ora2pg_r.tb_nr_seq_conta_resumo_ins_p; tb_nr_seq_prestador_pgto_ins := _ora2pg_r.tb_nr_seq_prestador_pgto_ins_p; tb_vl_tx_mat_ins := _ora2pg_r.tb_vl_administracao_ins_p; tb_vl_materiais_ins := _ora2pg_r.tb_vl_materiais_ins_p; tb_vl_tx_co_ins := _ora2pg_r.tb_vl_tx_co_ins_p; tb_vl_co_ins := _ora2pg_r.tb_vl_co_ins_p; tb_vl_tx_servico_ins := _ora2pg_r.tb_vl_tx_servico_ins_p; tb_vl_servico_ins := _ora2pg_r.tb_vl_servico_ins_p; tb_dt_mes_w := _ora2pg_r.tb_dt_mes_p; tb_seq_pos_proc_w := _ora2pg_r.tb_seq_pos_proc;
						
						i := 0;
					else
						i := i + 1;
					end if;
					
				else
					tb_nr_sequencia_upd(i_upd)         	:= nr_seq_conta_contab_w;
					tb_nr_seq_conta_upd(i_upd)         	:= r_c03_w.nr_seq_conta;
					tb_nr_seq_conta_proc_pos_upd(i_upd)	:= r_c02_w.nr_sequencia;
					tb_nr_seq_conta_resumo_upd(i_upd)	:= r_c03_w.nr_seq_conta_resumo;
					tb_nr_seq_prestador_pgto_upd(i_upd)	:= r_c03_w.nr_seq_prestador_pgto;
					tb_vl_administracao_upd(i_upd)		:= vl_lib_taxa_material_w;
					tb_vl_materiais_upd(i_upd)		:= vl_materiais_w;
					tb_vl_tx_co_upd(i_upd)			:= vl_lib_taxa_co_w;
					tb_vl_co_upd(i_upd) 			:= vl_custo_operacional_w;
					tb_vl_tx_servico_upd(i_upd)		:= vl_lib_taxa_servico_w;
					tb_vl_servico_upd(i_upd)         	:= vl_medico_w;
					tb_dt_mes_comp_upd_w(i_upd)		:= r_c00_w.dt_mes_competencia;
					tb_upd_vl_prov_w(i_upd)			:= r_c02_w.vl_provisao;
					
					if (i_upd > pls_util_cta_pck.qt_registro_transacao_w) then
					
						SELECT * FROM pls_pos_estabelecido_pck.atualizar_reg_contabeis_proc(	tb_nr_sequencia_upd, tb_nr_seq_conta_upd, tb_nr_seq_conta_proc_pos_upd, tb_nr_seq_conta_resumo_upd, tb_nr_seq_prestador_pgto_upd, tb_vl_administracao_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_upd_vl_prov_w, tb_dt_mes_comp_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_sequencia_upd := _ora2pg_r.tb_nr_sequencia_upd_p; tb_nr_seq_conta_upd := _ora2pg_r.tb_nr_seq_conta_upd_p; tb_nr_seq_conta_proc_pos_upd := _ora2pg_r.tb_nr_seq_conta_proc_pos_upd_p; tb_nr_seq_conta_resumo_upd := _ora2pg_r.tb_nr_seq_conta_resumo_upd_p; tb_nr_seq_prestador_pgto_upd := _ora2pg_r.tb_nr_seq_prestador_pgto_upd_p; tb_vl_administracao_upd := _ora2pg_r.tb_vl_administracao_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_upd_vl_prov_w := _ora2pg_r.tb_vl_provisao_upd_p; tb_dt_mes_comp_upd_w := _ora2pg_r.dt_mes_competencia_p;			
						i_upd := 0;
					else
						i_upd := i + 1;
					end if;
				end if;
			end loop;
		
		end loop;
	end loop;
	
	SELECT * FROM pls_pos_estabelecido_pck.inserir_reg_contabeis_proc( 	tb_nr_seq_conta_ins, tb_nr_seq_conta_proc_pos_ins, tb_nr_seq_conta_resumo_ins, tb_nr_seq_prestador_pgto_ins, tb_vl_tx_mat_ins, tb_vl_materiais_ins, tb_vl_tx_co_ins, tb_vl_co_ins, tb_vl_tx_servico_ins, tb_vl_servico_ins, tb_dt_mes_w, tb_seq_pos_proc_w, nm_usuario_p) INTO STRICT _ora2pg_r;
  	tb_nr_seq_conta_ins := _ora2pg_r.tb_nr_seq_conta_ins_p; tb_nr_seq_conta_proc_pos_ins := _ora2pg_r.tb_nr_seq_conta_proc_pos_ins_p; tb_nr_seq_conta_resumo_ins := _ora2pg_r.tb_nr_seq_conta_resumo_ins_p; tb_nr_seq_prestador_pgto_ins := _ora2pg_r.tb_nr_seq_prestador_pgto_ins_p; tb_vl_tx_mat_ins := _ora2pg_r.tb_vl_administracao_ins_p; tb_vl_materiais_ins := _ora2pg_r.tb_vl_materiais_ins_p; tb_vl_tx_co_ins := _ora2pg_r.tb_vl_tx_co_ins_p; tb_vl_co_ins := _ora2pg_r.tb_vl_co_ins_p; tb_vl_tx_servico_ins := _ora2pg_r.tb_vl_tx_servico_ins_p; tb_vl_servico_ins := _ora2pg_r.tb_vl_servico_ins_p; tb_dt_mes_w := _ora2pg_r.tb_dt_mes_p; tb_seq_pos_proc_w := _ora2pg_r.tb_seq_pos_proc;
	
	SELECT * FROM pls_pos_estabelecido_pck.atualizar_reg_contabeis_proc(	tb_nr_sequencia_upd, tb_nr_seq_conta_upd, tb_nr_seq_conta_proc_pos_upd, tb_nr_seq_conta_resumo_upd, tb_nr_seq_prestador_pgto_upd, tb_vl_administracao_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_upd_vl_prov_w, tb_dt_mes_comp_upd_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_nr_sequencia_upd := _ora2pg_r.tb_nr_sequencia_upd_p; tb_nr_seq_conta_upd := _ora2pg_r.tb_nr_seq_conta_upd_p; tb_nr_seq_conta_proc_pos_upd := _ora2pg_r.tb_nr_seq_conta_proc_pos_upd_p; tb_nr_seq_conta_resumo_upd := _ora2pg_r.tb_nr_seq_conta_resumo_upd_p; tb_nr_seq_prestador_pgto_upd := _ora2pg_r.tb_nr_seq_prestador_pgto_upd_p; tb_vl_administracao_upd := _ora2pg_r.tb_vl_administracao_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_upd_vl_prov_w := _ora2pg_r.tb_vl_provisao_upd_p; tb_dt_mes_comp_upd_w := _ora2pg_r.dt_mes_competencia_p;	
					
	i := 0;
	i_upd := 0;
	
	--Rotina que verifica e trata eventuais diverg_ncia de valor entre o vl_provis_o da pls_conta_pos_proc(tabela pai) e o somat_rio dos registros correspondentes na pls_conta_pos_proc_contab

	CALL pls_pos_estabelecido_pck.consistir_vl_prov_contab_proc(nm_usuario_p);
	
	--Faz ajuste de divergencias entre soma de valores dos registros cont_beis x p_s-estabelecido

	CALL pls_pos_estabelecido_pck.ajustar_val_diverg_contab(nm_usuario_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.geracao_valores_contabeis_proc (nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
