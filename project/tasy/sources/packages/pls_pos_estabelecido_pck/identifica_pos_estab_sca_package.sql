-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Faz leitura inicial para identificar se gera valor de p_s conf. cobertura SCA. Corresponde _ pls_gerar_valor_pos_estab_sca.



CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.identifica_pos_estab_sca ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
ie_cobrar_pos_w 	varchar(1);
i			integer := 0;
tb_item_w		pls_util_cta_pck.t_number_table;
tb_gera_w		pls_util_cta_pck.t_varchar2_table_5;
tb_congenere_w		pls_util_cta_pck.t_number_table;
qt_regra_int_w		integer := 0;
ie_tipo_congenere_w	pls_congenere.ie_tipo_congenere%type;
nr_seq_congenere_w	pls_intercambio.nr_seq_oper_congenere%type;
					
--Como primeiramente processa verificacao de itens eleg_veis para p_s, apenas verifica aqueles que n_o foram setados para gerar na etapa de identifica_item_elegivel_pos. 

--Caso ie_gera_valor_pos_estab = 'S' ou 'SB', ent_o quer dizer que na etapa anterior j_ definiu que dever_ gerar p_s para o item em quest_o, n_o necessitando verificar aqui.

C01 CURSOR FOR
	SELECT	proc.nr_sequencia,
		proc.dt_atendimento,
		coalesce(seg.dt_rescisao, to_date('01/01/3000')) 	dt_rescisao,
		pls_obter_carteira_segurado(seg.nr_sequencia) 	cd_usuario_plano,
		pls_obter_dados_conta(proc.nr_seq_conta, 'CPO') ie_calculo_preco_benef,
		(	SELECT	max(ie_preco)
			from	pls_plano
			where	nr_sequencia = sca.nr_seq_plano) ie_preco,
		coalesce(seg.nr_seq_ops_congenere, seg.nr_seq_congenere) nr_seq_congenere_seg,
		prot.nr_seq_congenere nr_seq_congenere_prot,
		seg.ie_tipo_segurado,
		seg.nr_seq_intercambio
	from	w_pls_conta_pos_proc 	proc,
		pls_segurado		seg,
		pls_sca_vinculo		sca,
		pls_protocolo_conta	prot
	where	1 = 1
	and	proc.nr_seq_sca 	= sca.nr_seq_plano
	and	seg.nr_sequencia	= proc.nr_seq_segurado
	and	proc.nr_seq_protocolo	= prot.nr_sequencia
	and	ie_gera_valor_pos_estab = 'N';
					
--Como primeiramente processa verificacao de itens eleg_veis para p_s, apenas verifica aqueles que n_o foram setados para gerar na etapa de identifica_item_elegivel_pos. 

--Caso ie_gera_valor_pos_estab = 'S' ou 'SB', ent_o quer dizer que na etapa anterior j_ definiu que dever_ gerar p_s para o item em quest_o, n_o necessitando verificar aqui.

C02 CURSOR FOR
	SELECT	mat.nr_sequencia,
		mat.dt_atendimento,
		coalesce(seg.dt_rescisao, to_date('01/01/3000')) 	dt_rescisao,
		pls_obter_carteira_segurado(seg.nr_sequencia) 	cd_usuario_plano,
		pls_obter_dados_conta(mat.nr_seq_conta, 'CPO') ie_calculo_preco_benef,
		(	SELECT	max(ie_preco)
			from	pls_plano
			where	nr_sequencia = sca.nr_seq_plano) ie_preco,
		coalesce(seg.nr_seq_ops_congenere, seg.nr_seq_congenere) nr_seq_congenere_seg,
		prot.nr_seq_congenere nr_seq_congenere_prot,
		seg.ie_tipo_segurado,
		seg.nr_seq_intercambio
	from	w_pls_conta_pos_mat 	mat,
		pls_segurado		seg,
		pls_sca_vinculo		sca,
		pls_protocolo_conta	prot
	where	mat.nr_seq_sca 	= sca.nr_seq_plano
	and	seg.nr_sequencia	= mat.nr_seq_segurado
	and	mat.nr_seq_protocolo	= prot.nr_sequencia
	and	ie_gera_valor_pos_estab = 'N';
					
BEGIN

	select 	count(1)
	into STRICT	qt_regra_int_w
	from 	pls_regra_intercambio
	where 	ie_tipo_regra = 'CE';
	
	for r_c01_w in C01 loop
		ie_cobrar_pos_w := 'N';
		if	(r_c01_w.ie_preco = '1' AND r_c01_w.dt_atendimento > r_c01_w.dt_rescisao)then
			
			--Par_metro carregado na  identifica_item_elegivel_pos

			if (current_setting('pls_pos_estabelecido_pck.ie_cobranca_pos_w')::pls_parametros.ie_cobranca_pos%type = 'S') then
				
				select	CASE WHEN count(1)=0 THEN 'S'  ELSE 'N' END
				into STRICT	ie_cobrar_pos_w
				from	pls_carteira_devolucao
				where	cd_usuario_plano	= r_c01_w.cd_usuario_plano;
				
			end if;
		end if;
		
		if (r_c01_w.ie_calculo_preco_benef = 'S') 	or (r_c01_w.ie_preco in ('2','3') )	or (ie_cobrar_pos_w = 'S')			then
		
			--Como nesse momento basta saber se h_ uma cong_nere e n_o ser necess_rio definir qual ela _ com precis_o, apemas busca  a congenere do interc_mbio,

			--caso n_o tiver informada no segurado e tamb_m na conta. Tal situacao acaba ocorrendo na rotina original de p_s-estabelecido.

			nr_seq_congenere_w := coalesce(r_c01_w.nr_seq_congenere_seg, r_c01_w.nr_seq_congenere_prot);
			if ( coalesce(nr_seq_congenere_w::text, '') = '' and  (r_c01_w.nr_seq_intercambio IS NOT NULL AND r_c01_w.nr_seq_intercambio::text <> '')) then
				
				select	nr_seq_oper_congenere
				into STRICT	nr_seq_congenere_w
				from	pls_intercambio
				where	nr_sequencia = r_c01_w.nr_seq_intercambio;
				
			end if;
			
			ie_tipo_congenere_w := null;
			select	max(ie_tipo_congenere)
			into STRICT	ie_tipo_congenere_w
			from	pls_congenere
			where	nr_sequencia = nr_seq_congenere_w;
			
			--incluido tratamento qt_regra_int_w devido a necessidade da unimed s_o jos_ do rio preto, que da forma como estava o tratamento hoje para as cooperativas m_dicas acabava sendo aplicada a regra da unimed origem

			--Nesse caso aqui, prioriza a congenere vinda do protocolo, apenas considerando a do segurado quando a primeira n_o existir

			if ( ie_tipo_congenere_w = 'OP') and (r_c01_w.ie_tipo_segurado = 'T') and ( qt_regra_int_w = 0) then
				nr_seq_congenere_w := coalesce(r_c01_w.nr_seq_congenere_prot,nr_seq_congenere_w );
			end if;
			
			tb_congenere_w(i) := nr_seq_congenere_w;
			tb_item_w(i) :=	r_c01_w.nr_sequencia;
			tb_gera_w(i) := 'S';
			if (i > pls_util_cta_pck.qt_registro_transacao_w) then
				CALL pls_pos_estabelecido_pck.atualiza_item_gera_pos_estab( tb_item_w, tb_gera_w, tb_congenere_w, 'P');
				i := 0;
			else
				i := i + 1;
			end if;
		end if;
	end loop;
	CALL pls_pos_estabelecido_pck.atualiza_item_gera_pos_estab( tb_item_w, tb_gera_w, tb_congenere_w, 'P');
	i := 0;
	
	for r_c02_w in C02 loop
	
		ie_cobrar_pos_w := 'N';
		if	(r_c02_w.ie_preco = '1' AND  r_c02_w.dt_atendimento > r_c02_w.dt_rescisao)then
			
			--Par_metro carregado na  identifica_item_elegivel_pos

			if (current_setting('pls_pos_estabelecido_pck.ie_cobranca_pos_w')::pls_parametros.ie_cobranca_pos%type = 'S') then
				
				select	CASE WHEN count(1)=0 THEN 'S'  ELSE 'N' END
				into STRICT	ie_cobrar_pos_w
				from	pls_carteira_devolucao
				where	cd_usuario_plano	= r_c02_w.cd_usuario_plano;
				
			end if;
		end if;
		
		if ( r_c02_w.ie_calculo_preco_benef = 'S') or ( r_c02_w.ie_preco in ('2','3') )	or ( ie_cobrar_pos_w = 'S')		then
		
			--Como nesse momento basta saber se h_ uma cong_nere e n_o ser necess_rio definir qual ela _ com precis_o, apemas busca  a congenere do interc_mbio,

			--caso n_o tiver informada no segurado e tamb_m na conta. Tal situacao acaba ocorrendo na rotina original de p_s-estabelecido.

			nr_seq_congenere_w := coalesce(r_c02_w.nr_seq_congenere_seg, r_c02_w.nr_seq_congenere_prot);
			if ( coalesce(nr_seq_congenere_w::text, '') = '' and  (r_c02_w.nr_seq_intercambio IS NOT NULL AND r_c02_w.nr_seq_intercambio::text <> '')) then
				
				select	nr_seq_oper_congenere
				into STRICT	nr_seq_congenere_w
				from	pls_intercambio
				where	nr_sequencia = r_c02_w.nr_seq_intercambio;
				
			end if;
			
			ie_tipo_congenere_w := null;
			select	max(ie_tipo_congenere)
			into STRICT	ie_tipo_congenere_w
			from	pls_congenere
			where	nr_sequencia = nr_seq_congenere_w;
			
			--incluido tratamento qt_regra_int_w devido a necessidade da unimed s_o jos_ do rio preto, que da forma como estava o tratamento hoje para as cooperativas m_dicas acabava sendo aplicada a regra da unimed origem

			--Nesse caso aqui, prioriza a congenere vinda do protocolo, apenas considerando a do segurado quando a primeira n_o existir

			if ( ie_tipo_congenere_w = 'OP') and (r_c02_w.ie_tipo_segurado = 'T') and ( qt_regra_int_w = 0) then
				nr_seq_congenere_w := coalesce(r_c02_w.nr_seq_congenere_prot,nr_seq_congenere_w );
			end if;
			
			tb_congenere_w(i) := nr_seq_congenere_w;
			tb_item_w(i) :=	r_c02_w.nr_sequencia;
			tb_gera_w(i) := 'S';
			

			if (i > pls_util_cta_pck.qt_registro_transacao_w) then
				CALL pls_pos_estabelecido_pck.atualiza_item_gera_pos_estab( tb_item_w, tb_gera_w, tb_congenere_w, 'M');
				i := 0;
			else
				i := i + 1;
			end if;
		end if;
	end loop;
	CALL pls_pos_estabelecido_pck.atualiza_item_gera_pos_estab( tb_item_w, tb_gera_w, tb_congenere_w, 'M');
	i := 0;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.identifica_pos_estab_sca ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
