-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pos_estabelecido_pck.ajustar_val_diverg_ptu ( nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_vl_tx_mat_upd 	pls_util_cta_pck.t_number_table;
tb_vl_materiais_upd  	pls_util_cta_pck.t_number_table;	
tb_vl_tx_co_upd   	pls_util_cta_pck.t_number_table;
tb_vl_co_upd  	        pls_util_cta_pck.t_number_table;
tb_vl_tx_servico_upd   	pls_util_cta_pck.t_number_table;
tb_vl_servico_upd  	pls_util_cta_pck.t_number_table;
tb_seq_item_w		pls_util_cta_pck.t_number_table;
tb_seq_prov_w		pls_util_cta_pck.t_number_table;
tb_vl_prov_upd		pls_util_cta_pck.t_number_table;
vl_lib_taxa_co_w	pls_conta_pos_proc.vl_lib_taxa_co%type;
vl_lib_taxa_material_w	pls_conta_pos_proc.vl_lib_taxa_material%type;
vl_lib_taxa_servico_w  	pls_conta_pos_proc.vl_lib_taxa_servico%type;
vl_medico_w            	pls_conta_pos_proc.vl_medico%type;
vl_custo_operacional_w 	pls_conta_pos_proc.vl_custo_operacional%type;
vl_materiais_w          pls_conta_pos_proc.vl_materiais%type;
nr_seq_pos_proc_fat_w	pls_conta_pos_proc_fat.nr_sequencia%type;	
vl_ajuste_temp_w		pls_conta_pos_estab_contab.vl_materiais%type;
vl_custo_operacional_aux_w 	pls_conta_pos_estab_contab.vl_custo_operacional%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
vl_diferenca_w		double precision;
vl_proporcao_w		double precision;
qt_registro_w		integer := 0;
i			integer := 0;	
i_tx_serv_w		integer := 0;
i_vl_serv_w		integer := 0;
i_tx_co_w		integer := 0;
i_vl_co_w		integer := 0;
i_tx_mat_w		integer := 0;	
i_vl_mat_w		integer := 0;
tb_seq_tx_serv_w	pls_util_cta_pck.t_number_table;
tb_seq_vl_serv_w	pls_util_cta_pck.t_number_table;
tb_seq_tx_co_w		pls_util_cta_pck.t_number_table;
tb_seq_vl_co_w		pls_util_cta_pck.t_number_table;
tb_seq_tx_mat_w		pls_util_cta_pck.t_number_table;
tb_seq_vl_mat_w		pls_util_cta_pck.t_number_table;		
			    
C04 CURSOR FOR
	SELECT	nr_seq_conta_pos_proc nr_seq_conta_pos,
		sum(coalesce(vl_administracao,0)) vl_administracao,
		sum(coalesce(vl_lib_taxa_co,0)) vl_lib_taxa_co,
		sum(coalesce(vl_lib_taxa_material,0)) vl_lib_taxa_material,
		sum(coalesce(vl_lib_taxa_servico,0)) vl_lib_taxa_servico, 
		sum(coalesce(vl_medico,0)) vl_medico,
		sum(coalesce(vl_custo_operacional,0)) vl_custo_operacional, 
		sum(coalesce(vl_materiais,0)) vl_materiais
	from	pls_conta_pos_proc_fat fat
	where	nr_seq_conta		in (  	SELECT distinct nr_seq_conta 
						from	w_pls_conta_pos_proc proc
						where	ie_gera_valor_pos_estab in ('S', 'SB')
						)
	and (vl_medico + vl_materiais + vl_custo_operacional) > 0
	group by nr_seq_conta_pos_proc;
			
C05 CURSOR(	nr_seq_conta_pos_pc pls_conta_pos_proc_fat.nr_seq_conta_pos_proc%type) FOR	
	SELECT	nr_sequencia,	
		nr_seq_conta_pos_proc 		nr_seq_conta_pos,
		coalesce(vl_administracao,0) 	vl_administracao,
		coalesce(vl_lib_taxa_co,0) 		vl_lib_taxa_co,
		coalesce(vl_lib_taxa_material,0) 	vl_lib_taxa_material,
		coalesce(vl_lib_taxa_servico,0) 	vl_lib_taxa_servico, 
		coalesce(vl_medico,0) 		vl_medico,
		coalesce(vl_custo_operacional,0) vl_custo_operacional, 
		coalesce(vl_materiais,0) 		vl_materiais
	from	pls_conta_pos_proc_fat fat
	where	fat.nr_seq_conta_pos_proc	= nr_seq_conta_pos_pc
	and	fat.vl_custo_operacional	> 0;
	
BEGIN

	--Faz ajuste dos valores da pls_pos_estab_contab. Sobretudo quando tiver mais de um Pode haver diferen_as entre o valor provisionado 

	--e o valor efetivamente pago (Mais prov_vel de ocorrer com varios participantes, gerando mais linhas de pls_pls_estab_contab).

	for r_c04_w in c04 loop
		
		select	coalesce(vl_lib_taxa_co,0),
			coalesce(vl_lib_taxa_material,0),
			coalesce(vl_lib_taxa_servico,0),
			coalesce(vl_medico,0),
			coalesce(vl_custo_operacional,0), 
			coalesce(vl_materiais,0),
			(coalesce(vl_lib_taxa_co,0) + coalesce(vl_lib_taxa_material,0) + coalesce(vl_lib_taxa_servico,0) +
			 coalesce(vl_medico,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_materiais,0)) 
		into STRICT	vl_lib_taxa_co_w,
			vl_lib_taxa_material_w,
			vl_lib_taxa_servico_w, 
			vl_medico_w,
			vl_custo_operacional_w, 
			vl_materiais_w,
			vl_beneficiario_w
		from	pls_conta_pos_proc
		where	nr_sequencia	= r_c04_w.nr_seq_conta_pos;
			
		--registros da pls_conta_pos_estab_contab sem agrupar pelonr_seq_conta_pos 

		--Nessa abertura de cursor, corrige diferen_as causadas por provisionado x pago

		for r_c05_w in c05(r_c04_w.nr_seq_conta_pos) loop
			
			tb_vl_tx_mat_upd(i) 	:= vl_lib_taxa_material_w;
			tb_vl_materiais_upd(i) 	:= vl_materiais_w;		  	
			tb_vl_tx_co_upd(i) 	:= vl_lib_taxa_co_w; 	
			tb_vl_co_upd(i) 	:= vl_custo_operacional_w; 	
			tb_vl_tx_servico_upd(i) := vl_lib_taxa_servico_w;  	
			tb_vl_servico_upd(i) 	:= vl_medico_w;
			tb_seq_item_w(i) 	:= r_c05_w.nr_sequencia;			
			
			--Ajuste da taxa de Co

			if (coalesce( vl_lib_taxa_co_w,0) != coalesce(r_c04_w.vl_lib_taxa_co,0)) and (coalesce(r_c04_w.vl_lib_taxa_co,0) > 0)	then
				
				vl_diferenca_w	:= vl_lib_taxa_co_w - r_c04_w.vl_lib_taxa_co;
				--A diferen_a deve ser dividida proporcionalmente entre os registros

				if (vl_diferenca_w <> 0) then
				
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_lib_taxa_co, r_c04_w.vl_lib_taxa_co ))::numeric,10);	
					tb_vl_tx_co_upd(i) := coalesce(r_c05_w.vl_lib_taxa_co,0) + (vl_diferenca_w * vl_proporcao_w);
					
				end if;
			elsif (coalesce(vl_lib_taxa_co_w,0) != coalesce(r_c04_w.vl_lib_taxa_co,0)) then
				vl_diferenca_w	:= vl_lib_taxa_co_w;
				--A diferen_a deve ser dividida proporcionalmente entre os registros

				if (vl_diferenca_w <> 0) then
				
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=   round((dividir_sem_round(r_c05_w.vl_lib_taxa_co, r_c04_w.vl_lib_taxa_co ))::numeric,10);	
					tb_vl_tx_co_upd(i) := coalesce(vl_diferenca_w,0)  * vl_proporcao_w;
				end if;
			end if;
			
			--Ajuste de taxa de material

			if (coalesce(vl_lib_taxa_material_w,0)	!= coalesce(r_c04_w.vl_lib_taxa_material,0)) then
			
				vl_diferenca_w	:= vl_lib_taxa_material_w - r_c04_w.vl_lib_taxa_material;
				--A diferen_a deve ser dividida proporcionalmente entre os registros

				if (vl_diferenca_w <> 0) then
				
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_lib_taxa_material, r_c04_w.vl_lib_taxa_material))::numeric,10);	
					tb_vl_tx_mat_upd(i) := coalesce(r_c05_w.vl_lib_taxa_material,0) + (vl_diferenca_w * vl_proporcao_w);									
				end if;
			end if;
			
			--Ajuste da taxa de servi_o

			if (coalesce(vl_lib_taxa_servico_w,0)	!= coalesce(r_c04_w.vl_lib_taxa_servico,0)) then
			
				vl_diferenca_w	:= coalesce(vl_lib_taxa_servico_w,0) - r_c04_w.vl_lib_taxa_servico;
				
				if (vl_diferenca_w <> 0) then
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_lib_taxa_servico, r_c04_w.vl_lib_taxa_servico))::numeric,10);	
					tb_vl_tx_servico_upd(i) :=  coalesce(r_c05_w.vl_lib_taxa_servico,0) + (vl_diferenca_w * vl_proporcao_w);
				end if;
			end if;
			
			--Ajuste do valor m_dico

			if (coalesce(vl_medico_w,0)	!= coalesce(r_c04_w.vl_medico,0)) then
			
				vl_diferenca_w	:= vl_medico_w - r_c04_w.vl_medico;				
				if (vl_diferenca_w <> 0) then
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_medico, r_c04_w.vl_medico))::numeric,10);	
					tb_vl_servico_upd(i) := coalesce(r_c05_w.vl_medico,0) + (vl_diferenca_w * vl_proporcao_w);
				end if;
			end if;
			
			--Ajuste do valor de CO vl_custo_operacional_ind

			if (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c04_w.vl_custo_operacional,0)) and (coalesce(r_c04_w.vl_custo_operacional,0) > 0) then
				
				vl_diferenca_w	:= vl_custo_operacional_w - r_c04_w.vl_custo_operacional;
				
				if (vl_diferenca_w <> 0) then
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_custo_operacional, r_c04_w.vl_custo_operacional))::numeric,10);	
					tb_vl_co_upd(i) := coalesce(r_c05_w.vl_custo_operacional,0) + (vl_diferenca_w * vl_proporcao_w);
				end if;
			elsif (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c04_w.vl_custo_operacional,0)) then
				
				vl_diferenca_w	:= vl_custo_operacional_w;
				--A diferen_a deve ser dividida proporcionalmente entre os registros

				if (vl_diferenca_w <> 0) then
				
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_custo_operacional, r_c04_w.vl_custo_operacional))::numeric,10);	
					tb_vl_co_upd(i):= coalesce(vl_diferenca_w,0)  * vl_proporcao_w;
				end if;
			end if;
		
			--Ajuste dos valor de materiais

			if (coalesce(vl_materiais_w,0)	!= coalesce(r_c05_w.vl_materiais,0)) then
				
				vl_diferenca_w	:= vl_materiais_w - r_c04_w.vl_materiais;				
				if (vl_diferenca_w <> 0) then
					--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a proporcao

					vl_proporcao_w :=  round((dividir_sem_round(r_c05_w.vl_materiais, r_c04_w.vl_materiais))::numeric,10);	
					tb_vl_materiais_upd(i) := coalesce(r_c05_w.vl_materiais,0) + (vl_diferenca_w * vl_proporcao_w);

				end if;
			end if;
		
			if ( i > pls_Util_cta_pck.qt_registro_transacao_w) then
				SELECT * FROM pls_pos_estabelecido_pck.update_divergencias_val_ptu(	tb_vl_tx_mat_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_seq_item_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_vl_tx_mat_upd := _ora2pg_r.tb_vl_tx_mat_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_seq_item_w := _ora2pg_r.tb_nr_sequencia_upd_p;	
				i := 0;
			else
				i := i + 1;
			end if;
		end loop;	
	end loop;
	i := 0;
	SELECT * FROM pls_pos_estabelecido_pck.update_divergencias_val_ptu(	tb_vl_tx_mat_upd, tb_vl_materiais_upd, tb_vl_tx_co_upd, tb_vl_co_upd, tb_vl_tx_servico_upd, tb_vl_servico_upd, tb_seq_item_w, nm_usuario_p) INTO STRICT _ora2pg_r;
 	tb_vl_tx_mat_upd := _ora2pg_r.tb_vl_tx_mat_upd_p; tb_vl_materiais_upd := _ora2pg_r.tb_vl_materiais_upd_p; tb_vl_tx_co_upd := _ora2pg_r.tb_vl_tx_co_upd_p; tb_vl_co_upd := _ora2pg_r.tb_vl_co_upd_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_vl_tx_servico_upd_p; tb_vl_servico_upd := _ora2pg_r.tb_vl_servico_upd_p; tb_seq_item_w := _ora2pg_r.tb_nr_sequencia_upd_p;
	
	--Faz ajuste dos valores da pls_pos_estab_contab. Sobretudo quando tiver mais de um Pode haver diferen_as entre o valor provisionado 

	--e o valor efetivamente pago (Mais prov_vel de ocorrer com varios participantes, gerando mais linhas de pls_pls_estab_contab).

	for r_c04_w in c04 loop
		
		select	coalesce(vl_lib_taxa_co,0),
			coalesce(vl_lib_taxa_material,0),
			coalesce(vl_lib_taxa_servico,0),
			coalesce(vl_medico,0),
			coalesce(vl_custo_operacional,0), 
			coalesce(vl_materiais,0)
		into STRICT	vl_lib_taxa_co_w,
			vl_lib_taxa_material_w,
			vl_lib_taxa_servico_w, 
			vl_medico_w,
			vl_custo_operacional_w, 
			vl_materiais_w
		from	pls_conta_pos_proc
		where	nr_sequencia	= r_c04_w.nr_seq_conta_pos;
				
		--Corrige diferen_as causadas por arredondamento que ainda podem existir nesse momento.

		
		--Ajuste da taxa de Co

		if (coalesce( vl_lib_taxa_co_w,0) != coalesce(r_c04_w.vl_lib_taxa_co,0)) then
						
			vl_diferenca_w	:= vl_lib_taxa_co_w - coalesce(r_c04_w.vl_lib_taxa_co,0);
			
			--A diferen_a deve ser dividida proporcionalmente entre os registros

			if ( vl_diferenca_w <> 0) then
				
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_lib_taxa_co		> 0
					and 	vl_lib_taxa_co		> vl_diferenca_w;
				end if;
					
				tb_vl_tx_co_upd(i_tx_co_w) := vl_diferenca_w;
				tb_seq_tx_co_w(i_tx_co_w) := nr_seq_pos_proc_fat_w;				
				if ( i_tx_co_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_co_w, tb_vl_tx_co_upd, 'TX_CO') INTO STRICT _ora2pg_r;
 tb_seq_tx_co_w := _ora2pg_r.tb_seq_p; tb_vl_tx_co_upd := _ora2pg_r.tb_valor_p;
					i_tx_co_w := 0;
				else
					i_tx_co_w := i_tx_co_w + 1;
				end if;
			
			end if;
		end if;
		
		--Ajuste de taxa de material

		if (coalesce(vl_lib_taxa_material_w,0)	!= coalesce(r_c04_w.vl_lib_taxa_material,0)) then
		
			vl_diferenca_w	:= vl_lib_taxa_material_w - coalesce(r_c04_w.vl_lib_taxa_material,0);
			--A diferen_a deve ser dividida proporcionalmente entre os registros

			if (vl_diferenca_w <> 0) then
				
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_lib_taxa_material		> 0
					and 	vl_lib_taxa_material		> vl_diferenca_w;
				end if;
				
				tb_vl_tx_mat_upd(i_tx_mat_w) := vl_diferenca_w;
				tb_seq_tx_mat_w(i_tx_mat_w) := nr_seq_pos_proc_fat_w;				
				if ( i_tx_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_mat_w, tb_vl_tx_mat_upd, 'TX_MAT') INTO STRICT _ora2pg_r;
 tb_seq_tx_mat_w := _ora2pg_r.tb_seq_p; tb_vl_tx_mat_upd := _ora2pg_r.tb_valor_p;
					i_tx_mat_w := 0;
				else
					i_tx_mat_w := i_tx_mat_w + 1;
				end if;
					
			end if;
		end if;
		
		--Ajuste da taxa de servi_o

		if (coalesce(vl_lib_taxa_servico_w,0)	!= coalesce(r_c04_w.vl_lib_taxa_servico,0)) then

			vl_diferenca_w	:= coalesce(vl_lib_taxa_servico_w,0) - coalesce(r_c04_w.vl_lib_taxa_servico,0);
			
			if (vl_diferenca_w <> 0) then
				
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_lib_taxa_servico	> 0
					and 	vl_lib_taxa_servico	> vl_diferenca_w;
				end if;
					
				tb_vl_tx_servico_upd(i_tx_serv_w) := vl_diferenca_w;
				tb_seq_tx_serv_w(i_tx_serv_w) := nr_seq_pos_proc_fat_w;				
				if ( i_tx_serv_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_serv_w, tb_vl_tx_servico_upd, 'TX_SERV') INTO STRICT _ora2pg_r;
 tb_seq_tx_serv_w := _ora2pg_r.tb_seq_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_valor_p;
					i_tx_serv_w := 0;
				else
					i_tx_serv_w := i_tx_serv_w + 1;
				end if;
									
			end if;
		end if;
		
		--Ajuste do valor m_dico

		if (coalesce(vl_medico_w,0) != coalesce(r_c04_w.vl_medico,0)) then
	
			vl_diferenca_w	:= vl_medico_w - coalesce(r_c04_w.vl_medico,0);
			
			if (vl_diferenca_w <> 0) then
				
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_medico	> 0
					and 	vl_medico	> vl_diferenca_w;
				end if;
				
				tb_vl_servico_upd(i_vl_serv_w) := vl_diferenca_w;
				tb_seq_vl_serv_w(i_vl_serv_w) := nr_seq_pos_proc_fat_w;				
				if ( i_vl_serv_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_serv_w, tb_vl_servico_upd, 'VL_SERV') INTO STRICT _ora2pg_r;
 tb_seq_vl_serv_w := _ora2pg_r.tb_seq_p; tb_vl_servico_upd := _ora2pg_r.tb_valor_p;
					i_vl_serv_w := 0;
				else
					i_vl_serv_w := i_vl_serv_w + 1;
				end if;

			end if;	
		end if;
		
		--Ajuste do valor de CO vl_custo_operacional

		if (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c04_w.vl_custo_operacional,0)) then

			vl_diferenca_w	:= vl_custo_operacional_w - coalesce(r_c04_w.vl_custo_operacional,0);
			
			if (vl_diferenca_w <> 0) then
			
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_custo_operacional	> 0
					and 	vl_custo_operacional	> vl_diferenca_w;
				end if;
				
				tb_vl_co_upd(i_vl_co_w) := vl_diferenca_w;
				tb_seq_vl_co_w(i_vl_co_w) := nr_seq_pos_proc_fat_w;				
				if ( i_vl_co_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_co_w, tb_vl_co_upd, 'VL_CO') INTO STRICT _ora2pg_r;
 tb_seq_vl_co_w := _ora2pg_r.tb_seq_p; tb_vl_co_upd := _ora2pg_r.tb_valor_p;
					i_vl_co_w := 0;
				else
					i_vl_co_w := i_vl_co_w + 1;
				end if;

			end if;	
		end if;

		--Ajuste dos valor de materiais

		if (coalesce(vl_materiais_w,0)	!= coalesce(r_c04_w.vl_materiais,0)) then
			
			select	sum(coalesce(vl_materiais,0))
			into STRICT	vl_ajuste_temp_w
			from	pls_conta_pos_proc_fat
			where	nr_seq_conta_pos_proc = r_c04_w.nr_seq_conta_pos;
			
			vl_diferenca_w	:= vl_materiais_w - vl_ajuste_temp_w;
			
			if (vl_diferenca_w <> 0) then
				
				if (vl_diferenca_w > 0) then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos;
				else
					select	max(nr_sequencia)
					into STRICT	nr_seq_pos_proc_fat_w
					from	pls_conta_pos_proc_fat
					where	nr_seq_conta_pos_proc	= r_c04_w.nr_seq_conta_pos
					and	vl_materiais		> 0
					and 	vl_materiais		> vl_diferenca_w;
				end if;
				
				tb_vl_materiais_upd(i_vl_mat_w) := vl_diferenca_w;
				tb_seq_vl_mat_w(i_vl_mat_w) := nr_seq_pos_proc_fat_w;				
				if ( i_vl_mat_w > pls_util_cta_pck.qt_registro_transacao_w) then
				
					SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_mat_w, tb_vl_materiais_upd, 'VL_MAT') INTO STRICT _ora2pg_r;
 tb_seq_vl_mat_w := _ora2pg_r.tb_seq_p; tb_vl_materiais_upd := _ora2pg_r.tb_valor_p;
					i_vl_mat_w := 0;
				else
					i_vl_mat_w := i_vl_mat_w + 1;
				end if;					
			end if;	
		end if;	
										
	end loop;
	
	--se sobrarem registros nas estruturas, faz a persist_ncia no banco para atualizacao dos valores.

	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_co_w, tb_vl_tx_co_upd, 'TX_CO') INTO STRICT _ora2pg_r;
 tb_seq_tx_co_w := _ora2pg_r.tb_seq_p; tb_vl_tx_co_upd := _ora2pg_r.tb_valor_p;
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_mat_w, tb_vl_tx_mat_upd, 'TX_MAT') INTO STRICT _ora2pg_r;
 tb_seq_tx_mat_w := _ora2pg_r.tb_seq_p; tb_vl_tx_mat_upd := _ora2pg_r.tb_valor_p;
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_tx_serv_w, tb_vl_tx_servico_upd, 'TX_SERV') INTO STRICT _ora2pg_r;
 tb_seq_tx_serv_w := _ora2pg_r.tb_seq_p; tb_vl_tx_servico_upd := _ora2pg_r.tb_valor_p;
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_serv_w, tb_vl_servico_upd, 'VL_SERV') INTO STRICT _ora2pg_r;
 tb_seq_vl_serv_w := _ora2pg_r.tb_seq_p; tb_vl_servico_upd := _ora2pg_r.tb_valor_p;
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_co_w, tb_vl_co_upd, 'VL_CO') INTO STRICT _ora2pg_r;
 tb_seq_vl_co_w := _ora2pg_r.tb_seq_p; tb_vl_co_upd := _ora2pg_r.tb_valor_p;
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_vl_mat_w, tb_vl_materiais_upd, 'VL_MAT') INTO STRICT _ora2pg_r;
 tb_seq_vl_mat_w := _ora2pg_r.tb_seq_p; tb_vl_materiais_upd := _ora2pg_r.tb_valor_p;
	i := 0;
	
	--Ajusta vl_provisao e ajustes finais

	for r_c04_w in c04 loop
		
		tb_seq_prov_w(i) := r_c04_w.nr_seq_conta_pos;
		tb_vl_prov_upd(i):= 0; --mando sempre zero pois o vl_prov _ o total dos valores, ent_o _ feito direto no update
		if ( i > pls_util_cta_pck.qt_registro_transacao_w) then
		
			SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_prov_w, tb_vl_prov_upd, 'VL_PROV') INTO STRICT _ora2pg_r;
 tb_seq_prov_w := _ora2pg_r.tb_seq_p; tb_vl_prov_upd := _ora2pg_r.tb_valor_p;
			i := 0;
		else
			i := i + 1;
		end if;
				
	end loop;
	
	SELECT * FROM pls_pos_estabelecido_pck.upd_campo_reg_ptu(tb_seq_prov_w, tb_vl_prov_upd, 'VL_PROV') INTO STRICT _ora2pg_r;
 tb_seq_prov_w := _ora2pg_r.tb_seq_p; tb_vl_prov_upd := _ora2pg_r.tb_valor_p;
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pos_estabelecido_pck.ajustar_val_diverg_ptu ( nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
