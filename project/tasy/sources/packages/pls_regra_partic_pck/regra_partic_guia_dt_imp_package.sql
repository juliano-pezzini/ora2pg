-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_regra_partic_pck.regra_partic_guia_dt_imp ( dados_val_partic_p pls_tipos_ocor_pck.dados_val_partic, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


qt_grupo_regra_w	integer;
qt_grupo_casou_w	integer;
ds_observacao_w		varchar(32000);
dados_tb_selecao_w	pls_tipos_ocor_pck.dados_table_selecao_ocor;
nr_indice_w		integer;

c01 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		nr_seq_regra_pc		pls_grupo_partic_tm.nr_seq_regra%type) FOR
	SELECT	sel.nr_sequencia, sel.cd_guia_referencia,
		sel.nr_seq_segurado, sel.ie_origem_proced,
		sel.cd_procedimento, sel.dt_item
	from 	pls_selecao_ocor_cta sel,
		pls_conta_proc proc,
		pls_proc_participante partic
	where	sel.nr_id_transacao = nr_id_transacao_pc
	and	sel.ie_tipo_registro = 'P'
	and	sel.ie_valido = 'S'
	and	proc.nr_sequencia = sel.nr_seq_conta_proc
	and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
	and	partic.nr_seq_conta_proc = proc.nr_sequencia
	and	partic.ie_status in ('L', 'P', 'U')
	and	((partic.ie_gerada_cta_honorario = 'N') or (coalesce(partic.ie_gerada_cta_honorario::text, '') = ''))
	and 	exists (	SELECT	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_grau_partic = partic.nr_seq_grau_partic
				and	coalesce(x.nr_seq_prestador, -1) = -1
				and	x.ie_gera_ocorrencia = 'S'
				
union all

				select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_prestador = partic.nr_seq_prestador
				and	x.nr_seq_grau_partic = partic.nr_seq_grau_partic
				and	x.ie_gera_ocorrencia = 'S')
	
union all

	select	sel.nr_sequencia, sel.cd_guia_referencia,
		sel.nr_seq_segurado, sel.ie_origem_proced,
		sel.cd_procedimento, sel.dt_item
	from	pls_selecao_ocor_cta sel,
		pls_conta_proc proc,
		pls_conta cta
	where	sel.nr_id_transacao = nr_id_transacao_pc
	and	sel.ie_tipo_registro = 'P'
	and	sel.ie_valido = 'S'
	and	proc.nr_sequencia = sel.nr_seq_conta_proc
	and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
	and	not exists (	select	1
					from	pls_proc_participante x
					where	x.nr_seq_conta_proc = proc.nr_sequencia)
	and	cta.nr_sequencia = proc.nr_seq_conta
	and	exists (	select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_grau_partic = cta.nr_seq_grau_partic
				and	coalesce(x.nr_seq_prestador, -1) = -1
				and	x.ie_gera_ocorrencia = 'S'
				
union all

				select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_prestador = cta.nr_seq_prestador_exec_imp_ref
				and	x.nr_seq_grau_partic = cta.nr_seq_grau_partic
				and    	x.ie_gera_ocorrencia = 'S');

c_partic_guia_imp_dt CURSOR(	nr_seq_segurado_pc	pls_conta.nr_seq_segurado%type,
				cd_guia_referencia_pc	pls_conta.cd_guia_referencia%type,
				ie_origem_proced_pc	pls_conta_proc.ie_origem_proced%type,
				cd_procedimento_pc	pls_conta_proc.cd_procedimento%type,
				dt_item_pc		pls_conta_proc.dt_procedimento%type,
				nr_seq_regra_pc		pls_grupo_partic_tm.nr_seq_regra%type) FOR
	SELECT	proc.nr_sequencia nr_seq_proc,
		proc.nr_seq_conta,
		partic.cd_medico_imp cd_medico,
		partic.nr_seq_prestador,
		obter_nome_pf(partic.cd_medico_imp) nm_medico,
		pls_obter_dados_prestador(partic.nr_seq_prestador, 'N') nm_prestador,
		gp.ds_grau_participacao,
		partic.nr_seq_grau_partic,
		coalesce(proc.ie_glosa,'N') ie_glosa
	from	pls_conta cta,
		pls_conta_proc proc,
		pls_proc_participante partic,
		pls_grau_participacao gp
	where	cta.nr_seq_segurado = nr_seq_segurado_pc
	and	cta.cd_guia_ok = cd_guia_referencia_pc
	and	proc.dt_procedimento_referencia_sh = dt_item_pc
	and	proc.nr_seq_conta = cta.nr_sequencia
	and	proc.ie_origem_proced = ie_origem_proced_pc
	and	proc.cd_procedimento = cd_procedimento_pc
	and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
	and	partic.nr_seq_conta_proc = proc.nr_sequencia
	and	partic.ie_status in ('L', 'P', 'U')
	and	((partic.ie_gerada_cta_honorario = 'N') or (coalesce(partic.ie_gerada_cta_honorario::text, '') = ''))
	and 	exists (	SELECT	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_grau_partic = partic.nr_seq_grau_partic
				and	coalesce(x.nr_seq_prestador, -1) = -1
				
union all

				select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_prestador = partic.nr_seq_prestador
				and	x.nr_seq_grau_partic = partic.nr_seq_grau_partic)
	and	gp.nr_sequencia = partic.nr_seq_grau_partic
	
union all

	select	proc.nr_sequencia nr_seq_proc,
		cta.nr_sequencia nr_seq_conta,
		cta.cd_medico_executor_imp cd_medico,
		cta.nr_seq_prestador_exec_imp_ref nr_seq_prestador,
		obter_nome_pf(cta.cd_medico_executor_imp) nm_medico,
		pls_obter_dados_prestador(cta.nr_seq_prestador_exec_imp_ref, 'N') nm_prestador,
		gp.ds_grau_participacao,
		cta.nr_seq_grau_partic,
		coalesce(proc.ie_glosa,'N') ie_glosa
	from	pls_conta cta,
		pls_conta_proc proc,
		pls_grau_participacao gp
	where	cta.nr_seq_segurado = nr_seq_segurado_pc
	and	cta.cd_guia_ok = cd_guia_referencia_pc
	and	proc.dt_procedimento_referencia_sh = dt_item_pc
	and	proc.nr_seq_conta = cta.nr_sequencia
	and	proc.ie_origem_proced = ie_origem_proced_pc
	and	proc.cd_procedimento = cd_procedimento_pc
	and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
	and	not exists (	select	1
					from	pls_proc_participante x
					where	x.nr_seq_conta_proc = proc.nr_sequencia)
	and	exists (	select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_grau_partic = cta.nr_seq_grau_partic
				and	coalesce(x.nr_seq_prestador, -1) = -1
				
union all

				select	x.nr_seq_grupo_regra
				from	pls_grupo_partic_tm x
				where	x.nr_seq_regra = nr_seq_regra_pc
				and	x.nr_seq_prestador = cta.nr_seq_prestador_exec_imp_ref
				and	x.nr_seq_grau_partic = cta.nr_seq_grau_partic)
	and	gp.nr_sequencia = cta.nr_seq_grau_partic;

BEGIN
-- obtem a quantidade de grupos existentes para a regra

qt_grupo_regra_w := pls_regra_partic_pck.obter_qt_grupo_regra(dados_val_partic_p.nr_seq_regra_partic);

nr_indice_w := 0;

-- retorna todos os registros da tabela de selecao que precisam ser processados

-- sao somente os que casam com algum item da regra e que tenham sido configurados para gerar ocorrencia (ie_gera_ocorrencia = S)

for r_c01_w in c01(nr_id_transacao_p, dados_val_partic_p.nr_seq_regra_partic) loop

	-- retorna a quantidade de grupos que tiveram casamento

	select	count(distinct nr_seq_grupo_regra) qt_grupo_casou
	into STRICT	qt_grupo_casou_w
	from (
		with query_tmp as (	SELECT	partic.nr_seq_grau_partic,
						partic.nr_seq_prestador
					from	pls_conta cta,
						pls_conta_proc proc,
						pls_proc_participante partic
					where	cta.nr_seq_segurado = r_c01_w.nr_seq_segurado
					and	cta.cd_guia_ok = r_c01_w.cd_guia_referencia
					and	proc.nr_seq_conta = cta.nr_sequencia
					and	proc.ie_origem_proced = r_c01_w.ie_origem_proced
					and	proc.cd_procedimento = r_c01_w.cd_procedimento
					and	proc.dt_procedimento_referencia_sh = trunc(r_c01_w.dt_item, 'dd')
					and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
					and	partic.nr_seq_conta_proc = proc.nr_sequencia
					and	partic.ie_status in ('L', 'P', 'U')
					and	((partic.ie_gerada_cta_honorario = 'N') or (coalesce(partic.ie_gerada_cta_honorario::text, '') = ''))
					
union all

					SELECT	cta.nr_seq_grau_partic,
						cta.nr_seq_prestador_exec_imp_ref nr_seq_prestador
					from	pls_conta cta,
						pls_conta_proc proc
					where	cta.nr_seq_segurado = r_c01_w.nr_seq_segurado
					and	cta.cd_guia_ok = r_c01_w.cd_guia_referencia
					and	proc.nr_seq_conta = cta.nr_sequencia
					and	proc.ie_origem_proced = r_c01_w.ie_origem_proced
					and	proc.cd_procedimento = r_c01_w.cd_procedimento
					and	proc.dt_procedimento_referencia_sh = trunc(r_c01_w.dt_item, 'dd')
					and	proc.ie_status in ('A', 'C', 'L', 'M', 'P', 'S', 'U')
					and	not exists (	select	1
									from	pls_proc_participante x
									where	x.nr_seq_conta_proc = proc.nr_sequencia))
		select	distinct x.nr_seq_grupo_regra
		from	query_tmp xpto,
			pls_grupo_partic_tm x
		where	x.nr_seq_regra = dados_val_partic_p.nr_seq_regra_partic
		and     x.nr_seq_grau_partic = xpto.nr_seq_grau_partic
		and	coalesce(x.nr_seq_prestador, -1) = -1
		
union all

		select	distinct x.nr_seq_grupo_regra
		from	query_tmp xpto,
			pls_grupo_partic_tm x
		where	x.nr_seq_regra = dados_val_partic_p.nr_seq_regra_partic
		and	x.nr_seq_prestador = xpto.nr_seq_prestador
		and	x.nr_seq_grau_partic = xpto.nr_seq_grau_partic) alias14;

	-- se a quantidade de grupos da regra for igual a que retornou no select significa que todos os grupos

	-- tiveram pelo menos um casamento, ou seja, deve ser gerada a ocorrencia

	if (qt_grupo_casou_w = qt_grupo_regra_w) then

		ds_observacao_w := null;
		-- busca os dados para gerar a observacao da ocorrencia

		for r_c_partic_guia_w in c_partic_guia_imp_dt(	r_c01_w.nr_seq_segurado, r_c01_w.cd_guia_referencia,
								r_c01_w.ie_origem_proced, r_c01_w.cd_procedimento,
								trunc(r_c01_w.dt_item, 'dd'), dados_val_partic_p.nr_seq_regra_partic) loop

			if	((coalesce(dados_val_partic_p.ie_glosa, 'N') = 'S') and (r_c_partic_guia_w.ie_glosa = 'N')) or (coalesce(dados_val_partic_p.ie_glosa, 'N') = 'N') then
				-- armazena os dados na variavel para mais abaixo gravar na selecao

				ds_observacao_w := substr(ds_observacao_w || 	'Conta: ' || r_c_partic_guia_w.nr_seq_conta ||
										' Proc: ' || r_c_partic_guia_w.nr_seq_proc ||
										' Grau partic: ' || r_c_partic_guia_w.ds_grau_participacao ||
										' Prof: ' || r_c_partic_guia_w.nm_medico ||
										' Prest: ' || r_c_partic_guia_w.nm_prestador ||
										pls_util_pck.enter_w, 1, 10000);
			end if;
		end loop;

		dados_tb_selecao_w.ie_valido(nr_indice_w) := 'S';
		dados_tb_selecao_w.nr_seq_selecao(nr_indice_w) := r_c01_w.nr_sequencia;
		dados_tb_selecao_w.ds_seqs_selecao(nr_indice_w) := null;
		dados_tb_selecao_w.ds_observacao(nr_indice_w) := substr(ds_observacao_w, 1, 2000);

		if (nr_indice_w >= pls_util_pck.qt_registro_transacao_w) then
			CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_selecao_w.nr_seq_selecao,
									dados_tb_selecao_w.ds_seqs_selecao,
									'SEQ',
									dados_tb_selecao_w.ds_observacao,
									dados_tb_selecao_w.ie_valido,
									nm_usuario_p);
			dados_tb_selecao_w.nr_seq_selecao.delete;
			dados_tb_selecao_w.ds_seqs_selecao.delete;
			dados_tb_selecao_w.ie_valido.delete;
			dados_tb_selecao_w.ds_observacao.delete;
			nr_indice_w := 0;
		else
			nr_indice_w := nr_indice_w + 1;
		end if;
	end if;
end loop;

-- se sobrou algo para atualizar manda para o banco

CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_selecao_w.nr_seq_selecao,
						dados_tb_selecao_w.ds_seqs_selecao,
						'SEQ',
						dados_tb_selecao_w.ds_observacao,
						dados_tb_selecao_w.ie_valido,
						nm_usuario_p);
dados_tb_selecao_w.nr_seq_selecao.delete;
dados_tb_selecao_w.ds_seqs_selecao.delete;
dados_tb_selecao_w.ie_valido.delete;
dados_tb_selecao_w.ds_observacao.delete;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_regra_partic_pck.regra_partic_guia_dt_imp ( dados_val_partic_p pls_tipos_ocor_pck.dados_val_partic, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
