-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_programacao_reajuste_pck.gerar_aporte ( nr_seq_programacao_p pls_prog_reaj_coletivo.nr_sequencia%type, dt_reajuste_p pls_prog_reaj_coletivo.dt_reajuste%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


qt_diferenca_valor_w		bigint;
qt_aporte_w			bigint;
qt_parcela_w			bigint;
vl_aporte_total_w		double precision;
vl_aporte_w			double precision;
vl_diferenca_aporte_w		double precision;
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
cd_moeda_padrao_w		parametro_contas_receber.cd_moeda_padrao%type;
nr_seq_trans_fin_baixa_w	parametro_contas_receber.nr_seq_trans_fin_baixa%type;
nr_seq_classe_tit_mens_w	pls_parametros.nr_seq_classe_tit_mens%type;
cd_tipo_taxa_juros_w		pls_parametros.cd_tipo_taxa_juro%type;
tx_juros_w			pls_parametros.pr_juro_padrao%type;
cd_tipo_taxa_multa_w		pls_parametros.cd_tipo_taxa_multa%type;
tx_multa_w			pls_parametros.pr_multa_padrao%type;
nr_seq_conta_banco_w		pls_parametros.nr_seq_conta_banco%type;
cd_estab_financeiro_w		bigint;
pls_contrato_pagador_fin_w	pls_contrato_pagador_fin%rowtype;
ie_erro_w			varchar(1);
dt_referencia_fimdia_w		timestamp;
ie_tipo_titulo_w		varchar(5);
cd_pessoa_fisica_w		titulo_receber.cd_pessoa_fisica%type;
cd_cgc_w			titulo_receber.cd_cgc%type;
nr_titulo_w			titulo_receber.nr_titulo%type;

C01 CURSOR(	nr_seq_aporte_pc	pls_prog_reaj_aporte.nr_sequencia%type) FOR
	SELECT	vl_parcela,
		dt_vencimento,
		nr_sequencia nr_seq_aporte_venc
	from	pls_prog_reaj_aporte_venc
	where	nr_seq_aporte = nr_seq_aporte_pc;

C02 CURSOR(	nr_seq_programacao_pc	pls_prog_reaj_coletivo.nr_sequencia%type) FOR
	SELECT	vl_aporte,
		nr_sequencia nr_seq_aporte
	from	pls_prog_reaj_aporte
	where	nr_seq_programacao = nr_seq_programacao_pc;

BEGIN

select	count(1)
into STRICT	qt_aporte_w
from	pls_prog_reaj_aporte
where	nr_seq_programacao = nr_seq_programacao_p;

if (qt_aporte_w > 0) then
	select	count(1)
	into STRICT	qt_diferenca_valor_w
	from (SELECT	sum(y.vl_parcela) vl_total_parcela,
			x.vl_aporte
		FROM pls_prog_reaj_aporte x
LEFT OUTER JOIN pls_prog_reaj_aporte_venc y ON (x.nr_sequencia = y.nr_seq_aporte)
WHERE x.nr_seq_programacao = nr_seq_programacao_p group by
			x.vl_aporte) a
	where	a.vl_total_parcela = a.vl_aporte;
	
	if (qt_diferenca_valor_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1051618); -- A soma do valor informado para as parcelas deve ser igual ao valor do aporte.
	end if;
	
	select	max(a.nr_sequencia)
	into STRICT	nr_seq_pagador_w
	from	pls_contrato_pagador a,
		pls_contrato b,
		pls_prog_reaj_coletivo c
	where	b.nr_sequencia = c.nr_seq_contrato
	and	b.nr_sequencia = a.nr_seq_contrato
	and	b.nr_sequencia = nr_seq_contrato_p
	and	a.ie_tipo_pagador = 'P';
	
	dt_referencia_fimdia_w	:= fim_dia(dt_reajuste_p);
	
	ie_erro_w	:= 'N';
	
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
		select	cd_cgc,
			cd_pessoa_fisica
		into STRICT	cd_cgc_w,
			cd_pessoa_fisica_w
		from	pls_contrato_pagador
		where	nr_sequencia = nr_seq_pagador_w;
		
		begin
		select	*
		into STRICT	pls_contrato_pagador_fin_w
		from	pls_contrato_pagador_fin
		where	nr_seq_pagador	= nr_seq_pagador_w
		and	dt_inicio_vigencia <= dt_referencia_fimdia_w
		and	((dt_fim_vigencia >= dt_referencia_fimdia_w) or (coalesce(dt_fim_vigencia::text, '') = ''));
		exception
		when others then
			ie_erro_w	:= 'S';
		end;
	else
		ie_erro_w	:= 'S';
	end if;
	
	if (ie_erro_w = 'N') then
		begin
		select	cd_moeda_padrao,
			nr_seq_trans_fin_baixa
		into STRICT	cd_moeda_padrao_w,
			nr_seq_trans_fin_baixa_w
		from	parametro_contas_receber
		where	cd_estabelecimento = cd_estabelecimento_p;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176708);
		end;
		
		begin
		select	cd_tipo_taxa_juro,
			pr_juro_padrao,
			cd_tipo_taxa_multa,
			pr_multa_padrao,
			nr_seq_conta_banco,
			nr_seq_classe_tit_mens
		into STRICT	cd_tipo_taxa_juros_w,
			tx_juros_w,
			cd_tipo_taxa_multa_w,
			tx_multa_w,
			nr_seq_conta_banco_w,
			nr_seq_classe_tit_mens_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_p;
		exception
			when no_data_found then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176709);
		end;
		
		select	coalesce(cd_estab_financeiro, cd_estabelecimento)
		into STRICT	cd_estab_financeiro_w
		from	estabelecimento
		where	cd_estabelecimento	= cd_estabelecimento_p;

		if (pls_contrato_pagador_fin_w.nr_seq_forma_cobranca = 1) then
			ie_tipo_titulo_w	:= 1; --Boleto
		elsif (pls_contrato_pagador_fin_w.nr_seq_forma_cobranca = 2) then
			ie_tipo_titulo_w	:= 10; --Debito automatico
		elsif (pls_contrato_pagador_fin_w.nr_seq_forma_cobranca = 3) then
			ie_tipo_titulo_w	:= 11; --Tesouraria
		else
			ie_tipo_titulo_w := coalesce(Obter_Valor_Param_Usuario(801,77, Obter_perfil_Ativo, nm_usuario_p, 0), '1');
		end if;

		for r_c02_w in c02(nr_seq_programacao_p) loop
			begin
			qt_parcela_w		:= 0;
			vl_aporte_total_w	:= 0;
			vl_aporte_w		:= 0;

			for r_c01_w in c01(r_c02_w.nr_seq_aporte) loop
				begin
				select	nextval('titulo_seq')
				into STRICT	nr_titulo_w
				;
				
				insert into titulo_receber(nr_titulo, cd_estabelecimento, nm_usuario,
					dt_inclusao, dt_atualizacao, nr_seq_aporte_venc,
					cd_moeda, cd_portador, cd_tipo_portador,
					cd_tipo_taxa_juro, cd_tipo_taxa_multa, dt_emissao,
					dt_pagamento_previsto, dt_vencimento, ie_origem_titulo,
					ie_situacao, ie_tipo_emissao_titulo, ie_tipo_inclusao,
					ie_tipo_titulo, tx_desc_antecipacao, tx_juros,
					tx_multa, vl_saldo_juros, vl_saldo_multa,
					vl_saldo_titulo, vl_titulo, nr_seq_trans_fin_contab, 
					nr_seq_trans_fin_baixa, ie_pls, cd_pessoa_fisica,
					cd_cgc, nr_seq_pagador, nr_seq_conta_banco,
					cd_banco, nr_seq_classe, nr_seq_carteira_cobr,
					cd_estab_financeiro, ds_observacao_titulo, nm_usuario_orig)
				values (nr_titulo_w, cd_estabelecimento_p, nm_usuario_p,
					clock_timestamp(), clock_timestamp(), r_c01_w.nr_seq_aporte_venc,
					cd_moeda_padrao_w, pls_contrato_pagador_fin_w.cd_portador, pls_contrato_pagador_fin_w.cd_tipo_portador,
					coalesce(cd_tipo_taxa_juros_w,0), coalesce(cd_tipo_taxa_multa_w,0), clock_timestamp(),
					r_c01_w.dt_vencimento, r_c01_w.dt_vencimento, '3',
					'1', 1, '2',
					ie_tipo_titulo_w, 0, coalesce(tx_juros_w,0),
					coalesce(tx_multa_w,0), 0, 0,
					r_c01_w.vl_parcela, r_c01_w.vl_parcela, nr_seq_trans_fin_baixa_w,
					nr_seq_trans_fin_baixa_w, 'S', cd_pessoa_fisica_w,
					cd_cgc_w, nr_seq_pagador_w, coalesce(pls_contrato_pagador_fin_w.nr_seq_conta_banco, nr_seq_conta_banco_w),
					pls_contrato_pagador_fin_w.cd_banco, nr_seq_classe_tit_mens_w, pls_contrato_pagador_fin_w.nr_seq_carteira_cobr,
					cd_estab_financeiro_w, null, nm_usuario_p);
					
				CALL gerar_bloqueto_tit_rec(nr_titulo_w,'MTR');
				end;
			end loop;

			insert into	pls_segurado_mensalidade(nr_sequencia, cd_estabelecimento, dt_atualizacao,
				dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
				ie_tipo_item, vl_item, nr_seq_pagador,
				nr_seq_aporte, ie_situacao, dt_referencia)
			values (nextval('pls_segurado_mensalidade_seq'), cd_estabelecimento_p, clock_timestamp(),
				clock_timestamp(), nm_usuario_p, nm_usuario_p,
				42, r_c02_w.vl_aporte, nr_seq_pagador_w,
				r_c02_w.nr_seq_aporte, 'A', dt_reajuste_p);
			
			while qt_parcela_w < 12 loop
				begin
				
				vl_aporte_w		:= r_c02_w.vl_aporte/12;
				qt_parcela_w		:= qt_parcela_w + 1;
				vl_aporte_total_w	:= vl_aporte_total_w + vl_aporte_w;
				
				if (qt_parcela_w = 12) then
					vl_diferenca_aporte_w := r_c02_w.vl_aporte - vl_aporte_total_w;
					
					vl_aporte_w	:= vl_aporte_w + (vl_diferenca_aporte_w);
				end if;
				
				insert into	pls_segurado_mensalidade(nr_sequencia, cd_estabelecimento, dt_atualizacao,
					dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
					ie_tipo_item, vl_item, nr_seq_pagador,
					nr_seq_aporte, ie_situacao, dt_referencia)
				values (nextval('pls_segurado_mensalidade_seq'), cd_estabelecimento_p, clock_timestamp(),
					clock_timestamp(), nm_usuario_p, nm_usuario_p,
					43, vl_aporte_w, nr_seq_pagador_w,
					r_c02_w.nr_seq_aporte, 'A', add_months(dt_reajuste_p, (qt_parcela_w - 1)));
				end;
			end loop;
			end;
		end loop;
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_programacao_reajuste_pck.gerar_aporte ( nr_seq_programacao_p pls_prog_reaj_coletivo.nr_sequencia%type, dt_reajuste_p pls_prog_reaj_coletivo.dt_reajuste%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
