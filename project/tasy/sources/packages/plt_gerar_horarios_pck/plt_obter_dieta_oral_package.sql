-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE plt_gerar_horarios_pck.plt_obter_dieta_oral ( cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, cd_perfil_p bigint, nm_usuario_p text, nr_atendimento_p bigint, dt_inicial_horarios_p timestamp, dt_final_horarios_p timestamp, dt_validade_limite_p timestamp, ie_horarios_dietas_orais_p text, ie_prescr_usuario_p text, nr_seq_regra_p bigint, ie_edicao_p text, ie_estendidos_p bigint, dt_referencia_p timestamp, ie_exibir_hor_suspensos_p text, dt_plano_p text) AS $body$
DECLARE

		
	nr_prescricao_w		bigint;
	cd_refeicao_w		varchar(15);
	ds_refeicao_w		varchar(255);
	current_setting('plt_gerar_horarios_pck.ie_lib_pend_rep_w')::varchar(15)	varchar(1);
	ie_liberado_w		varchar(1);
	nr_seq_wadep_w		bigint;
	nr_dia_util_w		bigint;
	ie_status_item_w	varchar(1);
	ds_inter_prescr_w	varchar(240);
	nr_seq_dieta_w		integer;
	ie_copiar_w		varchar(1);
	dt_fim_w		timestamp;
	cd_intervalo_w		varchar(10);
	dt_extensao_w		timestamp;
	ie_plano_atual_w	varchar(1);
	ie_horario_susp_w	varchar(1);
	ie_retrogrado_w		varchar(1);
	QT_PARAMETRO_w		double precision;
	ds_unidade_w		varchar(50);
	ie_via_aplicacao_w	varchar(50);
	ie_erro_w		integer;
	ie_pend_assinatura_w 	varchar(1);
	ie_estendido_w		varchar(1);
	dt_validade_prescr_w	timestamp;
	ds_cor_titulo_w			varchar(20);
	ie_curta_duracao_w		varchar(1);
	cd_funcao_origem_w		bigint;
	cd_classif_setor_w		integer;
	ie_interv_farm_w		varchar(1);
	ie_recem_nato_w			varchar(1);

	
	c01 REFCURSOR;
	c02 REFCURSOR;
	
	
BEGIN
	dt_fim_w	:= dt_validade_limite_p + 5;
	ie_copiar_w 	:= plt_obter_se_item_marcado('D', nr_seq_regra_p);
	ds_cor_titulo_w	:= plt_obter_cor_titulo('D',nr_seq_regra_p);

	if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
		open	c01 for
		SELECT	cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		from (	SELECT	c.cd_refeicao,
							x.ds_valor_dominio nm_dieta,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(PLT_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(d.ie_suspenso,'N') ie_suspenso,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							Substr(obter_unid_med_dieta(d.cd_dieta),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							d.dt_suspensao,
							a.nr_prescricao
					from	valor_dominio_v x,
							prescr_dieta d,
							prescr_dieta_hor c,
							prescr_medica a
					where	x.vl_dominio = c.cd_refeicao
					and		d.nr_prescricao = c.nr_prescricao
					and		d.nr_prescricao = a.nr_prescricao
					and		c.nr_prescricao = a.nr_prescricao
					and		d.nr_sequencia	= c.nr_seq_dieta
					and		x.cd_dominio = 99
					and		a.nr_atendimento = nr_atendimento_p
					and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'		
					and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
					and		a.dt_validade_prescr between dt_validade_limite_p	and dt_fim_w	
					and		coalesce(c.ie_situacao,'A') = 'A'
					and		(c.cd_refeicao IS NOT NULL AND c.cd_refeicao::text <> '')
					group by
							c.cd_refeicao,
							x.ds_valor_dominio,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao,
							a.dt_liberacao_farmacia,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							d.nr_dia_util,
							coalesce(d.ie_suspenso,'N'),
							d.QT_PARAMETRO,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
							a.nr_prescricao,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							d.dt_suspensao) t
		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			t.dt_horario,
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		
union

		select	cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		from (	select	to_char(d.cd_dieta) cd_refeicao,
							x.nm_dieta,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(PLT_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(d.ie_suspenso,'N') ie_suspenso,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							d.dt_suspensao,
							a.nr_prescricao,
							a.dt_inicio_prescr
					FROM dieta x, prescr_medica a, prescr_dieta d
LEFT OUTER JOIN prescr_dieta_hor c ON (d.nr_prescricao = c.nr_prescricao AND d.nr_sequencia = c.nr_seq_dieta)
WHERE d.nr_prescricao 	= a.nr_prescricao  and x.cd_dieta 	= d.cd_dieta and a.nr_atendimento = nr_atendimento_p and plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S' and a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint and a.dt_validade_prescr	between dt_validade_limite_p and dt_fim_w and coalesce(c.ie_situacao,'A') = 'A' and coalesce(c.cd_refeicao::text, '') = '' group by
							d.cd_dieta,
							x.nm_dieta,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							coalesce(d.ie_suspenso,'N'),
							d.nr_dia_util,
							a.dt_liberacao,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao_farmacia,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							d.qt_parametro,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
							a.nr_prescricao,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(plt_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							d.dt_suspensao,
							a.dt_inicio_prescr) t
 		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			coalesce(t.dt_horario, t.dt_inicio_prescr),
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao;
			
		open	c02 for
		SELECT	t.cd_refeicao,
				t.nm_dieta,
				t.ie_status,
				t.ds_intervalo,
				t.nr_sequencia,
				t.ie_lib_pend_rep,
				t.ie_liberado,
				t.cd_intervalo,
				t.dt_extensao,
				t.ie_plano_atual,
				t.ie_horario_susp,
				t.ie_retrogrado,
				t.qt_parametro,
				t.ds_unidade,
				t.nr_dia_util,
				t.ie_erro,
				t.ie_pend_assinatura,
				t.ie_estendido,
				t.dt_validade_prescr,
				t.ie_via_aplicacao,
				t.ie_curta_duracao,
				t.cd_funcao_origem,
				t.ie_prescr_farm,
				t.ie_recem_nato,
				t.nr_prescricao
		from (	SELECT	to_char(d.cd_dieta) cd_refeicao,
							x.nm_dieta,
							substr(obter_status_hor_dieta_oral(null,d.dt_suspensao),1,1) ie_status,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(plt_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							substr(obter_unid_med_dieta(d.cd_dieta),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(PLT_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao							
					from	dieta x,
							prescr_dieta d,
							prescr_dieta_hor c,
							prescr_medica a
					where	x.cd_dieta = d.cd_dieta
					and		d.nr_prescricao = c.nr_prescricao
					and		d.nr_prescricao	= a.nr_prescricao
					and		c.nr_prescricao = a.nr_prescricao
					and		c.nr_seq_dieta	= d.nr_sequencia
					and		a.nr_atendimento = nr_atendimento_p		
					and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'
					and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
					and		a.dt_validade_prescr	between dt_validade_limite_p	and dt_fim_w	
					and		coalesce(c.ie_situacao,'A') = 'A'
					group by
							d.cd_dieta,
							x.nm_dieta,
							c.dt_fim_horario,
							d.dt_suspensao,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							d.qt_parametro,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
							a.dt_liberacao,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao_farmacia,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							d.nr_dia_util,
							a.nr_prescricao,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao) t
		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			t.dt_horario,
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				t.cd_refeicao,
				t.nm_dieta,
				t.ie_status,
				t.ds_intervalo,
				t.nr_sequencia,
				t.ie_lib_pend_rep,
				t.ie_liberado,
				t.cd_intervalo,
				t.dt_extensao,
				t.ie_plano_atual,
				t.ie_horario_susp,
				t.ie_retrogrado,
				t.qt_parametro,
				t.ds_unidade,
				t.nr_dia_util,
				t.ie_erro,
				t.ie_pend_assinatura,
				t.ie_estendido,
				t.dt_validade_prescr,
				t.ie_via_aplicacao,
				t.ie_curta_duracao,
				t.cd_funcao_origem,
				t.ie_prescr_farm,
				t.ie_recem_nato,
				t.nr_prescricao
		
union
	
		select	to_char(d.cd_dieta) cd_refeicao,
				x.nm_dieta,
				substr(obter_status_hor_dieta_oral(null,d.dt_suspensao),1,1),
				obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
				d.nr_sequencia,
				substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
				plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
				d.cd_intervalo,
				PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
				substr(PLT_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
				CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
				coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
				d.qt_parametro,
				substr(obter_unid_med_dieta(d.CD_DIETA),1,150),
				d.nr_dia_util,
				CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
				substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
				substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
				a.dt_validade_prescr,
				d.ie_via_aplicacao,
				obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
				a.cd_funcao_origem,
				coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
				coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
				a.nr_prescricao
		from	dieta x,
				prescr_dieta d,	
				prescr_medica a
		where	x.cd_dieta = d.cd_dieta
		and		d.nr_prescricao	= a.nr_prescricao
		and		a.nr_atendimento = nr_atendimento_p		
		and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'
		and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
		and		(((get_ie_plano_por_setor = 'S') and
				  ((a.dt_validade_prescr between dt_inicial_horarios_p and dt_final_horarios_p) or (a.dt_inicio_prescr between dt_inicial_horarios_p and dt_final_horarios_p) or
				   (a.dt_inicio_prescr	> dt_inicial_horarios_p AND dt_final_horarios_p > a.dt_validade_prescr))) or
				 ((get_ie_plano_por_setor	= 'R') and
				  ((to_char(a.dt_rep_pt,'dd/mm/yyyy') = dt_plano_p) or (to_char(a.dt_rep_pt2,'dd/mm/yyyy') = dt_plano_p))))
		and		not exists (	select	1
								from	prescr_dieta_hor c
								where	c.nr_prescricao = d.nr_prescricao
								and		c.nr_prescricao = a.nr_prescricao
								and		d.nr_sequencia	= c.nr_seq_dieta)
		and		((((coalesce(a.dt_liberacao_medico, a.dt_liberacao) IS NOT NULL AND (coalesce(a.dt_liberacao_medico, a.dt_liberacao))::text <> '')) and (ie_prescr_usuario_p = 'N')) or (a.nm_usuario_original = nm_usuario_p))
		and		(((ie_estendidos_p = 0) and (PLT_obter_se_estendido(d.dt_extensao,dt_referencia_p) = 'S')) or
				 ((ie_estendidos_p = 1) and (PLT_obter_se_estendido(d.dt_extensao,dt_referencia_p) = 'N')) or (ie_estendidos_p = 2))
		and		(((ie_edicao_p = 'S') and (plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) = 'N')) or (ie_edicao_p = 'N'))		
		and		((ie_exibir_hor_suspensos_p = 'S') or (coalesce(d.dt_suspensao::text, '') = ''))
		group by
				d.cd_dieta,
				x.nm_dieta,	
				d.dt_suspensao,
				d.cd_intervalo,
				d.nr_sequencia,
				a.dt_liberacao_medico,
				substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
				a.dt_liberacao,
				a.dt_liberacao_farmacia,
				d.qt_parametro,
				d.nr_dia_util,
				substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
				PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
				a.nr_prescricao,
				CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
				a.ie_prescr_emergencia,
				d.ie_erro,
				substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
				substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
				a.dt_validade_prescr,
				d.ie_via_aplicacao,
				obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
				a.cd_funcao_origem,
				a.ie_prescr_farm,
				coalesce(a.ie_recem_nato, 'N'),
				a.nr_prescricao;
	else
		open	c01 for
		SELECT	cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		from (	SELECT	c.cd_refeicao,
							x.ds_valor_dominio nm_dieta,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(plt_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(d.ie_suspenso,'N') ie_suspenso,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							substr(obter_unid_med_dieta(d.cd_dieta),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao
					from	valor_dominio_v x,
							prescr_dieta d,
							prescr_dieta_hor c,
							prescr_medica a
					where	x.vl_dominio = c.cd_refeicao
					and		d.nr_prescricao = c.nr_prescricao
					and		d.nr_prescricao = a.nr_prescricao
					and		c.nr_prescricao = a.nr_prescricao
					and		d.nr_sequencia	= c.nr_seq_dieta
					and		x.cd_dominio = 99
					and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'
					and		a.cd_pessoa_fisica = current_setting('plt_gerar_horarios_pck.cd_pessoa_fisica_w')::varchar(10)		
					and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
					and		a.dt_validade_prescr	between dt_validade_limite_p	and dt_fim_w	
					and		coalesce(c.ie_situacao,'A') = 'A'
					and		(c.cd_refeicao IS NOT NULL AND c.cd_refeicao::text <> '')
					group by
							c.cd_refeicao,
							x.ds_valor_dominio,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao,
							a.dt_liberacao_farmacia,
							d.QT_PARAMETRO,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							d.nr_dia_util,
							coalesce(d.ie_suspenso,'N'),
							a.nr_prescricao,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao) t
		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			t.dt_horario,
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		
union

		select	cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao
		from (	select	to_char(d.cd_dieta) cd_refeicao,
							x.nm_dieta,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(plt_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(d.ie_suspenso,'N') ie_suspenso,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							Substr(obter_unid_med_dieta(d.CD_DIETA),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao
					from	dieta x,
							prescr_dieta d,
							prescr_dieta_hor c,
							prescr_medica a
					where	d.nr_prescricao = c.nr_prescricao
					and		d.nr_prescricao = a.nr_prescricao
					and		c.nr_prescricao = a.nr_prescricao
					and		c.nr_seq_dieta	= d.nr_sequencia
					and		x.cd_dieta 	= d.cd_dieta
					and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'
					and		a.cd_pessoa_fisica = current_setting('plt_gerar_horarios_pck.cd_pessoa_fisica_w')::varchar(10)		
					and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
					and		a.dt_validade_prescr	between dt_validade_limite_p	and dt_fim_w	
					and		coalesce(c.ie_situacao,'A') = 'A'
					and		coalesce(c.cd_refeicao::text, '') = ''
					group by
							d.cd_dieta,
							x.nm_dieta,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							coalesce(d.ie_suspenso,'N'),
							a.dt_liberacao,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao_farmacia,
							PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							a.nr_prescricao,
							d.nr_dia_util,
							d.QT_PARAMETRO,
							Substr(Obter_Unid_Med_Dieta(d.CD_DIETA),1,150),
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(PLT_obter_ie_validade(PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao) t
		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			t.dt_horario,
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				cd_refeicao,
				nm_dieta,
				ds_intervalo,
				nr_sequencia,
				ie_lib_pend_rep,
				ie_liberado,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_suspenso,
				ie_retrogrado,
				qt_parametro,
				ds_unidade,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				ie_estendido,
				dt_validade_prescr,
				ie_via_aplicacao,
				ie_curta_duracao,
				cd_funcao_origem,
				ie_prescr_farm,
				ie_recem_nato,
				nr_prescricao;
			
		open	c02 for
		SELECT	t.cd_refeicao,
				t.nm_dieta,
				t.ie_status,
				t.ds_intervalo,
				t.nr_sequencia,
				t.ie_lib_pend_rep,
				t.ie_liberado,
				t.cd_intervalo,
				t.dt_extensao,
				t.ie_plano_atual,
				t.ie_horario_susp,
				t.ie_retrogrado,
				t.qt_parametro,
				t.ds_unidade,
				t.nr_dia_util,
				t.ie_erro,
				t.ie_pend_assinatura,
				t.ie_estendido,
				t.dt_validade_prescr,
				t.ie_via_aplicacao,
				t.ie_curta_duracao,
				t.cd_funcao_origem,
				t.ie_prescr_farm,
				t.ie_recem_nato,
				t.nr_prescricao
		from (	SELECT	to_char(d.cd_dieta) cd_refeicao,
							x.nm_dieta,
							substr(obter_status_hor_dieta_oral(null,d.dt_suspensao),1,1) ie_status,
							obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
							d.nr_sequencia,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
							plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
							d.cd_intervalo,
							plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
							substr(plt_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
							coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
							d.qt_parametro,
							substr(obter_unid_med_dieta(d.cd_dieta),1,150) ds_unidade,
							d.nr_dia_util,
							CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
							substr(PLT_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
							a.cd_funcao_origem,
							coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao
					from	dieta x,
							prescr_dieta d,
							prescr_dieta_hor c,
							prescr_medica a
					where	x.cd_dieta = d.cd_dieta
					and		d.nr_prescricao = c.nr_prescricao
					and		d.nr_prescricao	= a.nr_prescricao
					and		c.nr_prescricao = a.nr_prescricao
					and		c.nr_seq_dieta	= d.nr_sequencia
					and		a.cd_pessoa_fisica = current_setting('plt_gerar_horarios_pck.cd_pessoa_fisica_w')::varchar(10)
					and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'		
					and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
					and		a.dt_validade_prescr	between dt_validade_limite_p	and dt_fim_w	
					and		coalesce(c.ie_situacao,'A') = 'A'
					group by
							d.cd_dieta,
							x.nm_dieta,
							c.dt_fim_horario,
							d.dt_suspensao,
							d.cd_intervalo,
							d.nr_sequencia,
							a.dt_liberacao_medico,
							a.dt_liberacao,
							d.nr_dia_util,
							substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
							a.dt_liberacao_farmacia,
							plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
							d.qt_parametro,
							substr(obter_unid_med_dieta(d.cd_dieta),1,150),
							a.nr_prescricao,
							CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
							a.ie_prescr_emergencia,
							d.ie_erro,
							substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
							substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
							a.dt_validade_prescr,
							d.ie_via_aplicacao,
							obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
							a.cd_funcao_origem,
							a.ie_prescr_farm,
							coalesce(a.ie_recem_nato, 'N'),
							c.dt_horario,
							a.nr_prescricao,
							d.dt_suspensao) t
		where	plt_obter_se_item_periodo(	dt_validade_limite_p,	dt_fim_w,				get_ie_plano_por_setor,		dt_plano_p,			t.dt_horario,
											dt_inicial_horarios_p,	dt_final_horarios_p,	ie_prescr_usuario_p,		nm_usuario_p,		ie_estendidos_p,
											dt_referencia_p,		ie_edicao_p,			ie_exibir_hor_suspensos_p,	t.dt_suspensao,		'D',
											t.nr_sequencia,			t.nr_prescricao,		'O') = 'S'
		group by
				t.cd_refeicao,
				t.nm_dieta,
				t.ie_status,
				t.ds_intervalo,
				t.nr_sequencia,
				t.ie_lib_pend_rep,
				t.ie_liberado,
				t.cd_intervalo,
				t.dt_extensao,
				t.ie_plano_atual,
				t.ie_horario_susp,
				t.ie_retrogrado,
				t.qt_parametro,
				t.ds_unidade,
				t.nr_dia_util,
				t.ie_erro,
				t.ie_pend_assinatura,
				t.ie_estendido,
				t.dt_validade_prescr,
				t.ie_via_aplicacao,
				t.ie_curta_duracao,
				t.cd_funcao_origem,
				t.ie_prescr_farm,
				t.ie_recem_nato,
				t.nr_prescricao
		
union
	
		select	to_char(d.cd_dieta),
				x.nm_dieta,
				substr(obter_status_hor_dieta_oral(null,d.dt_suspensao),1,1),
				obter_desc_intervalo_prescr(d.cd_intervalo) ds_intervalo,
				d.nr_sequencia,
				substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1) ie_lib_pend_rep,
				plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) ie_liberado,
				d.cd_intervalo,
				PLT_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade) dt_extensao,
				substr(plt_obter_se_plano_atual(a.nr_prescricao),1,1) ie_plano_atual,
				CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END  ie_horario_susp,
				coalesce(a.ie_prescr_emergencia,'N') ie_retrogrado,
				d.qt_parametro,
				substr(obter_unid_med_dieta(d.cd_dieta),1,150),
				d.nr_dia_util,
				CASE WHEN plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia)='N' THEN d.ie_erro  ELSE null END  ie_erro,
				substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1) ie_pend_assinatura,
				substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1) ie_estendido,
				a.dt_validade_prescr,
				d.ie_via_aplicacao,
				obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type) ie_curta_duracao,
				a.cd_funcao_origem,
				coalesce(a.ie_prescr_farm, 'N') ie_prescr_farm,
				coalesce(a.ie_recem_nato, 'N') ie_recem_nato,
				a.nr_prescricao
		from	dieta x,
				prescr_dieta d,	
				prescr_medica a
		where	x.cd_dieta = d.cd_dieta
		and		d.nr_prescricao	= a.nr_prescricao
		and		a.cd_pessoa_fisica = current_setting('plt_gerar_horarios_pck.cd_pessoa_fisica_w')::varchar(10)		
		and		a.nr_prescricao	between current_setting('plt_gerar_horarios_pck.nr_prescr_inicial_w')::bigint	and current_setting('plt_gerar_horarios_pck.nr_prescr_final_w')::bigint
		and		((get_ie_plano_por_setor = 'S' AND a.dt_validade_prescr between dt_validade_limite_p and dt_fim_w) or
				 ((get_ie_plano_por_setor	= 'R') and
				  ((to_char(a.dt_rep_pt,'dd/mm/yyyy') = dt_plano_p) or (to_char(a.dt_rep_pt2,'dd/mm/yyyy') = dt_plano_p))))
		and		plt_gerar_horarios_pck.obter_se_mostra_rep_inter(a.ie_motivo_prescricao) = 'S'
		and		not exists (	select	1
								from	prescr_dieta_hor c
								where	c.nr_prescricao = d.nr_prescricao
								and		c.nr_prescricao = a.nr_prescricao
								and		d.nr_sequencia	= c.nr_seq_dieta)
		and		((((coalesce(a.dt_liberacao_medico, a.dt_liberacao) IS NOT NULL AND (coalesce(a.dt_liberacao_medico, a.dt_liberacao))::text <> '')) and (ie_prescr_usuario_p = 'N')) or (a.nm_usuario_original = nm_usuario_p))
		and		(((ie_estendidos_p = 0) and (PLT_obter_se_estendido(d.dt_extensao,dt_referencia_p) = 'S')) or
				 ((ie_estendidos_p = 1) and (PLT_obter_se_estendido(d.dt_extensao,dt_referencia_p) = 'N')) or (ie_estendidos_p = 2))
		and		(((ie_edicao_p = 'S') and (plt_obter_se_liberado(a.dt_liberacao_medico,a.dt_liberacao,a.dt_liberacao_farmacia) = 'N')) or (ie_edicao_p = 'N'))		
		and		((ie_exibir_hor_suspensos_p = 'S') or (coalesce(d.dt_suspensao::text, '') = ''))
		group by
				d.cd_dieta,
				x.nm_dieta,	
				d.dt_suspensao,
				d.cd_intervalo,
				d.nr_sequencia,
				a.dt_liberacao_medico,
				substr(plt_obter_lib_pend_prescr(a.dt_liberacao_medico,a.dt_liberacao,CASE WHEN a.ie_lib_farm='S' THEN a.dt_liberacao_farmacia  ELSE clock_timestamp() END ),1,1),
				a.dt_liberacao,
				d.qt_parametro,
				Substr(obter_unid_med_dieta(d.cd_dieta),1,150),
				a.dt_liberacao_farmacia,
				plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),
				d.nr_dia_util,
				a.nr_prescricao,
				CASE WHEN get_ie_identifica_hor_susp='S' THEN coalesce(d.ie_horario_susp,'N')  ELSE null END ,
				a.ie_prescr_emergencia,
				d.ie_erro,
				substr(obter_pendencia_assinatura(nm_usuario_p,a.nr_prescricao,'PR'),1,1),
				substr(plt_obter_ie_validade(plt_obter_dt_extensao(d.dt_extensao,a.dt_validade_prescr,a.nr_horas_validade),a.dt_validade_prescr,dt_referencia_p),1,1),
				a.dt_validade_prescr,
				d.ie_via_aplicacao,
				obter_ie_curta_duracao(a.nr_prescricao,dt_referencia_p, current_setting('plt_gerar_horarios_pck.cd_perfil_w')::perfil.cd_perfil%type, current_setting('plt_gerar_horarios_pck.cd_pessoa_usuario_w')::pessoa_fisica.cd_pessoa_fisica%type, current_setting('plt_gerar_horarios_pck.cd_especialidade_w')::especialidade_medica.cd_especialidade%type),
				a.cd_funcao_origem,
				a.ie_prescr_farm,
				coalesce(a.ie_recem_nato, 'N'),
				a.nr_prescricao;
	end if;
	
	if (ie_horarios_dietas_orais_p <> 'N') then
		begin
		loop
		fetch c01 into	cd_refeicao_w,
				ds_refeicao_w,
				ds_inter_prescr_w,
				nr_seq_dieta_w,
				current_setting('plt_gerar_horarios_pck.ie_lib_pend_rep_w')::varchar(15),
				ie_liberado_w,
				cd_intervalo_w,
				dt_extensao_w,
				ie_plano_atual_w,
				ie_horario_susp_w,
				ie_status_item_w,
				ie_retrogrado_w,
				QT_PARAMETRO_w,
				ds_unidade_w,
				nr_dia_util_w,
				ie_erro_w,
				ie_pend_assinatura_w,
				ie_estendido_w,
				dt_validade_prescr_w,
				ie_via_aplicacao_w,
				ie_curta_duracao_w,
				cd_funcao_origem_w,
				ie_interv_farm_w,
				ie_recem_nato_w,
				nr_prescricao_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			
			select	coalesce(Obter_classif_setor_atend(nr_atendimento_p),0)
			into STRICT	cd_classif_setor_w
			;
			
			if (ie_estendido_w	= 'P') and (coalesce(dt_extensao_w::text, '') = '') then
				dt_extensao_w	:= dt_validade_prescr_w;
			end if;	
			
			if (((ie_estendido_w = 'P') and
				((coalesce(cd_funcao_origem_w,924) <> 950) or (ie_curta_duracao_w = 'N'))) or (cd_classif_setor_w = 1)) then
				ie_estendido_w	:= 'N';
			end if;
				
			select	nextval('w_rep_t_seq')
			into STRICT	nr_seq_wadep_w
			;

			insert into w_rep_t(
				nr_sequencia,
				nm_usuario,
				nr_prescricao,
				nr_seq_item,
				ie_tipo_item,
				cd_item,
				ds_item,
				ie_acm_sn,
				ie_diferenciado,
				nr_seq_proc_interno,
				nr_agrupamento,
				ds_interv_prescr,
				ie_pendente_liberacao,
				ie_liberado,
				ie_copiar,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_status_item,
				ie_retrogrado,
				qt_item,
				cd_unid_med_qtde,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				dt_atualizacao,
				ie_estendido,
				ie_via_aplicacao,
				ds_cor_titulo,
				ie_curta_duracao,
				ie_interv_farm,
				ie_item_rn)
			values (
				nr_seq_wadep_w,
				nm_usuario_p,
				nr_prescricao_w,
				nr_seq_dieta_w,
				'D',
				cd_refeicao_w,
				ds_refeicao_w,
				'N',
				'N',
				0,
				0,
				ds_inter_prescr_w,
				current_setting('plt_gerar_horarios_pck.ie_lib_pend_rep_w')::varchar(15),
				ie_liberado_w,
				CASE WHEN ie_status_item_w='S' THEN 'N'  ELSE ie_copiar_w END ,
				cd_intervalo_w,
				dt_extensao_w,
				ie_plano_atual_w,
				ie_horario_susp_w,
				ie_status_item_w,
				ie_retrogrado_w,
				QT_PARAMETRO_w,
				ds_unidade_w,
				nr_dia_util_w,
				ie_erro_w,
				ie_pend_assinatura_w,
				clock_timestamp(),
				ie_estendido_w,
				ie_via_aplicacao_w,
				ds_cor_titulo_w,
				ie_curta_duracao_w,
				ie_interv_farm_w,
				ie_recem_nato_w);
			end;
		end loop;
		close c01;
		end;
	else
		begin

		loop
		fetch c02 into	cd_refeicao_w,
				ds_refeicao_w,
				ie_status_item_w,
				ds_inter_prescr_w,
				nr_seq_dieta_w,
				current_setting('plt_gerar_horarios_pck.ie_lib_pend_rep_w')::varchar(15),
				ie_liberado_w,
				cd_intervalo_w,
				dt_extensao_w,
				ie_plano_atual_w,
				ie_horario_susp_w,
				ie_retrogrado_w,
				QT_PARAMETRO_w,
				ds_unidade_w,
				nr_dia_util_w,
				ie_erro_w,
				ie_pend_assinatura_w,
				ie_estendido_w,
				dt_validade_prescr_w,
				ie_via_aplicacao_w,
				ie_curta_duracao_w,
				cd_funcao_origem_w,
				ie_interv_farm_w,
				ie_recem_nato_w,
				nr_prescricao_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			
			select	coalesce(Obter_classif_setor_atend(nr_atendimento_p),0)
			into STRICT	cd_classif_setor_w
			;
			
			if (ie_estendido_w	= 'P') and (coalesce(dt_extensao_w::text, '') = '') then
				dt_extensao_w	:= dt_validade_prescr_w;
			end if;	

			if (((ie_estendido_w = 'P') and
				((coalesce(cd_funcao_origem_w,924) <> 950) or (ie_curta_duracao_w = 'N'))) or (cd_classif_setor_w = 1)) then
				ie_estendido_w	:= 'N';
			end if;
			
			select	nextval('w_rep_t_seq')
			into STRICT	nr_seq_wadep_w
			;

			insert into w_rep_t(
				nr_sequencia,
				nm_usuario,
				nr_prescricao,
				nr_seq_item,
				ie_tipo_item,
				cd_item,
				ds_item,
				ie_acm_sn,
				ie_diferenciado,
				nr_seq_proc_interno,
				nr_agrupamento,
				ie_status_item,
				ds_interv_prescr,
				ie_pendente_liberacao,
				ie_liberado,
				ie_copiar,
				cd_intervalo,
				dt_extensao,
				ie_plano_atual,
				ie_horario_susp,
				ie_retrogrado,
				qt_item,
				cd_unid_med_qtde,
				nr_dia_util,
				ie_erro,
				ie_pend_assinatura,
				dt_atualizacao,
				ie_estendido,
				ie_via_aplicacao,
				ds_cor_titulo,
				ie_curta_duracao,
				ie_interv_farm,
				ie_item_rn)
			values (
				nr_seq_wadep_w,
				nm_usuario_p,
				nr_prescricao_w,
				nr_seq_dieta_w,
				'D',
				cd_refeicao_w,
				ds_refeicao_w,
				'N',
				'N',
				0,
				0,
				ie_status_item_w,
				ds_inter_prescr_w,
				current_setting('plt_gerar_horarios_pck.ie_lib_pend_rep_w')::varchar(15),
				ie_liberado_w,
				CASE WHEN ie_status_item_w='S' THEN 'N'  ELSE ie_copiar_w END ,
				cd_intervalo_w,
				dt_extensao_w,
				ie_plano_atual_w,
				ie_horario_susp_w,
				ie_retrogrado_w,
				QT_PARAMETRO_w,
				ds_unidade_w,
				nr_dia_util_w,
				ie_erro_w,
				ie_pend_assinatura_w,
				clock_timestamp(),
				ie_estendido_w,
				ie_via_aplicacao_w,
				ds_cor_titulo_w,
				ie_curta_duracao_w,
				ie_interv_farm_w,
				ie_recem_nato_w);
			end;
		end loop;
		close c02;
		end;
	end if;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE plt_gerar_horarios_pck.plt_obter_dieta_oral ( cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, cd_perfil_p bigint, nm_usuario_p text, nr_atendimento_p bigint, dt_inicial_horarios_p timestamp, dt_final_horarios_p timestamp, dt_validade_limite_p timestamp, ie_horarios_dietas_orais_p text, ie_prescr_usuario_p text, nr_seq_regra_p bigint, ie_edicao_p text, ie_estendidos_p bigint, dt_referencia_p timestamp, ie_exibir_hor_suspensos_p text, dt_plano_p text) FROM PUBLIC;
