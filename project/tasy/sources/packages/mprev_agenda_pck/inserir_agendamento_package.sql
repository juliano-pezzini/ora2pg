-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/*---------------------------------------------------------------------------------------------------------------------------------------------
	|			INSERIR_AGENDAMENTO				|
	*/
	/* Inserir o agendamento */

CREATE OR REPLACE PROCEDURE mprev_agenda_pck.inserir_agendamento (dados_agenda_p dados_agendamento, nr_seq_gerada_p INOUT bigint, ie_agenda_composta_p text) AS $body$
DECLARE


	nr_seq_gerada_w		bigint := null;
	cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type	:= wheb_usuario_pck.get_cd_estabelecimento;
	nr_seq_local_atend_w	mprev_local_atend.nr_sequencia%type;
	nr_seq_partic_ciclo_item_w	mprev_partic_ciclo_item.nr_sequencia%type;

	
BEGIN

	select 	max(a.nr_seq_local_atend)
	into STRICT	nr_seq_local_atend_w
	from 	mprev_local_atend_agenda a
	where	a.cd_agenda	= dados_agenda_p.cd_agenda
	and	a.ie_situacao 	= 'A';

	if (coalesce(dados_agenda_p.nr_sequencia,0) = 0 or current_setting('mprev_agenda_pck.ie_forma_agendamento_w')::varchar(3) = 'T') then

		select	nextval('mprev_seq_agendamento_seq')
		into STRICT	nr_seq_gerada_w
		;

		insert	into   mprev_agendamento(nr_sequencia, cd_agenda, nr_minuto_duracao,
						 dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
						 nm_usuario_nrec, ie_status_agenda, nr_seq_participante,
						 dt_agendamento, dt_agenda, ds_observacao,
						 cd_agenda_local, cd_agenda_profissional, ds_utilizacao,
						 nr_seq_turma, nr_seq_horario_turma, ie_tipo_atendimento,
						 ie_profissional_espec, ie_forma_atendimento, nr_seq_captacao,
						 ie_previsto, nr_seq_partic_ciclo_item, cd_estabelecimento,
						 nr_seq_ativ_extra, ie_tipo_agendamento, nr_seq_grupo_tema,
						 nr_seq_local_atend, nr_seq_forma_atend, nr_seq_status_pac,
						 nr_seq_pac_senha_fila)
					  values (nr_seq_gerada_w, dados_agenda_p.cd_agenda, dados_agenda_p.nr_minutos,
						 clock_timestamp(), dados_agenda_p.nm_usuario, clock_timestamp(),
						 dados_agenda_p.nm_usuario, 'A', dados_agenda_p.nr_seq_participante,
						 clock_timestamp(), dados_agenda_p.dt_agendamento, dados_agenda_p.ds_observacao,
						 dados_agenda_p.cd_agenda_local, dados_agenda_p.cd_agenda_profissional , dados_agenda_p.ds_utilizacao,
						 dados_agenda_p.nr_seq_turma, dados_agenda_p.nr_seq_horario_turma, dados_agenda_p.ie_tipo_atendimento,
						 dados_agenda_p.ie_profissional_espec, dados_agenda_p.ie_forma_atendimento, dados_agenda_p.nr_seq_captacao,
						 dados_agenda_p.ie_previsto, dados_agenda_p.nr_seq_partic_ciclo_item, cd_estabelecimento_w,
						 dados_agenda_p.nr_seq_ativ_extra, dados_agenda_p.ie_tipo_agendamento, dados_agenda_p.nr_seq_grupo_tema,
						 nr_seq_local_atend_w, dados_agenda_p.nr_seq_forma_atend, dados_agenda_p.nr_seq_status_pac,
						 dados_agenda_p.nr_seq_pac_senha_fila);
						
		if (current_setting('mprev_agenda_pck.ie_forma_agendamento_w')::varchar(3) = 'T') then
			/*Transferir os recursos do agendamento transferido*/

			CALL mprev_agenda_pck.transferir_recursos_agenda(dados_agenda_p.nr_sequencia, nr_seq_gerada_w, dados_agenda_p.nm_usuario);
			/*Trasnferir os participantes previstos na turma para o novo agendamento gerado*/

			CALL mprev_agenda_pck.transferir_previstos_turma_ag(dados_agenda_p.nr_sequencia, nr_seq_gerada_w, dados_agenda_p.nm_usuario);
			/*Transferir as atividades do agendamento*/

			CALL mprev_agenda_pck.transferir_atividades_agenda(dados_agenda_p.nr_sequencia, nr_seq_gerada_w, dados_agenda_p.nm_usuario);
			/*transferir os anexos do agendamento*/

			CALL mprev_agenda_pck.transferir_anexos_agenda(dados_agenda_p.nr_sequencia, nr_seq_gerada_w, dados_agenda_p.nm_usuario);
			
		elsif (ie_agenda_composta_p = 'N') then

			/*Gravar os recursos da tabela w_mprev_agendamento_rec na tabela mprev_agendamento_recurso.
			Nesse momento ja foi consistido se pode utilizar os recursos para esse agendamento*/
			CALL mprev_agenda_pck.gravar_mprev_agendamento_rec(dados_agenda_p.nr_seq_w_agendamento, nr_seq_gerada_w);
			/*Grava as atividades da tabela w_mprev_agendamento_ativ na tabela mprev_agendamento_ativ*/

			CALL mprev_agenda_pck.gravar_mprev_agendamento_ativ(dados_agenda_p.nr_seq_w_agendamento, nr_seq_gerada_w);
			/*Grava os registros da tabela w_hdm_agendamento_anexo na tabela hdm_agendamento_anexo*/

			CALL mprev_agenda_pck.gravar_hdm_agendamento_anexo(dados_agenda_p.nr_seq_w_agendamento, nr_seq_gerada_w);
			
			/* Limpar tabelas temporarias */

			delete from w_mprev_ag_ativ_item a
			where 1 = 1
			and  exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	x.dt_atualizacao < pkg_date_utils.start_of(clock_timestamp(), 'DD',0)
					and	x.nm_usuario = dados_agenda_p.nm_usuario);

			delete from w_mprev_agendamento_ativ a
			where	1 = 1
			and	exists (SELECT 1
					from	w_mprev_agendamento x
					where	x.nr_sequencia = a.nr_seq_w_agendamento
					and	x.nm_usuario = dados_agenda_p.nm_usuario
					and	x.dt_atualizacao < pkg_date_utils.start_of(clock_timestamp(), 'DD',0));
		
			delete from w_mprev_agendamento
			where	nm_usuario = dados_agenda_p.nm_usuario
			and	dt_atualizacao < pkg_date_utils.start_of(clock_timestamp(), 'DD',0);

			delete	from w_mprev_ag_ativ_item a
			where	exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	x.nr_seq_agendamento = 0
					and	x.nm_usuario = dados_agenda_p.nm_usuario);
			
			delete	from w_mprev_agendamento_ativ a
			where	exists (SELECT	1
					from	w_mprev_agendamento x
					where	x.nr_sequencia	= a.nr_seq_w_agendamento
					and	x.nr_seq_agendamento = 0
					and	x.nm_usuario = dados_agenda_p.nm_usuario);
					
			delete 	from w_mprev_agendamento
			where	nr_seq_agendamento = 0
			and	nm_usuario = dados_agenda_p.nm_usuario;
			
		end if;
		
	else

		select 	max(nr_seq_partic_ciclo_item)
		into STRICT	nr_seq_partic_ciclo_item_w
		from 	mprev_agendamento
		where 	nr_sequencia = dados_agenda_p.nr_sequencia;
		
		if	((nr_seq_partic_ciclo_item_w IS NOT NULL AND nr_seq_partic_ciclo_item_w::text <> '' AND dados_agenda_p.nr_seq_partic_ciclo_item <> nr_seq_partic_ciclo_item_w) or (coalesce(dados_agenda_p.nr_seq_partic_ciclo_item::text, '') = '')) then
		
			update	mprev_partic_ciclo_item
			set		dt_atualizacao = clock_timestamp(),
					nm_usuario = dados_agenda_p.nm_usuario,
					ie_status = 'P'
			where	nr_sequencia = nr_seq_partic_ciclo_item_w
			and		ie_status = 'A';
		
		end if;
		
		update	mprev_agendamento
		set	nr_minuto_duracao = dados_agenda_p.nr_minutos,
			dt_atualizacao = clock_timestamp(),
			nm_usuario = dados_agenda_p.nm_usuario,
			ds_observacao = dados_agenda_p.ds_observacao,
			dt_agenda = dados_agenda_p.dt_agendamento,
			nr_seq_participante = dados_agenda_p.nr_seq_participante,
			cd_agenda_profissional = dados_agenda_p.cd_agenda_profissional,
			cd_agenda_local = dados_agenda_p.cd_agenda_local,
			ds_utilizacao = dados_agenda_p.ds_utilizacao,
			nr_seq_turma = dados_agenda_p.nr_seq_turma,
			ie_tipo_atendimento = dados_agenda_p.ie_tipo_atendimento,
			ie_profissional_espec = dados_agenda_p.ie_profissional_espec,
			ie_forma_atendimento = dados_agenda_p.ie_forma_atendimento,
			nr_seq_captacao = dados_agenda_p.nr_seq_captacao,
			ie_previsto = dados_agenda_p.ie_previsto,
			cd_estabelecimento = cd_estabelecimento_w,
			ie_tipo_agendamento = dados_agenda_p.ie_tipo_agendamento,
			nr_seq_ativ_extra = dados_agenda_p.nr_seq_ativ_extra,
			nr_seq_partic_ciclo_item = dados_agenda_p.nr_seq_partic_ciclo_item,
			nr_seq_grupo_tema = dados_agenda_p.nr_seq_grupo_tema,
			nr_seq_local_atend = nr_seq_local_atend_w,
			nr_seq_forma_atend = dados_agenda_p.nr_seq_forma_atend,
			nr_seq_pac_senha_fila = dados_agenda_p.nr_seq_pac_senha_fila
		where	nr_sequencia = dados_agenda_p.nr_sequencia;

		if (ie_agenda_composta_p = 'N') then
			/*Gravar os recursos da tabela w_mprev_agendamento_rec na tabela mprev_agendamento_recurso.
			Nesse momento ja foi consistido de pode utilizar os recursos para esse agendamento*/
			CALL mprev_agenda_pck.gravar_mprev_agendamento_rec(dados_agenda_p.nr_seq_w_agendamento, dados_agenda_p.nr_sequencia);

			/*Grava as atividades da tabela w_mprev_agendamento_ativ na tabela mprev_agendamento_ativ*/

			CALL mprev_agenda_pck.gravar_mprev_agendamento_ativ(dados_agenda_p.nr_seq_w_agendamento, dados_agenda_p.nr_sequencia);

			/*Grava os registros da tabela w_hdm_agendamento_anexo na tabela hdm_agendamento_anexo*/

			CALL mprev_agenda_pck.gravar_hdm_agendamento_anexo(dados_agenda_p.nr_seq_w_agendamento, dados_agenda_p.nr_sequencia);

			/* Limpar tabelas temporarias */

	
			delete	from w_mprev_ag_ativ_item a
			where	exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	x.nr_seq_agendamento = dados_agenda_p.nr_sequencia);

			delete	from w_mprev_agendamento_ativ a
			where	exists (SELECT	1
					from	w_mprev_agendamento x
					where	x.nr_sequencia	= a.nr_seq_w_agendamento
					and	 x.nr_seq_agendamento = dados_agenda_p.nr_sequencia);
			
			delete 	from w_mprev_agendamento
			where	nm_usuario	= dados_agenda_p.nm_usuario
			and	nr_seq_agendamento	= dados_agenda_p.nr_sequencia;


			delete	from w_mprev_ag_ativ_item a
			where	exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	x.nr_seq_agendamento = 0
					and	x.nm_usuario = dados_agenda_p.nm_usuario);

			delete	from w_mprev_agendamento_ativ a
			where	exists (SELECT	1
					from	w_mprev_agendamento x
					where	x.nr_sequencia	= a.nr_seq_w_agendamento
					and	x.nr_seq_agendamento = 0
					and	x.nm_usuario = dados_agenda_p.nm_usuario);
			
		
			delete 	from w_mprev_agendamento
			where	nr_seq_agendamento = 0
			and	nm_usuario = dados_agenda_p.nm_usuario;
			
		end if;
				
	end if;

	nr_seq_gerada_p := coalesce(nr_seq_gerada_w,dados_agenda_p.nr_sequencia);

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_agenda_pck.inserir_agendamento (dados_agenda_p dados_agendamento, nr_seq_gerada_p INOUT bigint, ie_agenda_composta_p text) FROM PUBLIC;
