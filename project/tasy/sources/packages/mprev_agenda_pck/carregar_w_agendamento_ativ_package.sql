-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/*---------------------------------------------------------------------------------------------------------------------------------------------
	| CARREGAR OS DADOS DA TABELA MPREV_AGENDAMENTO_ATIV PARA W_MPREV_AGENDAMENTO_ATIV                |
	*/
CREATE OR REPLACE PROCEDURE mprev_agenda_pck.carregar_w_agendamento_ativ (nr_seq_agendamento_p bigint, nr_seq_w_agendamento_p bigint) AS $body$
DECLARE


	nr_seq_w_agendamento_w		w_mprev_agendamento.nr_sequencia%type;
	nr_seq_w_agendamento_ativ_w	w_mprev_agendamento_ativ.nr_sequencia%type;
	nm_usuario_w			usuario.nm_usuario%type;
	ie_executado_w			w_mprev_agendamento_ativ.ie_executado%type;
	nr_seq_partic_ciclo_item_w	mprev_partic_ciclo_item.nr_sequencia%type;
	nr_seq_part_ciclo_item_ativ_w	mprev_part_cic_item_ativ.nr_sequencia%type;

	C01 CURSOR FOR
		SELECT	a.nr_seq_atividade,
			a.nr_seq_part_cic_item_ativ
		from	mprev_agendamento_ativ a
		where	a.nr_seq_agendamento =  nr_seq_agendamento_p
		group by
			a.nr_seq_atividade,
			a.nr_seq_part_cic_item_ativ
		order by a.nr_seq_atividade;

	C02 CURSOR(nr_seq_atividade_pc	mprev_atividade_plano.nr_sequencia%type,
			nr_seq_part_ciclo_item_ativ_pc	mprev_part_cic_item_ativ.nr_sequencia%type) FOR
		SELECT a.dt_atualizacao,
			a.nm_usuario,
			a.dt_atualizacao_nrec,
			a.nm_usuario_nrec,
			a.nr_seq_ativ_plano_aval,
			a.nr_seq_ativ_plano_exame,
			a.ie_executado from (
		SELECT 	*
		from 	mprev_agendamento_ativ a
		where 	a.nr_seq_agendamento = nr_seq_agendamento_p
		and 	a.nr_seq_atividade = nr_seq_atividade_pc
		and	a.nr_seq_part_cic_item_ativ = nr_seq_part_ciclo_item_ativ_pc
		
union all

		select 	*
		from 	mprev_agendamento_ativ a
		where 	a.nr_seq_agendamento = nr_seq_agendamento_p
		and 	a.nr_seq_atividade = nr_seq_atividade_pc
		and	coalesce(a.nr_seq_part_cic_item_ativ::text, '') = ''
		and	coalesce(nr_seq_part_ciclo_item_ativ_pc::text, '') = '') a
		order by a.nr_sequencia;

	C03 CURSOR FOR
		SELECT	nr_sequencia,
			dt_atualizacao,
			dt_atualizacao_nrec,
			ie_executado,
			nm_usuario,
			nm_usuario_nrec,
			nr_seq_ativ_plano_aval,
			nr_seq_ativ_plano_exame,
			nr_seq_atividade
		from 	mprev_part_cic_item_ativ a
		where 	a.nr_seq_partic_ciclo_item = nr_seq_partic_ciclo_item_w;

	
BEGIN
		if (coalesce(nr_seq_agendamento_p,0) > 0) then

			/*Busca o nr_seq_partic_ciclo_item da w_mprev_agendamento*/

			select	max(nr_seq_partic_ciclo_item),
				nm_usuario
			into STRICT	nr_seq_partic_ciclo_item_w,
				nm_usuario_w
			from 	mprev_agendamento
			where nr_sequencia = nr_seq_agendamento_p
			group by nm_usuario;

			/*Busca sequencia da tabela w_mprev_agendamento para inserir no campo nr_seq_w_agendamento*/

			select	max(nr_sequencia)
			into STRICT	nr_seq_w_agendamento_w
			from	w_mprev_agendamento
			where	nr_seq_agendamento = nr_seq_agendamento_p;

			/*Deletar os registros da tabela w_mprev_ag_ativ_item*/

			delete	from w_mprev_ag_ativ_item a
			where	exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	x.nr_seq_agendamento = nr_seq_agendamento_p);

			/*Deletar os registros da tabela w_mprev_agenadamento_ativ*/

			delete	from w_mprev_agendamento_ativ a
			where	exists (SELECT	1
				from	w_mprev_agendamento x
				where	x.nr_sequencia	= a.nr_seq_w_agendamento
				and	x.nr_seq_agendamento = nr_seq_agendamento_p);

			for r_C01 in C01 loop
				begin
					insert into w_mprev_agendamento_ativ(
						nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nr_seq_atividade,
						nr_seq_part_cic_item_ativ,
						nr_seq_w_agendamento)
					values (nextval('w_mprev_agendamento_ativ_seq'),
						nm_usuario_w,
						clock_timestamp(),
						r_C01.nr_seq_atividade,
						r_C01.nr_seq_part_cic_item_ativ,
						nr_seq_w_agendamento_w)
					returning nr_sequencia into nr_seq_w_agendamento_ativ_w;

					for r_C02 in C02(r_C01.nr_seq_atividade, r_C01.nr_seq_part_cic_item_ativ) loop
						begin
							insert into w_mprev_ag_ativ_item(
								nr_sequencia,
								dt_atualizacao,
								dt_atualizacao_nrec,
								ie_executado,
								nm_usuario,
								nm_usuario_nrec,
								nr_seq_ativ_plano_aval,
								nr_seq_ativ_plano_exame,
								nr_seq_w_agendamento_ativ)
							values (nextval('w_mprev_ag_ativ_item_seq'),
								r_C02.dt_atualizacao,
								r_C02.dt_atualizacao_nrec,
								r_C02.ie_executado,
								r_C02.nm_usuario,
								r_C02.nm_usuario_nrec,
								r_C02.nr_seq_ativ_plano_aval,
								r_C02.nr_seq_ativ_plano_exame,
								nr_seq_w_agendamento_ativ_w);
						end;
					end loop;

					select 	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
					into STRICT	ie_executado_w
					from 	w_mprev_ag_ativ_item a
					where not exists ( 	SELECT 	1
								from 	w_mprev_ag_ativ_item x
								where	x.nr_seq_w_agendamento_ativ = a.nr_seq_w_agendamento_ativ
								and	x.ie_executado = 'N')
					and a.nr_seq_w_agendamento_ativ = nr_seq_w_agendamento_ativ_w;

					update	w_mprev_agendamento_ativ
					set	ie_executado = ie_executado_w
					where	nr_sequencia = nr_seq_w_agendamento_ativ_w;

				end;

			end loop;

		elsif (coalesce(nr_seq_w_agendamento_p,0) > 0) then

			nr_seq_w_agendamento_w := nr_seq_w_agendamento_p;

			/*Busca o nr_seq_partic_ciclo_item da w_mprev_agendamento*/

			select	max(nr_seq_partic_ciclo_item),
				nm_usuario
			into STRICT	nr_seq_partic_ciclo_item_w,
				nm_usuario_w
			from 	w_mprev_agendamento
			where 	nr_sequencia = nr_seq_w_agendamento_w
			group by nm_usuario;

			/*Deletar os registros da tabela w_mprev_ag_ativ_item*/

			delete	from w_mprev_ag_ativ_item a
			where	exists (SELECT 1
					from	w_mprev_agendamento x,
						w_mprev_agendamento_ativ y
					where	x.nr_sequencia = y.nr_seq_w_agendamento
					and	y.nr_sequencia = a.nr_seq_w_agendamento_ativ
					and	(y.nr_seq_part_cic_item_ativ IS NOT NULL AND y.nr_seq_part_cic_item_ativ::text <> '')
					and	x.nr_sequencia = nr_seq_w_agendamento_p);

			/*Deletar os registros da tabela w_mprev_agenadamento_ativ*/

			delete	from w_mprev_agendamento_ativ a
			where	exists (SELECT	1
				from	w_mprev_agendamento x
				where	x.nr_sequencia	= a.nr_seq_w_agendamento
				and	x.nr_sequencia = nr_seq_w_agendamento_p)
			and	(a.nr_seq_part_cic_item_ativ IS NOT NULL AND a.nr_seq_part_cic_item_ativ::text <> '');

			if (nr_seq_partic_ciclo_item_w IS NOT NULL AND nr_seq_partic_ciclo_item_w::text <> '') then
				for r_C03 in C03 loop
					begin

						insert into w_mprev_agendamento_ativ(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nr_seq_atividade,
							nr_seq_part_cic_item_ativ,
							nr_seq_w_agendamento)
						values (nextval('w_mprev_agendamento_ativ_seq'),
							nm_usuario_w,
							clock_timestamp(),
							r_C03.nr_seq_atividade,
							r_C03.nr_sequencia,
							nr_seq_w_agendamento_w)
						returning nr_sequencia into nr_seq_w_agendamento_ativ_w;

						insert into w_mprev_ag_ativ_item(
							nr_sequencia,
							dt_atualizacao,
							dt_atualizacao_nrec,
							ie_executado,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_ativ_plano_aval,
							nr_seq_ativ_plano_exame,
							nr_seq_w_agendamento_ativ)
						values (nextval('w_mprev_ag_ativ_item_seq'),
							clock_timestamp(),
							clock_timestamp(),
							r_C03.ie_executado,
							nm_usuario_w,
							nm_usuario_w,
							r_C03.nr_seq_ativ_plano_aval,
							r_C03.nr_seq_ativ_plano_exame,
							nr_seq_w_agendamento_ativ_w);
					end;
				end loop;
			end if;
		end if;

		commit;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_agenda_pck.carregar_w_agendamento_ativ (nr_seq_agendamento_p bigint, nr_seq_w_agendamento_p bigint) FROM PUBLIC;
