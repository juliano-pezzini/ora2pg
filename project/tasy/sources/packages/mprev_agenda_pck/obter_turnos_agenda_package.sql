-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

	
	/*---------------------------------------------------------------------------------------------------------------------------------------------
	|			OBTER_TURNOS_AGENDA				|
	*/
	/* Verifica se o horario de agendamento e valido ou nao (HDM - Grupos de Atendimento Coletivo).*/

	


CREATE OR REPLACE FUNCTION mprev_agenda_pck.obter_turnos_agenda (cd_agenda_p bigint, dt_agendamento_p timestamp, dt_final_agendamento_p timestamp) RETURNS varchar AS $body$
DECLARE


	hr_valida_invalida_w		varchar(10) := 'N';
	nr_dia_semana_w		smallint := pkg_date_utils.get_weekday(dt_agendamento_p);
	dt_horario_w		timestamp := to_date(to_char(dt_agendamento_p, 'hh24:mi'), 'hh24:mi');
	dt_horario_final_w	timestamp;
	hr_inicial_agenda_turno_w	timestamp;
	hr_final_agenda_turno_w	timestamp;
	hr_inicial_inter_turno_w	timestamp;
	nr_minuto_inter_turno_w bigint;
	hr_final_inter_turno_w	timestamp;
	intervalo_valido boolean := true;
	hr_inicial_valida_w	boolean := false;
	hr_final_valida_w	boolean := false;
	

	C01 CURSOR FOR
		SELECT to_date(to_char(hr_inicial_intervalo,'hh24:mi'), 'hh24:mi') as hr_inicial_intervalo_turno, to_date(to_char(hr_final_intervalo,'hh24:mi'), 'hh24:mi') as hr_final_intervalo_turno, nr_minuto_intervalo
		from  agenda_turno
		where	cd_agenda = cd_agenda_p
		and (ie_dia_semana	= nr_dia_semana_w or (ie_dia_semana = '9' and nr_dia_semana_w > 1 and nr_dia_semana_w < 7))
		and (coalesce(dt_final_vigencia::text, '') = '' or trunc(dt_final_vigencia) >= trunc(clock_timestamp()))
		order by hr_inicial_intervalo_turno, hr_final_intervalo_turno;
		
	C02 CURSOR FOR	
		SELECT  to_date(to_char(hr_inicial, 'hh24:mi'), 'hh24:mi') as hr_inicial_turno, to_date(to_char(hr_final, 'hh24:mi'), 'hh24:mi') as hr_final_turno, nr_minuto_intervalo
		from	agenda_turno
    where  cd_agenda = cd_agenda_p
    and (ie_dia_semana  = nr_dia_semana_w or (ie_dia_semana = '9' and nr_dia_semana_w > 1 and nr_dia_semana_w < 7))
	and (coalesce(dt_final_vigencia::text, '') = '' or trunc(dt_final_vigencia) >= trunc(clock_timestamp()))
    order by hr_inicial_turno, hr_final_turno;

  
BEGIN
  

  open C01;
  loop
  fetch C01 into
    hr_inicial_inter_turno_w,
    hr_final_inter_turno_w,
    nr_minuto_inter_turno_w;
  EXIT WHEN NOT FOUND; /* apply on C01 */
    begin

    if (dt_final_agendamento_p IS NOT NULL AND dt_final_agendamento_p::text <> '') then
      dt_horario_final_w := to_date(to_char(dt_final_agendamento_p, 'hh24:mi'), 'hh24:mi');
    else
      -- Se nao tem a data final do agendamento, o sistem vai usar como base o intervalo de minutos
      dt_horario_final_w := (dt_horario_w + (nr_minuto_inter_turno_w * (1/24/60)));
    end if;

		
    if  ((hr_inicial_inter_turno_w IS NOT NULL AND hr_inicial_inter_turno_w::text <> '' AND hr_final_inter_turno_w IS NOT NULL AND hr_final_inter_turno_w::text <> '') -- se nao tiver intervalo ja retorna o registro
      and  ((dt_horario_w > hr_inicial_inter_turno_w and dt_horario_w < hr_final_inter_turno_w)
      or (dt_horario_final_w > hr_inicial_inter_turno_w and dt_horario_final_w < hr_final_inter_turno_w))) then -- senao vai verificar se a data de agendamento esta fora do intervalo
      
      intervalo_valido := false;

    end if;

	
    end;
  end loop;
  close C01;
  
  
  if (intervalo_valido) then
    open C02;
    loop
    fetch C02 into
      hr_inicial_agenda_turno_w,
      hr_final_agenda_turno_w,
      nr_minuto_inter_turno_w;
    EXIT WHEN NOT FOUND; /* apply on C02 */
      begin

      if (dt_final_agendamento_p IS NOT NULL AND dt_final_agendamento_p::text <> '') then
        dt_horario_final_w := to_date(to_char(dt_final_agendamento_p, 'hh24:mi'), 'hh24:mi');
      else
        -- Se nao tem a data final do agendamento, o sistem vai usar como base o intervalo de minutos
        dt_horario_final_w := (dt_horario_w + (nr_minuto_inter_turno_w * (1/24/60)));
      end if;

      if (dt_horario_w >= hr_inicial_agenda_turno_w and dt_horario_w <= hr_final_agenda_turno_w) then 
      
        hr_inicial_valida_w := true;

      end if;

      if (dt_horario_final_w >= hr_inicial_agenda_turno_w and dt_horario_final_w <= hr_final_agenda_turno_w) then 
        
        hr_final_valida_w := true;

      end if;
		
      end;
    end loop;
    close C02;

    if (hr_inicial_valida_w and hr_final_valida_w) then 
      
      hr_valida_invalida_w := 'S';

    end if;

  end if;

  return  hr_valida_invalida_w;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION mprev_agenda_pck.obter_turnos_agenda (cd_agenda_p bigint, dt_agendamento_p timestamp, dt_final_agendamento_p timestamp) FROM PUBLIC;
