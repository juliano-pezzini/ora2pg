-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/*---------------------------------------------------------------------------------------------------------------------------------------------
	|			AGENDAR_HORARIO					|
	*/
	/* Procedure principal para a consitencia da agenda */

CREATE OR REPLACE PROCEDURE mprev_agenda_pck.agendar_horario ( nr_sequencia_p mprev_agendamento.nr_sequencia%type, cd_agenda_p mprev_agendamento.cd_agenda%type, nr_seq_participante_p mprev_agendamento.nr_seq_participante%type, nr_seq_turma_p mprev_agendamento.nr_seq_turma%type, nr_seq_horario_turma_p mprev_agendamento.nr_seq_horario_turma%type, ds_utilizacao_p mprev_agendamento.ds_utilizacao%type, cd_agenda_profissional_p mprev_agendamento.cd_agenda_profissional%type, cd_agenda_local_p mprev_agendamento.cd_agenda_local%type, dt_agendamento_p timestamp, dt_final_agendamento_p timestamp, nr_minutos_p mprev_agendamento.nr_minuto_duracao%type, ds_observacao_p mprev_agendamento.ds_observacao%type, ie_marcar_horario_p text, nm_usuario_p mprev_agendamento.nm_usuario%type, ie_forma_agendamento_p text, /* N :Normal,  T : Transferencia */
 ie_confirmacao_p text, ie_consistir_p text, nr_seq_aprovacao_turma_p bigint, nr_seq_captacao_p bigint, ie_previsto_p mprev_agendamento.ie_previsto%type, nr_seq_partic_ciclo_item_p mprev_agendamento.nr_seq_partic_ciclo_item%type, ie_forma_atendimento_p mprev_agendamento.ie_forma_atendimento%type, /*L-Local, D-Domicilio, T- Telefone*/
 nr_seq_ativ_extra_p mprev_agendamento.nr_seq_ativ_extra%type, ie_tipo_agendamento_p mprev_agendamento.ie_tipo_agendamento%type, /*ATE: Atendimento,  ATI:Atividade*/
 ie_tipo_atendimento_p mprev_agendamento.ie_tipo_atendimento%type, /*I - Individual, C - Coletivo, P - Captacao*/
 nr_seq_w_agendamento_p w_mprev_agendamento.nr_sequencia%type, nr_seq_grupo_tema_p mprev_grupo_tema_encontro.nr_sequencia%type, nr_seq_forma_atend_p mprev_forma_atendimento.nr_sequencia%type, nr_seq_status_pac_p mprev_agendamento.nr_seq_status_pac%type, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint, nr_seq_novo_agendamento_p INOUT bigint, nr_seq_pac_senha_fila_p mprev_agendamento.nr_seq_pac_senha_fila%type default null) AS $body$
DECLARE


	dados_agenda_w		dados_agendamento;
	dados_agenda_composta_w	dados_agendamento;

	nr_sequencia_ag_local_w	bigint := null;
	nr_sequencia_ag_prof_w	bigint := null;
	nr_sequencia_w		bigint := 0;
	nr_seq_gerada_w		bigint := null;
	cd_agenda_local_w	bigint;
	cd_profissional_w	pessoa_fisica.cd_pessoa_fisica%type;
	qt_registro_w		bigint;
	ie_feriado_w 		varchar(1) := 'N';

	qt_mensagens_erro_ww	smallint := 0;
	qt_mensagens_atencao_ww	smallint := 0;
	qt_mensagens_confirm_ww	smallint := 0;

	cd_agenda_w		mprev_agendamento.cd_agenda%type;
	cd_agenda_prof_temp_w	mprev_agendamento.cd_agenda%type;
	cd_agenda_local_temp_w	mprev_agendamento.cd_agenda%type;

	
BEGIN

	PERFORM set_config('mprev_agenda_pck.ie_forma_agendamento_w', coalesce(ie_forma_agendamento_p, 'N'), false);
	PERFORM set_config('mprev_agenda_pck.ie_confirmacao_w', coalesce(ie_confirmacao_p, 'N'), false);

	dados_agenda_w.nr_sequencia 		:= nr_sequencia_p;
	dados_agenda_w.cd_agenda 		:= cd_agenda_p;
	dados_agenda_w.nr_seq_participante 	:= nr_seq_participante_p;
	dados_agenda_w.nr_seq_turma 		:= nr_seq_turma_p;
	dados_agenda_w.nr_seq_horario_turma 	:= nr_seq_horario_turma_p;
	dados_agenda_w.ds_utilizacao 		:= ds_utilizacao_p;
	dados_agenda_w.cd_agenda_profissional 	:= cd_agenda_profissional_p;
	dados_agenda_w.cd_agenda_local 		:= cd_agenda_local_p;
	dados_agenda_w.dt_agendamento 		:= dt_agendamento_p;
	dados_agenda_w.dt_final_agendamento 	:= dt_final_agendamento_p;
	dados_agenda_w.nr_minutos 		:= nr_minutos_p;
	dados_agenda_w.ds_observacao 		:= ds_observacao_p;
	dados_agenda_w.ie_marcar_horario 	:= ie_marcar_horario_p;
	dados_agenda_w.nm_usuario 		:= nm_usuario_p;
	dados_agenda_w.nr_seq_captacao 		:= nr_seq_captacao_p;
	dados_agenda_w.ie_previsto 		:= ie_previsto_p;
	dados_agenda_w.nr_seq_partic_ciclo_item := nr_seq_partic_ciclo_item_p;
	dados_agenda_w.ie_forma_atendimento 	:= ie_forma_atendimento_p; /*L-Local, D-Domicilio, T- Telefone*/
	dados_agenda_w.nr_seq_ativ_extra 	:= nr_seq_ativ_extra_p;
	dados_agenda_w.ie_tipo_agendamento 	:= ie_tipo_agendamento_p;
	dados_agenda_w.ie_tipo_atendimento 	:= ie_tipo_atendimento_p;
	dados_agenda_w.nr_seq_w_agendamento	:= nr_seq_w_agendamento_p;
	dados_agenda_w.nr_seq_grupo_tema	:= nr_seq_grupo_tema_p;
	dados_agenda_w.nr_seq_forma_atend	:= nr_seq_forma_atend_p;
	dados_agenda_w.nr_seq_status_pac	:= nr_seq_status_pac_p;
	if (nr_seq_pac_senha_fila_p = 0) then
		dados_agenda_w.nr_seq_pac_senha_fila	:= null;
	else
		dados_agenda_w.nr_seq_pac_senha_fila	:= nr_seq_pac_senha_fila_p;
	end if;
	

	if (coalesce(dados_agenda_w.ie_profissional_espec::text, '') = '') then
		select	coalesce(max(ie_profissional_espec),'N')
		into STRICT	dados_agenda_w.ie_profissional_espec
		from	mprev_equipe_profissional a,
			mprev_funcao_colaborador b
		where	a.nr_seq_funcao = b.nr_sequencia
		and	pkg_date_utils.start_of(dados_agenda_w.dt_agendamento, 'DD', 0) between  pkg_date_utils.start_of(b.dt_inclusao,'DD',0) and pkg_date_utils.start_of(coalesce(b.dt_exclusao, clock_timestamp()), 'DD', 0);
	end if;

	if (coalesce(dados_agenda_w.ie_forma_atendimento::text, '') = '' and (dados_agenda_w.nr_seq_participante IS NOT NULL AND dados_agenda_w.nr_seq_participante::text <> '')) then
		select	coalesce(max(CASE WHEN ie_tipo_atendimento='P' THEN  'L'  ELSE ie_tipo_atendimento END ), 'L')
		into STRICT	dados_agenda_w.ie_forma_atendimento
		from	mprev_partic_tipo_atend
		where	nr_seq_participante = dados_agenda_w.nr_seq_participante
		and	pkg_date_utils.start_of(dados_agenda_w.dt_agendamento, 'DD', 0) between pkg_date_utils.start_of(dt_inicio,'DD',0) and pkg_date_utils.start_of(coalesce(dt_fim, clock_timestamp()), 'DD', 0);
	end if;

	if (current_setting('mprev_agenda_pck.ie_forma_agendamento_w')::varchar(3) <> 'T') then
		CALL CALL mprev_agenda_pck.limpar_inconsistencias(dados_agenda_w);
	end if;

	if (coalesce(ie_consistir_p, 'S') = 'S') then
		SELECT * FROM mprev_agenda_pck.consistir_agendamento(dados_agenda_w, nm_usuario_p, qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww) INTO STRICT qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww;
	end if;


	dados_agenda_composta_w := dados_agenda_w;

	-- Verica se nao existe nenhuma agenda vinculada
	if (coalesce(dados_agenda_w.cd_agenda_local, 0) = 0 and
		coalesce(dados_agenda_w.cd_agenda_profissional, 0) = 0 and
		coalesce(dados_agenda_w.nr_sequencia, 0) > 0) then
		begin
			select	cd_agenda,
				cd_agenda_local,
				cd_agenda_profissional,
				nr_sequencia
			into STRICT	cd_agenda_w,
				cd_agenda_local_temp_w,
				cd_agenda_prof_temp_w,
				nr_sequencia_w
			from	mprev_agendamento
			where	nr_seq_agendamento_ref = dados_agenda_w.nr_sequencia
			and	ie_status_agenda <> 'C'
			and	ie_status_agenda <> 'E';

			if (cd_agenda_local_temp_w IS NOT NULL AND cd_agenda_local_temp_w::text <> '') then
				dados_agenda_w.cd_agenda_local := cd_agenda_w;
				nr_sequencia_ag_local_w := nr_sequencia_w;
			else
				dados_agenda_w.cd_agenda_profissional := cd_agenda_w;
				nr_sequencia_ag_prof_w := nr_sequencia_w;
			end if;
		exception
		when others then
			null;
		end;
	end if;

	if (coalesce(dados_agenda_w.cd_agenda_local, 0) > 0) then
		-- Cosiste a agenda do local de atendimento
		if (coalesce(dados_agenda_w.nr_sequencia, 0) > 0 and coalesce(nr_sequencia_ag_local_w::text, '') = '') then
			-- Pega a sequencia do agendamento do local
			select	coalesce(max(nr_seq_agendamento_ref),0)
			into STRICT	nr_sequencia_ag_local_w
			from	mprev_agendamento
			where	nr_sequencia = dados_agenda_w.nr_sequencia
			and	ie_status_agenda <> 'C'
			and	ie_status_agenda <> 'E';
		end if;

		dados_agenda_composta_w.nr_sequencia := nr_sequencia_ag_local_w;
		dados_agenda_composta_w.cd_agenda := dados_agenda_w.cd_agenda_local;
		dados_agenda_composta_w.cd_agenda_local := null;

		if (coalesce(ie_consistir_p, 'S') = 'S') then
			SELECT * FROM mprev_agenda_pck.consistir_agendamento( dados_agenda_composta_w, nm_usuario_p, qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww ) INTO STRICT qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww;
		end if;
	elsif (coalesce(dados_agenda_w.cd_agenda_profissional, 0) > 0) then
		-- Cosiste a agenda do profissional
		if (coalesce(dados_agenda_w.nr_sequencia, 0) > 0 and coalesce(nr_sequencia_ag_prof_w::text, '') = '') then
			-- Pega a sequencia da agenda do profissional
			select	coalesce(max(nr_seq_agendamento_ref),0)
			into STRICT	nr_sequencia_ag_prof_w
			from	mprev_agendamento
			where	nr_sequencia = dados_agenda_w.nr_sequencia
			and	ie_status_agenda <> 'C'
			and	ie_status_agenda <> 'E';
		end if;

		dados_agenda_composta_w.nr_sequencia := nr_sequencia_ag_prof_w;
		dados_agenda_composta_w.cd_agenda := dados_agenda_w.cd_agenda_profissional;
		dados_agenda_composta_w.cd_agenda_profissional := null;

		if (coalesce(ie_consistir_p, 'S') = 'S') then
			SELECT * FROM mprev_agenda_pck.consistir_agendamento( dados_agenda_composta_w, nm_usuario_p, qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww ) INTO STRICT qt_mensagens_erro_ww, qt_mensagens_atencao_ww, qt_mensagens_confirm_ww;
		end if;

	end if;

	/*Valida se o agendamento local de atendimento a agenda possua cadastro de profissional responsavel e ou foi informado no agendamento*/

	CALL mprev_agenda_pck.valida_prof_agenda_local_atend(dados_agenda_w, nm_usuario_p);

	/* Se for agendamento de aprovacao deve consistir se o profissional que esta sendo agendado tem a funcao correspondente */

	if (nr_seq_aprovacao_turma_p > 0) then
		select	cd_pessoa_fisica
		into STRICT	cd_profissional_w
		from	agenda a
		where	a.cd_agenda = cd_agenda_p;

		select	count(1)
		into STRICT	qt_registro_w
		from	mprev_grupo_turma_aprov b,
			mprev_equipe_profissional a
		where	a.cd_pessoa_fisica = cd_profissional_w
		and	a.nr_seq_funcao = b.nr_seq_funcao_prof
		and	b.nr_sequencia = nr_seq_aprovacao_turma_p;

		if (qt_registro_w = 0) then
			-- A agenda selecionada nao e do tipo requerido para aprovacao de entrada na turma.
			--wheb_mensagem_pck.exibir_mensagem_abort(294225);
			CALL CALL CALL mprev_agenda_pck.gravar_inconsistencia(	dados_agenda_w,
						294225,
						null,
						'E',
						10,
						null,
						nm_usuario_p);
		end if;
	end if;

	/* [OS-1732052] Verifica se o agendamento e em um feriado */

	ie_feriado_w := mprev_agenda_pck.obter_se_permite_feriado(dados_agenda_w.cd_agenda,
		dados_agenda_w.dt_agendamento, 
		dados_agenda_w.dt_final_agendamento);

	if (ie_feriado_w = 'S' and current_setting('mprev_agenda_pck.qt_mensagens_erro_w')::smallint = 0 and current_setting('mprev_agenda_pck.qt_mensagens_confirm_w')::smallint = 0 ) then
		if (coalesce(dados_agenda_w.nr_sequencia, 0) > 0) then
			begin
				select	cd_agenda_local,
					cd_agenda_profissional
				into STRICT	cd_agenda_local_temp_w,
					cd_agenda_prof_temp_w
				from	mprev_agendamento
				where	nr_sequencia = dados_agenda_w.nr_sequencia
				and	ie_status_agenda <> 'C'
				and	ie_status_agenda <> 'E';
			exception
			when others then
				cd_agenda_local_temp_w := null;
				cd_agenda_prof_temp_w := null;
			end;

			if ((cd_agenda_local_temp_w IS NOT NULL AND cd_agenda_local_temp_w::text <> '') and (dados_agenda_w.cd_agenda_local <> cd_agenda_local_temp_w or coalesce(dados_agenda_w.cd_agenda_local::text, '') = '')) then
				update	mprev_agendamento
				set	ie_status_agenda = 'C',
					dt_atualizacao = clock_timestamp(),
					nm_usuario = dados_agenda_w.nm_usuario
				where	cd_agenda =  cd_agenda_local_temp_w
				and	dt_agenda = dados_agenda_w.dt_agendamento;
			elsif ((cd_agenda_prof_temp_w IS NOT NULL AND cd_agenda_prof_temp_w::text <> '') and (dados_agenda_w.cd_agenda_profissional <> cd_agenda_prof_temp_w or coalesce(dados_agenda_w.cd_agenda_profissional::text, '') = '')) then
				update	mprev_agendamento
				set	ie_status_agenda = 'C',
					dt_atualizacao = clock_timestamp(),
					nm_usuario = dados_agenda_w.nm_usuario
				where	cd_agenda =  cd_agenda_prof_temp_w
				and	dt_agenda = dados_agenda_w.dt_agendamento;
			end if;

		end if;

		nr_seq_gerada_w := mprev_agenda_pck.inserir_agendamento(dados_agenda_w, nr_seq_gerada_w, 'N');

		nr_seq_novo_agendamento_p	:= nr_seq_gerada_w;

		if (coalesce(dados_agenda_w.nr_sequencia,0) = 0) then
			dados_agenda_w.nr_sequencia := nr_seq_gerada_w;
		end if;

		if (coalesce(dados_agenda_w.cd_agenda_local, 0) > 0 or coalesce(dados_agenda_w.cd_agenda_profissional, 0) > 0) then
			/*Insere o agendamento vinculado de profisisonal ou local de atendimento*/

			
			nr_seq_gerada_w := mprev_agenda_pck.inserir_agendamento(dados_agenda_composta_w, nr_seq_gerada_w, 'S');

			if (nr_seq_gerada_w IS NOT NULL AND nr_seq_gerada_w::text <> '') then
				update	mprev_agendamento
				set	nr_seq_agendamento_ref = nr_seq_gerada_w
				where	nr_sequencia = nr_seq_novo_agendamento_p;
			end if;
		end if;

		/* Se o agendamento for para uma aprovacao, deve vincular o agendamento no mesmo, para deixar de ficar pendente */

		if (nr_seq_aprovacao_turma_p > 0) then
			update	mprev_grupo_turma_aprov
			set	nr_seq_agendamento 	= nr_seq_gerada_w,
				cd_pessoa_aprovacao	= cd_profissional_w
			where	nr_sequencia	= nr_seq_aprovacao_turma_p;
		end if;

		/* Se o agendamento for de uma captacao, deve mudar o status da mesma para triagem */

		if (nr_seq_captacao_p > 0) then
			update	mprev_captacao
			set	ie_status	= 'T',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_captacao_p;
		end if;
	end if;

	qt_mensagens_erro_p := current_setting('mprev_agenda_pck.qt_mensagens_erro_w')::smallint;
	qt_mensagens_atencao_p := current_setting('mprev_agenda_pck.qt_mensagens_atencao_w')::smallint;
	qt_mensagens_confirm_p := current_setting('mprev_agenda_pck.qt_mensagens_confirm_w')::smallint;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_agenda_pck.agendar_horario ( nr_sequencia_p mprev_agendamento.nr_sequencia%type, cd_agenda_p mprev_agendamento.cd_agenda%type, nr_seq_participante_p mprev_agendamento.nr_seq_participante%type, nr_seq_turma_p mprev_agendamento.nr_seq_turma%type, nr_seq_horario_turma_p mprev_agendamento.nr_seq_horario_turma%type, ds_utilizacao_p mprev_agendamento.ds_utilizacao%type, cd_agenda_profissional_p mprev_agendamento.cd_agenda_profissional%type, cd_agenda_local_p mprev_agendamento.cd_agenda_local%type, dt_agendamento_p timestamp, dt_final_agendamento_p timestamp, nr_minutos_p mprev_agendamento.nr_minuto_duracao%type, ds_observacao_p mprev_agendamento.ds_observacao%type, ie_marcar_horario_p text, nm_usuario_p mprev_agendamento.nm_usuario%type, ie_forma_agendamento_p text,  ie_confirmacao_p text, ie_consistir_p text, nr_seq_aprovacao_turma_p bigint, nr_seq_captacao_p bigint, ie_previsto_p mprev_agendamento.ie_previsto%type, nr_seq_partic_ciclo_item_p mprev_agendamento.nr_seq_partic_ciclo_item%type, ie_forma_atendimento_p mprev_agendamento.ie_forma_atendimento%type,  nr_seq_ativ_extra_p mprev_agendamento.nr_seq_ativ_extra%type, ie_tipo_agendamento_p mprev_agendamento.ie_tipo_agendamento%type,  ie_tipo_atendimento_p mprev_agendamento.ie_tipo_atendimento%type,  nr_seq_w_agendamento_p w_mprev_agendamento.nr_sequencia%type, nr_seq_grupo_tema_p mprev_grupo_tema_encontro.nr_sequencia%type, nr_seq_forma_atend_p mprev_forma_atendimento.nr_sequencia%type, nr_seq_status_pac_p mprev_agendamento.nr_seq_status_pac%type, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint, nr_seq_novo_agendamento_p INOUT bigint, nr_seq_pac_senha_fila_p mprev_agendamento.nr_seq_pac_senha_fila%type default null) FROM PUBLIC;
