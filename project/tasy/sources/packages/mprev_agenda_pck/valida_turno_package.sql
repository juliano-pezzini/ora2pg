-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/*---------------------------------------------------------------------------------------------------------------------------------------------
	|			VALIDA_TURNO					|
	*/
	/* A rotina vai verificar se o horario do agendamente esta compativel com o cadastro da agenda */

CREATE OR REPLACE PROCEDURE mprev_agenda_pck.valida_turno (dados_agenda_p dados_agendamento, nm_usuario_p text) AS $body$
DECLARE


	horario_v_i	varchar(1);
	nr_minutos_intervalo_ww	bigint := 0;
	ie_feriado_w		varchar(1):= 'S';
	cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type := wheb_usuario_pck.get_cd_estabelecimento;

	
BEGIN

	horario_v_i := mprev_agenda_pck.obter_turnos_agenda(dados_agenda_p.cd_agenda, dados_agenda_p.dt_agendamento, dados_agenda_p.dt_final_agendamento);


	ie_feriado_w := mprev_agenda_pck.obter_se_permite_feriado(dados_agenda_p.cd_agenda, dados_agenda_p.dt_agendamento, dados_agenda_p.dt_final_agendamento);

	if (horario_v_i <> 'S')  then
		--Sem horarios cadastrados para a data #@dt_agendamento#@.
		CALL CALL CALL mprev_agenda_pck.gravar_inconsistencia(dados_agenda_p, 339875,
			'DT_AGENDAMENTO='||pkg_date_formaters.to_varchar(dados_agenda_p.dt_agendamento, 'shortDate', cd_estabelecimento_w, nm_usuario_p),
			'E', '1', null, nm_usuario_p);
	end if;
	
	if (ie_feriado_w <> 'S') then
		/* [OS-1732052] quando feriado colidir com uma data da agenda, gerar apenas um aviso 
			mensagem: A data #@dt_agendamento#@ esta indisponivel por restricoes de feriado */
		CALL CALL CALL mprev_agenda_pck.gravar_inconsistencia(dados_agenda_p, 1056154,
			'DT_AGENDAMENTO='||pkg_date_formaters.to_varchar(dados_agenda_p.dt_agendamento, 'shortDate', cd_estabelecimento_w, nm_usuario_p), 
			'A', '12', null, nm_usuario_p);
	end if;
	/*Comentado por spkoth OS 785704
	else
		--Verifica se o intervalo e compativel com o intervalo definido no cadastro da agenda
		if	(dados_agenda_p.nr_minutos < nr_minutos_intervalo_w or mod(dados_agenda_p.nr_minutos, nr_minutos_intervalo_w) <> 0) then
			mprev_agenda_pck.gravar_inconsistencia(dados_agenda_p,269481, 'QT_MINUTOS='|| nr_minutos_intervalo_w,
					      'E', '8', null,nm_usuario_p);
		else
			--Verifica se a data inicial e compativel com o intervalo definido no cadastro da agenda
			nr_minutos_intervalo_ww := (to_number(to_char(dados_agenda_p.dt_agendamento,'hh24')) * 60) + to_number(to_char(dados_agenda_p.dt_final_agendamento,'mi'));
			if	(mod(nr_minutos_intervalo_ww, nr_minutos_intervalo_w) <> 0) then
				mprev_agenda_pck.gravar_inconsistencia(dados_agenda_p, 269481, 'QT_MINUTOS='|| nr_minutos_intervalo_w,
						      'E', '8', null,nm_usuario_p);

			end if;
		end if;
	end if;*/
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_agenda_pck.valida_turno (dados_agenda_p dados_agendamento, nm_usuario_p text) FROM PUBLIC;
