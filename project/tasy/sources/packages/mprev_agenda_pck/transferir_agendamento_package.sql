-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	/*---------------------------------------------------------------------------------------------------------------------------------------------
	|			TRANSFERIR_AGENDAMENTO				|
	*/
	/* Efetuar transferencia entre dois horarios */

CREATE OR REPLACE PROCEDURE mprev_agenda_pck.transferir_agendamento (nr_sequencia_p bigint, cd_agenda_destino_p bigint, dt_agenda_destino_p timestamp, ie_confirmar_p text, nm_usuario_p text, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint) AS $body$
DECLARE


	dados_agendamento_w		dados_agendamento;
	nr_seq_novo_agendamento_w	mprev_agendamento.nr_sequencia%type;
	nr_seq_agendamento_ref_w	mprev_agendamento.nr_seq_agendamento_ref%type;
	nr_seq_agendamento_transf_w	mprev_agendamento.nr_seq_agendamento_transf%type;
	nr_seq_ag_vinc_transf_w		mprev_agendamento.nr_seq_agendamento_transf%type;

	
BEGIN

	dados_agendamento_w := mprev_agenda_pck.carregar_dados_agenda(nr_sequencia_p, dados_agendamento_w);

	mprev_agenda_pck.agendar_horario(nr_sequencia_p,
			cd_agenda_destino_p,
			dados_agendamento_w.nr_seq_participante,
			dados_agendamento_w.nr_seq_turma,
			dados_agendamento_w.nr_seq_horario_turma,
			dados_agendamento_w.ds_utilizacao,
			dados_agendamento_w.cd_agenda_profissional,
			dados_agendamento_w.cd_agenda_local,
			dt_agenda_destino_p,
			(dt_agenda_destino_p + (dados_agendamento_w.nr_minutos/1440)),
			dados_agendamento_w.nr_minutos,
			dados_agendamento_w.ds_observacao,
			'S',
			nm_usuario_p,
			'T',
			ie_confirmar_p,
			'S',
			null,
			dados_agendamento_w.nr_seq_captacao,
			dados_agendamento_w.ie_previsto,
			dados_agendamento_w.nr_seq_partic_ciclo_item,
			dados_agendamento_w.ie_forma_atendimento,
			dados_agendamento_w.nr_seq_ativ_extra,
			dados_agendamento_w.ie_tipo_agendamento,
			dados_agendamento_w.ie_tipo_atendimento,
			dados_agendamento_w.nr_seq_w_agendamento,
			dados_agendamento_w.nr_seq_grupo_tema,
			dados_agendamento_w.nr_seq_forma_atend,
			dados_agendamento_w.nr_seq_status_pac,
			qt_mensagens_erro_p,
			qt_mensagens_atencao_p,
			qt_mensagens_confirm_p,
			nr_seq_novo_agendamento_w);

	if (nr_seq_novo_agendamento_w IS NOT NULL AND nr_seq_novo_agendamento_w::text <> '') then
		CALL CALL mprev_agenda_pck.cancelar_agendamento(nr_sequencia_p,
					dados_agendamento_w.nr_seq_agendamento_ref,
					dados_agendamento_w.nr_seq_partic_ciclo_item,
					null,
					'Transferido',
					'N',
					null,
					nm_usuario_p);

		update	mprev_agendamento
		set	nr_seq_agendamento_transf = nr_sequencia_p,
			nr_seq_partic_ciclo_item = dados_agendamento_w.nr_seq_partic_ciclo_item
		where	nr_sequencia = nr_seq_novo_agendamento_w;

		/*Tratamento para gravar o agendamento de referencia no novo agendamento criado quando vinculado uma agenda de local ou profissional*/

		select	max(a.nr_seq_agendamento_ref)
		into STRICT	nr_seq_ag_vinc_transf_w
		from	mprev_agendamento a
		where	a.nr_sequencia = nr_sequencia_p;

		if (coalesce(nr_seq_ag_vinc_transf_w,0) > 0) then

			select	max(a.nr_seq_agendamento_ref)
			into STRICT	nr_seq_agendamento_ref_w
			from	mprev_agendamento a
			where	a.nr_sequencia = nr_seq_novo_agendamento_w;

			if (coalesce(nr_seq_agendamento_ref_w,0) > 0) then
				update	mprev_agendamento
				set	nr_seq_agendamento_transf = nr_seq_ag_vinc_transf_w,
					nr_seq_partic_ciclo_item = dados_agendamento_w.nr_seq_partic_ciclo_item
				where	nr_sequencia = nr_seq_agendamento_ref_w;
			end if;

		else
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_ag_vinc_transf_w
			from	mprev_agendamento a
			where	a.nr_seq_agendamento_ref = nr_sequencia_p;

			if (coalesce(nr_seq_ag_vinc_transf_w,0) > 0) then

				select	max(a.nr_seq_agendamento_ref)
				into STRICT	nr_seq_agendamento_ref_w
				from	mprev_agendamento a
				where	a.nr_sequencia = nr_seq_novo_agendamento_w;

				if (coalesce(nr_seq_agendamento_ref_w,0) > 0) then
					update	mprev_agendamento
					set	nr_seq_agendamento_transf = nr_seq_ag_vinc_transf_w,
						nr_seq_partic_ciclo_item = dados_agendamento_w.nr_seq_partic_ciclo_item
					where	nr_sequencia = nr_seq_agendamento_ref_w;
				end if;

			end if;

		end if;

	end if;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_agenda_pck.transferir_agendamento (nr_sequencia_p bigint, cd_agenda_destino_p bigint, dt_agenda_destino_p timestamp, ie_confirmar_p text, nm_usuario_p text, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint) FROM PUBLIC;
