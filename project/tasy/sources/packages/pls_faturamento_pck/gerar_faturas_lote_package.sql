-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- pls_faturamento_pck.gerar_faturas_lote(Gerar as faturas)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.gerar_faturas_lote ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


-- Informacoes do segurado
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
nr_seq_congenere_pesq_w		pls_contrato_pagador.nr_seq_congenere%type;

-- Hierarquia das tabelas de faturamento
nr_seq_fatura_w			pls_fatura.nr_sequencia%type;
nr_seq_fatura_evento_w		pls_fatura_evento.nr_sequencia%type;
current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%type		pls_fatura_conta.nr_sequencia%type;

nr_seq_fat_proc_w		pls_fatura_proc.nr_sequencia%type;
nr_seq_fat_mat_w		pls_fatura_mat.nr_sequencia%type;

qt_motivo_imp_cob_w		integer;

c01 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	'P' ie_tipo_registro,
		nr_agrupamento,
		nr_seq_evento_fat,
		nr_seq_conta,
		nr_seq_segurado,
		ie_tipo_cobranca,
		cd_guia_referencia,
		coalesce(nr_seq_ops_congenere,nr_seq_congenere) nr_seq_congenere,
		nr_seq_conta_proc,
		null nr_seq_conta_mat,
		nr_seq_pos_proc,
		null nr_seq_pos_mat,
		nr_seq_pos_proc_fat,
		null nr_seq_pos_mat_fat,
		vl_item,
		vl_item_ndc,
		nr_seq_pos_proc_tx,
		nr_seq_pos_proc_tx_fat,
		null nr_seq_pos_mat_tx,
		null nr_seq_pos_mat_tx_fat,
		(	SELECT	x.dt_atendimento_referencia
			from	pls_conta	x
			where	x.nr_sequencia	= nr_seq_conta) dt_atendimento_ref_res,
		ie_tipo_protocolo,
		nr_seq_congenere_prot
	from	w_pls_lote_fat_proc
	where	nr_seq_lote_fat = nr_seq_lote_pc
	and	(nr_seq_evento_fat IS NOT NULL AND nr_seq_evento_fat::text <> '')
	
union all

	select	'M' ie_tipo_registro,
		nr_agrupamento,
		nr_seq_evento_fat,
		nr_seq_conta,
		nr_seq_segurado,
		ie_tipo_cobranca,
		cd_guia_referencia,
		coalesce(nr_seq_ops_congenere,nr_seq_congenere) nr_seq_congenere,
		null nr_seq_conta_proc,
		nr_seq_conta_mat,
		null nr_seq_pos_proc,
		nr_seq_pos_mat,
		null nr_seq_pos_proc_fat,
		nr_seq_pos_mat_fat,
		vl_item,
		vl_item_ndc,
		null nr_seq_pos_proc_tx,
		null nr_seq_pos_proc_tx_fat,
		nr_seq_pos_mat_tx,
		nr_seq_pos_mat_tx_fat,
		(	select	x.dt_atendimento_referencia
			from	pls_conta	x
			where	x.nr_sequencia	= nr_seq_conta) dt_atendimento_ref_res,
		ie_tipo_protocolo,
		nr_seq_congenere_prot
	from	w_pls_lote_fat_mat
	where	nr_seq_lote_fat = nr_seq_lote_pc
	and	(nr_seq_evento_fat IS NOT NULL AND nr_seq_evento_fat::text <> '')
	order by 1;
	
c02 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	a.nr_seq_conta,
		a.ie_impedimento_cobranca
	from	w_pls_lote_fat_proc	a
	where	a.nr_seq_lote_fat 	= nr_seq_lote_pc
	and	(a.ie_impedimento_cobranca IS NOT NULL AND a.ie_impedimento_cobranca::text <> '')
	and	exists (SELECT	1
			from	pls_fatura_conta 	x
			where	x.nr_seq_conta 		= a.nr_seq_conta)
	
union all

	select	a.nr_seq_conta,
		a.ie_impedimento_cobranca
	from	w_pls_lote_fat_mat	a
	where	a.nr_seq_lote_fat 	= nr_seq_lote_pc
	and	(a.ie_impedimento_cobranca IS NOT NULL AND a.ie_impedimento_cobranca::text <> '')
	and	exists (select	1
			from	pls_fatura_conta 	x
			where	x.nr_seq_conta 		= a.nr_seq_conta)
	group by a.nr_seq_conta, a.ie_impedimento_cobranca;
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

for r_c01_w in c01( nr_seq_lote_p ) loop
	-- Na data de referencia de rescisao, se nao possuir dt atendimento refenrencia na conta (!), vai usar o trunc do dia atual, para que considere a data de exclusao ate o final do dia
	SELECT * FROM pls_faturamento_pck.pls_obter_pagador_fatura(	r_c01_w.nr_seq_segurado, cd_estabelecimento_p, coalesce(r_c01_w.dt_atendimento_ref_res, trunc(clock_timestamp(),'dd')), nr_seq_pagador_w, nr_seq_congenere_pesq_w, r_c01_w.ie_tipo_protocolo, r_c01_w.nr_seq_congenere_prot) INTO STRICT nr_seq_pagador_w, nr_seq_congenere_pesq_w;
	
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
	
		-- Se for cooperado o vencimento sera a data da primeira mensalidade
		if (current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%coalesce(type::text, '') = '') and (coalesce(nr_seq_congenere_pesq_w::text, '') = '') then
			select	max(dt_primeira_mensalidade)
			into STRICT	current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type
			from	pls_contrato_pagador
			where	nr_sequencia = nr_seq_pagador_w;
		end if;
		PERFORM set_config('pls_faturamento_pck.dt_vencimento_w', coalesce(current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type, clock_timestamp()), false);
		
		-- Verifica se existe pls_fatura para este pagador
		select	max(nr_sequencia)
		into STRICT	nr_seq_fatura_w
		from	pls_fatura
		where	nr_seq_pagador		= nr_seq_pagador_w
		and	nr_seq_lote		= nr_seq_lote_p
		and	nr_agrupamento		= coalesce(r_c01_w.nr_agrupamento, nr_agrupamento);
		
		-- Gera pls_fatura se nao existe
		if (coalesce(nr_seq_fatura_w::text, '') = '') then
			select	nextval('pls_fatura_seq')
			into STRICT	nr_seq_fatura_w
			;
			
			insert into pls_fatura(	nr_sequencia, 			dt_atualizacao, 	nm_usuario,
						dt_atualizacao_nrec, 		nm_usuario_nrec, 	nr_seq_pagador,
						nr_seq_lote, 			dt_vencimento,		nr_seq_congenere,
						vl_fatura,			nr_agrupamento,		dt_mes_competencia,
						vl_total_ndc,			dt_vencimento_ndc,	nr_fatura,
						ie_tipo_fatura)
					values (nr_seq_fatura_w,		clock_timestamp(), 		nm_usuario_p,
						clock_timestamp(), 			nm_usuario_p, 		nr_seq_pagador_w,
						nr_seq_lote_p,			current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type,	nr_seq_congenere_pesq_w,
						0,				r_c01_w.nr_agrupamento,	current_setting('pls_faturamento_pck.dt_mesano_referencia_w')::pls_lote_faturamento.dt_mesano_referencia%type,
						0,				current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type,	nr_seq_fatura_w,
						current_setting('pls_faturamento_pck.ie_tipo_lote_w')::pls_lote_faturamento.ie_tipo_lote%type);
		end if;
		
		if (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') then
			-- Verifica se existe pls_fatura_evento
			select	max(nr_sequencia)
			into STRICT	nr_seq_fatura_evento_w
			from	pls_fatura_evento
			where	nr_seq_fatura	= nr_seq_fatura_w
			and	nr_seq_evento 	= r_c01_w.nr_seq_evento_fat;
			
			-- Gera pls_fatura_evento se nao existe
			if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
				insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 		nm_usuario_nrec, 		nr_seq_evento,
								nr_seq_fatura,			vl_evento)
							values (nextval('pls_fatura_evento_seq'),	clock_timestamp(),			nm_usuario_p,
								clock_timestamp(), 			nm_usuario_p,			r_c01_w.nr_seq_evento_fat,
								nr_seq_fatura_w,		0) returning nr_sequencia into nr_seq_fatura_evento_w;
			end if;
			
			-- Verificar se existe pls_fatura_conta
			select	max(nr_sequencia)
			into STRICT	current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%type
			from	pls_fatura_conta
			where	nr_seq_conta		= r_c01_w.nr_seq_conta
			and	nr_seq_segurado		= r_c01_w.nr_seq_segurado
			and	nr_seq_fatura_evento	= nr_seq_fatura_evento_w;
			
			-- Se nao existe gera o registro
			if (current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%coalesce(type::text, '') = '') then
				insert into pls_fatura_conta(	nr_sequencia, 			dt_atualizacao, 	nm_usuario,
								dt_atualizacao_nrec, 		nm_usuario_nrec, 	nr_seq_conta,
								nr_seq_fatura_evento, 		vl_faturado, 		nr_seq_segurado,
								ie_tipo_cobranca, 		nr_lote_contabil, 	vl_faturado_ndc,
								cd_guia_referencia, 		ie_tipo_vinculacao, 	nr_seq_congenere)
							values (nextval('pls_fatura_conta_seq'), 	clock_timestamp(), 		nm_usuario_p,
								clock_timestamp(), 			nm_usuario_p, 		r_c01_w.nr_seq_conta,
								nr_seq_fatura_evento_w, 	0, 			r_c01_w.nr_seq_segurado,
								r_c01_w.ie_tipo_cobranca, 	0, 			0,
								r_c01_w.cd_guia_referencia, 	'A', 			r_c01_w.nr_seq_congenere) returning nr_sequencia into current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%type;
			end if;
			
			if (r_c01_w.ie_tipo_registro = 'P') then
				insert into pls_fatura_proc(	nr_sequencia, 			dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 		nm_usuario_nrec,		nr_seq_conta_proc,
								nr_seq_fatura_conta, 		vl_faturado, 			ie_tipo_cobranca,
								nr_lote_contabil, 		vl_faturado_ndc,		nr_seq_conta_pos_estab,
								nr_seq_conta_pos_contab, 	nr_seq_pos_estab_taxa, 		nr_seq_pos_taxa_contab,
								nr_seq_pos_proc,		nr_seq_pos_proc_fat,		nr_seq_pos_proc_tx,
								nr_seq_pos_proc_tx_fat)
							values (nextval('pls_fatura_proc_seq'), 	clock_timestamp(), 			nm_usuario_p,
								clock_timestamp(), 			nm_usuario_p, 			r_c01_w.nr_seq_conta_proc,
								current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%type, 		r_c01_w.vl_item, 		r_c01_w.ie_tipo_cobranca,
								0, 				r_c01_w.vl_item_ndc,		null,
								null,			 	null, 				null,
								r_c01_w.nr_seq_pos_proc,	r_c01_w.nr_seq_pos_proc_fat,	r_c01_w.nr_seq_pos_proc_tx,
								r_c01_w.nr_seq_pos_proc_tx_fat) returning nr_sequencia into nr_seq_fat_proc_w;
								
				update	pls_conta_pos_proc
				set	nr_seq_lote_fat		= nr_seq_lote_p,
					nr_seq_evento_fat	= r_c01_w.nr_seq_evento_fat,
					ie_status_faturamento	= 'F'
				where	nr_sequencia		= r_c01_w.nr_seq_pos_proc;
			else

				insert into pls_fatura_mat(	nr_sequencia, 			dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 		nm_usuario_nrec, 		nr_seq_conta_mat,
								nr_seq_fatura_conta, 		vl_faturado, 			ie_tipo_cobranca,
								nr_lote_contabil, 		vl_faturado_ndc,		nr_seq_conta_pos_estab,
								nr_seq_conta_pos_contab,	nr_seq_pos_estab_taxa, 		nr_seq_pos_taxa_contab,
								nr_seq_pos_mat,			nr_seq_pos_mat_fat,		nr_seq_pos_mat_tx,
								nr_seq_pos_mat_tx_fat)
						values (	nextval('pls_fatura_mat_seq'), 	clock_timestamp(), 			nm_usuario_p,
								clock_timestamp(), 			nm_usuario_p, 			r_c01_w.nr_seq_conta_mat,
								current_setting('pls_faturamento_pck.nr_seq_fatura_conta_w')::pls_fatura_conta.nr_sequencia%type, 		r_c01_w.vl_item, 		r_c01_w.ie_tipo_cobranca,
								0,				r_c01_w.vl_item_ndc,		null,
								null, 				null,			 	null,
								r_c01_w.nr_seq_pos_mat,         r_c01_w.nr_seq_pos_mat_fat,	r_c01_w.nr_seq_pos_mat_tx,
								r_c01_w.nr_seq_pos_mat_tx_fat) returning nr_sequencia into nr_seq_fat_mat_w;
								
				update	pls_conta_pos_mat
				set	nr_seq_lote_fat		= nr_seq_lote_p,
					nr_seq_evento_fat	= r_c01_w.nr_seq_evento_fat,
					ie_status_faturamento	= 'F'
				where	nr_sequencia		= r_c01_w.nr_seq_pos_mat;
			end if;
		end if;
	end if;
end loop;

nr_seq_fatura_w := null;
for r_c02_w in c02( nr_seq_lote_p ) loop
	select	max(a.nr_seq_fatura)
	into STRICT	nr_seq_fatura_w
	from	pls_fatura_conta	b,
		pls_fatura_evento	a
	where	a.nr_sequencia 		= b.nr_seq_fatura_evento
	and	b.nr_seq_conta		= r_c02_w.nr_seq_conta;
	
	select	count(1)
	into STRICT	qt_motivo_imp_cob_w
	from	pls_fatura_motivo_imp_cob
	where 	(nr_seq_fatura IS NOT NULL AND nr_seq_fatura::text <> '')
	and	nr_seq_conta = r_c02_w.nr_seq_conta  LIMIT 1;
	
	if (qt_motivo_imp_cob_w = 0) then
		update	pls_fatura_motivo_imp_cob
		set	nr_seq_fatura 	= nr_seq_fatura_w,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_seq_conta	= r_c02_w.nr_seq_conta;
	end if;
	
	update	pls_fatura
	set	ie_impedimento_cobranca	= r_c02_w.ie_impedimento_cobranca,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_sequencia		= nr_seq_fatura_w;
end loop;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.gerar_faturas_lote ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
