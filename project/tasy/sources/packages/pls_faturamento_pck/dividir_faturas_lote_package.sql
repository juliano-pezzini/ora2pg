-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- DIVIDIR_FATURAS_LOTE dividir faturas com regra de valor)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.dividir_faturas_lote ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

				
current_setting('pls_faturamento_pck.qt_registro_w')::integer			integer := 0;
nr_seq_camara_w			pls_congenere_camara.nr_seq_camara%type;
nr_seq_fatura_nova_w		pls_fatura.nr_sequencia%type;
cd_guia_ref_old_w		pls_fatura_conta.cd_guia_referencia%type;
nr_seq_segurado_old_w		pls_segurado.nr_sequencia%type;
vl_conta_total_w		double precision := 0;
qt_conta_total_w		integer := 0;
qt_guia_total_w			integer := 0;
vl_maximo_fatura_w		double precision;
qt_max_conta_w			pls_regra_divisao_fatura.qt_max_conta%type;
qt_max_guia_ref_w		pls_regra_divisao_fatura.qt_max_guia_ref%type;
nr_seq_evento_w			pls_fatura_evento.nr_seq_evento%type;
nr_seq_fatura_evento_w		pls_fatura_evento.nr_sequencia%type;
nr_seq_evento_fatura_w		pls_fatura_evento.nr_sequencia%type;

c01 CURSOR(	nr_seq_lote_pc		 pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura,
		coalesce(vl_fatura, 0) + coalesce(vl_total_ndc, 0) vl_total_fatura,
		nr_seq_congenere,
		nr_seq_pagador,
		dt_vencimento,
		dt_vencimento_ndc,
		ie_impedimento_cobranca,
		nr_agrupamento
	from	pls_fatura
	where	nr_seq_lote = nr_seq_lote_pc;
	
c02 CURSOR(	cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type,
		nr_seq_congenere_pc		pls_regra_divisao_fatura.nr_seq_congenere%type,
		nr_seq_camara_pc		pls_regra_divisao_fatura.nr_seq_camara%type) FOR
	SELECT	vl_maximo_fatura,
		qt_max_conta,
		qt_max_guia_ref
	from	pls_regra_divisao_fatura
	where	cd_estabelecimento		= cd_estabelecimento_pc
	and	((coalesce(nr_seq_congenere::text, '') = '') 	or (nr_seq_congenere = nr_seq_congenere_pc))
	and	((coalesce(nr_seq_camara::text, '') = '') 	or (nr_seq_camara = nr_seq_camara_pc))
	and	clock_timestamp() between trunc(dt_inicio_vigencia, 'dd') and fim_dia(dt_fim_vigencia)
	order by coalesce(dt_inicio_vigencia, clock_timestamp()) desc,
		coalesce(nr_seq_camara, 0),
		coalesce(nr_seq_congenere, 0);
		
current_setting('pls_faturamento_pck.c03')::CURSOR( CURSOR(	nr_seq_fatura_pc		pls_fatura.nr_sequencia%type) FOR
	SELECT	b.nr_seq_conta,
		b.nr_sequencia nr_seq_fatura_conta,
		sum(coalesce(b.vl_faturado, 0)) + sum(coalesce(b.vl_faturado_ndc, 0)) vl_faturado_conta,
		b.cd_guia_referencia,
		b.nr_seq_segurado
	from	pls_fatura_conta	b,
		pls_fatura_evento	a
	where	a.nr_seq_fatura 	= nr_seq_fatura_pc
	and	a.nr_sequencia		= b.nr_seq_fatura_evento
	group by b.nr_seq_conta,
		b.nr_sequencia,
		b.cd_guia_referencia,
		b.nr_seq_segurado
	order by coalesce(b.cd_guia_referencia, 'X'),
		sum(b.vl_faturado),
		sum(b.vl_faturado_ndc),
		b.nr_seq_conta;
		
current_setting('pls_faturamento_pck.c04')::CURSOR( CURSOR(	nr_seq_lote_pc			pls_lote_faturamento.nr_sequencia%type,
                cd_guia_referencia_pc		pls_fatura_conta.cd_guia_referencia%type,
                nr_seq_segurado_pc		pls_fatura_conta.nr_seq_segurado%type,
                nr_seq_fatura_nova_pc		pls_fatura.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia nr_seq_fatura_conta,
		b.nr_seq_conta,
		x.nr_sequencia nr_seq_fatura,
		sum(coalesce(b.vl_faturado, 0)) + sum(coalesce(b.vl_faturado_ndc, 0)) vl_faturado_ndc
	from	pls_fatura_conta	b,
		pls_fatura_evento	a,
		pls_fatura		x
	where	x.nr_sequencia		= a.nr_seq_fatura
	and	a.nr_sequencia		= b.nr_seq_fatura_evento
	and	x.nr_seq_lote		= nr_seq_lote_pc
	and	b.cd_guia_referencia	= cd_guia_referencia_pc
	and	b.nr_seq_segurado	= nr_seq_segurado_pc
	and	x.nr_sequencia		<> nr_seq_fatura_nova_pc
	group by b.nr_sequencia,
		b.nr_seq_conta,
		x.nr_sequencia;
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

select	count(1)
into STRICT	current_setting('pls_faturamento_pck.qt_registro_w')::integer
from	pls_regra_divisao_fatura
where	cd_estabelecimento = cd_estabelecimento_p;

if (current_setting('pls_faturamento_pck.qt_registro_w')::integer > 0) then

	for r_c01_w in c01( nr_seq_lote_p ) loop
		-- Obter camara da operadora para regra de valor para quebra das faturas
		select	max(nr_seq_camara)
		into STRICT	nr_seq_camara_w
		from	pls_congenere_camara
		where	nr_seq_congenere = r_c01_w.nr_seq_congenere;
		
		vl_maximo_fatura_w	:= null;
		qt_max_conta_w		:= null;
		qt_max_guia_ref_w	:= null;
		
		for r_c02_w in c02( cd_estabelecimento_p , r_c01_w.nr_seq_congenere , nr_seq_camara_w ) loop
			vl_maximo_fatura_w	:= r_c02_w.vl_maximo_fatura;
			qt_max_conta_w		:= r_c02_w.qt_max_conta;
			qt_max_guia_ref_w	:= r_c02_w.qt_max_guia_ref;
		end loop;
		
		nr_seq_fatura_nova_w	:= null;
		cd_guia_ref_old_w	:= null;
		nr_seq_segurado_old_w	:= null;
		qt_conta_total_w	:= 0;
		vl_conta_total_w	:= 0;
		qt_guia_total_w		:= 0;
		
		--Obter dados das contas ou guias
		if (coalesce(qt_max_conta_w, 0) > 0) or (coalesce(qt_max_guia_ref_w, 0) > 0) or
			((coalesce(vl_maximo_fatura_w, 0) > 0) and (r_c01_w.vl_total_fatura > coalesce(vl_maximo_fatura_w, 0))) then
			
			for r_c03_w in current_setting('pls_faturamento_pck.c03')::CURSOR( ( r_c01_w.nr_seq_fatura ) loop
			
				qt_conta_total_w := qt_conta_total_w + 1;
				vl_conta_total_w := vl_conta_total_w + r_c03_w.vl_faturado_conta;
				
				if	((coalesce(cd_guia_ref_old_w::text, '') = '') and (coalesce(nr_seq_segurado_old_w::text, '') = '')) or
					((cd_guia_ref_old_w != r_c03_w.cd_guia_referencia) or ( cd_guia_ref_old_w = r_c03_w.cd_guia_referencia AND nr_seq_segurado_old_w != r_c03_w.nr_seq_segurado)) then
					qt_guia_total_w	:= qt_guia_total_w + 1;
				end if;
				
				cd_guia_ref_old_w	:= r_c03_w.cd_guia_referencia;
				nr_seq_segurado_old_w	:= r_c03_w.nr_seq_segurado;
				
				if	(qt_conta_total_w > qt_max_conta_w AND qt_max_conta_w >= 1) or
					(qt_guia_total_w > qt_max_guia_ref_w AND qt_max_guia_ref_w >= 1) or
					(vl_conta_total_w > vl_maximo_fatura_w AND vl_maximo_fatura_w > 0) then
					
					-- Cria uma nova fatura
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;
					
					insert into pls_fatura(	nr_sequencia, 				dt_atualizacao, 	nm_usuario,
								dt_atualizacao_nrec, 			nm_usuario_nrec, 	nr_seq_pagador,
								nr_seq_lote, 				dt_vencimento, 		nr_seq_congenere,
								dt_mes_competencia, 			vl_fatura, 		dt_vencimento_ndc,
								vl_total_ndc, 				nr_fatura, 		nr_seq_fat_divisao,
								ie_impedimento_cobranca,		nr_agrupamento,		ie_tipo_fatura)
							values (	nr_seq_fatura_nova_w, 			clock_timestamp(), 		nm_usuario_p,
								clock_timestamp(), 				nm_usuario_p, 		r_c01_w.nr_seq_pagador,
								nr_seq_lote_p, 				r_c01_w.dt_vencimento, 	r_c01_w.nr_seq_congenere,
								current_setting('pls_faturamento_pck.dt_mesano_referencia_w')::pls_lote_faturamento.dt_mesano_referencia%type, 		0, 			r_c01_w.dt_vencimento_ndc,
								0, 					nr_seq_fatura_nova_w, 	r_c01_w.nr_seq_fatura,
								r_c01_w.ie_impedimento_cobranca,	r_c01_w.nr_agrupamento,	current_setting('pls_faturamento_pck.ie_tipo_lote_w')::pls_lote_faturamento.ie_tipo_lote%type);
								
					vl_conta_total_w	:= r_c03_w.vl_faturado_conta;
					qt_conta_total_w	:= 1;
					qt_guia_total_w		:= 1;
				end if;
				
				if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then
					select	b.nr_seq_evento,
						b.nr_sequencia
					into STRICT	nr_seq_evento_w,
						nr_seq_fatura_evento_w
					from	pls_fatura_evento	b,
						pls_fatura_conta	a
					where	b.nr_sequencia		= a.nr_seq_fatura_evento
					and	a.nr_sequencia		= r_c03_w.nr_seq_fatura_conta;
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_evento_fatura_w
					from	pls_fatura_evento
					where	nr_seq_fatura		= nr_seq_fatura_nova_w
					and	nr_seq_evento		= nr_seq_evento_w;
					
					if (coalesce(nr_seq_evento_fatura_w::text, '') = '') then
						insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao, 	nm_usuario,
										dt_atualizacao_nrec, 		nm_usuario_nrec,	nr_seq_evento,
										nr_seq_fatura, 			vl_evento)
									values (nextval('pls_fatura_evento_seq'), clock_timestamp(),		nm_usuario_p,
										clock_timestamp(), 			nm_usuario_p,		nr_seq_evento_w,
										nr_seq_fatura_nova_w, 		0) returning nr_sequencia into nr_seq_evento_fatura_w;
					end if;
					
					-- Atualizar a conta para a fatura nova
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= nr_seq_evento_fatura_w,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c03_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= nr_seq_fatura_evento_w;
				end if;
				
				-- Se a primeira conta teve contas fechadas na fatura anterior, deve buscar estas contas
				if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') and (current_setting('pls_faturamento_pck.ie_conta_fechada_w')::pls_regra_faturamento.ie_conta_fechada%type = 'S') then
					for r_c04_w in current_setting('pls_faturamento_pck.c04')::CURSOR( ( nr_seq_lote_p, r_c03_w.cd_guia_referencia, r_c03_w.nr_seq_segurado, nr_seq_fatura_nova_w ) loop
					
						qt_conta_total_w 	:= qt_conta_total_w + 1;
						vl_conta_total_w 	:= vl_conta_total_w + r_c04_w.vl_faturado_ndc;
						
						if	(qt_max_conta_w >= 1 AND qt_conta_total_w < qt_max_conta_w) or
							(vl_maximo_fatura_w > 0 AND vl_conta_total_w < vl_maximo_fatura_w) then
							
							select	max(b.nr_seq_evento)
							into STRICT	nr_seq_evento_w
							from	pls_fatura_evento	b,
								pls_fatura_conta	a
							where	b.nr_sequencia		= a.nr_seq_fatura_evento
							and	a.nr_sequencia		= r_c04_w.nr_seq_fatura_conta;
							
							select	max(a.nr_sequencia)
							into STRICT	nr_seq_evento_fatura_w
							from	pls_fatura_evento	a
							where	a.nr_seq_fatura		= nr_seq_fatura_nova_w
							and	a.nr_seq_evento		= nr_seq_evento_w;
							
							if (coalesce(nr_seq_evento_fatura_w::text, '') = '') then
								insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao, 	nm_usuario,
												dt_atualizacao_nrec, 		nm_usuario_nrec, 	nr_seq_evento,
												nr_seq_fatura, 			vl_evento)
											values (nextval('pls_fatura_evento_seq'), clock_timestamp(), 		nm_usuario_p,
												clock_timestamp(), 			nm_usuario_p, 		nr_seq_evento_w,
												nr_seq_fatura_nova_w, 		0) returning nr_sequencia into nr_seq_evento_fatura_w;
							end if;
							
							-- Atualizar a conta para a fatura nova
							update	pls_fatura_conta
							set	nr_seq_fatura_evento 	= nr_seq_evento_fatura_w,
								dt_atualizacao		= clock_timestamp(),
								nm_usuario		= nm_usuario_p
							where	nr_sequencia		= r_c04_w.nr_seq_fatura_conta;
						else
							qt_conta_total_w 	:= qt_conta_total_w - 1;
							vl_conta_total_w 	:= vl_conta_total_w - r_c04_w.vl_faturado_ndc;
						end if;
					end loop;
				end if;
			end loop;
		end if;
	end loop;
	
	commit;
	
	CALL pls_faturamento_pck.atualizar_vl_lote_fatura(nr_seq_lote_p, nm_usuario_p, 'N', 'N', 'N');
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.dividir_faturas_lote ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
