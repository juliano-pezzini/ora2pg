-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- pls_faturamento_pck.dividir_imped_cobr_fat(dividir faturas com impedimento)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.dividir_imped_cobr_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
qt_contas_fat_w			integer;
nr_seq_fatura_nova_w		pls_fatura.nr_sequencia%type;
nr_seq_fatura_evento_w		pls_fatura_evento.nr_sequencia%type;
qt_fat_conta_w			integer;
nr_seq_fatura_evento_nova_w	pls_fatura_conta.nr_seq_fatura_evento%type;
ie_possui_imp_w			integer;
qt_contas_evento_w		integer;
qt_eventos_fatura_w		integer;
current_setting('pls_faturamento_pck.qt_registro_w')::integer			integer;

c01 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura,
		vl_fatura,
		nr_seq_congenere,
		nr_seq_pagador,
		ie_impedimento_cobranca,
		vl_total_ndc,
		coalesce(dt_vencimento, clock_timestamp()) dt_vencimento,
		coalesce(dt_vencimento_ndc, clock_timestamp()) dt_vencimento_ndc,
		nr_agrupamento
	from	pls_fatura
	where	nr_seq_lote = nr_seq_lote_pc
	and	(ie_impedimento_cobranca IS NOT NULL AND ie_impedimento_cobranca::text <> '');
	
c02 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type,
		nr_seq_fatura_pc	pls_fatura.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_fatura_evento,
		b.nr_seq_conta,
		a.nr_seq_evento,
		coalesce(b.ie_tipo_vinculacao, 'A') ie_tipo_vinculacao
	from	pls_fatura_conta 	b,
		pls_fatura_evento 	a
	where	a.nr_seq_fatura 	= nr_seq_fatura_pc
	and	a.nr_sequencia		= b.nr_seq_fatura_evento
	and	exists (	SELECT 1
			from	w_pls_lote_fat_proc		x
			where	x.nr_seq_conta			= b.nr_seq_conta
			and	x.nr_seq_lote_fat		= nr_seq_lote_pc
			and	x.ie_impedimento_cobranca 	= 'P'
			
union all

			select 1
			from	w_pls_lote_fat_mat		x
			where	x.nr_seq_conta			= b.nr_seq_conta
			and	x.nr_seq_lote_fat		= nr_seq_lote_pc
			and	x.ie_impedimento_cobranca 	= 'P');
			
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

if (current_setting('pls_faturamento_pck.ie_forma_impedimento_cobr_w')::pls_regra_faturamento.ie_forma_impedimento_cobr%type <> 'T') then

	for r_c01_w in c01( nr_seq_lote_p ) loop
		select	count(1)
		into STRICT	qt_contas_fat_w
		from	pls_fatura_conta 	c,
			pls_fatura_evento 	b,
			pls_fatura		a
		where	b.nr_sequencia		= c.nr_seq_fatura_evento
		and	a.nr_sequencia		= b.nr_seq_fatura
		and	a.nr_sequencia		= r_c01_w.nr_seq_fatura  LIMIT 2;
		
		if (qt_contas_fat_w > 1) then
		
			nr_seq_fatura_nova_w	:= null;
			for r_c02_w in c02( nr_seq_lote_p, r_c01_w.nr_seq_fatura ) loop
			
				PERFORM set_config('pls_faturamento_pck.qt_registro_w', 0, false);
				if (r_c02_w.ie_tipo_vinculacao = 'M') then
					select	count(1)
					into STRICT	current_setting('pls_faturamento_pck.qt_registro_w')::integer
					from	pls_fatura_motivo_imp_cob	d,
						pls_fatura_conta 		c,
						pls_fatura_evento 		b,
						pls_fatura			a
					where	b.nr_sequencia			= c.nr_seq_fatura_evento
					and	a.nr_sequencia			= b.nr_seq_fatura
					and	d.nr_seq_conta			= c.nr_seq_conta
					and	a.nr_sequencia			= r_c01_w.nr_seq_fatura
					and	c.ie_tipo_vinculacao		= 'M'
					and	a.nr_seq_pagador		= r_c01_w.nr_seq_pagador
					and	a.nr_seq_lote			= nr_seq_lote_p
					and	coalesce(a.ie_impedimento_cobranca,'X') = r_c01_w.ie_impedimento_cobranca  LIMIT 10;
					
					if (current_setting('pls_faturamento_pck.qt_registro_w')::integer > 1) then
						select	max(nr_sequencia)
						into STRICT	nr_seq_fatura_nova_w
						from	pls_fatura
						where	nr_seq_pagador			= r_c01_w.nr_seq_pagador
						and	nr_seq_lote			= nr_seq_lote_p
						and	coalesce(ie_impedimento_cobranca,'X') = r_c01_w.ie_impedimento_cobranca
						and	((nr_agrupamento = r_c01_w.nr_agrupamento) or (coalesce(coalesce(nr_agrupamento, r_c01_w.nr_agrupamento)::text, '') = ''));
					end if;
				end if;
				
				if (coalesce(nr_seq_fatura_nova_w::text, '') = '') or (current_setting('pls_faturamento_pck.ie_forma_impedimento_cobr_w')::pls_regra_faturamento.ie_forma_impedimento_cobr%type = 'U') then
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;
					
					insert into pls_fatura(	nr_sequencia, 		dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 	nm_usuario_nrec, 		nr_seq_pagador,
								nr_seq_lote, 		nr_seq_congenere,		dt_vencimento,
								vl_fatura, 		ie_impedimento_cobranca,	vl_total_ndc,
								nr_fatura, 		nr_seq_fat_divisao,		dt_vencimento_ndc,
								dt_mes_competencia,	nr_agrupamento,			ie_tipo_fatura)	
							values (nr_seq_fatura_nova_w,	clock_timestamp(), 			nm_usuario_p,
								clock_timestamp(), 		nm_usuario_p, 			r_c01_w.nr_seq_pagador,
								nr_seq_lote_p, 		r_c01_w.nr_seq_congenere,	coalesce(current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type, r_c01_w.dt_vencimento),
								0, 			'P', 				0,
								nr_seq_fatura_nova_w,	r_c01_w.nr_seq_fatura,		coalesce(current_setting('pls_faturamento_pck.dt_vencimento_w')::pls_lote_faturamento.dt_vencimento%type, r_c01_w.dt_vencimento_ndc),
								current_setting('pls_faturamento_pck.dt_mesano_referencia_w')::pls_lote_faturamento.dt_mesano_referencia%type,	r_c01_w.nr_agrupamento,		current_setting('pls_faturamento_pck.ie_tipo_lote_w')::pls_lote_faturamento.ie_tipo_lote%type);
				end if;
				
				if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then
				
					select	max(nr_sequencia)
					into STRICT	nr_seq_fatura_evento_w
					from 	pls_fatura_evento
					where	nr_seq_fatura = nr_seq_fatura_nova_w
					and	nr_seq_evento = r_c02_w.nr_seq_evento;
					
					nr_seq_fatura_evento_nova_w := null;
					if (coalesce(nr_seq_fatura_evento_w::text, '') = '') then
						insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao, 	nm_usuario,
										dt_atualizacao_nrec, 		nm_usuario_nrec, 	nr_seq_evento,
										nr_seq_fatura, 			vl_evento)
									values (nextval('pls_fatura_evento_seq'),	clock_timestamp(),		nm_usuario_p,
										clock_timestamp(),			nm_usuario_p,		r_c02_w.nr_seq_evento,
										nr_seq_fatura_nova_w,		0) returning nr_sequencia into nr_seq_fatura_evento_nova_w;
					end if;
					
					-- Atualizar a conta para a fatura nova
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= coalesce(nr_seq_fatura_evento_nova_w, nr_seq_fatura_evento_w),
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c02_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= r_c02_w.nr_seq_fatura_evento;
					
					select 	count(1)
					into STRICT	qt_fat_conta_w
					from	pls_fatura_conta
					where   nr_seq_fatura_evento = r_c02_w.nr_seq_fatura_evento;
					
					if (qt_fat_conta_w	= 0) then
						delete	FROM pls_fatura_evento
						where	nr_sequencia = r_c02_w.nr_seq_fatura_evento;
					end if;
				end if;
				
				update	pls_fatura_motivo_imp_cob
				set	nr_seq_fatura 	= nr_seq_fatura_nova_w,
					dt_atualizacao	= clock_timestamp(),
					nm_usuario	= nm_usuario_p
				where	nr_seq_conta  	= r_c02_w.nr_seq_conta
				and	nr_seq_fatura 	= r_c01_w.nr_seq_fatura;
			end loop;
			
			select	count(1)
			into STRICT	ie_possui_imp_w
			from	pls_fatura_conta 	c,
				pls_fatura_evento 	b,
				pls_fatura		a
			where	b.nr_sequencia		= c.nr_seq_fatura_evento
			and	a.nr_sequencia		= b.nr_seq_fatura
			and	a.nr_sequencia		= r_c01_w.nr_seq_fatura
			and	exists (	SELECT	1
					from	w_pls_lote_fat_proc		x
					where	x.nr_seq_conta			= c.nr_seq_conta
					and	x.nr_seq_lote_fat		= nr_seq_lote_p
					and	x.ie_impedimento_cobranca 	= 'P'
					
union all

					SELECT 1
					from	w_pls_lote_fat_mat		x
					where	x.nr_seq_conta			= c.nr_seq_conta
					and	x.nr_seq_lote_fat		= nr_seq_lote_p
					and	x.ie_impedimento_cobranca 	= 'P')  LIMIT 1;
			
			if (ie_possui_imp_w = 0) then
				select	count(1)
				into STRICT	ie_possui_imp_w
				from	pls_fatura_motivo_imp_cob
				where	nr_seq_fatura	= r_c01_w.nr_seq_fatura;
				
				if (ie_possui_imp_w = 0) then
					update	pls_fatura
					set	ie_impedimento_cobranca  = NULL,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_sequencia 		= r_c01_w.nr_seq_fatura;
				end if;
			end if;
			
			select	count(1)
			into STRICT	qt_contas_evento_w
			from	pls_fatura_conta 	c,
				pls_fatura_evento 	b,
				pls_fatura		a
			where	b.nr_sequencia		= c.nr_seq_fatura_evento
			and	a.nr_sequencia		= b.nr_seq_fatura
			and	a.nr_sequencia		= r_c01_w.nr_seq_fatura  LIMIT 1;
			
			if (qt_contas_evento_w = 0) then
				delete 	FROM pls_fatura_evento
				where	nr_seq_fatura = r_c01_w.nr_seq_fatura;
			end if;
			
			select	count(1)
			into STRICT	qt_eventos_fatura_w
			from	pls_fatura_evento 	b,
				pls_fatura		a
			where	a.nr_sequencia		= b.nr_seq_fatura
			and	a.nr_sequencia		= r_c01_w.nr_seq_fatura  LIMIT 1;
			
			if (qt_eventos_fatura_w = 0) then
				update	pls_fatura
				set	nr_seq_fat_divisao 	 = NULL,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_fat_divisao	= r_c01_w.nr_seq_fatura;
				
				delete 	FROM pls_fatura
				where	nr_sequencia = r_c01_w.nr_seq_fatura;
			end if;	
		end if;
	end loop;
	
	commit;
	
	CALL pls_faturamento_pck.atualizar_vl_lote_fatura(nr_seq_lote_p, nm_usuario_p, 'N', 'N', 'N');
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.dividir_imped_cobr_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
