-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_faturamento_pck.dividir_faturas_prot ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Divide as faturas geradas no lote conforme regras estabelecidas, e migra os eventos e contas para a nova fatura

-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[  ]  Objetos do dicionario [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

Alteracoes:

-------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
-- fatura
sql_cursor_fatura_w	varchar(32000);
bind_dados_fatura_w	sql_pck.t_dado_bind;
rc_cursor_fatura_w	sql_pck.t_cursor;

-- evento
sql_cursor_evento_w	varchar(32000);
bind_dados_evento_w	sql_pck.t_dado_bind;
rc_cursor_evento_w	sql_pck.t_cursor;
cr_nr_seq_evento_old_w	pls_fatura.nr_sequencia%type;
cr_nr_seq_evento_new_w	pls_fatura.nr_sequencia%type;


-- Mover contas
sql_mover_conta_w	varchar(32000);
bind_dados_conta_w	sql_pck.t_dado_bind;
rc_cursor_conta_w	sql_pck.t_cursor;
tb_nr_seq_conta_w	dbms_sql.number_table;

-- dados cursor fatura
cr_nr_seq_fat_old_w	pls_fatura.nr_sequencia%type;
nr_seq_fat_new_w	pls_fatura.nr_sequencia%type;



-- regras de divisao
c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_protocolo
	from	pls_regra_divisao_fat_prot	a
	where	clock_timestamp()			between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref
	and	a.cd_estabelecimento	= cd_estabelecimento_p;
	
-- faturas existentes no lote
BEGIN

-- carrega as regras vigentes e processa elas
for	r_c01_w in c01 loop

	bind_dados_fatura_w.delete;
	bind_dados_fatura_w := pls_faturamento_pck.gera_sql_div_fat_prot(nr_seq_lote_p, r_c01_w.ie_tipo_protocolo);
	
	-- abre o cursor de faturas e navega por elas
	bind_dados_fatura_w := sql_pck.executa_sql_cursor(sql_cursor_fatura_w, bind_dados_fatura_w);
	
	loop
	fetch rc_cursor_fatura_w into cr_nr_seq_fat_old_w;
	EXIT WHEN NOT FOUND; /* apply on rc_cursor_fatura_w */
	
		-- copia para a rotina de duplicacao de registro, e necessario pois a mesma retorna a nova PK na mesma variavel
		nr_seq_fat_new_w := cr_nr_seq_fat_old_w;
		-- insere a fatura nova com base no registro antigo
		Duplicar_Registro('PLS_FATURA', nm_usuario_p, nr_seq_fat_new_w);
		
		bind_dados_evento_w.delete;
		-- carrega os eventos
		bind_dados_evento_w := pls_faturamento_pck.gera_sql_div_evento_prot(cr_nr_seq_fat_old_w, r_c01_w.ie_tipo_protocolo);
		
		bind_dados_evento_w := sql_pck.executa_sql_cursor(sql_cursor_evento_w, bind_dados_evento_w);
		-- navega pelos eventos
		loop
		fetch rc_cursor_evento_w into cr_nr_seq_evento_old_w;
		EXIT WHEN NOT FOUND; /* apply on rc_cursor_evento_w */

			-- copia para a rotina de duplicacao de registro, e necessario pois a mesma retorna a nova PK na mesma variavel
			cr_nr_seq_evento_new_w := cr_nr_seq_evento_old_w;
			
			-- duplica o evento
			Duplicar_Registro('PLS_FATURA_EVENTO', nm_usuario_p, cr_nr_seq_evento_new_w);
			
			-- move o evento para  a fatura nova
			update	pls_fatura_evento
			set	nr_seq_fatura	= nr_seq_fat_new_w
			where	nr_sequencia	= cr_nr_seq_evento_new_w;
			
			-- carrega as contas do evento
			bind_dados_conta_w.delete;
			bind_dados_conta_w := pls_faturamento_pck.gera_sql_div_fat_contas(cr_nr_seq_evento_old_w, r_c01_w.ie_tipo_protocolo);
			
			bind_dados_conta_w := sql_pck.executa_sql_cursor(sql_mover_conta_w, bind_dados_conta_w);
			
			loop
			fetch rc_cursor_conta_w bulk collect into tb_nr_seq_conta_w limit pls_util_pck.qt_registro_transacao_w;
			exit when tb_nr_seq_conta_w.count = 0;
			
				forall i in tb_nr_seq_conta_w.first..tb_nr_seq_conta_w.last
					update	pls_fatura_conta
					set	nr_seq_fatura_evento	= cr_nr_seq_evento_new_w
					where	nr_sequencia		= tb_nr_seq_conta_w(i);
					
				tb_nr_seq_conta_w.delete;
				
			end loop; -- fim cursor contas
			
			
			
		end loop; -- fim navegar pelos eventos
		
		
		if (rc_cursor_evento_w%isOpen) then
		
			close rc_cursor_evento_w;
		end if;
		
	
	end loop; -- fim navegar pelas faturas
	
	if (rc_cursor_fatura_w%isOpen) then
	
		close rc_cursor_fatura_w;
	end if;
	
	
end loop; -- fim regras vigentes
-- Atualiza os valores das faturas, importante para as regras de valores atuarem corretamente
CALL pls_faturamento_pck.atualizar_vl_lote_fatura(nr_seq_lote_p, nm_usuario_p, 'N', 'N', 'N');

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.dividir_faturas_prot ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
