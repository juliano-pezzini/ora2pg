-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- pls_faturamento_pck.dividir_faturas_prest(dividir faturas com regra de prestador)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.dividir_faturas_prest (nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
current_setting('pls_faturamento_pck.qt_registro_w')::integer			integer;
nr_seq_regra_div_w		pls_regra_divisao_prest.nr_sequencia%type;
ie_tipo_relacao_w		pls_regra_divisao_prest.ie_tipo_relacao%type;
nr_seq_grupo_prestador_w	pls_regra_divisao_prest.nr_seq_grupo_prestador%type;
nr_seq_evento_prest_w		pls_fatura_evento.nr_sequencia%type;
nr_seq_fatura_nova_w		pls_fatura.nr_sequencia%type;
ie_tipo_relacao_ant_w		pls_prestador.ie_tipo_relacao%type;
nr_seq_evento_fatura_w		pls_fatura_evento.nr_sequencia%type;

c01 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura,
		nr_seq_pagador,
		nr_seq_congenere
	from	pls_fatura
	where	nr_seq_lote = nr_seq_lote_pc
	and	coalesce(ie_impedimento_cobranca::text, '') = ''
	order by 3;
	
c02 CURSOR(	nr_seq_fatura_pc	pls_fatura.nr_sequencia%type) FOR
	SELECT	b.nr_seq_conta,
		a.nr_seq_evento,
		a.nr_sequencia nr_seq_fatura_evento,
		b.nr_sequencia nr_seq_fatura_conta,
		d.ie_tipo_relacao,
		d.nr_sequencia nr_seq_prestador
	from	pls_prestador		d,
		pls_conta		c,
		pls_fatura_conta 	b,
		pls_fatura_evento 	a
	where	a.nr_seq_fatura 	= nr_seq_fatura_pc	
	and	a.nr_sequencia		= b.nr_seq_fatura_evento
	and	c.nr_sequencia		= b.nr_seq_conta
	and	d.nr_sequencia		= c.nr_seq_prestador_exec
	order by d.ie_tipo_relacao;
		
current_setting('pls_faturamento_pck.c03')::CURSOR( CURSOR(	cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type,
		ie_tipo_relacao_prest_pc	pls_prestador.ie_tipo_relacao%type,
		nr_seq_prestador_exec_pc	pls_prestador.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_regra_divisao_prest,
		ie_tipo_relacao,
		nr_seq_grupo_prestador
	from	pls_regra_divisao_prest
	where	cd_estabelecimento = cd_estabelecimento_pc
	and	clock_timestamp() between trunc(dt_inicio_vigencia, 'dd') and fim_dia(dt_fim_vigencia)
	and	((ie_tipo_relacao = ie_tipo_relacao_prest_pc) or (coalesce(ie_tipo_relacao::text, '') = ''))
	and	((pls_obter_se_prestador_grupo(nr_seq_grupo_prestador, nr_seq_prestador_exec_pc) = 'S') or (coalesce(nr_seq_grupo_prestador::text, '') = ''))
	order by coalesce(ie_tipo_relacao, ' '),
		coalesce(nr_seq_grupo_prestador, 0),
		coalesce(dt_inicio_vigencia, clock_timestamp()) desc;
		
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

select	count(1)
into STRICT	current_setting('pls_faturamento_pck.qt_registro_w')::integer
from	pls_regra_divisao_prest
where	cd_estabelecimento = cd_estabelecimento_p;

if (current_setting('pls_faturamento_pck.qt_registro_w')::integer > 0) then

	for r_c01_w in c01( nr_seq_lote_p ) loop
	
		nr_seq_fatura_nova_w	:= null;
		ie_tipo_relacao_ant_w	:= null;
		
		for r_c02_w in c02( r_c01_w.nr_seq_fatura ) loop
		
			nr_seq_regra_div_w		:= null;
			ie_tipo_relacao_w		:= null;
			nr_seq_grupo_prestador_w	:= null;
			
			for r_c03_w in current_setting('pls_faturamento_pck.c03')::CURSOR( ( cd_estabelecimento_p, r_c02_w.ie_tipo_relacao, r_c02_w.nr_seq_prestador ) loop
				nr_seq_regra_div_w	:= r_c03_w.nr_seq_regra_divisao_prest;
				ie_tipo_relacao_w		:= r_c03_w.ie_tipo_relacao;
				nr_seq_grupo_prestador_w	:= r_c03_w.nr_seq_grupo_prestador;
			end loop;
			
			if (nr_seq_regra_div_w IS NOT NULL AND nr_seq_regra_div_w::text <> '') then
				ie_tipo_relacao_w := coalesce(r_c02_w.ie_tipo_relacao, ie_tipo_relacao_w);
				
				--Verifica se existe uma fatura com estas informacoes 
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_evento_prest_w
				from	pls_fatura_conta 	b,
					pls_fatura_evento 	a,
					pls_fatura		f
				where	f.nr_sequencia			= a.nr_seq_fatura
				and	a.nr_sequencia			= b.nr_seq_fatura_evento
				and	f.nr_sequencia			<> r_c01_w.nr_seq_fatura
				and	f.nr_seq_pagador 		= r_c01_w.nr_seq_pagador
				and	f.ie_tipo_relacao 		= ie_tipo_relacao_w
				and	((f.nr_seq_grupo_prestador	= nr_seq_grupo_prestador_w) or (coalesce(nr_seq_grupo_prestador_w::text, '') = ''))
				and	a.nr_seq_evento			= r_c02_w.nr_seq_evento
				and	f.nr_seq_lote  			= nr_seq_lote_p;
				
				if (coalesce(nr_seq_evento_prest_w::text, '') = '') then								
					--Cria uma nova fatura 
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;
					
					insert into pls_fatura(	nr_sequencia, 		dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 	nm_usuario_nrec, 		nr_seq_pagador,
								nr_seq_lote, 		dt_vencimento, 			nr_seq_congenere,
								dt_mes_competencia, 	vl_fatura, 			dt_vencimento_ndc,
								vl_total_ndc, 		ie_tipo_relacao, 		nr_seq_grupo_prestador,
								nr_fatura, 		nr_seq_fat_divisao,		nr_agrupamento,
								ie_tipo_fatura)
							SELECT	nr_seq_fatura_nova_w, 	clock_timestamp(), 			nm_usuario_p,
								clock_timestamp(), 		nm_usuario_p, 			nr_seq_pagador,
								nr_seq_lote, 		dt_vencimento, 			nr_seq_congenere,
								dt_mes_competencia, 	0, 				dt_vencimento_ndc,
								0, 			r_c02_w.ie_tipo_relacao,	nr_seq_grupo_prestador_w,
								nr_seq_fatura_nova_w, 	r_c01_w.nr_seq_fatura,		nr_agrupamento,
								ie_tipo_fatura
							from	pls_fatura
							where	nr_sequencia = r_c01_w.nr_seq_fatura;
				else
					nr_seq_fatura_nova_w := null;
				end if;
				
				if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_evento_fatura_w
					from 	pls_fatura_evento
					where	nr_seq_fatura = nr_seq_fatura_nova_w
					and	nr_seq_evento = r_c02_w.nr_seq_evento;
					
					if (coalesce(nr_seq_evento_fatura_w::text, '') = '') then
						insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao,		nm_usuario,
										dt_atualizacao_nrec, 		nm_usuario_nrec,	nr_seq_evento,
										nr_seq_fatura, 			vl_evento)
									values (nextval('pls_fatura_evento_seq'), clock_timestamp(), 		nm_usuario_p,
										clock_timestamp(), 			nm_usuario_p, 		r_c02_w.nr_seq_evento,
										nr_seq_fatura_nova_w, 		0) returning nr_sequencia into nr_seq_evento_fatura_w;
					end if;
					
					-- Atualizar a conta para a fatura nova 
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= nr_seq_evento_fatura_w,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c02_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= r_c02_w.nr_seq_fatura_evento;
					
				elsif (nr_seq_evento_prest_w IS NOT NULL AND nr_seq_evento_prest_w::text <> '') then
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= nr_seq_evento_prest_w,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c02_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= r_c02_w.nr_seq_fatura_evento;
				end if;
			end if;
		end loop;
	end loop;
	
	commit;
	
	CALL pls_faturamento_pck.atualizar_vl_lote_fatura(nr_seq_lote_p, nm_usuario_p, 'N', 'N', 'N');
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.dividir_faturas_prest (nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
