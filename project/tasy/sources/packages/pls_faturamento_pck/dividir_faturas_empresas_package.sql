-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- pls_faturamento_pck.dividir_faturas_empresas(dividir faturas com regra de empresa)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.dividir_faturas_empresas ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
current_setting('pls_faturamento_pck.qt_registro_w')::integer			integer;
nr_agrupamento_regra_w		pls_regra_divisao_fat_emp.nr_agrupamento%type;
nr_agrupamento_ant_w		pls_fatura.nr_agrupamento%type;
nr_seq_fatura_nova_w		pls_fatura.nr_sequencia%type;
nr_seq_evento_empresa_w		pls_fatura_evento.nr_sequencia%type;
nr_seq_conta_empresa_w		pls_fatura_conta.nr_sequencia%type;
nr_seq_evento_fatura_w		pls_fatura_evento.nr_sequencia%type;
nr_seq_regra_w			pls_regra_divisao_fat_emp.nr_sequencia%type;

c01 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura,
		nr_seq_pagador,
		nr_seq_congenere,
		coalesce(ie_impedimento_cobranca, 'X') ie_impedimento_cobranca,
		nr_agrupamento nr_agrupamento_fat
	from	pls_fatura	
	where	nr_seq_lote = nr_seq_lote_pc
	order by 3;
	
c02 CURSOR(	nr_seq_fatura_pc	pls_fatura.nr_sequencia%type) FOR
	SELECT	b.nr_seq_conta,
		a.nr_seq_evento,
		a.nr_sequencia nr_seq_fatura_evento,
		b.nr_seq_segurado,
		b.nr_sequencia nr_seq_fatura_conta,
		c.cd_operadora_empresa,
		sum(b.vl_faturado) vl_faturado
	from	pls_segurado		c,
		pls_fatura_conta 	b,
		pls_fatura_evento 	a
	where	a.nr_seq_fatura 	= nr_seq_fatura_pc
	and	a.nr_sequencia		= b.nr_seq_fatura_evento
	and	c.nr_sequencia		= b.nr_seq_segurado
	group by b.nr_seq_conta,
		a.nr_seq_evento,
		a.nr_sequencia,
		b.nr_seq_segurado,
		b.nr_sequencia,
		c.cd_operadora_empresa
	order by c.cd_operadora_empresa desc,
		b.nr_seq_segurado;
		
current_setting('pls_faturamento_pck.c03')::CURSOR( CURSOR(	cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type,
		cd_operadora_empresa_pc		pls_segurado.cd_operadora_empresa%type) FOR
	SELECT	nr_agrupamento,
		nr_sequencia
	from	pls_regra_divisao_fat_emp
	where	cd_estabelecimento 				= cd_estabelecimento_pc
	and	coalesce(cd_empresa_regra, cd_operadora_empresa_pc)	= cd_operadora_empresa_pc
	and	clock_timestamp() between trunc(dt_inicio_vigencia, 'dd') and fim_dia(dt_fim_vigencia)
	order by coalesce(nr_agrupamento, 0),
		coalesce(dt_inicio_vigencia, clock_timestamp()) desc,
		coalesce(cd_empresa_regra, ' ');
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

select	count(1)
into STRICT	current_setting('pls_faturamento_pck.qt_registro_w')::integer
from	pls_regra_divisao_fat_emp
where	cd_estabelecimento = cd_estabelecimento_p;

if (current_setting('pls_faturamento_pck.qt_registro_w')::integer > 0) then

	for r_c01_w in c01( nr_seq_lote_p ) loop
	
		nr_seq_fatura_nova_w := null;
		nr_agrupamento_ant_w := 0;
		
		for r_c02_w in c02( r_c01_w.nr_seq_fatura ) loop
			
			nr_agrupamento_regra_w := 0;
			for r_c03_w in current_setting('pls_faturamento_pck.c03')::CURSOR( ( cd_estabelecimento_p, r_c02_w.cd_operadora_empresa ) loop
				nr_agrupamento_regra_w := coalesce(r_c03_w.nr_agrupamento, 0);
				nr_seq_regra_w := r_c03_w.nr_sequencia;
			end loop;
			
			if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				if (nr_agrupamento_regra_w <> nr_agrupamento_ant_w) then
					nr_seq_fatura_nova_w := null;
				end if;

				nr_seq_evento_empresa_w:= null;
				nr_seq_conta_empresa_w := null;
				if (r_c02_w.cd_operadora_empresa IS NOT NULL AND r_c02_w.cd_operadora_empresa::text <> '') then
					select	max(b.nr_sequencia),
						max(c.nr_sequencia)
					into STRICT	nr_seq_evento_empresa_w,
						nr_seq_conta_empresa_w
					from	pls_segurado		d,
						pls_fatura_conta	c,
						pls_fatura_evento	b,
						pls_fatura		a
					where	a.nr_sequencia 		= b.nr_seq_fatura
					and	b.nr_sequencia 		= c.nr_seq_fatura_evento
					and	d.nr_sequencia		= c.nr_seq_segurado
					and	a.nr_seq_pagador 	= r_c01_w.nr_seq_pagador
					and	d.cd_operadora_empresa 	= r_c02_w.cd_operadora_empresa
					and	a.nr_agrupamento	= coalesce(r_c01_w.nr_agrupamento_fat, a.nr_agrupamento)
					and	a.nr_seq_lote  		= nr_seq_lote_p
					and	c.nr_sequencia		<> r_c02_w.nr_seq_fatura_conta
					and	a.nr_sequencia		<> r_c01_w.nr_seq_fatura
					and	coalesce(a.ie_impedimento_cobranca, 'X') = r_c01_w.ie_impedimento_cobranca;
				end if;
				
				if (nr_agrupamento_regra_w > 0) and (nr_agrupamento_regra_w <> coalesce(nr_agrupamento_ant_w, nr_agrupamento_regra_w)) and (coalesce(nr_seq_conta_empresa_w::text, '') = '') and (coalesce(nr_seq_evento_empresa_w, r_c02_w.nr_seq_fatura_evento) = r_c02_w.nr_seq_fatura_evento) then
					
					select	nextval('pls_fatura_seq')
					into STRICT	nr_seq_fatura_nova_w
					;
					
					insert into pls_fatura(	nr_sequencia, 				dt_atualizacao, 		nm_usuario,
								dt_atualizacao_nrec, 			nm_usuario_nrec, 		nr_seq_pagador,
								nr_seq_lote, 				dt_vencimento, 			nr_seq_congenere,
								dt_mes_competencia, 			vl_fatura, 			dt_vencimento_ndc,
								vl_total_ndc, 				nr_fatura, 			nr_seq_fat_divisao,
								ie_impedimento_cobranca, 		nr_agrupamento,			ie_tipo_fatura)
							SELECT	nr_seq_fatura_nova_w, 			clock_timestamp(), 			nm_usuario_p,
								clock_timestamp(), 				nm_usuario_p, 			nr_seq_pagador,
								nr_seq_lote, 				dt_vencimento, 			nr_seq_congenere,
								dt_mes_competencia, 			0, 				dt_vencimento_ndc,
								0, 					nr_seq_fatura_nova_w, 		r_c01_w.nr_seq_fatura,
								r_c01_w.ie_impedimento_cobranca, 	r_c01_w.nr_agrupamento_fat,	ie_tipo_fatura
							from	pls_fatura
							where	nr_sequencia = r_c01_w.nr_seq_fatura;
				end if;
				
				if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_evento_fatura_w
					from 	pls_fatura_evento
					where	nr_seq_fatura = nr_seq_fatura_nova_w
					and	nr_seq_evento = r_c02_w.nr_seq_evento;
					
					if (coalesce(nr_seq_evento_fatura_w::text, '') = '') then
						select	nextval('pls_fatura_evento_seq')
						into STRICT	nr_seq_evento_fatura_w
						;
						
						insert into pls_fatura_evento(	nr_sequencia, 			dt_atualizacao,		nm_usuario,
										dt_atualizacao_nrec, 		nm_usuario_nrec, 	nr_seq_evento,
										nr_seq_fatura, 			vl_evento)
									values (	nr_seq_evento_fatura_w,		clock_timestamp(),		nm_usuario_p,
										clock_timestamp(),			nm_usuario_p,		r_c02_w.nr_seq_evento,
										nr_seq_fatura_nova_w,		0);
					end if;
					
					-- Atualizar a conta para a fatura nova
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= nr_seq_evento_fatura_w,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c02_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= r_c02_w.nr_seq_fatura_evento;
					
				elsif (nr_agrupamento_regra_w = nr_agrupamento_ant_w) and (nr_seq_conta_empresa_w IS NOT NULL AND nr_seq_conta_empresa_w::text <> '') then
					update	pls_fatura_conta
					set	nr_seq_fatura_evento 	= nr_seq_evento_empresa_w,
						dt_atualizacao		= clock_timestamp(),
						nm_usuario		= nm_usuario_p
					where	nr_seq_conta 		= r_c02_w.nr_seq_conta
					and	nr_seq_fatura_evento 	= r_c02_w.nr_seq_fatura_evento;
				end if;
				nr_agrupamento_ant_w := nr_agrupamento_regra_w;
			end if;
			
		end loop;
	end loop;
	
	commit;
	
	CALL pls_faturamento_pck.atualizar_vl_lote_fatura(nr_seq_lote_p, nm_usuario_p, 'N', 'N', 'N');
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.dividir_faturas_empresas ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
