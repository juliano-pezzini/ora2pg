-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_faturamento_pck.verificar_imped_cobr_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, ie_conta_fechada_p pls_regra_faturamento.ie_conta_fechada%type, nr_seq_pos_proc_p pls_conta_pos_proc.nr_sequencia%type, nr_seq_pos_mat_p pls_conta_pos_mat.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
qt_regra_lib_fat_w		integer;
current_setting('pls_faturamento_pck.ie_exige_med_aud_w')::pls_regra_lib_fat.ie_exige_med_aud%type		pls_regra_lib_fat.ie_exige_med_aud%type;
current_setting('pls_faturamento_pck.ie_exige_enf_aud_w')::pls_regra_lib_fat.ie_exige_enf_aud%type		pls_regra_lib_fat.ie_exige_enf_aud%type;
current_setting('pls_faturamento_pck.dt_alta_w')::pls_conta.dt_alta%type			pls_conta.dt_alta%type;
current_setting('pls_faturamento_pck.dt_atendimento_w')::pls_conta.dt_atendimento%type		timestamp;
ie_impedimento_cobranca_w	varchar(1);
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
current_setting('pls_faturamento_pck.ie_tipo_congenere_w')::pls_congenere.ie_tipo_congenere%type		pls_congenere.ie_tipo_congenere%type;

c01 CURSOR(	nr_seq_lote_pc		 pls_lote_faturamento.nr_sequencia%type,
		nr_seq_pos_proc_pc	 pls_conta_pos_proc.nr_sequencia%type,
		nr_seq_pos_mat_pc	 pls_conta_pos_mat.nr_sequencia%type) FOR
	SELECT	a.nr_seq_conta,
		max(a.dt_emissao_conta) dt_emissao,
		max(a.dt_atendimento_ref) dt_atendimento,
		max(a.dt_inicio_faturamento) dt_internacao,
		max(a.cd_guia_ok) cd_guia_ok,
		max(a.nr_seq_segurado) nr_seq_segurado,
		max(a.ie_tipo_guia) ie_tipo_guia,
		max(a.nr_seq_ops_congenere) nr_seq_ops_congenere,
		max(a.nr_seq_congenere) nr_seq_congenere,
		max(a.nr_seq_congenere_prot) nr_seq_congenere_prot,
		max(a.ie_prestador_a400) ie_prestador_a400,
		max(a.ie_tipo_ops_congenere) ie_tipo_ops_congenere,
		max(a.ie_tipo_congenere) ie_tipo_congenere,
		max(a.ie_tipo_congenere_prot) ie_tipo_congenere_prot,
		max(a.ie_tipo_protocolo) ie_tipo_protocolo,
		max(a.qt_impedimento) qt_impedimento
	from	(SELECT	p.nr_seq_conta,
			p.dt_emissao_conta,
			p.dt_atendimento_ref,
			p.dt_inicio_faturamento,
			p.cd_guia_ok,
			p.nr_seq_segurado,
			p.ie_tipo_guia,
			p.nr_seq_ops_congenere,
			p.nr_seq_congenere,
			p.nr_seq_congenere_prot,
			p.ie_prestador_a400,
			CASE WHEN coalesce(p.nr_seq_ops_congenere::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = p.nr_seq_ops_congenere) END  ie_tipo_ops_congenere,
			CASE WHEN coalesce(p.nr_seq_congenere::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = p.nr_seq_congenere) END  ie_tipo_congenere,
			CASE WHEN coalesce(p.nr_seq_congenere_prot::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = p.nr_seq_congenere_prot) END  ie_tipo_congenere_prot,
			p.ie_tipo_protocolo,
			(select count(1)
			from	pls_fatura_motivo_imp_cob i
			where	i.nr_seq_lote_fat 	= p.nr_seq_lote_fat
			and	i.nr_seq_conta		= p.nr_seq_conta) qt_impedimento
		from	w_pls_lote_fat_proc p
		where	p.nr_seq_lote_fat	= nr_seq_lote_pc
		and	p.nr_seq_pos_proc	= coalesce(nr_seq_pos_proc_pc,p.nr_seq_pos_proc)
		and	coalesce(p.ie_impedimento_cobranca::text, '') = ''
		
union

		select	m.nr_seq_conta,
			m.dt_emissao_conta,
			m.dt_atendimento_ref,
			m.dt_inicio_faturamento,
			m.cd_guia_ok,
			m.nr_seq_segurado,
			m.ie_tipo_guia,
			m.nr_seq_ops_congenere,
			m.nr_seq_congenere,
			m.nr_seq_congenere_prot,
			m.ie_prestador_a400,
			CASE WHEN coalesce(m.nr_seq_ops_congenere::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = m.nr_seq_ops_congenere) END  ie_tipo_ops_congenere,
			CASE WHEN coalesce(m.nr_seq_congenere::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = m.nr_seq_congenere) END  ie_tipo_congenere,
			CASE WHEN coalesce(m.nr_seq_congenere_prot::text, '') = '' THEN null  ELSE (select max(x.ie_tipo_congenere) from pls_congenere x where x.nr_sequencia = m.nr_seq_congenere_prot) END  ie_tipo_congenere_prot,
			m.ie_tipo_protocolo,
			(select count(1)
			from	pls_fatura_motivo_imp_cob i
			where	i.nr_seq_lote_fat 	= m.nr_seq_lote_fat
			and	i.nr_seq_conta		= m.nr_seq_conta) qt_impedimento
		from	w_pls_lote_fat_mat m
		where	m.nr_seq_lote_fat	= nr_seq_lote_pc
		and	m.nr_seq_pos_mat	= coalesce(nr_seq_pos_mat_pc,m.nr_seq_pos_mat)
		and	coalesce(m.ie_impedimento_cobranca::text, '') = '') a
	group by a.nr_seq_conta;
	
BEGIN

CALL CALL CALL CALL CALL CALL pls_faturamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

-- Verifica se ha regra de liberacao de fatura
select	count(1)
into STRICT	qt_regra_lib_fat_w
from	pls_regra_lib_fat
where	cd_estabelecimento = cd_estabelecimento_p;

for r_c01_w in c01( nr_seq_lote_p, nr_seq_pos_proc_p, nr_seq_pos_mat_p ) loop

	ie_impedimento_cobranca_w 	:= null;
	PERFORM set_config('pls_faturamento_pck.dt_alta_w', null, false);
	PERFORM set_config('pls_faturamento_pck.dt_atendimento_w', coalesce(r_c01_w.dt_atendimento, r_c01_w.dt_emissao), false);
	nr_seq_congenere_w		:= coalesce(r_c01_w.nr_seq_ops_congenere,r_c01_w.nr_seq_congenere);
	PERFORM set_config('pls_faturamento_pck.ie_tipo_congenere_w', coalesce(coalesce(r_c01_w.ie_tipo_ops_congenere,r_c01_w.ie_tipo_congenere),'CO'), false);
	
	-- Se for reembolso prioriza
	if (r_c01_w.ie_tipo_protocolo = 'R') and (r_c01_w.nr_seq_congenere_prot IS NOT NULL AND r_c01_w.nr_seq_congenere_prot::text <> '') then
		nr_seq_congenere_w	:= coalesce(r_c01_w.nr_seq_congenere_prot,nr_seq_congenere_w);
		PERFORM set_config('pls_faturamento_pck.ie_tipo_congenere_w', coalesce(r_c01_w.ie_tipo_congenere_prot,current_setting('pls_faturamento_pck.ie_tipo_congenere_w')::pls_congenere.ie_tipo_congenere%type), false);
	end if;
	
	if (qt_regra_lib_fat_w > 0) then
		pls_obter_regra_lib_fat(r_c01_w.nr_seq_conta, trunc(clock_timestamp()), cd_estabelecimento_p, nm_usuario_p, current_setting('pls_faturamento_pck.ie_exige_med_aud_w')::pls_regra_lib_fat.ie_exige_med_aud%type, current_setting('pls_faturamento_pck.ie_exige_enf_aud_w')::pls_regra_lib_fat.ie_exige_enf_aud%type);
		
		if (coalesce(current_setting('pls_faturamento_pck.ie_exige_med_aud_w')::pls_regra_lib_fat.ie_exige_med_aud%type, 'N') = 'S') then
			ie_impedimento_cobranca_w := 'P';
			
			if (r_c01_w.qt_impedimento = 0) then
				CALL pls_inserir_mot_imp_cob_fat(r_c01_w.nr_seq_conta, nr_seq_lote_p, '3', nm_usuario_p);
			end if;
		end if;
		
		if (coalesce(current_setting('pls_faturamento_pck.ie_exige_enf_aud_w')::pls_regra_lib_fat.ie_exige_enf_aud%type, 'N') = 'S') then
			ie_impedimento_cobranca_w := 'P';
			
			if (r_c01_w.qt_impedimento = 0) then
				CALL pls_inserir_mot_imp_cob_fat(r_c01_w.nr_seq_conta, nr_seq_lote_p, '4', nm_usuario_p);
			end if;
		end if;
	end if;
	
	if (current_setting('pls_faturamento_pck.ie_tipo_congenere_w')::pls_congenere.ie_tipo_congenere%type = 'CO') then
		if (ie_conta_fechada_p = 'S') then
			-- Quando for de INTERNACAO deve ser utilizada a DATA DE ALTA - E nao for consulta (3)
			if (r_c01_w.cd_guia_ok IS NOT NULL AND r_c01_w.cd_guia_ok::text <> '') and (r_c01_w.ie_tipo_guia not in ('3')) then
				select	max(dt_alta)
				into STRICT	current_setting('pls_faturamento_pck.dt_alta_w')::pls_conta.dt_alta%type
				from	pls_conta
				where	nr_seq_segurado	= r_c01_w.nr_seq_segurado
				and	cd_guia_ok 	= r_c01_w.cd_guia_ok
				and	ie_tipo_guia 	= '5';
				
				if (current_setting('pls_faturamento_pck.dt_alta_w')::pls_conta.dt_alta%coalesce(type::text, '') = '') and (r_c01_w.ie_tipo_guia not in ('3','5')) then -- Nao for consulta (3) e nem internacao (5)
					select	coalesce(max(dt_atendimento_referencia),current_setting('pls_faturamento_pck.dt_atendimento_w')::pls_conta.dt_atendimento%type)
					into STRICT	current_setting('pls_faturamento_pck.dt_atendimento_w')::pls_conta.dt_atendimento%type
					from	pls_conta
					where	nr_seq_segurado	= r_c01_w.nr_seq_segurado
					and	cd_guia_ok 	= r_c01_w.cd_guia_ok;
				end if;
			end if;
		else -- Manual do PTU - Regra: Para notas de internacao, adotar a data de inicio de faturamento, conforme regra do Envio de Dados da ANS
			if (r_c01_w.ie_tipo_guia = '5') then
				PERFORM set_config('pls_faturamento_pck.dt_atendimento_w', coalesce(r_c01_w.dt_internacao, current_setting('pls_faturamento_pck.dt_atendimento_w')::pls_conta.dt_atendimento%type), false);
			end if;
		end if;
		
		-- Se a data de atendimento estiver fora do prazo
		if (pls_obter_se_envia_conta(current_setting('pls_faturamento_pck.dt_atendimento_w')::pls_conta.dt_atendimento%type, clock_timestamp(), nr_seq_congenere_w, r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_conta, 'S') = 'N') then
			-- Verifica se a data da alta esta fora do prazo
			
			if (current_setting('pls_faturamento_pck.dt_alta_w')::pls_conta.dt_alta%(type IS NOT NULL AND type::text <> '')) then
				if ( pls_obter_se_envia_conta(current_setting('pls_faturamento_pck.dt_alta_w')::pls_conta.dt_alta%type, clock_timestamp(), nr_seq_congenere_w, r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_conta, 'S') = 'N') then
					ie_impedimento_cobranca_w := 'P';
					
					if (r_c01_w.qt_impedimento = 0) then
						CALL pls_inserir_mot_imp_cob_fat(r_c01_w.nr_seq_conta, nr_seq_lote_p, '1', nm_usuario_p);
					end if;
				end if;
			else	-- Caso nao tenha data da alta, a conta esta realmente fora do prazo
				ie_impedimento_cobranca_w := 'P';
				
				if (r_c01_w.qt_impedimento = 0) then
					CALL pls_inserir_mot_imp_cob_fat(r_c01_w.nr_seq_conta, nr_seq_lote_p, '1', nm_usuario_p);
				end if;
			end if;
		end if;
	end if;
	
	if (r_c01_w.ie_prestador_a400 = 'N') then
		ie_impedimento_cobranca_w := 'P';
		
		if (r_c01_w.qt_impedimento = 0) then
			CALL pls_inserir_mot_imp_cob_fat(r_c01_w.nr_seq_conta, nr_seq_lote_p, '2', nm_usuario_p);
		end if;
	end if;
	
	if (ie_impedimento_cobranca_w IS NOT NULL AND ie_impedimento_cobranca_w::text <> '') then
		-- Atualiza o item de procedimento com o impedimento de cobranca para que seja gerado em uma fatura separada
		update	w_pls_lote_fat_proc
		set	ie_impedimento_cobranca	= ie_impedimento_cobranca_w,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_conta 		= r_c01_w.nr_seq_conta;
		
		-- Atualiza o item de material com o impedimento de cobranca para que seja gerado em uma fatura separada
		update	w_pls_lote_fat_mat
		set	ie_impedimento_cobranca	= ie_impedimento_cobranca_w,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_conta 		= r_c01_w.nr_seq_conta;
	end if;
end loop;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.verificar_imped_cobr_fat ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, ie_conta_fechada_p pls_regra_faturamento.ie_conta_fechada%type, nr_seq_pos_proc_p pls_conta_pos_proc.nr_sequencia%type, nr_seq_pos_mat_p pls_conta_pos_mat.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
