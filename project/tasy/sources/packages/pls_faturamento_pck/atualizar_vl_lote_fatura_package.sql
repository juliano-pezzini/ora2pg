-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- pls_faturamento_pck.atualizar_vl_lote_fatura(Atualizar os valores)
CREATE OR REPLACE PROCEDURE pls_faturamento_pck.atualizar_vl_lote_fatura ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_consiste_val_p text, ie_commit_p text, ie_atualiza_ato_p text default 'S') AS $body$
DECLARE

					
vl_fatura_w			double precision:=0;
vl_evento_w			double precision:=0;
vl_faturado_proc_w		double precision:=0;
vl_faturado_mat_w		double precision:=0;
vl_faturado_proc_ndc_w		double precision:=0;
vl_faturado_mat_ndc_w		double precision:=0;
vl_faturado_w			double precision:=0;
vl_faturado_ndc_w		double precision:=0;
vl_ato_aux_w			pls_fatura.vl_ato_aux%type;
vl_ato_princ_w			pls_fatura.vl_ato_princ%type;
vl_ato_secundario_w		pls_fatura.vl_ato_princ%type;
vl_ato_aux_tot_w		pls_fatura.vl_ato_aux%type;
vl_ato_princ_tot_w		pls_fatura.vl_ato_princ%type;
vl_ato_secundario_tot_w		pls_fatura.vl_ato_princ%type;

c01 CURSOR(	nr_seq_lote_pc			pls_lote_faturamento.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura
	from	pls_fatura	
	where	nr_seq_lote = nr_seq_lote_pc;

c02 CURSOR(	nr_seq_fatura_pc		pls_fatura.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura_evento
	from	pls_fatura_evento
	where	nr_seq_fatura = nr_seq_fatura_pc;
	
current_setting('pls_faturamento_pck.c03')::CURSOR( CURSOR(	nr_seq_fatura_evento_pc		pls_fatura_evento.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia nr_seq_fatura_conta,
		a.ie_origem_conta
	from	pls_fatura_conta	b,
		pls_conta		a
	where	a.nr_sequencia		= b.nr_seq_conta
	and	nr_seq_fatura_evento 	= nr_seq_fatura_evento_pc;
	
BEGIN

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	
	for r_c01_w in c01( nr_seq_lote_p ) loop
		vl_faturado_w 		:= 0;
		vl_faturado_ndc_w 	:= 0;
		vl_ato_aux_tot_w	:= 0;
		vl_ato_princ_tot_w	:= 0;
		vl_ato_secundario_tot_w	:= 0;
		
		for r_c02_w in c02( r_c01_w.nr_seq_fatura ) loop
			for r_c03_w in current_setting('pls_faturamento_pck.c03')::CURSOR( ( r_c02_w.nr_seq_fatura_evento ) loop
				select	sum(vl_faturado),
					sum(vl_faturado_ndc)
				into STRICT	vl_faturado_proc_w,
					vl_faturado_proc_ndc_w
				from	pls_fatura_proc
				where	nr_seq_fatura_conta = r_c03_w.nr_seq_fatura_conta;
				
				select	sum(vl_faturado),
					sum(vl_faturado_ndc)
				into STRICT	vl_faturado_mat_w,
					vl_faturado_mat_ndc_w
				from	pls_fatura_mat
				where	nr_seq_fatura_conta = r_c03_w.nr_seq_fatura_conta;
				
				update	pls_fatura_conta
				set	vl_faturado 		= coalesce(vl_faturado_proc_w, 0) + coalesce(vl_faturado_mat_w, 0),
					vl_faturado_ndc		= coalesce(vl_faturado_proc_ndc_w, 0) + coalesce(vl_faturado_mat_ndc_w, 0),
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia 		= r_c03_w.nr_seq_fatura_conta;
				
				vl_faturado_w := vl_faturado_w + coalesce(vl_faturado_proc_w, 0) + coalesce(vl_faturado_mat_w, 0);
				
				vl_faturado_ndc_w := vl_faturado_ndc_w + coalesce(vl_faturado_proc_ndc_w, 0) + coalesce(vl_faturado_mat_ndc_w, 0);
			end loop;
			
			select	sum(vl_faturado) + sum(vl_faturado_ndc)
			into STRICT	vl_evento_w
			from	pls_fatura_conta
			where	nr_seq_fatura_evento = r_c02_w.nr_seq_fatura_evento;
			
			update	pls_fatura_evento
			set	vl_evento 	= coalesce(vl_evento_w, 0),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= r_c02_w.nr_seq_fatura_evento;
		end loop;
		
		-- Atualizar os valores de ato cooperado
		if (coalesce(ie_atualiza_ato_p,'N') = 'S') then
			select	sum(coalesce(vl_ato_princ, 0)),
				sum(coalesce(vl_ato_aux, 0)),
				sum(coalesce(vl_ato_secundario, 0))
			into STRICT	vl_ato_princ_tot_w,
				vl_ato_aux_tot_w,
				vl_ato_secundario_tot_w
			from (SELECT	CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,null,c.nr_seq_conta_mat)='1' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_princ,
					CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,null,c.nr_seq_conta_mat)='2' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_aux,
					CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,null,c.nr_seq_conta_mat)='3' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_secundario
				from	pls_conta_pos_mat_fat		d,
					pls_fatura_mat			c,
					pls_fatura_conta		f,
					pls_fatura_evento		g
				where	g.nr_sequencia			= f.nr_seq_fatura_evento
				and	f.nr_sequencia			= c.nr_seq_fatura_conta
				and	d.nr_sequencia			= c.nr_seq_pos_mat_fat
				and	g.nr_seq_fatura			= r_c01_w.nr_seq_fatura
				
union all

				SELECT	CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,c.nr_seq_conta_proc,null)='1' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_princ,
					CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,c.nr_seq_conta_proc,null)='2' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_aux,
					CASE WHEN pls_faturamento_pck.obter_ato_cooperado_fat(d.nr_seq_conta_resumo,d.nr_seq_conta,c.nr_seq_conta_proc,null)='3' THEN  coalesce(c.vl_faturado, 0) + coalesce(c.vl_faturado_ndc, 0)  ELSE 0 END  vl_ato_secundario
				from	pls_conta_pos_proc_fat		d,
					pls_fatura_proc			c,
					pls_fatura_conta		f,
					pls_fatura_evento		g
				where	g.nr_sequencia			= f.nr_seq_fatura_evento
				and	f.nr_sequencia			= c.nr_seq_fatura_conta
				and	d.nr_sequencia			= c.nr_seq_pos_proc_fat
				and	g.nr_seq_fatura			= r_c01_w.nr_seq_fatura) alias26;
		end if;
		
		update	pls_fatura
		set	vl_fatura		= coalesce(vl_faturado_w, 0),
			vl_total_ndc		= coalesce(vl_faturado_ndc_w, 0),
			vl_ato_aux		= vl_ato_aux_tot_w,
			vl_ato_princ		= vl_ato_princ_tot_w,
			vl_ato_secundario	= vl_ato_secundario_tot_w,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia 		= r_c01_w.nr_seq_fatura;
	end loop;
	
	if (coalesce(ie_consiste_val_p, 'N') = 'S') then
		CALL pls_gerar_fatura_log(nr_seq_lote_p, null, null, 'PLS_FATURAMENTO_PCK.ATUALIZAR_VL_LOTE_FATURA()', 'AT', 'N', nm_usuario_p);
	end if;
	
	if (coalesce(ie_commit_p, 'N') = 'S') then
		commit;
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_faturamento_pck.atualizar_vl_lote_fatura ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_consiste_val_p text, ie_commit_p text, ie_atualiza_ato_p text default 'S') FROM PUBLIC;
