-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE wheb_exportar_xml_pck.montar_xml_elemento (nr_seq_atrib_sup_p bigint,ar_xml_elemento_p xmlElemento,ar_result_rs_hash_p myArray) AS $body$
DECLARE

	ie_criar_atributo_w 	varchar(1);
	nm_atributo_xml_w	varchar(90);
	ds_cabecalho_w		varchar(255);
	ie_possui_registro_w	varchar(1) := 'N';
	ar_nm_param_cabecalho_w	myArray;
	ds_param_w	varchar(4000);
	ie_possui_elementos_w	integer := 0;
	ie_gerar_quebra_w	varchar(1) := 'S';
	c_atrib_superior CURSOR FOR
		SELECT	ie_criar_atributo,
				CASE WHEN ds_namespace='' THEN ''  ELSE ds_namespace || ':' END  || replace(nm_atributo_xml,'@ns@',ds_namespace_w),
				replace(coalesce(ds_cabecalho,''),'@ns@',ds_namespace_w),				
				'S' ie_possui_registro
		FROM	xml_atributo
		WHERE	nr_sequencia = nr_seq_atrib_sup_p
		AND		dt_atualizacao_nrec < dt_assinatura_digital_w;
	
BEGIN
		if ( ar_xml_elemento_p[1].IE_CRIAR_ELEMENTO = 'S' ) then
			OPEN c_atrib_superior;
			LOOP
			FETCH c_atrib_superior INTO
				ie_criar_atributo_w,
				nm_atributo_xml_w,
				ds_cabecalho_w,
				ie_possui_registro_w;
			EXIT WHEN NOT FOUND; /* apply on c_atrib_superior */
			END LOOP;
			CLOSE c_atrib_superior;

			/*Tratamento para BIND_VARIABLE NO CABECALHO */


			ar_nm_param_cabecalho_w := wheb_exportar_xml_pck.armazena_parametros_sql(ds_cabecalho_w, ar_nm_param_cabecalho_w, false);
			for contador_w in 1..ar_nm_param_cabecalho_w.count loop
				/*Verifica se existe valor para o parametro na Query Superior*/


				ds_param_w := wheb_exportar_xml_pck.obter_valor_parametro(ar_nm_param_cabecalho_w[contador_w].nm,ar_result_rs_hash_p);
				/*Verificar se existe valor para o parametro nos parametros do projeto*/


				if ( coalesce(ds_param_w::text, '') = '' ) then
					ds_param_w := wheb_exportar_xml_pck.obter_valor_parametro(ar_nm_param_cabecalho_w[contador_w].nm,current_setting('wheb_exportar_xml_pck.ar_parametros_w')::myArray);
				end if;
				if ( coalesce(ds_param_w::text, '') = '' ) then
					ds_param_w := wheb_exportar_xml_pck.obter_valor_parametro(ar_nm_param_cabecalho_w[contador_w].nm,current_setting('wheb_exportar_xml_pck.ar_result_todos_sql_p')::myArray);
				end if;		
				ds_cabecalho_w := replace(ds_cabecalho_w,':'||ar_nm_param_cabecalho_w[contador_w].nm,ds_param_w);
				
			end loop;
			
			if (ds_cabecalho_w IS NOT NULL AND ds_cabecalho_w::text <> '') then
				ds_cabecalho_w := ' ' || ds_cabecalho_w;
			end if;

			if ( ie_possui_registro_w = 'S' ) and ( ar_xml_elemento_p[1].IE_TIPO_COMPLEXO = 'S' ) then
				if ( ie_criar_atributo_w = 'S' ) then
					CALL wheb_exportar_xml_pck.addxml(chr(13) || chr(10) || '<' || nm_atributo_xml_w || ds_cabecalho_w);
					if ( ar_xml_elemento_p[1].IE_TIPO_ELEMENTO = 'E' ) then
						CALL wheb_exportar_xml_pck.addxml('>');
					end if;
				end if;
			else
				CALL wheb_exportar_xml_pck.addxml(chr(13) || chr(10) || '<' || ar_xml_elemento_p[1].NM_ELEMENTO);
				if ( ar_xml_elemento_p[1](.DS_CABECALHO IS NOT NULL AND .DS_CABECALHO::text <> '') ) then
					 CALL wheb_exportar_xml_pck.addxml(' ');
				end if;
				CALL wheb_exportar_xml_pck.addxml(ar_xml_elemento_p[1].DS_CABECALHO);
				if ( ar_xml_elemento_p[1].IE_TIPO_ELEMENTO = 'E' ) then
					CALL wheb_exportar_xml_pck.addxml('>');
				end if;
			end if;
		end if;
		CALL wheb_exportar_xml_pck.gerar_xml_atributo(ar_xml_elemento_p,ar_result_rs_hash_p,null);
	
		begin
			SELECT coalesce(ie_gerar_quebra, 'S')
			INTO STRICT ie_gerar_quebra_w
			FROM xml_projeto
			WHERE nr_sequencia = ar_xml_elemento_p[1].NR_SEQ_PROJETO;
		exception
			when others then
				ie_gerar_quebra_w := 'S';
		end;
		
		if (ie_gerar_quebra_w = 'N') then
			begin
				SELECT 1
				INTO STRICT ie_possui_elementos_w
				FROM xml_atributo
				WHERE nr_seq_elemento = ar_xml_elemento_p[1].NR_SEQUENCIA
				AND ie_criar_atributo = 'S'
				AND (nr_seq_atrib_elem IS NOT NULL AND nr_seq_atrib_elem::text <> '');
			exception
				when others then
					ie_possui_elementos_w := 0;
			end;
		end if;
	
		if ( ar_xml_elemento_p[1].IE_CRIAR_ELEMENTO = 'S' ) then
			if ( ar_xml_elemento_p[1].IE_TIPO_COMPLEXO = 'S' ) and ( ie_possui_registro_w = 'S' ) then
				if ( ie_criar_atributo_w = 'S' ) then
					if ( ie_gerar_quebra_w = 'S' ) or (ie_possui_elementos_w > 0) then
						CALL wheb_exportar_xml_pck.addxml(chr(13) || chr(10));
					end if;
					CALL wheb_exportar_xml_pck.addxml('</' || nm_atributo_xml_w || '>');
				end if;
			else
				if ( ie_gerar_quebra_w = 'S' ) or (ie_possui_elementos_w > 0) then
					CALL wheb_exportar_xml_pck.addxml(chr(13) || chr(10));
				end if;
				CALL wheb_exportar_xml_pck.addxml('</' || ar_xml_elemento_p[1].NM_ELEMENTO || '>');
			end if;
		end if;
	end;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE wheb_exportar_xml_pck.montar_xml_elemento (nr_seq_atrib_sup_p bigint,ar_xml_elemento_p xmlElemento,ar_result_rs_hash_p myArray) FROM PUBLIC;
