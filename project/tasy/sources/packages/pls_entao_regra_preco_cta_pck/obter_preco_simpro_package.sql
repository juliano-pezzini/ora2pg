-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_entao_regra_preco_cta_pck.obter_preco_simpro ( nr_seq_material_p pls_material.nr_sequencia%type, tx_pfb_p pls_cp_cta_emat.tx_ajuste_simpro_pfb%type, tx_pmc_p pls_cp_cta_emat.tx_ajuste_simpro_pmc%type, dt_base_p pls_conta_mat.dt_atendimento%type, ie_tipo_preco_simpro_p pls_cp_cta_emat.ie_tipo_preco_simpro%type, vl_pfb_neutra_simpro_p pls_cp_cta_emat.vl_pfb_neutra_simpro%type, vl_pfb_positiva_simpro_p pls_cp_cta_emat.vl_pfb_positiva_simpro%type, vl_pfb_negativa_simpro_p pls_cp_cta_emat.vl_pfb_negativa_simpro%type, vl_pfb_nao_aplic_simpro_p pls_cp_cta_emat.vl_pfb_nao_aplicavel_simpro%type, ie_tipo_ajuste_pfb_p pls_cp_cta_emat.ie_tipo_ajuste_pfb%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) RETURNS bigint AS $body$
DECLARE


vl_preco_w		simpro_preco.vl_preco_venda%type;
cd_simpro_w		pls_material.cd_simpro%type;
qt_conversao_w		pls_material.qt_conversao_simpro%type;
dt_fora_linha_w		timestamp;
qt_ultimo_vl_valido_w	integer;
dt_base_w		timestamp;
ie_valido_w		boolean;

C01 CURSOR(	cd_simpro_pc 		simpro_preco.cd_simpro%type,
		dt_vigencia_pc		simpro_preco.dt_vigencia%type,
		ie_tipo_preco_simpro_pc	simpro_preco.ie_tipo_preco%type) FOR
	SELECT 	x.vl_preco_fabrica,
		x.vl_preco_venda,
		x.ie_tipo_preco,
		x.ie_tipo_lista,
		x.dt_vigencia
	from (	SELECT 	coalesce(vl_preco_fabrica, 0) vl_preco_fabrica,
			coalesce(vl_preco_venda, 0) vl_preco_venda,
			ie_tipo_preco,
			ie_tipo_lista,
			dt_vigencia
		from	simpro_preco
		where	cd_simpro = cd_simpro_pc
		and	dt_vigencia <= dt_vigencia_pc
		and	ie_tipo_preco = ie_tipo_preco_simpro_pc
		
union all

		select 	coalesce(vl_preco_fabrica, 0) vl_preco_fabrica,
			coalesce(vl_preco_venda, 0) vl_preco_venda,
			ie_tipo_preco,
			ie_tipo_lista,
			dt_vigencia
		from	simpro_preco
		where	cd_simpro = cd_simpro_pc
		and	dt_vigencia <= dt_vigencia_pc
		and	ie_tipo_preco_simpro_pc = 'N') x
	order by x.dt_vigencia desc,
		x.vl_preco_fabrica desc,
		x.vl_preco_venda desc;
	
BEGIN

dt_base_w := coalesce(dt_base_p, clock_timestamp());

-- dados do material
select	coalesce(max(a.qt_conversao_simpro), 1),
	max(a.cd_simpro),
	max(b.dt_fora_linha)
into STRICT	qt_conversao_w,
	cd_simpro_w,
	dt_fora_linha_w
from	pls_material a,
	simpro_cadastro b
where	a.nr_sequencia = nr_seq_material_p
and	a.cd_estabelecimento = cd_estabelecimento_p
and	b.cd_simpro = a.cd_simpro;

if (cd_simpro_w IS NOT NULL AND cd_simpro_w::text <> '') then

	-- verifica se existe alguma regra de ultimo valor válido para o periodo informado
	select	count(1)
	into STRICT	qt_ultimo_vl_valido_w
	from	pls_regra_simpro_preco
	where	dt_base_w between dt_inicio_vigencia_ref and dt_fim_vigencia_ref
	and	ie_situacao = 'A'
	and	ie_ultimo_valor_valido = 'S';

	for r_c01_w in C01(	cd_simpro_w, dt_base_w, ie_tipo_preco_simpro_p) loop

		-- inicia sendo verdade
		ie_valido_w := true;

		-- se não é para considerar fora linha e está fora
		if (current_setting('pls_entao_regra_preco_cta_pck.ie_fora_linha_w')::pls_parametros.ie_fora_linha_simpro%type = 'N') and (dt_fora_linha_w > r_c01_w.dt_vigencia) then
		
			ie_valido_w := false;
		end if;
		
		-- se é para considerar o ultimo valor válido e nenhum dos valores é maior que zero
		if (qt_ultimo_vl_valido_w > 0) and (r_c01_w.vl_preco_fabrica = 0) and (r_c01_w.vl_preco_venda = 0) then
		
			ie_valido_w := false;
		end if;
		
		-- se for válido faz as validações aplica as taxas e devolve o valor com 
		-- as taxas aplicadas
		if (ie_valido_w) then
		
			-- verifica se é preço de fabrica ou preço máximo ao consumidor e aplica as taxas corretas
			-- neste if é necessário verificar se é ou não último valor válido, isto porque caso seja 
			-- último valor válido e o preço de fabrica for zero então é para usar o preço máximo ao consumidor
			-- caso ambos sejam zero então nem entra aqui pois será inválidado no if anterior
			if (r_c01_w.ie_tipo_preco = 'F') and
				((qt_ultimo_vl_valido_w = 0) or
				(qt_ultimo_vl_valido_w > 0 AND r_c01_w.vl_preco_fabrica > 0)) then 

				-- se é para aplicar a taxa unica
				if (ie_tipo_ajuste_pfb_p = 'U') then 

					vl_preco_w := r_c01_w.vl_preco_fabrica * tx_pfb_p;

				-- se é para aplicar o conjunto de taxas
				else
					-- ie_tipo_lista é o tipo de tributação ele quem define qual a taxa a ser aplicada 
					case(r_c01_w.ie_tipo_lista)
					
						-- Negativa
						when 'N' then
							vl_preco_w := dividir_sem_round(r_c01_w.vl_preco_fabrica, vl_pfb_negativa_simpro_p);
						
						-- Não aplicavel	
						when 'Q' then
							vl_preco_w := dividir_sem_round(r_c01_w.vl_preco_fabrica, vl_pfb_nao_aplic_simpro_p);
						
						-- Positiva
						when 'S' then
							vl_preco_w := dividir_sem_round(r_c01_w.vl_preco_fabrica, vl_pfb_positiva_simpro_p);
						
						-- Neutra	
						when 'T' then
							vl_preco_w := dividir_sem_round(r_c01_w.vl_preco_fabrica,vl_pfb_neutra_simpro_p);
						
						else
							null;
					end case;
				end if;
			else

				vl_preco_w := r_c01_w.vl_preco_venda * tx_pmc_p;
			end if;

			-- o primeiro valor que encontrar válido é o correto então sai do loop
			-- e fecha o cursor automáticamente
			exit;
		end if;
	end loop;
	
	-- aplica a quantidade de conversão
	if (vl_preco_w > 0) then
		vl_preco_w := dividir_sem_round(vl_preco_w, qt_conversao_w);
	end if;
end if;

return vl_preco_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_entao_regra_preco_cta_pck.obter_preco_simpro ( nr_seq_material_p pls_material.nr_sequencia%type, tx_pfb_p pls_cp_cta_emat.tx_ajuste_simpro_pfb%type, tx_pmc_p pls_cp_cta_emat.tx_ajuste_simpro_pmc%type, dt_base_p pls_conta_mat.dt_atendimento%type, ie_tipo_preco_simpro_p pls_cp_cta_emat.ie_tipo_preco_simpro%type, vl_pfb_neutra_simpro_p pls_cp_cta_emat.vl_pfb_neutra_simpro%type, vl_pfb_positiva_simpro_p pls_cp_cta_emat.vl_pfb_positiva_simpro%type, vl_pfb_negativa_simpro_p pls_cp_cta_emat.vl_pfb_negativa_simpro%type, vl_pfb_nao_aplic_simpro_p pls_cp_cta_emat.vl_pfb_nao_aplicavel_simpro%type, ie_tipo_ajuste_pfb_p pls_cp_cta_emat.ie_tipo_ajuste_pfb%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
