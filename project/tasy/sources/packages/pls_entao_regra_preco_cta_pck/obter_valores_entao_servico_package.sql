-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_entao_regra_preco_cta_pck.obter_valores_entao_servico ( ie_destino_regra_p text, cd_moeda_p pls_cp_cta_eserv.cd_moeda%type, cd_tabela_servico_p pls_cp_cta_eserv.cd_tabela_servico%type, tx_ajuste_p pls_cp_cta_eserv.tx_ajuste%type, tx_ajuste_preco_p pls_cp_cta_eserv.tx_ajuste_preco%type, vl_negociado_p pls_cp_cta_eserv.vl_negociado%type, dt_proced_referencia_p pls_conta_proc.dt_procedimento_referencia%type, ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, cd_procedimento_p pls_conta_proc.cd_procedimento%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, vl_servico_p INOUT pls_conta_proc.vl_unitario_calc%type, vl_ch_honorarios_p INOUT pls_conta_proc.vl_ch_honorario%type) AS $body$
DECLARE



vl_servico_w		pls_conta_proc.vl_unitario_calc%type;
vl_ch_honorarios_w	pls_conta_proc.vl_ch_honorario%type;


BEGIN
-- inicia as variáveis
vl_ch_honorarios_w := null;

-- se tem valor negociado então só retorna o valor
if (vl_negociado_p > 0) then

	vl_servico_w := vl_negociado_p;

	CALL pls_entao_regra_preco_cta_pck.gerencia_log_serv(	'Valorização pelo valor negociado informado na regra.',
				nr_seq_conta_proc_p,
				vl_servico_w,
				ie_destino_regra_p,
				nm_usuario_p);
else
	
	-- obtém o valor do serviço de acordo com a tabela informada na regra
	vl_servico_w := pls_entao_regra_preco_cta_pck.obter_valor_tabela_serv(	cd_tabela_servico_p, cd_procedimento_p,
							ie_origem_proced_p, dt_proced_referencia_p,
							cd_estabelecimento_p);
	
	CALL pls_entao_regra_preco_cta_pck.gerencia_log_serv(	'Valorização pela tabela de serviço ' || cd_tabela_servico_p || '.',
				nr_seq_conta_proc_p,
				vl_servico_w,
				ie_destino_regra_p,
				nm_usuario_p);
	
	-- obtém a cotação da moeda de honorários
	vl_ch_honorarios_w := pls_entao_regra_preco_cta_pck.obter_cotacao_moeda(	cd_moeda_p, dt_proced_referencia_p);
	
	if (vl_ch_honorarios_w > 0) then
		
		vl_servico_w := vl_servico_w * vl_ch_honorarios_w;
		
		CALL pls_entao_regra_preco_cta_pck.gerencia_log_serv(	'Aplicado cotação da moeda ' || cd_moeda_p || '.',
					nr_seq_conta_proc_p,
					vl_servico_w,
					ie_destino_regra_p,
					nm_usuario_p);
	end if;
	
	vl_servico_w := vl_servico_w * tx_ajuste_p;
	
	CALL pls_entao_regra_preco_cta_pck.gerencia_log_serv(	'Aplicado índice de ajuste informado na regra.',
				nr_seq_conta_proc_p,
				vl_servico_w,
				ie_destino_regra_p,
				nm_usuario_p);
	
	if (tx_ajuste_preco_p > 0) then
	
		vl_servico_w := vl_servico_w * tx_ajuste_preco_p;
		
		CALL pls_entao_regra_preco_cta_pck.gerencia_log_serv(	'Aplicado taxa de ajuste informada na regra.',
					nr_seq_conta_proc_p,
					vl_servico_w,
					ie_destino_regra_p,
					nm_usuario_p);
	end if;
end if;

-- alimenta os parametros out
vl_servico_p := vl_servico_w;
vl_ch_honorarios_p := vl_ch_honorarios_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_entao_regra_preco_cta_pck.obter_valores_entao_servico ( ie_destino_regra_p text, cd_moeda_p pls_cp_cta_eserv.cd_moeda%type, cd_tabela_servico_p pls_cp_cta_eserv.cd_tabela_servico%type, tx_ajuste_p pls_cp_cta_eserv.tx_ajuste%type, tx_ajuste_preco_p pls_cp_cta_eserv.tx_ajuste_preco%type, vl_negociado_p pls_cp_cta_eserv.vl_negociado%type, dt_proced_referencia_p pls_conta_proc.dt_procedimento_referencia%type, ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, cd_procedimento_p pls_conta_proc.cd_procedimento%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, vl_servico_p INOUT pls_conta_proc.vl_unitario_calc%type, vl_ch_honorarios_p INOUT pls_conta_proc.vl_ch_honorario%type) FROM PUBLIC;
