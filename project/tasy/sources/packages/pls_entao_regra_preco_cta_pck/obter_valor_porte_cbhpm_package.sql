-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_entao_regra_preco_cta_pck.obter_valor_porte_cbhpm ( cd_porte_p pls_ajuste_porte_cbhpm.cd_porte%type, dt_referencia_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_especialidade_p grupo_proc.cd_especialidade%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, dt_edicao_p timestamp, ie_igual_p text, tx_porte_p INOUT cbhpm_preco.tx_porte%type) AS $body$
DECLARE


vl_porte_w		cbhpm_porte.vl_porte%type;
ie_grupo_prest_w	varchar(1);

C01 CURSOR(	cd_porte_pc		pls_ajuste_porte_cbhpm.cd_porte%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_prestador.nr_sequencia%type,
		cd_procedimento_pc	procedimento.cd_procedimento%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type,
		cd_grupo_proc_pc	procedimento.cd_grupo_proc%type,
		cd_especialidade_pc	grupo_proc.cd_especialidade%type,
		cd_area_proced_pc	especialidade_proc.cd_area_procedimento%type) FOR
	SELECT	tx_ajuste,
		vl_porte_negociado,
		nr_seq_prestador,
		cd_procedimento,
		ie_origem_proced,
		cd_grupo_proc,
		cd_especialidade,
		cd_area_procedimento,
		dt_vigencia,
		nr_seq_grupo_prest,
		ie_valido
	from (SELECT	coalesce(tx_ajuste, 1) tx_ajuste,
			vl_porte_negociado,
			nr_seq_prestador,
			cd_procedimento,
			ie_origem_proced,
			cd_grupo_proc,
			cd_especialidade,
			cd_area_procedimento,
			dt_vigencia,
			nr_seq_grupo_prest,
			pls_entao_regra_preco_cta_pck.obter_se_ajuste_cbhpm_valido(	nr_seq_prestador, cd_procedimento,
							ie_origem_proced, cd_grupo_proc,
							cd_especialidade, cd_area_procedimento,
							nr_seq_prestador_pc, cd_procedimento_pc,
							ie_origem_proced_pc, cd_grupo_proc_pc,
							cd_especialidade_pc, cd_area_proced_pc) ie_valido
		from	pls_ajuste_porte_cbhpm
		where	cd_porte = cd_porte_pc
		and 	ie_tipo_ajuste = 'M'
		and	ie_situacao = 'A'
		and	dt_vigencia <= dt_referencia_pc
		
union all

		select	coalesce(tx_ajuste, 1) tx_ajuste,
			vl_porte_negociado,
			nr_seq_prestador,
			cd_procedimento,
			ie_origem_proced,
			cd_grupo_proc,
			cd_especialidade,
			cd_area_procedimento,
			dt_vigencia,
			nr_seq_grupo_prest,
			pls_entao_regra_preco_cta_pck.obter_se_ajuste_cbhpm_valido(	nr_seq_prestador, cd_procedimento,
							ie_origem_proced, cd_grupo_proc,
							cd_especialidade, cd_area_procedimento,
							nr_seq_prestador_pc, cd_procedimento_pc,
							ie_origem_proced_pc, cd_grupo_proc_pc,
							cd_especialidade_pc, cd_area_proced_pc) ie_valido
		from	pls_ajuste_porte_cbhpm
		where	cd_porte = cd_porte_pc
		and 	coalesce(ie_tipo_ajuste::text, '') = ''
		and	ie_situacao = 'A'
		and	dt_vigencia <= dt_referencia_pc) x
	order by dt_vigencia desc,
		coalesce(cd_procedimento,0) desc,
		coalesce(ie_origem_proced,0) desc,
		coalesce(cd_area_procedimento,0) desc,
		coalesce(cd_especialidade,0) desc,
		coalesce(cd_grupo_proc,0) desc,
		coalesce(nr_seq_prestador,0) desc;

C02 CURSOR(	cd_porte_pc		pls_ajuste_porte_cbhpm.cd_porte%type,
		dt_referencia_pc	timestamp,
		dt_vigencia_edicao_pc	timestamp,
		ie_igual_pc		text)FOR
	SELECT	vl_porte,
		dt_vigencia
	from	cbhpm_porte
	where	cd_porte = cd_porte_pc
	and	dt_vigencia <= dt_referencia_pc
	and	dt_vigencia <= dt_vigencia_edicao_pc
	and	ie_igual_pc = 'N'
	
union all

	SELECT	vl_porte,
		dt_vigencia
	from	cbhpm_porte
	where	cd_porte = cd_porte_pc
	and	dt_vigencia <= dt_referencia_pc
	and	dt_vigencia = dt_vigencia_edicao_pc
	and	ie_igual_pc = 'S'
	order by dt_vigencia desc;
BEGIN			
-- se possui porte informado
if (cd_porte_p IS NOT NULL AND cd_porte_p::text <> '') then

	for r_c01_w in C01(	cd_porte_p, dt_referencia_p, nr_seq_prestador_p,
				cd_procedimento_p, ie_origem_proced_p, cd_grupo_proc_p,
				cd_especialidade_p, cd_area_proced_p) loop

		-- retorna o primeiro registro que estiver válido
		if (r_c01_w.ie_valido = 'S') then
		
			-- sempre inicia considerando dentro do grupo, como o comportamento padrao anterior a alteraçao
			ie_grupo_prest_w := 'S';
			
			-- valida o grupo de prestador, caso informado
			if (r_c01_w.nr_seq_grupo_prest IS NOT NULL AND r_c01_w.nr_seq_grupo_prest::text <> '') then
			
				if (pls_obter_se_prestador_grupo(r_c01_w.nr_seq_grupo_prest, nr_seq_prestador_p) = 'N') then
				
					ie_grupo_prest_w := 'N';
				end if;
			end if;
			
			
			-- se passou nas validaçoes extras
			if (ie_grupo_prest_w = 'S') then

				vl_porte_w := r_c01_w.vl_porte_negociado;
				
				-- só altera a taxa caso a mesma seja diferente de 1 e zero
				if (r_c01_w.tx_ajuste != 1) and (r_c01_w.tx_ajuste != 0) then
					
					tx_porte_p := r_c01_w.tx_ajuste;
				end if;
				
				-- sai do for e fecha o cursor
				exit;
			end if;
		end if;
	end loop;

	if (coalesce(vl_porte_w::text, '') = '') then
		
		-- utiliza os mesmos parâmetros já definidos para o cursor C01
		for r_c02_w in C02(	cd_porte_p, dt_referencia_p,
					dt_edicao_p, ie_igual_p) loop

			-- o primeiro registro é o correto
			vl_porte_w := r_c02_w.vl_porte;
			
			-- sai do for e fecha o cursor
			exit;
		end loop;
	end if;
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_entao_regra_preco_cta_pck.obter_valor_porte_cbhpm ( cd_porte_p pls_ajuste_porte_cbhpm.cd_porte%type, dt_referencia_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_especialidade_p grupo_proc.cd_especialidade%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, dt_edicao_p timestamp, ie_igual_p text, tx_porte_p INOUT cbhpm_preco.tx_porte%type) FROM PUBLIC;
