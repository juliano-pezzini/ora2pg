-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_entao_regra_preco_cta_pck.obter_valores_entao_proc ( ie_destino_regra_p text, cd_edicao_amb_p pls_cp_cta_eproc.cd_edicao_amb%type, nr_seq_cbhpm_edicao_p pls_cp_cta_eproc.nr_seq_cbhpm_edicao%type, nr_seq_edicao_tuss_p pls_cp_cta_eproc.nr_seq_edicao_tuss%type, vl_ch_honorarios_p pls_cp_cta_eproc.vl_ch_honorarios%type, vl_ch_custo_oper_p pls_cp_cta_eproc.vl_ch_custo_oper%type, vl_filme_p pls_cp_cta_eproc.vl_filme%type, tx_ajuste_partic_p pls_cp_cta_eproc.tx_ajuste_partic%type, cd_moeda_ch_medico_p pls_cp_cta_eproc.cd_moeda_ch_medico%type, cd_moeda_ch_co_p pls_cp_cta_eproc.cd_moeda_ch_co%type, cd_moeda_filme_p pls_cp_cta_eproc.cd_moeda_filme%type, cd_moeda_anestesista_p pls_cp_cta_eproc.cd_moeda_anestesista%type, ie_ch_padrao_anest_p pls_cp_cta_eproc.ie_ch_padrao_anestesista%type, tx_ajuste_ch_honor_p pls_cp_cta_eproc.tx_ajuste_ch_honor%type, tx_ajuste_custo_oper_p pls_cp_cta_eproc.tx_ajuste_custo_oper%type, tx_ajuste_filme_p pls_cp_cta_eproc.tx_ajuste_filme%type, tx_ajuste_geral_p pls_cp_cta_eproc.tx_ajuste_geral%type, ie_preco_informado_p pls_cp_cta_eproc.ie_preco_informado%type, vl_proc_negociado_p pls_cp_cta_eproc.vl_proc_negociado%type, vl_medico_p pls_cp_cta_eproc.vl_medico%type, vl_auxiliares_p pls_cp_cta_eproc.vl_auxiliares%type, vl_anestesista_p pls_cp_cta_eproc.vl_anestesista%type, vl_custo_operacional_p pls_cp_cta_eproc.vl_custo_operacional%type, vl_materiais_p pls_cp_cta_eproc.vl_materiais%type, ie_autogerado_p pls_cp_cta_eproc.ie_autogerado%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, dt_proced_referencia_p pls_conta_proc.dt_procedimento_referencia%type, ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, cd_procedimento_p pls_conta_proc.cd_procedimento%type, nr_seq_prestador_exec_p pls_conta.nr_seq_prestador_exec%type, ie_tipo_guia_p pls_conta.ie_tipo_guia%type, cd_convenio_p pessoa_titular_convenio.cd_convenio%type, cd_categoria_p pessoa_titular_convenio.cd_categoria%type, cd_especialidade_p grupo_proc.cd_especialidade%type, nr_seq_congenere_seg_p pls_segurado.nr_seq_congenere%type, nr_seq_congenere_prot_p pls_protocolo_conta.nr_seq_congenere%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, ie_autogerado_proc_p pls_conta_proc.ie_autogerado%type, dt_mes_competencia_p pls_protocolo_conta.dt_mes_competencia%type, cd_prestador_exec_p pls_prestador.cd_prestador%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, vl_procedimento_p INOUT bigint, vl_custo_oper_out_p INOUT bigint, vl_medico_out_p INOUT bigint, vl_anestesista_out_p INOUT bigint, vl_auxiliares_out_p INOUT bigint, cd_porte_anest_p INOUT pls_conta_proc.cd_porte_anestesico%type, vl_filme_out_p INOUT bigint, nr_auxiliares_p INOUT pls_conta_proc.nr_auxiliares%type, nr_seq_regra_autoge_p INOUT pls_conta_proc.nr_seq_preco_autogerado%type, cd_moeda_autogerado_p INOUT pls_conta_proc.cd_moeda_autogerado%type, vl_proc_tabela_p INOUT bigint, vl_custo_oper_tab_p INOUT bigint, qt_filme_tab_p INOUT pls_conta_proc.qt_filme_tab%type, tx_honorario_p INOUT pls_cp_cta_eproc.vl_ch_honorarios%type, tx_custo_oper_p INOUT pls_cp_cta_eproc.vl_ch_custo_oper%type, tx_anestesista_p INOUT cotacao_moeda.vl_cotacao%type, tx_filme_p INOUT cotacao_moeda.vl_cotacao%type) AS $body$
DECLARE


tx_honorario_w		pls_cp_cta_eproc.vl_ch_honorarios%type;
tx_custo_oper_w		pls_cp_cta_eproc.vl_ch_custo_oper%type;
ie_calculo_tuss_w	edicao_amb.ie_calculo_tuss%type;
ie_origem_proc_w	pls_conta_proc.ie_origem_proced%type;
vl_cot_moeda_filme_w	cotacao_moeda.vl_cotacao%type;
vl_cot_anestesista_w	cotacao_moeda.vl_cotacao%type;
ds_log_w		pls_cp_cta_log_proc.ds_log%type;
nr_seq_regra_autoge_w	pls_preco_autogerado.nr_sequencia%type;
vl_autogerado_w		cotacao_moeda.vl_cotacao%type;
cd_moeda_autogerado_w	pls_preco_autogerado.cd_moeda%type;
nr_seq_lote_w		pls_lote_auto_gerado.nr_sequencia%type;
dt_lote_w		pls_lote_auto_gerado.dt_inicio%type;
qt_filme_w		preco_amb.qt_filme%type;


BEGIN
-- inicializa as variáveis
vl_autogerado_w := 0;
nr_seq_regra_autoge_w := null;

-- se for para considerar autogerado e o procedimento é autogerado então busca os valores.
if (ie_autogerado_p = 'S') and (ie_autogerado_proc_p = 'S') then

	SELECT * FROM pls_gerencia_autogerado_pck.pls_define_moeda_autogerado( 	dt_mes_competencia_p, dt_proced_referencia_p, nr_seq_prestador_exec_p, cd_estabelecimento_p, nr_seq_regra_autoge_w, vl_autogerado_w, cd_moeda_autogerado_w, cd_prestador_exec_p, nr_seq_lote_w, dt_lote_w, cd_procedimento_p, ie_origem_proced_p) INTO STRICT nr_seq_regra_autoge_w, vl_autogerado_w, cd_moeda_autogerado_w, nr_seq_lote_w, dt_lote_w;
end if;

-- só aplica a moeda autogerado se o valor dela for menor que o valor cadastrado na regra
if (vl_autogerado_w > 0) and (vl_autogerado_w <= coalesce(vl_ch_honorarios_p, 0)) and (vl_autogerado_w <= coalesce(vl_ch_custo_oper_p, 0)) then
	
	-- taxa de honorários e taxa de custo operacional assumem o vl_autogerado (cotação da moeda que está vinculada ao autogerado)
	tx_honorario_w := vl_autogerado_w;
	tx_custo_oper_w := vl_autogerado_w;
	vl_cot_anestesista_w := vl_autogerado_w;
	
	CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'Autogerado, valor da moeda = ' || vl_autogerado_w || ', lote = ' || nr_seq_lote_w ||
				', data do lote = ' || to_char(dt_lote_w, 'dd/mm/yyyy') || '.',
				nr_seq_conta_proc_p,
				null,
				null,
				null,
				null,
				null,
				null,
				ie_destino_regra_p,
				nm_usuario_p);
else

	-- obtem o valor da taxa a ser aplicada no honorario, caso tenha moeda informada busca a cotação da mesma
	tx_honorario_w := pls_entao_regra_preco_cta_pck.obter_valor_tx_cotacao(	vl_ch_honorarios_p, cd_moeda_ch_medico_p, dt_proced_referencia_p);

	-- obtem o valor da taxa a ser aplicada no custo operacional, caso tenha moeda informada busca a cotação da mesma
	tx_custo_oper_w := pls_entao_regra_preco_cta_pck.obter_valor_tx_cotacao(	vl_ch_custo_oper_p, cd_moeda_ch_co_p, dt_proced_referencia_p);
	
	-- obtem a cotação da moeda, diferente dos campos honorarios e CO o anestesista aplica tanto moeda quando taxa
	-- por isso é passado null no lugar da taxa, caso não tenha moeda a function retorna null depois é feito
	-- uma validação na hora de aplicar a moeda
	vl_cot_anestesista_w := pls_entao_regra_preco_cta_pck.obter_valor_tx_cotacao(	null, cd_moeda_anestesista_p, dt_proced_referencia_p);
	
	-- se não for autogerado salva a moeda do médico como moeda autogerado
	cd_moeda_autogerado_w := cd_moeda_ch_medico_p;
end if;

-- alimenta os parametros out do autogerado
nr_seq_regra_autoge_p := nr_seq_regra_autoge_w;
cd_moeda_autogerado_p := cd_moeda_autogerado_w;
	
-- obtem a cotação da moeda, diferente dos campos honorarios e CO o filme aplica tanto moeda quando taxa
-- por isso é passado null no lugar da taxa, caso não tenha moeda a function retorna null depois é feito
-- uma validação na hora de aplicar a moeda
vl_cot_moeda_filme_w := pls_entao_regra_preco_cta_pck.obter_valor_tx_cotacao(	null, cd_moeda_filme_p, dt_proced_referencia_p);

-- se o checkbox do preço informado estiver checado, assume os valores informados
if (ie_preco_informado_p = 'S') then

	-- alimenta as variáveis out com os valores informados
	vl_procedimento_p := vl_proc_negociado_p;
	vl_custo_oper_out_p := vl_custo_operacional_p;
	vl_medico_out_p := vl_medico_p;
	vl_anestesista_out_p := vl_anestesista_p;
	vl_auxiliares_out_p := vl_auxiliares_p;
	vl_filme_out_p := vl_materiais_p;	
	
	CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'Valorização pelos valores informados na regra.',
				nr_seq_conta_proc_p,
				vl_anestesista_out_p,
				vl_auxiliares_out_p,
				vl_custo_oper_out_p,
				vl_filme_out_p,
				vl_medico_out_p,
				vl_procedimento_p,
				ie_destino_regra_p,
				nm_usuario_p);

-- senão processa a regra para encontrar os valores
else
	-- verifica o ie_origem_proc atravéz da edição informada na regra, também retorna o ie_calculo_tuss
	-- isto porque na edição AMB pode ser cadastrado qualquer origem de material, ou seja, pode ser vinculado
	-- uma origem de material a uma edição AMB
	ie_calculo_tuss_w := pls_entao_regra_preco_cta_pck.obter_origem_edicao(	cd_edicao_amb_p, ie_origem_proced_p);
	
	-- aqui processa tudo que for AMB ou próprio
	if (ie_origem_proc_w in (1, 4)) then

		if (ie_origem_proc_w = 1) then
			ds_log_w := 'A edição de número ' || cd_edicao_amb_p || ' possui a origem de preço AMB.';
		else
			ds_log_w := 'A edição de número ' || cd_edicao_amb_p || ' possui a origem de preço Própria.';
		end if;
		
		CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	ds_log_w,
					nr_seq_conta_proc_p,
					null,
					null,
					null,
					null,
					null,
					null,
					ie_destino_regra_p,
					nm_usuario_p);
	
		-- busca os valores de acordo com a origem e aplica as devidas taxas
		SELECT * FROM pls_entao_regra_preco_cta_pck.obter_valores_amb(	ie_destino_regra_p, cd_edicao_amb_p, tx_honorario_w, tx_custo_oper_w, vl_filme_p, tx_ajuste_ch_honor_p, tx_ajuste_custo_oper_p, tx_ajuste_filme_p, dt_proced_referencia_p, cd_procedimento_p, vl_cot_moeda_filme_w, ie_ch_padrao_anest_p, vl_cot_anestesista_w, tx_ajuste_partic_p, nr_seq_conta_proc_p, nm_usuario_p, vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_anestesista_out_p, vl_auxiliares_out_p, vl_filme_out_p, cd_porte_anest_p, nr_auxiliares_p, qt_filme_w) INTO STRICT vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_anestesista_out_p, vl_auxiliares_out_p, vl_filme_out_p, cd_porte_anest_p, nr_auxiliares_p, qt_filme_w;
	-- CBHPM
	elsif (ie_origem_proc_w = 5) then

		CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'A edição de número ' || cd_edicao_amb_p || ' possui a origem de preço CBHPM.',
					nr_seq_conta_proc_p,
					null,
					null,
					null,
					null,
					null,
					null,
					ie_destino_regra_p,
					nm_usuario_p);

		-- busca os valores de acordo com a origem e aplica as devidas taxas
		SELECT * FROM pls_entao_regra_preco_cta_pck.obter_valores_cbhpm(	ie_destino_regra_p, nr_seq_cbhpm_edicao_p, tx_honorario_w, tx_custo_oper_w, vl_filme_p, tx_ajuste_ch_honor_p, tx_ajuste_custo_oper_p, tx_ajuste_filme_p, tx_ajuste_partic_p, dt_proced_referencia_p, cd_procedimento_p, ie_origem_proc_w, vl_cot_moeda_filme_w, cd_especialidade_p, cd_grupo_proc_p, cd_area_proced_p, nr_seq_conta_proc_p, nr_seq_prestador_exec_p, cd_estabelecimento_p, nm_usuario_p, ie_ch_padrao_anest_p, vl_cot_anestesista_w, vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_filme_out_p, nr_auxiliares_p, vl_auxiliares_out_p, cd_porte_anest_p, vl_anestesista_out_p) INTO STRICT vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_filme_out_p, nr_auxiliares_p, vl_auxiliares_out_p, cd_porte_anest_p, vl_anestesista_out_p;
	-- TUSS
	elsif (ie_origem_proc_w = 8) then

		if (ie_calculo_tuss_w = 'A') then

			ds_log_w := 'cálculo AMB.';
			
		elsif (ie_calculo_tuss_w = 'C') then

			ds_log_w := 'cálculo CBHPM.';
		else
			ds_log_w := 'não possui cálculo.';
		end if;

		CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'A edição de número ' || cd_edicao_amb_p || ' possui a origem de preço TUSS e ' || ds_log_w,
					nr_seq_conta_proc_p,
					null,
					null,
					null,
					null,
					null,
					null,
					ie_destino_regra_p,
					nm_usuario_p);

		-- busca os valores de acordo com a origem e aplica as devidas taxas
		SELECT * FROM pls_entao_regra_preco_cta_pck.obter_valores_tuss(	ie_destino_regra_p, ie_calculo_tuss_w, dt_proced_referencia_p, cd_procedimento_p, nr_seq_edicao_tuss_p, cd_edicao_amb_p, vl_filme_p, tx_custo_oper_w, tx_honorario_w, vl_cot_moeda_filme_w, tx_ajuste_custo_oper_p, tx_ajuste_ch_honor_p, tx_ajuste_filme_p, ie_ch_padrao_anest_p, vl_cot_anestesista_w, tx_ajuste_partic_p, nr_seq_conta_proc_p, nm_usuario_p, vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_filme_out_p, nr_auxiliares_p, vl_auxiliares_out_p, cd_porte_anest_p, vl_anestesista_out_p) INTO STRICT vl_procedimento_p, vl_custo_oper_out_p, vl_medico_out_p, vl_filme_out_p, nr_auxiliares_p, vl_auxiliares_out_p, cd_porte_anest_p, vl_anestesista_out_p;

	else
		CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'Não foi encontrado uma origem de preço para a edição de número ' || cd_edicao_amb_p || '.',
					nr_seq_conta_proc_p,
					null,
					null,
					null,
					null,
					null,
					null,
					ie_destino_regra_p,
					nm_usuario_p);
	end if;
end if;

-- armazena estes valores neste momento pois são campos utilizados pelos clientes em relatórios
vl_proc_tabela_p := coalesce(vl_medico_out_p, 0);
vl_custo_oper_tab_p := coalesce(vl_custo_oper_out_p, 0);
qt_filme_tab_p := coalesce(qt_filme_w, 0);

-- alimenta os campos out com os valores das moedas obtidos, para os campos honorario, CO e anestesista caso não tenha moeda 
-- informada na regra então irá retornar a taxa que estiver informada na regra, como são apenas campos informativos não tem problema
tx_honorario_p := tx_honorario_w;
tx_custo_oper_p := tx_custo_oper_w;
tx_anestesista_p := vl_cot_anestesista_w;
tx_filme_p := vl_cot_moeda_filme_w;

-- se tem tx ajuste informada aplica, está taxa é aplicada independente do calculo que foi aplicado até aqui
if (tx_ajuste_geral_p > 0) then

	vl_procedimento_p := vl_procedimento_p * tx_ajuste_geral_p;
	vl_custo_oper_out_p := vl_custo_oper_out_p * tx_ajuste_geral_p;
	vl_anestesista_out_p := vl_anestesista_out_p * tx_ajuste_geral_p;
	vl_medico_out_p := vl_medico_out_p * tx_ajuste_geral_p;
	vl_filme_out_p := vl_filme_out_p * tx_ajuste_geral_p;
	vl_auxiliares_out_p := vl_auxiliares_out_p * tx_ajuste_geral_p;	
	
	CALL pls_entao_regra_preco_cta_pck.gerencia_log_proc(	'Valores após a aplicação da taxa de ajuste geral.',
				nr_seq_conta_proc_p,
				vl_anestesista_out_p,
				vl_auxiliares_out_p,
				vl_custo_oper_out_p,
				vl_filme_out_p,
				vl_medico_out_p,
				vl_procedimento_p,
				ie_destino_regra_p,
				nm_usuario_p);
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_entao_regra_preco_cta_pck.obter_valores_entao_proc ( ie_destino_regra_p text, cd_edicao_amb_p pls_cp_cta_eproc.cd_edicao_amb%type, nr_seq_cbhpm_edicao_p pls_cp_cta_eproc.nr_seq_cbhpm_edicao%type, nr_seq_edicao_tuss_p pls_cp_cta_eproc.nr_seq_edicao_tuss%type, vl_ch_honorarios_p pls_cp_cta_eproc.vl_ch_honorarios%type, vl_ch_custo_oper_p pls_cp_cta_eproc.vl_ch_custo_oper%type, vl_filme_p pls_cp_cta_eproc.vl_filme%type, tx_ajuste_partic_p pls_cp_cta_eproc.tx_ajuste_partic%type, cd_moeda_ch_medico_p pls_cp_cta_eproc.cd_moeda_ch_medico%type, cd_moeda_ch_co_p pls_cp_cta_eproc.cd_moeda_ch_co%type, cd_moeda_filme_p pls_cp_cta_eproc.cd_moeda_filme%type, cd_moeda_anestesista_p pls_cp_cta_eproc.cd_moeda_anestesista%type, ie_ch_padrao_anest_p pls_cp_cta_eproc.ie_ch_padrao_anestesista%type, tx_ajuste_ch_honor_p pls_cp_cta_eproc.tx_ajuste_ch_honor%type, tx_ajuste_custo_oper_p pls_cp_cta_eproc.tx_ajuste_custo_oper%type, tx_ajuste_filme_p pls_cp_cta_eproc.tx_ajuste_filme%type, tx_ajuste_geral_p pls_cp_cta_eproc.tx_ajuste_geral%type, ie_preco_informado_p pls_cp_cta_eproc.ie_preco_informado%type, vl_proc_negociado_p pls_cp_cta_eproc.vl_proc_negociado%type, vl_medico_p pls_cp_cta_eproc.vl_medico%type, vl_auxiliares_p pls_cp_cta_eproc.vl_auxiliares%type, vl_anestesista_p pls_cp_cta_eproc.vl_anestesista%type, vl_custo_operacional_p pls_cp_cta_eproc.vl_custo_operacional%type, vl_materiais_p pls_cp_cta_eproc.vl_materiais%type, ie_autogerado_p pls_cp_cta_eproc.ie_autogerado%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, dt_proced_referencia_p pls_conta_proc.dt_procedimento_referencia%type, ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, cd_procedimento_p pls_conta_proc.cd_procedimento%type, nr_seq_prestador_exec_p pls_conta.nr_seq_prestador_exec%type, ie_tipo_guia_p pls_conta.ie_tipo_guia%type, cd_convenio_p pessoa_titular_convenio.cd_convenio%type, cd_categoria_p pessoa_titular_convenio.cd_categoria%type, cd_especialidade_p grupo_proc.cd_especialidade%type, nr_seq_congenere_seg_p pls_segurado.nr_seq_congenere%type, nr_seq_congenere_prot_p pls_protocolo_conta.nr_seq_congenere%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, ie_autogerado_proc_p pls_conta_proc.ie_autogerado%type, dt_mes_competencia_p pls_protocolo_conta.dt_mes_competencia%type, cd_prestador_exec_p pls_prestador.cd_prestador%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, vl_procedimento_p INOUT bigint, vl_custo_oper_out_p INOUT bigint, vl_medico_out_p INOUT bigint, vl_anestesista_out_p INOUT bigint, vl_auxiliares_out_p INOUT bigint, cd_porte_anest_p INOUT pls_conta_proc.cd_porte_anestesico%type, vl_filme_out_p INOUT bigint, nr_auxiliares_p INOUT pls_conta_proc.nr_auxiliares%type, nr_seq_regra_autoge_p INOUT pls_conta_proc.nr_seq_preco_autogerado%type, cd_moeda_autogerado_p INOUT pls_conta_proc.cd_moeda_autogerado%type, vl_proc_tabela_p INOUT bigint, vl_custo_oper_tab_p INOUT bigint, qt_filme_tab_p INOUT pls_conta_proc.qt_filme_tab%type, tx_honorario_p INOUT pls_cp_cta_eproc.vl_ch_honorarios%type, tx_custo_oper_p INOUT pls_cp_cta_eproc.vl_ch_custo_oper%type, tx_anestesista_p INOUT cotacao_moeda.vl_cotacao%type, tx_filme_p INOUT cotacao_moeda.vl_cotacao%type) FROM PUBLIC;
