-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_entao_regra_preco_cta_pck.obter_preco_mat_fed_sc ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_material_p pls_material.nr_sequencia%type, dt_vigencia_p timestamp, tx_ajuste_tab_p pls_cp_cta_emat.tx_ajuste_tab_propria%type, nr_seq_fornecedor_p pls_prestador.nr_sequencia%type, ds_versao_tiss_p pls_mat_unimed_fed_sc.ds_versao_tiss%type) RETURNS bigint AS $body$
DECLARE


vl_material_w		pls_mat_uni_fed_sc_preco.vl_preco%type;
cd_prestador_w		pls_fornec_mat_fed_sc.cd_fornecedor%type;
nr_seq_mat_unimed_w 	pls_mat_unimed_fed_sc.nr_sequencia%type;
tb_vl_preco_w		pls_util_cta_pck.t_number_table;
nr_ultimo_indice_w	integer;

C01 CURSOR(	nr_seq_mat_unimed_pc 	pls_mat_unimed_fed_sc.nr_sequencia%type,
		dt_vigencia_pc		pls_mat_uni_fed_sc_preco.dt_preco%type,
		cd_prestador_pc		pls_fornec_mat_fed_sc.cd_fornecedor%type)FOR
	SELECT 	x.vl_preco
	from (	SELECT	a.vl_preco,
			a.dt_preco
		from	pls_mat_uni_fed_sc_preco a
		where	a.nr_seq_mat_unimed = nr_seq_mat_unimed_pc
		and	a.dt_preco <= dt_vigencia_pc
		and	coalesce(a.cd_fornecedor_fed_sc, 1) = 1
		and	a.ie_situacao = 'A'
		
union all

		select	a.vl_preco,
			a.dt_preco
		from	pls_mat_uni_fed_sc_preco a
		where	a.nr_seq_mat_unimed = nr_seq_mat_unimed_pc
		and	a.dt_preco <= dt_vigencia_pc
		and	a.cd_fornecedor_fed_sc = cd_prestador_pc
		and	a.ie_situacao = 'A'
		
union all

		select	a.vl_preco,
			a.dt_preco
		from	pls_mat_uni_fed_sc_preco a
		where	a.nr_seq_mat_unimed = nr_seq_mat_unimed_pc
		and	a.dt_preco <= dt_vigencia_pc
		and	coalesce(cd_prestador_pc::text, '') = ''
		and	a.ie_situacao = 'A') x
	order by x.dt_preco;
	

BEGIN

-- busca o fornecedor do material
select 	max(b.cd_fornecedor)
into STRICT	cd_prestador_w
from	pls_prestador a,
	pls_fornec_mat_fed_sc b	
where	a.nr_sequencia = nr_seq_fornecedor_p
and	b.cd_cgc = a.cd_cgc;

-- tenta pegar a sequencia do material unimed com a versao tiss
select	max(a.nr_sequencia)
into STRICT	nr_seq_mat_unimed_w
from	pls_material b,
	pls_mat_unimed_fed_sc a
where	b.nr_sequencia = nr_seq_material_p
and	b.cd_estabelecimento = cd_estabelecimento_p
and	a.cd_material = b.cd_material_ops
and	a.ds_versao_tiss = ds_versao_tiss_p
and	a.cd_estabelecimento = cd_estabelecimento_p;

-- se não encontrou tenta com versao sendo nula
if (coalesce(nr_seq_mat_unimed_w::text, '') = '') then

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_mat_unimed_w
	from	pls_material b,
		pls_mat_unimed_fed_sc a
	where	b.nr_sequencia = nr_seq_material_p
	and	b.cd_estabelecimento = cd_estabelecimento_p
	and	a.cd_material = b.cd_material_ops
	and	coalesce(a.ds_versao_tiss::text, '') = ''
	and	a.cd_estabelecimento = cd_estabelecimento_p;
end if;

-- o ultimo registro é o válido
open C01(	nr_seq_mat_unimed_w, dt_vigencia_p, cd_prestador_w);
loop
	fetch C01 bulk collect into 	tb_vl_preco_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_vl_preco_w.count = 0;
	
	-- retorna sempre o último registro do select
	-- ele é o registro mais específico
	nr_ultimo_indice_w := (tb_vl_preco_w.count);
	
	vl_material_w := tb_vl_preco_w(nr_ultimo_indice_w);
end loop;
close C01;

-- caso seja informado a taxa de ajuste multiplica, ela é obrigatória então caso seja nulo
-- multiplico por zero para não retornar zero
vl_material_w := coalesce(vl_material_w, 0) * coalesce(tx_ajuste_tab_p, 0);

return vl_material_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_entao_regra_preco_cta_pck.obter_preco_mat_fed_sc ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_material_p pls_material.nr_sequencia%type, dt_vigencia_p timestamp, tx_ajuste_tab_p pls_cp_cta_emat.tx_ajuste_tab_propria%type, nr_seq_fornecedor_p pls_prestador.nr_sequencia%type, ds_versao_tiss_p pls_mat_unimed_fed_sc.ds_versao_tiss%type) FROM PUBLIC;
