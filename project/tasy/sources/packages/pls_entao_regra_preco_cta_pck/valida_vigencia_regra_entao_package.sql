-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_entao_regra_preco_cta_pck.valida_vigencia_regra_entao ( nr_seq_regra_comb_p pls_cp_cta_combinada.nr_sequencia%type, nr_seq_regra_entao_p pls_cp_cta_eproc.nr_sequencia%type, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp) RETURNS varchar AS $body$
DECLARE


ds_mesma_vigencia_w	varchar(4000);
ds_regras_w		varchar(3500);
ie_tipo_regra_w		pls_cp_cta_combinada.ie_tipo_regra%type;
dt_inicio_vigencia_w	timestamp;
dt_fim_vigencia_w	timestamp;

-- regra de procedimento
C01 CURSOR(	nr_seq_regra_comb_pc	pls_cp_cta_combinada.nr_sequencia%type,
		ie_tipo_regra_pc	text) FOR
	SELECT	nr_sequencia,
		dt_inicio_vigencia_ref,
		dt_fim_vigencia_ref
	from	pls_cp_cta_eproc
	where	nr_seq_cp_combinada = nr_seq_regra_comb_pc
	and 	ie_tipo_regra_pc = 'P'
	
union all

	SELECT	nr_sequencia,
		dt_inicio_vigencia_ref,
		dt_fim_vigencia_ref
	from	pls_cp_cta_emat
	where	nr_seq_cp_combinada = nr_seq_regra_comb_pc
	and	ie_tipo_regra_pc = 'M'
	
union all

	select	nr_sequencia,
		dt_inicio_vigencia_ref,
		dt_fim_vigencia_ref
	from	pls_cp_cta_eserv
	where	nr_seq_cp_combinada = nr_seq_regra_comb_pc
	and 	ie_tipo_regra_pc = 'S'
	
union all

	select	nr_sequencia,
		dt_inicio_vigencia_ref,
		dt_fim_vigencia_ref
	from	pls_cp_cta_epartic
	where	nr_seq_cp_combinada = nr_seq_regra_comb_pc
	and 	ie_tipo_regra_pc = 'PP'
	order by nr_sequencia;

BEGIN

ds_mesma_vigencia_w := null;
ds_regras_w := null;
dt_inicio_vigencia_w := trunc(dt_inicio_vigencia_p);
dt_fim_vigencia_w := trunc(dt_fim_vigencia_p);


-- pega o tipo de regra para saber qual o cursor que será chamado
select	max(ie_tipo_regra)
into STRICT	ie_tipo_regra_w
from	pls_cp_cta_combinada
where	nr_sequencia = nr_seq_regra_comb_p;

-- Dependendo do tipo de regra verifica em uma tabela diferente PLS_REGRA_PRECO_PROC, PLS_REGRA_PRECO_MAT
-- ou PLS_REGRA_PRECO_SERVICO. Verifica se as datas passadas de parâmetros estão dentro de algum período
-- de vigência já cadastrado, se tiver retorna a nr_sequencia ai pegamos e colocamos todas as nr_sequencias
-- em uma variável
for r_c01_w in C01(nr_seq_regra_comb_p, ie_tipo_regra_w) loop
	
	if (r_c01_w.nr_sequencia != nr_seq_regra_entao_p) then
		
		-- se a data de inicio estiver entre um período já cadastrado então não é válida
		if (dt_inicio_vigencia_w between r_c01_w.dt_inicio_vigencia_ref and r_c01_w.dt_fim_vigencia_ref)  then
			
			if (coalesce(ds_regras_w::text, '') = '') then
		
				ds_regras_w := r_c01_w.nr_sequencia;
			else
			
				ds_regras_w := substr(ds_regras_w || ', ' || r_c01_w.nr_sequencia, 1, 3500);
			end if;		
		-- se a data fim estiver entre um período já cadastrado então não é válida
		elsif (dt_fim_vigencia_w between r_c01_w.dt_inicio_vigencia_ref and r_c01_w.dt_fim_vigencia_ref) then
		
			if (coalesce(ds_regras_w::text, '') = '') then
		
				ds_regras_w := r_c01_w.nr_sequencia;
			else
			
				ds_regras_w := substr(ds_regras_w || ', ' || r_c01_w.nr_sequencia, 1, 3500);
			end if;
		-- se a data de inicio for menor que a data de inicio cadastrada e não tiver uma data de fim, não é válida
		elsif (dt_inicio_vigencia_w <= r_c01_w.dt_inicio_vigencia_ref) and (coalesce(dt_fim_vigencia_w::text, '') = '') then
			
			if (coalesce(ds_regras_w::text, '') = '') then
		
				ds_regras_w := r_c01_w.nr_sequencia;
			else
			
				ds_regras_w := substr(ds_regras_w || ', ' || r_c01_w.nr_sequencia, 1, 3500);
			end if;
		-- se a data inicio for menor que a data ini cadastrada e a data fim for maior que a já cadastrada não é válida
		elsif (dt_inicio_vigencia_w <= r_c01_w.dt_inicio_vigencia_ref) and (dt_fim_vigencia_w >= r_c01_w.dt_fim_vigencia_ref) then
			
			if (coalesce(ds_regras_w::text, '') = '') then
		
				ds_regras_w := r_c01_w.nr_sequencia;
			else
			
				ds_regras_w := substr(ds_regras_w || ', ' || r_c01_w.nr_sequencia, 1, 3500);
			end if;
		end if;
	end if;
end loop;

-- se retornou algo no cursor alimenta o campo retorno
if (ds_regras_w IS NOT NULL AND ds_regras_w::text <> '') then

	ds_mesma_vigencia_w := wheb_mensagem_pck.get_texto(350807);
	ds_mesma_vigencia_w := substr(ds_mesma_vigencia_w || ' ' || ds_regras_w, 1, 4000);
end if;

return ds_mesma_vigencia_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_entao_regra_preco_cta_pck.valida_vigencia_regra_entao ( nr_seq_regra_comb_p pls_cp_cta_combinada.nr_sequencia%type, nr_seq_regra_entao_p pls_cp_cta_eproc.nr_sequencia%type, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp) FROM PUBLIC;
