-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_entao_regra_preco_cta_pck.obter_preco_cbhpm ( cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, dt_referencia_p timestamp, dt_vigencia_edicao_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_especialidade_p grupo_proc.cd_especialidade%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, vl_medico_p INOUT bigint, qt_uco_p INOUT cbhpm_preco.qt_uco%type, nr_porte_anest_p INOUT cbhpm_preco.nr_porte_anest%type, nr_auxiliar_p INOUT cbhpm_preco.nr_auxiliar%type, qt_filme_p INOUT cbhpm_preco.qt_filme%type, vl_porte_anestesista_p INOUT bigint) AS $body$
DECLARE


ie_igual_w		varchar(1);
dt_edicao_w		timestamp;
tx_porte_w		cbhpm_preco.tx_porte%type;
tx_porte_anest_w	cbhpm_preco.tx_porte%type;
vl_porte_w		cbhpm_porte.vl_porte%type;
nr_porte_anest_w	cbhpm_preco.nr_porte_anest%type;
cd_porte_w		pls_ajuste_porte_cbhpm.cd_porte%type;
qt_uco_w		cbhpm_preco.qt_uco%type;
nr_auxiliar_w		cbhpm_preco.nr_auxiliar%type;
qt_filme_w		cbhpm_preco.qt_filme%type;
vl_porte_anestesista_w	pls_ajuste_porte_cbhpm.vl_porte_negociado%type;
cd_porte_anestesista_w	pls_ajuste_porte_cbhpm.cd_porte%type;
vl_medico_w 		pls_conta_proc.vl_medico%type;


BEGIN
-- inicia as taxas com 1
tx_porte_w := 1;
tx_porte_anest_w := 1;

-- busca o preço CBHPM utilizando somente a data do procedimento
if (current_setting('pls_entao_regra_preco_cta_pck.ie_preco_cbhpm_data_w')::parametro_faturamento.ie_preco_cbhpm_data%type in ('A', 'O')) then

	-- passa a data do procedimento como edicao para não interferir no resultado
	dt_edicao_w := dt_referencia_p;
	-- pega menor ou igual a data informa
	ie_igual_w := 'N';

-- busca preço, caso seja R deveria buscar de uma regra porém esta regra só existe para o prestador
-- sendo que para operadora sempre retorna N
elsif (current_setting('pls_entao_regra_preco_cta_pck.ie_data_vig_cbhpm_w')::parametro_faturamento.ie_data_vig_cbhpm%type in ('N', 'R')) then

	-- faz um nvl entre data da edição e a data do procedimento
	dt_edicao_w := coalesce(dt_vigencia_edicao_p, dt_referencia_p);
	-- pega menor ou igual a data informada
	ie_igual_w := 'N';

-- aqui entra quando precisa levar em consideração a data da edição AMB
else
	-- passa a data da edição AMB
	dt_edicao_w := dt_vigencia_edicao_p;
	-- precisa ser igual a data da edição
	ie_igual_w := 'S';
end if;

-- obtém o código do porte, além disto retorna outros valores que serão utilizados
SELECT * FROM pls_entao_regra_preco_cta_pck.obter_cd_porte_cbhpm(	cd_procedimento_p, ie_origem_proced_p, dt_referencia_p, dt_edicao_w, ie_igual_w, tx_porte_w, cd_porte_w, qt_uco_w, nr_auxiliar_w, qt_filme_w, nr_porte_anest_w) INTO STRICT tx_porte_w, cd_porte_w, qt_uco_w, nr_auxiliar_w, qt_filme_w, nr_porte_anest_w;

-- obtém o valor do porte cbhpm, retorna também a taxa
tx_porte_w := pls_entao_regra_preco_cta_pck.obter_valor_porte_cbhpm(	cd_porte_w, dt_referencia_p, nr_seq_prestador_p, cd_procedimento_p, ie_origem_proced_p, cd_grupo_proc_p, cd_especialidade_p, cd_area_proced_p, dt_edicao_w, ie_igual_w, tx_porte_w);

-- Define valor do médico, de acordo com o parametro faz o arredondamento ou não
if (current_setting('pls_entao_regra_preco_cta_pck.ie_despreza_casa_cbhpm_w')::parametro_faturamento.ie_despreza_casa_cbhpm%type = 'S') then	

	vl_medico_w := round((vl_porte_w * tx_porte_w)::numeric, 2);
else

	vl_medico_w := vl_porte_w * tx_porte_w;
end if;

-- obtém o código do porte anestesista
nr_porte_anest_w := pls_entao_regra_preco_cta_pck.obter_cd_porte_anest_cbhpm(	nr_porte_anest_w);

-- vai atrás do valor do porte anestesista
if (cd_porte_anestesista_w IS NOT NULL AND cd_porte_anestesista_w::text <> '') then

	-- obtém o valor do porte anestesista
	tx_porte_anest_w := pls_entao_regra_preco_cta_pck.obter_valor_porte_cbhpm(	cd_porte_anestesista_w, dt_referencia_p, nr_seq_prestador_p, cd_procedimento_p, ie_origem_proced_p, cd_grupo_proc_p, cd_especialidade_p, cd_area_proced_p, dt_edicao_w, ie_igual_w, tx_porte_anest_w);

	-- Define valor do Anestesista, de acordo com o parametro faz o arredondamento ou não
	if (current_setting('pls_entao_regra_preco_cta_pck.ie_despreza_casa_cbhpm_w')::parametro_faturamento.ie_despreza_casa_cbhpm%type = 'S') then	

		vl_porte_anestesista_w := round((vl_porte_w * tx_porte_anest_w)::numeric, 2);
	else
		
		vl_porte_anestesista_w := vl_porte_w * tx_porte_anest_w;
	end if;
end if;

-- alimenta os parametros out
vl_medico_p := vl_medico_w;
qt_uco_p := qt_uco_w;
nr_porte_anest_p := nr_porte_anest_w;
nr_auxiliar_p := nr_auxiliar_w;
qt_filme_p := qt_filme_w;
vl_porte_anestesista_p := vl_porte_anestesista_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_entao_regra_preco_cta_pck.obter_preco_cbhpm ( cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, dt_referencia_p timestamp, dt_vigencia_edicao_p timestamp, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_grupo_proc_p procedimento.cd_grupo_proc%type, cd_especialidade_p grupo_proc.cd_especialidade%type, cd_area_proced_p especialidade_proc.cd_area_procedimento%type, vl_medico_p INOUT bigint, qt_uco_p INOUT cbhpm_preco.qt_uco%type, nr_porte_anest_p INOUT cbhpm_preco.nr_porte_anest%type, nr_auxiliar_p INOUT cbhpm_preco.nr_auxiliar%type, qt_filme_p INOUT cbhpm_preco.qt_filme%type, vl_porte_anestesista_p INOUT bigint) FROM PUBLIC;
