-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_entao_regra_preco_cta_pck.processa_regra_material ( ie_destino_regra_p text, nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, cd_acao_analise_p pls_acao_analise.cd_acao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_contador_w		integer;
vl_material_simpro_w	pls_cp_cta_emat.vl_negociado%type;
vl_material_tabela_w	pls_cp_cta_emat.vl_negociado%type;
vl_material_bras_w	pls_cp_cta_emat.vl_negociado%type;

tb_nr_seq_conta_mat_w		pls_util_cta_pck.t_number_table;
tb_vl_material_w		pls_util_cta_pck.t_number_table;
tb_vl_material_base_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_regra_entao_w		pls_util_cta_pck.t_number_table;
					
C01 CURSOR FOR
	SELECT	entao.ie_origem_preco,
		entao.nr_seq_material_preco,
		entao.ie_tabela_adicional,
		entao.tx_ajuste,
		entao.dt_base_fixo,
		coalesce(entao.ie_tipo_ajuste_pfb, 'U') ie_tipo_ajuste_pfb,
		coalesce(entao.ie_tipo_preco_brasindice, 'CR') ie_tipo_preco_brasindice,
		entao.ie_tipo_preco_simpro,
		entao.ie_tipo_preco_tab_adic,
		coalesce(entao.tx_ajuste_pfb, 1) tx_ajuste_pfb,
		entao.tx_ajuste_pmc_neg,
		entao.tx_ajuste_pmc_neut,
		entao.tx_ajuste_pmc_pos,
		coalesce(entao.tx_ajuste_simpro_pfb, 1) tx_ajuste_simpro_pfb,
		entao.tx_ajuste_simpro_pmc,
		entao.tx_ajuste_tab_propria,
		coalesce(entao.vl_negociado,0) vl_negociado,
		coalesce(entao.vl_pfb_nao_aplicavel_simpro, 1) vl_pfb_nao_aplicavel_simpro,
		coalesce(entao.vl_pfb_negativa_brasindice, 1) vl_pfb_negativa_brasindice,
		coalesce(entao.vl_pfb_negativa_simpro, 1) vl_pfb_negativa_simpro,
		coalesce(entao.vl_pfb_neutra_brasindice, 1) vl_pfb_neutra_brasindice,
		coalesce(entao.vl_pfb_neutra_simpro, 1) vl_pfb_neutra_simpro,
		coalesce(entao.vl_pfb_positiva_brasindice, 1) vl_pfb_positiva_brasindice,
		coalesce(entao.vl_pfb_positiva_simpro, 1) vl_pfb_positiva_simpro,
		temp.nr_seq_conta_mat,
		temp.nr_seq_prestador_exec,
		temp.nr_seq_material,
		temp.dt_atendimento,
		temp.nr_seq_prest_fornec,
		temp.cd_versao_tiss,
		temp.vl_material_imp,
		temp.nr_seq_guia,
		temp.qt_material_imp,
		temp.ie_status_conta,
		temp.ie_status_mat,
		temp.ie_cobranca_prevista,
		temp.ie_cobranca_prevista_inf,
		temp.nr_seq_regra_entao,
		temp.nr_seq_segurado
	from	pls_cp_cta_mat_tmp temp,
		pls_cp_cta_emat entao
	where	entao.nr_sequencia = temp.nr_seq_regra_entao;
	
BEGIN

-- alimenta a tabela temporária com os dados necessários para identificar a regra então e fazer a valorização do item
CALL pls_entao_regra_preco_cta_pck.alimenta_tab_temp_material(	ie_destino_regra_p, nr_seq_lote_conta_p,
				nr_seq_protocolo_p, nr_seq_lote_processo_p,
				nr_seq_conta_p, nr_seq_conta_proc_p,
				nr_seq_conta_mat_p, nr_seq_analise_p,
				cd_acao_analise_p, cd_estabelecimento_p,
				nm_usuario_p);

-- pega todos os registros que foram inseridos na tabela temporária e 'encontra' o então respectivo
-- após salva o mesmo na tabela temporária
CALL pls_entao_regra_preco_cta_pck.define_regra_entao_mat();

-- faz a limpeza das tabelas de log, deletando todos os logs que existam com as sequencias dos 
-- materiais que foram incluidos na tabela temporária
nr_contador_w := 0;
for r_C01_w in C01 loop

	tb_nr_seq_conta_mat_w(nr_contador_w) := r_c01_w.nr_seq_conta_mat;
	
	-- se atingiu a quantidade faz o delete
	if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then
	
		SELECT * FROM pls_entao_regra_preco_cta_pck.delete_tabela_log_mat(tb_nr_seq_conta_mat_w, nr_contador_w) INTO STRICT _ora2pg_r;
 tb_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; nr_contador_w := _ora2pg_r.nr_contador_p;
	else
		nr_contador_w := nr_contador_w + 1;
	end if;
end loop;

-- se sobrou algo manda pro banco e limpa as variáveis
SELECT * FROM pls_entao_regra_preco_cta_pck.delete_tabela_log_mat(tb_nr_seq_conta_mat_w, nr_contador_w) INTO STRICT _ora2pg_r;
 tb_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; nr_contador_w := _ora2pg_r.nr_contador_p;

-- inicia as variáveis
SELECT * FROM pls_entao_regra_preco_cta_pck.atualiza_materiais(	ie_destino_regra_p, tb_vl_material_w, tb_vl_material_base_w, tb_nr_seq_conta_mat_w, tb_nr_seq_regra_entao_w) INTO STRICT _ora2pg_r;
 tb_vl_material_w := _ora2pg_r.tb_vl_calculado_p; tb_vl_material_base_w := _ora2pg_r.tb_vl_calculado_base_p; tb_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_nr_seq_regra_entao_w := _ora2pg_r.tb_nr_seq_regra_entao_p;
			
-- percorre todos os itens com os itens das regras então
for r_C01_w in C01 loop
	
	tb_nr_seq_conta_mat_w(nr_contador_w) := r_C01_w.nr_seq_conta_mat;
	tb_nr_seq_regra_entao_w(nr_contador_w) := r_C01_w.nr_seq_regra_entao;

	CALL pls_entao_regra_preco_cta_pck.gerencia_log_mat(	'Início da valorização, vinculado ao então de sequencia ' || r_C01_w.nr_seq_regra_entao || '.',
				r_C01_w.nr_seq_conta_mat,
				null,
				ie_destino_regra_p,
				nm_usuario_p);
	
	SELECT * FROM pls_entao_regra_preco_cta_pck.obter_valores_entao_mat(	ie_destino_regra_p, r_C01_w.ie_origem_preco, r_C01_w.nr_seq_material_preco, r_C01_w.ie_tabela_adicional, r_C01_w.dt_base_fixo, r_C01_w.ie_tipo_ajuste_pfb, r_C01_w.ie_tipo_preco_brasindice, r_C01_w.ie_tipo_preco_simpro, r_C01_w.ie_tipo_preco_tab_adic, r_C01_w.tx_ajuste_pfb, r_C01_w.tx_ajuste_pmc_neg, r_C01_w.tx_ajuste_pmc_neut, r_C01_w.tx_ajuste_pmc_pos, r_C01_w.tx_ajuste_simpro_pfb, r_C01_w.tx_ajuste_simpro_pmc, r_C01_w.tx_ajuste_tab_propria, r_C01_w.vl_negociado, r_C01_w.vl_pfb_nao_aplicavel_simpro, r_C01_w.vl_pfb_negativa_brasindice, r_C01_w.vl_pfb_negativa_simpro, r_C01_w.vl_pfb_neutra_brasindice, r_C01_w.vl_pfb_neutra_simpro, r_C01_w.vl_pfb_positiva_brasindice, r_C01_w.vl_pfb_positiva_simpro, r_C01_w.nr_seq_prestador_exec, r_C01_w.nr_seq_material, r_C01_w.dt_atendimento, r_C01_w.nr_seq_prest_fornec, r_C01_w.cd_versao_tiss, r_C01_w.nr_seq_guia, r_c01_w.tx_ajuste, r_C01_w.nr_seq_conta_mat, r_C01_w.nr_seq_segurado, cd_estabelecimento_p, nm_usuario_p, tb_vl_material_w(nr_contador_w), tb_vl_material_base_w(nr_contador_w), vl_material_simpro_w, vl_material_tabela_w, vl_material_bras_w) INTO STRICT tb_vl_material_w(nr_contador_w), tb_vl_material_base_w(nr_contador_w), vl_material_simpro_w, vl_material_tabela_w, vl_material_bras_w;

	CALL pls_entao_regra_preco_cta_pck.gerencia_log_mat(	'Fim da valorização do material.',
				r_C01_w.nr_seq_conta_mat,
				tb_vl_material_w(nr_contador_w),
				ie_destino_regra_p,
				nm_usuario_p);

	-- se atingiu a quantidade manda pro banco
	if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then
	
		SELECT * FROM pls_entao_regra_preco_cta_pck.atualiza_materiais(	ie_destino_regra_p, tb_vl_material_w, tb_vl_material_base_w, tb_nr_seq_conta_mat_w, tb_nr_seq_regra_entao_w) INTO STRICT _ora2pg_r;
 tb_vl_material_w := _ora2pg_r.tb_vl_calculado_p; tb_vl_material_base_w := _ora2pg_r.tb_vl_calculado_base_p; tb_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_nr_seq_regra_entao_w := _ora2pg_r.tb_nr_seq_regra_entao_p;
	
		-- zera o contador
		nr_contador_w := 0;
	-- senão incrementa o contador
	else
		nr_contador_w := nr_contador_w + 1;
	end if;
end loop;
-- se sobrou algo manda pro banco
SELECT * FROM pls_entao_regra_preco_cta_pck.atualiza_materiais(	ie_destino_regra_p, tb_vl_material_w, tb_vl_material_base_w, tb_nr_seq_conta_mat_w, tb_nr_seq_regra_entao_w) INTO STRICT _ora2pg_r;
 tb_vl_material_w := _ora2pg_r.tb_vl_calculado_p; tb_vl_material_base_w := _ora2pg_r.tb_vl_calculado_base_p; tb_nr_seq_conta_mat_w := _ora2pg_r.tb_nr_seq_conta_mat_p; tb_nr_seq_regra_entao_w := _ora2pg_r.tb_nr_seq_regra_entao_p;

-- se sobrou algo manda pro banco e limpa as variáveis
CALL pls_entao_regra_preco_cta_pck.atualizar_log_mat(nm_usuario_p, ie_destino_regra_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_entao_regra_preco_cta_pck.processa_regra_material ( ie_destino_regra_p text, nr_seq_lote_conta_p pls_protocolo_conta.nr_seq_lote%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type, cd_acao_analise_p pls_acao_analise.cd_acao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
