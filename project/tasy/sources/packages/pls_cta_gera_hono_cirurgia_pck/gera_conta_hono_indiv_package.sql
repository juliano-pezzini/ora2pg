-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_gera_hono_cirurgia_pck.gera_conta_hono_indiv ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
C00 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_conta,
		a.ie_tipo_guia,
		a.ie_origem_conta,
		a.nr_seq_guia, 
		a.nr_seq_segurado, 
		a.nr_seq_prestador_exec, 
		a.nr_seq_protocolo nr_seq_prot_conta,
	       (SELECT 	count(1) 
		from 	pls_execucao_cirurgica x 
		where 	x.nr_seq_guia = a.nr_seq_guia
		and 	x.nr_seq_segurado = a.nr_seq_segurado
		and 	x.nr_seq_prestador_exec = a.nr_seq_prestador_exec
		and 	(x.dt_abertura_contas_hi IS NOT NULL AND x.dt_abertura_contas_hi::text <> '')) qt_abertura,		
		a.ie_tipo_faturamento
	from		pls_conta_v	a
	where		a.ie_tipo_guia			in ('4','5')
	and 		a.ie_status_protocolo 		in ('1', '2', '5')
	and 		a.ie_status 		in ('A', 'L', 'P', 'U')
	and		coalesce(a.nr_seq_conta_referencia::text, '') = ''
	and		a.ie_situacao_protocolo		in ('D','T') 
	and		a.ie_status 			!= 'C'
	and 		a.nr_sequencia = nr_seq_conta_p
	and 		(nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '')
	
union all

	select	a.nr_sequencia nr_seq_conta,
		a.ie_tipo_guia,
		a.ie_origem_conta, 
		a.nr_seq_guia, 
		a.nr_seq_segurado, 
		a.nr_seq_prestador_exec, 
		a.nr_seq_protocolo nr_seq_prot_conta,
	       (select 	count(1) 
		from 	pls_execucao_cirurgica x 
		where 	x.nr_seq_guia = a.nr_seq_guia
		and 	x.nr_seq_segurado = a.nr_seq_segurado
		and 	x.nr_seq_prestador_exec = a.nr_seq_prestador_exec
		and 	(x.dt_abertura_contas_hi IS NOT NULL AND x.dt_abertura_contas_hi::text <> '')) qt_abertura,
		a.ie_tipo_faturamento
	from	pls_conta_v	a
	where	a.ie_tipo_guia			in ('4','5')
	and 	a.ie_status_protocolo 		in ('1', '2', '5')
	and 	a.ie_status 		in ('A', 'L', 'P', 'U')
	and	coalesce(a.nr_seq_conta_referencia::text, '') = ''
	and	a.ie_situacao_protocolo		in ('D','T') 
	and	a.ie_status 			!= 'C'
	and 	a.nr_seq_protocolo = nr_seq_protocolo_p
	and	(nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '')
	
union all

	select	a.nr_sequencia nr_seq_conta,
		a.ie_tipo_guia,
		a.ie_origem_conta, 
		a.nr_seq_guia, 
		a.nr_seq_segurado, 
		a.nr_seq_prestador_exec, 
		a.nr_seq_protocolo nr_seq_prot_conta,
	       (select 	count(1) 
		from 	pls_execucao_cirurgica x 
		where 	x.nr_seq_guia = a.nr_seq_guia
		and 	x.nr_seq_segurado = a.nr_seq_segurado
		and 	x.nr_seq_prestador_exec = a.nr_seq_prestador_exec
		and 	(x.dt_abertura_contas_hi IS NOT NULL AND x.dt_abertura_contas_hi::text <> '')) qt_abertura,
		a.ie_tipo_faturamento
	from	pls_conta_v	a
	where	a.ie_tipo_guia			in ('4','5')
	and 	a.ie_status_protocolo 		in ('1', '2', '5')
	and 	a.ie_status 		in ('A', 'L', 'P', 'U')
	and	coalesce(a.nr_seq_conta_referencia::text, '') = ''
	and	a.ie_situacao_protocolo		in ('D','T') 
	and	a.ie_status 			!= 'C'
	and 	a.nr_seq_lote_conta = nr_seq_lote_p
	and 	(nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '');

C01 CURSOR(	nr_seq_guia_pc			pls_conta.nr_sequencia%type,
		nr_seq_segurado_pc		pls_segurado.nr_sequencia%type,
		nr_seq_prestador_exec_pc	pls_prestador.nr_sequencia%type,
		cd_estabelecimento_p	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	trunc(e.dt_check_in,'DD') dt_procedimento,
		e.dt_check_in dt_inicio_proc,
		e.dt_check_out dt_fim_proc,
		pls_obter_seq_prestador_partic( e.cd_medico, a.nr_seq_prestador_exec,
						cd_estabelecimento_p) nr_seq_prestador_partic_func,
		e.cd_medico,
		d.nr_seq_grau_partic,
		b.nr_seq_guia,
		f.cd_procedimento,
		f.ie_origem_proced,
		c.nr_seq_guia_proc,
		c.ie_via_acesso, 
		c.ie_tecnica_utilizada,
		g.cd_guia,
		a.nr_sequencia nr_seq_exec,
		f.ds_procedimento_imp,
		f.cd_tipo_tabela_imp,
		f.vl_procedimento vl_procedimento_imp,
		c.qt_procedimento,
		e.nr_seq_cbo_saude,
		c.vl_fator_red_acrescimo,
		b.nr_sequencia nr_seq_cirurgica_guia
	from	pls_execucao_cirurgica a,
		pls_exec_cirurgica_guia b,
		pls_exec_cirurgica_proc c,
		pls_exec_cirurg_bio_partic d,
		pls_exec_cirurg_biometria e,
		pls_guia_plano_proc f,
		pls_guia_plano g
	where	a.nr_seq_guia = nr_seq_guia_pc
	and 	a.nr_seq_segurado = nr_seq_segurado_pc
	and	a.nr_seq_prestador_exec = nr_seq_prestador_exec_pc
	and 	b.nr_seq_exec_cirurgica = a.nr_sequencia
	and 	coalesce(b.dt_importacao::text, '') = ''
	and 	c.nr_seq_execucao_guia = b.nr_sequencia
	and 	d.nr_seq_exec_cirurg_proc = c.nr_sequencia
	and 	d.nr_seq_exec_cirurg_bio = e.nr_sequencia
	and	f.nr_sequencia = c.nr_seq_guia_proc
	and 	f.nr_seq_guia = g.nr_sequencia
	and	c.ie_situacao_item in ('A','G')
	order by c.nr_sequencia;
	
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_tipo_guia_convertido_w 	pls_conta.ie_tipo_guia%type;
dados_regra_w			dados_regra_abertura_conta;
nr_seq_conta_anterior_w 	pls_conta.nr_sequencia%type;
ie_credenciado_w		varchar(1);
ie_cooperado_ativo_w		varchar(1);
nr_seq_novo_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
nr_seq_nova_conta_w		pls_conta.nr_sequencia%type;
ie_gerou_novo_registro_w	varchar(1);
nr_seq_protocolo_anterior_w	pls_protocolo_conta.nr_sequencia%type;
ie_tipo_guia_anterior_w		pls_conta.ie_tipo_guia%type;
qt_regra_abert_w		integer := 0;
BEGIN

select	count(1)
into STRICT	qt_regra_abert_w
from	pls_regra_conta_autom  a
where	a.cd_estabelecimento   = cd_estabelecimento_p
and (a.ie_exec_cirurgica   = 'S' );

if (qt_regra_abert_w > 0) then
	for r_c00_w in C00 loop
				
		--Caso ja tenho ocorrido abertura de contas por parte da execucao cirurgica, nao deve ocorrer nova abertura,
		if ( r_c00_w.qt_abertura = 0) then
			
			-- converte o tipo de guia para usar em tratamentos
			if (r_c00_w.ie_tipo_guia = '5') then
				ie_tipo_guia_convertido_w	:= '6'; -- honorario individual
			else
				ie_tipo_guia_convertido_w 	:= r_c00_w.ie_tipo_guia;
			end if;
					
			nr_seq_protocolo_anterior_w := null;
			ie_tipo_guia_anterior_w := null;
			
			for r_C01_w in C01(r_c00_w.nr_seq_guia, r_c00_w.nr_seq_segurado,
					r_c00_w.nr_seq_prestador_exec, cd_estabelecimento_p) loop
									
				dados_regra_w := pls_cta_gera_hono_cirurgia_pck.obter_regra_abertura_conta(	r_c00_w.ie_tipo_guia,
											r_c00_w.ie_origem_conta,								
											cd_estabelecimento_p,	
											r_C01_w.cd_procedimento,
											r_C01_w.ie_origem_proced,
											r_c00_w.nr_seq_prestador_exec);
								
				if (dados_regra_w.nr_sequencia IS NOT NULL AND dados_regra_w.nr_sequencia::text <> '') then
				
					-- verifica se o medico eh um prestador credenciado ou se eh credenciado a um prestador
					ie_credenciado_w	:= pls_obter_se_credenciado_prest( r_C01_w.cd_medico,
												   r_C01_w.nr_seq_prestador_partic_func);
					-- verifica se eh cooperado e esta ativo no momento do atendimento
					ie_cooperado_ativo_w	:= pls_obter_se_cooperado_ativo( r_C01_w.cd_medico,
												 r_C01_w.dt_procedimento, 
												 null);
									
					-- se for cooperado ou credenciado 
					if	(( ie_cooperado_ativo_w = 'S') or ( ie_credenciado_w = 'S'))   then
	
						ie_gerou_novo_registro_w := 'N';
						-- se mudou o protocolo ou a guia executa de novo, caso contrario nao precisa fazer nada									
						if (coalesce(nr_seq_protocolo_anterior_w::text, '') = '' or
							nr_seq_protocolo_anterior_w != r_c00_w.nr_seq_prot_conta or
							coalesce(ie_tipo_guia_anterior_w::text, '') = '' or
							ie_tipo_guia_anterior_w != ie_tipo_guia_convertido_w) then
						 
							-- verificar para gerar ou buscar o protocolo
							SELECT * FROM pls_cta_gera_hono_cirurgia_pck.gera_protocolo_abert_conta(	r_c00_w.nr_seq_prot_conta, ie_tipo_guia_convertido_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_novo_protocolo_w, ie_gerou_novo_registro_w) INTO STRICT nr_seq_novo_protocolo_w, ie_gerou_novo_registro_w;
						end if;
						
						SELECT * FROM pls_cta_gera_hono_cirurgia_pck.gera_conta_abert_conta(	r_c00_w.nr_seq_conta, nr_seq_novo_protocolo_w, r_c00_w.nr_seq_segurado, r_C01_w.cd_guia, r_C01_w.nr_seq_prestador_partic_func, r_C01_w.nr_seq_grau_partic, r_C01_w.cd_medico, ie_tipo_guia_convertido_w, r_c01_w.nr_seq_cbo_saude, r_c01_w.nr_seq_exec, r_c01_w.nr_seq_cirurgica_guia, r_c00_w.ie_tipo_faturamento, nm_usuario_p, cd_estabelecimento_p, dados_regra_w, nr_seq_nova_conta_w, ie_gerou_novo_registro_w) INTO STRICT nr_seq_nova_conta_w, ie_gerou_novo_registro_w;
																		
						-- verificar para gerar o procedimento
						CALL pls_cta_gera_hono_cirurgia_pck.gerar_lancamento_proc(	nr_seq_nova_conta_w,
									r_C01_w.nr_seq_guia_proc,
									r_C01_w.dt_procedimento,
									r_C01_w.dt_inicio_proc,
									r_C01_w.dt_fim_proc,
									r_C01_w.cd_procedimento,
									r_C01_w.ie_origem_proced,
									r_C01_w.ie_via_acesso,
									r_C01_w.ie_tecnica_utilizada,
									r_c01_w.ds_procedimento_imp,
									r_c01_w.cd_tipo_tabela_imp,
									r_c01_w.qt_procedimento,
									r_c01_w.vl_procedimento_imp,								
									r_c01_w.vl_fator_red_acrescimo,
									nm_usuario_p,
									dados_regra_w
									);
																		
						nr_seq_protocolo_anterior_w := r_c00_w.nr_seq_prot_conta;
						ie_tipo_guia_anterior_w := ie_tipo_guia_convertido_w;
						
						commit;
					end if;
				end if;
			end loop;
		end if;

	end loop;
end if;
	
commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_gera_hono_cirurgia_pck.gera_conta_hono_indiv ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
