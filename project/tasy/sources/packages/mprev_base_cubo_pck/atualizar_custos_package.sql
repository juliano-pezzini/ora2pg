-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE mprev_base_cubo_pck.atualizar_custos ( dt_inicio_p timestamp, dt_fim_p timestamp, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

				
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Atualizar os custos de cada beneficiario no periodo informado.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
------------------------------------------------------------------------------------------------------------------

jjung 01/04/2014 - Criacao da rotina
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


c_custo CURSOR(dt_inicio_pc	timestamp,
	dt_fim_pc	timestamp) FOR
	SELECT	benef.nr_sequencia nr_seq_benef_cubo,
		a.dt_competencia dt_mesano_referencia,
		coalesce(a.vl_total_receita,0) vl_receita,
		coalesce(a.vl_custo_assitencial,0) vl_custo,
		coalesce(a.vl_total_receita,0) - coalesce(a.vl_custo_assitencial,0) vl_resultado,
		coalesce((dividir_sem_round(a.vl_custo_assitencial,a.vl_total_receita) * 100),0) pr_sinistralidade
	FROM	pls_analise_resultado_v a,
		mprev_benef_cubo_ops benef
	WHERE	a.nr_seq_segurado = benef.nr_seq_segurado
	AND	a.dt_competencia BETWEEN dt_inicio_pc AND dt_fim_pc;
	
table_custos_w	mprev_base_cubo_pck.table_custos_benef;

BEGIN

open c_custo(dt_inicio_p, dt_fim_p);
loop
	fetch c_custo
	bulk collect into table_custos_w.nr_seq_benef_cubo, table_custos_w.dt_mesano_referencia, table_custos_w.vl_custo,
	                  table_custos_w.vl_receita, table_custos_w.vl_resultado, table_custos_w.pr_sinistralidade
	limit current_setting('mprev_base_cubo_pck.qt_reg_commit_w')::integer;
	
	exit when table_custos_w.nr_seq_benef_cubo.count = 0;
	
	forall i in table_custos_w.nr_seq_benef_cubo.first .. table_custos_w.nr_seq_benef_cubo.last
		insert into mprev_benef_custo_cubo_ops(nr_sequencia, nm_usuario, dt_atualizacao,
			nr_seq_benef_cubo, dt_mesano_referencia, vl_custo,
			vl_receita, vl_resultado, pr_sinistralidade)
		values (nextval('mprev_benef_custo_cubo_ops_seq'), nm_usuario_p, clock_timestamp(), 
			table_custos_w.nr_seq_benef_cubo(i), table_custos_w.dt_mesano_referencia(i), table_custos_w.vl_custo(i),
			table_custos_w.vl_receita(i), table_custos_w.vl_resultado(i), table_custos_w.pr_sinistralidade(i));
	commit;
end loop;
close c_custo;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_base_cubo_pck.atualizar_custos ( dt_inicio_p timestamp, dt_fim_p timestamp, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
