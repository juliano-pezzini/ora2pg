-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE mprev_base_cubo_pck.atualizar_contas ( dt_inicio_p pls_competencia.dt_mes_competencia%type, dt_fim_p pls_competencia.dt_mes_competencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Atualizar a base do cubo para contas de beneficiarios.
	Tabelas mprev_conta_cubo_ops e mprev_conta_cubo_ref.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
------------------------------------------------------------------------------------------------------------------

jjung 01/04/2014 - Criacao da rotina
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

				
c_competencia CURSOR(	dt_inicio_pc	pls_competencia.dt_mes_competencia%type,
			dt_fim_pc	pls_competencia.dt_mes_competencia%type) FOR
	SELECT	a.dt_mes_competencia
	from	pls_competencia a
	where	a.dt_mes_competencia between dt_inicio_pc and dt_fim_pc
	--and	a.dt_fechamento is not null

	;
	
-- Considerar apenas as contas com protocolo onde o mes de competencia ja foi fechado na operadora 

c_contas CURSOR(	dt_competencia_pc	timestamp) FOR
	SELECT	conta.nr_sequencia nr_seq_conta,
		(SELECT	max(benef_cubo.nr_sequencia)
		from	mprev_benef_cubo_ops	benef_cubo
		where	benef_cubo.nr_seq_segurado = conta.nr_seq_segurado) nr_seq_benef_cubo,
		conta.cd_medico_solicitante,
		conta.cd_medico_executor,
		conta.ie_carater_internacao,
		conta.nr_seq_tipo_atendimento,
		conta.nr_seq_prestador_exec,
		conta.nr_seq_clinica,
		conta.dt_atendimento,
		conta.dt_mes_competencia,
		conta.cd_guia,
		conta.cd_guia_ref cd_guia_principal,
		conta.ie_tipo_guia,
		conta.vl_total,
		obter_especialidade_medico(conta.cd_medico_solicitante, 'C') cd_especialidade,
		conta.nr_seq_cbo_saude
	from	pls_conta_v conta
	where	1 = 1
	and	conta.dt_mes_competencia between pkg_date_utils.start_of(dt_competencia_pc, 'MONTH', 0) and fim_mes(dt_competencia_pc)
	and	(conta.dt_atendimento IS NOT NULL AND conta.dt_atendimento::text <> '')
	and	conta.ie_status = 'F'
	and	exists (	select	1
				from	mprev_benef_cubo_ops benef_cubo
				where	benef_cubo.nr_seq_segurado = conta.nr_seq_segurado);
		
table_contas_w		mprev_base_cubo_pck.table_conta;
		
BEGIN

if (dt_inicio_p IS NOT NULL AND dt_inicio_p::text <> '' AND dt_fim_p IS NOT NULL AND dt_fim_p::text <> '') then

	-- Varrer as competencias fechadas no periodo.

	for 	rw_comp_w in c_competencia(dt_inicio_p, dt_fim_p) loop

		-- Varrer as contas para a competencia.

		open c_contas(rw_comp_w.dt_mes_competencia);
		loop
			fetch c_contas bulk collect
			into	table_contas_w.nr_seq_conta, table_contas_w.nr_seq_benef_cubo,
				table_contas_w.cd_medico_solicitante, table_contas_w.cd_medico_executor,
				table_contas_w.ie_carater_internacao, table_contas_w.nr_seq_tipo_atendimento,
				table_contas_w.nr_seq_prestador_exec, table_contas_w.nr_seq_clinica,
				table_contas_w.dt_atendimento, table_contas_w.dt_mes_competencia,
				table_contas_w.cd_guia, table_contas_w.cd_guia_principal, 
				table_contas_w.ie_tipo_guia, table_contas_w.vl_conta,
				table_contas_w.cd_especialidade, table_contas_w.nr_seq_cbo_saude	
			limit current_setting('mprev_base_cubo_pck.qt_reg_commit_w')::integer;
			
			exit when table_contas_w.nr_seq_conta.count = 0;
		
			forall i in table_contas_w.nr_seq_conta.first .. table_contas_w.nr_seq_conta.last
				insert into mprev_conta_cubo_ops(nr_sequencia, nm_usuario, dt_atualizacao,
					nr_seq_benef_cubo, cd_medico_solicitante, cd_medico_executor,
					ie_carater_internacao, nr_seq_tipo_atendimento, nr_seq_prestador_exec,
					nr_seq_clinica, dt_atendimento, dt_mes_competencia,
					cd_guia, cd_guia_principal, ie_tipo_guia, cd_especialidade,
					vl_conta, nr_seq_cbo_saude)
				values (nextval('mprev_conta_cubo_ops_seq'), nm_usuario_p, clock_timestamp(),
					table_contas_w.nr_seq_benef_cubo(i), table_contas_w.cd_medico_solicitante(i), table_contas_w.cd_medico_executor(i),
					table_contas_w.ie_carater_internacao(i), table_contas_w.nr_seq_tipo_atendimento(i), table_contas_w.nr_seq_prestador_exec(i),
					table_contas_w.nr_seq_clinica(i), table_contas_w.dt_atendimento(i), table_contas_w.dt_mes_competencia(i),
					table_contas_w.cd_guia(i), table_contas_w.cd_guia_principal(i), table_contas_w.ie_tipo_guia(i),
					table_contas_w.cd_especialidade(i), table_contas_w.vl_conta(i), table_contas_w.nr_seq_cbo_saude(i))
			returning nr_sequencia bulk collect into table_contas_w.nr_sequencia;
			commit;
				
			-- Gravar a referencia com a conta medica 

			forall i in table_contas_w.nr_sequencia.first .. table_contas_w.nr_sequencia.last
				insert into mprev_conta_cubo_ref(nr_sequencia, nm_usuario, dt_atualizacao,
					nr_seq_conta_cubo_ops, nr_seq_conta)
				values (nextval('mprev_conta_cubo_ref_seq'), nm_usuario_p, clock_timestamp(),
					table_contas_w.nr_sequencia(i), table_contas_w.nr_seq_conta(i));
			commit;
		end loop;
		close c_contas;
	end loop;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_base_cubo_pck.atualizar_contas ( dt_inicio_p pls_competencia.dt_mes_competencia%type, dt_fim_p pls_competencia.dt_mes_competencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
