-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_demonstrativo_pgto_pck.gerar_itens_pagamento ( nr_seq_prest_venc_p bigint, tb_pls_rel_pag_prestador_p pls_rel_pag_prestador, nr_seq_dados_pag_p pls_rel_pprest_dados_pag.nr_sequencia%type, nr_seq_versao_rel_p pls_rel_pprest_versao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_pagina_deb_cred_w	pls_rel_pprest_pagina.nr_pagina%type := 1;
nr_seq_pagina_w		pls_rel_pprest_pagina.nr_sequencia%type;
nr_seq_lote_pgto_w	pls_lote_pagamento.nr_sequencia%type;
nr_seq_pag_prestador_w	pls_pagamento_prestador.nr_sequencia%type;
qt_registros_w		integer;
vl_processado_w		pls_conta_medica_resumo.vl_calculado%type;
vl_liberado_w		pls_conta_medica_resumo.vl_liberado%type;

c01 CURSOR(	nr_seq_lote_pgto_pc	pls_lote_pagamento.nr_sequencia%type,
		nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type,
		nr_seq_protocolo_rec_pc	pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_prestador_pc	pls_prestador.nr_sequencia%type) FOR
	-- Conta medica sem protocolo

	SELECT  b.dt_competencia,
		b.nr_seq_protocolo,
		b.nr_protocolo_prestador,
		sum(b.vl_apresentado) vl_informado,
		sum(b.vl_calculado) vl_processado,
		sum(b.vl_liberado) vl_liberado,
		sum(b.vl_glosa) vl_glosa,
		max('C') ie_tipo,
		sum(vl_taxa_adm_pag) vl_taxa_adm_pag
	from  	pls_conta_medica_resumo	b
	where   b.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
	and	b.nr_seq_prestador_pgto	= nr_seq_prestador_pc
	and	coalesce(nr_seq_protocolo_pc::text, '') = ''
	and	b.ie_situacao		!= 'I'
	group by b.dt_competencia,
		b.nr_seq_protocolo,
		b.nr_protocolo_prestador
	
union all

	-- Conta medica com protocolo

	SELECT  b.dt_competencia,
		b.nr_seq_protocolo,
		b.nr_protocolo_prestador,
		sum(b.vl_apresentado) vl_informado,
		sum(b.vl_calculado) vl_processado,
		sum(b.vl_liberado) vl_liberado,
		sum(b.vl_glosa) vl_glosa,
		max('C') ie_tipo,
		sum(vl_taxa_adm_pag) vl_taxa_adm_pag
	from  	pls_conta_medica_resumo	b
	where   b.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
	and	b.nr_seq_prestador_pgto	= nr_seq_prestador_pc
	and	b.nr_seq_protocolo	= nr_seq_protocolo_pc
	and	b.ie_situacao		!= 'I'
	group by b.dt_competencia,
		b.nr_seq_protocolo,
		b.nr_protocolo_prestador
	
union all

	--Recurso de glosa sem protocolo

	select	dt_apresentacao_lote,
		nr_seq_protocolo,
		nr_protocolo_prestador,
		sum(vl_informado),
		sum(vl_processado),
		sum(vl_liberado),
		sum(vl_glosa),
		ie_tipo,
		0 vl_taxa_adm_pag
	from	(
		-- Recurso de glosa (procedimentos) sem protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(	select	max(x.nr_lote)
				from	pls_rec_glosa_prot_cta_imp	x
				where	x.nr_seq_protocolo		= b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			max('R') ie_tipo
		from	pls_conta_rec_resumo_item	a,
			pls_rec_glosa_conta		b,
			pls_rec_glosa_protocolo		c,
			pls_rec_glosa_proc		d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
		and	a.nr_seq_proc_rec	= d.nr_sequencia
		and	d.nr_seq_conta_rec	= b.nr_sequencia
		and	b.nr_seq_protocolo	= c.nr_sequencia
		and	coalesce(nr_seq_protocolo_rec_pc::text, '') = ''
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote
		
union all

		-- Recruso de glosa (materiais) sem protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(	select	max(x.nr_lote)
				from	pls_rec_glosa_prot_cta_imp	x
				where	x.nr_seq_protocolo		= b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			max('R') ie_tipo
		from	pls_conta_rec_resumo_item	a,
			pls_rec_glosa_conta		b,
			pls_rec_glosa_protocolo		c,
			pls_rec_glosa_mat		d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
		and	a.nr_seq_mat_rec	= d.nr_sequencia
		and	d.nr_seq_conta_rec	= b.nr_sequencia
		and	b.nr_seq_protocolo	= c.nr_sequencia
		and	coalesce(nr_seq_protocolo_rec_pc::text, '') = ''
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote) alias36
	group by dt_apresentacao_lote, nr_seq_protocolo, nr_protocolo_prestador, ie_tipo
	
union all

	--Recurso de glosa com protocolo

	select	dt_apresentacao_lote,
		nr_seq_protocolo,
		nr_protocolo_prestador,
		sum(vl_informado),
		sum(vl_processado),
		sum(vl_liberado),
		sum(vl_glosa),
		ie_tipo,
		0 vl_taxa_adm_pag
	from	(
		-- Recurso de glosa (procedimentos) com protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(	select	max(x.nr_lote)
				from	pls_rec_glosa_prot_cta_imp	x
				where	x.nr_seq_protocolo		= b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			max('R') ie_tipo
		from	pls_conta_rec_resumo_item	a,
			pls_rec_glosa_conta		b,
			pls_rec_glosa_protocolo		c,
			pls_rec_glosa_proc		d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
		and	a.nr_seq_proc_rec	= d.nr_sequencia
		and	d.nr_seq_conta_rec	= b.nr_sequencia
		and	b.nr_seq_protocolo	= c.nr_sequencia
		and	c.nr_sequencia		= nr_seq_protocolo_rec_pc
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote
		
union all

		-- Recurso de glosa (materiais) com protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(	select	max(x.nr_lote)
				from	pls_rec_glosa_prot_cta_imp	x
				where	x.nr_seq_protocolo		= b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			max('R') ie_tipo
		from	pls_conta_rec_resumo_item	a,
			pls_rec_glosa_conta		b,
			pls_rec_glosa_protocolo		c,
			pls_rec_glosa_mat		d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_lote_pgto	= nr_seq_lote_pgto_pc
		and	a.nr_seq_mat_rec	= d.nr_sequencia
		and	d.nr_seq_conta_rec	= b.nr_sequencia
		and	b.nr_seq_protocolo	= c.nr_sequencia
		and	c.nr_sequencia		= nr_seq_protocolo_rec_pc
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote) alias57
	group by dt_apresentacao_lote, nr_seq_protocolo, nr_protocolo_prestador, ie_tipo;

c02 CURSOR(	nr_seq_prest_venc_pc	pls_pag_prest_vencimento.nr_sequencia%type,
		nr_seq_pag_prestador_pc	pls_pagamento_prestador.nr_sequencia%type,
		ie_funcao_pagamento_pc	pls_parametro_pagamento.ie_funcao_pagamento%type,
		ie_gerar_deb_cred_pc	pls_rel_pag_prestador.ie_gerar_deb_cred%type) FOR
	SELECT	a.ie_indicacao,
		sum(a.vl_debito_credito) vl_debito_credito,
		a.ds_debito_credito,
		b.cd_termo cd_debito_credito,
		b.nr_sequencia nr_seq_termo_cred_deb
	from (	SELECT	CASE WHEN b.ie_soma_diminui='D' THEN 'D' WHEN b.ie_soma_diminui='S' THEN 'C' END  ie_indicacao,
				a.vl_imposto vl_debito_credito,
				b.ds_tributo ds_debito_credito,
				a.cd_tributo,
				null nr_seq_evento
			from	pls_pag_prest_venc_trib	a,
				tributo b
			where	ie_funcao_pagamento_pc = '1'
			and	a.cd_tributo = b.cd_tributo
			and	a.nr_seq_vencimento = nr_seq_prest_venc_pc
			and	a.ie_pago_prev = 'V'
			and	a.vl_imposto > 0
			and	b.ie_soma_diminui <> 'N'
			
union all

			select	CASE WHEN c.ie_natureza='P' THEN 'C'  ELSE 'D' END  ie_indicacao,
				abs(b.vl_item) vl_debito_credito,
				c.ds_evento ds_debito_credito,
				null cd_tributo,
				c.nr_sequencia nr_seq_evento
			from	pls_evento c,
				pls_pagamento_item b,
				pls_pagamento_prestador	a
			where	ie_funcao_pagamento_pc = '1'
			and	a.nr_sequencia = b.nr_seq_pagamento
			and	b.nr_seq_evento = c.nr_sequencia
			and	a.nr_sequencia = nr_seq_pag_prestador_pc
			and	c.ie_tipo_evento = 'F'
			and	b.vl_item <> 0
			
union all

			select	CASE WHEN e.ie_soma_diminui='D' THEN 'D' WHEN e.ie_soma_diminui='S' THEN 'C' END  ie_indicacao,
				sum(d.vl_tributo) vl_debito_credito,
				e.ds_tributo ds_debito_credito,
				e.cd_tributo,
				null nr_seq_evento
			from	pls_pp_prest_event_prest a,
				pls_pp_it_prest_event_val b,
				pls_pp_item_lote c,
				pls_pp_base_atual_trib d,
				tributo e
			where	ie_funcao_pagamento_pc = '2'
			and	a.nr_seq_pp_prest = nr_seq_prest_venc_pc
			and	b.nr_seq_prest_even_val = a.nr_seq_pp_prest_even_val
			and 	c.nr_sequencia = b.nr_seq_item_lote
			and	d.nr_seq_lote = c.nr_seq_lote
			and	d.nr_seq_item_lote = b.nr_seq_item_lote
			and	d.vl_tributo <> 0
			and	e.cd_tributo = d.cd_tributo
			and	e.ie_soma_diminui <> 'N'
			group by e.cd_tributo, e.ds_tributo, e.ie_soma_diminui
			
union all

			select	CASE WHEN c.ie_natureza='P' THEN 'C'  ELSE 'D' END  ie_indicacao,
				abs(b.vl_item) vl_debito_credito,
				c.ds_evento ds_debito_credito,
				null cd_tributo,
				c.nr_sequencia nr_seq_evento
			from	pls_pp_prest_event_prest a,
				pls_pp_prest_evento_valor b,
				pls_evento c
			where	ie_funcao_pagamento_pc = '2'
			and	a.nr_seq_pp_prest = nr_seq_prest_venc_pc
			and	b.nr_sequencia = a.nr_seq_pp_prest_even_val
			and	b.vl_item != 0
			and	c.nr_sequencia = b.nr_seq_evento
			and	c.ie_tipo_evento = 'F') a,
		table(pls_demonstrativo_pgto_pck.obter_tiss_termo_cred_deb(a.cd_tributo,a.nr_seq_evento)) b
	where	ie_gerar_deb_cred_pc = 'S'
	group by a.ie_indicacao,a.ds_debito_credito,b.cd_termo,b.nr_sequencia;

c03 CURSOR(	nr_seq_lote_pgto_pc	bigint,
		nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type,
		nr_seq_protocolo_rec_pc	pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_prestador_pc	pls_prestador.nr_sequencia%type) FOR
	-- Conta medica sem protocolo

	SELECT  a.dt_competencia,
		a.nr_seq_protocolo,
		a.nr_protocolo_prestador,
		sum(a.vl_apresentado) vl_informado,
		sum(a.vl_calculado) vl_processado,
		sum(a.vl_liberado) vl_liberado,
		sum(a.vl_glosa) vl_glosa,
		'C' ie_tipo,
		sum(vl_taxa_adm_pag) vl_taxa_adm_pag
	from  	pls_conta_medica_resumo	a
	where   coalesce(nr_seq_protocolo_pc::text, '') = ''
	and	a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_pc
	and	a.ie_situacao = 'A'
	group by a.dt_competencia,
		a.nr_seq_protocolo,
		a.nr_protocolo_prestador
	
union all

	-- Conta medica com protocolo

	SELECT  a.dt_competencia,
		a.nr_seq_protocolo,
		a.nr_protocolo_prestador,
		sum(a.vl_apresentado) vl_informado,
		sum(a.vl_calculado) vl_processado,
		sum(a.vl_liberado) vl_liberado,
		sum(a.vl_glosa) vl_glosa,
		'C' ie_tipo,
		sum(vl_taxa_adm_pag) vl_taxa_adm_pag
	from  	pls_conta_medica_resumo	a
	where   a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
	and	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
	and	a.nr_seq_protocolo = nr_seq_protocolo_pc
	and	a.ie_situacao = 'A'
	group by a.dt_competencia,
		a.nr_seq_protocolo,
		a.nr_protocolo_prestador
	
union all

	--Recurso de glosa

	select	dt_apresentacao_lote,
		nr_seq_protocolo,
		nr_protocolo_prestador,
		sum(vl_informado),
		sum(vl_processado),
		sum(vl_liberado),
		sum(vl_glosa),
		ie_tipo,
		0 vl_taxa_adm_pag
	from	(
		-- Recurso de glosa (procedimentos) sem protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(select	max(x.nr_lote)
			from	pls_rec_glosa_prot_cta_imp x
			where	x.nr_seq_protocolo = b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado) vl_glosa,
			'R' ie_tipo
		from	pls_conta_rec_resumo_item a,
			pls_rec_glosa_conta b,
			pls_rec_glosa_protocolo c,
			pls_rec_glosa_proc d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
		and	d.nr_sequencia = a.nr_seq_proc_rec
		and	b.nr_sequencia = d.nr_seq_conta_rec
		and	c.nr_sequencia = b.nr_seq_protocolo
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote
		
union all

		-- Recruso de glosa (materiais) sem protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(select	max(x.nr_lote)
			from	pls_rec_glosa_prot_cta_imp x
			where	x.nr_seq_protocolo = b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			'R' ie_tipo
		from	pls_conta_rec_resumo_item a,
			pls_rec_glosa_conta b,
			pls_rec_glosa_protocolo c,
			pls_rec_glosa_mat d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
		and	d.nr_sequencia = a.nr_seq_mat_rec
		and	b.nr_sequencia = d.nr_seq_conta_rec
		and	c.nr_sequencia = b.nr_seq_protocolo
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote) alias30
	where	coalesce(nr_seq_protocolo_rec_pc::text, '') = ''
	group by dt_apresentacao_lote, nr_seq_protocolo, nr_protocolo_prestador, ie_tipo
	
union all

	--Recurso de glosa

	select	dt_apresentacao_lote,
		nr_seq_protocolo,
		nr_protocolo_prestador,
		sum(vl_informado),
		sum(vl_processado),
		sum(vl_liberado),
		sum(vl_glosa),
		ie_tipo,
		0 vl_taxa_adm_pag
	from	(
		-- Recurso de glosa (procedimentos) com protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(select	max(x.nr_lote)
			from	pls_rec_glosa_prot_cta_imp x
			where	x.nr_seq_protocolo = b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			'R' ie_tipo
		from	pls_conta_rec_resumo_item a,
			pls_rec_glosa_conta b,
			pls_rec_glosa_protocolo c,
			pls_rec_glosa_proc d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
		and	a.nr_seq_proc_rec = d.nr_sequencia
		and	d.nr_seq_conta_rec = b.nr_sequencia
		and	b.nr_seq_protocolo = c.nr_sequencia
		and	c.nr_sequencia = nr_seq_protocolo_rec_pc
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote
		
union all

		-- Recurso de glosa (materiais) com protocolo

		select	c.dt_apresentacao_lote,
			b.nr_seq_protocolo,
			(select	max(x.nr_lote)
			from	pls_rec_glosa_prot_cta_imp x
			where	x.nr_seq_protocolo = b.nr_seq_protocolo) nr_protocolo_prestador,
			sum(d.vl_recursado) vl_informado,
			sum(d.vl_acatado) vl_processado,
			sum(d.vl_acatado) vl_liberado,
			sum(d.vl_recursado) - sum(d.vl_acatado)  vl_glosa,
			'R' ie_tipo
		from	pls_conta_rec_resumo_item a,
			pls_rec_glosa_conta b,
			pls_rec_glosa_protocolo c,
			pls_rec_glosa_mat d
		where	a.nr_seq_prestador_pgto	= nr_seq_prestador_pc
		and	a.nr_seq_pp_lote = nr_seq_lote_pgto_pc
		and	a.nr_seq_mat_rec = d.nr_sequencia
		and	d.nr_seq_conta_rec = b.nr_sequencia
		and	b.nr_seq_protocolo = c.nr_sequencia
		and	c.nr_sequencia = nr_seq_protocolo_rec_pc
		group by b.nr_seq_protocolo, c.dt_apresentacao_lote) alias50
	group by dt_apresentacao_lote, nr_seq_protocolo, nr_protocolo_prestador, ie_tipo;

nr_seq_prest_prot_w pls_rel_pprest_prot_guia.nr_seq_prest_prot%type;

BEGIN

if (tb_pls_rel_pag_prestador_p.ie_funcao_pagamento = '1') then

	--Busca os dados do pagamento

	select	a.nr_sequencia,
		a.nr_seq_lote
	into STRICT	nr_seq_pag_prestador_w,
		nr_seq_lote_pgto_w
	from	pls_pag_prest_vencimento b,
		pls_pagamento_prestador a
	where	a.nr_sequencia = b.nr_seq_pag_prestador
	and	b.nr_sequencia = nr_seq_prest_venc_p;
else
	--Busca os dados do pagamento

	select	max(a.nr_seq_lote)
	into STRICT	nr_seq_lote_pgto_w
	from	pls_pp_prestador a
	where	a.nr_sequencia = nr_seq_prest_venc_p;
end if;

if (somente_numero(pls_obter_versao_tiss) < 40001) then
	--Inseri a primeira pagina

	nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
end if;

-- tratamento para a nova funcao do pagamento (dividi em dois cursores pois ambos sao grandes e ficaria mais confuso caso os dois fossem unidos)

if (tb_pls_rel_pag_prestador_p.ie_funcao_pagamento = '1') then
	--Insere os dados do protocolo de contas e recursos de glosas

	for r_01_w in c01(	nr_seq_lote_pgto_w,
				tb_pls_rel_pag_prestador_p.nr_seq_protocolo,
				tb_pls_rel_pag_prestador_p.nr_seq_protocolo_rec,
				tb_pls_rel_pag_prestador_p.nr_seq_prestador) loop

		vl_processado_w := r_01_w.vl_processado;
		if (tb_pls_rel_pag_prestador_p.ie_valor_bruto = 'S') then
			vl_liberado_w := coalesce(r_01_w.vl_liberado, 0) + coalesce(r_01_w.vl_taxa_adm_pag, 0);
		else
			vl_liberado_w := coalesce(r_01_w.vl_liberado, 0);
		end if;

		--Se for recurso de glosa, entao nao precisa chamar a funcion, pois o valor processado correto ja retornara do cursor1. Isso por que quando falamos de recurso, cada registro de procedimento tera apenas um unico

		--correspondente no resumo. Caso for conta medica, entao precisa chamar a funcion para obter o correto valor


		if (r_01_w.ie_tipo = 'C') then

			vl_processado_w := pls_demonstrativo_pgto_pck.obter_valor_processado(	nr_seq_lote_pgto_w, r_01_w.nr_seq_protocolo, tb_pls_rel_pag_prestador_p.nr_seq_prestador,
									tb_pls_rel_pag_prestador_p.ie_funcao_pagamento);
		end if;

		if (somente_numero(pls_obter_versao_tiss) >= 40001) then
			nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
		end if;

		insert into pls_rel_pprest_prot(
			nr_sequencia, nm_usuario, dt_atualizacao,
			nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_dados_pag,
			nr_seq_pagina, dt_protocolo, nr_protocolo,
			nr_lote, vl_informado, vl_processado,
			vl_liberado, vl_glosa
		) values (
			nextval('pls_rel_pprest_prot_seq'), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nr_seq_dados_pag_p,
			nr_seq_pagina_w, r_01_w.dt_competencia, to_char(r_01_w.nr_seq_protocolo),
			coalesce(r_01_w.nr_protocolo_prestador, to_char(r_01_w.nr_seq_protocolo)), coalesce(r_01_w.vl_informado, 0), coalesce(vl_processado_w, 0), 
			vl_liberado_w, coalesce(r_01_w.vl_glosa, 0)
		) returning nr_sequencia into nr_seq_prest_prot_w;

		-- se for da versao 4.00.01 em diante, a paginacao sera gerada na tabela das guias

		if (somente_numero(pls_obter_versao_tiss) < 40001) then
			--A cada 8 registros e gerado um novo registro de pagina

			if (mod(c01%rowcount,8) = 0) then
				nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
			end if;
		else
			CALL pls_demonstrativo_pgto_pck.gerar_protocolo_guias(nr_seq_lote_pgto_w, r_01_w.nr_seq_protocolo, tb_pls_rel_pag_prestador_p.nr_seq_prestador, nr_seq_prest_prot_w,r_01_w.ie_tipo,tb_pls_rel_pag_prestador_p.ie_funcao_pagamento, nr_seq_versao_rel_p, nm_usuario_p, nr_seq_pagina_w);
		end if;
	end loop;
else
	--Insere os dados do protocolo de contas e recursos de glosas

	for r_03_w in c03(	nr_seq_lote_pgto_w,
				tb_pls_rel_pag_prestador_p.nr_seq_protocolo,
				tb_pls_rel_pag_prestador_p.nr_seq_protocolo_rec,
				tb_pls_rel_pag_prestador_p.nr_seq_prestador) loop

		if ( tb_pls_rel_pag_prestador_p.ie_valor_bruto = 'S') then
			vl_liberado_w := coalesce(r_03_w.vl_liberado, 0) + coalesce(r_03_w.vl_taxa_adm_pag, 0);
		else
			vl_liberado_w := coalesce(r_03_w.vl_liberado, 0);
		end if;
				
		vl_processado_w := r_03_w.vl_processado;

		--Se for recurso de glosa, entao nao precisa chamar a funcion, pois o valor processado correto ja retornara do cursor1. Isso por que quando falamos de recurso, cada registro de procedimento tera apenas um unico

		--correspondente no resumo. Caso for conta medica, entao precisa chamar a funcion para obter o correto valor


		if (r_03_w.ie_tipo = 'C') then

			vl_processado_w := pls_demonstrativo_pgto_pck.obter_valor_processado(	nr_seq_lote_pgto_w, r_03_w.nr_seq_protocolo, tb_pls_rel_pag_prestador_p.nr_seq_prestador,
									tb_pls_rel_pag_prestador_p.ie_funcao_pagamento);
		end if;

		if (somente_numero(pls_obter_versao_tiss) >= 40001) then
			nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
		end if;

		insert into pls_rel_pprest_prot(
			nr_sequencia, nm_usuario, dt_atualizacao,
			nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_dados_pag,
			nr_seq_pagina, dt_protocolo, nr_protocolo,
			nr_lote, vl_informado, vl_processado,
			vl_liberado, vl_glosa
		) values (
			nextval('pls_rel_pprest_prot_seq'), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nr_seq_dados_pag_p,
			nr_seq_pagina_w, r_03_w.dt_competencia, to_char(r_03_w.nr_seq_protocolo),
			coalesce(r_03_w.nr_protocolo_prestador, to_char(r_03_w.nr_seq_protocolo)), coalesce(r_03_w.vl_informado, 0), coalesce(vl_processado_w, 0), 
			vl_liberado_w, coalesce(r_03_w.vl_glosa, 0)
		) returning nr_sequencia into nr_seq_prest_prot_w;

		-- se for da versao 4.00.01 em diante, a paginacao sera gerada na tabela das guias

		if (somente_numero(pls_obter_versao_tiss) < 40001) then
			--A cada 8 registros e gerado um novo registro de pagina

			if (mod(c03%rowcount,8) = 0) then
				nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
			end if;
		else
			CALL pls_demonstrativo_pgto_pck.gerar_protocolo_guias(nr_seq_lote_pgto_w, r_03_w.nr_seq_protocolo, tb_pls_rel_pag_prestador_p.nr_seq_prestador, nr_seq_prest_prot_w,r_03_w.ie_tipo,tb_pls_rel_pag_prestador_p.ie_funcao_pagamento, nr_seq_versao_rel_p, nm_usuario_p, nr_seq_pagina_w);
		end if;
	end loop;
end if;

select	max(nr_sequencia)
into STRICT	nr_seq_pagina_w
from	pls_rel_pprest_pagina
where	nr_seq_versao_rel = nr_seq_versao_rel_p
and	nr_pagina = 1;

if (coalesce(nr_seq_pagina_w::text, '') = '') then
	nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
end if;

--Insere os dados de debito e credito

for r_02_w in c02(nr_seq_prest_venc_p, nr_seq_pag_prestador_w, tb_pls_rel_pag_prestador_p.ie_funcao_pagamento, tb_pls_rel_pag_prestador_p.ie_gerar_deb_cred) loop

	insert into pls_rel_pprest_deb_cred(
		nr_sequencia, nm_usuario, dt_atualizacao,
		nm_usuario_nrec, dt_atualizacao_nrec, nr_seq_dados_pag,
		nr_seq_pagina, nr_seq_versao_rel, nr_seq_termo_cred_deb,
		ie_indicacao, cd_debito_credito, ds_debito_credito,
		vl_debito_credito
	) values (
		nextval('pls_rel_pprest_deb_cred_seq'), nm_usuario_p, clock_timestamp(),
		nm_usuario_p, clock_timestamp(), nr_seq_dados_pag_p,
		nr_seq_pagina_w, nr_seq_versao_rel_p, r_02_w.nr_seq_termo_cred_deb,
		r_02_w.ie_indicacao, r_02_w.cd_debito_credito, ptu_somente_caracter_permitido(r_02_w.ds_debito_credito,'ANS'),
		r_02_w.vl_debito_credito
	);

	--A cada 3 registros e gerado um novo registro de pagina

	if (mod(c02%rowcount,3) = 0) then

		nr_pagina_deb_cred_w := nr_pagina_deb_cred_w + 1;

		--Antes de criar, verifica se ja existe a pagina, senao cria a pagina

		select	max(nr_sequencia)
		into STRICT	nr_seq_pagina_w
		from	pls_rel_pprest_pagina
		where	nr_seq_versao_rel = nr_seq_versao_rel_p
		and	nr_pagina = nr_pagina_deb_cred_w;

		if (coalesce(nr_seq_pagina_w::text, '') = '') then

			nr_seq_pagina_w := pls_demonstrativo_pgto_pck.inserir_pagina(nr_seq_pagina_w, nr_seq_versao_rel_p, nm_usuario_p);
		end if;
	end if;
end loop;

--Tratamento para nao ter uma pagina sem informacao

if (nr_seq_pagina_w IS NOT NULL AND nr_seq_pagina_w::text <> '') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_rel_pprest_deb_cred
	where	nr_seq_pagina = nr_seq_pagina_w;

	if (qt_registros_w = 0) then
		select	count(1)
		into STRICT	qt_registros_w
		from	pls_rel_pprest_prot
		where	nr_seq_pagina = nr_seq_pagina_w;

		if (qt_registros_w = 0) then

			delete	FROM pls_rel_pprest_pagina
			where	nr_sequencia = nr_seq_pagina_w
			and	nr_pagina <> 1;
		end if;
	end if;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_demonstrativo_pgto_pck.gerar_itens_pagamento ( nr_seq_prest_venc_p bigint, tb_pls_rel_pag_prestador_p pls_rel_pag_prestador, nr_seq_dados_pag_p pls_rel_pprest_dados_pag.nr_sequencia%type, nr_seq_versao_rel_p pls_rel_pprest_versao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
