-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


------------------------------------ GERAR MENSALIDADE ------------------------------------
CREATE OR REPLACE PROCEDURE pls_mov_mens_receb_pck.gerar_mensalidade ( nr_seq_lote_p pls_mov_mens_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

pls_mov_mens_lote_w		pls_mov_mens_lote%rowtype;
dt_vencimento_w			timestamp;
vl_total_w			double precision;
vl_pro_rata_dia_w		double precision;
vl_antecipacao_w		double precision;
vl_pre_estabelecido_w		double precision;
vl_coparticipacao_w		double precision;
vl_pos_estabelecido_w		double precision;
vl_outros_w			double precision;
qt_mov_sem_benef_w		integer;
qt_mov_sem_itens_w		integer;
nr_seq_lote_mensalidade_w	pls_lote_mensalidade.nr_sequencia%type;
nr_seq_mensalidade_w		pls_mensalidade.nr_sequencia%type;
nr_seq_mensalidade_seg_w	pls_mensalidade_segurado.nr_sequencia%type;
nr_seq_mens_seg_item_w		pls_mensalidade_seg_item.nr_sequencia%type;
pls_contrato_pagador_fin_w	pls_contrato_pagador_fin%rowtype;
pls_contrato_pagador_w		pls_contrato_pagador%rowtype;

C01 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_mov_benef,
		a.nr_seq_segurado,
		b.nr_seq_titular,
		b.nr_seq_parentesco,
		b.nr_seq_subestipulante,
		obter_idade(c.dt_nascimento,pls_mov_mens_lote_w.dt_referencia,'A') qt_idade,
		coalesce((	SELECT	sum(x.vl_item)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia),0) vl_item,
		coalesce((	select	sum(x.vl_pro_rata_dia)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia),0) vl_pro_rata_dia,
		coalesce((	select	sum(x.vl_antecipacao)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia),0) vl_antecipacao,
		coalesce((	select	sum(x.vl_item)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia
			and	x.ie_tipo_item = '1'),0) vl_pre_estabelecido,
		coalesce((	select	sum(x.vl_item)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia
			and	x.ie_tipo_item = '3'),0) vl_coparticipacao,
		coalesce((	select	sum(x.vl_item)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia
			and	x.ie_tipo_item in ('6','7')),0) vl_pos_estabelecido,
		coalesce((	select	sum(x.vl_item)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia
			and	x.ie_tipo_item not in ('1','3','6','7')),0) vl_outros,
		(	select	max(x.dt_inicio_cobertura)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia) dt_inicio_cobertura,
		(	select	max(x.dt_fim_cobertura)
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef = a.nr_sequencia) dt_fim_cobertura
	from	pls_mov_mens_benef a,
		pls_segurado b,
		pessoa_fisica c
	where	b.nr_sequencia		= a.nr_seq_segurado
	and	c.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	(a.nr_seq_segurado IS NOT NULL AND a.nr_seq_segurado::text <> '');

C02 CURSOR(	nr_seq_mov_benef_pc	pls_mov_mens_benef.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_mov_item,
		a.ie_tipo_item,
		a.dt_inicio_cobertura,
		a.dt_fim_cobertura,
		a.vl_item,
		a.vl_antecipacao,
		a.vl_pro_rata_dia,
		a.vl_ato_cooperado,
		a.vl_ato_cooperado_antec,
		a.vl_ato_cooperado_pro_rata,
		a.vl_ato_auxiliar,
		a.vl_ato_auxiliar_antec,
		a.vl_ato_auxiliar_pro_rata,
		a.vl_ato_nao_cooperado,
		a.vl_ato_nao_coop_antec,
		a.vl_ato_nao_coop_pro_rata
	from	pls_mov_mens_benef_item a
	where	a.nr_seq_mov_benef	= nr_seq_mov_benef_pc
	order by a.ie_tipo_item;
BEGIN
select	count(1)
into STRICT	qt_mov_sem_benef_w
from	pls_mov_mens_benef
where	nr_seq_lote	= nr_seq_lote_p
and	coalesce(nr_seq_segurado::text, '') = '';

if (qt_mov_sem_benef_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1077097); --Existem movimentações sem beneficiário vinculado!
end if;

select	count(1)
into STRICT	qt_mov_sem_itens_w
from	pls_mov_mens_benef a
where	a.nr_seq_lote	= nr_seq_lote_p
and	not exists (	SELECT	1
			from	pls_mov_mens_benef_item x
			where	x.nr_seq_mov_benef	= a.nr_sequencia);

if (qt_mov_sem_itens_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1077105); --Existem movimentações sem itens informados!
end if;

select	*
into STRICT	pls_mov_mens_lote_w
from	pls_mov_mens_lote
where	nr_sequencia = nr_seq_lote_p;

begin
select	a.*
into STRICT	pls_contrato_pagador_fin_w
from	pls_contrato_pagador_fin a,
	pls_contrato_pagador b
where	b.nr_sequencia		= a.nr_seq_pagador
and	b.nr_seq_congenere	= pls_mov_mens_lote_w.nr_seq_congenere_origem
and	trunc(dt_inicio_vigencia,'month') <= fim_dia(pls_mov_mens_lote_w.dt_referencia)
and	((dt_fim_vigencia >= fim_dia(pls_mov_mens_lote_w.dt_referencia)) or (coalesce(dt_fim_vigencia::text, '') = ''));

select	*
into STRICT	pls_contrato_pagador_w
from	pls_contrato_pagador
where	nr_sequencia	= pls_contrato_pagador_fin_w.nr_seq_pagador;
exception
when too_many_rows then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1077091); --Existe mais de uma informação financeira vigente para o pagador da operadora #@DS_CONGENERE#@!
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1077092); --Não foi encontrato um pagador com informação financeira vigente para a operadora #@DS_CONGENERE#@!
end;

dt_vencimento_w	:= pls_mov_mens_receb_pck.obter_dt_vencimento_mens(	pls_contrato_pagador_fin_w.dt_dia_vencimento, pls_contrato_pagador_fin_w.ie_mes_vencimento, trunc(pls_mov_mens_lote_w.dt_referencia,'month'),
						pls_contrato_pagador_w.dt_primeira_mensalidade, pls_contrato_pagador_w.ie_primeira_mensalidade_gerada, cd_estabelecimento_p,
						pls_contrato_pagador_fin_w.qt_meses_vencimento);

select	sum(a.vl_item),
	sum(a.vl_pro_rata_dia),
	sum(a.vl_antecipacao),
	sum(CASE WHEN a.ie_tipo_item='1' THEN a.vl_item  ELSE 0 END ) vl_pre_estabelecido,
	sum(CASE WHEN a.ie_tipo_item='3' THEN a.vl_item  ELSE 0 END ) vl_coparticipacao,
	sum(CASE WHEN a.ie_tipo_item='6' THEN a.vl_item  ELSE CASE WHEN a.ie_tipo_item='7' THEN a.vl_item  ELSE 0 END  END ) vl_pos_estabelecido,
	sum(CASE WHEN a.ie_tipo_item='1' THEN 0  ELSE CASE WHEN a.ie_tipo_item='3' THEN 0  ELSE CASE WHEN a.ie_tipo_item='6' THEN 0  ELSE CASE WHEN a.ie_tipo_item='7' THEN 0  ELSE a.vl_item END  END  END  END ) vl_outros
into STRICT	vl_total_w,
	vl_pro_rata_dia_w,
	vl_antecipacao_w,
	vl_pre_estabelecido_w,
	vl_coparticipacao_w,
	vl_pos_estabelecido_w,
	vl_outros_w
from	pls_mov_mens_benef_item a,
	pls_mov_mens_benef b
where	b.nr_sequencia	= a.nr_seq_mov_benef
and	b.nr_seq_lote	= nr_seq_lote_p;

insert	into	pls_lote_mensalidade(	nr_sequencia, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, dt_mesano_referencia,
		ie_status, dt_geracao, ie_tipo_lote,
		ie_primeira_mensalidade, ie_tipo_contratacao, ie_regulamentacao,
		ie_fator_moderador, ie_participacao, cd_estabelecimento,
		ie_tipo_pessoa_pagador, ie_geracao_nota_titulo, ie_pagador_beneficio_obito,
		ie_gerar_mensalidade_futura, ie_mensalidade_mes_anterior, ie_visualizar_portal,
		ie_utilizacao, nr_seq_lote_mov_mens, nr_seq_pagador,
		vl_lote, vl_pro_rata_dia, vl_antecipacao,
		vl_pre_estabelecido, vl_coparticipacao, vl_pos_estabelecido,
		vl_outros, vl_adicionais )
	values (	nextval('pls_lote_mensalidade_seq'), clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p, pls_mov_mens_lote_w.dt_referencia,
		2, clock_timestamp(), 'CI',
		'N', 'T', 'T',
		'T', 'T', cd_estabelecimento_p,
		'A', 'A', 'N',
		'N', 'N', 'N',
		'N', nr_seq_lote_p, pls_contrato_pagador_w.nr_sequencia,
		vl_total_w, vl_pro_rata_dia_w, vl_antecipacao_w,
		vl_pre_estabelecido_w, vl_coparticipacao_w, vl_pos_estabelecido_w,
		vl_outros_w, 0 )
	returning nr_sequencia into nr_seq_lote_mensalidade_w;

insert	into	pls_mensalidade(	nr_sequencia, dt_atualizacao, nm_usuario, nr_seq_lote,
		dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_pagador,
		nr_seq_pagador_fin, dt_referencia, dt_vencimento,
		nr_seq_forma_cobranca, cd_banco, cd_agencia_bancaria,
		ie_digito_agencia, cd_conta, ie_digito_conta,
		nr_seq_conta_banco, ie_gerar_cobr_escrit, nr_seq_conta_banco_deb_aut,
		ie_endereco_boleto, nr_seq_compl_pf_tel_adic, nr_seq_compl_pj,
		nr_seq_tipo_compl_adic, ie_nota_titulo, ie_tipo_estipulante,
		vl_mensalidade, vl_pro_rata_dia, vl_antecipacao,
		vl_pre_estabelecido, vl_coparticipacao, vl_pos_estabelecido,
		vl_outros, vl_adicionais )
	values (	nextval('pls_mensalidade_seq'), clock_timestamp(), nm_usuario_p, nr_seq_lote_mensalidade_w,
		clock_timestamp(), nm_usuario_p, pls_contrato_pagador_fin_w.nr_seq_pagador,
		pls_contrato_pagador_fin_w.nr_sequencia, pls_mov_mens_lote_w.dt_referencia, dt_vencimento_w,
		pls_contrato_pagador_fin_w.nr_seq_forma_cobranca, pls_contrato_pagador_fin_w.cd_banco, pls_contrato_pagador_fin_w.cd_agencia_bancaria,
		pls_contrato_pagador_fin_w.ie_digito_agencia, pls_contrato_pagador_fin_w.cd_conta, pls_contrato_pagador_fin_w.ie_digito_conta,
		pls_contrato_pagador_fin_w.nr_seq_conta_banco, pls_contrato_pagador_fin_w.ie_gerar_cobr_escrit, pls_contrato_pagador_fin_w.nr_seq_conta_banco_deb_aut,
		pls_contrato_pagador_w.ie_endereco_boleto, pls_contrato_pagador_w.nr_seq_compl_pf_tel_adic, pls_contrato_pagador_w.nr_seq_compl_pj,
		pls_contrato_pagador_w.nr_seq_tipo_compl_adic, pls_contrato_pagador_fin_w.ie_geracao_nota_titulo, 'PJ',
		vl_total_w, vl_pro_rata_dia_w, vl_antecipacao_w,
		vl_pre_estabelecido_w, vl_coparticipacao_w, vl_pos_estabelecido_w,
		vl_outros_w, 0  )
	returning nr_sequencia into nr_seq_mensalidade_w;

for r_c01_w in C01 loop
	begin
	insert	into	pls_mensalidade_segurado(	nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_mensalidade,
			nr_seq_segurado, dt_mesano_referencia, nr_parcela,
			ie_rescisao_proporcional, ie_reativacao_proporcional, ie_pce_proporcional,
			vl_mensalidade, vl_pro_rata_dia, vl_antecipacao,
			dt_inicio_cobertura, dt_fim_cobertura, nr_seq_titular,
			qt_idade, nr_seq_parentesco, nr_seq_subestipulante,
			vl_pre_estabelecido, vl_coparticipacao, vl_pos_estabelecido,
			vl_outros, vl_adicionais )
		values (	nextval('pls_mensalidade_segurado_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, nr_seq_mensalidade_w,
			r_c01_w.nr_seq_segurado, pls_mov_mens_lote_w.dt_referencia, 0,
			'N', 'N', 'N',
			r_c01_w.vl_item, r_c01_w.vl_pro_rata_dia, r_c01_w.vl_antecipacao,
			r_c01_w.dt_inicio_cobertura, r_c01_w.dt_fim_cobertura, r_c01_w.nr_seq_titular,
			r_c01_w.qt_idade, r_c01_w.nr_seq_parentesco, r_c01_w.nr_seq_subestipulante,
			r_c01_w.vl_pre_estabelecido, r_c01_w.vl_coparticipacao, r_c01_w.vl_pos_estabelecido,
			r_c01_w.vl_outros, 0 )
		returning nr_sequencia into nr_seq_mensalidade_seg_w;
	
	for r_c02_w in C02(r_c01_w.nr_seq_mov_benef) loop
		begin
		insert	into	pls_mensalidade_seg_item(	nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_mensalidade_seg,
				ie_tipo_item, dt_inicio_cobertura, dt_fim_cobertura,
				vl_item, vl_antecipacao, vl_pro_rata_dia,
				vl_ato_cooperado, vl_ato_cooperado_antec, vl_ato_cooperado_pro_rata,
				vl_ato_auxiliar, vl_ato_auxiliar_antec, vl_ato_auxiliar_pro_rata,
				vl_ato_nao_cooperado, vl_ato_nao_coop_antec, vl_ato_nao_coop_pro_rata)
			values (	nextval('pls_mensalidade_seg_item_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, nr_seq_mensalidade_seg_w,
				r_c02_w.ie_tipo_item, r_c02_w.dt_inicio_cobertura, r_c02_w.dt_fim_cobertura,
				r_c02_w.vl_item, r_c02_w.vl_antecipacao, r_c02_w.vl_pro_rata_dia,
				r_c02_w.vl_ato_cooperado, r_c02_w.vl_ato_cooperado_antec, r_c02_w.vl_ato_cooperado_pro_rata,
				r_c02_w.vl_ato_auxiliar, r_c02_w.vl_ato_auxiliar_antec, r_c02_w.vl_ato_auxiliar_pro_rata,
				r_c02_w.vl_ato_nao_cooperado, r_c02_w.vl_ato_nao_coop_antec, r_c02_w.vl_ato_nao_coop_pro_rata)
			returning nr_sequencia into nr_seq_mens_seg_item_w;
		
		update	pls_mov_mens_benef_item
		set	nr_seq_item_mens	= nr_seq_mens_seg_item_w
		where	nr_sequencia		= r_c02_w.nr_seq_mov_item;
		end;
	end loop;
	end;
end loop;

update	pls_mov_mens_lote
set	dt_geracao_mensalidade	= clock_timestamp(),
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p
where	nr_sequencia		= nr_seq_lote_p;

commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_mov_mens_receb_pck.gerar_mensalidade ( nr_seq_lote_p pls_mov_mens_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
