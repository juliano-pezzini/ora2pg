-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pharmindex_pck.generate_tasy_medic ( nr_seq_processo_p bigint, nm_usuario_p text) AS $body$
DECLARE

			
type lista_triggers is table of varchar(30)
	index by integer;
	
lista_trigger_w 			lista_triggers;
nm_trigger_w				varchar(30);
x							integer;
exec_w						varchar(255);
ds_error_w					varchar(255);
			
material_w					material%rowtype;
material_sistema_externo_w	material_sistema_externo%rowtype;
material_cod_barra_w		material_cod_barra%rowtype;
material_espec_tecnica_w	material_espec_tecnica%rowtype;
material_estab_w			material_estab%rowtype;
mat_fabricante_w			mat_fabricante%rowtype;
material_historico_w		material_historico%rowtype;
material_atc_w				material_atc%rowtype;
material_princ_ativo_w		material_princ_ativo%rowtype;

nr_seq_fabric_w				mat_fabricante.nr_sequencia%type;
ds_fabricante_w				mat_fabricante.ds_fabricante%type;
cd_barra_material_w			material_cod_barra.cd_barra_material%type;
cd_material_w				material.cd_material%type;
qt_estab_w					integer;
cd_estab_adic_w				estabelecimento.cd_estabelecimento%type;
ie_error_w					varchar(1);
ie_atualizado_w				varchar(1)	:= 'N';
qt_commit_w					smallint	:= 0;
qt_existe_w					smallint	:= 0;

nr_seq_medic_w				pharmindex_medic.nr_sequencia%type;
cd_atc_w					pharmindex_medic_atc.atc_code%type;
ds_substancia_w				medic_ficha_tecnica.ds_substancia%type;
nr_seq_medic_ft_w			medic_ficha_tecnica.nr_sequencia%type;

c01 CURSOR FOR
SELECT	*
from	sup_int_material a
where	nr_seq_tab_origem = nr_seq_processo_p
and		cd_sistema_externo = 'PHA'
and		coalesce(dt_confirma_integracao::text, '') = '';

c01_w						c01%rowtype;

c02 CURSOR FOR
SELECT	a.cd_estabelecimento
from	estabelecimento a
where	a.ie_situacao = 'A'
and		a.cd_estabelecimento <> c01_w.cd_estabelecimento
and		not exists (
			SELECT	1
			from	material_estab x
			where	x.cd_material = cd_material_w
			and		x.cd_estabelecimento = a.cd_estabelecimento);
			
c03 CURSOR FOR
SELECT	atc_code
from	pharmindex_medic_atc
where	nr_seq_pharm_medic = nr_seq_medic_w;

c04 CURSOR FOR
SELECT	substr(b.subst_name,1,80)
from	pharmindex_substancia b,
		pharmindex_medic_subst a
where	b.subst_id = a.subst_id
and		a.nr_seq_pharm_medic = nr_seq_medic_w;
			
cTriggers CURSOR FOR
SELECT	trigger_name
from	user_triggers
where	table_name in ('MATERIAL_COD_BARRA','MATERIAL_ESTAB','MATERIAL','SUP_INT_MATERIAL')
and		status = 'ENABLED';
			
BEGIN

select	count(1)
into STRICT	qt_estab_w
from	estabelecimento
where	ie_situacao = 'A';

/* Load the name of activated TRIGGERs that can interfere in this process */

x	:= 1;
open cTriggers;
loop
fetch cTriggers into
	nm_trigger_w;
EXIT WHEN NOT FOUND; /* apply on cTriggers */
	begin
	
	lista_trigger_w(x)	:= nm_trigger_w;
	x	:= x + 1;
	
	end;
end loop;
close cTriggers;

/* Disable the Triggers */

for i in lista_trigger_w.first..lista_trigger_w.last loop
	if lista_trigger_w.exists(i) then
		CALL Exec_sql_Dinamico(nm_usuario_p, ' alter trigger ' || lista_trigger_w(i) || ' disable ');
	end if;
end loop;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	ie_error_w	:= 'N';
	
	begin
	if (c01_w.CD_FABRICANTE IS NOT NULL AND c01_w.CD_FABRICANTE::text <> '') then
		begin
		
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_fabric_w
		from	mat_fabricante
		where	cd_sistema_ant = c01_w.cd_fabricante;
		
		if (nr_seq_fabric_w = 0) then
			begin
		
			select	substr(DRUG_PROD_NAME,1,80)
			into STRICT	ds_fabricante_w
			from	pharmindex_empresa
			where	nr_seq_processo = nr_seq_processo_p
			and		DRUG_PROD_ID = c01_w.CD_FABRICANTE;
		
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_fabric_w
			from	mat_fabricante
			where	upper(ds_fabricante) = upper(ds_fabricante_w);

			if (nr_seq_fabric_w = 0) then
				begin
				
				select	nextval('mat_fabricante_seq')
				into STRICT	nr_seq_fabric_w
				;
				
				mat_fabricante_w.NR_SEQUENCIA			:= nr_seq_fabric_w;
				mat_fabricante_w.DS_FABRICANTE			:= ds_fabricante_w;
				mat_fabricante_w.CD_SISTEMA_ANT			:= c01_w.CD_FABRICANTE;
				mat_fabricante_w.NM_USUARIO				:= nm_usuario_p;
				mat_fabricante_w.DT_ATUALIZACAO			:= clock_timestamp();
				mat_fabricante_w.NM_USUARIO_NREC		:= nm_usuario_p;
				mat_fabricante_w.DT_ATUALIZACAO_NREC	:= clock_timestamp();
				
				insert into mat_fabricante values (mat_fabricante_w.*);
				
				end;
			end if;
			
			end;
		end if;
		
		end;
	end if;
	exception when others then
		nr_seq_fabric_w	:= null;
		ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
		CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
	end;
	
	begin
	select	nextval('material_seq')
	into STRICT	cd_material_w
	;
	
	/* Including information in table MATERIAL */

	material_w.CD_MATERIAL							:= cd_material_w;			
	material_w.NM_USUARIO							:= nm_usuario_p;
	material_w.DT_ATUALIZACAO						:= clock_timestamp();
	material_w.NM_USUARIO_NREC						:= nm_usuario_p;
	material_w.DT_ATUALIZACAO_NREC					:= clock_timestamp();
	material_w.DT_CADASTRAMENTO						:= clock_timestamp();
				
	material_w.DS_MATERIAL							:= c01_w.ds_material;
	material_w.DS_REDUZIDA							:= c01_w.ds_reduzida;
			
	material_w.CD_MATERIAL_CONTA					:= cd_material_w;
	material_w.CD_MATERIAL_ESTOQUE					:= cd_material_w;
	material_w.CD_MATERIAL_GENERICO					:= cd_material_w;
	material_w.CD_CLASSE_MATERIAL					:= c01_w.cd_classe_material;
			
	material_w.CD_UNIDADE_MEDIDA_COMPRA				:= c01_w.cd_unidade_medida_compra;
	material_w.CD_UNIDADE_MEDIDA_CONSUMO			:= c01_w.cd_unidade_medida_consumo;
	material_w.CD_UNIDADE_MEDIDA_ESTOQUE			:= c01_w.cd_unidade_medida_estoque;
	material_w.QT_CONV_COMPRA_ESTOQUE				:= c01_w.qt_conv_compra_estoque;
	material_w.QT_CONV_ESTOQUE_CONSUMO				:= c01_w.qt_conv_estoque_consumo;
	material_w.QT_MINIMO_MULTIPLO_SOLIC				:= c01_w.qt_minimo_multiplo_solic;
			
	material_w.IE_TIPO_MATERIAL						:= c01_w.ie_tipo_material;
	material_w.IE_CONSIGNADO						:= c01_w.ie_consignado;
	material_w.IE_MATERIAL_ESTOQUE					:= c01_w.ie_material_estoque;	
	material_w.IE_CATALOGO							:= c01_w.ie_catalogo;
	material_w.IE_DISPONIVEL_MERCADO				:= c01_w.ie_disponivel_mercado;
	material_w.IE_OBRIG_VIA_APLICACAO				:= c01_w.ie_obrig_via_aplicacao;
	material_w.IE_PACTUADO							:= c01_w.ie_pactuado;
	material_w.IE_PADRONIZADO						:= c01_w.ie_padronizado;
	material_w.IE_PRECO_COMPRA						:= c01_w.ie_preco_compra;
	material_w.IE_PRESCRICAO						:= c01_w.ie_prescricao;
	material_w.IE_BAIXA_ESTOQ_PAC					:= c01_w.ie_baixa_estoq_pac;
	material_w.IE_COBRA_PACIENTE					:= c01_w.ie_cobra_paciente;
	material_w.IE_INF_ULTIMA_COMPRA					:= c01_w.ie_inf_ultima_compra;	
	material_w.IE_RECEITA							:= c01_w.ie_receita;
	material_w.IE_SITUACAO							:= c01_w.ie_situacao;
	material_w.NR_SEQ_FABRIC						:= nr_seq_fabric_w;
	
	material_w.IE_ABRIGO_LUZ						:= 'N';	
	material_w.IE_BAIXA_INTEIRA						:= 'S';
	material_w.IE_BOMBA_INFUSAO						:= 'N';
	material_w.IE_CONTROLE_MEDICO					:= 0;
	material_w.IE_DILUICAO							:= 'N';
	material_w.IE_GRAVAR_OBS_PRESCR					:= 'N';	
	material_w.IE_MISTURA							:= 'N';	
	material_w.IE_SOLUCAO							:= 'S';	
	material_w.IE_UMIDADE_CONTROLADA				:= 'N';
	material_w.ie_classif_xyz						:= 'S';
	material_w.ie_curva_abc							:= 'S';
	
	insert into material values (material_w.*);
	
	exception when others then
		ie_error_w	:= 'S';
		ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
		CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
	end;
	
	if (ie_error_w <> 'S') then
		begin
		/* Generate information in table MATERIAL_ESTAB */

		
		begin
		select	nextval('material_estab_seq')
		into STRICT	material_estab_w.nr_sequencia
		;
		
		material_estab_w.CD_MATERIAL					:= cd_material_w;
		material_estab_w.CD_ESTABELECIMENTO				:= c01_w.cd_estabelecimento;
		material_estab_w.IE_BAIXA_ESTOQ_PAC				:= c01_w.ie_baixa_estoq_pac;
		material_estab_w.IE_CLASSIF_CUSTO				:= 'B';
		material_estab_w.IE_CONTROLA_SERIE				:= 'N';
		material_estab_w.IE_ESTOQUE_LOTE				:= 'N';
		material_estab_w.IE_MATERIAL_ESTOQUE			:= c01_w.ie_material_estoque;
		material_estab_w.IE_PADRONIZADO					:= c01_w.ie_padronizado;
		material_estab_w.IE_PRESCRICAO					:= c01_w.ie_prescricao;
		material_estab_w.IE_REQUISICAO					:= 'S';
		material_estab_w.IE_RESSUPRIMENTO				:= 'S';
		material_estab_w.NR_MINIMO_COTACAO				:= 1;
		material_estab_w.IE_CURVA_XYZ					:= c01_w.ie_curva_xyz;
		material_estab_w.QT_DIA_INTERV_RESSUP			:= c01_w.qt_dia_interv_ressup;
		material_estab_w.QT_DIA_RESSUP_FORN				:= c01_w.qt_dia_ressup_forn;
		material_estab_w.QT_DIA_ESTOQUE_MINIMO			:= c01_w.qt_dia_estoque_minimo;
		material_estab_w.NM_USUARIO						:= nm_usuario_p;
		material_estab_w.DT_ATUALIZACAO					:= clock_timestamp();
		material_estab_w.NM_USUARIO_NREC				:= nm_usuario_p;
		material_estab_w.DT_ATUALIZACAO_NREC			:= clock_timestamp();
		
		insert into material_estab values (material_estab_w.*);
		
		/* If exists more than one establishment, will be generate the information for all the others */

		if (qt_estab_w	> 1) then
			begin
			
			ie_atualizado_w	:= 'N';
			
			open c02;
			loop
			fetch c02 into
				cd_estab_adic_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				
				/* Does this control because, for all others establishments, the values will be default (only changes for the primary) */

				/* This was done based in others procedures, like CONSISTE_GERAR_MATERIAL_ESTAB */

				if (ie_atualizado_w = 'N') then
					begin
					
					material_estab_w.IE_MATERIAL_ESTOQUE			:= 'N';
					material_estab_w.IE_PADRONIZADO					:= 'N';
					material_estab_w.IE_PRESCRICAO					:= 'N';
					material_estab_w.IE_REQUISICAO					:= 'N';
					material_estab_w.IE_RESSUPRIMENTO				:= 'N';
					material_estab_w.IE_BAIXA_ESTOQ_PAC				:= 'N';
					
					ie_atualizado_w	:= 'S';
					
					end;
				end if;
				
				select	nextval('material_estab_seq')
				into STRICT	material_estab_w.nr_sequencia
				;
				
				material_estab_w.CD_ESTABELECIMENTO		:= cd_estab_adic_w;
				
				insert into material_estab values (material_estab_w.*);
				
				end;
			end loop;
			close c02;
			
			end;
		end if;
		
		exception when others then
			ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
			CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
		end;
		
		/* Generating information in table MATERIAL_SISTEMA_EXTERNO */

		begin
		select	nextval('material_sistema_externo_seq')
		into STRICT	material_sistema_externo_w.nr_sequencia
		;
		
		material_sistema_externo_w.CD_MATERIAL			:= cd_material_w;
		material_sistema_externo_w.CD_CODIGO			:= c01_w.cd_material;
		material_sistema_externo_w.IE_SISTEMA           := 'PHA';
		material_sistema_externo_w.DT_ATUALIZACAO       := clock_timestamp();
		material_sistema_externo_w.NM_USUARIO           := nm_usuario_p;
		material_sistema_externo_w.DT_ATUALIZACAO_NREC  := clock_timestamp();
		material_sistema_externo_w.NM_USUARIO_NREC      := nm_usuario_p;
		
		insert into material_sistema_externo values (material_sistema_externo_w.*);
		
		exception when others then
			ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
			CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
		end;
		
		/* Generate information in table MATERIAL_COD_BARRA */

		begin
		select	max(drug_ean)
		into STRICT	cd_barra_material_w
		from	pharmindex_form_medic a
		where	a.nr_seq_processo = nr_seq_processo_p
		and		a.package_id = c01_w.cd_material;
		exception when others then
			cd_barra_material_w	:= null;
		end;
		
		if (cd_barra_material_w IS NOT NULL AND cd_barra_material_w::text <> '') then
			begin
			
			begin
			material_cod_barra_w.CD_MATERIAL			:= cd_material_w;
			material_cod_barra_w.CD_BARRA_MATERIAL		:= cd_barra_material_w;
			material_cod_barra_w.DT_ATUALIZACAO			:= clock_timestamp();
			material_cod_barra_w.NM_USUARIO				:= nm_usuario_p;
			material_cod_barra_w.DT_ATUALIZACAO_NREC	:= clock_timestamp();
			material_cod_barra_w.NM_USUARIO_NREC		:= nm_usuario_p;
			
			insert into material_cod_barra values (material_cod_barra_w.*);
			
			exception when others then
				ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
				CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
			end;
			
			end;
		end if;
		
		/* Generate information in table MATERIAL_ESPEC_TECNICA */

		if (c01_w.ds_espec_tecnica IS NOT NULL AND c01_w.ds_espec_tecnica::text <> '') then
			begin
			
			begin
			select	nextval('material_espec_tecnica_seq')
			into STRICT	material_espec_tecnica_w.nr_sequencia
			;
			
			material_espec_tecnica_w.CD_MATERIAL			:= cd_material_w;
			material_espec_tecnica_w.DS_ESPEC_TECNICA		:= c01_w.ds_espec_tecnica;
			material_espec_tecnica_w.DT_ATUALIZACAO			:= clock_timestamp();
			material_espec_tecnica_w.NM_USUARIO				:= nm_usuario_p;
			material_espec_tecnica_w.DT_ATUALIZACAO_NREC	:= clock_timestamp();
			material_espec_tecnica_w.NM_USUARIO_NREC		:= nm_usuario_p;
			
			insert into material_espec_tecnica values (material_espec_tecnica_w.*);
			
			exception when others then
				ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
				CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
			end;
			
			end;
		end if;
		
		begin
		select	a.nr_sequencia
		into STRICT	nr_seq_medic_w
		from	pharmindex_medic a
		where	a.nr_seq_processo = nr_seq_processo_p
		and		a.drug_id = (
						SELECT	x.drug_id
						from	pharmindex_form_medic x
						where	x.nr_sequencia = c01_w.nr_seq_item_tab_origem);

		/* Generate information in table MATERIAL_ATC */

		open c03;
		loop
		fetch c03 into
			cd_atc_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			
			select	count(1)
			into STRICT	qt_existe_w
			from	MED_SUBSTANCIA_QUIMICA
			where	cd_substancia = cd_atc_w;
			
			if (qt_existe_w > 0) then
			
				select	nextval('material_atc_seq')
				into STRICT	material_atc_w.nr_sequencia
				;
				
				material_atc_w.CD_MATERIAL				:= cd_material_w;
				material_atc_w.CD_SUBSTANCIA			:= cd_atc_w;
				material_atc_w.DT_ATUALIZACAO			:= clock_timestamp();
				material_atc_w.NM_USUARIO				:= nm_usuario_p;
				material_atc_w.DT_ATUALIZACAO_NREC		:= clock_timestamp();
				material_atc_w.NM_USUARIO_NREC			:= nm_usuario_p;
				
				insert into material_atc values (material_atc_w.*);
				
			else
				CALL grava_sup_int_material_consist(c01_w.nr_sequencia,'ATC Code does not exists in TASY!');
			end if;
			
			end;
		end loop;
		close c03;
		
		/* Generate information in table MATERIAL_PRINC_ATIVO */

		ie_atualizado_w	:= 'N';
		open c04;
		loop
		fetch c04 into
			ds_substancia_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin
			
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_medic_ft_w
			from	medic_ficha_tecnica
			where	upper(ds_substancia) = upper(ds_substancia_w);
			
			if (nr_seq_medic_ft_w > 0) then
				if (ie_atualizado_w = 'N') then
					begin
				
					update	material
					set		NR_SEQ_FICHA_TECNICA = nr_seq_medic_ft_w
					where	cd_material = cd_material_w;
					
					ie_atualizado_w	:= 'S';
				
					end;
				else
					begin
					
					select	nextval('material_princ_ativo_seq')
					into STRICT	material_princ_ativo_w.nr_sequencia
					;
					
					material_princ_ativo_w.CD_MATERIAL					:= cd_material_w;
					material_princ_ativo_w.NR_SEQ_MEDIC_FICHA_TECNICA	:= nr_seq_medic_ft_w;
					material_princ_ativo_w.DT_ATUALIZACAO				:= clock_timestamp();
					material_princ_ativo_w.NM_USUARIO					:= nm_usuario_p;
					material_princ_ativo_w.DT_ATUALIZACAO_NREC			:= clock_timestamp();
					material_princ_ativo_w.NM_USUARIO_NREC				:= nm_usuario_p;
					
					insert into material_princ_ativo values (material_princ_ativo_w.*);
				
					end;
				end if;
			else
				CALL grava_sup_int_material_consist(c01_w.nr_sequencia,'Substance (active ingredient) does not exists in TASY!');
			end if;
			
			end;
		end loop;
		close c04;
		
		exception when others then
			ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
			CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
		end;
		
		end;
	end if;
	
	/* Record a history in the material record */

	/* This part of the routine must be the last one */

	if (ie_error_w <> 'S') then
		begin
		
		begin
		select	nextval('material_historico_seq')
		into STRICT	material_historico_w.nr_sequencia
		;
		
		material_historico_w.CD_MATERIAL				:= cd_material_w;
		material_historico_w.IE_TIPO					:= 'S';
		material_historico_w.CD_ESTABELECIMENTO			:= c01_w.cd_estabelecimento;
		material_historico_w.DS_TITULO					:= 'Material imported';
		material_historico_w.DS_HISTORICO				:= 'This material was imported from PHARMINDEX catalog';
		material_historico_w.DS_HISTORICO_CURTO			:= 'This material was imported from PHARMINDEX catalog';
		material_historico_w.DT_ATUALIZACAO				:= clock_timestamp();
		material_historico_w.NM_USUARIO					:= nm_usuario_p;
		material_historico_w.DT_ATUALIZACAO_NREC		:= clock_timestamp();
		material_historico_w.NM_USUARIO_NREC			:= nm_usuario_p;
		
		insert into material_historico values (material_historico_w.*);
		
		/* Confirm integration */

		update	sup_int_material
		set		dt_confirma_integracao = clock_timestamp()
		where	nr_sequencia = c01_w.nr_sequencia;
		
		/* Remove from "to import" items */

		update	pharmindex_form_medic
		set		ie_importar = 'N'
		where	nr_seq_processo = nr_seq_processo_p
		and		package_id = c01_w.cd_material;
				
		exception when others then
			ds_error_w := substr(dbms_utility.format_error_backtrace || ';ERROR=' || sqlerrm,1,255);
			CALL grava_sup_int_material_consist(c01_w.nr_sequencia,ds_error_w);
		end;	
		
		end;
	end if;
	
	qt_commit_w	:= qt_commit_w + 1;
	if (qt_commit_w > 100) then
		commit;
		qt_commit_w	:= 0;
	end if;	
	
	end;
end loop;
close c01;

commit;

/* Enable the Triggers */

for i in lista_trigger_w.first..lista_trigger_w.last loop
	if lista_trigger_w.exists(i) then
		CALL Exec_sql_Dinamico(nm_usuario_p, ' alter trigger ' || lista_trigger_w(i) || ' enable ');
	end if;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pharmindex_pck.generate_tasy_medic ( nr_seq_processo_p bigint, nm_usuario_p text) FROM PUBLIC;
