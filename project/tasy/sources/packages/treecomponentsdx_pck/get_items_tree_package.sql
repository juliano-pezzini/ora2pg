-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION treecomponentsdx_pck.get_items_tree ( nr_sequencia_p objeto_schematic.nr_sequencia%TYPE, nr_seq_visao_dbpanel_p objeto_schematic.nr_seq_visao%TYPE DEFAULT null, nm_tabela_dbpanel_p objeto_schematic.nm_tabela%TYPE DEFAULT null) RETURNS SETOF T_ITEM_ROW_DATA AS $body$
DECLARE


t_item_row_w        t_item_row;
is_invalid_w        boolean     := true;
count_rows_w        bigint      := 0;
nr_sequencia_w      objeto_schematic.nr_sequencia%TYPE      := 0;
nr_seq_visao_dbpanel_w  objeto_schematic.nr_seq_visao%TYPE  := 0;
nm_tabela_dbpanel_w     objeto_schematic.nm_tabela%TYPE     := null;

  r_c01 RECORD;
  r_c02 RECORD;
  r_c03 RECORD;

BEGIN

while is_invalid_w
loop
    if (nr_sequencia_p = 0) then
        is_invalid_w := false;
        return;
    end if;
    if (coalesce(nr_sequencia_w::text, '') = '' and coalesce(nr_seq_visao_dbpanel_w::text, '') = '' and coalesce(nm_tabela_dbpanel_w::text, '') = '') then
        is_invalid_w := false;
        return;
    end if;
    if (nr_sequencia_w = 0) then
        nr_sequencia_w          := nr_sequencia_p;
        nr_seq_visao_dbpanel_w  := nr_seq_visao_dbpanel_p;
        nm_tabela_dbpanel_w     := nm_tabela_dbpanel_p;
    else
        nr_sequencia_w          := t_item_row_w.cd;
        nr_seq_visao_dbpanel_w  := t_item_row_w.nr_seq_visao_dbpanel;
        nm_tabela_dbpanel_w     := t_item_row_w.nm_tabela_dbpanel;
    end if;

    select
        count(*)
    into STRICT
        count_rows_w
    from table(treecomponentsdx_pck.return_data_rows(nr_sequencia_w, nr_seq_visao_dbpanel_w, nm_tabela_dbpanel_w));

    if (count_rows_w = 1) then
        t_item_row_w := treeComponentsDX_pck.return_data(nr_sequencia_w, nr_seq_visao_dbpanel_w, nm_tabela_dbpanel_w);
        if (t_item_row_w.nm_atributo IS NOT NULL AND t_item_row_w.nm_atributo::text <> '') then
            if (t_item_row_w.label_atributo IS NOT NULL AND t_item_row_w.label_atributo::text <> '') then /* TASK 870 */
                t_item_row_w.ds := t_item_row_w.label_atributo || ' (' || t_item_row_w.nm_atributo || ')';
            end if;
            RETURN NEXT t_item_row_w;
        elsif (t_item_row_w.IE_TIPO_OBJETO not in ('SCH', 'MR', 'R')) then
            RETURN NEXT t_item_row_w;
            is_invalid_w := false;
            return;
        end if;
    elsif (count_rows_w > 1) then
        for r_c01 in (SELECT * from table(treecomponentsdx_pck.return_data_rows(nr_sequencia_w, nr_seq_visao_dbpanel_w, nm_tabela_dbpanel_w)))
        loop
            begin
                t_item_row_w := r_c01;
                if (t_item_row_w.nm_atributo IS NOT NULL AND t_item_row_w.nm_atributo::text <> '') then
                    if (t_item_row_w.label_atributo IS NOT NULL AND t_item_row_w.label_atributo::text <> '') then /* TASK 870 */
                        t_item_row_w.ds := t_item_row_w.label_atributo || ' (' || t_item_row_w.nm_atributo || ')';
                    end if;
                    RETURN NEXT t_item_row_w;
                elsif (t_item_row_w.IE_TIPO_OBJETO not in ('SCH', 'MR', 'R')) then
                    RETURN NEXT t_item_row_w;
                else
                    for r_c02 in (SELECT * from table(treecomponentsdx_pck.return_data_rows(t_item_row_w.cd, t_item_row_w.nr_seq_visao_dbpanel, t_item_row_w.nm_tabela_dbpanel)))
                    loop
                        begin
                            t_item_row_w := r_c02;
                            if (t_item_row_w.IE_TIPO_OBJETO not in ('SCH', 'MR', 'R')) then
                                RETURN NEXT t_item_row_w;
                            else
                                for r_c03 in (SELECT * from table(treecomponentsdx_pck.return_data_rows(t_item_row_w.cd, t_item_row_w.nr_seq_visao_dbpanel, t_item_row_w.nm_tabela_dbpanel)))
                                loop
                                    begin
                                        t_item_row_w := r_c03;
                                        if (t_item_row_w.IE_TIPO_OBJETO not in ('SCH', 'MR', 'R')) then
                                            RETURN NEXT t_item_row_w;
                                        end if;
                                    end;
                                end loop;
                            end if;
                        end;
                    end loop;
                end if;
            end;
        end loop;
        is_invalid_w := false;
        return;
    else
        is_invalid_w := false;
        return;
    end if;

end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION treecomponentsdx_pck.get_items_tree ( nr_sequencia_p objeto_schematic.nr_sequencia%TYPE, nr_seq_visao_dbpanel_p objeto_schematic.nr_seq_visao%TYPE DEFAULT null, nm_tabela_dbpanel_p objeto_schematic.nm_tabela%TYPE DEFAULT null) FROM PUBLIC;
