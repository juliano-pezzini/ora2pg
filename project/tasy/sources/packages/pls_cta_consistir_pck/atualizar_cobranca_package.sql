-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_consistir_pck.atualizar_cobranca ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, ie_tipo_liberacao_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* ie_tipo_liberacao_p
	F - Fechamento do protocolo
	C - Fechamento da conta
	L - Libera__o do item
*/
					
type t_protocolo is table of bigint index by integer;
vetor_protocolo_w		t_protocolo;
protocolo_anterior_w		pls_protocolo_conta.nr_sequencia%type;
nr_indice_vetor_w		integer;
qt_reg_vetor_w			integer;
ie_status_prot_w		pls_protocolo_conta.ie_status%type;
ie_opcao_w			varchar(10);
qt_reg_w			integer;
ie_geracao_pos_estabelecido_w	pls_parametros.ie_geracao_pos_estabelecido%type;
qt_existe_fat_w			integer;
qt_analise_w			integer	:= 0;
C01 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_conta_proc
	where	nr_seq_conta = nr_seq_conta_pc;
	
C02 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_conta_mat
	where	nr_seq_conta = nr_seq_conta_pc;	
				
BEGIN

select	ie_geracao_pos_estabelecido
into STRICT	ie_geracao_pos_estabelecido_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

qt_reg_vetor_w := 0;
for r_c_contas_w in current_setting('pls_cta_consistir_pck.c_contas')::CURSOR((nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop
	
	--Para gerar novamente os registros de coparticipa__o, precisa excluir os j_ existentes.

	CALL pls_deletar_coparticipacao(r_c_contas_w.nr_seq_conta,null,'S', 'N', null, null, nm_usuario_p,cd_estabelecimento_p);
	commit;
	
	-- se for libera__o, atualiza os itens

	if (ie_tipo_liberacao_p = 'L') then
	
		for r_C01_w in C01(r_c_contas_w.nr_seq_conta) loop

			-- faturamento

			CALL pls_atualiza_conta_proc_fat(	r_C01_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p, 'N');
			commit;
		end loop;
		
		-- tratamento para materiais

		for r_C02_w in C02(r_c_contas_w.nr_seq_conta) loop

			-- faturamento

			CALL pls_atualiza_conta_mat_fat(	r_C02_w.nr_sequencia, nm_usuario_p, cd_estabelecimento_p, 'N');
			commit;
		end loop;
	
		--Atualiza a coparticipa__o da conta

		CALL pls_gerar_coparticipacao_conta(r_c_contas_w.nr_seq_conta,null,nm_usuario_p);
		
		--Atualiza o status da coparticipa__o

		CALL pls_atualiza_status_copartic(r_c_contas_w.nr_seq_conta, 'FC', null, nm_usuario_p, cd_estabelecimento_p);
		
		--Se a gera__o do p_s estabelecido por para consist_ncia da conta, ent_o _ gerada nas procedures pls_atualiza_conta_mat_fat e pls_atualiza_conta_proc_fat

		if (ie_geracao_pos_estabelecido_w != 'C') then
			ie_opcao_w	:= '';
			
			select	count(1)
			into STRICT	qt_reg_w
			from	pls_conta_pos_estabelecido
			where	nr_seq_conta	= r_c_contas_w.nr_seq_conta  LIMIT 1;
			
			if (qt_reg_w	> 0) then
				ie_opcao_w	:= 'P';
			end if;
			
			--Atualiza os valores adicionais do P_s-estabelecido

			if (ie_opcao_w IS NOT NULL AND ie_opcao_w::text <> '') then
				CALL pls_gerar_contab_val_adic(r_c_contas_w.nr_seq_conta,null,null,null,null,null,null,ie_opcao_w,'N',nm_usuario_p);
			end if;
		end if;
		
		--Atualiza o status para faturar a conta, caso todos os itens estejam liberados e a conta ainda n_o esteja com status para faturar

		select 	count(1)
		into STRICT	qt_existe_fat_w
		from	pls_conta_pos_estabelecido	a
		where	a.nr_seq_conta		= r_c_contas_w.nr_seq_conta
		and	a.ie_status_faturamento not in ('L','C','N')
		and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''));
		
		select 	count(1)
		into STRICT	qt_analise_w
		from	pls_analise_conta
		where	ie_status	not in ('T','C')
		and	nr_sequencia 	in (	SELECT 	nr_seq_analise
						from	pls_conta_pos_estabelecido	a
						where	a.nr_seq_conta		= r_c_contas_w.nr_seq_conta		
						and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = '')));	
		if (qt_existe_fat_w = 0) then
			select 	count(1)
			into STRICT	qt_existe_fat_w
			from	pls_conta_pos_estabelecido	a
			where	a.nr_seq_conta		= r_c_contas_w.nr_seq_conta		
			and	a.ie_status_faturamento = 'L'
			and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''));
			
			if (qt_existe_fat_w > 0) and (qt_analise_w = 0)then
				update	pls_conta
				set	ie_status_fat	= 'L'
				where	nr_sequencia	= r_c_contas_w.nr_seq_conta
				and	ie_status_fat	<> 'L';
			end if;
		end if;
	end if;
		
end loop;


commit;

end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_consistir_pck.atualizar_cobranca ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, ie_tipo_liberacao_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
