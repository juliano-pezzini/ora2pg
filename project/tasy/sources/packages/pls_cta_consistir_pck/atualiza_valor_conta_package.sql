-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_consistir_pck.atualiza_valor_conta ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

			
vl_procedimentos_w		pls_conta_proc.vl_liberado%type := 0;
vl_diarias_w			pls_conta_proc.vl_liberado%type	:= 0;
vl_pacotes_w			pls_conta_proc.vl_liberado%type	:= 0;
vl_taxas_w			pls_conta_proc.vl_liberado%type	:= 0;
vl_materiais_w			pls_conta_mat.vl_liberado%type	:= 0;
vl_medicamentos_w		pls_conta_mat.vl_liberado%type	:= 0;
vl_gases_w			pls_conta_mat.vl_liberado%type	:= 0;
vl_opm_w			pls_conta_mat.vl_liberado%type	:= 0;
vl_cobrado_w			double precision	:= 0;
vl_total_w			double precision	:= 0;
vl_glosa_w			double precision	:= 0;
vl_saldo_w			double precision	:= 0;
vl_proc_apres_w			pls_conta_proc.vl_procedimento_imp%type	:= 0;
vl_taxas_apres_w		pls_conta_proc.vl_procedimento_imp%type	:= 0;
vl_diarias_apres_w		pls_conta_proc.vl_procedimento_imp%type	:= 0;
vl_pacotes_apres_w		pls_conta_proc.vl_procedimento_imp%type	:= 0;
vl_gases_apres_w		pls_conta_mat.vl_material_imp%type	:= 0;
vl_medic_apres_w		pls_conta_mat.vl_material_imp%type	:= 0;
vl_mat_apres_w			pls_conta_mat.vl_material_imp%type	:= 0;
vl_opm_apres_w			pls_conta_mat.vl_material_imp%type	:= 0;
vl_glosa_proc_w			pls_conta_proc.vl_glosa%type	:= 0;
vl_glosa_taxa_w			pls_conta_proc.vl_glosa%type	:= 0;
vl_glosa_diaria_w		pls_conta_proc.vl_glosa%type	:= 0;
vl_glosa_pacote_w		pls_conta_proc.vl_glosa%type	:= 0;
vl_glosa_medic_w		pls_conta_mat.vl_glosa%type	:= 0;
vl_glosa_gases_w		pls_conta_mat.vl_glosa%type	:= 0;
vl_glosa_mat_w			pls_conta_mat.vl_glosa%type	:= 0;
vl_glosa_opm_w			pls_conta_mat.vl_glosa%type	:= 0;
vl_saldo_proc_w			pls_conta_proc.vl_saldo%type	:= 0;
vl_saldo_taxa_w			pls_conta_proc.vl_saldo%type	:= 0;
vl_saldo_diaria_w		pls_conta_proc.vl_saldo%type	:= 0;
vl_saldo_pacote_w		pls_conta_proc.vl_saldo%type	:= 0;
vl_saldo_medic_w		pls_conta_mat.vl_saldo%type	:= 0;
vl_saldo_gases_w		pls_conta_mat.vl_saldo%type	:= 0;
vl_saldo_mat_w			pls_conta_mat.vl_saldo%type	:= 0;
vl_saldo_opm_w			pls_conta_mat.vl_saldo%type	:= 0;
vl_beneficiario_w		pls_conta_proc.vl_beneficiario%type	:= 0;
vl_beneficiario_temp_w		pls_conta_proc.vl_beneficiario%type	:= 0;

vl_adic_materiais_w		double precision;
vl_adic_co_w			double precision;
vl_adic_materiais_ww		double precision;
vl_adic_procedimento_w		double precision;
vl_co_ptu_w			double precision	:= 0;
vl_procedimento_ptu_w		double precision	:= 0;
vl_material_ptu_w		double precision	:= 0;
vl_material_ptu_ww		double precision	:= 0;
vl_liberado_ptu_w		double precision	:= 0;
dados_atualizacao_w		table_atualiza_valores_conta;
nr_indice_w			integer;

C01 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		ie_tipo_despesa_pc	pls_conta_proc.ie_tipo_despesa%type) FOR
SELECT	sum(vl_glosa) vl_glosa,
	sum(vl_saldo) vl_saldo,
	sum(vl_liberado) vl_liberado,
	sum(vl_procedimento_imp) vl_procedimento_imp
from	pls_conta_proc_v
where	nr_seq_conta	= nr_seq_conta_pc
and	ie_tipo_despesa	= ie_tipo_despesa_pc
and	ie_status <> 'D';

C02 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		ie_tipo_despesa_pc	pls_conta_mat.ie_tipo_despesa%type) FOR
SELECT	sum(vl_glosa) vl_glosa,
	sum(vl_saldo) vl_saldo,
	sum(vl_liberado) vl_liberado,
	sum(vl_material_imp) vl_material_imp
from	pls_conta_mat_v
where	nr_seq_conta	= nr_seq_conta_pc
and	ie_tipo_despesa	= ie_tipo_despesa_pc
and	ie_status <> 'D';

--Busca dados da ou das contas com base nos par_metros de entrada.				

C03 CURSOR( 	nr_seq_lote_pc			pls_lote_protocolo_conta.nr_sequencia%type,
		nr_seq_protocolo_pc		pls_protocolo_conta.nr_sequencia%type,
		nr_seq_lote_processo_pc		pls_cta_lote_processo.nr_sequencia%type,
		nr_seq_conta_pc			pls_conta.nr_sequencia%type) FOR
	
SELECT	nr_sequencia
from	pls_conta_v a
where	a.nr_seq_lote_conta = nr_seq_lote_pc
and     a.ie_status 	<> 'C'


union all

SELECT	nr_sequencia
from	pls_conta_v a
where	a.nr_seq_protocolo = nr_seq_protocolo_pc
and     a.ie_status 	<> 'C'


union all

select	nr_sequencia
from	pls_conta_v a
where	a.nr_sequencia = nr_seq_conta_pc
and     a.ie_status 	<> 'C'


union all

select	nr_sequencia
from	pls_conta_v a
where   a.ie_status 	<> 'C'
and	exists (select	1
		from	pls_cta_lote_proc_conta p
		where	p.nr_seq_lote_processo = nr_seq_lote_processo_pc
		and	p.nr_seq_conta = a.nr_sequencia);

BEGIN

nr_indice_w := 0;
dados_atualizacao_w := pls_cta_consistir_pck.limpa_registro_atualizacao(dados_atualizacao_w);

for r_C03_w in C03(nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop
	--Obter valores do Tipo desdepsa procedimentos

	for r_C01_w in C01(r_C03_w.nr_sequencia, 1) loop

		vl_procedimentos_w 	:= r_C01_w.vl_liberado;
		vl_proc_apres_w		:= r_C01_w.vl_procedimento_imp;			
		vl_glosa_proc_w		:= r_C01_w.vl_glosa;
		vl_saldo_proc_w		:= r_C01_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa Taxas

	for r_C01_w in C01(r_C03_w.nr_sequencia, 2) loop

		vl_taxas_w		:= r_C01_w.vl_liberado;
		vl_taxas_apres_w	:= r_C01_w.vl_procedimento_imp;
		vl_glosa_taxa_w		:= r_C01_w.vl_glosa;
		vl_saldo_taxa_w		:= r_C01_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa Diarias

		for r_C01_w in C01(r_C03_w.nr_sequencia, 3) loop

		vl_diarias_w	   	:= r_C01_w.vl_liberado;
		vl_diarias_apres_w 	:= r_C01_w.vl_procedimento_imp;
		vl_glosa_diaria_w  	:= r_C01_w.vl_glosa;
		vl_saldo_diaria_w  	:= r_C01_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa Pacotes

	for r_C01_w in C01(r_C03_w.nr_sequencia, 4) loop

		vl_pacotes_w	   	:= r_C01_w.vl_liberado;
		vl_pacotes_apres_w 	:= r_C01_w.vl_procedimento_imp;
		vl_glosa_pacote_w  	:= r_C01_w.vl_glosa;
		vl_saldo_pacote_w  	:= r_C01_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa Gases medicinais

	for r_C02_w in C02(r_C03_w.nr_sequencia, 1) loop

		vl_gases_w		:= r_C02_w.vl_liberado;
		vl_gases_apres_w	:= r_C02_w.vl_material_imp;
		vl_glosa_gases_w	:= r_C02_w.vl_glosa;
		vl_saldo_gases_w	:= r_C02_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa medicamentos

	for r_C02_w in C02(r_C03_w.nr_sequencia, 2) loop

		vl_medicamentos_w 	:= r_C02_w.vl_liberado;
		vl_medic_apres_w	:= r_C02_w.vl_material_imp;
		vl_glosa_medic_w	:= r_C02_w.vl_glosa;
		vl_saldo_medic_w	:= r_C02_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa Materiais

	for r_C02_w in C02(r_C03_w.nr_sequencia, 3) loop

		vl_materiais_w		:= r_C02_w.vl_liberado;
		vl_mat_apres_w		:= r_C02_w.vl_material_imp;
		vl_glosa_mat_w		:= r_C02_w.vl_glosa;
		vl_saldo_mat_w		:= r_C02_w.vl_saldo;
	end loop;

	--Obter valores do Tipo desdepsa OPM

	for r_C02_w in C02(r_C03_w.nr_sequencia, 7) loop

		vl_opm_w		:= r_C02_w.vl_liberado;
		vl_opm_apres_w		:= r_C02_w.vl_material_imp;
		vl_glosa_opm_w		:= r_C02_w.vl_glosa;
		vl_saldo_opm_w		:= r_C02_w.vl_saldo;
	end loop;

	--Soma de valores obtidos nos cursores de materiais e procedimentos, para posterior atualiza__o destes campos na conta.

	vl_cobrado_w	:=	vl_proc_apres_w	+ vl_taxas_apres_w + vl_diarias_apres_w +
				vl_pacotes_apres_w +vl_gases_apres_w + vl_medic_apres_w +
				vl_mat_apres_w 	+ vl_opm_apres_w;

	vl_glosa_w	:=	vl_glosa_proc_w + vl_glosa_taxa_w + vl_glosa_diaria_w +
				vl_glosa_pacote_w + vl_glosa_gases_w + vl_glosa_medic_w +
				vl_glosa_mat_w 	+ vl_glosa_opm_w;

	vl_saldo_w	:=	vl_saldo_proc_w + vl_saldo_taxa_w + vl_saldo_diaria_w +
				vl_saldo_pacote_w + vl_saldo_gases_w + vl_saldo_medic_w +
				vl_saldo_mat_w 	+ vl_saldo_opm_w;
				
	select	coalesce(sum(vl_adic_procedimento),0),
		coalesce(sum(vl_adic_co),0),
		coalesce(sum(vl_adic_materiais),0),
		coalesce(sum(vl_co_ptu),0),
		coalesce(sum(vl_procedimento_ptu),0),
		coalesce(sum(vl_material_ptu),0),
		coalesce(sum(vl_procedimento_imp),0) vl_procedimento_imp
	into STRICT	vl_adic_procedimento_w,
		vl_adic_co_w,
		vl_adic_materiais_w,
		vl_co_ptu_w,
		vl_procedimento_ptu_w,
		vl_material_ptu_w,
		vl_beneficiario_temp_w
	from	pls_conta_proc
	where	nr_seq_conta	= r_C03_w.nr_sequencia
	and	ie_status <> 'D';

	vl_beneficiario_w := vl_beneficiario_w + vl_beneficiario_temp_w;

	select	coalesce(sum(vl_adic_material),0),
		coalesce(sum(vl_material_ptu),0),
		coalesce(sum(vl_material_imp),0) vl_material_imp
	into STRICT	vl_adic_materiais_ww,
		vl_material_ptu_ww,
		vl_beneficiario_temp_w
	from	pls_conta_mat
	where	nr_seq_conta	= r_C03_w.nr_sequencia
	and	ie_status <> 'D';

	vl_beneficiario_w := vl_beneficiario_w + vl_beneficiario_temp_w;

	--Se a soma de valores do campo vl_beneficiario, de materiais e procedimentos for 0,

	if (vl_beneficiario_w = 0) then

		select	coalesce(sum(vl_lib_original),0)
		into STRICT	vl_total_w
		from	pls_conta_medica_resumo
		where	nr_seq_conta = r_C03_w.nr_sequencia
		and	((ie_tipo_item <> 'I') or (coalesce(ie_tipo_item::text, '') = ''))
		and	ie_situacao != 'I';

		if (vl_total_w = 0) then
			vl_total_w	:=	vl_procedimentos_w + vl_taxas_w + vl_diarias_w +
						vl_pacotes_w 	+ vl_gases_w + vl_medicamentos_w +
						vl_materiais_w 	+ vl_opm_w;
		end if;

		vl_beneficiario_w	:= vl_total_w;
	end if;
	
	vl_adic_procedimento_w	:= (vl_adic_procedimento_w + vl_adic_materiais_ww);
	vl_liberado_ptu_w	:= vl_material_ptu_ww + vl_co_ptu_w + vl_procedimento_ptu_w + vl_material_ptu_w;
	
	--manda o valor dos campos para a estrutura utilizada para atualiza__o dos valores

	dados_atualizacao_w.vl_procedimentos(nr_indice_w)   	:= vl_procedimentos_w;	
	dados_atualizacao_w.vl_diarias(nr_indice_w)		:= vl_diarias_w;		
	dados_atualizacao_w.vl_pacotes(nr_indice_w)		:= vl_pacotes_w;		
	dados_atualizacao_w.vl_taxas(nr_indice_w)		:= vl_taxas_w;		
	dados_atualizacao_w.vl_materiais(nr_indice_w)		:= vl_materiais_w;		
	dados_atualizacao_w.vl_medicamentos(nr_indice_w)	:= vl_medicamentos_w;	
	dados_atualizacao_w.vl_gases(nr_indice_w)		:= vl_gases_w;		
	dados_atualizacao_w.vl_opm(nr_indice_w)			:= vl_opm_w;			
	dados_atualizacao_w.vl_cobrado(nr_indice_w)		:= vl_cobrado_w;			
	dados_atualizacao_w.vl_total(nr_indice_w)		:= vl_total_w;		
	dados_atualizacao_w.vl_glosa(nr_indice_w)		:= vl_glosa_w;		
	dados_atualizacao_w.vl_saldo(nr_indice_w)		:= vl_saldo_w;		
	dados_atualizacao_w.vl_total_beneficiario(nr_indice_w)	:= vl_beneficiario_w;	
	dados_atualizacao_w.vl_adic_procedimento(nr_indice_w) 	:= vl_adic_procedimento_w;	
	dados_atualizacao_w.vl_adic_co(nr_indice_w)		:= vl_adic_co_w;		
	dados_atualizacao_w.vl_adic_materiais(nr_indice_w)	:= vl_adic_materiais_w;	
	dados_atualizacao_w.vl_liberado_ptu(nr_indice_w)	:= vl_liberado_ptu_w;		
	dados_atualizacao_w.nr_sequencia(nr_indice_w)	 	:= r_C03_w.nr_sequencia;	

	--Efetua o update(utiliza forall).

	if (nr_indice_w = pls_util_pck.qt_registro_transacao_w) then
		CALL CALL pls_cta_consistir_pck.atualiza_registros(dados_atualizacao_w);
		nr_indice_w := 0;
		dados_atualizacao_w := pls_cta_consistir_pck.limpa_registro_atualizacao(dados_atualizacao_w);
	else
		nr_indice_w := nr_indice_w + 1;
	end if;
end loop;

--Ap_s terminar o loop por todas as contas, podem sobrar registros nas variaveis tabela

--ent_o essa chamada garante que todos os registros sejam atualizados

CALL CALL pls_cta_consistir_pck.atualiza_registros(dados_atualizacao_w);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_consistir_pck.atualiza_valor_conta ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
