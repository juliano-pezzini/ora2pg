-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


-- gera a valoriza__o dos itens



CREATE OR REPLACE PROCEDURE pls_cta_consistir_pck.gera_valorizacao ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_evento_p text default 'CC') AS $body$
DECLARE


dados_conta_w			pls_cta_valorizacao_pck.dados_conta;			
dados_prestador_exec_w		pls_cta_valorizacao_pck.dados_prestador_exec;
dados_prestador_prot_w		pls_cta_valorizacao_pck.dados_prestador_prot;
dados_prestador_solic_w		pls_cta_valorizacao_pck.dados_prestador_solic;
qt_contador_w			integer;
tb_conta_w			dbms_sql.number_table;
nr_seq_log_exec_w		pls_cta_log_exec.nr_sequencia%type;
nr_seq_conta_w			dbms_sql.number_table;

C01 CURSOR(	nr_seq_lote_pc		pls_lote_protocolo_conta.nr_sequencia%type,
		nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type,
		nr_seq_lote_processo_pc	pls_cta_lote_processo.nr_sequencia%type,
		nr_seq_conta_pc		pls_conta.nr_sequencia%type) FOR
	SELECT	a.cd_guia_referencia,
		min(a.nr_sequencia) nr_seq_conta
	from	pls_conta_v a
	where	a.nr_seq_lote_conta = nr_seq_lote_pc
	and	a.ie_status <> 'C'
	group by a.cd_guia_referencia
	
union all

	SELECT	a.cd_guia_referencia,
		min(a.nr_sequencia) nr_seq_conta
	from	pls_conta_v a
	where	a.nr_seq_protocolo = nr_seq_protocolo_pc
	and	a.ie_status <> 'C'
	group by a.cd_guia_referencia
	
union all

	select	a.cd_guia_referencia,
		min(a.nr_sequencia) nr_seq_conta
	from	pls_conta_v a
	where	a.nr_sequencia = nr_seq_conta_pc
	and	a.ie_status <> 'C'
	group by a.cd_guia_referencia
	
union all

	select	a.cd_guia_referencia,
		min(a.nr_sequencia) nr_seq_conta
	from	pls_conta_v a
	where	a.ie_status <> 'C'
	and	exists (select	1
			from	pls_cta_lote_proc_conta p
			where	p.nr_seq_lote_processo = nr_seq_lote_processo_pc
			and	p.nr_seq_conta = a.nr_sequencia)
	group by a.cd_guia_referencia;

BEGIN

CALL pls_grava_log_execucao_temp('In_cio recria__o views', 'valorizacao', nm_usuario_p);
CALL pls_cta_consistir_pck.gera_views_valorizacao();
CALL pls_grava_log_execucao_temp('Fim recria__o views', 'valorizacao', nm_usuario_p);

-- via de acesso

-- pegar o cd_guia_referencia da view e buscar a menor conta n_o cancelada

-- faz todo o trabalho com base na guia (atendimento), por isso que _ feito o select desta forma


-- aqui _ feito o trabalho para zerar os dados dos itens

qt_contador_w := 0;
CALL pls_grava_log_execucao_temp('In_cio limpeza regras de campos', 'valorizacao', nm_usuario_p);
open current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR((	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p);
loop
	fetch current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR( bulk collect into tb_conta_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_conta_w.count = 0;

	forall i in tb_conta_w.first..tb_conta_w.last
		update	pls_conta_proc
		set	tx_medico		 = NULL,
			tx_custo_operacional	 = NULL,
			tx_material		 = NULL,
			nr_seq_regra_qtde_exec	 = NULL,
			ie_regra_qtde_execucao	 = NULL,
			nr_seq_regra_tx_proc	 = NULL,
			nr_seq_proc_ref		 = NULL,
			nr_seq_rp_combinada	 = NULL,
			tx_item			= CASE WHEN ie_tx_manual='S' THEN tx_item  ELSE CASE WHEN ie_via_acesso='M' THEN 50 WHEN ie_via_acesso='D' THEN 70  ELSE 100 END  END 
		where	nr_seq_conta		= tb_conta_w(i);
	commit;
		--tratamento inclu_do para que a desativa__o das triggers n_o cause impacto no processo

	forall i in tb_conta_w.first..tb_conta_w.last
		update	pls_conta_mat
		set	vl_material		= vl_material
		where	nr_seq_conta		= tb_conta_w(i);
	commit;

end loop;
close current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR(;
CALL pls_grava_log_execucao_temp('Fim limpeza regras de campos', 'valorizacao', nm_usuario_p);

CALL pls_grava_log_execucao_temp('In_cio quantidade execu__o', 'valorizacao', nm_usuario_p);
				
	for r_contas_w in current_setting('pls_cta_consistir_pck.c_contas')::CURSOR((	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop
		--Abrir os lan_amentos dos procedimentos conforme as regras por quantidade de execu__o 

		CALL pls_abrir_proc_qtde_proc_valor(	r_contas_w.nr_seq_conta, null, nm_usuario_p,
						cd_estabelecimento_p);
		commit;
	end loop;

CALL pls_grava_log_execucao_temp('Fim quantidade execu__o', 'valorizacao', nm_usuario_p);

CALL pls_grava_log_execucao_temp('In_cio via de acesso', 'valorizacao', nm_usuario_p);
-- tem que ser executado depois da valoriza__o				

CALL pls_util_cta_pck.pls_gerencia_via_acesso( 	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
						nr_seq_conta_p, null,null, 
						null,nm_usuario_p, cd_estabelecimento_p );	
commit;
		
CALL pls_grava_log_execucao_temp('Fim via de acesso', 'valorizacao', nm_usuario_p);

--tratamento inclu_do para que as triggers n_o seja mais executadas devido ao fato dos registros terem sido atualizados acima

pls_util_pck.get_ie_executar_redundancia_w := 'S';

CALL pls_grava_log_execucao_temp('In_cio valoriza__o diferenciada', 'valorizacao', nm_usuario_p);
--OS 643040 Ir_ gerar a regra de pagamento diferenciado para os itens da conta

CALL pls_cta_gerar_val_dif(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
			nr_seq_conta_p,null, cd_estabelecimento_p,
			nm_usuario_p);
			
CALL pls_grava_log_execucao_temp('Fim valoriza__o diferenciada', 'valorizacao', nm_usuario_p);

CALL pls_grava_log_execucao_temp('In_cio processamento de autogerado', 'valorizacao', nm_usuario_p);
--Aplica o autogerado sobre os procedimentos, abri novamente o for, pelo fato do autogerado poder ser aplicado sobre todo o lote economizando processamento	 

CALL pls_gerencia_autogerado_pck.pls_define_se_autogerado(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
								nr_seq_conta_p,	nm_usuario_p, cd_estabelecimento_p);
commit;
CALL pls_grava_log_execucao_temp('Fim processamento de autogerado', 'valorizacao', nm_usuario_p);
CALL pls_grava_log_execucao_temp('In_cio atualiza__o tx interc_mbio', 'valorizacao', nm_usuario_p);
nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p, null, null, null, null, '12,', 'processo=12,ie_tipo_tx_p=P', nm_usuario_p, cd_estabelecimento_p, null, nr_seq_log_exec_w);
CALL pls_grava_log_execucao_temp('Fim atualiza__o tx interc_mbio', 'valorizacao', nm_usuario_p);
				
CALL exec_sql_dinamico(nm_usuario_p, 'truncate table pls_conta_temp');

open current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR((nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p);
loop
	fetch current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR( bulk collect into nr_seq_conta_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when nr_seq_conta_w.count = 0;
	
	forall i in nr_seq_conta_w.first..nr_seq_conta_w.last
		insert into pls_conta_temp(nr_seq_conta)
		values (nr_seq_conta_w(i));
	commit;		
end loop;
close current_setting('pls_cta_consistir_pck.c_contas_aux')::CURSOR(;

for r_contas_w in current_setting('pls_cta_consistir_pck.c_contas_temp')::loop CURSOR					
	pls_grava_log_execucao_temp('In_cio de c_lculo de valores conta ' || r_contas_w.nr_seq_conta, 'valorizacao', nm_usuario_p);
	CALL pls_recalcular_conta(r_contas_w.nr_seq_conta, nm_usuario_p, 'C', 'N','S', null, null);
	commit;
	CALL pls_grava_log_execucao_temp('Fim de c_lculo de valores conta ' || r_contas_w.nr_seq_conta, 'valorizacao', nm_usuario_p);

end loop;

for r_contas_w in current_setting('pls_cta_consistir_pck.c_contas_temp')::loop CURSOR					
	pls_grava_log_execucao_temp('In_cio da atualiza__o do valor de provis_o ' || r_contas_w.nr_seq_conta, 'valorizacao', nm_usuario_p);
	CALL pls_cta_consistir_pck.atualiza_vl_provisao(r_contas_w.nr_seq_conta, nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim da atualiza__o do valor de provis_o ' || r_contas_w.nr_seq_conta, 'valorizacao', nm_usuario_p);
end loop;

pls_util_pck.get_ie_executar_redundancia_w := null;

--gerar somente as ocorrencias combinadas cadastradas para o evento de valoriza__o

CALL pls_cta_consistir_pck.verifica_ocorrencia_comb_val(	nr_seq_lote_p, nr_seq_protocolo_p,nr_seq_lote_processo_p,
				nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p,
				 nm_usuario_p, cd_estabelecimento_p, ie_evento_p);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_consistir_pck.gera_valorizacao ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_evento_p text default 'CC') FROM PUBLIC;
