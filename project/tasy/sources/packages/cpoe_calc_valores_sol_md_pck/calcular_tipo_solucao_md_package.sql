-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE cpoe_calc_valores_sol_md_pck.calcular_tipo_solucao_md (ie_tipo_solucao_p text, ie_ref_calculo_p text, cd_intervalo_p text, qt_hora_fase_interv_p INOUT bigint, nr_etapas_p bigint, qt_volume_p bigint, qt_Gotas_p bigint, qt_tempo_aplicacao_p bigint, qt_Tempo_p bigint, nr_etapas_interv_p INOUT bigint, ds_hora_fase_p text, qt_dosagem_p bigint, qt_solucao_total_p bigint, ie_infusion_cal_p text, qt_hora_fase_val_sol_p INOUT text, qt_solucao_total_out_p INOUT bigint, qt_dosagem_out_p INOUT bigint, nr_etapas_val_sol_p INOUT bigint ) AS $body$
DECLARE


    nr_etapas_w           double precision;
    qt_tempo_aplicacao_w	double precision;
    EXEC_w                varchar(200);

BEGIN
    if (ie_tipo_solucao_p = 'C') then
      if (ie_ref_calculo_p = 'I') then
        if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
          qt_hora_fase_val_sol_p :=  trunc(qt_hora_fase_interv_p) || ':' || substr(numtodsinterval(qt_hora_fase_interv_p, 'HOUR'), 15,2);

          qt_solucao_total_out_p := nr_etapas_interv_p * qt_volume_p;

          qt_dosagem_out_p := Dividir_md(Dividir_md((Round( qt_solucao_total_out_p ) * qt_Gotas_p ) , qt_tempo_aplicacao_p ) , qt_Tempo_p);
        end if;

      elsif (ie_ref_calculo_p = 'NE') then
        if (nr_etapas_p IS NOT NULL AND nr_etapas_p::text <> '') then
          nr_etapas_val_sol_p := nr_etapas_p;

          qt_hora_fase_interv_p := dividir_md( qt_tempo_aplicacao_p, nr_etapas_p );

          qt_hora_fase_val_sol_p :=  trunc(qt_hora_fase_interv_p) || ':' || substr(numtodsinterval(qt_hora_fase_interv_p, 'HOUR'), 15,2);

          qt_solucao_total_out_p := nr_etapas_p * qt_volume_p;

          qt_dosagem_out_p := Dividir_md(Dividir_md((Round( qt_solucao_total_out_p) * qt_Gotas_p) , qt_tempo_aplicacao_p ) , qt_Tempo_p);
        end if;

      elsif (ie_ref_calculo_p = 'TE') then
        if	((ds_hora_fase_p IS NOT NULL AND ds_hora_fase_p::text <> '') or (ds_hora_fase_p <> '')) then
          qt_hora_fase_interv_p := dividir_sem_round_md(obter_minutos_hora_md(ds_hora_fase_p),60);
          nr_etapas_interv_p	:= dividir_md( qt_tempo_aplicacao_p, qt_hora_fase_interv_p );
          nr_etapas_val_sol_p := ceil(nr_etapas_interv_p);

          qt_solucao_total_out_p := nr_etapas_interv_p * qt_volume_p;

          qt_dosagem_out_p := Dividir_md(Dividir_md((Round( qt_solucao_total_out_p ) * qt_Gotas_p) , qt_tempo_aplicacao_p ) , qt_Tempo_p);

          qt_hora_fase_val_sol_p := ds_hora_fase_p;
        end if;

      elsif (ie_ref_calculo_p = 'VI') then
        if (qt_dosagem_p IS NOT NULL AND qt_dosagem_p::text <> '') then
          qt_dosagem_out_p			:= qt_dosagem_p;

          qt_solucao_total_out_p	:= qt_tempo_aplicacao_p * qt_dosagem_p;

          if (ie_infusion_cal_p = 'S') then
            qt_solucao_total_out_p	:= qt_volume_p;
          end if;

          begin
            EXEC_w := 'BEGIN CPOE_CALC_VALORES_SOL_MD_PCK.CALCULAR_ETAPAS_E_TFASE_MD(:1,:2,:3,:4,:5,:6,:7); END;';

            EXECUTE EXEC_w USING IN qt_solucao_total_out_p,
                                           IN qt_volume_p,
                                           IN qt_tempo_aplicacao_p,
                                           OUT nr_etapas_interv_p,
                                           OUT nr_etapas_val_sol_p,
                                           OUT qt_hora_fase_interv_p,
                                           OUT qt_hora_fase_val_sol_p;
          exception
              when others then
                nr_etapas_interv_p      := null;
                nr_etapas_val_sol_p    := null;
                qt_hora_fase_interv_p     := null;
                qt_hora_fase_val_sol_p := null;
          end;
        end if;

      elsif (ie_ref_calculo_p = 'VT') then
        if (qt_solucao_total_p IS NOT NULL AND qt_solucao_total_p::text <> '') then
          qt_solucao_total_out_p	:= qt_solucao_total_p;

          qt_dosagem_out_p			:= Dividir_md(Dividir_md((Round( qt_solucao_total_out_p ) * qt_Gotas_p) , qt_tempo_aplicacao_p ) , qt_Tempo_p);

          begin
            EXEC_w := 'BEGIN CPOE_CALC_VALORES_SOL_MD_PCK.CALCULAR_ETAPAS_E_TFASE_MD(:1,:2,:3,:4,:5,:6,:7); END;';

            EXECUTE EXEC_w USING IN qt_solucao_total_out_p,
                                           IN qt_volume_p,
                                           IN qt_tempo_aplicacao_p,
                                           OUT nr_etapas_interv_p,
                                           OUT nr_etapas_val_sol_p,
                                           OUT qt_hora_fase_interv_p,
                                           OUT qt_hora_fase_val_sol_p;
          exception
              when others then
                nr_etapas_interv_p      := null;
                nr_etapas_val_sol_p    := null;
                qt_hora_fase_interv_p     := null;
                qt_hora_fase_val_sol_p := null;
          end;
        end if;
      end if;

    elsif (ie_tipo_solucao_p = 'I') then
      if (ie_ref_calculo_p = 'I') then
        if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
          qt_solucao_total_out_p := nr_etapas_interv_p * qt_volume_p;

          qt_tempo_aplicacao_w := nr_etapas_interv_p * dividir_sem_round_md(obter_minutos_hora_md(ds_hora_fase_p),60);

          qt_dosagem_out_p := Dividir_md(Dividir_md((Round( qt_solucao_total_out_p ) * qt_Gotas_p) , qt_tempo_aplicacao_w ) , qt_Tempo_p);

          qt_hora_fase_val_sol_p := ds_hora_fase_p;
        end if;

      elsif (ie_ref_calculo_p = 'NE') then
        if (nr_etapas_p IS NOT NULL AND nr_etapas_p::text <> '') then
          nr_etapas_val_sol_p := trunc(nr_etapas_p);

          qt_solucao_total_out_p := nr_etapas_p * qt_volume_p;

          qt_hora_fase_interv_p := dividir_md( qt_tempo_aplicacao_p, nr_etapas_interv_p);

          qt_tempo_aplicacao_w := nr_etapas_p * dividir_sem_round_md(obter_minutos_hora_md(ds_hora_fase_p),60);

          qt_dosagem_out_p := Dividir_md(Dividir_md((Round( qt_solucao_total_out_p ) * qt_Gotas_p) , qt_tempo_aplicacao_w ) , qt_Tempo_p);

          qt_hora_fase_val_sol_p := ds_hora_fase_p;
        end if;
      end if;
    end if;
  end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_calc_valores_sol_md_pck.calcular_tipo_solucao_md (ie_tipo_solucao_p text, ie_ref_calculo_p text, cd_intervalo_p text, qt_hora_fase_interv_p INOUT bigint, nr_etapas_p bigint, qt_volume_p bigint, qt_Gotas_p bigint, qt_tempo_aplicacao_p bigint, qt_Tempo_p bigint, nr_etapas_interv_p INOUT bigint, ds_hora_fase_p text, qt_dosagem_p bigint, qt_solucao_total_p bigint, ie_infusion_cal_p text, qt_hora_fase_val_sol_p INOUT text, qt_solucao_total_out_p INOUT bigint, qt_dosagem_out_p INOUT bigint, nr_etapas_val_sol_p INOUT bigint ) FROM PUBLIC;
