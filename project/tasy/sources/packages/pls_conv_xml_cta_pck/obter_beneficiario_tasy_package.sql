-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conv_xml_cta_pck.obter_beneficiario_tasy ( cd_usuario_plano_p pls_conta_imp.cd_usuario_plano%type, cd_guia_operadora_p pls_conta_imp.cd_guia_operadora%type, nm_beneficiario_p pls_conta_imp.nm_beneficiario%type, cd_guia_operadora_conv_p pls_conta_imp.cd_guia_operadora_conv%type, cd_guia_ok_conv_p pls_conta_imp.cd_guia_ok_conv%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_usuario_plano_conv_p INOUT pls_conta_imp.cd_usuario_plano_conv%type, cd_cooperativa_cart_conv_p INOUT pls_conta_imp.cd_cooperativa_cart_conv%type, cd_coop_cart_number_conv_p INOUT pls_conta_imp.cd_coop_cart_number_conv%type, nr_seq_congenere_cart_conv_p INOUT pls_conta_imp.nr_seq_congenere_cart_conv%type, nr_seq_segurado_conv_p INOUT pls_protocolo_conta_imp.nr_seq_prestador_conv%type) AS $body$
DECLARE
		

cd_usuario_plano_conv_w		pls_conta_imp.cd_usuario_plano_conv%type;					
cd_cooperativa_cart_conv_w	pls_conta_imp.cd_cooperativa_cart_conv%type;
cd_coop_cart_number_conv_w	pls_conta_imp.cd_coop_cart_number_conv%type;
nr_seq_congenere_cart_conv_w 	pls_conta_imp.nr_seq_congenere_cart_conv%type;				
nr_seq_segurado_conv_w		pls_protocolo_conta_imp.nr_seq_prestador_conv%type;
ie_gerar_usuario_even_coop_w	pls_congenere.ie_gerar_usuario_eventual%type;
ie_carteirinha_valida_w		varchar(1);
ds_msg_invalida_w		varchar(1000);


BEGIN
-- carrega os par_metros para vari_veis globais da package

CALL CALL CALL CALL CALL CALL pls_conv_xml_cta_pck.carrega_parametros(cd_estabelecimento_p, 'C');
nr_seq_segurado_conv_w := null;

-- Faz as convers_es dos valores que ser_o utilizados na procedure

cd_usuario_plano_conv_w := pls_conv_xml_cta_pck.formata_cd_usuario_plano(cd_usuario_plano_p, cd_estabelecimento_p);
cd_cooperativa_cart_conv_w := pls_conv_xml_cta_pck.obter_cd_cooperativa_cart(cd_usuario_plano_conv_w);
cd_coop_cart_number_conv_w := pls_util_pck.converte_para_numero(cd_cooperativa_cart_conv_w, null);
nr_seq_congenere_cart_conv_w := pls_conv_xml_cta_pck.obter_nr_seq_congenere_cart(cd_coop_cart_number_conv_w);

-- se tiver guia informada verifica se existe alguma autorizacao para a guia e pega benefici_rio de l_	

if (cd_guia_operadora_conv_p IS NOT NULL AND cd_guia_operadora_conv_p::text <> '') then		
	-- busca benefici_rio para situacao de interc_mbio

	select	max(b.nr_seq_segurado)
	into STRICT	nr_seq_segurado_conv_w
	from	pls_segurado_carteira b
	where	b.nr_cartao_intercambio = cd_usuario_plano_conv_w
	and	exists (SELECT	1
			from	pls_guia_plano a
			where	a.nr_seq_segurado = b.nr_seq_segurado
			and	a.cd_guia_pesquisa = cd_guia_operadora_conv_p);
			
	if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then
		
		-- busca benefici_rio pela carteirinha

		select	max(b.nr_seq_segurado)
		into STRICT	nr_seq_segurado_conv_w
		from	pls_segurado_carteira b
		where	b.cd_usuario_plano = cd_usuario_plano_conv_w
		and	exists (SELECT	1
				from	pls_guia_plano a
				where	a.nr_seq_segurado = b.nr_seq_segurado
				and	a.cd_guia_pesquisa = cd_guia_operadora_conv_p);
				
		--Faz verificacoes por cd_guia_ok_conv

		if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then
	
			-- busca benefici_rio para situacao de interc_mbio

			select	max(b.nr_seq_segurado)
			into STRICT	nr_seq_segurado_conv_w
			from	pls_segurado_carteira b
			where	b.nr_cartao_intercambio = cd_usuario_plano_conv_w
			and	exists (SELECT	1
					from	pls_guia_plano a
					where	a.nr_seq_segurado = b.nr_seq_segurado
					and	a.cd_guia_pesquisa = cd_guia_ok_conv_p);
					
			if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then
			
				-- busca benefici_rio pela carteirinha

				select	max(b.nr_seq_segurado)
				into STRICT	nr_seq_segurado_conv_w
				from	pls_segurado_carteira b
				where	b.cd_usuario_plano = cd_usuario_plano_conv_w
				and	exists (SELECT	1
						from	pls_guia_plano a
						where	a.nr_seq_segurado = b.nr_seq_segurado
						and	a.cd_guia_pesquisa = cd_guia_ok_conv_p);
			
			end if;
	
		end if;
							
	end if;
	
end if;

-- se n_o encontrou nada acima ou se n_o tinha guia informada

if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then
	
	-- busca registro para interc_mbio

	select 	max(a.nr_seq_segurado)
	into STRICT	nr_seq_segurado_conv_w
	from   	pls_segurado_carteira a
	where  	a.nr_cartao_intercambio = cd_usuario_plano_conv_w;
	
	if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then
		-- busca pelo c_digo normal da carteirinha

		select 	max(a.nr_seq_segurado)
		into STRICT	nr_seq_segurado_conv_w
		from   	pls_segurado_carteira a
		where  	a.cd_usuario_plano = cd_usuario_plano_conv_w;
	end if;
end if;

if (coalesce(nr_seq_segurado_conv_w::text, '') = '') then

	-- se n_o encontrou nada acima faz as buscas por c_digos antigos de carteirinha

	select 	max(a.nr_seq_segurado)
	into STRICT	nr_seq_segurado_conv_w
	from	pls_segurado_cart_ant a
	where	a.cd_usuario_ant = cd_usuario_plano_conv_w
	and 	exists (SELECT	1
			from	pls_segurado_carteira b
			where	b.nr_seq_segurado = a.nr_seq_segurado
			and	b.cd_usuario_plano <> a.cd_usuario_ant);
end if;

-- se n_o foi identificado o segurado e se a congenere do mesmo foi identificada pela carteirinha

if (coalesce(nr_seq_segurado_conv_w::text, '') = '' and (nr_seq_congenere_cart_conv_w IS NOT NULL AND nr_seq_congenere_cart_conv_w::text <> '')) then

	select	coalesce(max(a.ie_gerar_usuario_eventual),'N')
	into STRICT	ie_gerar_usuario_even_coop_w
	from	pls_congenere a
	where	a.nr_sequencia	= nr_seq_congenere_cart_conv_w;

	-- se o par_metro geral e da cong_nere estiverem configurados para gerar usu_rio eventual

	if (current_setting('pls_conv_xml_cta_pck.ie_gerar_usu_eventual_param_w')::pls_parametros.ie_gerar_usuario_eventual%type = 'S' and ie_gerar_usuario_even_coop_w = 'S') then
		
		ds_msg_invalida_w := pls_conv_xml_cta_pck.valida_cart_beneficiario(	1, cd_usuario_plano_conv_w, cd_estabelecimento_p);
		
		-- se a carteirinha for v_lida gera o benefici_rio eventual

		if (ie_carteirinha_valida_w = 'S') then
			nr_seq_segurado_conv_w := pls_conv_xml_cta_pck.gera_beneficiario_eventual(	cd_usuario_plano_conv_w, nm_beneficiario_p, nr_seq_congenere_cart_conv_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_segurado_conv_w);
		end if;
	end if;
end if;

-- atribui o valor gerado para as vari_veis out

cd_usuario_plano_conv_p		:= cd_usuario_plano_conv_w;
cd_cooperativa_cart_conv_p	:= cd_cooperativa_cart_conv_w;
cd_coop_cart_number_conv_p	:= cd_coop_cart_number_conv_w;
nr_seq_congenere_cart_conv_p 	:= nr_seq_congenere_cart_conv_w;
nr_seq_segurado_conv_p		:= nr_seq_segurado_conv_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conv_xml_cta_pck.obter_beneficiario_tasy ( cd_usuario_plano_p pls_conta_imp.cd_usuario_plano%type, cd_guia_operadora_p pls_conta_imp.cd_guia_operadora%type, nm_beneficiario_p pls_conta_imp.nm_beneficiario%type, cd_guia_operadora_conv_p pls_conta_imp.cd_guia_operadora_conv%type, cd_guia_ok_conv_p pls_conta_imp.cd_guia_ok_conv%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_usuario_plano_conv_p INOUT pls_conta_imp.cd_usuario_plano_conv%type, cd_cooperativa_cart_conv_p INOUT pls_conta_imp.cd_cooperativa_cart_conv%type, cd_coop_cart_number_conv_p INOUT pls_conta_imp.cd_coop_cart_number_conv%type, nr_seq_congenere_cart_conv_p INOUT pls_conta_imp.nr_seq_congenere_cart_conv%type, nr_seq_segurado_conv_p INOUT pls_protocolo_conta_imp.nr_seq_prestador_conv%type) FROM PUBLIC;
