-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conv_xml_cta_pck.gerencia_regra_campo_especial ( nr_seq_protocolo_p pls_protocolo_conta_imp.nr_sequencia%type) AS $body$
DECLARE


-- utilizadas para alimentar a tabela de itens com os campos que ser_o utilizados

tb_nr_seq_item_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_conta_w		pls_util_cta_pck.t_number_table;
tb_ds_procedimento_w		pls_util_cta_pck.t_varchar2_table_200;
tb_ie_tipo_item_conv_w		pls_util_cta_pck.t_varchar2_table_10;
tb_cd_proced_conv_w		pls_util_cta_pck.t_number_table;
tb_ie_tipo_guia_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_prest_conv_w		pls_util_cta_pck.t_number_table;
tb_cd_prest_prot_conv_w		pls_util_cta_pck.t_varchar2_table_20;	
tb_nr_seq_prest_exec_conv_w	pls_util_cta_pck.t_number_table;
tb_cd_prest_exec_conv_w		pls_util_cta_pck.t_varchar2_table_20;

-- utilizado para alimentar a tabela principal com os campos que foram convertidos

tb_nr_seq_regra_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_fornec_mat_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_setor_atend_w		pls_util_cta_pck.t_number_table;
tb_cd_seq_prestador_w		pls_util_cta_pck.t_varchar2_table_200;
	
C01 CURSOR(	nr_seq_protocolo_pc	pls_protocolo_conta_imp.nr_sequencia%type) FOR
	SELECT	c.nr_sequencia nr_seq_item,
		b.nr_sequencia nr_seq_conta,
		c.ds_procedimento,
		c.ie_tipo_item_conv,
		c.cd_procedimento_conv,
		a.ie_tipo_guia,
		b.nr_seq_prest_exec_conv,
		b.cd_prest_exec_conv,
		a.nr_seq_prestador_conv nr_seq_prest_prot_conv,
		a.cd_prestador_conv cd_prest_prot_conv
	from	pls_protocolo_conta_imp a,
		pls_conta_imp b,
		pls_conta_item_imp c
	where	a.nr_sequencia = nr_seq_protocolo_pc
	and	b.nr_seq_protocolo = a.nr_sequencia
	and	c.nr_seq_conta = b.nr_sequencia;

-- retorna todos os registros que entraram em alguma regra (nr_seq_regra is not null)

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_item,
		nr_seq_regra,
		nr_seq_fornec_mat_conv,
		nr_seq_setor_atend_conv,
		cd_seq_prestador_conv
	from	pls_conta_item_imp_tmp
	where	CASE WHEN coalesce(nr_seq_regra::text, '') = '' THEN  -1  ELSE -2 END  = -2;


BEGIN
-- limpa os dados da tabela tempor_ria

EXECUTE 'truncate table pls_conta_item_imp_tmp';

tb_nr_seq_item_w.delete;
tb_ds_procedimento_w.delete;
tb_ie_tipo_item_conv_w.delete;
tb_cd_proced_conv_w.delete;
tb_ie_tipo_guia_w.delete;
tb_nr_seq_prest_conv_w.delete;
tb_cd_prest_prot_conv_w.delete;
tb_nr_seq_prest_exec_conv_w.delete;
tb_cd_prest_exec_conv_w.delete;

-- alimenta a tabela tempor_ria com os dados que ser_o utilizados para validacao das regras

open C01(nr_seq_protocolo_p);
loop

	fetch C01 bulk collect into 	tb_nr_seq_item_w, tb_nr_seq_conta_w, tb_ds_procedimento_w,
					tb_ie_tipo_item_conv_w, tb_cd_proced_conv_w, tb_ie_tipo_guia_w, 
					tb_nr_seq_prest_exec_conv_w, tb_cd_prest_exec_conv_w, tb_nr_seq_prest_conv_w, 
					tb_cd_prest_prot_conv_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_item_w.count = 0;
	
	forall i in tb_nr_seq_item_w.first..tb_nr_seq_item_w.last
		
		insert into pls_conta_item_imp_tmp(
			nr_seq_protocolo, nr_seq_conta, nr_sequencia,
			ds_procedimento, ie_tipo_item_conv, cd_procedimento_conv, 
			ie_tipo_guia, nr_seq_prest_prot_conv, cd_prest_prot_conv, 
			nr_seq_prest_exec_conv, cd_prest_exec_conv
		) values (
			nr_seq_protocolo_p, tb_nr_seq_conta_w(i), tb_nr_seq_item_w(i), 
			tb_ds_procedimento_w(i), tb_ie_tipo_item_conv_w(i), tb_cd_proced_conv_w(i), 
			tb_ie_tipo_guia_w(i), tb_nr_seq_prest_exec_conv_w(i), tb_cd_prest_exec_conv_w(i), 
			tb_nr_seq_prest_conv_w(i), tb_cd_prest_prot_conv_w(i)
		);
	commit;
end loop;
close C01;

-- aqui seleciona as regras que ser_o processadas

CALL pls_conv_xml_cta_pck.gerencia_sel_regra_campo_esp();

-- faz o vinculo das regras com os itens para serem processados futuramente

CALL pls_conv_xml_cta_pck.vincula_regra_campo_esp_item();

-- processa todas as regras que foram selecionadas

CALL pls_conv_xml_cta_pck.processa_regra_campo_espec();

-- ap_s indentificar os campos especiais _ preciso fazer a convers_o para o tasy (identificar eles no tasy)

CALL pls_conv_xml_cta_pck.identifica_campos_conv();

-- aplica todas as alteracoes encontradas na tabela principal, todas as alteracoes nas procedures devem ser feitas

-- na tabela tempor_ria e este cursor deve se encarregar de passar todas as alteracoes encontradas para a tabela 

-- principal

open C02;
loop
	fetch C02 bulk collect into 	tb_nr_seq_item_w, tb_nr_seq_regra_w, tb_nr_seq_fornec_mat_w,
					tb_nr_seq_setor_atend_w, tb_cd_seq_prestador_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_nr_seq_item_w.count = 0;

	forall i in tb_nr_seq_item_w.first..tb_nr_seq_item_w.last
		update 	pls_conta_item_imp
		set     nr_seq_regra_campo_esp_conv = tb_nr_seq_regra_w(i),
			nr_seq_fornec_mat_conv = tb_nr_seq_fornec_mat_w(i),
			nr_seq_setor_atend_conv = tb_nr_seq_setor_atend_w(i),
			cd_seq_prestador_conv = tb_cd_seq_prestador_w(i)
		where  	nr_sequencia = tb_nr_seq_item_w(i);
	commit;	
end loop;
close C02;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conv_xml_cta_pck.gerencia_regra_campo_especial ( nr_seq_protocolo_p pls_protocolo_conta_imp.nr_sequencia%type) FROM PUBLIC;
