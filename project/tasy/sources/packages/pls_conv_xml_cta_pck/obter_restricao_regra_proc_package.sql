-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_conv_xml_cta_pck.obter_restricao_regra_proc ( ds_alias_p text, dt_inicio_vigencia_p pls_conversao_proc.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_conversao_proc.dt_fim_vigencia%type, ie_tipo_tabela_p pls_conversao_proc.ie_tipo_tabela%type, nr_seq_prestador_p pls_conversao_proc.nr_seq_prestador%type, nr_seq_tipo_prest_p pls_conversao_proc.nr_seq_tipo_prestador%type, nr_seq_grupo_prestador_p pls_conversao_proc.nr_seq_grupo_prestador%type, cd_area_procedimento_p pls_conversao_proc.cd_area_procedimento%type, cd_especialidade_p pls_conversao_proc.cd_especialidade%type, cd_grupo_proc_p pls_conversao_proc.cd_grupo_proc%type, cd_procedimento_p pls_conversao_proc.cd_procedimento%type, ie_origem_proced_p pls_conversao_proc.ie_origem_proced%type, nr_seq_congenere_p pls_conversao_proc.nr_seq_congenere%type, nr_seq_grupo_contrato_p pls_conversao_proc.nr_seq_grupo_contrato%type, cd_material_imp_p pls_conversao_proc.cd_material_imp%type, ie_tipo_intercambio_p pls_conversao_proc.ie_tipo_intercambio%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, bind_sql_valor_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


ds_restricao_w		varchar(3500);


BEGIN

if (cd_material_imp_p IS NOT NULL AND cd_material_imp_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.cd_procedimento_conv = :cd_material_imp '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_material_imp', cd_material_imp_p, bind_sql_valor_p);

end if;

-- se possui uma data de in_cio de vig_ncia da regra

if (dt_inicio_vigencia_p IS NOT NULL AND dt_inicio_vigencia_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.dt_execucao >= :dt_inicio_vigencia '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':dt_inicio_vigencia', dt_inicio_vigencia_p, bind_sql_valor_p);
end if;

-- se possui uma data fim de vig_ncia da regra

if (dt_fim_vigencia_p IS NOT NULL AND dt_fim_vigencia_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.dt_execucao <= :dt_fim_vigencia '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':dt_fim_vigencia', dt_fim_vigencia_p, bind_sql_valor_p);
end if;
-- tipo de tabela

if (ie_tipo_tabela_p IS NOT NULL AND ie_tipo_tabela_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.cd_tipo_tabela_conv = :ie_tipo_tabela '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':ie_tipo_tabela', ie_tipo_tabela_p, bind_sql_valor_p);
end if;
-- prestador do protocolo


if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.nr_seq_prest_prot_conv = :nr_seq_prestador ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_prestador', nr_seq_prestador_p, bind_sql_valor_p);	
end if;
-- tipo prestador

if (nr_seq_tipo_prest_p IS NOT NULL AND nr_seq_tipo_prest_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and exists (select 1 ' || pls_util_pck.enter_w ||
				      ' from pls_prestador z ' || pls_util_pck.enter_w ||
				      '	where z.nr_sequencia = ' || ds_alias_p || '.nr_seq_prest_prot_conv ' || pls_util_pck.enter_w ||
				      ' and z.nr_seq_tipo_prestador = :nr_seq_tipo_prestador) ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_tipo_prestador', nr_seq_tipo_prest_p, bind_sql_valor_p);
end if;
-- grupo prestador

if (nr_seq_grupo_prestador_p IS NOT NULL AND nr_seq_grupo_prestador_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and  (select count(1) ' || pls_util_pck.enter_w ||
			  ' 	  from table(pls_grupos_pck.obter_prestadores_grupo( ' || pls_util_pck.enter_w ||
			  ' 			:nr_seq_grupo_prestador, ' || ds_alias_p || '.nr_seq_prest_prot_conv))' || pls_util_pck.enter_w ||
			  '       where decode(' || ds_alias_p || '.nr_seq_prest_prot_conv, null, -1, -2) = -2 ) > 0 ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_grupo_prestador', nr_seq_grupo_prestador_p, bind_sql_valor_p);
end if;
-- origem do procedimento

if (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and  ' || ds_alias_p || '.ie_origem_proced_conv = :ie_origem_procedimento ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':ie_origem_procedimento', ie_origem_proced_p, bind_sql_valor_p);
end if;
-- c_digo do procedimento	

if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  ' || ds_alias_p || '.cd_procedimento_conv = :cd_procedimento ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_procedimento', cd_procedimento_p, bind_sql_valor_p);
end if;
-- area de procedimento

if (cd_area_procedimento_p IS NOT NULL AND cd_area_procedimento_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  exists( select 1 ' || pls_util_pck.enter_w ||
					' from estrutura_procedimento_v v '|| pls_util_pck.enter_w ||
					' where v.cd_procedimento = ' || ds_alias_p || '.cd_procedimento_conv ' || pls_util_pck.enter_w ||
					' and 	v.cd_area_procedimento = :cd_area_procedimento) '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_area_procedimento', cd_area_procedimento_p, bind_sql_valor_p);
end if;
-- especialidade do procedimento

if (cd_especialidade_p IS NOT NULL AND cd_especialidade_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  exists( select 1 ' || pls_util_pck.enter_w ||
					' from estrutura_procedimento_v v '|| pls_util_pck.enter_w ||
					' where v.cd_procedimento = ' || ds_alias_p || '.cd_procedimento_conv ' || pls_util_pck.enter_w ||
					' and 	v.cd_especialidade = :cd_especialidade) '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_especialidade', cd_especialidade_p, bind_sql_valor_p);
end if;
-- grupo de procedimento

if (cd_grupo_proc_p IS NOT NULL AND cd_grupo_proc_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  exists( select 1 ' || pls_util_pck.enter_w ||
					' from estrutura_procedimento_v v '|| pls_util_pck.enter_w ||
					' where v.cd_procedimento = ' || ds_alias_p || '.cd_procedimento_conv ' || pls_util_pck.enter_w ||
					' and 	v.cd_grupo_proc = :cd_grupo_proc) '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_grupo_proc', cd_grupo_proc_p, bind_sql_valor_p);
end if;	
-- congenere		

if (nr_seq_congenere_p IS NOT NULL AND nr_seq_congenere_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  ' || ds_alias_p || '.nr_seq_congenere_conv = :nr_seq_congenere ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_congenere', nr_seq_congenere_p, bind_sql_valor_p);
end if;
--grupo_contrato


if (nr_seq_grupo_contrato_p IS NOT NULL AND nr_seq_grupo_contrato_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and  (	select count(1) ' || pls_util_pck.enter_w ||
					' 	  	from table(pls_grupos_pck.obter_contrato_grupo( ' || pls_util_pck.enter_w ||	':nr_seq_grupo_contrato, ' ||
							      ds_alias_p || '.nr_seq_contrato, '|| ds_alias_p || '.nr_seq_intercambio, ''VALIDAR_FILTROS'' ))) > 0' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_grupo_contrato', nr_seq_grupo_contrato_p, bind_sql_valor_p);
end if;

-- tipo de interc_mbio

if (ie_tipo_intercambio_p <> 'A') then
	ds_restricao_w := ds_restricao_w || ' and pls_obter_tipo_intercambio(' || ds_alias_p || '.nr_seq_congenere_conv, :cd_estabelecimento) = ' || ':ie_tipo_intercambio ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_estabelecimento', cd_estabelecimento_p, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(':ie_tipo_intercambio', ie_tipo_intercambio_p, bind_sql_valor_p);
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_conv_xml_cta_pck.obter_restricao_regra_proc ( ds_alias_p text, dt_inicio_vigencia_p pls_conversao_proc.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_conversao_proc.dt_fim_vigencia%type, ie_tipo_tabela_p pls_conversao_proc.ie_tipo_tabela%type, nr_seq_prestador_p pls_conversao_proc.nr_seq_prestador%type, nr_seq_tipo_prest_p pls_conversao_proc.nr_seq_tipo_prestador%type, nr_seq_grupo_prestador_p pls_conversao_proc.nr_seq_grupo_prestador%type, cd_area_procedimento_p pls_conversao_proc.cd_area_procedimento%type, cd_especialidade_p pls_conversao_proc.cd_especialidade%type, cd_grupo_proc_p pls_conversao_proc.cd_grupo_proc%type, cd_procedimento_p pls_conversao_proc.cd_procedimento%type, ie_origem_proced_p pls_conversao_proc.ie_origem_proced%type, nr_seq_congenere_p pls_conversao_proc.nr_seq_congenere%type, nr_seq_grupo_contrato_p pls_conversao_proc.nr_seq_grupo_contrato%type, cd_material_imp_p pls_conversao_proc.cd_material_imp%type, ie_tipo_intercambio_p pls_conversao_proc.ie_tipo_intercambio%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, bind_sql_valor_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
