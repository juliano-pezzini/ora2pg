-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conv_xml_cta_pck.gerencia_sel_regra_proced () AS $body$
DECLARE


qt_regra_w	integer;
qt_itens_w	integer;
nr_contador_w	integer;

tb_nr_seq_regra_w	pls_util_cta_pck.t_number_table;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conversao_proc
	where	ie_importacao_conta = 'S'
	and	ie_envio_receb = 'R'
	and	ie_situacao = 'A';
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_regra,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.ie_origem_proced,
		a.cd_procedimento,
		a.nr_seq_congenere,
		a.nr_seq_tipo_prestador,
		a.nr_seq_grupo_prestador,
		a.nr_seq_prestador,
		a.ie_tipo_tabela,
		a.nr_seq_grupo_contrato,
		(SELECT count(1)
		from   	pls_conta_item_imp_tmp b,
			estrutura_procedimento_v c
		where  	c.cd_procedimento = b.cd_procedimento_conv
		and	c.cd_area_procedimento = a.cd_area_procedimento) qt_area_proced,
		(select count(1)
		from   	pls_conta_item_imp_tmp b,
			estrutura_procedimento_v c
		where  	c.cd_procedimento = b.cd_procedimento_conv
		and	c.cd_especialidade = a.cd_especialidade) qt_espec_proced,
		(select count(1)
		from   	pls_conta_item_imp_tmp b,
			estrutura_procedimento_v c
		where  	c.cd_procedimento = b.cd_procedimento_conv
		and	c.cd_grupo_proc = a.cd_grupo_proc) qt_grupo_proced,
		(select	count(1)
		from	pls_conta_item_imp_tmp b
		where 	b.ie_origem_proced_conv = a.ie_origem_proced) qt_origem_proced,
		(select count(1)
		from   	pls_conta_item_imp_tmp b
		where  	b.cd_procedimento_conv = a.cd_procedimento) qt_procedimento,
		(select	count(1)
		from	pls_conta_item_imp_tmp b
		where 	b.nr_seq_congenere_conv = a.nr_seq_congenere) qt_congenere,
		(select	count(1)
		from	pls_conta_item_imp_tmp b,
			pls_prestador c
		where	c.nr_sequencia = b.nr_seq_prest_prot_conv
		and	c.nr_seq_tipo_prestador = a.nr_seq_tipo_prestador) qt_tipo_prestador,
		(select	count(1)
		from	pls_conta_item_imp_tmp b,
			table(pls_grupos_pck.obter_prestadores_grupo(
			a.nr_seq_grupo_prestador, b.nr_seq_prest_prot_conv))
		where	CASE WHEN coalesce(b.nr_seq_prest_prot_conv::text, '') = '' THEN  -1  ELSE -2 END  = -2) qt_grupo_prestador,
		(select	count(1)
		from	pls_conta_item_imp_tmp b
		where	b.nr_seq_prest_prot_conv = a.nr_seq_prestador) qt_prestador,
		(select count(1)
		from   	pls_conta_item_imp_tmp b
		where  	b.cd_tipo_tabela_conv = a.ie_tipo_tabela) qt_tabela_importacao,
		(	select	count(1)
			from	pls_conta_item_imp_tmp b,
				table(pls_grupos_pck.obter_contrato_grupo(a.nr_seq_grupo_contrato, b.nr_seq_contrato, null, 'VALIDAR_FILTROS'))) qt_grupo_contrato,
		(	select	count(1)
			from	pls_conta_item_imp_tmp b,
				table(pls_grupos_pck.obter_contrato_grupo(a.nr_seq_grupo_contrato, null, b.nr_seq_intercambio, 'VALIDAR_FILTROS'))) qt_grupo_cont_inter	
	from	pls_conversao_proc a
	where	ie_importacao_conta = 'S'
	and	ie_envio_receb = 'R'
	and	ie_situacao = 'A';

BEGIN
-- limpa a tabela tempor_ria das regras

EXECUTE 'truncate table pls_regra_conv_item_tmp';

tb_nr_seq_regra_w := pls_conv_xml_cta_pck.alimenta_regra_conv_item(tb_nr_seq_regra_w);
nr_contador_w := 0;

-- conta as regras v_lidas

select	count(1)
into STRICT	qt_regra_w
from	pls_conversao_proc
where	ie_importacao_conta = 'S'
and	ie_envio_receb = 'R'
and	ie_situacao = 'A';

-- conta os itens a serem processados

select 	count(1)
into STRICT	qt_itens_w
from	pls_conta_item_imp_tmp;

-- se existirem mais itens que regras processamos todas as regras

if (qt_itens_w > qt_regra_w) then
	
	open C01;
	loop
		fetch C01 bulk collect into 	tb_nr_seq_regra_w
		limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_nr_seq_regra_w.count = 0;

		tb_nr_seq_regra_w := pls_conv_xml_cta_pck.alimenta_regra_conv_item(tb_nr_seq_regra_w);
	end loop;
	close C01;
-- se existir mais regras que itens _ feito uma pr_ selecao das regras a serem processadas

else

	for r_c02_w in C02 loop

		-- se algum dos itens retornou valor devemos processar a regra

		if (r_c02_w.qt_area_proced > 0) or (r_c02_w.qt_espec_proced > 0) or (r_c02_w.qt_grupo_proced > 0) or (r_c02_w.qt_origem_proced > 0) or (r_c02_w.qt_procedimento > 0) or (r_c02_w.qt_congenere > 0) or (r_c02_w.qt_tipo_prestador > 0) or (r_c02_w.qt_grupo_prestador > 0) or (r_c02_w.qt_prestador > 0) or (r_c02_w.qt_tabela_importacao > 0) or (r_c02_w.qt_grupo_contrato > 0) or (r_c02_w.qt_grupo_cont_inter > 0)then

			tb_nr_seq_regra_w(nr_contador_w) := r_c02_w.nr_seq_regra;

			-- se atingiu a quantidade manda pro banco

			if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then

				tb_nr_seq_regra_w := pls_conv_xml_cta_pck.alimenta_regra_conv_item(tb_nr_seq_regra_w);
				nr_contador_w := 0;
			else
				nr_contador_w := nr_contador_w + 1;
			end if;
		-- incluido este else caso todos os campos sejam nulos (regra em branco) a regra deve ser processada

		elsif (coalesce(r_c02_w.cd_area_procedimento::text, '') = '') and (coalesce(r_c02_w.cd_especialidade::text, '') = '') and (coalesce(r_c02_w.cd_grupo_proc::text, '') = '') and (coalesce(r_c02_w.ie_origem_proced::text, '') = '') and (coalesce(r_c02_w.cd_procedimento::text, '') = '') and (coalesce(r_c02_w.nr_seq_congenere::text, '') = '') and (coalesce(r_c02_w.nr_seq_tipo_prestador::text, '') = '') and (coalesce(r_c02_w.nr_seq_grupo_prestador::text, '') = '') and (coalesce(r_c02_w.nr_seq_prestador::text, '') = '') and (coalesce(r_c02_w.ie_tipo_tabela::text, '') = '') and (coalesce(r_c02_w.nr_seq_grupo_contrato::text, '') = '')then
			
			tb_nr_seq_regra_w(nr_contador_w) := r_c02_w.nr_seq_regra;
			
			-- se atingiu a quantidade manda pro banco

			if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then
				
				tb_nr_seq_regra_w := pls_conv_xml_cta_pck.alimenta_regra_conv_item(tb_nr_seq_regra_w);
				nr_contador_w := 0;
			else
				nr_contador_w := nr_contador_w + 1;
			end if;
		end if;
	end loop;
	
	-- se sobrou algo manda para a tabela tempor_ria para ser processado

	tb_nr_seq_regra_w := pls_conv_xml_cta_pck.alimenta_regra_conv_item(tb_nr_seq_regra_w);
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conv_xml_cta_pck.gerencia_sel_regra_proced () FROM PUBLIC;
