-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_conv_xml_cta_pck.identificacao_inicial_proc ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_nr_seq_item_w	pls_util_cta_pck.t_number_table;
tb_ie_origem_proced_w	pls_util_cta_pck.t_number_table;
tb_cd_procedimento_w	pls_util_cta_pck.t_number_table;
tb_nr_regra_origem_w	pls_util_cta_pck.t_number_table;
nr_contador_w		integer;
qt_procedimento_w	integer;

tb_nr_seq_material_w	pls_util_cta_pck.t_number_table;
tb_cd_proced_conv_w		pls_util_cta_pck.t_number_table;
tb_ie_tipo_item_conv_w	pls_util_cta_pck.t_varchar2_table_10;
					
C01 CURSOR FOR
	SELECT	nr_sequencia nr_seq_item,
		cd_procedimento,
		dt_execucao
	from	pls_conta_item_imp_tmp
	where 	ie_tipo_item = 'P'
	
union all

	SELECT	nr_sequencia nr_seq_item,
		cd_procedimento,
		dt_execucao
	from	pls_conta_item_imp_tmp
	where 	ie_tipo_item = 'OD'
	and	ie_tipo_despesa not in (1,2,3,8);

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_item,
			cd_procedimento,
			cd_tipo_tabela,
			ie_tipo_despesa,
			ie_tipo_item_conv
	from	pls_conta_item_imp;
	
BEGIN
-- inicia as vari_veis

nr_contador_w := 0;

-- chama inicialmente somente para limpar as vari_veis

SELECT * FROM pls_conv_xml_cta_pck.alimenta_tabela_conta_proc_imp(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_procedimento_w, tb_nr_regra_origem_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_procedimento_w := _ora2pg_r.tb_cd_procedimento_p; tb_nr_regra_origem_w := _ora2pg_r.tb_nr_regra_origem_p;

for r_c01_w in C01 loop
	
	tb_nr_seq_item_w(nr_contador_w) := r_c01_w.nr_seq_item;
	tb_cd_procedimento_w(nr_contador_w) := r_c01_w.cd_procedimento;
	tb_nr_regra_origem_w(nr_contador_w) := null;
	
	-- verifica se existe mais de um origem procedimento para o c_digo enviado no XML

	-- que possua um procedimento ativo

	select 	count(ie_origem_proced)
	into STRICT	qt_procedimento_w
	from 	procedimento
	where	cd_procedimento = r_c01_w.cd_procedimento
	and	ie_situacao = 'A';
	
	-- se existir apenas um usa este mesmo

	if (qt_procedimento_w = 1) then
		
		select 	max(ie_origem_proced)
		into STRICT	tb_ie_origem_proced_w(nr_contador_w)
		from 	procedimento
		where	cd_procedimento = r_c01_w.cd_procedimento
		and	ie_situacao = 'A';
		
	-- se existir mais de um vai pela regra de origem procedimento

	-- OPS - Cadastro de regras > Rede credenciada > Procedimentos > Regra origem

	elsif (qt_procedimento_w > 1) then
		
		-- identifica a origem do procedimento de acordo com a regra

		tb_nr_regra_origem_w(nr_contador_w) := pls_conv_xml_cta_pck.obter_origem_proced_regra(	cd_estabelecimento_p, r_c01_w.cd_procedimento, r_c01_w.dt_execucao, 'S');
	
		-- se n_o encontrou tenta o max e fica com a tabela maior

		if (coalesce(tb_ie_origem_proced_w(nr_contador_w)::text, '') = '') then
			
			select 	max(ie_origem_proced)
			into STRICT	tb_ie_origem_proced_w(nr_contador_w)
			from 	procedimento
			where	cd_procedimento = r_c01_w.cd_procedimento
			and	ie_situacao = 'A';
		end if;
	else
		-- se for zero tenta buscar algo sem considerar a situacao		

		select 	count(ie_origem_proced)
		into STRICT	qt_procedimento_w
		from 	procedimento
		where	cd_procedimento = r_c01_w.cd_procedimento;
		
		-- caso tenha apenas um pega este

		if (qt_procedimento_w = 1) then
		
			select 	max(ie_origem_proced)
			into STRICT	tb_ie_origem_proced_w(nr_contador_w)
			from 	procedimento
			where	cd_procedimento = r_c01_w.cd_procedimento;
		
		-- se existir mais de um vai pela regra de origem procedimento

		-- OPS - Cadastro de regras > Rede credenciada > Procedimentos > Regra origem

		elsif (qt_procedimento_w > 1) then
		
			-- identifica a origem do procedimento de acordo com a regra

			tb_nr_regra_origem_w(nr_contador_w) := pls_conv_xml_cta_pck.obter_origem_proced_regra(	cd_estabelecimento_p, r_c01_w.cd_procedimento, r_c01_w.dt_execucao, 'N');

			-- se n_o encontrou tenta o max e fica com a tabela maior

			if (coalesce(tb_ie_origem_proced_w(nr_contador_w)::text, '') = '') then
			
				select 	max(ie_origem_proced)
				into STRICT	tb_ie_origem_proced_w(nr_contador_w)
				from 	procedimento
				where	cd_procedimento = r_c01_w.cd_procedimento;
			end if;
		-- se n_o encontrou nada ent_o _ nulo

		else
			tb_ie_origem_proced_w(nr_contador_w) := null;
		end if;	
	end if;
	
	-- se atingiu a quantidade de registros manda pro banco

	if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then
		
		SELECT * FROM pls_conv_xml_cta_pck.alimenta_tabela_conta_proc_imp(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_procedimento_w, tb_nr_regra_origem_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_procedimento_w := _ora2pg_r.tb_cd_procedimento_p; tb_nr_regra_origem_w := _ora2pg_r.tb_nr_regra_origem_p;
	
		nr_contador_w := 0;
	else
		nr_contador_w := nr_contador_w + 1;
	end if;
end loop;

-- se ficou algo nas tabelas manda pro banco

SELECT * FROM pls_conv_xml_cta_pck.alimenta_tabela_conta_proc_imp(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_procedimento_w, tb_nr_regra_origem_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_procedimento_w := _ora2pg_r.tb_cd_procedimento_p; tb_nr_regra_origem_w := _ora2pg_r.tb_nr_regra_origem_p;

	-- inicia as vari_veis

	nr_contador_w := 0;
	-- chama inicialmente para limpar as tabelas

	SELECT * FROM pls_conv_xml_cta_pck.atualiza_orig_item_tab_tiss(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_proced_conv_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_proced_conv_w := _ora2pg_r.tb_cd_proced_conv_p;
	for r_c02_w in C02 loop
						
		-- apenas vira procedimento os itens que tiveram o tipo despesa alterados

		-- identifica a origem do procedimento pelo tipo da tabela e altera o tipo para P				

		if (r_c02_w.ie_tipo_despesa in ('05', '07')) then			
			-- AMB

			if (r_c02_w.cd_tipo_tabela in ('01', '02', '03', '04', '07', '08')) then
				tb_ie_origem_proced_w(nr_contador_w) := 1;
			-- CBHPM

			elsif (r_c02_w.cd_tipo_tabela = '06') then
				tb_ie_origem_proced_w(nr_contador_w) := 5;
			-- SUS_2008

			elsif (r_c02_w.cd_tipo_tabela in ('10', '11')) then
				tb_ie_origem_proced_w(nr_contador_w) := 7;
			-- TUSS

			elsif (r_c02_w.cd_tipo_tabela in ('16', '18', '22')) then
				tb_ie_origem_proced_w(nr_contador_w) := 8;
			-- PROPRIO

			elsif (r_c02_w.cd_tipo_tabela in ('94', '95', '96', '97', '98', '99', '00')) then
				tb_ie_origem_proced_w(nr_contador_w) := 4;
								
			else
				tb_ie_origem_proced_w(nr_contador_w) := null;
			end if;
			
			-- se encontrou uma regra para transformar material em procedimento limpamos o campo nr_seq_material

			tb_cd_proced_conv_w(nr_contador_w) := r_c02_w.cd_procedimento;
			tb_nr_seq_item_w(nr_contador_w) := r_c02_w.nr_seq_item;
			
			-- se atingiu a quantidade atualiza a tabela tempor_ria

			if (nr_contador_w >= pls_util_pck.qt_registro_transacao_w) then

				SELECT * FROM pls_conv_xml_cta_pck.atualiza_orig_item_tab_tiss(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_proced_conv_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_proced_conv_w := _ora2pg_r.tb_cd_proced_conv_p;
				nr_contador_w := 0;
			else
				nr_contador_w := nr_contador_w + 1;
			end if;
		end if;
	end loop;	
				
	-- se sobrou algo manda pra tabela

	SELECT * FROM pls_conv_xml_cta_pck.atualiza_orig_item_tab_tiss(	tb_nr_seq_item_w, tb_ie_origem_proced_w, tb_cd_proced_conv_w) INTO STRICT _ora2pg_r;
 	tb_nr_seq_item_w := _ora2pg_r.tb_nr_seq_item_p; tb_ie_origem_proced_w := _ora2pg_r.tb_ie_origem_proced_p; tb_cd_proced_conv_w := _ora2pg_r.tb_cd_proced_conv_p;								
				
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conv_xml_cta_pck.identificacao_inicial_proc ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
