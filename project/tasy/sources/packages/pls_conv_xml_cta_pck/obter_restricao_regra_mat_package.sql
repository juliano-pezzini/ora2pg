-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_conv_xml_cta_pck.obter_restricao_regra_mat ( ds_alias_p text, dt_inicio_vigencia_p pls_conversao_mat.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_conversao_mat.dt_fim_vigencia%type, ie_tipo_tabela_p pls_conversao_mat.ie_tipo_tabela%type, nr_seq_prestador_p pls_conversao_mat.nr_seq_prestador%type, nr_seq_tipo_prestador_p pls_conversao_mat.nr_seq_tipo_prestador%type, nr_seq_grupo_prestador_p pls_conversao_mat.nr_seq_grupo_prestador%type, cd_material_orig_inicial_p pls_conversao_mat.cd_material_orig_inicial%type, cd_material_orig_final_p pls_conversao_mat.cd_material_orig_final%type, nr_seq_material_orig_p pls_conversao_mat.nr_seq_material_orig%type, ie_tipo_despesa_mat_p pls_conversao_mat.ie_tipo_despesa_mat%type, bind_sql_valor_p INOUT sql_pck.t_dado_bind) AS $body$
DECLARE


ds_restricao_w		varchar(3500);


BEGIN

-- se possui uma data fim de vig_ncia da regra

if (dt_inicio_vigencia_p IS NOT NULL AND dt_inicio_vigencia_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.dt_execucao >= :dt_inicio_vigencia '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':dt_inicio_vigencia', dt_inicio_vigencia_p, bind_sql_valor_p);
end if;

-- se possui uma data fim de vig_ncia da regra

if (dt_fim_vigencia_p IS NOT NULL AND dt_fim_vigencia_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.dt_execucao <= :dt_fim_vigencia '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':dt_fim_vigencia', dt_fim_vigencia_p, bind_sql_valor_p);
end if;
-- tipo de tabela

if (ie_tipo_tabela_p IS NOT NULL AND ie_tipo_tabela_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.cd_tipo_tabela_conv = :ie_tipo_tabela '|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':ie_tipo_tabela', ie_tipo_tabela_p, bind_sql_valor_p);
end if;
-- prestador do protocolo

if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.nr_seq_prest_prot_conv = :nr_seq_prestador ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_prestador', nr_seq_prestador_p, bind_sql_valor_p);	
end if;
-- tipo prestador

if (nr_seq_tipo_prestador_p IS NOT NULL AND nr_seq_tipo_prestador_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and exists (select 1 ' || pls_util_pck.enter_w ||
				      ' from pls_prestador z ' || pls_util_pck.enter_w ||
				      '	where z.nr_sequencia = ' || ds_alias_p || '.nr_seq_prest_prot_conv ' || pls_util_pck.enter_w ||
				      ' and   z.nr_seq_tipo_prestador = :nr_seq_tipo_prestador) ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_tipo_prestador', nr_seq_tipo_prestador_p, bind_sql_valor_p);
end if;
-- grupo prestador

if (nr_seq_grupo_prestador_p IS NOT NULL AND nr_seq_grupo_prestador_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and  (select count(1) ' || pls_util_pck.enter_w ||
			  ' 	  from table(pls_grupos_pck.obter_prestadores_grupo( ' || pls_util_pck.enter_w ||
			  ' 			:nr_seq_grupo_prestador, ' || ds_alias_p || '.nr_seq_prest_prot_conv))' || pls_util_pck.enter_w ||
			  '       where decode(' || ds_alias_p || '.nr_seq_prest_prot_conv, null, -1, -2) = -2 ) > 0 ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_grupo_prestador', nr_seq_grupo_prestador_p, bind_sql_valor_p);
end if;
-- faixa de c_digo do material

if (cd_material_orig_inicial_p IS NOT NULL AND cd_material_orig_inicial_p::text <> '') and (cd_material_orig_final_p IS NOT NULL AND cd_material_orig_final_p::text <> '') then

	-- _ utilizado o cd_procedimento_conv que nele cont_m o cd_procedimento que veio no XML com a funcao pls_util_pck.obter_somente_numero

	-- isso para que possamos comparar no between os valores	

	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.cd_procedimento_conv between pls_util_pck.obter_somente_numero(:cd_material_orig_inicial_p) '
						|| ' and pls_util_pck.obter_somente_numero(:cd_material_orig_final_p)'|| pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':cd_material_orig_inicial_p', cd_material_orig_inicial_p, bind_sql_valor_p);
	bind_sql_valor_p := sql_pck.bind_variable(':cd_material_orig_final_p', cd_material_orig_final_p, bind_sql_valor_p);

end if;
-- sequencia do material

if (nr_seq_material_orig_p IS NOT NULL AND nr_seq_material_orig_p::text <> '') then
	
	ds_restricao_w := ds_restricao_w || ' and ' || ds_alias_p || '.nr_seq_material_conv = :nr_seq_material_orig ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':nr_seq_material_orig', nr_seq_material_orig_p, bind_sql_valor_p);
end if;
-- tipo despesa material

if (ie_tipo_despesa_mat_p IS NOT NULL AND ie_tipo_despesa_mat_p::text <> '') then

	ds_restricao_w := ds_restricao_w || ' and exists (select 1 ' || pls_util_pck.enter_w ||
				      ' from pls_material x ' || pls_util_pck.enter_w ||
				      '	where x.nr_sequencia = ' || ds_alias_p || '.nr_seq_material_conv ' || pls_util_pck.enter_w ||
				      ' and   x.ie_tipo_despesa = :ie_tipo_despesa_mat) ' || pls_util_pck.enter_w;
	bind_sql_valor_p := sql_pck.bind_variable(':ie_tipo_despesa_mat', ie_tipo_despesa_mat_p, bind_sql_valor_p);
end if;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_conv_xml_cta_pck.obter_restricao_regra_mat ( ds_alias_p text, dt_inicio_vigencia_p pls_conversao_mat.dt_inicio_vigencia%type, dt_fim_vigencia_p pls_conversao_mat.dt_fim_vigencia%type, ie_tipo_tabela_p pls_conversao_mat.ie_tipo_tabela%type, nr_seq_prestador_p pls_conversao_mat.nr_seq_prestador%type, nr_seq_tipo_prestador_p pls_conversao_mat.nr_seq_tipo_prestador%type, nr_seq_grupo_prestador_p pls_conversao_mat.nr_seq_grupo_prestador%type, cd_material_orig_inicial_p pls_conversao_mat.cd_material_orig_inicial%type, cd_material_orig_final_p pls_conversao_mat.cd_material_orig_final%type, nr_seq_material_orig_p pls_conversao_mat.nr_seq_material_orig%type, ie_tipo_despesa_mat_p pls_conversao_mat.ie_tipo_despesa_mat%type, bind_sql_valor_p INOUT sql_pck.t_dado_bind) FROM PUBLIC;
