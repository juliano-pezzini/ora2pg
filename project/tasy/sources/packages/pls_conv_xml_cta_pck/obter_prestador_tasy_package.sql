-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_conv_xml_cta_pck.obter_prestador_tasy ( ie_origem_p text, cd_prestador_p pls_conta_imp.cd_prestador_exec%type, cd_cgc_prestador_p pls_conta_imp.cd_cgc_prest_exec%type, cd_cpf_prestador_p pls_conta_imp.cd_cpf_prest_exec%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_referencia_p pls_conta_proc.dt_procedimento_referencia%type, cd_prestador_conv_p out pls_protocolo_conta_imp.cd_prestador_conv%type, cd_prest_upper_conv_p out pls_protocolo_conta_imp.cd_prest_upper_conv%type, cd_prest_number_conv_p out pls_protocolo_conta_imp.cd_prest_number_conv%type, cd_cgc_prestador_conv_p out pls_protocolo_conta_imp.cd_cgc_prestador_conv%type, cd_cpf_prestador_conv_p out pls_protocolo_conta_imp.cd_cpf_prestador_conv%type ) AS $body$
DECLARE


nr_seq_prestador_conv_w		pls_protocolo_conta_imp.nr_seq_prestador_conv%type;
nr_seq_prestador_conv_ww	pls_protocolo_conta_imp.nr_seq_prestador_conv%type;
cd_prestador_conv_w		pls_protocolo_conta_imp.cd_prestador_conv%type;
cd_prest_upper_conv_w		pls_protocolo_conta_imp.cd_prest_upper_conv%type;
cd_prest_number_conv_w		pls_protocolo_conta_imp.cd_prest_number_conv%type;
cd_cgc_prestador_conv_w		pls_protocolo_conta_imp.cd_cgc_prestador_conv%type;
cd_cpf_prestador_conv_w		pls_protocolo_conta_imp.cd_cpf_prestador_conv%type;
ie_cgc_valido_w			varchar(1);
ie_cpf_valido_w			varchar(1);
dt_referencia_w			pls_conta_proc.dt_procedimento_referencia%type;


BEGIN
-- carrega os par_metros para vari_veis globais da package

CALL CALL CALL CALL CALL CALL pls_conv_xml_cta_pck.carrega_parametros(cd_estabelecimento_p, ie_origem_p);

nr_seq_prestador_conv_w := null;
dt_referencia_w := coalesce(dt_referencia_p, clock_timestamp());

if (cd_prestador_p IS NOT NULL AND cd_prestador_p::text <> '') then

	cd_prest_upper_conv_w 	:= pls_conv_xml_cta_pck.formata_cd_prestador_upper(cd_prestador_p);
	cd_prestador_conv_w 	:= pls_conv_xml_cta_pck.formata_cd_prestador(cd_prestador_p);		
	cd_prest_number_conv_w 	:= pls_util_pck.obter_somente_numero(cd_prestador_conv_w);
	cd_cgc_prestador_conv_w	:= pls_conv_xml_cta_pck.formata_cd_cgc_prestador_conv(cd_cgc_prestador_p);
	cd_cpf_prestador_conv_w	:= pls_conv_xml_cta_pck.formata_cd_cpf_prestador_conv(cd_cpf_prestador_p);
	
	if (current_setting('pls_conv_xml_cta_pck.ie_prestador_w')::pls_controle_estab.ie_prestador%type = 'S') then
	
		-- se o prestador enviar a sequencia interna no campo cd_prestador_p

		if (current_setting('pls_conv_xml_cta_pck.ie_utiliza_codigo_param_w')::pls_param_importacao_conta.ie_codigo_prest_operadora%type = 'S') then
			
			-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

			-- e exista algum cadastro com este identificador. Prioriza prestador ativo e com dt_exclusao cadastro v_lidos

			select	max(nr_sequencia),
				max(cd_prestador)
			into STRICT	nr_seq_prestador_conv_w,
				cd_prestador_conv_w
			from	pls_prestador
			where	nr_sequencia = cd_prest_number_conv_w
			and	ie_situacao 	= 'A'
			and	cd_estabelecimento = cd_estabelecimento_p
			and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
			and	dt_cadastro	<= dt_referencia_w;
			
			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

				-- e exista algum cadastro com este identificador. Caso n_o tenha prestador ativo na busca anterior,

				--prossegue com a busca considerando apenas o per_odo entre cadastro e exclus_o v_lidos.

				select	max(nr_sequencia),
					max(cd_prestador)
				into STRICT	nr_seq_prestador_conv_w,
					cd_prestador_conv_w
				from	pls_prestador
				where	nr_sequencia = cd_prest_number_conv_w
				and	ie_situacao = 'A'
				and	cd_estabelecimento = cd_estabelecimento_p;
			
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

					-- e exista algum cadastro com este identificador

					select	max(nr_sequencia),
						max(cd_prestador)
					into STRICT	nr_seq_prestador_conv_w,
						cd_prestador_conv_w
					from	pls_prestador
					where	nr_sequencia = cd_prest_number_conv_w
					and	cd_estabelecimento = cd_estabelecimento_p;	
				end if;		
			end if;
			
		elsif (current_setting('pls_conv_xml_cta_pck.ie_utiliza_codigo_param_w')::pls_param_importacao_conta.ie_codigo_prest_operadora%type = 'C') then
			
			-- Primeiro _ verificar o campo cd_prestador, usando as restricoes de ie_prestador_matriz e ie_situacao

			select	max(nr_sequencia)
			into STRICT	nr_seq_prestador_conv_w
			from	pls_prestador
			where	cd_prestador = cd_prestador_p
			and	ie_prestador_matriz = 'S'
			and	ie_situacao = 'A'
			and	cd_estabelecimento = cd_estabelecimento_p
			and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
			and	dt_cadastro	<= dt_referencia_w;
			
			if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				-- Primeiro _ verificar o campo cd_prestador, usando as restricoes de ie_prestador_matriz e ie_situacao

				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador = cd_prestador_p
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A'
				and	cd_estabelecimento = cd_estabelecimento_p;
			end if;
			
			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador = cd_prestador_p
				and	ie_situacao = 'A'
				and	cd_estabelecimento = cd_estabelecimento_p
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
				
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador = cd_prestador_p
					and	ie_situacao = 'A'
					and	cd_estabelecimento = cd_estabelecimento_p;
				
				end if;
				
				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador = cd_prestador_p
					and	cd_estabelecimento = cd_estabelecimento_p
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador = cd_prestador_p
						and	cd_estabelecimento = cd_estabelecimento_p;
					end if;
					
					if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe 

						-- algum prestador ativo passando o inativo de parametro

						nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
						
						if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
							nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
						end if;
					end if;
				end if;
			end if;
			
			--Se n_o retornou verificamos os campos UPPER

			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador_upper = cd_prest_upper_conv_w
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A'
				and	cd_estabelecimento = cd_estabelecimento_p
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
			
				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper = cd_prest_upper_conv_w
					and	ie_prestador_matriz = 'S'
					and	ie_situacao = 'A'
					and	cd_estabelecimento = cd_estabelecimento_p;
				end if;

			
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper = cd_prest_upper_conv_w
					and	ie_situacao = 'A'
					and	cd_estabelecimento = cd_estabelecimento_p
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper = cd_prest_upper_conv_w
						and	ie_situacao = 'A'
						and	cd_estabelecimento = cd_estabelecimento_p;
							
					end if;
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper = cd_prest_upper_conv_w
						and	cd_estabelecimento = cd_estabelecimento_p;
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo com os mesmos dados

						if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
							
							-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo passando o inativo de parametro

							nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
							
							if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
								nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
							end if;
						end if;
					end if;
				end if;
			end if;
			
			--Caso ainda n_o tenha encontrado _ verificado o campo UPPER com elimina_caracteres_especiais

			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador_upper_espe = cd_prestador_conv_w
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A'
				and	cd_estabelecimento = cd_estabelecimento_p
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
				
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '' ) then
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper_espe = cd_prestador_conv_w
					and	ie_prestador_matriz = 'S'
					and	ie_situacao = 'A'
					and	cd_estabelecimento = cd_estabelecimento_p;
					
				end if;
				
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper_espe = cd_prestador_conv_w
					and	ie_situacao = 'A'
					and	cd_estabelecimento = cd_estabelecimento_p
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper_espe = cd_prestador_conv_w
						and	ie_situacao = 'A'
						and	cd_estabelecimento = cd_estabelecimento_p;
					
					end if;
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper_espe = cd_prestador_conv_w
						and	cd_estabelecimento = cd_estabelecimento_p;
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo com os mesmos dados

						if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
							
							-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo passando o inativo de parametro

							nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
							
							if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
								nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
							end if;
						end if;
					end if;
				end if;
			end if;
		end if;
	-- Para quando n_o tiver que restringir por estabelecimento		

	else
		-- se o prestador enviar a sequencia interna no campo cd_prestador_p

		if (current_setting('pls_conv_xml_cta_pck.ie_utiliza_codigo_param_w')::pls_param_importacao_conta.ie_codigo_prest_operadora%type = 'S') then
			
			-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

			-- e exista algum cadastro com este identificador. Prioriza prestador ativo e com dt_exclusao cadastro v_lidos

			select	max(nr_sequencia),
				max(cd_prestador)
			into STRICT	nr_seq_prestador_conv_w,
				cd_prestador_conv_w
			from	pls_prestador
			where	nr_sequencia = cd_prest_number_conv_w
			and	ie_situacao = 'A'
			and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
			and	dt_cadastro	<= dt_referencia_w;
			
			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

				-- e exista algum cadastro com este identificador. Caso n_o tenha prestador ativo na busca anterior,

				--prossegue com a busca considerando apenas o per_odo entre cadastro e exclus_o v_lidos.

				select	max(nr_sequencia),
					max(cd_prestador)
				into STRICT	nr_seq_prestador_conv_w,
					cd_prestador_conv_w
				from	pls_prestador
				where	nr_sequencia = cd_prest_number_conv_w
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
			
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					-- O campo _ convertido antes de chamada a function e aqui s_ _ atribuido caso o parametro seja S

					-- e exista algum cadastro com este identificador

					select	max(nr_sequencia),
						max(cd_prestador)
					into STRICT	nr_seq_prestador_conv_w,
						cd_prestador_conv_w
					from	pls_prestador
					where	nr_sequencia = cd_prest_number_conv_w;	
				end if;		
			end if;
			
		elsif (current_setting('pls_conv_xml_cta_pck.ie_utiliza_codigo_param_w')::pls_param_importacao_conta.ie_codigo_prest_operadora%type = 'C') then
			
			-- Primeiro _ verificar o campo cd_prestador, usando as restricoes de ie_prestador_matriz e ie_situacao

			select	max(nr_sequencia)
			into STRICT	nr_seq_prestador_conv_w
			from	pls_prestador
			where	cd_prestador = cd_prestador_p
			and	ie_prestador_matriz = 'S'
			and	ie_situacao = 'A'
			and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
			and	dt_cadastro	<= dt_referencia_w;
			
			if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				-- Primeiro _ verificar o campo cd_prestador, usando as restricoes de ie_prestador_matriz e ie_situacao

				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador = cd_prestador_p
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A';
			end if;
			
			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador = cd_prestador_p
				and	ie_situacao = 'A'
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
				
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador = cd_prestador_p
					and	ie_situacao = 'A';
				
				end if;
				
				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador = cd_prestador_p
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if ( coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador = cd_prestador_p;
					end if;
					
					if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe 

						-- algum prestador ativo passando o inativo de parametro

						nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
						
						if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
							nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
						end if;
					end if;
				end if;
			end if;
			
			--Se n_o retornou verificamos os campos UPPER

			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador_upper = cd_prest_upper_conv_w
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A'
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
			
				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper = cd_prest_upper_conv_w
					and	ie_prestador_matriz = 'S'
					and	ie_situacao = 'A';
				end if;

			
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper = cd_prest_upper_conv_w
					and	ie_situacao = 'A'
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper = cd_prest_upper_conv_w
						and	ie_situacao = 'A';
							
					end if;
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper = cd_prest_upper_conv_w;
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo com os mesmos dados

						if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
							
							-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo passando o inativo de parametro

							nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
							
							if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
								nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
							end if;
						end if;
					end if;
				end if;
			end if;
			
			--Caso ainda n_o tenha encontrado _ verificado o campo UPPER com elimina_caracteres_especiais

			if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
			
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_conv_w
				from	pls_prestador
				where	cd_prestador_upper_espe = cd_prestador_conv_w
				and	ie_prestador_matriz = 'S'
				and	ie_situacao = 'A'
				and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
				and	dt_cadastro	<= dt_referencia_w;
				
				if ( coalesce(nr_seq_prestador_conv_w::text, '') = '' ) then
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper_espe = cd_prestador_conv_w
					and	ie_prestador_matriz = 'S'
					and	ie_situacao = 'A';
					
				end if;
				
				-- Caso n_o tenha encontrado verificamos se tem sem considerar o ie_prestador_matriz

				if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
				
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_conv_w
					from	pls_prestador
					where	cd_prestador_upper_espe = cd_prestador_conv_w
					and	ie_situacao = 'A'
					and	((coalesce(dt_exclusao::text, '') = '') or (dt_exclusao 	>= dt_referencia_w))
					and	dt_cadastro	<= dt_referencia_w;
					
					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
					
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper_espe = cd_prestador_conv_w
						and	ie_situacao = 'A';
					
					end if;
					
					--Caso n_o tenha encontrado um prestador ativo verificamos se existe um inativo

					if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
						
						select	max(nr_sequencia)
						into STRICT	nr_seq_prestador_conv_w
						from	pls_prestador
						where	cd_prestador_upper_espe = cd_prestador_conv_w;
						
						-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo com os mesmos dados

						if (nr_seq_prestador_conv_w IS NOT NULL AND nr_seq_prestador_conv_w::text <> '') then
							
							-- Se encontrou um inativo verificamos pelo cd_pessoa_fisica ou cd_cgc se existe algum prestador ativo passando o inativo de parametro

							nr_seq_prestador_conv_ww := pls_conv_xml_cta_pck.obter_prestador_ativo( nr_seq_prestador_conv_w, cd_estabelecimento_p);
							
							if (nr_seq_prestador_conv_ww IS NOT NULL AND nr_seq_prestador_conv_ww::text <> '') then
								nr_seq_prestador_conv_w := nr_seq_prestador_conv_ww;
							end if;
						end if;
					end if;
				end if;
			end if;
		end if;
	end if;
end if;

if (coalesce(cd_cgc_prestador_p::text, '') = '') and (coalesce(nr_seq_prestador_conv_w::text, '') = '') then

	-- Tratando quando CNPJ vem na tag codigoNaOperadora	

	if (length(cd_prestador_conv_w) = 14) then
	
		--Caso o tamanho seja igual ao CGC verifica se o mesmo _ um CGC v_lido

		ie_cgc_valido_w := obter_se_cnpj_valido(cd_prestador_conv_w);
		
		--Se for v_lido tenta buscar o nr_seq_prestador

		if (ie_cgc_valido_w = 'S') then		
			nr_seq_prestador_conv_w	:= pls_conv_xml_cta_pck.obter_prestador_cgc(cd_prestador_conv_w, cd_estabelecimento_p);
		end if;
	end if;
end if;

if (coalesce(cd_cpf_prestador_p::text, '') = '') and (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
	
	-- Tratando quando CPF vem na tag codigoNaOperadora	

	if (length(cd_prestador_conv_w) = 11) then
		
		--Caso o tamanho seja igual ao CPF verifica se o mesmo _ um CPF v_lido

		ie_cpf_valido_w := obter_se_cpf_valido(cd_prestador_conv_w);
		
		--Se for v_lido tenta buscar o nr_seq_prestador

		if (ie_cpf_valido_w = 'S') then
			nr_seq_prestador_conv_w := pls_conv_xml_cta_pck.obter_prestador_cpf(cd_prestador_conv_w, cd_estabelecimento_p);
		end if;
	end if;
end if;

-- Faz a verificacao do prestador pelo CNPJ enviado no XML

if (coalesce(nr_seq_prestador_conv_w::text, '') = '') and (cd_cgc_prestador_p IS NOT NULL AND cd_cgc_prestador_p::text <> '') then
	
	nr_seq_prestador_conv_w	:= pls_conv_xml_cta_pck.obter_prestador_cgc(cd_cgc_prestador_p, cd_estabelecimento_p);
	
	--Caso n_o encontrou tenta com o campo cd_cgc_prest_conv onde foi eliminado caracteres especiais e feito um substr

	if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
		nr_seq_prestador_conv_w	:= pls_conv_xml_cta_pck.obter_prestador_cgc(cd_cgc_prestador_conv_w, cd_estabelecimento_p);
	end if;
end if;

-- Faz a verificacao do prestador pelo CPF enviado no XML

if (coalesce(nr_seq_prestador_conv_w::text, '') = '') and (cd_cpf_prestador_p IS NOT NULL AND cd_cpf_prestador_p::text <> '') then
	-- Primeiro verifica com o campo importado no XML

	nr_seq_prestador_conv_w := pls_conv_xml_cta_pck.obter_prestador_cpf(cd_cpf_prestador_p, cd_estabelecimento_p);
	
	--Caso n_o retorne verifica com o campo sem caracteres especiais

	if (coalesce(nr_seq_prestador_conv_w::text, '') = '') then
		nr_seq_prestador_conv_w := pls_conv_xml_cta_pck.obter_prestador_cpf(cd_cpf_prestador_conv_w, cd_estabelecimento_p);
	end if;
end if;

cd_prestador_conv_p	:= cd_prestador_conv_w;
cd_prest_upper_conv_p	:= cd_prest_upper_conv_w;
cd_prest_number_conv_p	:= cd_prest_number_conv_w;
cd_cgc_prestador_conv_p	:= cd_cgc_prestador_conv_w;
cd_cpf_prestador_conv_p	:= cd_cpf_prestador_conv_w;

return;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_conv_xml_cta_pck.obter_prestador_tasy ( ie_origem_p text, cd_prestador_p pls_conta_imp.cd_prestador_exec%type, cd_cgc_prestador_p pls_conta_imp.cd_cgc_prest_exec%type, cd_cpf_prestador_p pls_conta_imp.cd_cpf_prest_exec%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, dt_referencia_p pls_conta_proc.dt_procedimento_referencia%type, cd_prestador_conv_p out pls_protocolo_conta_imp.cd_prestador_conv%type, cd_prest_upper_conv_p out pls_protocolo_conta_imp.cd_prest_upper_conv%type, cd_prest_number_conv_p out pls_protocolo_conta_imp.cd_prest_number_conv%type, cd_cgc_prestador_conv_p out pls_protocolo_conta_imp.cd_cgc_prestador_conv%type, cd_cpf_prestador_conv_p out pls_protocolo_conta_imp.cd_cpf_prestador_conv%type ) FROM PUBLIC;
