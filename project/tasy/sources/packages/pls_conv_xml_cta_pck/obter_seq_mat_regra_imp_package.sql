-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_conv_xml_cta_pck.obter_seq_mat_regra_imp ( cd_material_p pls_material.cd_material%type, cd_material_number_p pls_conta_item_imp.cd_procedimento_conv%type, ie_tipo_despesa_p pls_material.ie_tipo_despesa%type, ie_tipo_relacao_p pls_prestador.ie_tipo_relacao%type, dt_execucao_mat_p pls_conta_item_imp.dt_execucao%type, cd_versao_tiss_conv_p pls_protocolo_conta_imp.cd_versao_tiss_conv%type) RETURNS bigint AS $body$
DECLARE


nr_seq_material_conv_w	pls_material.nr_sequencia%type;
ie_regra_valida_w	boolean;

C01 CURSOR FOR
		SELECT 	ie_tipo_material,
			cd_codigo,
			ie_tipo_despesa,
			ie_tipo_relacao
		from 	pls_regra_importacao_mat
		where	ie_situacao = 'A'
		order by coalesce(ie_tipo_despesa, 'A'),
			 coalesce(ie_tipo_relacao, 'A');

BEGIN
nr_seq_material_conv_w := null;

-- abre o cursor das regras, buscamos todas as regras, visto que n_o _ comum ter muitas regras cadastradas

-- desta forma _ mais r_pido processarmos tudo

for r_c01_w in C01 loop
	
	-- inicia a regra como sendo v_lida

	ie_regra_valida_w := true;
	
	-- se foi passado um c_digo do material precisamos verificar se _ o mesmo da regra

	if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
		
		-- se for diferente do c_digo da regra e o c_digo da regra n_o for nulo ent_o a regra n_o _ v_lida

		-- quando o c_digo da regra for nulo _ v_lido

		if (r_c01_w.cd_codigo <> cd_material_p) and (r_c01_w.cd_codigo IS NOT NULL AND r_c01_w.cd_codigo::text <> '') then
			
			ie_regra_valida_w := false;
		end if;
	end if;
	-- se foi passado tipo despesa precisamos verificar se _ o mesmo da regra

	if (ie_tipo_despesa_p IS NOT NULL AND ie_tipo_despesa_p::text <> '') then
		
		-- se for diferente do do tipo de despesa da regra e o tipo despesa da regra n_o for nulo ent_o a regra n_o _ v_lida

		-- quando o tipo de despesa da regra for nulo _ v_lido

		if (r_c01_w.ie_tipo_despesa <> ie_tipo_despesa_p) and (r_c01_w.ie_tipo_despesa IS NOT NULL AND r_c01_w.ie_tipo_despesa::text <> '') then
			
			ie_regra_valida_w := false;
		end if;
	end if;
	-- se foi passado tipo de relacao precisamos verificar se _ o mesmo da regra

	if (ie_tipo_relacao_p IS NOT NULL AND ie_tipo_relacao_p::text <> '') then
	
		-- se for diferente do do tipo de relacao da regra e o tipo relacao da regra n_o for nulo ent_o a regra n_o _ v_lida

		-- quando o tipo de relacao da regra for nulo _ v_lido

		if (r_c01_w.ie_tipo_relacao <> ie_tipo_relacao_p) and (r_c01_w.ie_tipo_relacao IS NOT NULL AND r_c01_w.ie_tipo_relacao::text <> '') then
			
			ie_regra_valida_w := false;
		end if;
	end if;
	-- se a regra for v_lida tenta identificar o material de acordo com o tipo encontrado na regra

	if (ie_regra_valida_w) then
		nr_seq_material_conv_w := pls_conv_xml_cta_pck.obter_material_parametro_imp(	r_c01_w.ie_tipo_material, dt_execucao_mat_p,
										cd_material_number_p, cd_versao_tiss_conv_p);
	end if;
end loop;

return	nr_seq_material_conv_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pls_conv_xml_cta_pck.obter_seq_mat_regra_imp ( cd_material_p pls_material.cd_material%type, cd_material_number_p pls_conta_item_imp.cd_procedimento_conv%type, ie_tipo_despesa_p pls_material.ie_tipo_despesa%type, ie_tipo_relacao_p pls_prestador.ie_tipo_relacao%type, dt_execucao_mat_p pls_conta_item_imp.dt_execucao%type, cd_versao_tiss_conv_p pls_protocolo_conta_imp.cd_versao_tiss_conv%type) FROM PUBLIC;
