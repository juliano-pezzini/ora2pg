-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE tax_dmed_ir_pck.add_monthly_data (data_array_p response_reference, is_provider_p text, procedure_name_p text) AS $body$
DECLARE

      new_sequence    tax_dmed_dados_gerais.nr_sequencia%type;
      total_amount_w  double precision;

BEGIN
      if (data_array_p IS NOT NULL AND data_array_p::text <> '') and data_array_p.count > 0 then
          for i in data_array_p.first..data_array_p.last loop
		if (data_array_p[i]coalesce(.item_value::text, '') = '') or (data_array_p[i].item_value <> 0) or
			(data_array_p[i].item_value = 0 AND data_array_p[i].higher_amount > 0) then
			PERFORM set_config('tax_dmed_ir_pck.data_table_count', current_setting('tax_dmed_ir_pck.data_table_count')::bigint + 1, false);

			select  nextval('tax_dmed_dados_gerais_seq')
			into STRICT    new_sequence
			;

			total_amount_w := data_array_p[i].total_amount;
		
			if 	current_setting('tax_dmed_ir_pck.general_rule_vector')::general_rule_reference[1].ie_interest_fine = 'S' then
				total_amount_w := total_amount_w + coalesce(data_array_p[i].interest_amount,0) + coalesce(data_array_p[i].fine_amount,0);
			end if;
		
			if 	current_setting('tax_dmed_ir_pck.low_value_type_rule_vector')::low_value_type_rule_reference[1].ie_higher_receipt_value = 'S' then
				total_amount_w := total_amount_w + coalesce(data_array_p[i].higher_amount,0);
			end if;
		
			if 	current_setting('tax_dmed_ir_pck.low_value_type_rule_vector')::low_value_type_rule_reference[1].ie_gloss = 'N' then
				total_amount_w := total_amount_w - coalesce(data_array_p[i].gloss_amount,0);
			end if;
		
			if 	current_setting('tax_dmed_ir_pck.low_value_type_rule_vector')::low_value_type_rule_reference[1].ie_credit_invoice = 'N' then
				total_amount_w := total_amount_w - coalesce(data_array_p[i].credit_note_amount,0);
			end if;
		
			if 	current_setting('tax_dmed_ir_pck.low_value_type_rule_vector')::low_value_type_rule_reference[1].ie_trading_fee = 'S' then
				total_amount_w := total_amount_w + coalesce(data_array_p[i].trading_fee_amount,0);
			end if;

			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nr_sequencia               :=  new_sequence;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).dt_atualizacao             :=  clock_timestamp();
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nm_usuario                 :=  procedure_name_p;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).dt_atualizacao_nrec        :=  clock_timestamp();
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nm_usuario_nrec            :=  procedure_name_p;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nr_seq_lote_mensal         :=  current_setting('tax_dmed_ir_pck.batch_monthly_sequence')::tax_dmed_lote_mensal.nr_sequencia%type;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nr_documento               :=  data_array_p[i].document_sequence;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).cd_responsavel_pagamento   :=  data_array_p[i].responsible_code;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).cd_beneficiario            :=  data_array_p[i].beneficiary_code;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).vl_pago                    :=  total_amount_w;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).dt_liquidacao              :=  data_array_p[i].date_document;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).ie_prestador               :=  is_provider_p;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).nr_seq_dados_dmed          :=  data_array_p[i].data_code;
			current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).cd_estabelecimento         :=  current_setting('tax_dmed_ir_pck.reference_establishment')::tax_dmed_lote.cd_estabelecimento%type;
      current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).ie_inconsistente           :=  tax_dmed_ir_pck.exists_errors_in_registry(data_array_p[i].responsible_code,
                                                                                            data_array_p[i].beneficiary_code,
                                                                                            total_amount_w);

			if data_array_p[i](.refund_provider_pf IS NOT NULL AND .refund_provider_pf::text <> '') then
				current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).cd_pf_prestador_remb    :=  data_array_p[i].refund_provider_pf;
      elsif data_array_p[i](.refund_provider_pj IS NOT NULL AND .refund_provider_pj::text <> '') then
			  current_setting('tax_dmed_ir_pck.data_table')::general_data_type(current_setting('tax_dmed_ir_pck.data_table_count')::bigint).cd_cnpj_prestador_remb  :=  data_array_p[i].refund_provider_pj;
			end if;

			if 	current_setting('tax_dmed_ir_pck.data_table')::general_data_type.count >= 1000 then
				CALL tax_dmed_ir_pck.write_data_table();
			end if;
		end if;
          end loop;
      end if;
  end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tax_dmed_ir_pck.add_monthly_data (data_array_p response_reference, is_provider_p text, procedure_name_p text) FROM PUBLIC;
