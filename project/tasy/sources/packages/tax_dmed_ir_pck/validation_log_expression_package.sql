-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION tax_dmed_ir_pck.validation_log_expression (sql_p text, expression_p text, additional_index_p bigint default 0) RETURNS bigint AS $body$
DECLARE

    sql_aux_w varchar(1000);
    sql_aux1_w varchar(100);
    index_w bigint;
    index2_w bigint;
    index3_w bigint;
    return_position_expression_w bigint;
    return_vector_log varchar(1000);
    field_aux_w varchar(500);
    quote_w varchar(1) := chr(39);
    aux_length_w bigint;

BEGIN
      sql_aux_w := substr(sql_p, 1, regexp_instr(sql_p, '1|0', 1, 1, 0, 'i'));
      return_position_expression_w := tax_dmed_ir_pck.find_log_expressions(sql_aux_w);

      if (return_position_expression_w = 0) then
        sql_aux1_w := regexp_replace(sql_aux_w, '\s+', '');
        index_w := instr(sql_aux1_w, '(', 1, 1);
        index2_w := instr(sql_aux1_w, ',', 1, 1);
        index3_w := instr(sql_aux1_w, '=', 1, 1);
        field_aux_w := substr(sql_aux1_w,index_w+1, (index2_w-index_w)-1);

        if (expression_p = 'tax_dmed_ir_pck.in_array()') then
          if (substr(sql_aux1_w,index2_w+2,1) <> 'D') then
            return_vector_log := tax_dmed_ir_pck.vector_to_str(substr(sql_aux1_w, index2_w+2, 1));
          else
            return_vector_log := tax_dmed_ir_pck.vector_to_str(substr(sql_aux1_w, index2_w+2, 1), additional_index_p);
            select coalesce(max(length(return_vector_log)),0)
            into STRICT aux_length_w
;

            if (aux_length_w = 0) then
              return_vector_log := '(' || quote_w || quote_w || ')';
            end if;
          end if;

          if (substr(sql_aux1_w,index3_w+1,1) = '1') then
            CALL tax_dmed_ir_pck.add_log_expression(sql_aux_w, field_aux_w  || ' in ' || return_vector_log);
          else
            CALL tax_dmed_ir_pck.add_log_expression(sql_aux_w, field_aux_w  || ' not in ' || return_vector_log);
          end if;

          return current_setting('tax_dmed_ir_pck.log_expressions')::log_expressions_reference.count;
        else --tax_dmed_ir_pck.is_empty()
          return_vector_log := tax_dmed_ir_pck.vector_to_str(substr(sql_aux1_w,index_w+2, 1));
          if (substr(sql_aux1_w,index3_w+1,1) = '1') then        
            CALL tax_dmed_ir_pck.add_log_expression(sql_aux_w, ' (select nvl(max(length(' || quote_w || return_vector_log || quote_w || ')),0) from dual) = 0' );
          else
            CALL tax_dmed_ir_pck.add_log_expression(sql_aux_w, ' (select nvl(max(length(' || quote_w || return_vector_log || quote_w || '),0) from dual) > 0' );
          end if;
          return current_setting('tax_dmed_ir_pck.log_expressions')::log_expressions_reference.count;
        end if;
      end if;
      return return_position_expression_w;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION tax_dmed_ir_pck.validation_log_expression (sql_p text, expression_p text, additional_index_p bigint default 0) FROM PUBLIC;
