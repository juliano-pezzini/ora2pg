-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_prescription.send_inoutpatient_presc_data (( nr_prescricao_p bigint, c_order_unit_p text, order_class_type_p text, processing_classication_p text, ds_file_output_p out text ) as c01 CURSOR ) AS $body$
DECLARE

         PERFORM     CASE WHEN processing_classication_p='unexecutedOrderMessageCancelPrescription' THEN '03' WHEN processing_classication_p='unexecutedOrderMessageRequestPrescription' THEN '01' END      process_classif,
                    order_class_type_p                                    order_class,
                    a.nr_order_patient_seq                                order_number,
                    b.medical_record_id                                          patient_identifier,        
                    to_char(c.dt_inicio, 'YYYYMMDD')                      consultation_date,                                
                    case when (a.cd_especialidade_med IS NOT NULL AND a.cd_especialidade_med::text <> '') then
                        coalesce(nais_mla_prescription.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', a.cd_especialidade_med), ' ')
                        when (a.cd_departamento_med IS NOT NULL AND a.cd_departamento_med::text <> '') then
                        coalesce(nais_mla_prescription.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', a.CD_DEPARTAMENTO_MED), ' ')  
                        else '00'
                        end as department_code,
                    CASE WHEN get_in_out_patient_clasif(b.patient_id, coalesce(c.dt_inicio,clock_timestamp()))='O' THEN 1  ELSE 2 END  patient_classification,
                    coalesce(b.room_id, ' ')        ward_code,                 
                    coalesce(b.room_id, ' ')        room_number,               
                    '1'                        blood_tranfusion_type,     
                    '00'                       insurance_number,          
                    c.cd_medico                doctor_code,               
                    '0'                        patient_newborn,           
                    ' '                        prescription_classfication,                                
                    '   '  requestor_code,    
                    ' '     mutual_exclusion_rule,     
                    '0000'  division_number,           
                    ' '     blank_one,                 
                    ' '     blank_two  
                      
        from    prescr_material p,
                cpoe_material   c,
                bft_encounter_v b,
                cpoe_order_unit a,
                cpoe_tipo_pedido cp,	
                cpoe_rp          d
        where   p.nr_prescricao=nr_prescricao_p
                and b.encounter_id=c.nr_atendimento
                and p.nr_seq_mat_cpoe=c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit =a.nr_sequencia
                and a.nr_order_unit=c_order_unit_p
                and  d.nr_sequencia = c.nr_seq_cpoe_rp
                and a.si_type_of_prescription in ('BRME','INPDP','INPR','INPT','INPI','INPAT','OPIHO','OPOOH')
                and cp.nr_seq_sub_grp            = 'ME'
                and (case 
                          when(order_class_type_p = 'H1') and  a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT') THEN (1)
                          when(order_class_type_p = 'H3') and  a.si_type_of_prescription ='INPDP'   THEN (1) 
                          when(order_class_type_p = 'HJ') and  a.si_type_of_prescription ='BRME'    THEN (1)
                          when(order_class_type_p = 'H0') and  a.si_type_of_prescription ='OPIHO'   THEN (1) 
                          when(order_class_type_p = 'H8') and  a.si_type_of_prescription ='OPOOH'   THEN (1)
                          else 0
                     end) = 1  LIMIT 1;



-----End of Accounting Info
c02 return;

-----End of Execution Info
    c03 CURSOR FOR
     SELECT 0 slip_code,
			0 number_of_details,
			' ' medical_treatment_detail_01, 
			' ' medical_treatment_detail_02, 
			' ' medical_treatment_detail_03, 
			' ' medical_treatment_detail_04, 
			' ' medical_treatment_detail_05, 
			' ' medical_treatment_detail_06, 
			' ' medical_treatment_detail_07, 
			' ' medical_treatment_detail_08, 
			' ' medical_treatment_detail_09, 
			' ' medical_treatment_detail_10, 
			' ' blank_03,
			' ' eot 
;



       
        r_c01_w                       accinforectyp;
        r_c02_w                       execinforedtyp;

        order_class_w                 varchar(2) := '';
        cd_contin_flag_w              varchar(1) := 'C';
        loop_count_w                  smallint := 0;
        inside_loop_count_w           smallint := 1;
        counter_w                     smallint := 0;
        json_output_w                 philips_json;
        current_setting('nais_mla_prescription.json_output_list_w')::philips_json_list            philips_json_list;
        processing_class               varchar(2) := '  ';
        ds_log_message_w               varchar(600);
        current_setting('nais_mla_prescription.nr_seq_int_call_log_w')::bigint          bigint   := 0;




BEGIN
        PERFORM set_config('nais_mla_prescription.ds_line_w', null, false);
        counter_w           := 0;
        loop_count_w        := 1;
        json_output_w       := philips_json();
        PERFORM set_config('nais_mla_prescription.json_output_list_w', philips_json_list(), false);
        select CASE WHEN processing_classication_p='unexecutedOrderMessageCancelPrescription' THEN '03' WHEN processing_classication_p='unexecutedOrderMessageRequestPrescription' THEN '01' END
        into STRICT processing_class
;

           for i in 1..loop_count_w loop begin
                if ( i = loop_count_w ) then
                    cd_contin_flag_w := 'E';
                end if;

                  CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.nais_common_header('MJ', 0, processing_class, cd_contin_flag_w, 1, 810, 944);

                   open c01;
                    loop
                    begin
                        fetch c01 into r_c01_w;
                        exception
                        when others THEN
                        ds_log_message_w := 'Exception occured while forming cursor accounting record for : '
                                        ||' Prescription number'
                                        || nr_prescricao_p
                                        || ' '
                                        ||sqlerrm;

                            if length(ds_log_message_w) < 500 then
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), processing_classication_p, processing_classication_p ,
                                        'E', 'E', null, 'MJ', null,ds_log_message_w, 0,current_setting('nais_mla_prescription.nr_seq_int_call_log_w')::bigint, to_char(nr_prescricao_p), 944,'E');
                            else
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), processing_classication_p, processing_classication_p , 
                                        'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,current_setting('nais_mla_prescription.nr_seq_int_call_log_w')::bigint, to_char(nr_prescricao_p), 944,'E');
                            end if;
                    end;

                        EXIT WHEN NOT FOUND; /* apply on c01 */
                        CALL CALL CALL CALL CALL nais_mla_prescription.common_accounting_info(r_c01_w);
                    end loop;
                    close c01;

                    open c02;
                    loop
                    begin
                        fetch c02 into r_c02_w;
                        exception
                        when others THEN
                        ds_log_message_w := 'Exception occured while forming cursor execution record for : '
                                        ||' Prescription number'
                                        || nr_prescricao_p
                                        || ' '
                                        ||sqlerrm;

                            if length(ds_log_message_w) < 500 then
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), processing_classication_p, processing_classication_p ,
                                        'E', 'E', null, 'MJ', null,ds_log_message_w, 0,current_setting('nais_mla_prescription.nr_seq_int_call_log_w')::bigint, to_char(nr_prescricao_p), 944,'E');
                            else
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), processing_classication_p, processing_classication_p , 
                                        'E', 'E', null, 'MJ', null,substr(ds_log_message_w,1,499), 0,current_setting('nais_mla_prescription.nr_seq_int_call_log_w')::bigint, to_char(nr_prescricao_p), 944,'E');
                            end if;
                    end;

                        EXIT WHEN NOT FOUND; /* apply on c02 */
                        CALL CALL CALL CALL CALL nais_mla_prescription.common_execution_info(r_c02_w);
                    end loop;
                    close c02;

               
       for r_c03 in C03 
		loop
			begin
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.slip_code,3,'L','0');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.number_of_details,2,'L','0');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_01,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_02,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_03,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_04,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_05,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_06,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_07,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_08,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_09,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.medical_treatment_detail_10,64,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.blank_03,4,'L',' ');
				CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_prescription.append_text(r_c03.eot,1,'L');				
			end;
		end loop;


            ds_file_output_p:= ds_file_output_p || current_setting('nais_mla_prescription.ds_line_w')::varchar(32767) ||',';

            PERFORM set_config('nais_mla_prescription.ds_line_w', null, false);
            end;
        end loop;

         PERFORM set_config('nais_mla_prescription.ds_line_w', null, false);

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_prescription.send_inoutpatient_presc_data (( nr_prescricao_p bigint, c_order_unit_p text, order_class_type_p text, processing_classication_p text, ds_file_output_p out text ) as c01 CURSOR ) FROM PUBLIC;
