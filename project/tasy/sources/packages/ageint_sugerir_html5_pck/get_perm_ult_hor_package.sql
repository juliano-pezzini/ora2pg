-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ageint_sugerir_html5_pck.get_perm_ult_hor ( cd_agenda_p bigint, dt_agenda_p timestamp, nr_minuto_duracao_p bigint, nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, cd_medico_p bigint, nm_usuario_p text, dt_inicial_p INOUT timestamp, dt_final_p INOUT timestamp, ds_retorno_p INOUT text) AS $body$
DECLARE


ie_consistir_agexame_w			funcao_parametro.vl_parametro%TYPE;
ie_cons_dur_exames_adic_w		funcao_parametro.vl_parametro%TYPE;
ie_nao_consiste_fim_turno_w		proc_interno.ie_nao_consiste_fim_turno%TYPE;
nr_seq_proc_interno_w			agenda_integrada_item.nr_seq_proc_interno%TYPE;
nr_seq_exame_adic_w				ageint_exame_adic_item.nr_seq_proc_interno%TYPE;
nr_duracao_item_w				agenda_integrada_item.nr_minuto_duracao%TYPE;
qt_minuto_w						tempo_procedimento.qt_minuto%TYPE;
min_total_w						bigint := 0;
nr_minuto_duracao_w				agenda_paciente.nr_minuto_duracao%TYPE;
qt_minuto_aux_adic_w			tempo_procedimento.qt_minuto%TYPE;
qt_minuto_aux_princ_w			tempo_procedimento.qt_minuto%TYPE;
qt_minuto_tot_adic_w			bigint := 0;
ie_lado_w						agenda_integrada_item.ie_lado%TYPE;
ie_lado_adic_w					ageint_exame_adic_item.ie_lado%TYPE;
ie_dia_semana_w					smallint;
dt_inicial_w					timestamp;
dt_final_w						timestamp;
ds_retorno_w					varchar(1) := 'S';
cd_pessoa_fisica_ageint_w		agenda_integrada.cd_pessoa_fisica%TYPE;
cd_convenio_ageint_w			tempo_procedimento.cd_convenio%TYPE;
cd_categoria_ageint_w			tempo_procedimento.cd_categoria%TYPE;
cd_plano_ageint_w				tempo_procedimento.cd_plano%TYPE;

C01 CURSOR FOR
	SELECT	nr_seq_proc_interno,
			ie_lado
	FROM	ageint_exame_adic_item
	WHERE	nr_seq_item	= nr_seq_ageint_item_p;


BEGIN
obter_param_usuario(869, 303, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cons_dur_exames_adic_w);
obter_param_usuario(869, 181, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consistir_agexame_w);

IF (coalesce(ie_cons_dur_exames_adic_w::text, '') = '') THEN
	ie_cons_dur_exames_adic_w := 'N';
END IF;

SELECT	MAX(nr_seq_proc_interno),
		MAX(nr_minuto_duracao),
		MAX(ie_lado),
		MAX(cd_pessoa_fisica),
		COALESCE(MAX(c.ie_nao_consiste_fim_turno),'N')
INTO STRICT  	nr_seq_proc_interno_w,
		nr_duracao_item_w,
		ie_lado_w,
		cd_pessoa_fisica_ageint_w,
		ie_nao_consiste_fim_turno_w
FROM  	agenda_integrada_item 	a,
		agenda_integrada 		b,
		proc_interno 			c
WHERE 	a.nr_sequencia 			= nr_seq_ageint_item_p
AND		a.nr_seq_agenda_int 	= b.nr_sequencia
AND		a.nr_seq_proc_interno 	= c.nr_Sequencia;

ie_dia_semana_w := obter_cod_dia_semana(dt_agenda_p);

IF (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') AND (coalesce(nr_duracao_item_w::text, '') = '') THEN
	Obter_Tempo_Padrao_Ageint(	nr_seq_proc_interno_w,
								NULL,
								NULL,
								cd_medico_p,
								cd_agenda_p,
								cd_pessoa_fisica_ageint_w,
								qt_minuto_w,
								ie_lado_w,
								cd_convenio_ageint_w,
								cd_categoria_ageint_w,
								cd_plano_ageint_w,
								NULL,
								ie_dia_semana_w);
END IF;

/*INICIO - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/


IF (ie_cons_dur_exames_adic_w = 'S') THEN
	--Exame adicional

	OPEN C01;
	LOOP
    FETCH C01 INTO
        nr_seq_exame_adic_w,
        ie_lado_adic_w;
    EXIT WHEN NOT FOUND; /* apply on C01 */
	
    BEGIN
		IF (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '') THEN
			obter_tempo_padrao_ageint(	nr_seq_exame_adic_w,
										NULL, 
										NULL, 
										cd_medico_p, 
										cd_agenda_p, 
										cd_pessoa_fisica_ageint_w, 
										qt_minuto_aux_adic_w,
										ie_lado_adic_w, 
										cd_convenio_ageint_w, 
										cd_categoria_ageint_w, 
										cd_plano_ageint_w, 
										NULL, 
										ie_dia_semana_w);

            IF (qt_minuto_aux_adic_w IS NOT NULL AND qt_minuto_aux_adic_w::text <> '') THEN
                qt_minuto_tot_adic_w := qt_minuto_aux_adic_w + qt_minuto_tot_adic_w;
            END IF;
        END IF;
	END;
    END LOOP;
    CLOSE C01;

	--Exame normal

	obter_tempo_padrao_ageint(	nr_seq_proc_interno_w,
								NULL, 
								NULL, 
								cd_medico_p, 
								cd_agenda_p, 
								cd_pessoa_fisica_ageint_w, 
								qt_minuto_aux_princ_w,
								ie_lado_adic_w, 
								cd_convenio_ageint_w, 
								cd_categoria_ageint_w, 
								cd_plano_ageint_w, 
								NULL, 
								ie_dia_semana_w);

    IF (qt_minuto_aux_princ_w IS NOT NULL AND qt_minuto_aux_princ_w::text <> '') THEN
        qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + qt_minuto_aux_princ_w;
    END IF;
END IF;
/*FIM - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/



IF (coalesce(qt_minuto_tot_adic_w, 0) = 0) OR (coalesce(qt_minuto_tot_adic_w::text, '') = '') THEN
	IF (coalesce(qt_minuto_w, 0) > 0) THEN
		qt_minuto_tot_adic_w := qt_minuto_w;
	ELSIF (coalesce(nr_minuto_duracao_p, 0) > 0) THEN
		qt_minuto_tot_adic_w := nr_minuto_duracao_p;
	ELSIF (coalesce(nr_duracao_item_w, 0) > 0) THEN
		qt_minuto_tot_adic_w := nr_duracao_item_w;
	END IF;
END IF;

min_total_w 	:= COALESCE(qt_minuto_tot_adic_w, nr_duracao_item_w, nr_minuto_duracao_p);
dt_inicial_w	:= dt_agenda_p;
dt_final_w  	:= dt_agenda_p + min_total_w / 1440;

IF (ie_nao_consiste_fim_turno_w = 'N') AND (min_total_w > 0) THEN
	IF (ie_consistir_agexame_w = 'S') THEN
		SELECT	SUM(nr_minuto_duracao)
		INTO STRICT 	nr_minuto_duracao_w
		FROM	agenda_paciente
		WHERE	cd_agenda = cd_agenda_p
		AND 	hr_inicio BETWEEN dt_inicial_w AND dt_final_w
		AND 	ie_status_agenda = 'L';

		IF (nr_minuto_duracao_w < min_total_w) THEN
			ds_retorno_w := 'N';
		END IF;
	END IF;
END IF;

dt_inicial_p	:= dt_inicial_w;
dt_final_p		:= dt_final_w;
ds_retorno_p	:= ds_retorno_w;

END;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_sugerir_html5_pck.get_perm_ult_hor ( cd_agenda_p bigint, dt_agenda_p timestamp, nr_minuto_duracao_p bigint, nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, cd_medico_p bigint, nm_usuario_p text, dt_inicial_p INOUT timestamp, dt_final_p INOUT timestamp, ds_retorno_p INOUT text) FROM PUBLIC;
