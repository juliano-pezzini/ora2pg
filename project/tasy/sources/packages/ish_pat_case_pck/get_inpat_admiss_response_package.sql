-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ish_pat_case_pck.get_inpat_admiss_response ( nr_sequencia_p bigint) AS $body$
DECLARE


_ora2pg_r RECORD;
nr_seq_regra_w			intpd_eventos_sistema.nr_seq_regra_conv%type;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
reg_integracao_p		gerar_int_padrao.reg_integracao;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;

nr_seq_doc_origem_w		intpd_fila_transmissao.nr_seq_documento%type;
nr_seq_agrupador_w		intpd_fila_transmissao.nr_seq_agrupador%type;
ds_xml_w				text;
xml_w				xml;
inpatadmissdata_w 			xml;
inpatadmissdataat_w		xml;
outpatvisitdata_w		xml;
outpatvisitdataat_w		xml;

episodio_paciente_w		episodio_paciente%rowtype;
atendimento_paciente_w		atendimento_paciente%rowtype;
atend_paciente_unidade_w		atend_paciente_unidade%rowtype;
atend_paciente_unidade_ww		atend_paciente_unidade%rowtype;
atendimento_paciente_inf_w	atendimento_paciente_inf%rowtype;

pf_medico_externo_w		pf_medico_externo%rowtype;

cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
nm_fantasia_w	pessoa_juridica.nm_fantasia%type;
nr_seq_interno_w 	unidade_atendimento.nr_seq_interno%type;
ds_motivo_w 	motivo_cancel_atend.ds_motivo%type;

dt_atualizacao_nrec_w		timestamp;
dt_atualizacao_w			timestamp;
nm_usuario_nrec_w			usuario.nm_usuario%type;
nm_usuario_w			usuario.nm_usuario%type;
dt_cancelamento_w		timestamp;
nr_seq_motivo_cancel_w		bigint;
ds_erro_w			varchar(2000);
nr_doc_externo_w		intpd_fila_transmissao.nr_doc_externo%type;
ie_controla_alta_w  pep_pac_ci.ie_controla_alta%type;
nr_sequencia_w      pep_pac_ci.nr_sequencia%type;
ds_titulo_w         pep_pac_ci.ds_titulo%type;
cd_profissional_w   pep_pac_ci.cd_profissional%type;

c01 CURSOR FOR
SELECT	a.*,
	'INPAT' ie_tipo_episodio
from	xmltable('/InpatAdmissData' passing inpatadmissdata_w columns
	client			varchar(3)	path	'Client',
	institution			varchar(4)	path	'Institution',
	inststext			varchar(15)	path	'InstStext',
	patcaseid			varchar(10)	path	'Patcaseid',
--	chkdigitcase		varchar2(1)	path	'Chkdigitcase',
	casetype			varchar(1)	path	'Casetype',
	casetypeext		varchar(1)	path	'CasetypeExt',
--	casetypestext		varchar2(14)	path	'CasetypeStext',
	patientid			varchar(10)	path	'Patientid',
	billingstatus		varchar(1)	path	'BillingStatus',
--	billstext			varchar2(60)	path	'BillStext',
	restricted			varchar(1)	path	'Restricted',
--	geograrea		varchar2(9)	path	'GeogrArea',
--	geograreatext		varchar2(40)	path	'GeogrAreaText',
	casecomment		varchar(30)	path	'CaseComment',
	casestatus		varchar(1)	path	'CaseStatus',
	casestatstext		varchar(60)	path	'CaseStatStext',
	emergadm		varchar(1)	path	'EmergAdm',
	quickadm			varchar(1)	path	'QuickAdm',
	startdate			varchar(10)	path	'StartDate',
	enddate			varchar(10)	path	'EndDate',
--	billblock			varchar2(1)	path	'BillBlock',
--	billblockstext		varchar2(60)	path	'BillBlockStext',
--	prevtreatdays		varchar2(3)	path	'Prevtreatdays',
--	statstcblock		varchar2(1)	path	'StatstcBlock',
--	pparelev			varchar2(1)	path	'PpaRelev',
--	recorder			varchar2(12)	path	'RecOrder',
--	previousdays		varchar2(3)	path	'PreviousDays',
--	objectno			varchar2(22)	path	'ObjectNo',
--	nonresident		varchar2(1)	path	'NonResident',
--	children			varchar2(2)	path	'Children',
--	foreigncase		varchar2(1)	path	'ForeignCase',
	casecategory		varchar(2)	path	'CaseCategory',
	casecategorystext		varchar(25)	path	'CaseCategoryStext',
--	employeetype		varchar2(2)	path	'EmployeeType',
--	employeetypestext		varchar2(20)	path	'EmployeeTypeStext',
--	cantontariff		varchar2(3)	path	'CantonTariff',
--	cantontariffstext		varchar2(25)	path	'CantonTariffStext',
--	cantonconvtn		varchar2(3)	path	'CantonConvtn',
--	cantonconvtnstext		varchar2(25)	path	'CantonConvtnStext',
--	srvgento			varchar2(10)	path	'SrvGenTo',
	healeddate		varchar(10)	path	'HealedDate',
--	applstatus		varchar2(2)	path	'Applstatus',
--	applstatusstext		varchar2(40)	path	'ApplstatusStext',
	specialty			varchar(4)	path	'Specialty',
	specialtystext		varchar(30)	path	'SpecialtyStext',
--	caseendtype		varchar2(2)	path	'Caseendtype',
--	caseendtypestext		varchar2(25)	path	'CaseendtypeStext',
--	doctype			varchar2(2)	path	'DocType',
--	doctypetext		varchar2(15)	path	'DocTypeText',
--	docno			varchar2(30)	path	'DocNo',
--	choicecl			varchar2(1)	path	'ChoiceCl',
--	choicecltext		varchar2(25)	path	'ChoiceClText',
	patweight			varchar(7)	path	'PatWeight',
--	weightunit		varchar2(3)	path	'WeightUnit',
--	weightunitiso		varchar2(3)	path	'WeightUnitIso',
	patheight			varchar(5)	path	'PatHeight',
--	heightunit			varchar2(3)	path	'HeightUnit',
--	heightunitiso		varchar2(3)	path	'HeightUnitIso',
	movemntseqno		varchar(5)	path	'MovemntSeqno',
	movemntctgry		varchar(1)	path	'MovemntCtgry',
	movemntctgrytext		varchar(15)	path	'MovemntCtgryText',
	movemnttype		varchar(2)	path	'MovemntType',
--	movemnttypetext		varchar2(15)	path	'MovemntTypeText',
	movemntreas1		varchar(2)	path	'MovemntReas1',
	movemntreas1text		varchar(15)	path	'MovemntReas1Text',
	movemntreas2		varchar(2)	path	'MovemntReas2',
--	movemntreas2text		varchar2(15)	path	'MovemntReas2Text',
	movemntdate		varchar(10)	path	'MovemntDate',
	movemnttime		varchar(8)	path	'MovemntTime',
	statusind			varchar(1)	path	'StatusInd',
--	statusindtext		varchar2(60)	path	'StatusIndText',
	movemntenddate		varchar(10)	path	'MovemntEnddate',
	movemntendtime		varchar(8)	path	'MovemntEndtime',
	treatmcategory		varchar(6)	path	'Treatmcategory',
	treatmctgrystext		varchar(15)	path	'TreatmctgryStext',
	treatmctgrytext		varchar(30)	path	'TreatmctgryText',
--	class			varchar2(4)	path	'Class',
--	classstext			varchar2(15)	path	'ClassStext',
--	classtext			varchar2(30)	path	'ClassText',
--	movemntspec		varchar2(4)	path	'MovemntSpec',
--	movemntspecstext		varchar2(30)	path	'MovemntSpecStext',
	admittdept		varchar(8)	path	'AdmittDept',
	admittdeptstext		varchar(12)	path	'AdmittDeptStext',
	department		varchar(8)	path	'Department',
--	departmentstext		varchar2(12)	path	'DepartmentStext',
	nurstreatou		varchar(8)	path	'NursTreatOu',
	nurstreatoustext		varchar(12)	path	'NursTreatOuStext',
	room			varchar(8)	path	'Room',
	roomidentifier		varchar(8)	path	'RoomIdentifier',
	bed			varchar(8)	path	'Bed',
	bedidentifier		varchar(8)	path	'BedIdentifier',
--	roomstatusind		varchar2(1)	path	'RoomStatusInd',
--	roomstatusindtext		varchar2(60)	path	'RoomStatusIndText',
--	phoneno			varchar2(16)	path	'Phoneno',
--	tv			varchar2(1)	path	'Tv',
	lengthofstay		varchar(5)	path	'LengthOfStay',
	refpsttrttype		varchar(2)	path	'RefPsttrtType',
--	refpsttrttypetext		varchar2(15)	path	'RefPsttrtTypeText',
	refhospital		varchar(10)	path	'RefHospital',
	waitlistprio		varchar(2)	path	'WaitlistPrio',
--	waitlistpriotext		varchar2(15)	path	'WaitlistPrioText',
--	latestadm			varchar2(10)	path	'LatestAdm',
--	waitlisttype		varchar2(6)	path	'WaitlistType',
--	waitlisttypetext		varchar2(25)	path	'WaitlistTypeText',
	waitlistdeldat		varchar(10)	path	'WaitlistDeldat',
--	waitlistdelreas		varchar2(3)	path	'WaitlistDelreas',
--	waitlistdelreastext		varchar2(60)	path	'WaitlistDelreasText',
	waitliststatus		varchar(2)	path	'WaitlistStatus',
--	waitliststatustext		varchar2(20)	path	'WaitlistStatusText',
	waitlisthosp		varchar(10)	path	'WaitlistHosp',
--	waitlistinclon		varchar2(10)	path	'WaitlistInclon',
--	treatcode			varchar2(1)	path	'TreatCode',
--	treatcodetext		varchar2(25)	path	'TreatCodeText',
	emergcase		varchar(1)	path	'EmergCase',
	accident			varchar(3)	path	'Accident',
	accidenttext		varchar(15)	path	'AccidentText',
	accidentdate		varchar(10)	path	'AccidentDate',
	accidenttime		varchar(8)	path	'AccidentTime',
	accidentno		varchar(12)	path	'AccidentNo',
	accidentloc		varchar(25)	path	'AccidentLoc',
--	accidentemsvce		varchar2(15)	path	'AccidentEmsvce',
--	accident3rdpty		varchar2(1)	path	'Accident3rdpty',
--	accidentemstyp		varchar2(4)	path	'AccidentEmstyp',
--	accidentemstyptext		varchar2(20)	path	'AccidentEmstypText',
	arrivalmode		varchar(2)	path	'ArrivalMode',
	arrivalmodetext		varchar(20)	path	'ArrivalModeText',
	creationdate		varchar(10)	path	'CreationDate',
	creationuser		varchar(12)	path	'CreationUser',
	updatedate		varchar(10)	path	'UpdateDate',
	updateuser		varchar(12)	path	'UpdateUser',
	cancelind		varchar(1)	path	'CancelInd',
	canceldate		varchar(10)	path	'CancelDate',
	canceluser		varchar(12)	path	'CancelUser',
	cancelreason		varchar(3)	path	'CancelReason',
	cancelreasontext		varchar(15)	path	'CancelReasonText',
	creationtime		varchar(8)	path	'CreationTime',
--	respiration		varchar2(5)	path	'Respiration',
--	extcaseid			varchar2(20)	path	'ExtCaseId',
	extmovementid		varchar(20)	path	'ExtMovementId',
	refphys			varchar(10)	path	'RefPhys',
	famphys			varchar(10)	path	'FamPhys',
	attphys			varchar(10)	path	'AttPhys',
	admphys			varchar(10)	path	'AdmPhys',
--	nobilldays			varchar2(3)	path	'NobillDays',
	plsno			varchar(20)	path	'PlsNo',
--	invoicecopy		varchar2(1)	path	'InvoiceCopy',
	refphysbsnr		varchar(10)	path	'RefPhysBsnr',
	refphyslanr		varchar(10)	path	'RefPhysLanr',
	attphyslanr		varchar(9)	path	'AttPhysLanr',
	AttPhysTeamno		varchar(9)	path	'AttPhysTeamno',
	refhospitalname2		varchar(35)	path	'RefHospitalName2',
	refhospitalname3		varchar(35)	path	'RefHospitalName3',
--	mentalhealthlegalstatus	varchar2(1)	path	'MentalHealthLegalStatus',
--	mentalhealthlegalstatustxt	varchar2(40)	path	'MentalHealthLegalStatusTxt',
--	postdisphys		varchar2(10)	path	'PostDisPhys',
--	readmission		varchar2(1)	path	'Readmission',
	lastmenstrualperiod		varchar(10)	path	'LastMenstrualPeriod',
--	weeksatdelivery		varchar2(2)	path	'WeeksAtDelivery',
	workincapacity		varchar(10)	path	'WorkIncapacity',
	docreffl		varchar(1)	path	'DocRefFl',
	patreffl		varchar(1)	path	'PatRefFl',
	surgerytype		varchar(2)	path	'SurgeryType',
	surgerytypetext		varchar(15)	path	'SurgeryTypeText',
	intvisitstat		varchar(2)	path	'IntVisitStat',
	extvisitstat		varchar(2)	path	'ExtVisitStat',
	extvisitstattext		varchar(15)	path	'ExtVisitStatText',
	schedultype		varchar(8)	path	'SchedulType',
	schedultypetext		varchar(15)	path	'SchedulTypeText',
	visitcategory		varchar(1)	path	'Visitcategory',
	visitcattext		varchar(60)	path	'VisitcatText',
	priority		smallint	path	'Priority',
	prioritytext		varchar(60)	path	'PriorityText',
	transporttype		varchar(2)	path	'TransportType',
	inttransporttype		smallint	path	'IntTransportType',
	transporttypetext		varchar(15)	path	'TransportTypeText',
	prioritylong		smallint	path	'PriorityLong',
	refphys2		varchar(10)	path	'RefPhys2',
	opphys		varchar(10)	path	'OpPhys',
	anaephys		varchar(10)	path	'AnaePhys',
	p115sfaphys		varchar(10)	path	'P115SfaPhys',
	p115sfaphyslanr		varchar(9)	path	'P115SfaPhysLanr',
	p115sfaphys2		varchar(10)	path	'P115SfaPhys2',
	p115sfaphys2lanr		varchar(9)	path	'P115SfaPhys2Lanr',
	p115extphys		varchar(10)	path	'P115ExtPhys',
	p115extphyslanr		varchar(9)	path	'P115ExtPhysLanr',
	p115extphys2		varchar(10)	path	'P115ExtPhys2',
	p115extphys2lanr		varchar(9)	path	'P115ExtPhys2Lanr',
	disconsdat		varchar(10)	path	'DisConsDat',
	disconsent		varchar(1)	path	'DisConsent') a
where	length(patcaseid) > 0

union all

select	a.*,
	'INPAT' ie_tipo_episodio
from	xmltable('/InpatAdmissData' passing inpatadmissdata_w columns	
	client			varchar(3)	path	'CLIENT',
	institution			varchar(4)	path	'INSTITUTION',
	inststext			varchar(15)	path	'INST_STEXT',
	patcaseid			varchar(10)	path	'PATCASEID',
--	chkdigitcase		varchar2(1)	path	'CHKDIGITCASE',
	casetype			varchar(1)	path	'CASETYPE',
	casetypeext		varchar(1)	path	'CASETYPE_EXT',
--	casetypestext		varchar2(14)	path	'CASETYPE_STEXT',
	patientid			varchar(10)	path	'PATIENTID',
	billingstatus		varchar(1)	path	'BILLING_STATUS',
--	billstext			varchar2(60)	path	'BILL_STEXT',
	restricted			varchar(1)	path	'RESTRICTED',
--	geograrea		varchar2(9)	path	'GEOG_RAREA',
--	geograreatext		varchar2(40)	path	'GEOGR_AREA_TEXT',
	casecomment		varchar(30)	path	'CASE_COMMENT',
	casestatus		varchar(1)	path	'CASE_STATUS',
	casestatstext		varchar(60)	path	'CASE_STAT_STEXT',
	emergadm		varchar(1)	path	'EMERG_ADM',
	quickadm			varchar(1)	path	'QUICK_ADM',
	startdate			varchar(10)	path	'START_DATE',
	enddate			varchar(10)	path	'END_DATE',
--	billblock			varchar2(1)	path	'BILL_BLOCK',
--	billblockstext		varchar2(60)	path	'BILL_BLOCK_STEXT',
--	prevtreatdays		varchar2(3)	path	'PREVTREATDAYS',
--	statstcblock		varchar2(1)	path	'STATSTC_BLOCK',
--	pparelev			varchar2(1)	path	'PPA_RELEV',
--	recorder			varchar2(12)	path	'REC_ORDER',
--	previousdays		varchar2(3)	path	'PREVIOUS_DAYS',
--	objectno			varchar2(22)	path	'OBJECT_NO',
--	nonresident		varchar2(1)	path	'NON_RESIDENT',
--	children			varchar2(2)	path	'CHILDREN',
--	foreigncase		varchar2(1)	path	'FOREIGN_CASE',
	casecategory		varchar(2)	path	'CASE_CATEGORY',
	casecategorystext		varchar(25)	path	'CASE_CATEGORY_STEXT',
--	employeetype		varchar2(2)	path	'EMPLOYEE_TYPE',
--	employeetypestext		varchar2(20)	path	'EMPLOYEE_TYPE_STEXT',
--	cantontariff		varchar2(3)	path	'CANTON_TARIFF',
--	cantontariffstext		varchar2(25)	path	'CANTON_TARIFF_STEXT',
--	cantonconvtn		varchar2(3)	path	'CANTON_CONVTN',
--	cantonconvtnstext		varchar2(25)	path	'CANTON_CONVTN_STEXT',
--	srvgento			varchar2(10)	path	'SRV_GEN_TO',
	healeddate		varchar(10)	path	'HEALED_DATE',
--	applstatus		varchar2(2)	path	'APPLSTATUS',
--	applstatusstext		varchar2(40)	path	'APPLSTATUS_STEXT',
	specialty			varchar(4)	path	'SPECIALTY',
	specialtystext		varchar(30)	path	'SPECIALTY_STEXT',
--	caseendtype		varchar2(2)	path	'CASEENDTYPE',
--	caseendtypestext		varchar2(25)	path	'CASEENDTYPE_STEXT',
--	doctype			varchar2(2)	path	'DOC_TYPE',
--	doctypetext		varchar2(15)	path	'DOC_TYPE_TEXT',
--	docno			varchar2(30)	path	'DOC_NO',
--	choicecl			varchar2(1)	path	'CHOICE_CL',
--	choicecltext		varchar2(25)	path	'CHOICE_CL_TEXT',
	patweight			varchar(7)	path	'PAT_WEIGHT',
--	weightunit		varchar2(3)	path	'WEIGHT_UNIT',
--	weightunitiso		varchar2(3)	path	'WEIGHT_UNIT_ISO',
	patheight			varchar(5)	path	'PAT_HEIGHT',
--	heightunit			varchar2(3)	path	'HEIGHT_UNIT',
--	heightunitiso		varchar2(3)	path	'HEIGHT_UNIT_ISO',
	movemntseqno		varchar(5)	path	'MOVEMNT_SEQNO',
	movemntctgry		varchar(1)	path	'MOVEMNT_CTGRY',
	movemntctgrytext		varchar(15)	path	'MOVEMNT_CTGRY_TEXT',
	movemnttype		varchar(2)	path	'MOVEMNT_TYPE',
--	movemnttypetext		varchar2(15)	path	'MOVEMNT_TYPE_TEXT',
	movemntreas1		varchar(2)	path	'MOVEMNT_REAS1',
	movemntreas1text		varchar(15)	path	'MOVEMNT_REAS1_TEXT',
	movemntreas2		varchar(2)	path	'MOVEMNT_REAS2',
--	movemntreas2text		varchar2(15)	path	'MOVEMNT_REAS2_TEXT',
	movemntdate		varchar(10)	path	'MOVEMNT_DATE',
	movemnttime		varchar(8)	path	'MOVEMNT_TIME',
	statusind			varchar(1)	path	'STATUS_IND',
--	statusindtext		varchar2(60)	path	'STATUS_IND_TEXT',
	movemntenddate		varchar(10)	path	'MOVEMNT_ENDDATE',
	movemntendtime		varchar(8)	path	'MOVEMNT_ENDTIME',
	treatmcategory		varchar(6)	path	'TREATMCATEGORY',
	treatmctgrystext		varchar(15)	path	'TREATMCTGRY_STEXT',
	treatmctgrytext		varchar(30)	path	'TREATMCTGRY_TEXT',
--	class			varchar2(4)	path	'CLASS',
--	classstext			varchar2(15)	path	'CLASS_STEXT',
--	classtext			varchar2(30)	path	'CLASS_TEXT',
--	movemntspec		varchar2(4)	path	'MOVEMNT_SPEC',
--	movemntspecstext		varchar2(30)	path	'MOVEMNT_SPEC_STEXT',
	admittdept		varchar(8)	path	'ADMITT_DEPT',
	admittdeptstext		varchar(12)	path	'ADMITT_DEPT_STEXT',
	department		varchar(8)	path	'DEPARTMENT',
--	departmentstext		varchar2(12)	path	'DEPARTMENT_STEXT',
	nurstreatou		varchar(8)	path	'NURS_TREAT_OU',
	nurstreatoustext		varchar(12)	path	'NURS_TREAT_OU_STEXT',
	room			varchar(8)	path	'ROOM',
	roomidentifier		varchar(8)	path	'ROOM_IDENTIFIER',
	bed			varchar(8)	path	'BED',
	bedidentifier		varchar(8)	path	'BED_IDENTIFIER',
--	roomstatusind		varchar2(1)	path	'ROOM_STATUS_IND',
--	roomstatusindtext		varchar2(60)	path	'ROOM_STATUS_IND_TEXT',
--	phoneno			varchar2(16)	path	'PHONENO',
--	tv			varchar2(1)	path	'TV',
	lengthofstay		varchar(5)	path	'LENGTH_OF_STAY',
	refpsttrttype		varchar(2)	path	'REF_PSTTRT_TYPE',
--	refpsttrttypetext		varchar2(15)	path	'REF_PSTTRT_TYPE_TEXT',
	refhospital		varchar(10)	path	'REF_HOSPITAL',
	waitlistprio		varchar(2)	path	'WAITLIST_PRIO',
--	waitlistpriotext		varchar2(15)	path	'WAITLIST_PRIO_TEXT',
--	latestadm			varchar2(10)	path	'LATEST_ADM',
--	waitlisttype		varchar2(6)	path	'WAITLIST_TYPE',
--	waitlisttypetext		varchar2(25)	path	'WAITLIST_TYPE_TEXT',
	waitlistdeldat		varchar(10)	path	'WAITLIST_DELDAT',
--	waitlistdelreas		varchar2(3)	path	'WAITLIST_DELREAS',
--	waitlistdelreastext		varchar2(60)	path	'WAITLISTDELREASTEXT',
	waitliststatus		varchar(2)	path	'WAITLIST_STATUS',
--	waitliststatustext		varchar2(20)	path	'WAITLIST_STATUS_TEXT',
	waitlisthosp		varchar(10)	path	'WAITLIST_HOSP',
--	waitlistinclon		varchar2(10)	path	'WAITLIST_INCLON',
--	treatcode			varchar2(1)	path	'TREAT_CODE',
--	treatcodetext		varchar2(25)	path	'TREAT_CODE_TEXT',
	emergcase		varchar(1)	path	'EMERG_CASE',
	accident			varchar(3)	path	'ACCIDENT',
	accidenttext		varchar(15)	path	'ACCIDENT_TEXT',
	accidentdate		varchar(10)	path	'ACCIDENT_DATE',
	accidenttime		varchar(8)	path	'ACCIDENT_TIME',
	accidentno		varchar(12)	path	'ACCIDENT_NO',
	accidentloc		varchar(25)	path	'ACCIDENT_LOC',
--	accidentemsvce		varchar2(15)	path	'ACCIDENT_EMSVCE',
--	accident3rdpty		varchar2(1)	path	'ACCIDENT_3RDPTY',
--	accidentemstyp		varchar2(4)	path	'ACCIDENT_EMSTYP',
--	accidentemstyptext		varchar2(20)	path	'ACCIDENT_EMSTYP_TEXT',
	arrivalmode		varchar(2)	path	'ARRIVAL_MODE',
	arrivalmodetext		varchar(20)	path	'ARRIVAL_MODE_TEXT',
	creationdate		varchar(10)	path	'CREATION_DATE',
	creationuser		varchar(12)	path	'CREATION_USER',
	updatedate		varchar(10)	path	'UPDATE_DATE',
	updateuser		varchar(12)	path	'UPDATE_USER',
	cancelind		varchar(1)	path	'CANCEL_IND',
	canceldate		varchar(10)	path	'CANCEL_DATE',
	canceluser		varchar(12)	path	'CANCEL_USER',
	cancelreason		varchar(3)	path	'CANCEL_REASON',
	cancelreasontext		varchar(15)	path	'CANCEL_REASON_TEXT',
	creationtime		varchar(8)	path	'CREATION_TIME',
--	respiration		varchar2(5)	path	'RESPIRATION',
--	extcaseid			varchar2(20)	path	'EXT_CASE_ID',
	extmovementid		varchar(20)	path	'EXT_MOVEMENT_ID',
	refphys			varchar(10)	path	'REF_PHYS',
	famphys			varchar(10)	path	'FAM_PHYS',
	attphys			varchar(10)	path	'ATT_PHYS',
	admphys			varchar(10)	path	'ADM_PHYS',
--	nobilldays			varchar2(3)	path	'NOBILL_DAYS',
	plsno			varchar(20)	path	'PLS_NO',
--	invoicecopy		varchar2(1)	path	'INVOICE_COPY',
	refphysbsnr		varchar(10)	path	'REF_PHYS_BSNR',
	refphyslanr		varchar(10)	path	'REF_PHYS_LANR',
	attphyslanr		varchar(9)	path	'ATT_PHYS_LANR',
	AttPhysTeamno		varchar(9)	path	'ATT_PHYS_TEAM_NO',
	refhospitalname2		varchar(35)	path	'REF_HOSPITAL_NAME2',
	refhospitalname3		varchar(35)	path	'REF_HOSPITAL_NAME3',
--	mentalhealthlegalstatus	varchar2(1)	path	'MENTAL_HEALTH_LEGAL_STATUS',
--	mentalhealthlegalstatustxt	varchar2(40)	path	'MENTAL_HEALTH_LEGAL_STATUS_TXT',
--	postdisphys		varchar2(10)	path	'POST_DIS_PHYS',
--	readmission		varchar2(1)	path	'READMISSION',
	lastmenstrualperiod		varchar(10)	path	'LAST_MENSTRUAL_PERIOD',
--	weeksatdelivery		varchar2(2)	path	'WEEKS_AT_DELIVERY',
	workincapacity		varchar(10)	path	'WORK_INCAPACITY',
	docreffl		varchar(1)	path	'DOC_REF_FL',
	patreffl		varchar(1)	path	'PAT_REF_FL',
	surgerytype		varchar(2)	path	'SURGERY_TYPE',
	surgerytypetext		varchar(15)	path	'SURGERY_TYPE_TEXT',
	intvisitstat		varchar(2)	path	'INT_VISIT_STAT',
	extvisitstat		varchar(2)	path	'EXT_VISIT_STAT',
	extvisitstattext		varchar(15)	path	'EXT_VISIT_STAT_TEXT',
	schedultype		varchar(8)	path	'SCHEDUL_TYPE',
	schedultypetext		varchar(15)	path	'SCHEDUL_TYPE_TEXT',
	visitcategory		varchar(1)	path	'VISITCATEGORY',
	visitcattext		varchar(60)	path	'VISITCAT_TEXT',
	priority		smallint	path	'PRIORITY',
	prioritytext		varchar(60)	path	'PRIORITY_TEXT',
	transporttype		varchar(2)	path	'TRANSPORT_TYPE',
	inttransporttype		smallint	path	'INT_TRANSPORT_TYPE',
	transporttypetext		varchar(15)	path	'TRANSPORT_TYPE_TEXT',
	prioritylong		smallint	path	'PRIORITY_LONG',
	refphys2		varchar(10)	path	'REF_PHYS2',
	opphys		varchar(10)	path	'OP_PHYS',
	anaephys		varchar(10)	path	'ANAE_PHYS',
	p115sfaphys		varchar(10)	path	'P115_SFA_PHYS',
	p115sfaphyslanr		varchar(9)	path	'P115_SFA_PHYS_LANR',
	p115sfaphys2		varchar(10)	path	'P115_SFA_PHYS2',
	p115sfaphys2lanr		varchar(9)	path	'P115_SFA_PHYS2_LANR',
	p115extphys		varchar(10)	path	'P115_EXT_PHYS',
	p115extphyslanr		varchar(9)	path	'P115_EXT_PHYS_LANR',
	p115extphys2		varchar(10)	path	'P115_EXT_PHYS2',
	p115extphys2lanr		varchar(9)	path	'P115_EXT_PHYS2_LANR',
	disconsdat		varchar(10)	path	'DIS_CONS_DAT',
	disconsent		varchar(1)	path	'DIS_CONSENT') a
where	length(patcaseid) > 0

union all

select	a.*,
	'OUTPAT' ie_tipo_episodio
from	xmltable('/OutpatVisitData' passing outpatvisitdata_w columns
	client			varchar(3)	path	'Client',
	institution			varchar(4)	path	'Institution',
	inststext			varchar(15)	path	'InstStext',
	patcaseid			varchar(10)	path	'Patcaseid',
--	chkdigitcase		varchar2(1)	path	'Chkdigitcase',
	casetype			varchar(1)	path	'Casetype',
	casetypeext		varchar(1)	path	'CasetypeExt',
--	casetypestext		varchar2(14)	path	'CasetypeStext',
	patientid			varchar(10)	path	'Patientid',
	billingstatus		varchar(1)	path	'BillingStatus',
--	billstext			varchar2(60)	path	'BillStext',
	restricted			varchar(1)	path	'Restricted',
--	geograrea		varchar2(9)	path	'GeogrArea',
--	geograreatext		varchar2(40)	path	'GeogrAreaText',
	casecomment		varchar(30)	path	'CaseComment',
	casestatus		varchar(1)	path	'CaseStatus',
	casestatstext		varchar(60)	path	'CaseStatStext',
	emergadm		varchar(1)	path	'EmergAdm',
	quickadm			varchar(1)	path	'QuickAdm',
	startdate			varchar(10)	path	'StartDate',
	enddate			varchar(10)	path	'EndDate',
--	billblock			varchar2(1)	path	'BillBlock',
--	billblockstext		varchar2(60)	path	'BillBlockStext',
--	prevtreatdays		varchar2(3)	path	'Prevtreatdays',
--	statstcblock		varchar2(1)	path	'StatstcBlock',
--	pparelev			varchar2(1)	path	'PpaRelev',
--	recorder			varchar2(12)	path	'RecOrder',
--	previousdays		varchar2(3)	path	'PreviousDays',
--	objectno			varchar2(22)	path	'ObjectNo',
--	nonresident		varchar2(1)	path	'NonResident',
--	children			varchar2(2)	path	'Children',
--	foreigncase		varchar2(1)	path	'ForeignCase',
	casecategory		varchar(2)	path	'CaseCategory',
	casecategorystext		varchar(25)	path	'CaseCategoryStext',
--	employeetype		varchar2(2)	path	'EmployeeType',
--	employeetypestext		varchar2(20)	path	'EmployeeTypeStext',
--	cantontariff		varchar2(3)	path	'CantonTariff',
--	cantontariffstext		varchar2(25)	path	'CantonTariffStext',
--	cantonconvtn		varchar2(3)	path	'CantonConvtn',
--	cantonconvtnstext		varchar2(25)	path	'CantonConvtnStext',
--	srvgento			varchar2(10)	path	'SrvGenTo',
	healeddate		varchar(10)	path	'HealedDate',
--	applstatus		varchar2(2)	path	'Applstatus',
--	applstatusstext		varchar2(40)	path	'ApplstatusStext',
	specialty			varchar(4)	path	'Specialty',
	specialtystext		varchar(30)	path	'SpecialtyStext',
--	caseendtype		varchar2(2)	path	'Caseendtype',
--	caseendtypestext		varchar2(25)	path	'CaseendtypeStext',
--	doctype			varchar2(2)	path	'DocType',
--	doctypetext		varchar2(15)	path	'DocTypeText',
--	docno			varchar2(30)	path	'DocNo',
--	choicecl			varchar2(1)	path	'ChoiceCl',
--	choicecltext		varchar2(25)	path	'ChoiceClText',
	patweight			varchar(7)	path	'PatWeight',
--	weightunit		varchar2(3)	path	'WeightUnit',
--	weightunitiso		varchar2(3)	path	'WeightUnitIso',
	patheight			varchar(5)	path	'PatHeight',
--	heightunit			varchar2(3)	path	'HeightUnit',
--	heightunitiso		varchar2(3)	path	'HeightUnitIso',
	movemntseqno		varchar(5)	path	'MovemntSeqno',
	movemntctgry		varchar(1)	path	'MovemntCtgry',
	movemntctgrytext		varchar(15)	path	'MovemntCtgryText',
	movemnttype		varchar(2)	path	'MovemntType',
--	movemnttypetext		varchar2(15)	path	'MovemntTypeText',
	movemntreas1		varchar(2)	path	'MovemntReas1',
	movemntreas1text		varchar(15)	path	'MovemntReas1Text',
	movemntreas2		varchar(2)	path	'MovemntReas2',
--	movemntreas2text		varchar2(15)	path	'MovemntReas2Text',
	movemntdate		varchar(10)	path	'MovemntDate',
	movemnttime		varchar(8)	path	'MovemntTime',
	statusind			varchar(1)	path	'StatusInd',
--	statusindtext		varchar2(60)	path	'StatusIndText',
	movemntenddate		varchar(10)	path	'MovemntEnddate',
	movemntendtime		varchar(8)	path	'MovemntEndtime',
	treatmcategory		varchar(6)	path	'Treatmcategory',
	treatmctgrystext		varchar(15)	path	'TreatmctgryStext',
	treatmctgrytext		varchar(30)	path	'TreatmctgryText',
--	class			varchar2(4)	path	'Class',
--	classstext			varchar2(15)	path	'ClassStext',
--	classtext			varchar2(30)	path	'ClassText',
--	movemntspec		varchar2(4)	path	'MovemntSpec',
--	movemntspecstext		varchar2(30)	path	'MovemntSpecStext',
	admittdept		varchar(8)	path	'AdmittDept',
	admittdeptstext		varchar(12)	path	'AdmittDeptStext',
	department		varchar(8)	path	'Department',
--	departmentstext		varchar2(12)	path	'DepartmentStext',
	nurstreatou		varchar(8)	path	'NursTreatOu',
	nurstreatoustext		varchar(12)	path	'NursTreatOuStext',
	room			varchar(8)	path	'Room',
	roomidentifier		varchar(8)	path	'RoomIdentifier',
	bed			varchar(8)	path	'Bed',
	bedidentifier		varchar(8)	path	'BedIdentifier',
--	roomstatusind		varchar2(1)	path	'RoomStatusInd',
--	roomstatusindtext		varchar2(60)	path	'RoomStatusIndText',
--	phoneno			varchar2(16)	path	'Phoneno',
--	tv			varchar2(1)	path	'Tv',
	lengthofstay		varchar(5)	path	'LengthOfStay',
	refpsttrttype		varchar(2)	path	'RefPsttrtType',
--	refpsttrttypetext		varchar2(15)	path	'RefPsttrtTypeText',
	refhospital		varchar(10)	path	'RefHospital',
	waitlistprio		varchar(2)	path	'WaitlistPrio',
--	waitlistpriotext		varchar2(15)	path	'WaitlistPrioText',
--	latestadm			varchar2(10)	path	'LatestAdm',
--	waitlisttype		varchar2(6)	path	'WaitlistType',
--	waitlisttypetext		varchar2(25)	path	'WaitlistTypeText',
	waitlistdeldat		varchar(10)	path	'WaitlistDeldat',
--	waitlistdelreas		varchar2(3)	path	'WaitlistDelreas',
--	waitlistdelreastext		varchar2(60)	path	'WaitlistDelreasText',
	waitliststatus		varchar(2)	path	'WaitlistStatus',
--	waitliststatustext		varchar2(20)	path	'WaitlistStatusText',
	waitlisthosp		varchar(10)	path	'WaitlistHosp',
--	waitlistinclon		varchar2(10)	path	'WaitlistInclon',
--	treatcode			varchar2(1)	path	'TreatCode',
--	treatcodetext		varchar2(25)	path	'TreatCodeText',
	emergcase		varchar(1)	path	'EmergCase',
	accident			varchar(3)	path	'Accident',
	accidenttext		varchar(15)	path	'AccidentText',
	accidentdate		varchar(10)	path	'AccidentDate',
	accidenttime		varchar(8)	path	'AccidentTime',
	accidentno		varchar(12)	path	'AccidentNo',
	accidentloc		varchar(25)	path	'AccidentLoc',
--	accidentemsvce		varchar2(15)	path	'AccidentEmsvce',
--	accident3rdpty		varchar2(1)	path	'Accident3rdpty',
--	accidentemstyp		varchar2(4)	path	'AccidentEmstyp',
--	accidentemstyptext		varchar2(20)	path	'AccidentEmstypText',
	arrivalmode		varchar(2)	path	'ArrivalMode',
	arrivalmodetext		varchar(20)	path	'ArrivalModeText',
	creationdate		varchar(10)	path	'CreationDate',
	creationuser		varchar(12)	path	'CreationUser',
	updatedate		varchar(10)	path	'UpdateDate',
	updateuser		varchar(12)	path	'UpdateUser',
	cancelind			varchar(1)	path	'CancelInd',
	canceldate		varchar(10)	path	'CancelDate',
	canceluser		varchar(12)	path	'CancelUser',
	cancelreason		varchar(3)	path	'CancelReason',
	cancelreasontext		varchar(15)	path	'CancelReasonText',
	creationtime		varchar(8)	path	'CreationTime',
--	respiration		varchar2(5)	path	'Respiration',
--	extcaseid			varchar2(20)	path	'ExtCaseId',
	extmovementid		varchar(20)	path	'ExtMovementId',
	refphys			varchar(10)	path	'RefPhys',
	famphys			varchar(10)	path	'FamPhys',
	attphys			varchar(10)	path	'AttPhys',
	admphys			varchar(10)	path	'AdmPhys',
--	nobilldays			varchar2(3)	path	'NobillDays',
	plsno			varchar(20)	path	'PlsNo',
--	invoicecopy		varchar2(1)	path	'InvoiceCopy',
	refphysbsnr		varchar(10)	path	'RefPhysBsnr',
	refphyslanr		varchar(10)	path	'RefPhysLanr',
	attphyslanr		varchar(9)	path	'AttPhysLanr',
	AttPhysTeamno		varchar(9)	path	'AttPhysTeamno',
	refhospitalname2		varchar(35)	path	'RefHospitalName2',
	refhospitalname3		varchar(35)	path	'RefHospitalName3',
--	mentalhealthlegalstatus	varchar2(1)	path	'MentalHealthLegalStatus',
--	mentalhealthlegalstatustxt	varchar2(40)	path	'MentalHealthLegalStatusTxt',
--	postdisphys		varchar2(10)	path	'PostDisPhys',
--	readmission		varchar2(1)	path	'Readmission',
	lastmenstrualperiod		varchar(10)	path	'LastMenstrualPeriod',
--	weeksatdelivery		varchar2(2)	path	'WeeksAtDelivery',
	workincapacity		varchar(10)	path	'WorkIncapacity',
	docreffl		varchar(1)	path	'DocRefFl',
	patreffl		varchar(1)	path	'PatRefFl',
	surgerytype		varchar(2)	path	'SurgeryType',
	surgerytypetext		varchar(15)	path	'SurgeryTypeText',
	intvisitstat		varchar(2)	path	'IntVisitStat',
	extvisitstat		varchar(2)	path	'ExtVisitStat',
	extvisitstattext		varchar(15)	path	'ExtVisitStatText',
	schedultype		varchar(8)	path	'SchedulType',
	schedultypetext		varchar(15)	path	'SchedulTypeText',
	visitcategory		varchar(1)	path	'Visitcategory',
	visitcattext		varchar(60)	path	'VisitcatText',
	priority		smallint	path	'Priority',
	prioritytext		varchar(60)	path	'PriorityText',
	transporttype		varchar(2)	path	'TransportType',
	inttransporttype		smallint	path	'IntTransportType',
	transporttypetext		varchar(15)	path	'TransportTypeText',
	prioritylong		smallint	path	'PriorityLong',
	refphys2		varchar(10)	path	'RefPhys2',
	opphys		varchar(10)	path	'OpPhys',
	anaephys		varchar(10)	path	'AnaePhys',
	p115sfaphys		varchar(10)	path	'P115SfaPhys',
	p115sfaphyslanr		varchar(9)	path	'P115SfaPhysLanr',
	p115sfaphys2		varchar(10)	path	'P115SfaPhys2',
	p115sfaphys2lanr		varchar(9)	path	'P115SfaPhys2Lanr',
	p115extphys		varchar(10)	path	'P115ExtPhys',
	p115extphyslanr		varchar(9)	path	'P115ExtPhysLanr',
	p115extphys2		varchar(10)	path	'P115ExtPhys2',
	p115extphys2lanr		varchar(9)	path	'P115ExtPhys2Lanr',
	disconsdat		varchar(10)	path	'DisConsDat',
	disconsent		varchar(1)	path	'DisConsent') a
where	length(patcaseid) > 0

union all

select	a.*,
	'OUTPAT' ie_tipo_episodio
from	xmltable('/OutpatVisitData' passing outpatvisitdata_w columns	
	client			varchar(3)	path	'CLIENT',
	institution			varchar(4)	path	'INSTITUTION',
	inststext			varchar(15)	path	'INST_STEXT',
	patcaseid			varchar(10)	path	'PATCASEID',
--	chkdigitcase		varchar2(1)	path	'CHKDIGITCASE',
	casetype			varchar(1)	path	'CASETYPE',
	casetypeext		varchar(1)	path	'CASETYPE_EXT',
--	casetypestext		varchar2(14)	path	'CASETYPE_STEXT',
	patientid			varchar(10)	path	'PATIENTID',
	billingstatus		varchar(1)	path	'BILLING_STATUS',
--	billstext			varchar2(60)	path	'BILL_STEXT',
	restricted			varchar(1)	path	'RESTRICTED',
--	geograrea		varchar2(9)	path	'GEOG_RAREA',
--	geograreatext		varchar2(40)	path	'GEOGR_AREA_TEXT',
	casecomment		varchar(30)	path	'CASE_COMMENT',
	casestatus		varchar(1)	path	'CASE_STATUS',
	casestatstext		varchar(60)	path	'CASE_STAT_STEXT',
	emergadm		varchar(1)	path	'EMERG_ADM',
	quickadm			varchar(1)	path	'QUICK_ADM',
	startdate			varchar(10)	path	'START_DATE',
	enddate			varchar(10)	path	'END_DATE',
--	billblock			varchar2(1)	path	'BILL_BLOCK',
--	billblockstext		varchar2(60)	path	'BILL_BLOCK_STEXT',
--	prevtreatdays		varchar2(3)	path	'PREVTREATDAYS',
--	statstcblock		varchar2(1)	path	'STATSTC_BLOCK',
--	pparelev			varchar2(1)	path	'PPA_RELEV',
--	recorder			varchar2(12)	path	'REC_ORDER',
--	previousdays		varchar2(3)	path	'PREVIOUS_DAYS',
--	objectno			varchar2(22)	path	'OBJECT_NO',
--	nonresident		varchar2(1)	path	'NON_RESIDENT',
--	children			varchar2(2)	path	'CHILDREN',
--	foreigncase		varchar2(1)	path	'FOREIGN_CASE',
	casecategory		varchar(2)	path	'CASE_CATEGORY',
	casecategorystext		varchar(25)	path	'CASE_CATEGORY_STEXT',
--	employeetype		varchar2(2)	path	'EMPLOYEE_TYPE',
--	employeetypestext		varchar2(20)	path	'EMPLOYEE_TYPE_STEXT',
--	cantontariff		varchar2(3)	path	'CANTON_TARIFF',
--	cantontariffstext		varchar2(25)	path	'CANTON_TARIFF_STEXT',
--	cantonconvtn		varchar2(3)	path	'CANTON_CONVTN',
--	cantonconvtnstext		varchar2(25)	path	'CANTON_CONVTN_STEXT',
--	srvgento			varchar2(10)	path	'SRV_GEN_TO',
	healeddate		varchar(10)	path	'HEALED_DATE',
--	applstatus		varchar2(2)	path	'APPLSTATUS',
--	applstatusstext		varchar2(40)	path	'APPLSTATUS_STEXT',
	specialty			varchar(4)	path	'SPECIALTY',
	specialtystext		varchar(30)	path	'SPECIALTY_STEXT',
--	caseendtype		varchar2(2)	path	'CASEENDTYPE',
--	caseendtypestext		varchar2(25)	path	'CASEENDTYPE_STEXT',
--	doctype			varchar2(2)	path	'DOC_TYPE',
--	doctypetext		varchar2(15)	path	'DOC_TYPE_TEXT',
--	docno			varchar2(30)	path	'DOC_NO',
--	choicecl			varchar2(1)	path	'CHOICE_CL',
--	choicecltext		varchar2(25)	path	'CHOICE_CL_TEXT',
	patweight			varchar(7)	path	'PAT_WEIGHT',
--	weightunit		varchar2(3)	path	'WEIGHT_UNIT',
--	weightunitiso		varchar2(3)	path	'WEIGHT_UNIT_ISO',
	patheight			varchar(5)	path	'PAT_HEIGHT',
--	heightunit			varchar2(3)	path	'HEIGHT_UNIT',
--	heightunitiso		varchar2(3)	path	'HEIGHT_UNIT_ISO',
	movemntseqno		varchar(5)	path	'MOVEMNT_SEQNO',
	movemntctgry		varchar(1)	path	'MOVEMNT_CTGRY',
	movemntctgrytext		varchar(15)	path	'MOVEMNT_CTGRY_TEXT',
	movemnttype		varchar(2)	path	'MOVEMNT_TYPE',
--	movemnttypetext		varchar2(15)	path	'MOVEMNT_TYPE_TEXT',
	movemntreas1		varchar(2)	path	'MOVEMNT_REAS1',
	movemntreas1text		varchar(15)	path	'MOVEMNT_REAS1_TEXT',
	movemntreas2		varchar(2)	path	'MOVEMNT_REAS2',
--	movemntreas2text		varchar2(15)	path	'MOVEMNT_REAS2_TEXT',
	movemntdate		varchar(10)	path	'MOVEMNT_DATE',
	movemnttime		varchar(8)	path	'MOVEMNT_TIME',
	statusind			varchar(1)	path	'STATUS_IND',
--	statusindtext		varchar2(60)	path	'STATUS_IND_TEXT',
	movemntenddate		varchar(10)	path	'MOVEMNT_ENDDATE',
	movemntendtime		varchar(8)	path	'MOVEMNT_ENDTIME',
	treatmcategory		varchar(6)	path	'TREATMCATEGORY',
	treatmctgrystext		varchar(15)	path	'TREATMCTGRY_STEXT',
	treatmctgrytext		varchar(30)	path	'TREATMCTGRY_TEXT',
--	class			varchar2(4)	path	'CLASS',
--	classstext			varchar2(15)	path	'CLASS_STEXT',
--	classtext			varchar2(30)	path	'CLASS_TEXT',
--	movemntspec		varchar2(4)	path	'MOVEMNT_SPEC',
--	movemntspecstext		varchar2(30)	path	'MOVEMNT_SPEC_STEXT',
	admittdept		varchar(8)	path	'ADMITT_DEPT',
	admittdeptstext		varchar(12)	path	'ADMITT_DEPT_STEXT',
	department		varchar(8)	path	'DEPARTMENT',
--	departmentstext		varchar2(12)	path	'DEPARTMENT_STEXT',
	nurstreatou		varchar(8)	path	'NURS_TREAT_OU',
	nurstreatoustext		varchar(12)	path	'NURS_TREAT_OU_STEXT',
	room			varchar(8)	path	'ROOM',
	roomidentifier		varchar(8)	path	'ROOM_IDENTIFIER',
	bed			varchar(8)	path	'BED',
	bedidentifier		varchar(8)	path	'BED_IDENTIFIER',
--	roomstatusind		varchar2(1)	path	'ROOM_STATUS_IND',
--	roomstatusindtext		varchar2(60)	path	'ROOM_STATUS_IND_TEXT',
--	phoneno			varchar2(16)	path	'PHONENO',
--	tv			varchar2(1)	path	'TV',
	lengthofstay		varchar(5)	path	'LENGTH_OF_STAY',
	refpsttrttype		varchar(2)	path	'REF_PSTTRT_TYPE',
--	refpsttrttypetext		varchar2(15)	path	'REF_PSTTRT_TYPE_TEXT',
	refhospital		varchar(10)	path	'REF_HOSPITAL',
	waitlistprio		varchar(2)	path	'WAITLIST_PRIO',
--	waitlistpriotext		varchar2(15)	path	'WAITLIST_PRIO_TEXT',
--	latestadm			varchar2(10)	path	'LATEST_ADM',
--	waitlisttype		varchar2(6)	path	'WAITLIST_TYPE',
--	waitlisttypetext		varchar2(25)	path	'WAITLIST_TYPE_TEXT',
	waitlistdeldat		varchar(10)	path	'WAITLIST_DELDAT',
--	waitlistdelreas		varchar2(3)	path	'WAITLIST_DELREAS',
--	waitlistdelreastext		varchar2(60)	path	'WAITLISTDELREASTEXT',
	waitliststatus		varchar(2)	path	'WAITLIST_STATUS',
--	waitliststatustext		varchar2(20)	path	'WAITLIST_STATUS_TEXT',
	waitlisthosp		varchar(10)	path	'WAITLIST_HOSP',
--	waitlistinclon		varchar2(10)	path	'WAITLIST_INCLON',
--	treatcode			varchar2(1)	path	'TREAT_CODE',
--	treatcodetext		varchar2(25)	path	'TREAT_CODE_TEXT',
	emergcase		varchar(1)	path	'EMERG_CASE',
	accident			varchar(3)	path	'ACCIDENT',
	accidenttext		varchar(15)	path	'ACCIDENT_TEXT',
	accidentdate		varchar(10)	path	'ACCIDENT_DATE',
	accidenttime		varchar(8)	path	'ACCIDENT_TIME',
	accidentno		varchar(12)	path	'ACCIDENT_NO',
	accidentloc		varchar(25)	path	'ACCIDENT_LOC',
--	accidentemsvce		varchar2(15)	path	'ACCIDENT_EMSVCE',
--	accident3rdpty		varchar2(1)	path	'ACCIDENT_3RDPTY',
--	accidentemstyp		varchar2(4)	path	'ACCIDENT_EMSTYP',
--	accidentemstyptext		varchar2(20)	path	'ACCIDENT_EMSTYP_TEXT',
	arrivalmode		varchar(2)	path	'ARRIVAL_MODE',
	arrivalmodetext		varchar(20)	path	'ARRIVAL_MODE_TEXT',
	creationdate		varchar(10)	path	'CREATION_DATE',
	creationuser		varchar(12)	path	'CREATION_USER',
	updatedate		varchar(10)	path	'UPDATE_DATE',
	updateuser		varchar(12)	path	'UPDATE_USER',
	cancelind			varchar(1)	path	'CANCEL_IND',
	canceldate		varchar(10)	path	'CANCEL_DATE',
	canceluser		varchar(12)	path	'CANCEL_USER',
	cancelreason		varchar(3)	path	'CANCEL_REASON',
	cancelreasontext		varchar(15)	path	'CANCEL_REASON_TEXT',
	creationtime		varchar(8)	path	'CREATION_TIME',
--	respiration		varchar2(5)	path	'RESPIRATION',
--	extcaseid			varchar2(20)	path	'EXT_CASE_ID',
	extmovementid		varchar(20)	path	'EXT_MOVEMENT_ID',
	refphys			varchar(10)	path	'REF_PHYS',
	famphys			varchar(10)	path	'FAM_PHYS',
	attphys			varchar(10)	path	'ATT_PHYS',
	admphys			varchar(10)	path	'ADM_PHYS',
--	nobilldays			varchar2(3)	path	'NOBILL_DAYS',
	plsno			varchar(20)	path	'PLS_NO',
--	invoicecopy		varchar2(1)	path	'INVOICE_COPY',
	refphysbsnr		varchar(10)	path	'REF_PHYS_BSNR',
	refphyslanr		varchar(10)	path	'REF_PHYS_LANR',
	attphyslanr		varchar(9)	path	'ATT_PHYS_LANR',
	AttPhysTeamno		varchar(9)	path	'ATT_PHYS_TEAM_NO',
	refhospitalname2		varchar(35)	path	'REF_HOSPITAL_NAME2',
	refhospitalname3		varchar(35)	path	'REF_HOSPITAL_NAME3',
--	mentalhealthlegalstatus	varchar2(1)	path	'MENTAL_HEALTH_LEGAL_STATUS',
--	mentalhealthlegalstatustxt	varchar2(40)	path	'MENTAL_HEALTH_LEGAL_STATUS_TXT',
--	postdisphys		varchar2(10)	path	'POST_DIS_PHYS',
--	readmission		varchar2(1)	path	'READMISSION',
	lastmenstrualperiod		varchar(10)	path	'LAST_MENSTRUAL_PERIOD',
--	weeksatdelivery		varchar2(2)	path	'WEEKS_AT_DELIVERY',
	workincapacity		varchar(10)	path	'WORK_INCAPACITY',
	docreffl		varchar(1)	path	'DOC_REF_FL',
	patreffl		varchar(1)	path	'PAT_REF_FL',
	surgerytype		varchar(2)	path	'SURGERY_TYPE',
	surgerytypetext		varchar(15)	path	'SURGERY_TYPE_TEXT',
	intvisitstat		varchar(2)	path	'INT_VISIT_STAT',
	extvisitstat		varchar(2)	path	'EXT_VISIT_STAT',
	extvisitstattext		varchar(15)	path	'EXT_VISIT_STAT_TEXT',
	schedultype		varchar(8)	path	'SCHEDUL_TYPE',
	schedultypetext		varchar(15)	path	'SCHEDUL_TYPE_TEXT',
	visitcategory		varchar(1)	path	'VISITCATEGORY',
	visitcattext		varchar(60)	path	'VISITCAT_TEXT',
	priority		smallint	path	'PRIORITY',
	prioritytext		varchar(60)	path	'PRIORITY_TEXT',
	transporttype		varchar(2)	path	'TRANSPORT_TYPE',
	inttransporttype		smallint	path	'INT_TRANSPORT_TYPE',
	transporttypetext		varchar(15)	path	'TRANSPORT_TYPE_TEXT',
	prioritylong		smallint	path	'PRIORITY_LONG',
	refphys2		varchar(10)	path	'REF_PHYS2',
	opphys		varchar(10)	path	'OP_PHYS',
	anaephys		varchar(10)	path	'ANAE_PHYS',
	p115sfaphys		varchar(10)	path	'P115_SFA_PHYS',
	p115sfaphyslanr		varchar(9)	path	'P115_SFA_PHYS_LANR',
	p115sfaphys2		varchar(10)	path	'P115_SFA_PHYS2',
	p115sfaphys2lanr		varchar(9)	path	'P115_SFA_PHYS2_LANR',
	p115extphys		varchar(10)	path	'P115_EXT_PHYS',
	p115extphyslanr		varchar(9)	path	'P115_EXT_PHYS_LANR',
	p115extphys2		varchar(10)	path	'P115_EXT_PHYS2',
	p115extphys2lanr		varchar(9)	path	'P115_EXT_PHYS2_LANR',
	disconsdat		varchar(10)	path	'DIS_CONS_DAT',
	disconsent		varchar(1)	path	'DIS_CONSENT') a
where	length(patcaseid) > 0;

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/InpatAdmissDataAt' passing inpatadmissdataat_w columns	
	weekofpregnancy		varchar(2)	path	'WeekOfPregnancy',
--	caretickettype		varchar2(1)	path	'CareTicketType',
	reasonoftreatment		varchar(2)	path	'ReasonOfTreatment',
	admissiontype2		varchar(1)	path	'AdmissionType2',
--	ereferralcode		varchar2(20)	path	'EreferralCode',
--	ereferralnumber		varchar2(1)	path	'EreferralNumber'
	industaccident		varchar(1)	path	'IndustAccident',
	medemergencycase		varchar(1)	path	'MedEmergencyCase',
	subsequvisit		varchar(1)	path	'SubsequVisit',
	insurcaseprenatal		varchar(1)	path	'InsurCasePrenatal',
	treatmentmethodext		varchar(1)	path	'TreatmentMethodExt',
	drunkenness		varchar(1)	path	'Drunkenness',
	drugabuse		varchar(1)	path	'DrugAbuse',
	suspicionoffight		varchar(1)	path	'SuspicionOfFight',
	freeprescriptcharge		varchar(1)	path	'FreePrescriptCharge',
	contractpartnerno		varchar(10)	path	'ContractPartnerNo',
	liberationreason		varchar(2)	path	'LiberationReason',
	accesstype		varchar(1)	path	'AccessType',
	transfertype		varchar(1)	path	'TransferType',
	assignedfromto		varchar(14)	path	'AssignedFromTo',
	contractpartnerno2		varchar(10)	path	'ContractPartnerNo2',
	ereferralid		bigint	path	'EreferralId')

union all
	
SELECT	*
from	xmltable('/OutpatVisitDataAt' passing outpatvisitdataat_w columns	
	weekofpregnancy		varchar(2)	path	'WeekOfPregnancy',
--	caretickettype		varchar2(1)	path	'CareTicketType',
	reasonoftreatment		varchar(2)	path	'ReasonOfTreatment',
	admissiontype2		varchar(1)	path	'AdmissionType2',
--	ereferralcode		varchar2(20)	path	'EreferralCode',
--	ereferralnumber		varchar2(1)	path	'EreferralNumber'
	industaccident		varchar(1)	path	'IndustAccident',
	medemergencycase		varchar(1)	path	'MedEmergencyCase',
	subsequvisit		varchar(1)	path	'SubsequVisit',
	insurcaseprenatal		varchar(1)	path	'InsurCasePrenatal',
	treatmentmethodext		varchar(1)	path	'TreatmentMethodExt',
	drunkenness		varchar(1)	path	'Drunkenness',
	drugabuse		varchar(1)	path	'DrugAbuse',
	suspicionoffight		varchar(1)	path	'SuspicionOfFight',
	freeprescriptcharge		varchar(1)	path	'FreePrescriptCharge',
	contractpartnerno		varchar(10)	path	'ContractPartnerNo',
	liberationreason		varchar(2)	path	'LiberationReason',
	accesstype		varchar(1)	path	'AccessType',
	transfertype		varchar(1)	path	'TransferType',
	assignedfromto		varchar(14)	path	'AssignedFromTo',
	contractpartnerno2		varchar(10)	path	'ContractPartnerNo2',
	ereferralid		bigint	path	'EreferralId');

c02_w	c02%rowtype;

cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
cd_setor_atendimento_w	setor_atendimento.cd_setor_atendimento%type;
ds_setor_atendimento_w	setor_atendimento.ds_setor_atendimento%type;

ie_status_w			intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';
ie_evento_w			intpd_fila_transmissao.ie_evento%type;

nr_seq_hcm_seg_pat_w		hcm_fall.nr_seq_segmento%type;
nr_seq_mensagem_w		hcm_segmento.nr_seq_mensagem%type;
nr_seq_hcm_seg_hea_w		hcm_segmento.nr_sequencia%type;
SAPEVENT_w			hcm_kopf.SAPEVENT%type;

nr_seq_tipo_admissao_fat_w	atendimento_paciente.nr_seq_tipo_admissao_fat%type;
ie_gerar_passagem_setor_w	tipo_admissao_fat.ie_gerar_passagem_setor%type;
ie_gerar_novo_atendimento_w	tipo_admissao_fat.ie_gerar_novo_atendimento%type;
nr_seq_atend_prev_alta_w	atend_previsao_alta.nr_sequencia%type;
nr_seq_documento_w		varchar(80);
refphys_w			varchar(255);
attphys_w			varchar(255);
cd_municipio_ocorrencia_w	varchar(255);
dt_chegada_w			timestamp;
ie_disponivel_w			varchar(1);
nr_seq_tipo_medico_w		pf_medico_externo.nr_seq_tipo_medico%type;

pessoa_fisica_empregador_w	pessoa_fisica_empregador%rowtype;
ie_tipo_bg_w			tipo_admissao_fat.ie_tipo_bg%type;

nr_Seq_interno_conv_w		bigint;


BEGIN
CALL intpd_inicializacao(nr_sequencia_p);

select	min(cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from	estabelecimento;

select	coalesce(max(cd_setor_atendimento),56)
into STRICT	cd_setor_atendimento_w
from	usuario
where	nm_usuario = current_setting('ish_pat_case_pck.usernametasy')::varchar(15);


CALL wheb_usuario_pck.set_nm_usuario(current_setting('ish_pat_case_pck.usernametasy')::varchar(15));
CALL wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_w);
CALL wheb_usuario_pck.set_cd_setor_atendimento(cd_setor_atendimento_w);

begin
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);

delete	FROM intpd_log_recebimento
where	nr_seq_fila = nr_sequencia_p;

select	a.nr_seq_documento,
	coalesce(b.ie_conversao,'I'),
	b.nr_seq_sistema,
	b.nr_seq_projeto_xml,
	b.nr_seq_regra_conv,
	a.ds_xml_retorno,
	a.ie_evento,
	a.nr_seq_agrupador
into STRICT	nr_seq_doc_origem_w,
	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w,
	ds_xml_w,
	ie_evento_w,
	nr_seq_agrupador_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;
exception
when others then
	null;
end;

if (nr_seq_doc_origem_w IS NOT NULL AND nr_seq_doc_origem_w::text <> '') then
	begin
	select	nr_seq_segmento
	into STRICT	nr_seq_hcm_seg_pat_w
	from	hcm_fall
	where	nr_sequencia = nr_seq_doc_origem_w;

	select	nr_seq_mensagem
	into STRICT	nr_seq_mensagem_w
	from	hcm_segmento
	where	nr_sequencia = nr_seq_hcm_seg_pat_w;

	select	nr_sequencia
	into STRICT	nr_seq_hcm_seg_hea_w
	from	hcm_segmento
	where	nr_seq_mensagem = nr_seq_mensagem_w
	and	ie_tipo = 'HEA'  LIMIT 1;

	select	SAPEVENT
	into STRICT	SAPEVENT_w
	from	hcm_kopf
	where	NR_SEQ_SEGMENTO = nr_seq_hcm_seg_hea_w;
	exception
	when others then
		SAPEVENT_w	:=	null;
	end;
end if;

ish_converter_response(nr_sequencia_p, ds_xml_w, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		ie_response_procedure = 'S'
	where	nr_sequencia = nr_sequencia_p;
else
	begin
	begin
	select	a.inpatadmissdata,
		a.inpatadmissdataat
	into STRICT	inpatadmissdata_w,
		inpatadmissdataat_w
	from	xmltable(
		xmlnamespaces(
			'urn:sap-com:document:sap:soap:functions:mc-style' as "n0",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/n0:PatcaseGetinpatadmissResponse' passing xml_w columns
		inpatadmissdata xmltype path 'InpatAdmissData',
		inpatadmissdataat xmltype path 'InpatAdmissDataAt') a;
	exception
	when others then
		begin
		select	a.outpatvisitdata,
			a.outpatvisitdataat
		into STRICT	outpatvisitdata_w,
			outpatvisitdataat_w
		from	xmltable(
			xmlnamespaces(
				'urn:sap-com:document:sap:soap:functions:mc-style' as "n0",
				'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
			'soapenv:Envelope/soapenv:Body/n0:PatcaseGetoutpatvisitResponse' passing xml_w columns
			outpatvisitdata xmltype path 'OutpatVisitData',
			outpatvisitdataat xmltype path 'OutpatVisitDataAt') a;
		end;
	end;

	open c01;
	loop
	fetch c01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		if (substr(coalesce(ish_obter_se_reg_alterado(nr_sequencia_p, c01_w.creationuser, c01_w.updateuser, c01_w.canceluser),'S'),1,1) = 'S') then				
			CALL ish_lock_fila(ie_evento_w, c01_w.patcaseid);
			
			begin
			dt_atualizacao_nrec_w	:=	to_date(c01_w.creationdate||c01_w.creationtime,'yyyy-mm-ddhh24:mi:ss');
			exception
			when others then
				dt_atualizacao_nrec_w	:=	coalesce(dt_atualizacao_nrec_w,clock_timestamp());
			end;
			begin
			dt_atualizacao_w		:=	to_date(c01_w.updatedate,'yyyy-mm-dd');
			exception
			when others then
				dt_atualizacao_w		:=	coalesce(dt_atualizacao_nrec_w,clock_timestamp());
			end;
			
			dt_atualizacao_w	:=	coalesce(dt_atualizacao_w, dt_atualizacao_nrec_w);

			intpd_processar_atributo(reg_integracao_w,'NM_USUARIO_NREC',coalesce(c01_w.creationuser,c01_w.updateuser),'N',nm_usuario_nrec_w);
			intpd_processar_atributo(reg_integracao_w,'NM_USUARIO',coalesce(c01_w.updateuser,c01_w.creationuser),'N',nm_usuario_w);

			reg_integracao_w.nm_elemento	:=	'InpatAdmissData';
			reg_integracao_w.nr_seq_visao	:=	0;
			
			begin
			select	*
			into STRICT	episodio_paciente_w
			from	episodio_paciente
			where	nr_episodio = ltrim(c01_w.patcaseid, '0')  LIMIT 1;
			exception
			when others then
				episodio_paciente_w.nr_sequencia	:=	null;
			end;
			
			--OS 1986199, para nao gerar case/atendimento no tasy quando o tipo for "Begleitpers MBG"
			--Isso indica que e um case de acompanhante que nao deve ser gerado no Tasy, ou apenas sera atualizado caso ele ja exista.
			--No processo do ISH, o acompanhante de um paciente tambem possui um case.
			if (coalesce(c01_w.movemnttype,'XPTO') <> 'B') or (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') then
				
				reg_integracao_w.nm_tabela	:=	'ATENDIMENTO_PACIENTE';
					
				if (ish_param_pck.get_conv_tipo_adm_fat = 'CTMCMT') then
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(c01_w.casetype || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntctgry || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemnttype,1,40), 'S', nr_seq_tipo_admissao_fat_w);
				else
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(c01_w.movemntctgry || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemnttype,1,40), 'S', nr_seq_tipo_admissao_fat_w);
				end if;
				
				select	coalesce(max(ie_gerar_passagem_setor),'N')
				into STRICT	ie_gerar_passagem_setor_w -- Removido os valores fixos 4 e VO. Criado o campo no tasy para definir se sera gerado o novo atendimento. OS 1754062
				from	tipo_admissao_fat
				where	nr_sequencia = nr_seq_tipo_admissao_fat_w;
				
				begin
				nr_Seq_interno_conv_w		:=	somente_numero(intpd_conv('ATEND_PACIENTE_UNIDADE', 'NR_SEQ_INTERNO',
										substr(c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntseqno,1,40), 
										nr_seq_regra_w, 
										ie_conversao_w, 'I'));

				select	'S'
				into STRICT	ie_gerar_novo_atendimento_w
				from	atend_paciente_unidade
				where	nr_seq_interno = nr_seq_interno_conv_w
				and	nr_seq_interno = obter_atepacu_paciente(nr_atendimento, 'P');
				exception
				when others then
					select	coalesce(max(ie_gerar_novo_atendimento),'S')						
					into STRICT	ie_gerar_novo_atendimento_w						
					from	tipo_admissao_fat
					where	nr_sequencia = nr_seq_tipo_admissao_fat_w;
				end;
				
				if (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') then
					begin
					nr_atendimento_w	:=	ish_get_encounter_case(
										coalesce(c01_w.patcaseid, episodio_paciente_w.nr_sequencia),
										null, 
										c01_w.movemntseqno,
										null,
										null,
										null,
										null,
										c01_w.movemntctgry,
										c01_w.movemnttype,
										'N',
										c01_w.casetype);
					
					if (coalesce(nr_atendimento_w::text, '') = '') and (ie_gerar_novo_atendimento_w = 'N') then
						nr_atendimento_w	:=	ish_get_encounter_case(
											coalesce(c01_w.patcaseid, episodio_paciente_w.nr_sequencia),
											null, 
											null,
											c01_w.MovemntDate,
											c01_w.MovemntTime,
											c01_w.MovemntEnddate,
											c01_w.MovemntEndtime,
											null,
											null,
											'S',
											null);
					end if;
					
					if (coalesce(nr_atendimento_w::text, '') = '') and (ie_gerar_passagem_setor_w = 'S') then
						nr_atendimento_w	:=	ish_get_encounter_case(coalesce(c01_w.patcaseid, episodio_paciente_w.nr_sequencia), 'INPAT');
					end if;
									
					select	*
					into STRICT	atendimento_paciente_w
					from	atendimento_paciente		
					where	nr_atendimento = nr_atendimento_w;		
					exception
					when others then
						atendimento_paciente_w.nr_atendimento	:=	null;
					end;					
					
					if (ie_gerar_novo_atendimento_w = 'S') then					
						begin
						select	a.*
						into STRICT	atendimento_paciente_inf_w
						from	atendimento_paciente_inf a
						where	a.nr_atendimento in (SELECT	x.nr_atendimento
							from	atendimento_paciente x
							where	x.nr_seq_episodio = atendimento_paciente_w.nr_seq_episodio)  LIMIT 1;
						exception
						when others then
							atendimento_paciente_inf_w.nr_atendimento := null;
						end;
						
						--Casos em que o atendimento e de Inpatient e passa a ser outPatient.
						--Desta forma, deve ser criado um novo atendimento para o mesmo case.
						--OS 
						reg_integracao_w.nm_tabela	:=	'ATENDIMENTO_PACIENTE';					
						
						if	((get_case_encounter_type(
								atendimento_paciente_w.nr_seq_episodio,
								null, 
								atendimento_paciente_w.nr_atendimento, 
								atendimento_paciente_w.ie_tipo_atendimento) = '1') and (c01_w.ie_tipo_episodio = 'OUTPAT')) and (ie_gerar_novo_atendimento_w = 'S') then 	--((c01_w.movemntctgry <> '4') or (c01_w.movemnttype <> 'VO')) then --Deste categoria e tipo, o sistema mantem o mesmo atendimento, mas gera uma passagem OS 1748257
							atendimento_paciente_w.nr_atendimento	:=	null;
						end if;
					end if;
				end if;
		
				if (ie_gerar_novo_atendimento_w = 'N') and (atendimento_paciente_w.nr_atendimento IS NOT NULL AND atendimento_paciente_w.nr_atendimento::text <> '') then
					begin
					reg_integracao_w.nm_tabela	:=	'ATEND_PACIENTE_UNIDADE';
					atend_paciente_unidade_w.nr_seq_interno := somente_numero(intpd_conv('ATEND_PACIENTE_UNIDADE', 'NR_SEQ_INTERNO', substr(c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntseqno,1,40), nr_seq_regra_w, ie_conversao_w, 'I'));
					
					begin
					select	*
					into STRICT	atend_paciente_unidade_w
					from	atend_paciente_unidade
					where	nr_seq_interno = atend_paciente_unidade_w.nr_seq_interno;
					exception
					when others then
						atend_paciente_unidade_w.nr_seq_interno := null;
					end;					
					
					if (coalesce(atend_paciente_unidade_w.nr_seq_interno::text, '') = '') or (atend_paciente_unidade_w.nr_seq_interno = Obter_Atepacu_paciente(atendimento_paciente_w.nr_atendimento, 'A')) then		
						intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIF_ESP', c01_w.treatmcategory, 'S', atendimento_paciente_w.nr_seq_classif_esp);				
					end if;					
					
					if (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') and (atend_paciente_unidade_w.nr_atendimento <> atendimento_paciente_w.nr_atendimento) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort('Atendimento divergente #' || atend_paciente_unidade_w.nr_atendimento || '/' || atendimento_paciente_w.nr_atendimento || '#');
					end if;
				
					begin
					select	cd_setor_atendimento
					into STRICT	atend_paciente_unidade_w.cd_setor_atendimento
					from	setor_atendimento
					where	cd_setor_externo = c01_w.nurstreatou  LIMIT 1;
					exception
					when others then
						intpd_processar_atributo(reg_integracao_w, 'CD_SETOR_ATENDIMENTO', c01_w.nurstreatou, 'S', atend_paciente_unidade_w.cd_setor_atendimento);
					end;
					
					begin
					select	cd_unidade_basica,
						cd_unidade_compl
					into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
						atend_paciente_unidade_w.cd_unidade_compl
					from	unidade_atendimento
					where	cd_setor_atendimento 	= atend_paciente_unidade_w.cd_setor_atendimento
					and	nm_leito_integracao 	= c01_w.room || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.bed;
					exception
					when others then
						begin
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento
						where	cd_setor_atendimento 	= atend_paciente_unidade_w.cd_setor_atendimento
						and	nm_leito_integracao 	= c01_w.bed;
						exception
						when others then
							begin
							if (coalesce(c01_w.bed,'X') <> 'X') then
								begin
								intpd_processar_atributo(reg_integracao_w, 'CD_UNIDADE_BASICA', c01_w.room, 'S', atend_paciente_unidade_w.cd_unidade_basica);
								intpd_processar_atributo(reg_integracao_w, 'CD_UNIDADE_COMPL', c01_w.bed, 'S', atend_paciente_unidade_w.cd_unidade_compl);
								end;
							end if;
							end;
						end;	
					end;

					if (coalesce(c01_w.department,'XPTO') <> 'XPTO') then	
						intpd_processar_atributo(reg_integracao_w, 'CD_DEPARTAMENTO', c01_w.department, 'S', atend_paciente_unidade_w.cd_departamento);
					end if;
					
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIF_ESP', c01_w.treatmcategory, 'S', atend_paciente_unidade_w.nr_seq_classif_esp);
					
					if (coalesce(atend_paciente_unidade_w.cd_unidade_basica::text, '') = '') or (coalesce(c01_w.room,'X') = 'X') then
						begin		
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento a,
							tipo_acomodacao b
						where	a.cd_tipo_acomodacao  = b.cd_tipo_acomodacao
						and	b.ie_sem_acomodacao = 'S'
						and	a.cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
						and	a.ie_situacao = 'A'
						and	b.ie_situacao = 'A'  LIMIT 1;
						exception
						when others then
							null;
						end;
					end if;
					
					atend_paciente_unidade_w.nm_usuario		:=	nm_usuario_w;
					atend_paciente_unidade_w.dt_atualizacao	:=	dt_atualizacao_w;
					
					begin
					select	cd_unidade_basica,
						cd_unidade_compl,
						cd_setor_atendimento
					into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
						atend_paciente_unidade_w.cd_unidade_compl,
						atend_paciente_unidade_w.cd_setor_atendimento
					from	unidade_atendimento
					where	cd_unidade_basica = atend_paciente_unidade_w.cd_unidade_basica
					and	cd_unidade_compl = atend_paciente_unidade_w.cd_unidade_compl
					and	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento;
					exception
					when others then
						begin
						reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(	wheb_mensagem_pck.get_texto(736986,
																'DS_ELEMENTO=InpatAdmissData' ||
																';DS_ATRIBUTO=Patientid' ||
																';NR_SEQ_REGRA='||reg_integracao_w.nr_seq_regra_conversao ||
																';NM_TABELA=UNIDADE_ATENDIMENTO' ||
																';NM_ATRIBUTO=CD_UNIDADE_BASICA+CD_UNIDADE_COMPL+CD_SETOR_ATENDIMENTO' ||
																';DS_VALOR=' || c01_w.nurstreatou || '+' || c01_w.bed),1,4000);
						reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;
						end;
					end;

					atend_paciente_unidade_ww	:=	atend_paciente_unidade_w;

					SELECT * FROM ish_pat_case_pck.valida_status_unidade(
						nr_sequencia_p, reg_integracao_w, atend_paciente_unidade_w, c01_w.movemntenddate, c01_w.movemntendtime, ie_disponivel_w) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; atend_paciente_unidade_w := _ora2pg_r.atend_paciente_unidade_p; ie_disponivel_w := _ora2pg_r.ie_disponivel_p;
					
					if (reg_integracao_w.qt_reg_log = 0) then
						if (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') then						
							begin
							atend_paciente_unidade_w.dt_entrada_unidade	:=	ISH_UTILS_PCK.get_ish_valid_time(c01_w.movemntdate,c01_w.movemnttime);
							exception
							when others then
								null;
							end;
							
							/*
							update	atend_paciente_unidade
							set	row = atend_paciente_unidade_w
							where	nr_seq_interno = atend_paciente_unidade_w.nr_seq_interno;
							*/
							
							atend_paciente_unidade_w := ish_pat_case_pck.registrar_movto('U', atend_paciente_unidade_w);
						else
							begin
							
							begin
							atend_paciente_unidade_w.dt_entrada_unidade	:=	ISH_UTILS_PCK.get_ish_valid_time(c01_w.movemntdate,c01_w.movemnttime);
							exception
							when others then
								atend_paciente_unidade_w.dt_entrada_unidade	:=	null;
							end;
							
							atend_paciente_unidade_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
							atend_paciente_unidade_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
							atend_paciente_unidade_w.nr_atendimento		:=	atendimento_paciente_w.nr_atendimento;
			
							if (ie_gerar_passagem_setor_w = 'S') then
								begin
								atend_paciente_unidade_w.ie_passagem_setor	:=	'S';
								
								begin		
								atend_paciente_unidade_w.dt_saida_unidade	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
								exception
								when others then
									atend_paciente_unidade_w.dt_saida_unidade	:=	clock_timestamp();
								end;
								
								begin
								atend_paciente_unidade_w.dt_saida_interno	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
								exception
								when others then
									atend_paciente_unidade_w.dt_saida_interno	:=	clock_timestamp();
								end;
								end;
							else
								begin
								atend_paciente_unidade_w.dt_saida_unidade	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
								
								if (atend_paciente_unidade_w.dt_saida_unidade > clock_timestamp()) then
									atend_paciente_unidade_w.dt_saida_unidade	:=	null;
								end if;
								
								exception
								when others then
									atend_paciente_unidade_w.dt_saida_unidade	:=	null;
								end;
							end if;
							
							select	nextval('atend_paciente_unidade_seq')
							into STRICT	atend_paciente_unidade_w.nr_seq_interno
							;
							
							select	coalesce(max(nr_sequencia),0) + 1
							into STRICT	atend_paciente_unidade_w.nr_sequencia
							from	atend_paciente_unidade
							where	nr_atendimento = atend_paciente_unidade_w.nr_atendimento;
							
							begin				
							--insert into atend_paciente_unidade values atend_paciente_unidade_w;
							atend_paciente_unidade_w := ish_pat_case_pck.registrar_movto('I', atend_paciente_unidade_w);
							exception
							when others then							
								begin
								ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
								reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(	('nurstreatou=' || c01_w.nurstreatou || ' bed=' || c01_w.bed|| chr(13)|| chr(10)||
																			ds_erro_w),1,4000);
								reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;	
								end;
							end;
							
							CALL gerar_conv_meio_externo(
								null,
								'ATEND_PACIENTE_UNIDADE', 
								'NR_SEQ_INTERNO', 
								atend_paciente_unidade_w.nr_seq_interno, 
								substr(c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntseqno,1,40),
								null, 
								nr_seq_regra_w, 
								'A', 
								atend_paciente_unidade_w.nm_usuario);
							end;
						end if;

						if (ie_disponivel_w = 'N') then
							CALL ish_pat_case_pck.reproc_get_transfer(
								reg_integracao_w.nr_seq_fila_transmissao,
								atend_paciente_unidade_w.nr_seq_interno,
								atend_paciente_unidade_w.nr_atendimento,
								atend_paciente_unidade_ww.cd_setor_atendimento,
								atend_paciente_unidade_ww.cd_unidade_basica,
								atend_paciente_unidade_ww.cd_unidade_compl,
								0);
						end if;

					end if;
					end;
				else
					begin

					begin
					select	cd_pessoa_fisica
					into STRICT	cd_pessoa_fisica_w
					from	pf_codigo_externo
					where	cd_pessoa_fisica_externo = c01_w.patientid
					and	ie_tipo_codigo_externo = 'ISH'  LIMIT 1;		
					exception
					when others then
						begin
						cd_pessoa_fisica_w	:=	null;
						
						--'Nao foi localizado a conversao de dados. Elemento: #@DS_ELEMENTO#@; Tag (Atributo): #@DS_ATRIBUTO#@; Regra de conversao: #@NR_SEQ_REGRA#@; Tabela: #@NM_TABELA#@; Atributo: #@NM_ATRIBUTO#@; Valor: #@DS_VALOR#@.'
						reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(	wheb_mensagem_pck.get_texto(736986,
																'DS_ELEMENTO=InpatAdmissData' ||
																';DS_ATRIBUTO=Patientid' ||
																';NR_SEQ_REGRA='||reg_integracao_w.nr_seq_regra_conversao ||
																';NM_TABELA=PF_CODIGO_EXTERNO' ||
																';NM_ATRIBUTO=CD_PESSOA_FISICA_EXTERNO' ||
																';DS_VALOR=' || c01_w.patientid),1,4000);
						reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;
						end;
					end;
					
					if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (episodio_paciente_w.cd_pessoa_fisica IS NOT NULL AND episodio_paciente_w.cd_pessoa_fisica::text <> '') and (cd_pessoa_fisica_w <> atendimento_paciente_w.cd_pessoa_fisica) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort('Pessoa fisica divergente!');
					end if;	

					reg_integracao_w.nm_tabela		:=	'EPISODIO_PACIENTE';
					
					episodio_paciente_w.cd_pessoa_fisica	:=	cd_pessoa_fisica_w;
					intpd_processar_atributo(reg_integracao_w, 'NR_EPISODIO', c01_w.patcaseid, 'N', episodio_paciente_w.nr_episodio);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_EPISODIO', c01_w.casetypeext, 'S', episodio_paciente_w.nr_seq_tipo_episodio);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_SUBTIPO_EPISODIO', c01_w.casecategory, 'S', episodio_paciente_w.nr_seq_subtipo_episodio);
					intpd_processar_atributo(reg_integracao_w, 'IE_STATUS', c01_w.casestatus, 'S', episodio_paciente_w.ie_status);		
					intpd_processar_atributo(reg_integracao_w, 'DS_OBSERVACAO', c01_w.casecomment, 'N', episodio_paciente_w.ds_observacao);
					
					begin
					episodio_paciente_w.dt_episodio	:=	to_date(c01_w.startdate,'yyyy-mm-dd');
					exception
					when others then
						if (coalesce(episodio_paciente_w.nr_sequencia::text, '') = '') then
							episodio_paciente_w.dt_episodio	:=	clock_timestamp();
						end if;
					end;
					
					begin
					episodio_paciente_w.dt_fim_episodio	:=	to_date(c01_w.enddate,'yyyy-mm-dd');
					exception
					when others then
						if (c01_w.enddate like '%0000-00-00%') then
							episodio_paciente_w.dt_fim_episodio	:=	null;
						end if;
					end;
				
					--OS 1992990 evitar o fechamento de case com data futura
					if (trunc(episodio_paciente_w.dt_fim_episodio) > trunc(clock_timestamp())) and (coalesce(c01_w.billingstatus,'XPTO') not in ('2','3')) then -- (2 - case is billed) (3 - case is tempoary billed)
						episodio_paciente_w.dt_fim_episodio := null;
					end if;
					
					/*
					begin
					episodio_paciente_w.dt_cancelamento	:=	to_date(c01_w.canceldate,'yyyy-mm-dd');
					exception
					when others then
						episodio_paciente_w.dt_cancelamento	:=	null;
					end;			

					if	(episodio_paciente_w.dt_cancelamento is not null) then --Somente preencher o usuario, se vir a data de cancelamento.
						intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_CANCELAMENTO', c01_w.canceluser, 'N', episodio_paciente_w.nm_usuario_cancelamento);
					end if;
					
					*/
					
					episodio_paciente_w.nm_usuario	:=	nm_usuario_w;
					episodio_paciente_w.dt_atualizacao	:=	dt_atualizacao_w;		
					
					reg_integracao_w.nm_tabela	:=	'ATENDIMENTO_PACIENTE';
					intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c01_w.institution, 'S', atendimento_paciente_w.cd_estabelecimento);	
					--intpd_processar_atributo(reg_integracao_w, 'NR_DIAS_PREV_ALTA', c01_w.lengthofstay, 'N', atendimento_paciente_w.nr_dias_prev_alta); foi alterado a forma de tratar o Length of Stay. Esta mais abaixo.
					if (coalesce(c01_w.refhospital, 'NULL') <> 'NULL') then
						intpd_processar_atributo(reg_integracao_w, 'CD_CGC_INDICACAO', lpad(somente_numero(c01_w.refhospital), 10, 0) , 'N', atendimento_paciente_w.cd_cgc_indicacao);
					else
						intpd_processar_atributo(reg_integracao_w, 'CD_CGC_INDICACAO', null , 'N', atendimento_paciente_w.cd_cgc_indicacao);
					end if;
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ACIDENTE', c01_w.accident, 'S', atendimento_paciente_w.nr_seq_tipo_acidente);
					
					gerar_nr_episodio_regra(episodio_paciente_w.dt_episodio, episodio_paciente_w.nr_seq_tipo_episodio, episodio_paciente_w.nm_usuario, episodio_paciente_w.nr_episodio);

					begin
					atendimento_paciente_w.dt_ocorrencia	:=	to_date(c01_w.accidentdate||c01_w.accidenttime,'yyyy-mm-ddhh24:mi:ss');
					exception
					when others then
						begin
						atendimento_paciente_w.dt_ocorrencia	:=	to_date(c01_w.accidentdate,'yyyy-mm-dd');
						exception
						when others then
							atendimento_paciente_w.dt_ocorrencia	:=	null;
						end;
					end;
					
					--intpd_processar_atributo(reg_integracao_w, 'CD_MUNICIPIO_OCORRENCIA', c01_w.accidentloc, 'N', atendimento_paciente_w.cd_municipio_ocorrencia);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_FORMA_CHEGADA', c01_w.arrivalmode, 'S', atendimento_paciente_w.nr_seq_forma_chegada);
					
					if (c01_w.ie_tipo_episodio = 'OUTPAT') then
						refphys_w	:=	c01_w.refphys2;			
					else	
						refphys_w	:=	c01_w.refphys;			
					end if;	

					if (c01_w.refphyslanr IS NOT NULL AND c01_w.refphyslanr::text <> '') or (c01_w.refphysbsnr IS NOT NULL AND c01_w.refphysbsnr::text <> '') then
						refphys_w := refphys_w||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.refphyslanr||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.refphysbsnr;
					end if;
					
					intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO_REFERIDO', refphys_w, 'ISHMED', atendimento_paciente_w.cd_medico_referido);
					if (length(refphys_w) > 0) and
						((coalesce(atendimento_paciente_w.cd_medico_referido::text, '') = '') OR (reg_integracao_w.ie_usou_valor_padrao = 'S')) then
						CALL ish_pat_case_pck.gravar_int_bp(substr(c01_w.client||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.institution||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||refphys_w,1,80));							
					end if;
					
					if (c01_w.attphyslanr IS NOT NULL AND c01_w.attphyslanr::text <> '') then
						attphys_w := c01_w.attphys||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.attphyslanr||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10);
					end if;
					reg_integracao_w.ie_usou_valor_padrao	:= 'N';
					intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO_RESP', attphys_w, 'ISHMED', atendimento_paciente_w.cd_medico_resp);
					
					if (length(c01_w.attphys) > 0) and (reg_integracao_w.ie_usou_valor_padrao = 'S') then
						CALL ish_pat_case_pck.gravar_int_bp(substr(c01_w.client||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.institution||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||attphys_w,1,80));
					end if;
					
					if (ish_param_pck.get_conv_tipo_adm_fat = 'CTMCMT') then
						intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(c01_w.casetype || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntctgry || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemnttype,1,40), 'S', atendimento_paciente_w.nr_seq_tipo_admissao_fat);
					else
						intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ADMISSAO_FAT', substr(c01_w.movemntctgry || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemnttype,1,40), 'S', atendimento_paciente_w.nr_seq_tipo_admissao_fat);
					end if;
					
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIFICACAO', c01_w.movemntreas1, 'S', atendimento_paciente_w.nr_seq_classificacao);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_QUEIXA', c01_w.movemntreas2, 'S', atendimento_paciente_w.nr_seq_queixa);		

					begin
					atendimento_paciente_w.dt_ultima_menstruacao	:=	to_date(c01_w.lastmenstrualperiod,'yyyy-mm-dd');	
					exception
					when others then
						atendimento_paciente_w.dt_ultima_menstruacao	:=	null;
					end;
					
					open c02;
					loop
					fetch c02 into	
						c02_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin
						intpd_processar_atributo(reg_integracao_w, 'QT_IG_SEMANA', c02_w.weekofpregnancy, 'N', atendimento_paciente_w.qt_ig_semana);		
						exit;
						end;
					end loop;
					close c02;
					
					atendimento_paciente_w.nm_usuario	:=	nm_usuario_w;
					atendimento_paciente_w.dt_atualizacao	:=	dt_atualizacao_w;

           			if (c01_w.ie_tipo_episodio <> 'OUTPAT') then
						intpd_processar_atributo(reg_integracao_w, 'REFPSTTRTTYPE', c01_w.refpsttrttype, 'S', atendimento_paciente_w.cd_procedencia);
					end if;

					if (coalesce(atendimento_paciente_w.cd_procedencia::text, '') = '') then
						/*  Integracao padrao / Regras de integracao / Consultar episodio do paciente / SOAP / Valor padrao */

						select	coalesce(max(c.ds_valor),'')
						into STRICT	atendimento_paciente_w.cd_procedencia
						from	intpd_eventos		a,
							intpd_eventos_sistema	b,
							intpd_eventos_valores	c,
							intpd_fila_transmissao	d
						where	a.nr_sequencia	= b.nr_seq_evento
						and	b.nr_sequencia	= c.nr_seq_evento_sistema
						and	d.nr_seq_evento_sistema = b.nr_sequencia
						and	d.nr_sequencia	= nr_sequencia_p
						and	c.nm_elemento	= 'ATENDIMENTO_PACIENTE'
						and	c.nm_atributo	= 'CD_PROCEDENCIA';
					end if;

					if (coalesce(c01_w.quickadm, 'N') = 'X') then
						intpd_processar_atributo(reg_integracao_w, 'IE_INFORM_INCOMPLETAS', 'S', 'N', atendimento_paciente_w.ie_inform_incompletas);
					else
						intpd_processar_atributo(reg_integracao_w, 'IE_INFORM_INCOMPLETAS', 'N', 'N', atendimento_paciente_w.ie_inform_incompletas);
					end if;

					reg_integracao_w.nm_tabela	:= 'ATENDIMENTO_PACIENTE_INF';				
					intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', atendimento_paciente_w.cd_medico_referido, 'N', atendimento_paciente_inf_w.cd_medico);
					intpd_processar_atributo(reg_integracao_w, 'NR_RQE', c01_w.refphyslanr, 'N', atendimento_paciente_inf_w.nr_rqe);
					intpd_processar_atributo(reg_integracao_w, 'NR_BSNR', c01_w.refphysbsnr, 'N', atendimento_paciente_inf_w.nr_bsnr);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_ACIDENTE', c01_w.accident, 'S', atendimento_paciente_inf_w.nr_seq_tipo_acidente);

					atendimento_paciente_inf_w.cd_cgc_empregador := atendimento_paciente_w.cd_cgc_indicacao;

					begin
					atendimento_paciente_inf_w.dt_ocorrencia	:=	to_date(c01_w.accidentdate||c01_w.accidenttime,'yyyy-mm-ddhh24:mi:ss');
					exception
					when others then
						begin
						atendimento_paciente_inf_w.dt_ocorrencia	:=	to_date(c01_w.accidentdate,'yyyy-mm-dd');
						exception
						when others then
							atendimento_paciente_inf_w.dt_ocorrencia	:=	null;
						end;
					end;			
					
					intpd_processar_atributo(reg_integracao_w, 'DS_ACIDENTE', c01_w.accidentloc, 'N', atendimento_paciente_inf_w.ds_acidente);
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_FORMA_CHEGADA', c01_w.arrivalmode, 'S', atendimento_paciente_inf_w.nr_seq_forma_chegada);
					intpd_processar_atributo(reg_integracao_w, 'NR_ACIDENTE', c01_w.accidentno, 'N', atendimento_paciente_inf_w.nr_acidente);
					
					begin
					atendimento_paciente_inf_w.dt_inicio_validade	:=	to_date(c01_w.startdate, 'yyyy-mm-dd');
					exception
					when others then
						atendimento_paciente_inf_w.dt_inicio_validade	:=	null;
					end;
					
					begin
					atendimento_paciente_inf_w.dt_validade	:=	to_date(c01_w.enddate, 'yyyy-mm-dd');
					exception
					when others then
						atendimento_paciente_inf_w.dt_validade	:=	null;
					end;
					
					select	coalesce(max(ie_tipo_bg),'N')
					into STRICT	ie_tipo_bg_w
					from	tipo_admissao_fat
					where	nr_sequencia	= nr_seq_tipo_admissao_fat_w;
					
					if (ie_tipo_bg_w = 'S') then
						begin
						select	*
						into STRICT	pessoa_fisica_empregador_w
						from	pessoa_fisica_empregador pfe
						where	pfe.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and     ((episodio_paciente_w.dt_episodio between trunc(coalesce(pfe.dt_inicio_trabalho, clock_timestamp())) and trunc(pfe.dt_fim_trabalho)) or (episodio_paciente_w.dt_episodio >= trunc(coalesce(pfe.dt_inicio_trabalho, clock_timestamp())) and coalesce(pfe.dt_fim_trabalho::text, '') = ''));
						exception
						when others then
							pessoa_fisica_empregador_w.nr_sequencia	:= null;
						end;
						
						if (pessoa_fisica_empregador_w.nr_sequencia IS NOT NULL AND pessoa_fisica_empregador_w.nr_sequencia::text <> '') then
							atendimento_paciente_inf_w.cd_cgc_empregador	:= pessoa_fisica_empregador_w.cd_cgc;
							atendimento_paciente_inf_w.dt_inicio_trabalho	:= pessoa_fisica_empregador_w.dt_inicio_trabalho;
							atendimento_paciente_inf_w.ds_empresa		:= pessoa_fisica_empregador_w.ds_empresa_texto;
							atendimento_paciente_inf_w.ds_endereco_empreg	:= pessoa_fisica_empregador_w.ds_endereco_empreg;
							atendimento_paciente_inf_w.nr_endereco_empreg	:= pessoa_fisica_empregador_w.nr_endereco_empreg;
							atendimento_paciente_inf_w.ds_pais_empreg	:= pessoa_fisica_empregador_w.cd_cep_empreg;
							atendimento_paciente_inf_w.cd_cep_empreg	:= pessoa_fisica_empregador_w.ds_municipio_empreg;
							atendimento_paciente_inf_w.nr_telefone		:= pessoa_fisica_empregador_w.nr_telefone;
							atendimento_paciente_inf_w.ds_profissao			:= pessoa_fisica_empregador_w.ds_profissao;
						end if;
					end if;
					
					reg_integracao_w.nm_tabela	:=	'ATEND_PACIENTE_UNIDADE';
					atend_paciente_unidade_w.nr_seq_interno := somente_numero(intpd_conv('ATEND_PACIENTE_UNIDADE', 'NR_SEQ_INTERNO', substr(c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntseqno,1,40), nr_seq_regra_w, ie_conversao_w, 'I'));
					
					begin
					select	*
					into STRICT	atend_paciente_unidade_w
					from	atend_paciente_unidade
					where	nr_seq_interno = atend_paciente_unidade_w.nr_seq_interno;
					exception
					when others then
						atend_paciente_unidade_w.nr_seq_interno := null;
					end;
					
					--reg_integracao_w.nm_tabela	:=	'ATENDIMENTO_PACIENTE';
					
					if (coalesce(atend_paciente_unidade_w.nr_seq_interno::text, '') = '') or (atend_paciente_unidade_w.nr_seq_interno = Obter_Atepacu_paciente(atendimento_paciente_w.nr_atendimento, 'A')) then		
						intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIF_ESP', c01_w.treatmcategory, 'S', atendimento_paciente_w.nr_seq_classif_esp);				
					end if;
					
					reg_integracao_w.nm_tabela	:=	'ATEND_PACIENTE_UNIDADE';
					
					if (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') and (atend_paciente_unidade_w.nr_atendimento <> atendimento_paciente_w.nr_atendimento) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort('Atendimento divergente #' || atend_paciente_unidade_w.nr_atendimento || '/' || atendimento_paciente_w.nr_atendimento || '#');
					end if;
				
					begin
					select	cd_setor_atendimento
					into STRICT	atend_paciente_unidade_w.cd_setor_atendimento
					from	setor_atendimento
					where	cd_setor_externo = c01_w.nurstreatou  LIMIT 1;
					exception
					when others then
						intpd_processar_atributo(reg_integracao_w, 'CD_SETOR_ATENDIMENTO', c01_w.nurstreatou, 'S', atend_paciente_unidade_w.cd_setor_atendimento);
					end;
					
					begin
					select	cd_unidade_basica,
						cd_unidade_compl
					into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
						atend_paciente_unidade_w.cd_unidade_compl
					from	unidade_atendimento
					where	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
					and	nm_leito_integracao = c01_w.room ||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)|| c01_w.bed;
					exception
					when others then
						begin
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento
						where	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
						and	nm_leito_integracao = c01_w.bed;
						exception
						when others then
							begin
							if (coalesce(c01_w.bed,'X') <> 'X') then
								begin
								intpd_processar_atributo(reg_integracao_w, 'CD_UNIDADE_BASICA', c01_w.room, 'S', atend_paciente_unidade_w.cd_unidade_basica);
								intpd_processar_atributo(reg_integracao_w, 'CD_UNIDADE_COMPL', c01_w.bed, 'S', atend_paciente_unidade_w.cd_unidade_compl);
								end;
							end if;
							end;
						end;	
					end;				
					
					if (coalesce(c01_w.department,'XPTO') <> 'XPTO') then	
						intpd_processar_atributo(reg_integracao_w, 'CD_DEPARTAMENTO', c01_w.department, 'S', atend_paciente_unidade_w.cd_departamento);
					end if;
					
					intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIF_ESP', c01_w.treatmcategory, 'S', atend_paciente_unidade_w.nr_seq_classif_esp);
					
					if (coalesce(atend_paciente_unidade_w.cd_unidade_basica::text, '') = '') or (coalesce(c01_w.room,'X') = 'X') then
						begin		
						select	cd_unidade_basica,
							cd_unidade_compl
						into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
							atend_paciente_unidade_w.cd_unidade_compl
						from	unidade_atendimento a,
							tipo_acomodacao b
						where	a.cd_tipo_acomodacao  = b.cd_tipo_acomodacao
						and	b.ie_sem_acomodacao = 'S'
						and	a.cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento
						and	a.ie_situacao = 'A'
						and	b.ie_situacao = 'A'  LIMIT 1;
						exception
						when others then
							null;
						end;
					end if;
					
					atend_paciente_unidade_w.nm_usuario		:=	nm_usuario_w;
					atend_paciente_unidade_w.dt_atualizacao	:=	dt_atualizacao_w;
					
					begin
					select	cd_unidade_basica,
						cd_unidade_compl,
						cd_setor_atendimento
					into STRICT	atend_paciente_unidade_w.cd_unidade_basica,
						atend_paciente_unidade_w.cd_unidade_compl,
						atend_paciente_unidade_w.cd_setor_atendimento
					from	unidade_atendimento
					where	cd_unidade_basica = atend_paciente_unidade_w.cd_unidade_basica
					and	cd_unidade_compl = atend_paciente_unidade_w.cd_unidade_compl
					and	cd_setor_atendimento = atend_paciente_unidade_w.cd_setor_atendimento;
					exception
					when others then
						begin
						reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(	wheb_mensagem_pck.get_texto(736986,
																'DS_ELEMENTO=InpatAdmissData' ||
																';DS_ATRIBUTO=Patientid' ||
																';NR_SEQ_REGRA='||reg_integracao_w.nr_seq_regra_conversao ||
																';NM_TABELA=UNIDADE_ATENDIMENTO' ||
																';NM_ATRIBUTO=CD_UNIDADE_BASICA+CD_UNIDADE_COMPL+CD_SETOR_ATENDIMENTO' ||
																';DS_VALOR=' || c01_w.nurstreatou || '+' || c01_w.bed),1,4000);
						reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;
						end;
					end;
					
					reg_integracao_w := ish_pat_case_pck.gerar_pessoa_classif(reg_integracao_w, cd_pessoa_fisica_w, 'RESTRICTED', c01_w.restricted, nr_seq_regra_w, ie_conversao_w, nm_usuario_w, dt_atualizacao_w);
					
					if (reg_integracao_w.qt_reg_log = 0) then
						begin
						
						if (episodio_paciente_w.nr_sequencia IS NOT NULL AND episodio_paciente_w.nr_sequencia::text <> '') then
							
							update	episodio_paciente
							set	row = episodio_paciente_w
							where	nr_sequencia = episodio_paciente_w.nr_sequencia;
						else
							begin
							
							select	nextval('episodio_paciente_seq')
							into STRICT	episodio_paciente_w.nr_sequencia
							;
							
							episodio_paciente_w.nm_usuario_nrec		:=	nm_usuario_nrec_w;
							episodio_paciente_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
											
							insert into episodio_paciente values (episodio_paciente_w.*);
							end;
						end if;
								
						if (atendimento_paciente_w.nr_atendimento IS NOT NULL AND atendimento_paciente_w.nr_atendimento::text <> '') then
						
							if (obter_se_atendimento_futuro(atendimento_paciente_w.nr_atendimento) = 'S') and (coalesce(c01_w.StatusInd,'XPTO') not in ('P','W')) then
								
								begin
								dt_chegada_w	:=	to_date(c01_w.movemntdate || c01_w.movemnttime,'yyyy-mm-ddhh24:mi:ss');
								exception
								when others then
									dt_chegada_w	:=	null;
								end;
								
								if (trunc(dt_chegada_w) <= trunc(clock_timestamp())) then
									atendimento_paciente_w.dt_entrada		:= dt_chegada_w;
									atendimento_paciente_w.dt_chegada_paciente	:= dt_chegada_w;
								end if;	
							else								
								begin
								atendimento_paciente_w.dt_entrada	:=	to_date(c01_w.movemntdate || c01_w.movemnttime,'yyyy-mm-ddhh24:mi:ss');
								exception
								when others then
									null;
								end;
							end if;
					
							update	atendimento_paciente
							set	row = atendimento_paciente_w
							where	nr_atendimento = atendimento_paciente_w.nr_atendimento;
						else
							begin
							
							select	nextval('atendimento_paciente_seq')
							into STRICT	atendimento_paciente_w.nr_atendimento
							;
							
							atendimento_paciente_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
							atendimento_paciente_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
							atendimento_paciente_w.nr_seq_episodio	:=	episodio_paciente_w.nr_sequencia;
							atendimento_paciente_w.cd_pessoa_fisica	:=	episodio_paciente_w.cd_pessoa_fisica;
							
							if (c01_w.ie_tipo_episodio = 'OUTPAT') then
								atendimento_paciente_w.ie_tipo_atendimento	:=	8;						
							else
								atendimento_paciente_w.ie_tipo_atendimento	:=	1;						
							end if;
							
							atendimento_paciente_w.ie_permite_visita	:=	'S';
							atendimento_paciente_w.nm_usuario		:=	nm_usuario_w;			
							
							begin
							atendimento_paciente_w.dt_entrada	:=	to_date(c01_w.movemntdate || c01_w.movemnttime,'yyyy-mm-ddhh24:mi:ss');
							exception
							when others then
								atendimento_paciente_w.dt_entrada	:=	null;
							end;
							
							insert into atendimento_paciente values (atendimento_paciente_w.*);				
							end;
						end if;

						atendimento_paciente_inf_w.dt_atualizacao	:=	clock_timestamp();
						atendimento_paciente_inf_w.nm_usuario		:=	nm_usuario_w;

						if (atendimento_paciente_inf_w.nr_atendimento IS NOT NULL AND atendimento_paciente_inf_w.nr_atendimento::text <> '') then
							update	atendimento_paciente_inf
							set	row = atendimento_paciente_inf_w
							where	nr_atendimento	= atendimento_paciente_inf_w.nr_atendimento
							and	nr_sequencia	= atendimento_paciente_inf_w.nr_sequencia;
						else
							begin
							select	nextval('atendimento_paciente_inf_seq')
							into STRICT	atendimento_paciente_inf_w.nr_sequencia
							;
							
							atendimento_paciente_inf_w.nr_atendimento	:=	atendimento_paciente_w.nr_atendimento;
							atendimento_paciente_inf_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
							atendimento_paciente_inf_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
							insert into atendimento_paciente_inf values (atendimento_paciente_inf_w.*);
							end;
						end if;
						
						CALL ish_rzv_insurance_pck.replicar_convenios_atend(episodio_paciente_w.nr_sequencia, null, null);
						
						update	episodio_paciente
						set	dt_episodio	= atendimento_paciente_w.dt_entrada
						where	nr_sequencia	= episodio_paciente_w.nr_sequencia
						and	dt_episodio	> atendimento_paciente_w.dt_entrada;
						
						--if	(nvl(c01_w.statusind,'XPTO') <> 'P') then --Somente se nao for Plan (planejado) que deve gerar movimentacao
							atend_paciente_unidade_ww	:=	atend_paciente_unidade_w;
						
							SELECT * FROM ish_pat_case_pck.valida_status_unidade(
								nr_sequencia_p, reg_integracao_w, atend_paciente_unidade_w, c01_w.movemntenddate, c01_w.movemntendtime, ie_disponivel_w) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; atend_paciente_unidade_w := _ora2pg_r.atend_paciente_unidade_p; ie_disponivel_w := _ora2pg_r.ie_disponivel_p;
						
							if (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') then
							
								if (dt_chegada_w IS NOT NULL AND dt_chegada_w::text <> '') and (atend_paciente_unidade_w.nr_sequencia = 1) and (coalesce(atend_paciente_unidade_w.dt_saida_unidade::text, '') = '') then
									atend_paciente_unidade_w.dt_entrada_unidade := dt_chegada_w;						
								else
									begin
									atend_paciente_unidade_w.dt_entrada_unidade	:=	ISH_UTILS_PCK.get_ish_valid_time(c01_w.movemntdate,c01_w.movemnttime);
									atend_paciente_unidade_w.dt_saida_unidade	:=	ISH_UTILS_PCK.get_ish_valid_time(c01_w.movemntenddate,c01_w.movemntendtime);
									exception
									when others then
										null;
									end;
								end if;
										
								/*
								update	atend_paciente_unidade
								set	row = atend_paciente_unidade_w
								where	nr_seq_interno = atend_paciente_unidade_w.nr_seq_interno;
								*/
								
								atend_paciente_unidade_w := ish_pat_case_pck.registrar_movto('U', atend_paciente_unidade_w);
							else
								begin
								
								begin
								atend_paciente_unidade_w.dt_entrada_unidade	:=	ISH_UTILS_PCK.get_ish_valid_time(c01_w.movemntdate,c01_w.movemnttime);
								exception
								when others then
									atend_paciente_unidade_w.dt_entrada_unidade	:=	null;
								end;
								
								atend_paciente_unidade_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
								atend_paciente_unidade_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
								atend_paciente_unidade_w.nr_atendimento		:=	atendimento_paciente_w.nr_atendimento;
							
								select	coalesce(max(ie_gerar_passagem_setor),'N')
								into STRICT	ie_gerar_passagem_setor_w
								from	tipo_admissao_fat
								where	nr_sequencia = atendimento_paciente_w.nr_seq_tipo_admissao_fat;	

								--if	(c01_w.movemntctgry ='4') and (c01_w.movemnttype = 'VO') then				
								if (ie_gerar_passagem_setor_w = 'S') then
									begin		
									atend_paciente_unidade_w.dt_saida_unidade	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
									exception
									when others then
										atend_paciente_unidade_w.dt_saida_unidade	:=	clock_timestamp();
									end;
									begin
									atend_paciente_unidade_w.dt_saida_interno	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
									exception
									when others then
										atend_paciente_unidade_w.dt_saida_interno	:=	clock_timestamp();
									end;
								else
									begin
									atend_paciente_unidade_w.dt_saida_unidade	:=	to_date(c01_w.movemntenddate || c01_w.movemntendtime,'yyyy-mm-ddhh24:mi:ss');
									
									if (atend_paciente_unidade_w.dt_saida_unidade > clock_timestamp()) then
										atend_paciente_unidade_w.dt_saida_unidade	:=	null;
									end if;
									exception
									when others then
										atend_paciente_unidade_w.dt_saida_unidade	:=	null;
									end;
								end if;
								
								select	nextval('atend_paciente_unidade_seq')
								into STRICT	atend_paciente_unidade_w.nr_seq_interno
								;
								
								select	coalesce(max(nr_sequencia),0) + 1
								into STRICT	atend_paciente_unidade_w.nr_sequencia
								from	atend_paciente_unidade
								where	nr_atendimento = atend_paciente_unidade_w.nr_atendimento;
								
								begin				
								--insert into atend_paciente_unidade values atend_paciente_unidade_w;
								atend_paciente_unidade_w := ish_pat_case_pck.registrar_movto('I', atend_paciente_unidade_w);
								exception
								when others then
									begin
									ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
									reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(	('nurstreatou=' || c01_w.nurstreatou || ' bed=' || c01_w.bed|| chr(13)|| chr(10)||
																				ds_erro_w),1,4000);
									reg_integracao_w.qt_reg_log	:=	reg_integracao_w.qt_reg_log + 1;	
									end;									
								end;
								
								CALL gerar_conv_meio_externo(
									null,
									'ATEND_PACIENTE_UNIDADE', 
									'NR_SEQ_INTERNO', 
									atend_paciente_unidade_w.nr_seq_interno, 
									substr(c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.movemntseqno,1,40),
									null, 
									nr_seq_regra_w, 
									'A', 
									atend_paciente_unidade_w.nm_usuario);
								end;
							end if;
							
							--INSERT_ATEND_UNID_CLASSIF_ESP(null, null, atend_paciente_unidade_w.nr_atendimento, atend_paciente_unidade_w.nr_seq_interno, nm_usuario_w);
						--end if;
						
						if (ie_disponivel_w = 'N') then
							CALL ish_pat_case_pck.reproc_get_transfer(
								reg_integracao_w.nr_seq_fila_transmissao,
								atend_paciente_unidade_w.nr_seq_interno,
								atend_paciente_unidade_w.nr_atendimento,
								atend_paciente_unidade_ww.cd_setor_atendimento,
								atend_paciente_unidade_ww.cd_unidade_basica,
								atend_paciente_unidade_ww.cd_unidade_compl,
								0);
						end if;

						reg_integracao_w.nm_tabela	:= 'PEP_PAC_CI';
						intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO_NREC', c01_w.disconsdat, 'S', dt_atualizacao_nrec_w);
						intpd_processar_atributo(reg_integracao_w, 'IE_CONTROLA_ALTA', c01_w.disconsent, 'S', ie_controla_alta_w);

						select  CASE WHEN ie_controla_alta_w='X' THEN  'S'  ELSE 'N' END
						into STRICT    ie_controla_alta_w
						;

						begin
						select  nr_sequencia
						into STRICT    nr_sequencia_w
						from (SELECT   *
						      from      pep_pac_ci
						      where     nr_atendimento	= atend_paciente_unidade_w.nr_atendimento
						      and	ie_tipo_consentimento = 'E'
						      and	ie_status	= 'A'
						      order by  nr_sequencia desc) alias0 LIMIT 1;
						exception
						when others then
							nr_sequencia_w	:=	null;
						end;

						if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
							update	pep_pac_ci
							set	dt_atualizacao_nrec = dt_atualizacao_nrec_w,
								ie_controla_alta = ie_controla_alta_w
							where	nr_sequencia = nr_sequencia_w;
						else
							select  max(vl_default)
							into STRICT    ds_titulo_w
							from    tabela_atrib_regra
							where   upper(nm_tabela) = 'PEP_PAC_CI'
							and     upper(nm_atributo) = 'DS_TITULO';

							select  max(cd_pessoa_fisica)
							into STRICT    cd_profissional_w
							from    usuario
							where   upper(nm_usuario) = 'ISH';

							insert into pep_pac_ci(
								nr_sequencia,
								dt_atualizacao_nrec,
								dt_atualizacao,
								ie_controla_alta,
								nm_usuario_nrec,
								nm_usuario,
								cd_pessoa_fisica,
								cd_estabelecimento,
								cd_profissional,
								ds_titulo,
								ie_situacao,
								ie_tipo_consentimento
							) values (
								nextval('pep_pac_ci_seq'),
								dt_atualizacao_nrec_w,
								dt_atualizacao_nrec_w,
								ie_controla_alta_w,
								nm_usuario_nrec_w,
								nm_usuario_w,
								cd_pessoa_fisica_w,
								cd_estabelecimento_w,
								cd_profissional_w,
								coalesce(ds_titulo_w,obter_desc_expressao(860177)),
								'A',
								'E'
							);
						end if;

						if (length(c01_w.famphys) > 0) then
							reg_integracao_w.nm_tabela	:=	'PF_MEDICO_EXTERNO';		
							intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', c01_w.famphys, 'ISHMED', pf_medico_externo_w.cd_medico);	
							intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_MEDICO', 'FAMPHYS', 'ISHMED', pf_medico_externo_w.nr_seq_tipo_medico);
							
							nr_seq_tipo_medico_w	:=	pf_medico_externo_w.nr_seq_tipo_medico;
							
							if	((coalesce(pf_medico_externo_w.cd_medico::text, '') = '') OR (reg_integracao_w.ie_usou_valor_padrao = 'S')) then
								CALL ish_pat_case_pck.gravar_int_bp(substr(c01_w.client||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.institution||current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10)||c01_w.famphys,1,80));							
							end if;
							
							if (coalesce(pf_medico_externo_w.cd_medico,'X') <> 'X') then				
								begin
								
								CALL ish_pat_case_pck.inativar_pf_medico_ext_gp(cd_pessoa_fisica_w,pf_medico_externo_w.cd_medico,nr_seq_tipo_medico_w);
								
								select	*
								into STRICT	pf_medico_externo_w
								from	pf_medico_externo
								where	cd_medico = pf_medico_externo_w.cd_medico
								and	cd_pessoa_fisica = cd_pessoa_fisica_w
								--and	nr_seq_tipo_medico = pf_medico_externo_w.nr_seq_tipo_medico /*SO 1953612 - H100 - Unique List of External Physicians in MPI*/
  LIMIT 1;
								exception
								when others then
									pf_medico_externo_w.nr_sequencia	:=	null;
								end;
								pf_medico_externo_w.dt_fim_vigencia	:= 	null;
						
								if (coalesce(pf_medico_externo_w.nr_sequencia::text, '') = '') then
									begin	
									intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', c01_w.famphys, 'ISHMED', pf_medico_externo_w.cd_medico);					
									pf_medico_externo_w.nm_usuario		:=	nm_usuario_w;
									pf_medico_externo_w.dt_atualizacao	:=	dt_atualizacao_w;
									pf_medico_externo_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
									pf_medico_externo_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
									pf_medico_externo_w.cd_pessoa_fisica	:=	cd_pessoa_fisica_w;
									pf_medico_externo_w.nr_seq_tipo_medico	:=	pf_medico_externo_w.nr_seq_tipo_medico;
									
									select	nextval('pf_medico_externo_seq')
									into STRICT	pf_medico_externo_w.nr_sequencia
									;
									
									insert into pf_medico_externo values (pf_medico_externo_w.*);
									end;
								elsif (coalesce(pf_medico_externo_w.nr_seq_tipo_medico::text, '') = '') then
									pf_medico_externo_w.nr_seq_tipo_medico	:=	nr_seq_tipo_medico_w;

									update	pf_medico_externo
									set		row = pf_medico_externo_w
									where	nr_sequencia = pf_medico_externo_w.nr_sequencia;
								elsif (nr_seq_tipo_medico_w IS NOT NULL AND nr_seq_tipo_medico_w::text <> '') and (pf_medico_externo_w.nr_seq_tipo_medico <> nr_seq_tipo_medico_w) then
									intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_MEDICO', 'FAMREFPHYS', 'S', pf_medico_externo_w.nr_seq_tipo_medico);

									update	pf_medico_externo
									set		row = pf_medico_externo_w
									where	nr_sequencia = pf_medico_externo_w.nr_sequencia;
								end if;
							end if;
						end if;			
						
						if (length(refphys_w) > 0) then
							reg_integracao_w.nm_tabela	:=	'PF_MEDICO_EXTERNO';		
							intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', refphys_w, 'ISHMED', pf_medico_externo_w.cd_medico);				
							intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_MEDICO', 'REFPHYS', 'S', pf_medico_externo_w.nr_seq_tipo_medico);
							
							/*if	((pf_medico_externo_w.cd_medico is null) OR (reg_integracao_w.ie_usou_valor_padrao = 'S')) then
								ish_pat_case_pck.gravar_int_bp(substr(c01_w.client||ds_separador_w||c01_w.institution||ds_separador_w||refphys_w,1,80));							
							end if;*/
							nr_seq_tipo_medico_w	:=	pf_medico_externo_w.nr_seq_tipo_medico;

							if (coalesce(pf_medico_externo_w.cd_medico,'X') <> 'X') then
								begin
								select	*
								into STRICT	pf_medico_externo_w
								from	pf_medico_externo
								where	cd_medico = pf_medico_externo_w.cd_medico
								and	cd_pessoa_fisica = cd_pessoa_fisica_w
								--and	nr_seq_tipo_medico = pf_medico_externo_w.nr_seq_tipo_medico /*SO 1953612 - H100 - Unique List of External Physicians in MPI*/
  LIMIT 1;
								exception
								when others then
									pf_medico_externo_w.nr_sequencia	:=	null;
								end;
								pf_medico_externo_w.dt_fim_vigencia	:= 	null;
								if (coalesce(pf_medico_externo_w.nr_sequencia::text, '') = '') then
									begin		
									intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', refphys_w, 'ISHMED', pf_medico_externo_w.cd_medico);
									pf_medico_externo_w.nm_usuario		:=	nm_usuario_w;
									pf_medico_externo_w.dt_atualizacao		:=	dt_atualizacao_w;
									pf_medico_externo_w.nm_usuario_nrec	:=	nm_usuario_nrec_w;
									pf_medico_externo_w.dt_atualizacao_nrec	:=	dt_atualizacao_nrec_w;
									pf_medico_externo_w.cd_pessoa_fisica	:=	cd_pessoa_fisica_w;
									pf_medico_externo_w.nr_seq_tipo_medico	:=	pf_medico_externo_w.nr_seq_tipo_medico;
									
									select	nextval('pf_medico_externo_seq')
									into STRICT	pf_medico_externo_w.nr_sequencia
									;
									
									insert into PF_MEDICO_EXTERNO values (pf_medico_externo_w.*);
									end;
								elsif (coalesce(pf_medico_externo_w.nr_seq_tipo_medico::text, '') = '') then
									pf_medico_externo_w.nr_seq_tipo_medico	:=	nr_seq_tipo_medico_w;
									
									update	pf_medico_externo
									set	row = pf_medico_externo_w
									where	nr_sequencia = pf_medico_externo_w.nr_sequencia;
								elsif (nr_seq_tipo_medico_w IS NOT NULL AND nr_seq_tipo_medico_w::text <> '') and (pf_medico_externo_w.nr_seq_tipo_medico <> nr_seq_tipo_medico_w) then
									intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO_MEDICO', 'FAMREFPHYS', 'S', pf_medico_externo_w.nr_seq_tipo_medico);
									CALL ish_pat_case_pck.inativar_pf_medico_ext_gp(cd_pessoa_fisica_w,pf_medico_externo_w.cd_medico,nr_seq_tipo_medico_w);
									
									update	pf_medico_externo
									set	row = pf_medico_externo_w
									where	nr_sequencia = pf_medico_externo_w.nr_sequencia;
								end if;
							end if;
						end if;
									
						if (length(c01_w.lengthofstay) > 0) and (somente_numero(c01_w.lengthofstay) > 0) then
							
							select	max(nr_sequencia)
							into STRICT	nr_seq_atend_prev_alta_w
							from	atend_previsao_alta
							where	nr_atendimento		= atend_paciente_unidade_w.nr_atendimento
							and	nr_dias_prev_alta	= somente_numero(c01_w.lengthofstay)
							and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
							and	coalesce(dt_inativacao::text, '') = '';
							
							if (coalesce(nr_seq_atend_prev_alta_w::text, '') = '') then
							
								CALL gerar_atend_previsao_alta_diag(	atend_paciente_unidade_w.nr_atendimento,
												atendimento_paciente_w.cd_medico_resp, 
												clock_timestamp() + somente_numero(c01_w.lengthofstay), 
												null, --ie_prob_alta_p
												somente_numero(c01_w.lengthofstay),
												nm_usuario_w,
												nr_seq_atend_prev_alta_w);
							end if;
						end if;
					
						if (coalesce(c01_w.CancelInd,'NULL') = 'X') and (coalesce(atendimento_paciente_w.dt_cancelamento::text, '') = '') then
							begin
							begin
							dt_cancelamento_w	:=	to_date(c01_w.canceldate,'yyyy-mm-dd');
							exception
							when others then
								dt_cancelamento_w	:=	null;
							end;
							
							reg_integracao_w.nm_tabela	:=	'ATENDIMENTO_CANCELAMENTO';
							intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_MOTIVO', c01_w.cancelreason, 'S', nr_seq_motivo_cancel_w);
						
							if (reg_integracao_w.qt_reg_log = 0) then
								begin
								CALL wheb_usuario_pck.set_ie_commit('N');
								
								CALL call_cancel_reverse_encounter(
									atendimento_paciente_w.nr_atendimento,
									c01_w.canceluser,
									nr_seq_motivo_cancel_w,
									atendimento_paciente_w.cd_pessoa_fisica,
									null);
								
								CALL wheb_usuario_pck.set_ie_commit('S');
								end;
							end if;
							end;
						end if;
						end;
					end if;
					end;
				end if;
				
				if (c01_w.ie_tipo_episodio = 'OUTPAT') and (reg_integracao_w.qt_reg_log = 0) and (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') then
					begin
					update	atend_paciente_unidade_inf
					set	nr_asv_team = c01_w.attphysteamno
					where	nr_seq_atend_pac_unidade = atend_paciente_unidade_w.nr_seq_interno;
					
					if (NOT FOUND) and (length(c01_w.attphysteamno) > 0) then
						insert into atend_paciente_unidade_inf(
							dt_atualizacao,
							nm_usuario,
							nr_seq_atend_pac_unidade,
							nr_sequencia,
							nr_asv_team)
						values (	clock_timestamp(),
							nm_usuario_w,
							atend_paciente_unidade_w.nr_seq_interno,
							nextval('atend_paciente_unidade_inf_seq'),
							c01_w.attphysteamno);
					end if;
					end;
				end if;
			end if;			
			
			if (c01_w.ie_tipo_episodio = 'OUTPAT') then			
				nr_doc_externo_w	:=	atendimento_paciente_w.nr_atendimento;
			else			
				nr_doc_externo_w	:=	episodio_paciente_w.nr_sequencia;
			end if;
		end if;
		end;
	end loop;
	close c01;

	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_doc_externo = nr_doc_externo_w
	where	nr_sequencia = nr_sequencia_p;

	if (reg_integracao_w.qt_reg_log > 0) then
		begin
		CALL wheb_usuario_pck.set_ie_commit('S');
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ds_log  = NULL
		where	nr_sequencia = nr_sequencia_p;		
		end;
	end if;
	
	reg_integracao_w := gerar_int_padrao.gravar_log(reg_integracao_w);
	exception
	when others then
		begin
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
		
		rollback;	
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		end;
	end;
end if;

update	intpd_fila_transmissao
set	ie_response_procedure = 'S'	
where	nr_sequencia = nr_sequencia_p;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;
	
commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_pat_case_pck.get_inpat_admiss_response ( nr_sequencia_p bigint) FROM PUBLIC;
