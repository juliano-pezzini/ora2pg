-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ish_pat_case_pck.get_detail_response ( nr_sequencia_p bigint) AS $body$
DECLARE

	

nr_seq_interno_w		atend_categoria_convenio.nr_seq_interno%type;
episodio_paciente_w		episodio_paciente%rowtype;

xml_w				xml;
ds_xml_w			text;
ie_status_w			intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';

C00 CURSOR FOR
SELECT	a.pirconsent,
	somente_numero(a.patcaseid) patcaseid,
	a.CancelInd,	
	a.canceluser,
	a.canceldate
from	xmltable(
		xmlnamespaces(
		'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
		'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
	'soapenv:Envelope/soapenv:Body/urn:PatcaseGetdetailResponse/PatcaseData' passing xml_w columns
	pirconsent 	varchar(10)	path 'PirConsent',
	patcaseid	varchar(10)	path 'Patcaseid',
	CancelInd	varchar(1)	path 'CancelInd',
	canceluser	varchar(12)	path 'CancelUser',
	canceldate	varchar(10)	path 'CancelDate') a;

c00_w	c00%rowtype;



c01 CURSOR FOR
SELECT	b.nr_seq_interno
from	atendimento_paciente a,
	atend_categoria_convenio b,
	convenio c
where	a.nr_atendimento = b.nr_atendimento
and	b.cd_convenio = c.cd_convenio
/*and	c.ie_tipo_convenio	= 2	--SO 2157727 We should not have the restriction for public or private. When checked, we should send it*/

and	coalesce(a.dt_cancelamento::text, '') = ''
and	coalesce(a.dt_alta::text, '') = ''
and	a.nr_seq_episodio = episodio_paciente_w.nr_sequencia;

c01_w	c01%rowtype;
	

BEGIN
CALL intpd_inicializacao(nr_sequencia_p);

begin
select	a.ds_xml_retorno
into STRICT	ds_xml_w
from	intpd_fila_transmissao a
where	a.nr_sequencia = nr_sequencia_p;
exception
when others then
	null;
end;

ish_converter_response(nr_sequencia_p, ds_xml_w, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		ie_response_procedure = 'S'
	where	nr_sequencia = nr_sequencia_p;
else	
	begin
	open C00;
	loop
	fetch C00 into	
		C00_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		
		begin
		select	*
		into STRICT	episodio_paciente_w
		from	episodio_paciente
		where	nr_episodio	= ltrim(C00_w.patcaseid, '0');
		
		if (coalesce(episodio_paciente_w.dt_cancelamento::text, '') = '') and (C00_w.CancelInd = 'X') then
			begin
			
			begin
			episodio_paciente_w.dt_cancelamento	:=	to_date(C00_w.canceldate,'yyyy-mm-dd');			
			exception
			when others then
				episodio_paciente_w.dt_cancelamento	:=	clock_timestamp();
			end;
		
			episodio_paciente_w.nm_usuario_cancelamento	:=	c00_w.canceluser;				
		
            CALL cancelar_episodio(	episodio_paciente_w.nr_sequencia,
                        						episodio_paciente_w.cd_pessoa_fisica,
                        						null,
                        						null,
                        						episodio_paciente_w.dt_cancelamento,
                        						episodio_paciente_w.nm_usuario_cancelamento);

			end;
		end if;
		
		exception
		when others then
			episodio_paciente_w	:= null;
		end;

		open c01;
		loop
		fetch c01 into	
			c01_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			if (c00_w.pirconsent = 'X') then
				update	atend_categoria_convenio
				set	ie_autoriza_envio_convenio = 'S'
				where	nr_seq_interno	= c01_w.nr_seq_interno;
			else
				update	atend_categoria_convenio
				set	ie_autoriza_envio_convenio = 'N'
				where	nr_seq_interno	= c01_w.nr_seq_interno;
			end if;
			end;
		end loop;
		close c01;
		end;
	end loop;
	close C00;	
	
	update	intpd_fila_transmissao
	set	ie_status = 'S',
		ie_response_procedure = 'S',
		nr_doc_externo = episodio_paciente_w.nr_sequencia
	where	nr_sequencia = nr_sequencia_p;
	end;
end if;
commit;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_pat_case_pck.get_detail_response ( nr_sequencia_p bigint) FROM PUBLIC;
