-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ish_pat_case_pck.get_absence_response ( nr_sequencia_p bigint) AS $body$
DECLARE


reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_agrupador_w		intpd_fila_transmissao.nr_seq_agrupador%type;
ds_xml_w				text;
xml_w				xml;
InpatAbsenceData_w 		xml;

ds_erro_w			varchar(2000);

c01 CURSOR FOR
SELECT	*
from	xmltable('/InpatAbsenceData' passing InpatAbsenceData_w columns
	patcaseid	varchar(10)	path	'Patcaseid',
	MovemntSeqnoBeg	varchar(5)	path	'MovemntSeqnoBeg',
	MovemntSeqnoEnd	varchar(5)	path	'MovemntSeqnoEnd',	
	MovemntTypeBeg	varchar(2)	path	'MovemntDateBeg',
	MovemntDateBeg	varchar(10)	path	'MovemntDateBeg',
	MovemntTimeBeg	varchar(10)	path	'MovemntDateBeg',
	StatusIndBeg	varchar(1)	path	'MovemntDateBeg',
	MovemntTypeEnd	varchar(2)	path	'MovemntDateBeg',
	MovemntDateEnd	varchar(10)	path	'MovemntDateBeg',
	MovemntTimeEnd	varchar(10)	path	'MovemntDateBeg',
	StatusIndEnd	varchar(1)	path	'MovemntDateBeg');
	
c01_w	c01%rowtype;

ie_status_w			intpd_fila_transmissao.ie_status%type		:=	'S';
ie_tipo_erro_w			intpd_fila_transmissao.ie_tipo_erro%type	:=	'F';
nr_seq_interno_w		atend_paciente_unidade.nr_seq_interno%type;
ie_evento_w			intpd_fila_transmissao.ie_evento%type;
dt_geral_w			timestamp;
atend_paciente_unidade_w	atend_paciente_unidade%rowtype;


BEGIN
intpd_reg_integracao_inicio(nr_sequencia_p, 'R', reg_integracao_w);

begin
select	a.ds_xml_retorno,	
	a.nr_seq_agrupador
into STRICT	ds_xml_w,	
	nr_seq_agrupador_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;
exception
when others then
	null;
end;

ish_converter_response(nr_sequencia_p, ds_xml_w, ie_status_w, ie_tipo_erro_w, xml_w);

if (ie_status_w = 'E') then
	update	intpd_fila_transmissao
	set	ie_status = ie_status_w,
		ie_tipo_erro = ie_tipo_erro_w,
		ie_response_procedure = 'S'
	where	nr_sequencia = nr_sequencia_p;
else
	begin
	select	a.InpatAbsenceData
	into STRICT	InpatAbsenceData_w
	from	xmltable(
			xmlnamespaces(
			'urn:sap-com:document:sap:soap:functions:mc-style' as "urn",
			'http://schemas.xmlsoap.org/soap/envelope/' as "soapenv"),
		'soapenv:Envelope/soapenv:Body/urn:PatcaseGetabsenceResponse' passing xml_w columns
		InpatAbsenceData xmltype path 'InpatAbsenceData') a;	
		
	open c01;
	loop
	fetch c01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin		
		reg_integracao_w.nm_elemento		:= 'InpatAbsenceData';
		reg_integracao_w.nm_tabela 		:= 'ATEND_PACIENTE_UNIDADE';
		
		nr_seq_interno_w	:=	null;
		
		if (somente_numero(c01_w.MovemntSeqnoBeg) > 0) then
			intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_INTERNO', c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.MovemntSeqnoBeg, 'S', nr_seq_interno_w);
		elsif (somente_numero(c01_w.MovemntSeqnoBeg) > 0) then
			intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_INTERNO', c01_w.patcaseid || current_setting('ish_pat_case_pck.ds_separador_w')::varchar(10) || c01_w.MovemntSeqnoEnd, 'S', nr_seq_interno_w);
		end if;
		
		begin
		select	*
		into STRICT	atend_paciente_unidade_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_interno_w;
		exception
		when others then
			atend_paciente_unidade_w.nr_seq_interno	:=	null;
		end;
		
		begin
		dt_geral_w	:=	to_date(c01_w.MovemntDateBeg || c01_w.MovemntTimeBeg, 'yyyy-mm-ddhh24:mi:ss');
		exception
		when others then
			dt_geral_w	:=	null;
		end;
		
		intpd_processar_atributo(reg_integracao_w, 'DT_SAIDA_TEMPORARIA', dt_geral_w, 'N', atend_paciente_unidade_w.dt_saida_temporaria);
		
		begin
		dt_geral_w	:=	to_date(c01_w.MovemntDateEnd || c01_w.MovemntTimeEnd, 'yyyy-mm-ddhh24:mi:ss');
		exception
		when others then
			dt_geral_w	:=	null;
		end;
		
		intpd_processar_atributo(reg_integracao_w, 'DT_RETORNO_SAIDA_TEMPORARIA', dt_geral_w, 'N', atend_paciente_unidade_w.dt_retorno_saida_temporaria);

		if (atend_paciente_unidade_w.nr_seq_interno IS NOT NULL AND atend_paciente_unidade_w.nr_seq_interno::text <> '') then
			/*
			update	atend_paciente_unidade
			set	row = atend_paciente_unidade_w
			where	nr_seq_interno = atend_paciente_unidade_w.nr_seq_interno;
			*/
			atend_paciente_unidade_w := ish_pat_case_pck.registrar_movto('U', atend_paciente_unidade_w);
		end if;
		end;
	end loop;
	close c01;	

	if (reg_integracao_w.qt_reg_log > 0) then
		begin	
		/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

		rollback;
		
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ie_response_procedure = 'S',
			ds_log  = NULL
		where	nr_sequencia = nr_sequencia_p;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status = 'S',
			ie_response_procedure = 'S',
			nr_doc_externo = nr_seq_interno_w
		where	nr_sequencia = nr_sequencia_p;
	end if;
	
	reg_integracao_w := gerar_int_padrao.gravar_log(reg_integracao_w);
	exception
	when others then
		begin
		ds_erro_w	:=	substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,2000);
		
		rollback;	
		update	intpd_fila_transmissao
		set	ie_status = 'E',
			ie_response_procedure = 'S',
			ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		end;
	end;
end if;

if (nr_seq_agrupador_w > 0) then
	CALL intpd_processar_fila_trans(null, 'S', nr_seq_agrupador_w);
end if;

commit;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ish_pat_case_pck.get_absence_response ( nr_sequencia_p bigint) FROM PUBLIC;
