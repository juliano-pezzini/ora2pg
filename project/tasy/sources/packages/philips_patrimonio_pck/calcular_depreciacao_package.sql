-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


CREATE TYPE type_log AS (
		nr_seq_historico		bigint,
		qt_dias_mes			smallint,
		dt_inicial			timestamp,
		dt_final			timestamp,
		qt_dias_uso_periodo		smallint,
		vl_base_deprec_periodo		double precision,
		tx_deprec_mes			double precision,
		vl_residual_mes			double precision,
		vl_baixa_periodo		double precision,
		vl_baixa_total			double precision,
		vl_baixa_total_deprec		double precision,
		vl_total_deprec			double precision,
		vl_deprec_periodo		double precision,
		vl_baixa_deprec_per		double precision);


CREATE OR REPLACE PROCEDURE philips_patrimonio_pck.calcular_depreciacao ( dt_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* ****************************************************************************
VARIAVEIS
***************************************************************************** */

/* Parametros */


ie_atualizar_valor_baixa_w	varchar(1);
ie_calcular_valor_transf_w	varchar(1);
ie_rateio_deprec_transf_w 	varchar(1);
ie_baixar_equip_bem_w		varchar(1);
ie_imobilizado_w		varchar(1);
ie_pais_usuario_w		varchar(3);

ie_primeiro_calculo_w		varchar(1);
ds_erro_w			varchar(2000);
ds_observacao_w			varchar(4000);
idx_log_w			integer;
ds_inicio_log_w	constant	varchar(14) := '#@INICIO_LOG#@';

dt_primeira_baixa_w		timestamp;
dt_ref_deprec_ant_w		timestamp;
dt_ref_deprec_w			timestamp;
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_calculo_w			timestamp;
cd_moeda_w			parametro_compras.cd_moeda_padrao%type;
cd_conta_troca_w		ctb_troca_plano_conta.cd_conta_origem%type;
vl_baixa_bem_anterior_w		double precision;
vl_deprec_mes_w			double precision;
vl_deprec_ano_w			double precision;
qt_dias_primeiro_mes_w		smallint;
qt_meses_uso_w			integer;
qt_dias_uso_w			smallint;
qt_dias_mes_w			smallint;
qt_registro_w			smallint;
vl_base_deprec_bx_w		double precision;
vl_deprec_ano_bx_w		double precision;
vl_deprec_mes_bx_w		double precision;
vl_deprec_per_bx_w		double precision;
vl_baixa_deprec_w		double precision;
vl_baixa_deprec_per_w		double precision;
vl_deprec_acum_ant_w		double precision;
vl_deprec_acum_mes_w		double precision;
vl_deprec_bem_ant_w		double precision;
vl_total_baixa_bem_w		double precision;
vl_base_deprec_ant_w		double precision;
vl_contabil_w			double precision;
vl_deprec_acum_w		double precision;
nr_sequencia_w			bigint;
vl_base_deprec_w		double precision;
vl_base_deprec_fiscal_w		double precision;
dt_proxima_baixa_w		timestamp;

vl_residual_w			double precision;
tx_ajuste_w			double precision;
vl_deprec_mes_fis_w		double precision;
vl_deprec_acum_fis_w		double precision;
vl_fiscal_w			double precision;
vl_ajuste_avaliacao_w		pat_bem_avaliacao.vl_ajuste%type;
vl_avaliacao_w			pat_bem_avaliacao.vl_avaliacao%type;
vl_deprec_acum_reav_w		double precision;
vl_red_base_deprec_w        pat_valor_bem.vl_red_base_deprec%type;
vl_base_deprec_ajust_w      pat_valor_bem.vl_base_deprec_ajust%type;
tx_deprec_base_bem_w        pat_alteracao_base_bem.tx_deprec%type;
ie_bem_base_deprec_w		varchar(1);
vl_contabil_ww              pat_valor_bem.vl_contabil%type;
type vet_log is table of type_log index by integer;
log_w		vet_log;

/* ****************************************************************************
CURSORES
***************************************************************************** */

c01 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_bem,
		a.cd_bem,
		coalesce(a.dt_inicio_deprec,a.dt_inicio_uso) dt_inicio_deprec,
		a.dt_inicio_uso,
		a.vl_original,
		philips_patrimonio_pck.obter_vl_residual(a.nr_sequencia, fim_mes(dt_ref_deprec_w), a.vl_residual) vl_residual,
		round((philips_patrimonio_pck.obter_taxa_depreciacao(a.nr_sequencia, fim_mes(dt_ref_deprec_w),a.tx_deprec,'C'))::numeric, 4) tx_deprec,	/* Validar tratamento de regra de taxa, como sera considerada */

		round((philips_patrimonio_pck.obter_taxa_depreciacao(a.nr_sequencia, fim_mes(dt_ref_deprec_w),a.tx_fiscal,'F'))::numeric, 4) tx_deprec_fiscal,	/* Validar tratamento de regra de taxa, como sera considerada */

		pat_obter_conta_contabil_bem(a.nr_sequencia, fim_mes(dt_ref_deprec_w)) cd_conta_contabil,
		pat_obter_centro_custo_bem(a.nr_sequencia, fim_mes(dt_ref_deprec_w)) cd_centro_custo,
		a.nr_seq_crit_rateio,
		a.nr_seq_regra_conta,
		a.nr_seq_local,
		a.cd_estabelecimento
	from	pat_bem a
	where	pat_obter_estab_bem_periodo(a.nr_sequencia,dt_referencia_p) = cd_estabelecimento_p
	and	a.ie_situacao		= 'A'
	and	a.ie_imobilizado	= CASE WHEN ie_imobilizado_w='S' THEN ie_imobilizado_w  ELSE a.ie_imobilizado END
	and	a.dt_aquisicao		<= fim_mes(dt_ref_deprec_w);

c01_w		c01%rowtype;

c02 CURSOR FOR
	SELECT	coalesce(a.qt_percentual,0) qt_percentual,
		a.dt_historico,
		a.nr_sequencia nr_seq_historico,
		coalesce(a.vl_baixa_bem,0) vl_baixa_bem,
		a.vl_historico
	from	pat_historico_bem a,
		pat_tipo_historico b
	where	a.nr_seq_bem	= c01_w.nr_seq_bem
	and	a.nr_seq_tipo	= b.nr_sequencia
	and	b.ie_valor	in ('B','V')
	and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
	order by a.dt_historico asc;

c02_w		c02%rowtype;

BEGIN
/* ****************************************************************************
Data de depreciacao, ultimo dia do mes
***************************************************************************** */

dt_ref_deprec_w := pkg_date_utils.start_of(pkg_date_utils.end_of(dt_referencia_p, 'MONTH', 0),'DD', 0);

/* ****************************************************************************
MOEDA
Moeda para a depreciacao do mes
***************************************************************************** */

begin
	select	cd_moeda_padrao
	into STRICT	cd_moeda_w
	from	parametro_compras
	where	cd_estabelecimento	= cd_estabelecimento_p  LIMIT 1;
	cd_moeda_w := coalesce(cd_moeda_w,0);
exception
when others then
	cd_moeda_w := 0;
end;

if (cd_moeda_w = 0) then
	/* Falta informar a moeda no parametro compras */


	CALL wheb_mensagem_pck.exibir_mensagem_abort(196454);
end if;

/* ****************************************************************************
PARAMETROS DA FUNCAO
ie_atualizar_valor_baixa_w	= Identifica se deve atualizar o valor no historico de baixa do bem -> UPDATE
ie_calcular_valor_transf_w	= Identifica se deve atualizar o historico de transferencia do bem -> CHAMA PROCEDURE
ie_imobilizado_w		= Identifica se deve ser depreciado somente bens imobilizados -> SELECT DO CURSOR C01
ie_rateio_deprec_transf_w	= Identifica se deve ratear a depreciacao - CHAMA PROCEDURE
ie_baixar_equip_bem_w	= Identifica se ira inativar o equipamento(MAN_EQUIPAMENTO) vinculado ao bem, no momento em que o bem(PAT_BEM) e inativado por baixa
***************************************************************************** */

select	substr(coalesce(obter_valor_param_usuario(937,31,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(937,48,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(937,83,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(937,104,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(937,68,obter_perfil_Ativo,nm_usuario_p,cd_estabelecimento_p),'S'),1,1),
	substr(coalesce(obter_pais_sistema(obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'1'),1,3)
into STRICT	ie_atualizar_valor_baixa_w,
	ie_calcular_valor_transf_w,
	ie_imobilizado_w,
	ie_rateio_deprec_transf_w,
	ie_baixar_equip_bem_w,
	ie_pais_usuario_w
;

/* ****************************************************************************
Verifica se existe algum calculo de depreciacao no estabelecimento
caso nao existir entao e o primeiro mes de calculo
***************************************************************************** */

begin
	select	'N'
	into STRICT	ie_primeiro_calculo_w
	from	pat_mes_ref a
	where	a.ie_situacao = '1'
	and	a.cd_estabelecimento = cd_estabelecimento_p  LIMIT 1;
exception
when others then
	ie_primeiro_calculo_w := 'S';
end;

/* ****************************************************************************
INICIO ROTINA CALCULO
***************************************************************************** */

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	/* ****************************************************************************
	Limpar array de log de baixas
	***************************************************************************** */

	log_w.delete;

	/* ****************************************************************************
	VIGENCIA DA CONTA CONTABIL DO BEM
	***************************************************************************** */

	/* Consistencia  da CONTABILIDADE */


	select	sign(count(*))
	into STRICT	qt_registro_w
	from	pat_bem
	where	substr(obter_se_conta_vigente(c01_w.cd_conta_contabil, dt_referencia_p),1,1) = 'N';
	vl_red_base_deprec_w   := 0;
	vl_base_deprec_ajust_w := null;
	ie_bem_base_deprec_w   := null;
	tx_deprec_base_bem_w   := null;
	if (qt_registro_w > 0) then
		select	coalesce(max(a.cd_conta_origem), 'X')
		into STRICT	cd_conta_troca_w
		from	ctb_troca_plano b,
			ctb_troca_plano_conta a
		where	a.nr_seq_troca = b.nr_sequencia
		and	pkg_date_utils.start_of(b.dt_troca_real, 'MONTH', 0) > dt_referencia_p
		and	a.cd_conta_destino = c01_w.cd_conta_contabil;

		if (cd_conta_troca_w = 'X') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(232821,'cd_conta_contabil_w='||c01_w.cd_conta_contabil);
		else
			c01_w.cd_conta_contabil := cd_conta_troca_w;
		end if;
	end if;
	/* Fim Consistencia da CONTABILIDADE */



	/* ****************************************************************************
	Valores do mes anterior
	***************************************************************************** */

	begin
		dt_ref_deprec_ant_w := pkg_date_utils.add_month(dt_ref_deprec_w,-1, 0);

		select	a.vl_deprec_acum,
			a.vl_deprec_mes,
			a.vl_base_deprec,
			a.vl_base_deprec,
			a.vl_residual
		into STRICT	vl_deprec_acum_ant_w,
			vl_deprec_bem_ant_w,
			vl_base_deprec_ant_w,
			vl_base_deprec_w,
			vl_residual_w
		from	pat_valor_bem a
		where	nr_seq_bem = c01_w.nr_seq_bem
		and	dt_valor = dt_ref_deprec_ant_w;

		vl_deprec_acum_ant_w	:= coalesce(vl_deprec_acum_ant_w,0);
		vl_deprec_bem_ant_w	:= coalesce(vl_deprec_bem_ant_w,0);
		vl_residual_w		:= coalesce(vl_residual_w,0);
		vl_base_deprec_w	:= coalesce(vl_base_deprec_w,0);
	exception
	when others then
		vl_deprec_acum_ant_w	:= 0;
		vl_deprec_bem_ant_w	:= 0;
		vl_residual_w		:= 0;
		vl_base_deprec_w	:= c01_w.vl_original;
	end;
	vl_deprec_acum_reav_w := vl_deprec_acum_ant_w;

	/* ****************************************************************************
	TROCA DE VALOR RESIDUAL
	Tratar troca de valor residual
	Pegar a diferenca dos valores, soma o residual antigo para chegar no valor contabil sem desconto de residual
	e subtrai o novo valor residual, atualizando a base de depreciacao
	***************************************************************************** */

	if (vl_residual_w <> c01_w.vl_residual) then
		begin
		vl_base_deprec_w := (vl_base_deprec_w + vl_residual_w - c01_w.vl_residual);
		vl_residual_w := c01_w.vl_residual;
		end;
	end if;
	/* *****************************************************************************
	AVALIACAO POSITIVA DO BEM
	***************************************************************************** */

	select	count(*)
	into STRICT	qt_registro_w
	from	pat_bem_avaliacao a
	where	a.nr_seq_bem = c01_w.nr_seq_bem
	and	a.dt_avaliacao = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
	and	a.nr_seq_tipo_aval = 1 /* Avaliacao positiva */

	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');

	/*if	(qt_registro_w > 0) then
		begin

		/* Base sem considerar o residual */


		-- (vl_base_deprec_w + c01_w.vl_residual)


		-- Atualizar a base de depreciacao com o valor ajustado

		/*vl_base_deprec_w := (vl_base_deprec_w - vl_deprec_acum_reav_w);

		vl_deprec_acum_reav_w := 0;

		end;
	end if;*/


	/* *****************************************************************************
	AVALIACAO NEGATIVA DO BEM
	***************************************************************************** */

	select	count(*)
	into STRICT	qt_registro_w
	from	pat_bem_avaliacao a
	where	a.nr_seq_bem = c01_w.nr_seq_bem
	and	a.dt_avaliacao = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
	and	a.nr_seq_tipo_aval = 2 /* Avaliacao negativa */

	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');

	if (qt_registro_w > 0) then
		begin
		select	a.vl_ajuste,
			a.vl_avaliacao
		into STRICT	vl_ajuste_avaliacao_w,
			vl_avaliacao_w
		from	pat_bem_avaliacao a
		where	a.nr_seq_bem = c01_w.nr_seq_bem
		and	a.dt_avaliacao = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
		and	a.nr_seq_tipo_aval = 2 /* Avaliacao negativa */

		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');

		/* Base sem considerar o residual */



		/* Atualizar a base de depreciacao com o valor ajustado */


		vl_base_deprec_w := (vl_base_deprec_w - vl_deprec_acum_reav_w - vl_ajuste_avaliacao_w);

		vl_deprec_acum_reav_w := 0;

		if (current_setting('philips_patrimonio_pck.ie_gravar_movimento_w')::boolean) then
			begin
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo		:= c01_w.cd_centro_custo;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estabelecimento		:= c01_w.cd_estabelecimento;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estab_dest		:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.dt_movimento		:= dt_ref_deprec_w;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_acao			:= 'I'; /* Inclusao */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_tipo_movimento		:= 0; /* Valor default  */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local		:= c01_w.nr_seq_local;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_bem			:= c01_w.nr_seq_bem;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local_dest		:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_operacao		:= current_setting('philips_patrimonio_pck.oper_patrimonial')::r_pat_operacao.avaliacao_negativa;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta		:= c01_w.nr_seq_regra_conta;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.vl_movimento		:= vl_ajuste_avaliacao_w;

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype);
			end;
		end if;
		end;
	end if;

    /*
    Tratamento para alteracao de base de depreciacao - MEXICO
    */

    /*
    Tabela TASY_PAIS
    1 | Brasil (BR)
    2 | Mexico (MX)
    3 | Colombia (CO)
    4 | Argentina (AR)
    5 | Estados Unidos (US)
    6 | Reino Unido (UK)
    7 | Alemanha (DE)
    8 | Arabia Saudita (SA)
     */

    if (ie_pais_usuario_w = '2') then
        begin
            select  a.tx_base_deprec, -- buscar a nova base de depreciacao
                    vl_base_deprec_w - a.tx_base_deprec
            into STRICT    vl_base_deprec_ajust_w,
                    vl_red_base_deprec_w
            from    pat_alteracao_base_bem a,
                    pat_alteracao_base b
            where   b.nr_sequencia = a.nr_seq_alt_base
            and     a.nr_seq_bem   = c01_w.nr_seq_bem
            and     (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
            and     trunc(b.dt_documento, 'MM') = trunc(dt_referencia_p, 'MM');
        exception
        when no_data_found or too_many_rows then
            begin
                select  coalesce(vl_red_base_deprec, 0)
                into STRICT    vl_red_base_deprec_w
                from    pat_valor_bem
                where   dt_valor = add_months(dt_referencia_p, -1)
                and     nr_seq_bem = c01_w.nr_seq_bem;
            exception
            when no_data_found or too_many_rows then
                vl_base_deprec_ajust_w := vl_base_deprec_w; -- caso seja o primeiro calculo, considera a mesma base
                vl_red_base_deprec_w := 0;
            end;
        end;
    else
        vl_red_base_deprec_w := 0;
    end if;

	/*
	Valor de depreciacao ano, base X taxa, que e com base na vida util do bem
	se o bem tem 5 anos de vida util entao a taxa e calculada em cima deste periodo
	*/

	vl_deprec_ano_w		:= ((vl_base_deprec_w - vl_red_base_deprec_w) * c01_w.tx_deprec) / 100;

	/* ****************************************************************************
	Primeiro calculo de depreciacao NAO CONSIDERA BAIXAS E VENDAS do bem
	Apenas contabiliza os valores de depreciacao desde o inicio de uso ate o mes atual
	***************************************************************************** */

	if (ie_primeiro_calculo_w = 'S') and (c01_w.dt_inicio_deprec <= fim_mes(dt_ref_deprec_w)) then
		begin

		/*
		Meses desde o cadastro ate a data de depreciacao, fora o mes de cadastro
		Conta a quantidade de meses desde o cadastro do bem ate a data da depreciacao, nao considera o mes de cadastro do bem.
		EX: cadastro em 02/2015 mes depreciacao 06/2015 = 4 meses
		*/

		qt_meses_uso_w := months_between(pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0), pkg_date_utils.start_of(c01_w.dt_inicio_deprec, 'MONTH', 0));

		/*
		Dias do mes de inicio de uso
		Conta os dias do mes.
		EX: 30 dias, 31 dias, 28 dias, 29 dias
		*/

		qt_dias_primeiro_mes_w := (pkg_date_utils.extract_field('DAY', pkg_date_utils.end_of(c01_w.dt_inicio_deprec, 'MONTH', 0)))::numeric;

		/* Contar os dias do mes em que o bem esteve em uso dentro do mes de cadastro, considerando o dia de cadastro */


		qt_dias_uso_w := pkg_date_utils.start_of(pkg_date_utils.end_of(c01_w.dt_inicio_deprec,'MONTH', 0), 'DD', 0) - pkg_date_utils.start_of(c01_w.dt_inicio_deprec,'DD', 0) + 1;

		/* Valor de depreciacao de um mes cheio */


		vl_deprec_mes_w	:= (vl_deprec_ano_w / 12);

		/* Valor de depreciacao de um mes multiplicado pela quantidade de meses cheios em uso mais valor de depreciacao dos dias em uso no primeiro mes */


		vl_deprec_mes_w	:= ((vl_deprec_mes_w * qt_meses_uso_w) + ((vl_deprec_mes_w / qt_dias_primeiro_mes_w) * qt_dias_uso_w));

		if (vl_deprec_mes_w > vl_base_deprec_w) then
			begin
			vl_deprec_mes_w	:= vl_base_deprec_w;
			end;
		end if;
		vl_deprec_acum_w := vl_deprec_mes_w;
		vl_total_baixa_bem_w := 0;
		vl_baixa_deprec_w := 0;

		/* *****************************************************************************
		MOVIMENTO DE INCLUSAO DE NOVO BEM
		***************************************************************************** */

		if (current_setting('philips_patrimonio_pck.ie_gravar_movimento_w')::boolean) then
			begin

			/* Movimento de inclusao de um bem */


			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo		:= c01_w.cd_centro_custo;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estabelecimento		:= c01_w.cd_estabelecimento;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estab_dest		:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.dt_movimento		:= dt_ref_deprec_w;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_acao			:= 'I'; /* Inclusao */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_tipo_movimento		:= 0; /* Valor default  */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_bem			:= c01_w.nr_seq_bem;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local		:= c01_w.nr_seq_local;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local_dest		:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_operacao		:= current_setting('philips_patrimonio_pck.oper_patrimonial')::r_pat_operacao.novo_bem;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta		:= c01_w.nr_seq_regra_conta;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.vl_movimento		:= c01_w.vl_original;

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype);
			end;
		end if;
		end;
	else
		begin
		/* No mes que inicia o uso do bem grava o valor de entrada do bem */


		if (current_setting('philips_patrimonio_pck.ie_gravar_movimento_w')::boolean) and (trunc(c01_w.dt_inicio_uso,'mm') = trunc(dt_ref_deprec_w,'mm')) then
			begin
			/* *****************************************************************************
			MOVIMENTO DE AVALIACAO POSITIVA DO BEM/NOVO BEM
			***************************************************************************** */

			select	count(*)
			into STRICT	qt_registro_w
			from	pat_bem_avaliacao a
			where	a.nr_seq_bem_aval = c01_w.nr_seq_bem;

			/* Movimento de inclusao de um bem */


			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo		:= c01_w.cd_centro_custo;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estabelecimento		:= c01_w.cd_estabelecimento;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estab_dest		:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.dt_movimento		:= dt_ref_deprec_w;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_acao			:= 'I'; /* Inclusao */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_tipo_movimento		:= 0; /* Valor default  */

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_bem			:= c01_w.nr_seq_bem;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local		:= c01_w.nr_seq_local;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local_dest		:= null;
			if (qt_registro_w = 0) then
				begin
				current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_operacao	:= current_setting('philips_patrimonio_pck.oper_patrimonial')::r_pat_operacao.novo_bem;
				end;
			else
				begin
				current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_operacao	:= current_setting('philips_patrimonio_pck.oper_patrimonial')::r_pat_operacao.avaliacao_positiva;
				end;
			end if;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta		:= c01_w.nr_seq_regra_conta;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta_dest	:= null;
			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.vl_movimento		:= c01_w.vl_original;

			current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype);

			end;
		end if;

		/* ****************************************************************************
		Calcular depreciacao caso ja tiver iniciado o uso do bem
		ou
		Gerar registro zerado caso estiver dentro da data de aquisicao mas nao estiver dentro da
		data de inicio de uso
		***************************************************************************** */

		if (c01_w.dt_inicio_deprec <= fim_mes(dt_ref_deprec_w)) then
			begin
			/* Pegar a data de primeira baixa no mes de calculo, caso existir */


			select	min(a.dt_historico)
			into STRICT	dt_primeira_baixa_w
			from	pat_historico_bem a,
				pat_tipo_historico b
			where	a.nr_seq_bem	= c01_w.nr_seq_bem
			and	a.nr_seq_tipo	= b.nr_sequencia
			and	b.ie_valor	in ('B','V')
			and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0);

			/* Contar dias do mes de calculo */


			qt_dias_mes_w := (pkg_date_utils.extract_field('DAY', pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)))::numeric;

			/* Pegar a data de inicio da depreciacao no mes de calculo */


			dt_inicio_w	:= case when pkg_date_utils.start_of(c01_w.dt_inicio_deprec, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
						then pkg_date_utils.start_of(c01_w.dt_inicio_deprec,'DD', 0)
						else pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
						end;

			/* Pegar a data de fim de depreciacao para o mes, ate o fim do mes, ou ate a primeira baixa total ou parcial */


			dt_fim_w	:= pkg_date_utils.start_of(coalesce(dt_primeira_baixa_w,pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)),'DD', 0);

			/* Contar os dias em que o bem ficou em uso */


			qt_dias_uso_w := dt_fim_w - dt_inicio_w + 1;
			/*
			Se o bem ficou em uso o mes inteiro e uma depreciacao normal do mes
			Senao deprecia a quantidade de dias correspondente ao total de dias em uso do bem, contando o dia de cadastro
			*/

			if (qt_dias_uso_w = qt_dias_mes_w) then
				begin
				vl_deprec_mes_w	:= (vl_deprec_ano_w / 12);
				end;
			else
				begin
				vl_deprec_mes_w	:= ((vl_deprec_ano_w / 12) / qt_dias_mes_w) * qt_dias_uso_w;
				end;
			end if;

			/* Atribuir valores as variaveis para os calculos */


			vl_baixa_deprec_w	:= 0;
			vl_base_deprec_bx_w	:= vl_base_deprec_w;
			vl_deprec_per_bx_w	:= vl_deprec_mes_w;
			vl_deprec_acum_w	:= vl_deprec_acum_reav_w;

			/*
			Se o valor de depreciacao do mes mais o acumulado forem superiores a base de depreciacao, entao deprecia somente a diferenca
			*/

			if	((vl_deprec_acum_w + vl_deprec_per_bx_w) > vl_base_deprec_bx_w) then
				begin
				vl_deprec_per_bx_w := vl_base_deprec_bx_w - vl_deprec_acum_w;
				/*
				Se a depreciacao acumulada ja estava acima da base de depreciacao antes da depreciacao do mes
				zerar depreciacao do mes.
				Problema de importacao ou alteracao de regra de residual para valor muito alto.
				*/

				if (vl_deprec_per_bx_w < 0) then
					begin
					vl_deprec_per_bx_w := 0;
					end;
				end if;
				end;
			end if;
			vl_deprec_mes_bx_w := vl_deprec_per_bx_w;
			vl_deprec_acum_w := vl_deprec_acum_w + vl_deprec_per_bx_w;

			/* ****************************************************************************
			REGISTRO DE LOG DE BAIXA
			Ira gravar na PAT_HISTORICO_BEM.DS_OBSERVACAO
			informacoes das baixas parciais para verificacao e validacao dos valores
			***************************************************************************** */

			if (dt_primeira_baixa_w IS NOT NULL AND dt_primeira_baixa_w::text <> '') then
				begin
				idx_log_w := 1;
				log_w[idx_log_w].qt_dias_mes		:= qt_dias_mes_w;
				log_w[idx_log_w].dt_inicial		:= dt_inicio_w;
				log_w[idx_log_w].dt_final		:= dt_fim_w;
				log_w[idx_log_w].qt_dias_uso_periodo	:= qt_dias_uso_w;
				log_w[idx_log_w].vl_base_deprec_periodo	:= vl_base_deprec_bx_w;
				log_w[idx_log_w].tx_deprec_mes		:= c01_w.tx_deprec;
				log_w[idx_log_w].vl_residual_mes	:= c01_w.vl_residual;
				log_w[idx_log_w].vl_baixa_periodo	:= 0;
				log_w[idx_log_w].vl_baixa_total		:= 0;
				log_w[idx_log_w].vl_baixa_deprec_per	:= 0;
				log_w[idx_log_w].vl_baixa_total_deprec	:= 0;
				log_w[idx_log_w].vl_total_deprec	:= vl_deprec_mes_bx_w;
				log_w[idx_log_w].vl_deprec_periodo	:= vl_deprec_per_bx_w;
				end;
			end if;
			end;
		else	 /* Gerar registro sem depreciacao caso o a aquisicao for anterior ao inicio de uso */

			begin

			/* Zerar depreciacao do mes, ainda nao iniciou o uso do bem */


			vl_deprec_mes_w		:= 0;
			vl_deprec_mes_bx_w	:= 0;
			vl_deprec_per_bx_w	:= 0;
			vl_baixa_deprec_w	:= 0;
			vl_deprec_acum_w	:= 0;

			vl_base_deprec_bx_w := vl_base_deprec_w;
			end;
		end if;
		/*
		C02
		Depreciar o valor correspondente a cada periodo entre as baixas, totais ou parciais, com base no valor da baixa
		O Valor ate a primeira baixa ja foi depreciado no bloco acima, no cursor ira calcular o resto do periodo ate o
		final do mes ou proxima baixa
		*/

		vl_total_baixa_bem_w := 0;
		open c02;
		loop
		fetch c02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			/*
			Verifica se a baixa anterior foi total ou parcial
			Caso tenha sido total, inativa o bem e equipamento(por parametro)
			*/

			if (c02_w.qt_percentual = 100) then
				begin
				c02_w.vl_baixa_bem	:= vl_base_deprec_bx_w + c01_w.vl_residual;

				/* Se o Bem for 100% baixado, o mesmo e inativado e tambem e inativado o seu equipamento vinculado */


				update	pat_bem a
				set	a.ie_situacao		= 'I',
					a.dt_atualizacao	= clock_timestamp(),
					a.nm_usuario		= nm_usuario_p
				where	a.nr_sequencia		= c01_w.nr_seq_bem;

				if (ie_baixar_equip_bem_w = 'S') then
					update	man_equipamento a
					set	a.ie_situacao		= 'I',
						a.ds_observacao		= substr(a.ds_observacao || chr(13) || wheb_mensagem_pck.get_texto(298482),1,2000),
						a.dt_atualizacao	= clock_timestamp(),
						a.nm_usuario		= nm_usuario_p
					where	a.nr_seq_bem		= c01_w.nr_seq_bem;
				end if;

				/* A baixa de depreciacao sera o valor total de depreciacao dos meses anteriores mais a depreciacao do mes ate o momento */


				vl_baixa_deprec_per_w := vl_deprec_acum_w;
				vl_baixa_deprec_w := vl_deprec_acum_w;

				/* Somar baixas realizadas, mais a baixa total */


				vl_total_baixa_bem_w := vl_total_baixa_bem_w + c02_w.vl_baixa_bem;

				/* Zerar a depreciacao acumulada */


				vl_deprec_acum_w	:= 0;
				/* Zerar a base de depreciacao de baixa que ira atualizar a base apos a finalizacao das baixas e verificacao/atualizacao do valor de depreciacao */


				vl_base_deprec_bx_w	:= 0;
				/* Zerar valor residual que seria adicionado ao valor contabil */


				vl_residual_w		:= 0;

				if (ie_atualizar_valor_baixa_w = 'S') then
					/*
					Atualizar valor do historico (VL_HISTORICO) de baixa/venda com o valor baixa/venda(VL_BAIXA) utilizado
					ou valor gerado pelo percentual(QT_PERCENTUAL * <base_deprecl>).
					*/

					update	pat_historico_bem
					set	vl_historico	= c02_w.vl_baixa_bem,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= c02_w.nr_seq_historico;
				end if;

				end;
			else /* Caso a baixa for de um percentual diferente de 100% entao realiza os calculos de valor de baixa e de depreciacao */

				begin
				/* ****************************************************************************
				Se a baixa for por valor, pega este valor para baixar
				caso contrario calcula com base no percentual
				***************************************************************************** */

				if (coalesce(c02_w.vl_baixa_bem,0) > 0)then
					begin
					/* Se possuir valor de baixa informado utiliza este */


					c02_w.vl_baixa_bem := c02_w.vl_baixa_bem;
					end;
				else
					begin
					/* Se nao possuir valor de baixa ou venda, calcula o valor com base no percentual */


					c02_w.vl_baixa_bem	:= ((vl_base_deprec_bx_w * c02_w.qt_percentual) / 100);
					/* c02_w.vl_baixa_bem	:= (vl_original - baixas anteriores - baixas totais do mes, sendo que a baixa do loop ainda nao foi contabilizada) X Percentual   */


					end;
				end if;
				/* Nao permitir baixa de valor negativo */


				if (c02_w.vl_baixa_bem < 0) then
					begin
					c02_w.vl_baixa_bem := 0;
					c02_w.qt_percentual := 0;
					end;
				end if;

				if (ie_atualizar_valor_baixa_w = 'S') then
					/*
					Atualizar valor do historico (VL_HISTORICO) de baixa/venda com o valor baixa/venda(VL_BAIXA) utilizado
					ou valor gerado pelo percentual(QT_PERCENTUAL * <base_deprecl>).
					*/

					update	pat_historico_bem
					set	vl_historico	= c02_w.vl_baixa_bem,
						nm_usuario	= nm_usuario_p,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= c02_w.nr_seq_historico;
				end if;

				/* Acumular os valores de baixa para gravar no historico de valor e para descontar da base de depreciacao */


				vl_total_baixa_bem_w := vl_total_baixa_bem_w + c02_w.vl_baixa_bem;

				/* Obter novamente a base de depreciacao com base no periodo para buscar o valor residual da regra, caso alterado em funcao de baixa parcial */



				/*
				Base de depreciacao e a base do mes menos o valor baixado do bem
				Ja esta descontado o valor residual e de baixas de meses anteriores,
				agora desconta a baixa realizada no mes(ou as baixas, em cada loop do C02)
				*/

				vl_base_deprec_bx_w	:= vl_base_deprec_bx_w - c02_w.vl_baixa_bem;

				/*
				A cada baixa temos uma nova base de depreciacao e um novo valor de depreciacao anual
				assim recalculamos o valor anual de depreciacao com base na taxa do mes
				*/

				vl_deprec_ano_bx_w	:= ((vl_base_deprec_bx_w - vl_red_base_deprec_w) * c01_w.tx_deprec) / 100;

				/*
				Atribuimos ou incrementamos o valor de baixa de depreciacao para o mes
				Pegar a depreciacao do mes anterior mais a depreciacao do mes atual ate a data da baixa e calcular o valor de baixa da depreciacao em cima deste valor
				Na primeira baixa(primeiro loop) o VL_DEPREC_ACUM_W esta com o valor da depreciacao do mes anterior mais o valor de depreciacao ate o dia da primeira baixa
				*/

				vl_baixa_deprec_per_w := ((vl_deprec_acum_w * c02_w.qt_percentual) / 100);
				vl_baixa_deprec_w := vl_baixa_deprec_w + vl_baixa_deprec_per_w;
				/*
				Dininuir a baixa da depreciacao da depreciacao acumulada, o valor nao faz mais parte do acumulado do bem
				*/

				vl_deprec_acum_w	:= vl_deprec_acum_w - vl_baixa_deprec_per_w;

				/*
				Baixar o percentual da depreciacao do mes tambem, a baixa foi em cima deste valor tambem, enbora ja calculado
				precisa baixar o percentual relativo ao que ja depreciou tambem
				*/


				/*
				Aqui temos uma nova base de depreciacao e um novo valor de depreciacao ano, com base no valor de baixa
				*/

				if (vl_deprec_ano_bx_w > 0) then
					begin

					/* Pegar a data das proximas baixas realizadas no mesmo mes, em cada loop para calculo de dias */


					select	min(a.dt_historico)
					into STRICT	dt_proxima_baixa_w
					from	pat_historico_bem a,
						pat_tipo_historico b
					where	a.nr_seq_bem	= c01_w.nr_seq_bem
					and	a.nr_seq_tipo	= b.nr_sequencia
					and	b.ie_valor	in ('B','V')
					and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
					and	a.dt_historico > c02_w.dt_historico;

					/* Data de inicio e um dia apos a baixa */


					dt_inicio_w	:= pkg_date_utils.start_of(c02_w.dt_historico,'DD', 0)+1;
					/* Data de fim e o dia da baixa (conta o dia tambem) ou o ultimo dia do mes */


					dt_fim_w	:= pkg_date_utils.start_of(coalesce(dt_proxima_baixa_w,pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)),'DD', 0);
					/* Quantidade dias em uso e a diferenca mais um, caso a baixa for no ultimo dia do mes nao conta para o mes */


					qt_dias_uso_w	:= dt_fim_w - dt_inicio_w + 1;

					/*
					Depreciacao do periodo
					Valor de depreciacao ano, dividido por 12 (meses), dividido por <qtd dias do mes em questao>, multiplicado pela quantidade de dias em uso
					*/

					vl_deprec_per_bx_w	:= round((((vl_deprec_ano_bx_w / 12) / qt_dias_mes_w) * qt_dias_uso_w),2);

					/*
					VL_DEPREC_ACUM_W + VL_DEPREC_PER_BX_W
						Valor de depreciacao acumulado ate a baixa somado ao valor de depreciacao do periodo da baixa

					VL_BASE_DEPREC_BX_W
						Base de depreciacao ate o momento(descontando baixas anteriores)

					Se a depreciacao acumulada dos meses anteriores(menos baixas) mais a depreciacao do mes for maior que a base de depreciacao
					entao o valor de depreciacao do mes recebe a diferenca, desta forma depreciando 100% o bem

					Em situacoes normais nao deve entrar neste IF, somente se houve mudanca de taxas de depreciacao ou valor residual(Alteracoes via regra)
					*/

					if	((vl_deprec_acum_w + vl_deprec_per_bx_w) > vl_base_deprec_bx_w) then
						begin
						vl_deprec_per_bx_w := vl_base_deprec_bx_w - vl_deprec_acum_w;
						/*
						Se ouve algum erro de valor anterior (importacao por exemplo) que fez a base de depreciacao estar acima do valor acumulado de depreciacao
						zerar o valor de depreciacao para nao gerar valores negativos
						*/

						if (vl_deprec_per_bx_w < 0) then
							begin
							vl_deprec_per_bx_w := 0;
							end;
						end if;
						end;
					end if;
					/* Depreciacao do mes e a a soma das depreciacoes de cada periodo */


					vl_deprec_mes_bx_w := vl_deprec_mes_bx_w + vl_deprec_per_bx_w;
					vl_deprec_acum_w := vl_deprec_acum_w + vl_deprec_per_bx_w;

					/* ****************************************************************************
					REGISTRO DE LOG DE BAIXA
					Ira gravar na PAT_HISTORICO_BEM.DS_OBSERVACAO
					informacoes das baixas parciais para verificacao e validacao dos valores
					na ultima baixa do mes grava dois logs, referente ao periodo da baixa e periodo final do mes
					***************************************************************************** */

					if (true) then
						begin
						/* Pegar sequencia do historico da baixa anterior */


						log_w[idx_log_w].nr_seq_historico	:= c02_w.nr_seq_historico;
						idx_log_w := idx_log_w+1;
						log_w[idx_log_w].nr_seq_historico	:= c02_w.nr_seq_historico;
						log_w[idx_log_w].qt_dias_mes		:= qt_dias_mes_w;
						log_w[idx_log_w].dt_inicial		:= dt_inicio_w;
						log_w[idx_log_w].dt_final		:= dt_fim_w;
						log_w[idx_log_w].qt_dias_uso_periodo	:= qt_dias_uso_w;
						log_w[idx_log_w].vl_base_deprec_periodo	:= vl_base_deprec_bx_w;
						log_w[idx_log_w].tx_deprec_mes		:= c01_w.tx_deprec;
						log_w[idx_log_w].vl_residual_mes	:= c01_w.vl_residual;
						log_w[idx_log_w].vl_baixa_periodo	:= c02_w.vl_baixa_bem;
						log_w[idx_log_w].vl_baixa_total		:= vl_total_baixa_bem_w;
						log_w[idx_log_w].vl_baixa_deprec_per	:= vl_baixa_deprec_per_w;
						log_w[idx_log_w].vl_baixa_total_deprec	:= vl_baixa_deprec_w;
						log_w[idx_log_w].vl_deprec_periodo	:= vl_deprec_per_bx_w;
						log_w[idx_log_w].vl_total_deprec	:= vl_deprec_mes_bx_w;
						end;
					end if;
					end;
				end if;
				end;
			end if;
			end;
		end loop;
		close c02;
		/* Pegar o valor de depreciacao do mes calculado com base nas baixas */


		vl_deprec_mes_w := vl_deprec_mes_bx_w;

		/* Base de depreciacao sera o valor base apos a ultima baixa */


		vl_base_deprec_w := vl_base_deprec_bx_w;
		end;
	end if;
	vl_base_deprec_ajust_w := vl_base_deprec_w - vl_red_base_deprec_w;
	/*
	Atualizar o valor contabil do bem
	Valor Original, menos as baixas de meses anteriores, menos as baixas dentro do mes atual, menos a depreciacao do mes
	*/

	vl_contabil_w		:= vl_base_deprec_w - vl_deprec_acum_w + vl_residual_w; /* CONSIDERANDO O RESIDUAL */


	/* ****************************************************************************
	Calculo de depreciacao fiscal
	***************************************************************************** */

	SELECT * FROM philips_patrimonio_pck.calcular_deprec_fiscal(	cd_estabelecimento_p, dt_referencia_p, c01_w.nr_seq_bem, vl_base_deprec_fiscal_w, vl_deprec_mes_fis_w, vl_deprec_acum_fis_w, vl_fiscal_w) INTO STRICT vl_base_deprec_fiscal_w, vl_deprec_mes_fis_w, vl_deprec_acum_fis_w, vl_fiscal_w;

	update	pat_historico_bem a
	set	a.ds_observacao = substr(a.ds_observacao,1,
					CASE WHEN position(ds_inicio_log_w in upper(a.ds_observacao))-1=-1 THEN 4000  ELSE position(ds_inicio_log_w in upper(a.ds_observacao))-1 END )
	where	a.nr_seq_bem = c01_w.nr_seq_bem
	and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0);

	for i in 1..log_w.count loop
		begin

		ds_observacao_w := substr(chr(13) || chr(10) ||
				wheb_mensagem_pck.get_texto(419866,
				'DT_ATUAL_LOG='||to_char(clock_timestamp(),'dd/mm/yyyy hh24:mi:ss')||
				';DT_INICIAL='||coalesce(to_char(log_w[idx_log_w].dt_inicial,'dd/mm/yyyy'),'-')||
				';DT_FINAL='||coalesce(to_char(log_w[idx_log_w].dt_final,'dd/mm/yyyy'),'-')||
				';QT_DIAS_USO='||to_char(coalesce(log_w[idx_log_w].qt_dias_uso_periodo,0))||
				';VL_BASE_DEPREC_PERIODO='||trim(both to_char(log_w[idx_log_w].vl_base_deprec_periodo,'L999G999G999G990D00'))||
				';VL_BAIXA_PERIODO='||trim(both to_char(log_w[idx_log_w].vl_baixa_periodo,'L999G999G999G990D00'))||
				';VL_BAIXA_TOTAL='||trim(both to_char(log_w[idx_log_w].vl_baixa_total,'L999G999G999G990D00'))||
				';VL_BAIXA_DEPREC_PERIODO='||trim(both to_char(log_w[idx_log_w].vl_baixa_deprec_per,'L999G999G999G990D00'))||
				';VL_BAIXA_DEPREC_TOTAL='||trim(both to_char(log_w[idx_log_w].vl_baixa_total_deprec,'L999G999G999G990D00'))||
				';VL_DEPREC_PERIODO='||trim(both to_char(log_w[idx_log_w].vl_deprec_periodo,'L999G999G999G990D00'))||
				';VL_DEPREC_TOTAL='||trim(both to_char(log_w[idx_log_w].vl_total_deprec,'L999G999G999G990D00')))
				,1,3900);

		update	pat_historico_bem
		set	ds_observacao = substr(ds_observacao_w,1,3999)
		where	nr_sequencia = log_w[idx_log_w].nr_seq_historico;

		end;
	end loop;

	/* ****************************************************************************
	Insert dos valores de depreciacao do bem
	***************************************************************************** */

	select	nextval('pat_valor_bem_seq')
	into STRICT	nr_sequencia_w
	;
	begin
	insert into pat_valor_bem(
		nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_bem,
		nr_lote_contabil,
		nr_seq_ajuste_item,
		nr_seq_regra_conta,
		dt_valor,
		cd_centro_custo,
		cd_conta_contabil,
		cd_moeda,
		tx_deprec_fiscal,
		tx_depreciacao,
		tx_indice_aquisicao,
		tx_indice_mes,
		vl_ajuste,
		vl_baixa_bem,
		vl_baixa_deprec,
		vl_base_deprec,
		vl_base_deprec_ant,
		vl_contabil,
		vl_deprec_acum,
		vl_deprec_acum_ant,
		vl_deprec_acum_fis,
		vl_deprec_mes,
		vl_deprec_mes_fis,
		vl_fiscal,
		vl_origem,
		vl_residual,
		vl_base_deprec_fiscal,
		cd_estabelecimento,
		vl_red_base_deprec,
		vl_base_deprec_ajust/*,
		vl_ajuste_avaliacao*/
)
	values (
		nr_sequencia_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		c01_w.nr_seq_bem,
		0,
		null,
		c01_w.nr_seq_regra_conta,
		dt_ref_deprec_w,
		c01_w.cd_centro_custo,
		c01_w.cd_conta_contabil,
		cd_moeda_w,
		c01_w.tx_deprec_fiscal,
		c01_w.tx_deprec,
		null,
		null,
		0,
		vl_total_baixa_bem_w,
		vl_baixa_deprec_w,
		vl_base_deprec_w,
		vl_base_deprec_ant_w,
		vl_contabil_w,
		vl_deprec_acum_w,
		vl_deprec_acum_ant_w,
		vl_deprec_acum_fis_w,
		vl_deprec_mes_w,
		vl_deprec_mes_fis_w,
		vl_fiscal_w,
		c01_w.vl_original,
		c01_w.vl_residual,
		vl_base_deprec_fiscal_w,
		cd_estabelecimento_p,
		vl_red_base_deprec_w,
		vl_base_deprec_ajust_w/*,
		vl_ajuste_avaliacao_w*/
);

	exception when others then
		/* ds_erro_w	:= substr(sqlerrm(sqlcode),1,2000); */


		CALL wheb_mensagem_pck.exibir_mensagem_abort(220725,'NR_SEQ_BEM_W=' || c01_w.nr_seq_bem || ';' || 'CD_BEM_W=' || c01_w.cd_bem);
	end;

	/* ****************************************************************************
	Movimento de depreciacao do bem
	***************************************************************************** */

	if (current_setting('philips_patrimonio_pck.ie_gravar_movimento_w')::boolean) then
		begin
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo		:= c01_w.cd_centro_custo;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_centro_custo_dest	:= null;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estabelecimento		:= cd_estabelecimento_p;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.cd_estab_dest		:= null;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.dt_movimento		:= dt_ref_deprec_w;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_acao			:= 'I'; /* Inclusao */

		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.ie_tipo_movimento		:= 0; /* Valor default  */

		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_bem			:= c01_w.nr_seq_bem;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local		:= null; /* Talvez gravar local do bem */

		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_local_dest		:= null;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_operacao		:= current_setting('philips_patrimonio_pck.oper_patrimonial')::r_pat_operacao.depreciacao;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta		:= c01_w.nr_seq_regra_conta;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.nr_seq_regra_conta_dest	:= null;
		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype.vl_movimento		:= vl_deprec_mes_w;

		current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, current_setting('philips_patrimonio_pck.pat_bem_movimento_w')::pat_bem_movimento%rowtype);
		end;
	end if;

	/* ****************************************************************************
	Ratear a depreciacao de acordo com o criterio de rateio
	***************************************************************************** */

	if	((c01_w.nr_seq_crit_rateio IS NOT NULL AND c01_w.nr_seq_crit_rateio::text <> '') or (ie_rateio_deprec_transf_w = 'S')) then
		begin
		CALL philips_patrimonio_pck.ratear_depreciacao(	nr_sequencia_w,
					c01_w.nr_seq_crit_rateio,
					ie_rateio_deprec_transf_w,
					dt_referencia_p,
					c01_w.nr_seq_bem,
					nm_usuario_p);
		end;
	end if;

	end;

	IF (PKG_I18N.GET_USER_LOCALE = 'es_BO') THEN
		BEGIN
		    CALL CTB_CONTR_PATRIMONIO_BOLIVIA.CALCULA_VALOR_RESIDUAL(dt_inicio_w, dt_referencia_p, c01_w.nr_seq_bem, nm_usuario_p);
		EXCEPTION
		    WHEN OTHERS THEN NULL;
		END;
	END IF;

end loop;
close c01;

/* ****************************************************************************
Calcular o valor de transferencia de bens
***************************************************************************** */

if (ie_calcular_valor_transf_w = 'S') then
	begin
	pat_atualizar_transf_bem(
				cd_estabelecimento_p,
				dt_referencia_p,
				nm_usuario_p);
	end;
end if;

/* ****************************************************************************
Atualizar o mes de referencia de depreciacao
CALCULADO ou RECALCULADO
***************************************************************************** */

select	dt_calculo
into STRICT	dt_calculo_w
from	pat_mes_ref
where	dt_mes_ref = dt_referencia_p
and	cd_estabelecimento = cd_estabelecimento_p;

if (coalesce(dt_calculo_w::text, '') = '') then
	/* Primeiro calculo de depreciacao */


	update	pat_mes_ref
	set	dt_calculo	= clock_timestamp(),
		ie_situacao	= '1',
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	dt_mes_ref		= dt_referencia_p
	and	cd_estabelecimento	= cd_estabelecimento_p;
else
	update	pat_mes_ref
	set	dt_recalculo	= clock_timestamp(),
		ie_situacao	= '1',
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	dt_mes_ref		= dt_referencia_p
	and	cd_estabelecimento	= cd_estabelecimento_p;
end if;

/* Commit somente se finalizar todos os calculos da rotina */


commit;

/* ****************************************************************************
Calculo de INPC, somente para o Mexico
***************************************************************************** */

/*
Tabela TASY_PAIS
1 | Brasil (BR)
2 | Mexico (MX)
3 | Colombia (CO)
4 | Argentina (AR)
5 | Estados Unidos (US)
6 | Reino Unido (UK)
7 | Alemanha (DE)
8 | Arabia Saudita (SA)
 */

if (ie_pais_usuario_w = '2') then
	begin
	CALL pat_calc_deprec_inpc(nm_usuario_p,cd_estabelecimento_p,dt_referencia_p);
	commit;
	end;
end if;

/* ****************************************************************************
Contabiliza os movimentos caso esteja habilitada a contabilidade online
***************************************************************************** */

if ( ctb_online_pck.get_modo_lote(17, cd_estabelecimento_p) = 'S' ) then
	CALL ctb_contab_onl_patrimonio(dt_referencia_p, cd_estabelecimento_p, nm_usuario_p);
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE philips_patrimonio_pck.calcular_depreciacao ( dt_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
