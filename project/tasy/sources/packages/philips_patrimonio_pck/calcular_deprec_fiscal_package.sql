-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE philips_patrimonio_pck.calcular_deprec_fiscal ( cd_estabelecimento_p bigint, dt_referencia_p timestamp, nr_seq_bem_p bigint, vl_base_deprec_fiscal_p INOUT bigint, vl_deprec_mes_fis_p INOUT bigint, vl_deprec_acum_fis_p INOUT bigint, vl_fiscal_p INOUT bigint) AS $body$
DECLARE


tx_deprec_fiscal_w			double precision;
vl_deprec_mes_fis_w			double precision;
vl_deprec_acum_fis_w			double precision;
vl_fiscal_w				double precision;
vl_original_w				double precision;
dt_inicio_deprec_w				timestamp;
dt_primeira_baixa_w			timestamp;
dt_ref_deprec_ant_w			timestamp;
dt_ref_deprec_w				timestamp;
dt_inicio_w				timestamp;
dt_fim_w				timestamp;
vl_deprec_mes_w				double precision;
vl_deprec_ano_w				double precision;
qt_dias_primeiro_mes_w			smallint;
qt_meses_uso_w				integer;
qt_dias_uso_w				smallint;
qt_dias_mes_w				smallint;
vl_base_deprec_bx_w			double precision;
vl_deprec_ano_bx_w			double precision;
vl_deprec_mes_bx_w			double precision;
vl_deprec_per_bx_w			double precision;
vl_baixa_deprec_w			double precision;
vl_baixa_deprec_per_w			double precision;
vl_deprec_acum_fis_ant_w		double precision;
vl_base_deprec_fiscal_w			double precision;
vl_deprec_acum_w			double precision;
vl_base_deprec_w			double precision;
dt_proxima_baixa_w			timestamp;
vl_residual_w				double precision;
ie_primeiro_calculo_w			varchar(1);
vl_total_baixa_bem_w			double precision;

c02 CURSOR FOR
	SELECT	coalesce(a.qt_percentual,0) qt_percentual,
		a.dt_historico,
		a.nr_sequencia nr_seq_historico,
		coalesce(a.vl_baixa_bem,0) vl_baixa_bem,
		a.vl_historico
	from	pat_historico_bem a,
		pat_tipo_historico b
	where	a.nr_seq_bem	= nr_seq_bem_p
	and	a.nr_seq_tipo	= b.nr_sequencia
	and	b.ie_valor	in ('B','V')
	and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
	order by a.dt_historico asc;

c02_w		c02%rowtype;


BEGIN
/* ****************************************************************************
OBTER TAXA DE DEPRECIACAO FISCAL
Do cadastro do bem ou da regra de taxa especial
***************************************************************************** */

tx_deprec_fiscal_w := coalesce(obter_taxa_deprec_fiscal_bem(nr_seq_bem_p, dt_referencia_p),0);

if (tx_deprec_fiscal_w > 0) then
	begin
	/* ****************************************************************************
	Verifica se existe algum calculo de depreciacao no estabelecimento
	caso nao existir entao e o primeiro mes de calculo
	***************************************************************************** */

	begin
		select	'N'
		into STRICT	ie_primeiro_calculo_w
		from	pat_mes_ref a
		where	a.ie_situacao = '1'
		and	a.cd_estabelecimento = cd_estabelecimento_p  LIMIT 1;
	exception
	when others then
		ie_primeiro_calculo_w := 'S';
	end;

	/* ****************************************************************************
	Data de depreciacao, ultimo dia do mes
	***************************************************************************** */

	dt_ref_deprec_w := pkg_date_utils.start_of(pkg_date_utils.end_of(dt_referencia_p, 'MONTH', 0),'DD', 0);

	select	a.vl_original,
		coalesce(a.dt_inicio_deprec,a.dt_inicio_uso) dt_inicio_deprec
	into STRICT	vl_original_w,
		dt_inicio_deprec_w
	from	pat_bem a
	where	a.nr_sequencia = nr_seq_bem_p;

	/* ****************************************************************************
	Valores do mes anterior
	***************************************************************************** */

	begin
		dt_ref_deprec_ant_w := pkg_date_utils.add_month(dt_ref_deprec_w,-1, 0);

		select	a.vl_deprec_acum_fis,	-- DEPRECIACAO ACUMULADA FISCAL
			a.vl_base_deprec,	-- BASE DE DEPRECIACAO COMUM
			a.vl_residual,		-- VALOR RESIDUAL DO MES ANTERIOR COMUM
			a.vl_base_deprec_fiscal
		into STRICT	vl_deprec_acum_fis_ant_w,
			vl_base_deprec_w,
			vl_residual_w,
			vl_base_deprec_fiscal_w
		from	pat_valor_bem a
		where	nr_seq_bem = nr_seq_bem_p
		and	dt_valor = dt_ref_deprec_ant_w;

		vl_deprec_acum_fis_ant_w	:= coalesce(vl_deprec_acum_fis_ant_w,0);
		vl_residual_w			:= coalesce(vl_residual_w,0);
		vl_base_deprec_w		:= coalesce(vl_base_deprec_w,0);
		vl_base_deprec_fiscal_w		:= coalesce(vl_base_deprec_fiscal_w,vl_original_w);
	exception
	when others then
		vl_deprec_acum_fis_ant_w	:= 0;
		vl_residual_w			:= 0;
		vl_base_deprec_w		:= vl_original_w;
		vl_base_deprec_fiscal_w		:= vl_original_w;
	end;

	vl_base_deprec_w := vl_base_deprec_fiscal_w;

	/*
	Valor de depreciacao ano, base X taxa, que e com base na vida util do bem
	se o bem tem 5 anos de vida util entao a taxa e calculada em cima deste periodo
	*/

	vl_deprec_ano_w		:= (vl_base_deprec_w * tx_deprec_fiscal_w) / 100;

	/* ****************************************************************************
	Primeiro calculo de depreciacao NAO CONSIDERA BAIXAS E VENDAS do bem
	Apenas contabiliza os valores de depreciacao desde o inicio de uso ate o mes atual
	***************************************************************************** */

	if (ie_primeiro_calculo_w = 'S') and (dt_inicio_deprec_w <= dt_ref_deprec_w) then
		begin

		/*
		Meses desde o cadastro ate a data de depreciacao, fora o mes de cadastro
		Conta a quantidade de meses desde o cadastro do bem ate a data da depreciacao, nao considera o mes de cadastro do bem.
		EX: cadastro em 02/2015 mes depreciacao 06/2015 = 4 meses
		*/

		qt_meses_uso_w := months_between(pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0), pkg_date_utils.start_of(dt_inicio_deprec_w, 'MONTH', 0));

		/*
		Dias do mes de inicio de uso
		Conta os dias do mes.
		EX: 30 dias, 31 dias, 28 dias, 29 dias
		*/

		qt_dias_primeiro_mes_w := (pkg_date_utils.extract_field('DAY', pkg_date_utils.end_of(dt_inicio_deprec_w, 'MONTH', 0)))::numeric;

		/* Contar os dias do mes em que o bem esteve em uso dentro do mes de cadastro, considerando o dia de cadastro */


		qt_dias_uso_w := pkg_date_utils.start_of(pkg_date_utils.end_of(dt_inicio_deprec_w,'MONTH', 0), 'DD', 0) - pkg_date_utils.start_of(dt_inicio_deprec_w,'DD', 0) + 1;

		/* Valor de depreciacao de um mes cheio */


		vl_deprec_mes_w	:= (vl_deprec_ano_w / 12);

		/* Valor de depreciacao de um mes multiplicado pela quantidade de meses cheios em uso mais valor de depreciacao dos dias em uso no primeiro mes */


		vl_deprec_mes_w	:= ((vl_deprec_mes_w * qt_meses_uso_w) + ((vl_deprec_mes_w / qt_dias_primeiro_mes_w) * qt_dias_uso_w));

		if (vl_deprec_mes_w > vl_base_deprec_w) then
			begin
			vl_deprec_mes_w	:= vl_base_deprec_w;
			end;
		end if;
		vl_deprec_acum_w := vl_deprec_mes_w;
		vl_total_baixa_bem_w := 0;
		vl_baixa_deprec_w := 0;
		end;
	else
		begin
		/* ****************************************************************************
		Calcular depreciacao caso ja tiver iniciado o uso do bem
		ou
		Gerar registro zerado caso estiver dentro da data de aquisicao mas nao estiver dentro da
		data de inicio de uso
		***************************************************************************** */

		if (dt_inicio_deprec_w <= dt_ref_deprec_w) then
			begin
			/* Pegar a data de primeira baixa no mes de calculo, caso existir */


			select	min(a.dt_historico)
			into STRICT	dt_primeira_baixa_w
			from	pat_historico_bem a,
				pat_tipo_historico b
			where	a.nr_seq_bem	= nr_seq_bem_p
			and	a.nr_seq_tipo	= b.nr_sequencia
			and	b.ie_valor	in ('B','V')
			and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0);

			/* Contar dias do mes de calculo */


			qt_dias_mes_w := (pkg_date_utils.extract_field('DAY', pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)))::numeric;

			/* Pegar a data de inicio da depreciacao no mes de calculo */


			dt_inicio_w	:= case when pkg_date_utils.start_of(dt_inicio_deprec_w, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
						then pkg_date_utils.start_of(dt_inicio_deprec_w,'DD', 0)
						else pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
						end;

			/* Pegar a data de fim de depreciacao para o mes, ate o fim do mes, ou ate a primeira baixa total ou parcial */


			dt_fim_w	:= pkg_date_utils.start_of(coalesce(dt_primeira_baixa_w,pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)),'DD', 0);

			/* Contar os dias em que o bem ficou em uso */


			qt_dias_uso_w := dt_fim_w - dt_inicio_w + 1;
			/*
			Se o bem ficou em uso o mes inteiro e uma depreciacao normal do mes
			Senao deprecia a quantidade de dias correspondente ao total de dias em uso do bem, contando o dia de cadastro
			*/

			if (qt_dias_uso_w = qt_dias_mes_w) then
				begin
				vl_deprec_mes_w	:= (vl_deprec_ano_w / 12);
				end;
			else
				begin
				vl_deprec_mes_w	:= ((vl_deprec_ano_w / 12) / qt_dias_mes_w) * qt_dias_uso_w;
				end;
			end if;

			/* Atribuir valores as variaveis para os calculos */


			vl_baixa_deprec_w	:= 0;
			vl_base_deprec_bx_w	:= vl_base_deprec_w;
			vl_deprec_per_bx_w	:= vl_deprec_mes_w;
			vl_deprec_acum_w	:= vl_deprec_acum_fis_ant_w;

			/*
			Se o valor de depreciacao do mes mais o acumulado forem superiores a base de depreciacao, entao deprecia somente a diferenca
			*/

			if	((vl_deprec_acum_w + vl_deprec_per_bx_w) > vl_base_deprec_bx_w) then
				begin
				vl_deprec_per_bx_w := vl_base_deprec_bx_w - vl_deprec_acum_w;
				/*
				Se a depreciacao acumulada ja estava acima da base de depreciacao antes da depreciacao do mes
				zerar depreciacao do mes.
				Problema de importacao ou alteracao de regra de residual para valor muito alto.
				*/

				if (vl_deprec_per_bx_w < 0) then
					begin
					vl_deprec_per_bx_w := 0;
					end;
				end if;
				end;
			end if;
			vl_deprec_mes_bx_w := vl_deprec_per_bx_w;
			vl_deprec_acum_w := vl_deprec_acum_w + vl_deprec_per_bx_w;
			end;
		else	 /* Gerar registro sem depreciacao caso o a aquisicao for anterior ao inicio de uso */

			begin

			/* Zerar depreciacao do mes, ainda nao iniciou o uso do bem */


			vl_deprec_mes_w		:= 0;
			vl_deprec_mes_bx_w	:= 0;
			vl_deprec_per_bx_w	:= 0;
			vl_baixa_deprec_w	:= 0;
			vl_deprec_acum_w	:= 0;

			vl_base_deprec_bx_w := vl_base_deprec_w;
			end;
		end if;
		/*
		C02
		Depreciar o valor correspondente a cada periodo entre as baixas, totais ou parciais, com base no valor da baixa
		O Valor ate a primeira baixa ja foi depreciado no bloco acima, no cursor ira calcular o resto do periodo ate o
		final do mes ou proxima baixa
		*/

		vl_total_baixa_bem_w := 0;
		open c02;
		loop
		fetch c02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			/*
			Verifica se a baixa anterior foi total ou parcial
			Caso tenha sido total, inativa o bem e equipamento(por parametro)
			*/

			if (c02_w.qt_percentual = 100) then
				begin
				c02_w.vl_baixa_bem	:= vl_base_deprec_bx_w;

				/* A baixa de depreciacao sera o valor total de depreciacao dos meses anteriores mais a depreciacao do mes ate o momento */


				vl_baixa_deprec_per_w := vl_deprec_acum_w;
				vl_baixa_deprec_w := vl_deprec_acum_w;

				/* Somar baixas realizadas, mais a baixa total */


				vl_total_baixa_bem_w := vl_total_baixa_bem_w + c02_w.vl_baixa_bem;

				/* Zerar a depreciacao acumulada */


				vl_deprec_acum_w	:= 0;
				/* Zerar a base de depreciacao de baixa que ira atualizar a base apos a finalizacao das baixas e verificacao/atualizacao do valor de depreciacao */


				vl_base_deprec_bx_w	:= 0;
				end;
			else /* Caso a baixa for de um percentual diferente de 100% entao realiza os calculos de valor de baixa e de depreciacao */

				begin
				/* ****************************************************************************
				No caso de depreciacao fiscal sempre utiliza o percentual de baixa para realizar o calculo
				***************************************************************************** */

				c02_w.vl_baixa_bem	:= ((vl_base_deprec_bx_w * c02_w.qt_percentual) / 100);

				/* Nao permitir baixa de valor negativo */


				if (c02_w.vl_baixa_bem < 0) then
					begin
					c02_w.vl_baixa_bem := 0;
					c02_w.qt_percentual := 0;
					end;
				end if;

				/* Acumular os valores de baixa para gravar no historico de valor e para descontar da base de depreciacao */


				vl_total_baixa_bem_w := vl_total_baixa_bem_w + c02_w.vl_baixa_bem;

				/*
				Base de depreciacao fiscal e o original menos o valor baixado do bem
				Ja esta descontado o valor de baixas de meses anteriores,
				agora desconta a baixa realizada no mes(ou as baixas, em cada loop do C02)
				*/

				vl_base_deprec_bx_w	:= vl_base_deprec_bx_w - c02_w.vl_baixa_bem;

				/*
				A cada baixa temos uma nova base de depreciacao e um novo valor de depreciacao anual
				assim recalculamos o valor anual de depreciacao com base na taxa do mes
				*/

				vl_deprec_ano_bx_w	:= (vl_base_deprec_bx_w * tx_deprec_fiscal_w) / 100;

				/*
				Atribuimos ou incrementamos o valor de baixa de depreciacao para o mes
				Pegar a depreciacao do mes anterior mais a depreciacao do mes atual ate a data da baixa e calcular o valor de baixa da depreciacao em cima deste valor
				Na primeira baixa(primeiro loop) o VL_DEPREC_ACUM_W esta com o valor da depreciacao do mes anterior mais o valor de depreciacao ate o dia da primeira baixa
				*/

				vl_baixa_deprec_per_w := ((vl_deprec_acum_w * c02_w.qt_percentual) / 100);
				vl_baixa_deprec_w := vl_baixa_deprec_w + vl_baixa_deprec_per_w;
				/*
				Dininuir a baixa da depreciacao da depreciacao acumulada, o valor nao faz mais parte do acumulado do bem
				*/

				vl_deprec_acum_w	:= vl_deprec_acum_w - vl_baixa_deprec_per_w;

				/*
				Baixar o percentual da depreciacao do mes tambem, a baixa foi em cima deste valor tambem, enbora ja calculado
				precisa baixar o percentual relativo ao que ja depreciou tambem
				*/

				--vl_deprec_mes_bx_w	:= vl_deprec_mes_bx_w - ((vl_deprec_mes_bx_w * c02_w.qt_percentual) / 100);


				/*
				Aqui temos uma nova base de depreciacao e um novo valor de depreciacao ano, com base no valor de baixa
				*/

				if (vl_deprec_ano_bx_w > 0) then
					begin

					/* Pegar a data das proximas baixas realizadas no mesmo mes, em cada loop para calculo de dias */


					select	min(a.dt_historico)
					into STRICT	dt_proxima_baixa_w
					from	pat_historico_bem a,
						pat_tipo_historico b
					where	a.nr_seq_bem	= nr_seq_bem_p
					and	a.nr_seq_tipo	= b.nr_sequencia
					and	b.ie_valor	in ('B','V')
					and	pkg_date_utils.start_of(a.dt_historico, 'MONTH', 0) = pkg_date_utils.start_of(dt_ref_deprec_w, 'MONTH', 0)
					and	a.dt_historico > c02_w.dt_historico;

					/* Data de inicio e um dia apos a baixa */


					dt_inicio_w	:= pkg_date_utils.start_of(c02_w.dt_historico,'DD', 0)+1;
					/* Data de fim e o dia da baixa (conta o dia tambem) ou o ultimo dia do mes */


					dt_fim_w	:= pkg_date_utils.start_of(coalesce(dt_proxima_baixa_w,pkg_date_utils.end_of(dt_ref_deprec_w, 'MONTH', 0)),'DD', 0);
					/* Quantidade dias em uso e a diferenca mais um, caso a baixa for no ultimo dia do mes nao conta para o mes */


					qt_dias_uso_w	:= dt_fim_w - dt_inicio_w + 1;

					/*
					Depreciacao do periodo
					Valor de depreciacao ano, dividido por 12 (meses), dividido por <qtd dias do mes em questao>, multiplicado pela quantidade de dias em uso
					*/

					vl_deprec_per_bx_w	:= round((((vl_deprec_ano_bx_w / 12) / qt_dias_mes_w) * qt_dias_uso_w),2);

					/*
					VL_DEPREC_ACUM_W + VL_DEPREC_PER_BX_W
						Valor de depreciacao acumulado ate a baixa somado ao valor de depreciacao do periodo da baixa

					VL_BASE_DEPREC_BX_W
						Base de depreciacao ate o momento(descontando baixas anteriores)

					Se a depreciacao acumulada dos meses anteriores(menos baixas) mais a depreciacao do mes for maior que a base de depreciacao
					entao o valor de depreciacao do mes recebe a diferenca, desta forma depreciando 100% o bem

					Em situacoes normais nao deve entrar neste IF, somente se houve mudanca de taxas de depreciacao ou valor residual(Alteracoes via regra)
					*/

					if	((vl_deprec_acum_w + vl_deprec_per_bx_w) > vl_base_deprec_bx_w) then
						begin
						vl_deprec_per_bx_w := vl_base_deprec_bx_w - vl_deprec_acum_w;
						/*
						Se ouve algum erro de valor anterior (importacao por exemplo) que fez a base de depreciacao estar acima do valor acumulado de depreciacao
						zerar o valor de depreciacao para nao gerar valores negativos
						*/

						if (vl_deprec_per_bx_w < 0) then
							begin
							vl_deprec_per_bx_w := 0;
							end;
						end if;
						end;
					end if;
					/* Depreciacao do mes e a a soma das depreciacoes de cada periodo */


					vl_deprec_mes_bx_w := vl_deprec_mes_bx_w + vl_deprec_per_bx_w;
					vl_deprec_acum_w := vl_deprec_acum_w + vl_deprec_per_bx_w;
					end;
				end if;
				end;
			end if;
			end;
		end loop;
		close c02;
		/* Pegar o valor de depreciacao do mes calculado com base nas baixas */


		vl_deprec_mes_w := vl_deprec_mes_bx_w;

		/* Base de depreciacao sera o valor base apos a ultima baixa */


		vl_base_deprec_w := vl_base_deprec_bx_w;
		end;
	end if;
	end;
end if;
vl_base_deprec_fiscal_w	:= vl_base_deprec_w;
vl_deprec_mes_fis_w	:= vl_deprec_mes_w;
vl_deprec_acum_fis_w	:= vl_deprec_acum_w;
vl_fiscal_w		:= (vl_base_deprec_w - vl_deprec_acum_w);

/* ****************************************************************************
Atribuir valores de retorno as variaveis OUT
***************************************************************************** */

vl_base_deprec_fiscal_p	:= coalesce(vl_base_deprec_fiscal_w,0);
vl_deprec_mes_fis_p	:= coalesce(vl_deprec_mes_fis_w, 0);
vl_deprec_acum_fis_p	:= coalesce(vl_deprec_acum_fis_w, 0);
vl_fiscal_p		:= coalesce(vl_fiscal_w, 0);

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE philips_patrimonio_pck.calcular_deprec_fiscal ( cd_estabelecimento_p bigint, dt_referencia_p timestamp, nr_seq_bem_p bigint, vl_base_deprec_fiscal_p INOUT bigint, vl_deprec_mes_fis_p INOUT bigint, vl_deprec_acum_fis_p INOUT bigint, vl_fiscal_p INOUT bigint) FROM PUBLIC;
