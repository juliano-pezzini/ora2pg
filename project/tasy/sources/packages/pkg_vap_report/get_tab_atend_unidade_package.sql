-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE FUNCTION pkg_vap_report.get_tab_atend_unidade (P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_PROTOCOL bigint DEFAULT 0) RETURNS SETOF T_TAB_ATEND_UNIDADE AS $body$
DECLARE


    C_UNIDADE_ATEND_VMI CURSOR FOR
      SELECT T.CD_ESTABELECIMENTO,
             T.CD_SETOR_ATENDIMENTO,
             T.NR_ATENDIMENTO,
             T.DT_ENTRADA_UNIDADE,
             LEAST(coalesce(T.DT_SAIDA_UNIDADE, DT_SAIDA_CALC),
                   coalesce(DT_SAIDA_CALC, T.DT_SAIDA_UNIDADE)) DT_SAIDA
        FROM (SELECT S.CD_ESTABELECIMENTO,
                     S.CD_SETOR_ATENDIMENTO,
                     U.NR_ATENDIMENTO,
                     U.DT_ENTRADA_UNIDADE,
                     U.DT_SAIDA_UNIDADE,
                     (SELECT MIN(B.DT_ENTRADA_UNIDADE)
                        FROM ATEND_PACIENTE_UNIDADE B
                       WHERE B.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                         AND B.DT_ENTRADA_UNIDADE > U.DT_ENTRADA_UNIDADE) DT_SAIDA_CALC
                FROM ATEND_PACIENTE_UNIDADE U, SETOR_ATENDIMENTO S
               WHERE U.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO
                 AND TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(S.CD_ESTABELECIMENTO,
                                                       U.DT_ENTRADA_UNIDADE),
                           'DD') <= P_END_DATE
                 AND EXISTS (SELECT 1
                        FROM ATEND_PAC_DISPOSITIVO AD,
                             ATENDIMENTO_PACIENTE  PC
                       WHERE AD.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                         AND AD.NR_ATENDIMENTO = PC.NR_ATENDIMENTO
                         AND OBTER_IDADE_PF(PC.CD_PESSOA_FISICA,
                                            AD.DT_INSTALACAO,
                                            'A') >= P_AGE
                         AND TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(PC.CD_ESTABELECIMENTO,
                                                               AD.DT_INSTALACAO),
                                   'DD') <= P_END_DATE
                         AND coalesce(TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(PC.CD_ESTABELECIMENTO,
                                                                   AD.DT_RETIRADA),
                                       'DD'),
                                   P_START_DATE) >= P_START_DATE
                         AND EXISTS (SELECT 1
                                FROM DISPOSITIVO DP
                               WHERE AD.NR_SEQ_DISPOSITIVO = DP.NR_SEQUENCIA
                                 AND DP.IE_CLASSIF_DISP_NISS = 'VMI')
                         AND (P_PROTOCOL = 0 OR (P_PROTOCOL <> 0 AND EXISTS (SELECT 1
                                  FROM GQA_PROTOCOLO_PAC G
                                 WHERE G.NR_ATENDIMENTO = AD.NR_ATENDIMENTO
                                   AND G.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(1)
                                   AND G.IE_SITUACAO = 'A'
                                   AND G.DT_INCLUSAO <= coalesce(AD.DT_RETIRADA, G.DT_INCLUSAO)
                                   AND AD.DT_INSTALACAO <= coalesce(G.DT_TERMINO, AD.DT_INSTALACAO)))))) T
       WHERE coalesce(TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(T.CD_ESTABELECIMENTO,
                                                   LEAST(coalesce(T.DT_SAIDA_UNIDADE,
                                                             DT_SAIDA_CALC),
                                                         coalesce(DT_SAIDA_CALC,
                                                             T.DT_SAIDA_UNIDADE))),
                       'DD'),
                 P_START_DATE) >= P_START_DATE;

  TYPE T_UNIDADE_ATEND_VMI IS TABLE OF C_UNIDADE_ATEND_VMI%ROWTYPE;
  R_UNIDADE_ATEND_VMI T_UNIDADE_ATEND_VMI;

  
BEGIN 
    OPEN C_UNIDADE_ATEND_VMI;
    LOOP
      FETCH C_UNIDADE_ATEND_VMI BULK COLLECT INTO R_UNIDADE_ATEND_VMI LIMIT 1000;

        BEGIN
          FOR i IN R_UNIDADE_ATEND_VMI.FIRST..R_UNIDADE_ATEND_VMI.LAST LOOP
            RETURN NEXT R_UNIDADE_ATEND_VMI(i);
          END LOOP;
        EXCEPTION WHEN OTHERS THEN
          NULL;
        END;

      EXIT WHEN NOT FOUND; /* apply on C_UNIDADE_ATEND_VMI */
 
    END LOOP;
    CLOSE C_UNIDADE_ATEND_VMI;
  
    RETURN;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_vap_report.get_tab_atend_unidade (P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_PROTOCOL bigint DEFAULT 0) FROM PUBLIC;
