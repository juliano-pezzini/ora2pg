-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE PROCEDURE pkg_vap_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text, P_PROTOCOL text, P_INCIDENCE text) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_VAP_RESUME CURSOR FOR
      SELECT M.NR_ATENDIMENTO,
             M.CD_ESTABELECIMENTO,
             M.CD_SETOR_ATENDIMENTO,
             M.DT_INSTALACAO,
             M.DT_RETIRADA,
             M.DT_INSTALACAO_ESTAB,
             M.DT_RETIRADA_ESTAB,
             M.DT_ENTRADA_SETOR,
             M.DT_SAIDA_SETOR,
             GREATEST(M.DT_INSTALACAO_ESTAB, M.DT_ENTRADA_SETOR) DT_INSTALACAO_SETOR,
             LEAST(coalesce(M.DT_RETIRADA_ESTAB, M.DT_SAIDA_SETOR),
                   coalesce(M.DT_SAIDA_SETOR, DT_RETIRADA_ESTAB)) DT_RETIRADA_SETOR
        FROM (SELECT DISTINCT UN.CD_ESTABELECIMENTO,
                              UN.CD_SETOR_ATENDIMENTO,
                              UN.NR_ATENDIMENTO,
                              APD.DT_INSTALACAO,
                              APD.DT_RETIRADA,
                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO) DT_INSTALACAO_ESTAB,
                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA) DT_RETIRADA_ESTAB,
                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_SAIDA) DT_SAIDA_SETOR
                FROM TABLE(pkg_vap_report.get_tab_atend_unidade(P_START_DATE, P_END_DATE, P_AGE, 1)) UN, 
                     ATEND_PAC_DISPOSITIVO  APD                                       
               WHERE UN.NR_ATENDIMENTO = APD.NR_ATENDIMENTO
                 AND EXISTS (SELECT 1 FROM DISPOSITIVO D WHERE D.NR_SEQUENCIA = APD.NR_SEQ_DISPOSITIVO AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                 AND OBTER_IDADE_PF(OBTER_CD_PES_FIS_ATEND(APD.NR_ATENDIMENTO), APD.DT_INSTALACAO, 'A') >= P_AGE
                 AND TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO), 'DD') <= P_END_DATE
                 AND coalesce(TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA), 'DD'), P_START_DATE) >= P_START_DATE
                 AND (P_CLINICAL_UNIT = '0' OR OBTER_SE_CONTIDO(UN.CD_SETOR_ATENDIMENTO, P_CLINICAL_UNIT) = 'S')
                 AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND UN.CD_SETOR_ATENDIMENTO = US.CD_SETOR_ATENDIMENTO)
                 AND APD.DT_INSTALACAO <= coalesce(UN.DT_SAIDA, APD.DT_INSTALACAO)                                                                    
                 AND UN.DT_ENTRADA_UNIDADE <= coalesce(APD.DT_RETIRADA, UN.DT_ENTRADA_UNIDADE)
                 AND EXISTS (SELECT 1
                              FROM GQA_PROTOCOLO_PAC P
                             WHERE P.NR_ATENDIMENTO = APD.NR_ATENDIMENTO
                               AND P.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(1)
                               AND P.IE_SITUACAO = 'A'
                               AND P.DT_INCLUSAO <= coalesce(APD.DT_RETIRADA, P.DT_INCLUSAO)
                               AND APD.DT_INSTALACAO <= coalesce(P.DT_TERMINO, APD.DT_INSTALACAO))) M;
    --
    TYPE T_VAP_RESUME IS TABLE OF C_VAP_RESUME%ROWTYPE;
    R_VAP_RESUME T_VAP_RESUME;
    --
    C_VAP_REPORT CURSOR FOR
      SELECT X.DT_ATEND,
             X.NR_ATENDIMENTO,
             X.CD_ESTABELECIMENTO,
             X.CD_SETOR_ATENDIMENTO,
             trim(both SUBSTR(OBTER_NOME_SETOR(X.CD_SETOR_ATENDIMENTO), 1, 25)) CLINICAL_UNIT,
             LEAST(X.QT_ATENDIMENTO, 1440) QT_ATENDIMENTO,
             1 VENT_DAYS,
             X.DVT_COUNT,
             X.DVT_COMPLIANCE,
             X.SUD_COUNT,
             X.SUD_COMPLIANCE,
             X.HOB_COUNT,
             X.HOB_COMPLIANCE,
             X.HOLD_SED_COUNT,
             X.HOLD_SED_COMPLIANCE,
             X.WEANING_COUNT,
             X.WEANING_COMPLIANCE,
             X.ORALCARE_COUNT,
             X.ORALCARE_CMPL
        FROM (SELECT A.DT_ATEND,
                     A.NR_ATENDIMENTO,
                     A.CD_ESTABELECIMENTO,
                     A.CD_SETOR_ATENDIMENTO,
                     SUM(A.QT_ATENDIMENTO) QT_ATENDIMENTO,
                     SUM(A.DVT_COUNT) DVT_COUNT,
                     SUM(A.DVT_COMPLIANCE) DVT_COMPLIANCE,
                     SUM(A.SUD_COUNT) SUD_COUNT,
                     SUM(A.SUD_COMPLIANCE) SUD_COMPLIANCE,
                     SUM(A.HOB_COUNT) HOB_COUNT,
                     SUM(A.HOB_COMPLIANCE + A.HOB_JCAHO) HOB_COMPLIANCE,
                     SUM(A.HOLD_SED_COUNT) HOLD_SED_COUNT,
                     SUM(A.HOLD_SED_COMPLIANCE) HOLD_SED_COMPLIANCE,
                     SUM(A.WEANING_COUNT) WEANING_COUNT,
                     SUM(A.WEANING_COMPLIANCE) WEANING_COMPLIANCE,
                     SUM(A.ORALCARE_COUNT) ORALCARE_COUNT,
                     SUM(A.ORALCARE_CMPL) ORALCARE_CMPL
                FROM (SELECT T.DT_ATEND,
                             T.NR_ATENDIMENTO,
                             T.CD_ESTABELECIMENTO,
                             T.CD_SETOR_ATENDIMENTO,
                             T.DT_INSTALACAO,
                             T.DT_RETIRADA,
                             T.DT_INSTALACAO_ESTAB,
                             T.DT_RETIRADA_ESTAB,
                             T.DT_ENTRADA_SETOR,
                             T.DT_SAIDA_SETOR,
                             T.DT_ENTRADA_ATEND,
                             T.DT_SAIDA_ATEND,
                             T.QT_ATENDIMENTO,
                             CASE WHEN P_PROTOCOL='N' THEN                                      0 WHEN P_PROTOCOL='S' THEN                                     0 WHEN P_PROTOCOL='H' THEN                                     0  ELSE -- DVT_COUNT      
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 7)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 3)  ELSE 1 END  END  DVT_COUNT,
                             CASE WHEN P_PROTOCOL='N' THEN                                      0 WHEN P_PROTOCOL='S' THEN                                     0 WHEN P_PROTOCOL='H' THEN                                     0  ELSE -- DVT_COMPLIANCE 
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 7)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 3)  ELSE 1 END  END  DVT_COMPLIANCE,
                             CASE WHEN P_PROTOCOL='N' THEN                                      0 WHEN P_PROTOCOL='D' THEN                                     0 WHEN P_PROTOCOL='H' THEN                                     0  ELSE -- SUD_COUNT
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 8)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 4)  ELSE 1 END  END  SUD_COUNT,
                             CASE WHEN P_PROTOCOL='N' THEN                                      0 WHEN P_PROTOCOL='D' THEN                                     0 WHEN P_PROTOCOL='H' THEN                                     0  ELSE -- SUD_COMPLIANCE
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 8)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 4)  ELSE 1 END  END  SUD_COMPLIANCE,
                             CASE WHEN P_PROTOCOL='N' THEN                                     0 WHEN P_PROTOCOL='S' THEN                                     0 WHEN P_PROTOCOL='D' THEN                                     0 WHEN P_PROTOCOL=-- HOB_COUNT
                                    'J' THEN  --JCAHO
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 9)=0 THEN                                            CASE WHEN PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 2)=0 THEN  0  ELSE 1 END   ELSE 1 END   ELSE --IHI / HOB
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 9)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 2)  ELSE 1 END  END  HOB_COUNT,
                             CASE WHEN P_PROTOCOL='N' THEN                                     0 WHEN P_PROTOCOL='S' THEN                                     0 WHEN P_PROTOCOL='D' THEN                                     0 WHEN P_PROTOCOL='J' THEN                                     0  ELSE -- HOB_COMPLIANCE
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 9)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 2)  ELSE 1 END  END  HOB_COMPLIANCE,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- HOLD_SEDATION_COUNT
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 10)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 6)  ELSE 1 END   ELSE 0 END  HOLD_SED_COUNT,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- HOLD_SEDATION_COMPLIANCE
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 10)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 6)  ELSE 1 END   ELSE 0 END  HOLD_SED_COMPLIANCE,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- WEANING_COUNT
                                    PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 5)  ELSE 0 END  WEANING_COUNT,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- WEANING_COMPLIANCE
                                    PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 5)  ELSE 0 END  WEANING_COMPLIANCE,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- ORALCARE_COUNT
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 12)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COUNT(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 13)  ELSE 1 END   ELSE 0 END  ORALCARE_COUNT,
                             CASE WHEN P_PROTOCOL='I' THEN                                     -- ORALCARE_COMPLIANCE
                                    CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 12)=0 THEN                                            PKG_VAP_REPORT.GET_STAGE_COMPLIANCE(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 13)  ELSE 1 END   ELSE 0 END  ORALCARE_CMPL,
                             CASE WHEN P_PROTOCOL='J' THEN                                     CASE WHEN PKG_VAP_REPORT.GET_STAGE_NOT_INDIC(T.NR_ATENDIMENTO, T.CD_ESTABELECIMENTO, T.DT_ENTRADA_ATEND, T.DT_SAIDA_ATEND, 9)=0 THEN                                            -- HOB_COMPLIANCE_JCAHO
                                           CASE WHEN (SELECT COUNT(DISTINCT DT_FIM)                                                     FROM GQA_PROTOCOLO_PAC P, GQA_PROTOCOLO_ETAPA_PAC E                                                    WHERE P.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(1)                                                      AND P.IE_SITUACAO = 'A'                                                      AND P.NR_ATENDIMENTO = T.NR_ATENDIMENTO                                                      AND E.NR_SEQ_PROT_PAC = P.NR_SEQUENCIA                                                      AND E.NR_SEQ_ETAPA = PKG_REPORT_DATA.GET_STAGE(2)                                                      AND PKG_VAP_REPORT.GET_ESTAB_DT(T.CD_ESTABELECIMENTO, E.DT_INICIO) BETWEEN T.DT_ENTRADA_ATEND AND T.DT_SAIDA_ATEND                                                      AND (E.DT_FIM IS NOT NULL AND E.DT_FIM::text <> '')                                                      AND E.DT_FIM - 1/3 >= (SELECT MAX(EJ.DT_FIM)                                                                               FROM GQA_PROTOCOLO_PAC PJ, GQA_PROTOCOLO_ETAPA_PAC EJ                                                                              WHERE PJ.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(1)                                                                                AND PJ.IE_SITUACAO = 'A'                                                                                AND PJ.NR_ATENDIMENTO = T.NR_ATENDIMENTO                                                                                AND EJ.NR_SEQ_PROT_PAC = PJ.NR_SEQUENCIA                                                                                AND EJ.NR_SEQ_ETAPA = PKG_REPORT_DATA.GET_STAGE(2)                                                                                AND TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(T.CD_ESTABELECIMENTO, EJ.DT_INICIO), 'DD') = T.DT_ATEND                                                                                AND (EJ.DT_FIM IS NOT NULL AND EJ.DT_FIM::text <> '')                                                                                AND EJ.DT_FIM < E.DT_FIM))=0 THEN                                                   0  ELSE 1 END   ELSE 1 END   ELSE 0 END  HOB_JCAHO                    
                        FROM (WITH DT_ATEND AS (WITH RECURSIVE cte AS (
SELECT level, P_END_DATE - level + 1 dt_atend
                                                  
                                               LEVEL <= P_END_DATE - P_START_DATE + 1  UNION ALL
SELECT level, P_END_DATE - level + 1 dt_atend
                                                  
                                               LEVEL <= P_END_DATE - P_START_DATE + 1 JOIN cte c ON ()

) SELECT * FROM cte;
)
                              SELECT DT.DT_ATEND,
                                     N.NR_ATENDIMENTO,
                                     N.CD_ESTABELECIMENTO,
                                     N.CD_SETOR_ATENDIMENTO,
                                     N.DT_INSTALACAO,
                                     N.DT_RETIRADA,
                                     N.DT_INSTALACAO_ESTAB,
                                     N.DT_RETIRADA_ESTAB,
                                     N.DT_ENTRADA_SETOR,
                                     N.DT_SAIDA_SETOR,
                                     N.DT_INSTALACAO_SETOR,
                                     N.DT_RETIRADA_SETOR,
                                     GREATEST(N.DT_INSTALACAO_SETOR, DT.DT_ATEND) DT_ENTRADA_ATEND,
                                     LEAST(coalesce(N.DT_RETIRADA_SETOR, LEAST(DT.DT_ATEND + 1, PKG_VAP_REPORT.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))), LEAST(DT.DT_ATEND + 1, PKG_VAP_REPORT.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))) DT_SAIDA_ATEND,
                                     CASE 
                                       WHEN TRUNC(N.DT_INSTALACAO_SETOR, 'DD') = DT.DT_ATEND AND 
                                            coalesce(TRUNC(N.DT_RETIRADA_SETOR, 'DD'), P_END_DATE) = DT.DT_ATEND THEN
                                         coalesce(N.DT_RETIRADA_SETOR, LEAST(P_END_DATE + 1, PKG_VAP_REPORT.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))) - N.DT_INSTALACAO_SETOR
                                       WHEN TRUNC(N.DT_INSTALACAO_SETOR, 'DD') = DT.DT_ATEND THEN
                                         DT.DT_ATEND + 1 - N.DT_INSTALACAO_SETOR
                                       WHEN coalesce(TRUNC(N.DT_RETIRADA_SETOR, 'DD'), P_END_DATE) = DT.DT_ATEND THEN
                                         coalesce(N.DT_RETIRADA_SETOR, LEAST(P_END_DATE + 1, PKG_VAP_REPORT.GET_ESTAB_DT(N.CD_ESTABELECIMENTO, clock_timestamp()))) - DT_ATEND
                                       ELSE 1
                                     END * 24 * 60 QT_ATENDIMENTO
                                FROM W_VAP_REPORT_RESUME N,
                                     DT_ATEND DT  
                               WHERE DT.DT_ATEND BETWEEN TRUNC(N.DT_INSTALACAO_SETOR, 'DD') 
                                                     AND coalesce(TRUNC(N.DT_RETIRADA_SETOR, 'DD'), P_END_DATE)) T) A
               GROUP BY A.DT_ATEND,
                        A.NR_ATENDIMENTO,
                        A.CD_ESTABELECIMENTO,
                        A.CD_SETOR_ATENDIMENTO) X;
    --
    TYPE T_VAP_REPORT IS TABLE OF C_VAP_REPORT%ROWTYPE;
    R_VAP_REPORT T_VAP_REPORT;
    --     
    C_VAP_INCIDENCE CURSOR FOR
      SELECT X.MONTH,
             X.MONTH_NAME,
             X.YEAR,
             X.CD_ESTABELECIMENTO,
             X.CD_SETOR_ATENDIMENTO,
             X.CLINICAL_UNIT,
             X.NR_ATEND_COUNT,
             SUM(X.VENT_DAYS) VENT_DAYS,
             X.PROTOCOLS_COUNT,
             X.DIAGNOSIS_COUNT
        FROM (SELECT T.DT_ATEND,
                     T.MONTH,
                     T.MONTH_NAME,
                     T.YEAR,
                     T.CD_ESTABELECIMENTO,
                     T.CD_SETOR_ATENDIMENTO,
                     T.CLINICAL_UNIT,
                     T.NR_ATEND_COUNT,
                     COUNT(DISTINCT T.NR_ATENDIMENTO) VENT_DAYS,
                     T.PROTOCOLS_COUNT,
                     T.DIAGNOSIS_COUNT
                FROM (WITH DT_ATEND AS (WITH RECURSIVE cte AS (
SELECT level, P_END_DATE - level + 1 dt_atend

                                       LEVEL <= P_END_DATE - P_START_DATE + 1  UNION ALL
SELECT level, P_END_DATE - level + 1 dt_atend
                                          
                                       LEVEL <= P_END_DATE - P_START_DATE + 1 JOIN cte c ON ()

) SELECT * FROM cte;
)
                      SELECT D.DT_ATEND,
                             N.* 
                        FROM (WITH VAP AS (SELECT T.MONTH,
                                                  T.MONTH_NAME,
                                                  T.YEAR,
                                                  GREATEST(TO_DATE(T.YEAR || T.MONTH, 'YYYYMM'), P_START_DATE) START_DATE,
                                                  LEAST(LAST_DAY(TO_DATE(T.YEAR || T.MONTH, 'YYYYMM')), P_END_DATE) END_DATE,
                                                  T.CD_SETOR_ATENDIMENTO,
                                                  T.CLINICAL_UNIT,
                                                  COUNT(DISTINCT T.NR_ATENDIMENTO) NR_ATEND_COUNT,
                                                  SUM(T.PROTOCOLS_COUNT) PROTOCOLS_COUNT,
                                                  SUM(T.DIAGNOSIS_COUNT) DIAGNOSIS_COUNT
                                             FROM (SELECT DISTINCT V.NR_MONTH MONTH,
                                                                   V.DS_MONTH MONTH_NAME,
                                                                   V.DS_YEAR YEAR,
                                                                   V.CD_SETOR_ATENDIMENTO,
                                                                   V.DS_SETOR_ATENDIMENTO CLINICAL_UNIT,
                                                                   R.NR_ATENDIMENTO,
                                                                   (SELECT COUNT(1)
                                                                      FROM GQA_PROTOCOLO_PAC GPP
                                                                     WHERE GPP.NR_ATENDIMENTO = R.NR_ATENDIMENTO
                                                                       AND GPP.NR_SEQ_PROTOCOLO = PKG_REPORT_DATA.GET_PROTOCOL(1)
                                                                       AND GPP.IE_SITUACAO = 'A'
                                                                       AND GPP.DT_INCLUSAO <=
                                                                           coalesce(R.DT_RETIRADA, GPP.DT_INCLUSAO)
                                                                       AND R.DT_INSTALACAO <=
                                                                           coalesce(GPP.DT_TERMINO, R.DT_INSTALACAO)) PROTOCOLS_COUNT,
                                                                   (SELECT COUNT(1)
                                                                      FROM DIAGNOSTICO_DOENCA DD, CID_DOENCA CD
                                                                     WHERE DD.NR_ATENDIMENTO = R.NR_ATENDIMENTO
                                                                       AND DD.IE_TIPO_DIAGNOSTICO = 2
                                                                       AND DD.CD_DOENCA = CD.CD_DOENCA_CID
                                                                       AND CD.IE_DOENCA_REL = 12
                                                                       AND DD.DT_DIAGNOSTICO BETWEEN R.DT_INSTALACAO - 2 AND
                                                                           coalesce(R.DT_RETIRADA, P_END_DATE)) DIAGNOSIS_COUNT
                                                    FROM W_VAP_REPORT_RESUME R, W_VAP_REPORT V
                                                   WHERE V.NR_ATENDIMENTO = R.NR_ATENDIMENTO
                                                     AND V.CD_SETOR_ATENDIMENTO = R.CD_SETOR_ATENDIMENTO
                                                     AND TO_DATE(V.DS_YEAR || V.NR_MONTH, 'YYYYMM') BETWEEN
                                                         TRUNC(R.DT_INSTALACAO_SETOR, 'MM') AND
                                                         coalesce(TRUNC(R.DT_RETIRADA_SETOR, 'MM'),
                                                             TO_DATE(V.DS_YEAR || V.NR_MONTH, 'YYYYMM'))) T
                                           GROUP BY T.MONTH,
                                                    T.MONTH_NAME,
                                                    T.YEAR,
                                                    T.CD_SETOR_ATENDIMENTO,
                                                    T.CLINICAL_UNIT)
                              SELECT V.MONTH,
                                     V.MONTH_NAME,
                                     V.YEAR,
                                     V.START_DATE,
                                     V.END_DATE,
                                     V.CLINICAL_UNIT,
                                     V.NR_ATEND_COUNT,
                                     V.PROTOCOLS_COUNT,
                                     V.DIAGNOSIS_COUNT,
                                     U.*
                                FROM (SELECT M.NR_ATENDIMENTO,
                                             M.CD_ESTABELECIMENTO,
                                             M.CD_SETOR_ATENDIMENTO,
                                             GREATEST(M.DT_INSTALACAO_ESTAB, M.DT_ENTRADA_SETOR) DT_INSTALACAO_SETOR,
                                             LEAST(coalesce(M.DT_RETIRADA_ESTAB, M.DT_SAIDA_SETOR),
                                                   coalesce(M.DT_SAIDA_SETOR, DT_RETIRADA_ESTAB)) DT_RETIRADA_SETOR      
                                        FROM (SELECT DISTINCT UN.CD_ESTABELECIMENTO,
                                                              UN.CD_SETOR_ATENDIMENTO,
                                                              UN.NR_ATENDIMENTO,
                                                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO) DT_INSTALACAO_ESTAB,
                                                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA) DT_RETIRADA_ESTAB,
                                                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                                              PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, UN.DT_SAIDA) DT_SAIDA_SETOR                              
                                                FROM TABLE(pkg_vap_report.get_tab_atend_unidade(P_START_DATE, P_END_DATE, P_AGE, 0)) UN, 
                                                     ATEND_PAC_DISPOSITIVO  APD                                       
                                               WHERE UN.NR_ATENDIMENTO = APD.NR_ATENDIMENTO
                                                 AND EXISTS (SELECT 1 FROM DISPOSITIVO D WHERE D.NR_SEQUENCIA = APD.NR_SEQ_DISPOSITIVO AND D.IE_CLASSIF_DISP_NISS = 'VMI')
                                                 AND EXISTS (SELECT 1 FROM W_VAP_REPORT_RESUME R WHERE R.CD_SETOR_ATENDIMENTO = UN.CD_SETOR_ATENDIMENTO)
                                                 AND OBTER_IDADE_PF(OBTER_CD_PES_FIS_ATEND(APD.NR_ATENDIMENTO), APD.DT_INSTALACAO, 'A') >= P_AGE
                                                 AND TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_INSTALACAO), 'DD') <= P_END_DATE
                                                 AND coalesce(TRUNC(PKG_VAP_REPORT.GET_ESTAB_DT(UN.CD_ESTABELECIMENTO, APD.DT_RETIRADA), 'DD'), P_START_DATE) >= P_START_DATE
                                                 AND (P_CLINICAL_UNIT = '0' OR OBTER_SE_CONTIDO(UN.CD_SETOR_ATENDIMENTO, P_CLINICAL_UNIT) = 'S')
                                                 AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND UN.CD_SETOR_ATENDIMENTO = US.CD_SETOR_ATENDIMENTO)
                                                 AND APD.DT_INSTALACAO <= coalesce(UN.DT_SAIDA, APD.DT_INSTALACAO)                                                                    
                                                 AND UN.DT_ENTRADA_UNIDADE <= coalesce(APD.DT_RETIRADA, UN.DT_ENTRADA_UNIDADE)) M) U, 
                                     VAP V
                               WHERE U.CD_SETOR_ATENDIMENTO = V.CD_SETOR_ATENDIMENTO
                                 AND TRUNC(U.DT_INSTALACAO_SETOR, 'DD') <= V.END_DATE
                                 AND coalesce(U.DT_RETIRADA_SETOR, V.START_DATE) >= V.START_DATE) N,
                             DT_ATEND D  
                       WHERE D.DT_ATEND BETWEEN N.START_DATE AND N.END_DATE
                         AND D.DT_ATEND BETWEEN TRUNC(N.DT_INSTALACAO_SETOR, 'DD') 
                                            AND coalesce(TRUNC(N.DT_RETIRADA_SETOR, 'DD'), P_END_DATE)) T
               GROUP BY T.MONTH,
                        T.DT_ATEND,
                        T.MONTH_NAME,
                        T.YEAR,
                        T.CD_ESTABELECIMENTO,
                        T.CD_SETOR_ATENDIMENTO,
                        T.CLINICAL_UNIT,
                        T.NR_ATEND_COUNT,
                        T.PROTOCOLS_COUNT,
                        T.DIAGNOSIS_COUNT) X
       GROUP BY X.MONTH,
                X.MONTH_NAME,
                X.YEAR,
                X.CD_ESTABELECIMENTO,
                X.CD_SETOR_ATENDIMENTO,
                X.CLINICAL_UNIT,
                X.NR_ATEND_COUNT,
                X.PROTOCOLS_COUNT,
                X.DIAGNOSIS_COUNT;
    --
    TYPE T_VAP_INCIDENCE IS TABLE OF C_VAP_INCIDENCE%ROWTYPE;
    R_VAP_INCIDENCE T_VAP_INCIDENCE;
    --  
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;

    OPEN C_VAP_RESUME;
    LOOP
      FETCH C_VAP_RESUME BULK COLLECT INTO R_VAP_RESUME LIMIT 1000;

        BEGIN 
          FOR i IN R_VAP_RESUME.FIRST..R_VAP_RESUME.LAST LOOP
            INSERT INTO W_VAP_REPORT_RESUME(
              nr_atendimento, 
              cd_estabelecimento, 
              cd_setor_atendimento, 
              dt_instalacao, 
              dt_retirada, 
              dt_instalacao_estab, 
              dt_retirada_estab, 
              dt_entrada_setor,
              dt_saida_setor, 
              dt_instalacao_setor, 
              dt_retirada_setor,
              nm_usuario)
            VALUES (
              R_VAP_RESUME[i].NR_ATENDIMENTO, --nr_atendimento, 
              R_VAP_RESUME[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
              R_VAP_RESUME[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
              R_VAP_RESUME[i].DT_INSTALACAO, --dt_instalacao, 
              R_VAP_RESUME[i].DT_RETIRADA, --dt_retirada, 
              R_VAP_RESUME[i].DT_INSTALACAO_ESTAB, --dt_instalacao_estab, 
              R_VAP_RESUME[i].DT_RETIRADA_ESTAB, --dt_retirada_estab, 
              R_VAP_RESUME[i].DT_ENTRADA_SETOR, --dt_entrada_setor, 
              R_VAP_RESUME[i].DT_SAIDA_SETOR, --dt_saida_setor, 
              R_VAP_RESUME[i].DT_INSTALACAO_SETOR, --dt_instalacao_setor, 
              R_VAP_RESUME[i].DT_RETIRADA_SETOR, --dt_retirada_setor,
              NM_USUARIO_W); --nm_usuario
            END LOOP;
          COMMIT;
        EXCEPTION WHEN no_data_found THEN
          NULL;
        END;
      EXIT WHEN NOT FOUND; /* apply on C_VAP_RESUME */
    END LOOP;
    CLOSE C_VAP_RESUME;
    COMMIT;

    OPEN C_VAP_REPORT;
    LOOP
      FETCH C_VAP_REPORT BULK COLLECT INTO R_VAP_REPORT LIMIT 1000;

        BEGIN
          FOR i IN R_VAP_REPORT.FIRST..R_VAP_REPORT.LAST LOOP
            INSERT INTO W_VAP_REPORT(
              dt_atendimento, 
              nr_month, 
              ds_month,
              ds_year, 
              cd_estabelecimento,
              cd_setor_atendimento,
              nr_atendimento, 
              ds_setor_atendimento, 
              qt_atendimento, 
              nr_vent_days, 
              nr_dvt_count, 
              nr_dvt_compliance, 
              nr_sud_count, 
              nr_sud_compliance, 
              nr_hob_count, 
              nr_hob_compliance, 
              nr_hold_sed_count, 
              nr_hold_sed_cmpl, 
              nr_weaning_count, 
              nr_weaning_cmpl,
              nr_oralcare_count,
              nr_oralcare_cmpl,
              nm_usuario) 
            VALUES (
              R_VAP_REPORT[i].DT_ATEND, --dt_atendimento, 
              TO_CHAR(R_VAP_REPORT[i].DT_ATEND, 'MM'), --nr_month,
              trim(both TO_CHAR(R_VAP_REPORT[i].DT_ATEND, 'Month', 'NLS_DATE_LANGUAGE = American')), --ds_month,           
              TO_CHAR(R_VAP_REPORT[i].DT_ATEND, 'YYYY'), --ds_year, 
              R_VAP_REPORT[i].CD_ESTABELECIMENTO, --cd_estabelecimento,
              R_VAP_REPORT[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento,
              R_VAP_REPORT[i].NR_ATENDIMENTO, --nr_atendimento,   
              R_VAP_REPORT[i].CLINICAL_UNIT, --ds_setor_atendimento,  
              R_VAP_REPORT[i].QT_ATENDIMENTO, --qt_atendimento, 
              R_VAP_REPORT[i].VENT_DAYS, --nr_vent_days, 
              R_VAP_REPORT[i].DVT_COUNT, --nr_dvt_count, 
              R_VAP_REPORT[i].DVT_COMPLIANCE, --nr_dvt_compliance, 
              R_VAP_REPORT[i].SUD_COUNT, --nr_sud_count, 
              R_VAP_REPORT[i].SUD_COMPLIANCE, --nr_sud_compliance, 
              R_VAP_REPORT[i].HOB_COUNT, --nr_hob_count, 
              R_VAP_REPORT[i].HOB_COMPLIANCE, --nr_hob_compliance, 
              R_VAP_REPORT[i].HOLD_SED_COUNT, --nr_hold_sed_count, 
              R_VAP_REPORT[i].HOLD_SED_COMPLIANCE, --nr_hold_sed_cmpl, 
              R_VAP_REPORT[i].WEANING_COUNT, --nr_weaning_count, 
              R_VAP_REPORT[i].WEANING_COMPLIANCE, --nr_weaning_cmpl,
              R_VAP_REPORT[i].ORALCARE_COUNT, --nr_oralcare_count,
              R_VAP_REPORT[i].ORALCARE_CMPL, --nr_oralcare_cmpl,
              NM_USUARIO_W); --nm_usuario 
            END LOOP;
          EXCEPTION WHEN no_data_found THEN
            NULL;
          END;
      EXIT WHEN NOT FOUND; /* apply on C_VAP_REPORT */
    END LOOP;
    CLOSE C_VAP_REPORT;
    COMMIT;

    IF P_INCIDENCE = 'S' THEN
      --
      OPEN C_VAP_INCIDENCE;
      LOOP
        FETCH C_VAP_INCIDENCE BULK COLLECT INTO R_VAP_INCIDENCE LIMIT 1000;

          BEGIN
            FOR i IN R_VAP_INCIDENCE.FIRST..R_VAP_INCIDENCE.LAST LOOP
              INSERT INTO W_VAP_REPORT_INCIDENCE(ds_month, 
                 nm_month, 
                 ds_year, 
                 cd_estabelecimento, 
                 cd_setor_atendimento, 
                 ds_setor_atendimento, 
                 qt_atendimento, 
                 nr_vent_days,  
                 nr_diagnosis, 
                 nr_protocols,
                 nm_usuario)
              VALUES (
                 R_VAP_INCIDENCE[i].MONTH, --ds_month, 
                 R_VAP_INCIDENCE[i].MONTH_NAME, --nm_month, 
                 R_VAP_INCIDENCE[i].YEAR, --ds_year, 
                 R_VAP_INCIDENCE[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                 R_VAP_INCIDENCE[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
                 R_VAP_INCIDENCE[i].CLINICAL_UNIT, --ds_setor_atendimento, 
                 R_VAP_INCIDENCE[i].NR_ATEND_COUNT, --qt_atendimento, 
                 R_VAP_INCIDENCE[i].VENT_DAYS, --nr_vent_days,  
                 R_VAP_INCIDENCE[i].DIAGNOSIS_COUNT, --nr_diagnosis, 
                 R_VAP_INCIDENCE[i].PROTOCOLS_COUNT, --nr_protocols,
                 NM_USUARIO_W); --nm_usuario 
            END LOOP;
          EXCEPTION WHEN no_data_found THEN
            NULL;
          END;
        EXIT WHEN NOT FOUND; /* apply on C_VAP_INCIDENCE */
      END LOOP;
      CLOSE C_VAP_INCIDENCE;
      COMMIT;
      --
    END IF;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_vap_report.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_AGE bigint, P_CLINICAL_UNIT text, P_PROTOCOL text, P_INCIDENCE text) FROM PUBLIC;
