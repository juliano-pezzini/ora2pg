-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE kodip_pck.receive_procedures ( procedures_p xml, nr_seq_episodio_p bigint, nr_atendimento_p bigint, nm_usuario_p text, reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, departments_p xml) AS $body$
DECLARE

		

procedimento_paciente_w		procedimento_paciente%rowtype;
procedimento_pac_medico_w	procedimento_pac_medico%rowtype;
atend_paciente_unidade_w	atend_paciente_unidade%rowtype;
proc_pac_medico_inf_adic_w	proc_pac_medico_inf_adic%rowtype;
cd_procedimento_w		procedimento.cd_procedimento%type;
cd_motivo_exc_conta_w		parametro_faturamento.cd_motivo_exc_conta%type;
nr_seq_atepacu_w		procedimento_paciente.nr_seq_atepacu%type;
nr_seq_episodio_w       atendimento_paciente.nr_seq_episodio%type;
ds_erro_w			varchar(4000);
		
c01 CURSOR FOR
SELECT 	*
from	xmltable('/Procedures/Proc' passing procedures_p columns
		code 		varchar(20) path '@Code',
		procid 		varchar(40) path '@ProcId',
		opdate 		varchar(12) path '@OpDate',
		opdateend	varchar(12) path '@OpDateEnd', --pending
		modtype 	varchar(1) path '@ModType',
		source 		varchar(10) path '@Source', --pending
		loc 		varchar(2) path '@Loc',
		proctype 	varchar(2) path '@ProcType',
		notforgr 	varchar(10) path '@NotForGr', --pending
		proctypeflags 	varchar(40) path '@ProcTypeFlags', --pending
		deptnum 	varchar(10) path '@DeptNum', --pending
		note 		varchar(255) path '@Note'); --pending
	
c00 CURSOR FOR
SELECT 	a.nr_atendimento,
	a.cd_estabelecimento,
	a.nr_seq_episodio,
	a.cd_pessoa_fisica,
	b.cd_convenio,
	b.cd_categoria,
	b.cd_plano_convenio
FROM atendimento_paciente a
LEFT OUTER JOIN atend_categoria_convenio b ON (a.nr_atendimento = b.nr_atendimento)
WHERE a.nr_atendimento = nr_atendimento_p order by dt_inicio_vigencia desc;

c00_w	c00%rowtype;

BEGIN
for c01_w in c01 loop
	begin
	procedimento_paciente_w		:=	null;
	procedimento_pac_medico_w	:=	null;
	proc_pac_medico_inf_adic_w	:=	null;
	
	if (c01_w.source = 'KIS') then
		begin
		
		begin
		procedimento_paciente_w.nr_sequencia := somente_numero(obter_valor_campo_separador(c01_w.procid, 1, '|'));
		
		select	*
		into STRICT	procedimento_paciente_w
		from	procedimento_paciente a
		where	a.nr_sequencia	= procedimento_paciente_w.nr_sequencia;
		exception
		when others then
			procedimento_paciente_w	:=	null;
		end;
		
		begin
		select	*
		into STRICT	procedimento_pac_medico_w
		from	procedimento_pac_medico
		where	nr_atendimento		= procedimento_paciente_w.nr_atendimento
		and	nr_seq_propaci		= procedimento_paciente_w.nr_sequencia;
		exception
		when others then
			procedimento_pac_medico_w	:=	null;
		end;
		end;
	else
		procedimento_paciente_w.nr_atendimento	:=	nr_atendimento_p;
	end if;
	
	open c00;
	loop
	fetch c00 into	
		c00_w;
	EXIT WHEN NOT FOUND; /* apply on c00 */
		exit;
	end loop;
	close c00;
	
	if	(c01_w.modtype = 'R' AND procedimento_paciente_w.nr_sequencia IS NOT NULL AND procedimento_paciente_w.nr_sequencia::text <> '') then
		begin
		select	max(cd_motivo_exc_conta)
		into STRICT	cd_motivo_exc_conta_w
		from	parametro_faturamento
		where	cd_estabelecimento	= c00_w.cd_estabelecimento;

		if (procedimento_paciente_w.nr_interno_conta IS NOT NULL AND procedimento_paciente_w.nr_interno_conta::text <> '') then
			CALL excluir_matproc_conta(
				procedimento_paciente_w.nr_sequencia,
				procedimento_paciente_w.nr_interno_conta, 
				cd_motivo_exc_conta_w, 
				obter_desc_expressao(726883), 
				'P',
				nm_usuario_p);
		end if;

		update	procedimento_pac_medico
		set	ie_situacao		= 'I',
			dt_inativacao		= clock_timestamp(),
			nm_usuario_inativacao	= nm_usuario_p,
			ds_justificativa	= obter_desc_expressao(879967) --'Procedure inactivated by DRG calculation'
		where	nr_atendimento		= procedimento_paciente_w.nr_atendimento
		and	nr_seq_propaci		= procedimento_paciente_w.nr_sequencia;
		end;
	elsif	((c01_w.modtype = 'A') or (c01_w.modtype = 'M' AND procedimento_paciente_w.nr_sequencia IS NOT NULL AND procedimento_paciente_w.nr_sequencia::text <> '')) then
		begin
		
		begin
		select	cd_procedimento
		into STRICT	cd_procedimento_w
		from	procedimento
		where	cd_procedimento_loc like c01_w.code
		and	ie_origem_proced = 11;		
		exception
		when others then
			cd_procedimento_w	:=	null;
		end;
		
		reg_integracao_p.nm_tabela	:=	'PROCEDIMENTO_PAC_MEDICO';
		intpd_processar_atributo(reg_integracao_p, 'CD_PROCEDIMENTO', cd_procedimento_w, 'N', procedimento_pac_medico_w.cd_procedimento);
		
		nr_seq_atepacu_w	:=	kodip_pck.get_atepacu(c01_w.deptnum, departments_p);
		
		if (coalesce(nr_seq_atepacu_w,0) = 0) then
			if (procedimento_paciente_w.nr_seq_atepacu IS NOT NULL AND procedimento_paciente_w.nr_seq_atepacu::text <> '') then
				nr_seq_atepacu_w	:=	procedimento_paciente_w.nr_seq_atepacu;
			else
				nr_seq_atepacu_w	:=	obter_atepacu_data(procedimento_paciente_w.nr_atendimento, 'A', clock_timestamp());
			end if;
		end if;	
		
		begin
		select	*
		into STRICT	atend_paciente_unidade_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_atepacu_w;
		exception
		when others then
			atend_paciente_unidade_w	:=	null;
		end;
		
		intpd_processar_atributo(reg_integracao_p, 'NR_ATENDIMENTO', atend_paciente_unidade_w.nr_atendimento, 'N', procedimento_pac_medico_w.nr_atendimento);		
		--intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_ATEPACU', nr_seq_atepacu_w, 'N', procedimento_pac_medico_w.nr_seq_atepacu); nao existe o campo na procedimento_pac_medico
		intpd_processar_atributo(reg_integracao_p, 'CD_SETOR_ATENDIMENTO',
			atend_paciente_unidade_w.cd_setor_atendimento, 'N', procedimento_pac_medico_w.cd_setor_atendimento);
		intpd_processar_atributo(reg_integracao_p, 'CD_DEPARTAMENTO', atend_paciente_unidade_w.cd_departamento, 'N', procedimento_pac_medico_w.cd_departamento);
		
		reg_integracao_p.nm_tabela	:=	'PROCEDIMENTO_PACIENTE';
		intpd_processar_atributo(reg_integracao_p, 'IE_LADO', c01_w.loc, 'S', procedimento_pac_medico_w.ie_lado);
		reg_integracao_p.nm_tabela	:=	'PROCEDIMENTO_PAC_MEDICO';
		intpd_processar_atributo(reg_integracao_p, 'DT_PROCEDIMENTO', to_date(c01_w.opdate, 'YYYYMMDDHH24MISS'), 'N', procedimento_pac_medico_w.dt_procedimento);
		--intpd_processar_atributo(reg_integracao_p, 'DT_INICIO_PROCEDIMENTO', to_char(c01_w.opdate, 'YYYYMMDDHH24MISS'), 'N', procedimento_pac_medico_w.dt_inicio_procedimento); nao existe o campo na procedimento_pac_medico		
		--intpd_processar_atributo(reg_integracao_p, 'DT_FINAL_PROCEDIMENTO', to_date(c01_w.opdateend, 'YYYYMMDDHH24MISS'), 'N', procedimento_pac_medico_w.dt_final_procedimento); nao existe o campo na procedimento_pac_medico
		
		if (c01_w.proctype = 'HL') then
			intpd_processar_atributo(reg_integracao_p, 'IE_PROC_PRINC', 'S', 'N', procedimento_pac_medico_w.ie_proc_princ);			
		else
			intpd_processar_atributo(reg_integracao_p, 'IE_PROC_PRINC', 'N', 'N', procedimento_pac_medico_w.ie_proc_princ);
		end if;		
		if (c01_w.proctype = 'NL') then
			intpd_processar_atributo(reg_integracao_p, 'IE_PROC_ADICIONAL', 'S', 'N', procedimento_pac_medico_w.ie_proc_adicional);			
		else
			intpd_processar_atributo(reg_integracao_p, 'IE_PROC_ADICIONAL', 'N', 'N', procedimento_pac_medico_w.ie_proc_adicional);
		end if;
		
		if (upper(c01_w.notforgr) = 'TRUE') then
			intpd_processar_atributo(reg_integracao_p, 'IE_RELEVANTE_DRG', 'N', 'N', procedimento_pac_medico_w.ie_relevante_drg);
		else
			intpd_processar_atributo(reg_integracao_p, 'IE_RELEVANTE_DRG',  'S', 'N', procedimento_pac_medico_w.ie_relevante_drg);
		end if;
		
		intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO', clock_timestamp(), 'N', procedimento_pac_medico_w.dt_atualizacao);
		intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO', nm_usuario_p, 'N', procedimento_pac_medico_w.nm_usuario);
		
		if (coalesce(procedimento_pac_medico_w.nr_sequencia::text, '') = '') then
			begin
			select	nextval('procedimento_pac_medico_seq')
			into STRICT	procedimento_pac_medico_w.nr_sequencia
			;

            begin
            select nr_seq_episodio
            into STRICT nr_seq_episodio_w
            from atendimento_paciente
            where nr_atendimento = atend_paciente_unidade_w.nr_atendimento;
            exception
            when others then
                nr_seq_episodio_w := null;
            end;

			intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO_NREC', clock_timestamp(), 'N', procedimento_pac_medico_w.dt_atualizacao_nrec);
			intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO_NREC', nm_usuario_p, 'N', procedimento_pac_medico_w.nm_usuario_nrec);
			intpd_processar_atributo(reg_integracao_p, 'IE_SITUACAO', 'A', 'N', procedimento_pac_medico_w.ie_situacao);
			intpd_processar_atributo(reg_integracao_p, 'IE_ORIGEM_PROCED', 11, 'N', procedimento_pac_medico_w.ie_origem_proced);
			intpd_processar_atributo(reg_integracao_p, 'QT_PROCEDIMENTO', 1, 'N', procedimento_pac_medico_w.qt_procedimento);
			intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_EPISODIO', nr_seq_episodio_w, 'N', procedimento_pac_medico_w.nr_seq_episodio);
			intpd_processar_atributo(reg_integracao_p, 'IE_SIST_EXT_ORIGEM', '3M', 'N', procedimento_pac_medico_w.ie_sist_ext_origem);
			
			if (reg_integracao_p.qt_reg_log = 0) then
				insert into procedimento_pac_medico values (procedimento_pac_medico_w.*);

				if (get_submit_proc = 'S') then	
					CALL liberar_proc_pac_medic(procedimento_pac_medico_w.nr_sequencia, nm_usuario_p);	
				end if;
	
				CALL insert_proc_adic_ops(
						procedimento_pac_medico_w.nr_seq_proc_interno,
						c00_w.cd_convenio,
						c00_w.cd_categoria,
						c00_w.cd_plano_convenio,
						obter_pf_usuario(nm_usuario_p, 'C'),
						obter_idade_pf(c00_w.cd_pessoa_fisica, clock_timestamp(), 'A'),
						nm_usuario_p,
						procedimento_pac_medico_w.nr_atendimento,
						procedimento_pac_medico_w.cd_departamento,
						procedimento_pac_medico_w.cd_setor_atendimento,
						procedimento_pac_medico_w.nr_seq_episodio,
						get_submit_proc,
						'N');				
			end if;
			end;
		else
			begin
			reg_integracao_p.nm_tabela	:=	'PROCEDIMENTO_PACIENTE';
			intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_ATEPACU', nr_seq_atepacu_w, 'N', procedimento_paciente_w.nr_seq_atepacu);
			--procedimento_paciente_w.nr_seq_atepacu		:=	procedimento_pac_medico_w.nr_seq_atepacu;
			procedimento_paciente_w.cd_setor_atendimento	:=	procedimento_pac_medico_w.cd_setor_atendimento;
			--procedimento_paciente_w.cd_departamento		:=	procedimento_pac_medico_w.cd_departamento;
			procedimento_paciente_w.ie_lado			:=	procedimento_pac_medico_w.ie_lado;
			procedimento_paciente_w.dt_procedimento		:=	procedimento_pac_medico_w.dt_procedimento;
			intpd_processar_atributo(reg_integracao_p, 'DT_INICIO_PROCEDIMENTO',
					to_date(c01_w.opdate, 'YYYYMMDDHH24MISS'), 'N', procedimento_paciente_w.dt_inicio_procedimento);
			intpd_processar_atributo(reg_integracao_p, 'DT_FINAL_PROCEDIMENTO',
					to_date(c01_w.opdateend, 'YYYYMMDDHH24MISS'), 'N', procedimento_paciente_w.dt_final_procedimento);
			--procedimento_paciente_w.dt_inicio_procedimento	:=	procedimento_pac_medico_w.dt_inicio_procedimento;
			--procedimento_paciente_w.dt_final_procedimento	:=	procedimento_pac_medico_w.dt_final_procedimento;
			procedimento_paciente_w.ie_proc_princ_atend	:=	procedimento_pac_medico_w.ie_proc_princ;
			procedimento_paciente_w.dt_atualizacao		:=	procedimento_pac_medico_w.dt_atualizacao;
			procedimento_paciente_w.nm_usuario		:=	procedimento_pac_medico_w.nm_usuario;
			
			if (reg_integracao_p.qt_reg_log = 0) then
				update	procedimento_pac_medico
				set	row = procedimento_pac_medico_w
				where	nr_sequencia		= procedimento_pac_medico_w.nr_sequencia;
				
				update	procedimento_paciente
				set	row = procedimento_paciente_w
				where	nr_sequencia	= procedimento_paciente_w.nr_sequencia;
			end if;
			end;
		end if;
		
		if (coalesce(c01_w.note,'NULL') <> 'NULL') then
			begin
			reg_integracao_p.nm_tabela	:= 'PROC_PAC_MEDICO_INF_ADIC';
			
			if (position('|' in c01_w.procid) > 0) then
				proc_pac_medico_inf_adic_w.nr_sequencia	:=	somente_numero(obter_valor_campo_separador(c01_w.procid, 2, '|'));
			end if;
			
			begin
			select	*
			into STRICT	proc_pac_medico_inf_adic_w
			from	proc_pac_medico_inf_adic a
			where	nr_seq_proc_pac_med = procedimento_pac_medico_w.nr_sequencia
			and	nr_sequencia = proc_pac_medico_inf_adic_w.nr_sequencia;			
			exception
			when others then
				proc_pac_medico_inf_adic_w	:=	null;
			end;
			
			intpd_processar_atributo(reg_integracao_p, 'DS_PROCEDIMENTO', c01_w.note, 'N', proc_pac_medico_inf_adic_w.ds_procedimento);
			intpd_processar_atributo(reg_integracao_p, 'DS_TITULO', c01_w.note, 'N', proc_pac_medico_inf_adic_w.ds_titulo);
			
			intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO', clock_timestamp(), 'N', proc_pac_medico_inf_adic_w.dt_atualizacao);
			intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO', nm_usuario_p, 'N', proc_pac_medico_inf_adic_w.nm_usuario);
			
			if (coalesce(proc_pac_medico_inf_adic_w.nr_sequencia::text, '') = '') then
				begin
				intpd_processar_atributo(reg_integracao_p, 'CD_PROFISSIONAL', nm_usuario_p, 'N', proc_pac_medico_inf_adic_w.cd_profissional);
				intpd_processar_atributo(reg_integracao_p, 'DT_REGISTRO', clock_timestamp(), 'N', proc_pac_medico_inf_adic_w.dt_registro);
				intpd_processar_atributo(reg_integracao_p, 'IE_SITUACAO', 'A', 'N', proc_pac_medico_inf_adic_w.ie_situacao);
				intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_PROC_PAC_MED',
					procedimento_pac_medico_w.nr_sequencia, 'N', proc_pac_medico_inf_adic_w.nr_seq_proc_pac_med);
				
				select	nextval('proc_pac_medico_inf_adic_seq')
				into STRICT	proc_pac_medico_inf_adic_w.nr_sequencia
				;
				
				intpd_processar_atributo(reg_integracao_p, 'DT_LIBERACAO', clock_timestamp(), 'N', proc_pac_medico_inf_adic_w.dt_liberacao);
				
				if (reg_integracao_p.qt_reg_log = 0) then
					insert into proc_pac_medico_inf_adic values (proc_pac_medico_inf_adic_w.*);
				end if;
				end;
			else
				if (reg_integracao_p.qt_reg_log = 0) then
					update	proc_pac_medico_inf_adic
					set	row = proc_pac_medico_inf_adic_w
					where	nr_seq_proc_pac_med = procedimento_pac_medico_w.nr_sequencia
					and	nr_sequencia = proc_pac_medico_inf_adic_w.nr_sequencia;
				end if;
			end if;
			end;
		end if;
		end;
	end if;
	
	if (coalesce(c01_w.modtype,'X') <> 'R') then
		CALL kodip_pck.generate_items_reg(
			'PROC',
			procedimento_pac_medico_w.dt_procedimento, 
			procedimento_pac_medico_w.cd_procedimento, 
			procedimento_pac_medico_w.ie_origem_proced, 
			null, 
			c01_w.source, 
			null, 
			procedimento_paciente_w.nr_sequencia);
	end if;
	
	if (reg_integracao_p.qt_reg_log > 0) then
		rollback;
	end if;
	
	reg_integracao_p := kodip_pck.record_log(nr_seq_episodio_p, reg_integracao_p);
	commit;
	exception
	when others then
		begin
		ds_erro_w	:=	substr('Error reading c03-Procedures/Proc: ' || sqlerrm || chr(13) || chr(10) ||
						dbms_utility.format_error_backtrace,1, 2000);
		CALL CALL kodip_pck.incluir_log(reg_integracao_p, ds_erro_w, 'KODIP-RECEIVE', 'W');
		rollback;
		end;
	end;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE kodip_pck.receive_procedures ( procedures_p xml, nr_seq_episodio_p bigint, nr_atendimento_p bigint, nm_usuario_p text, reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, departments_p xml) FROM PUBLIC;
