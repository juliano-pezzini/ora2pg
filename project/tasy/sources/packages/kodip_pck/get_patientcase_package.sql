-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------
'PatientCase'
*/
CREATE OR REPLACE FUNCTION kodip_pck.get_patientcase ( nr_seq_documento_p text, nr_atendimento_p bigint) RETURNS SETOF T_PATIENTCASE AS $body$
DECLARE


_ora2pg_r RECORD;
nr_seq_episodio_w		episodio_paciente.nr_sequencia%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
		
r_patientcase_w		r_patientcase;

c01 CURSOR FOR
SELECT	ap.nr_seq_episodio,
	ep.nr_episodio,
	ap.nr_atendimento,
	ap.dt_entrada,
	ap.dt_saida_real,
	ap.dt_alta,
	ap.nr_seq_tipo_admissao_fat,
	ap.nr_seq_classificacao,
	ap.nr_seq_queixa,
	ap.cd_motivo_alta,
	ap.cd_pessoa_fisica,
	ish_obter_tempo_respiracao(ap.nr_seq_episodio) qt_hora_respiracao
from	episodio_paciente ep,
	atendimento_paciente ap
where	ep.nr_sequencia = ap.nr_seq_episodio
and	ap.nr_atendimento = nr_atendimento_w;

c01_w c01%rowtype;

c02 CURSOR FOR
SELECT	a.*,
	obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'DIA') qt_idade_dia,
	obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A') qt_idade_ano
from	pessoa_fisica a
where	a.cd_pessoa_fisica = c01_w.cd_pessoa_fisica;

c02_w	c02%rowtype;

c03 CURSOR FOR
SELECT	*
from	person_name
where	nr_sequencia = c02_w.nr_seq_person_name;

c03_w	c03%rowtype;


BEGIN
nr_seq_episodio_w	:=	somente_numero(nr_seq_documento_p);
nr_atendimento_w	:=	nr_atendimento_p;
SELECT * FROM kodip_pck.inicializacao(nr_seq_episodio_w, nr_atendimento_w, reg_integracao_w) INTO STRICT _ora2pg_r;
 nr_seq_episodio_w := _ora2pg_r.nr_seq_episodio_p; nr_atendimento_w := _ora2pg_r.nr_atendimento_p; reg_integracao_w := _ora2pg_r.reg_integracao_p;

reg_integracao_w.nm_elemento	:= 'PatientCase';

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	r_patientcase_w	:=	null;
	reg_integracao_w.nm_tabela	:= 'ATENDIMENTO_PACIENTE';
	intpd_processar_atrib_envio(reg_integracao_w, 'DT_ENTRADA', 'AdmDate', 'N', to_char(c01_w.dt_entrada, 'YYYYMMDD'), 'N', r_patientcase_w.admdate);
	
	
	if (c01_w.nr_seq_classificacao IS NOT NULL AND c01_w.nr_seq_classificacao::text <> '') or (c01_w.nr_seq_queixa IS NOT NULL AND c01_w.nr_seq_queixa::text <> '') then
		intpd_processar_atrib_envio(reg_integracao_w, 'ADMMODE', 'AdmMode', 'N', c01_w.nr_seq_classificacao || '|' || c01_w.nr_seq_queixa, 'S', r_patientcase_w.admmode);
	else
		intpd_processar_atrib_envio(reg_integracao_w, 'ADMMODE', 'AdmMode', 'N', null, 'S', r_patientcase_w.admmode);
	end if;
	
	intpd_processar_atrib_envio(reg_integracao_w, 'NR_SEQ_CLASSIFICACAO', 'AdmModeGr', 'N', substr(r_patientcase_w.admmode,1,2), 'S', r_patientcase_w.admmodegr);
	intpd_processar_atrib_envio(reg_integracao_w,'CD_DEPARTAMENTO', 'CurrentDeptNum', 'N', kodip_pck.get_deptnum(c01_w.nr_atendimento), 'N', r_patientcase_w.currentdeptnum);
	intpd_processar_atrib_envio(reg_integracao_w, 'ENTRY', 'Entry', 'N', c01_w.nr_seq_tipo_admissao_fat, 'S', r_patientcase_w.entry);
	intpd_processar_atrib_envio(reg_integracao_w, 'REIMBTYPE', 'ReimbType', 'N', c01_w.nr_seq_tipo_admissao_fat, 'S', r_patientcase_w.reimbtype);
	intpd_processar_atrib_envio(reg_integracao_w, 'DT_ALTA', 'SepDate', 'N', to_char(c01_w.dt_alta, 'YYYYMMDD'), 'N', r_patientcase_w.sepdate);
	intpd_processar_atrib_envio(reg_integracao_w, 'CD_MOTIVO_ALTA', 'SepMode', 'N', c01_w.cd_motivo_alta, 'S', r_patientcase_w.sepmode);
	

	reg_integracao_w.nm_tabela	:= 'EPISODIO_PACIENTE';
	if (c01_w.nr_episodio > 0) then
		intpd_processar_atrib_envio(reg_integracao_w, 'NR_EPISODIO', 'CaseId', 'N', c01_w.nr_episodio, 'N', r_patientcase_w.caseid);
	else
		intpd_processar_atrib_envio(reg_integracao_w, 'NR_SEQUENCIA', 'CaseId', 'N', c01_w.nr_seq_episodio, 'N', r_patientcase_w.caseid);
	end if;
	
	intpd_processar_atrib_envio(reg_integracao_w, '', 'Hmv', 'N', c01_w.qt_hora_respiracao, 'N', r_patientcase_w.hmv);
	intpd_processar_atrib_envio(reg_integracao_w, 'Locked', 'Locked', 'N', 'TRUE', 'N', r_patientcase_w.locked);

	open c02;
	loop
	fetch c02 into	
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		reg_integracao_w.nm_tabela	:= 'PESSOA_FISICA';
		
		if (c02_w.qt_idade_dia < 366) then
			intpd_processar_atrib_envio(reg_integracao_w, 'QT_IDADE', 'AgeDays', 'N', c02_w.qt_idade_dia, 'N', r_patientcase_w.agedays);
		else
			intpd_processar_atrib_envio(reg_integracao_w, 'QT_IDADE', 'AgeYears', 'N', c02_w.qt_idade_ano, 'N', r_patientcase_w.ageyears);
		end if;
		
		intpd_processar_atrib_envio(reg_integracao_w, 'DT_NASCIMENTO', 'BirthDate', 'N', to_char(c02_w.dt_nascimento, 'YYYYMMDD'), 'N', r_patientcase_w.birthdate);
		intpd_processar_atrib_envio(reg_integracao_w, 'QT_ALTURA_CM', 'BodyHeight', 'N', c02_w.qt_altura_cm, 'N', r_patientcase_w.bodyheight);
		intpd_processar_atrib_envio(reg_integracao_w, 'QT_PESO', 'BodyWeight', 'N', c02_w.qt_peso, 'N', r_patientcase_w.bodyweight);
		intpd_processar_atrib_envio(reg_integracao_w, 'CD_PESSOA_FISICA', 'PatientId', 'N', c02_w.cd_pessoa_fisica, 'S', r_patientcase_w.patientid);
		intpd_processar_atrib_envio(reg_integracao_w, 'IE_SEXO', 'Sex', 'N', c02_w.ie_sexo, 'S', r_patientcase_w.sex);

		open c03;
		loop
		fetch c03 into	
			c03_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			reg_integracao_w.nm_tabela	:= 'PERSON_NAME';
			intpd_processar_atrib_envio(reg_integracao_w, 'DS_GIVEN_NAME', 'FName', 'N', c03_w.ds_given_name, 'N', r_patientcase_w.fname);
			intpd_processar_atrib_envio(reg_integracao_w, 'DS_FAMILY_NAME', 'LName', 'N', c03_w.ds_family_name, 'N', r_patientcase_w.lname);
			end;
		end loop;
		close c03;
		end;
	end loop;
	close c02;

	/*'
	Pending of Definition:
	--DeptTypeGr
	--GrCatVer
	--NotPaidDays
	--OccupDays
	--OtherwisePaidDays
	'*/
	
	RETURN NEXT r_patientcase_w;
	end;
end loop;
close c01;

reg_integracao_w := kodip_pck.record_log(nr_seq_episodio_w, reg_integracao_w);
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION kodip_pck.get_patientcase ( nr_seq_documento_p text, nr_atendimento_p bigint) FROM PUBLIC;
