-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE kodip_pck.receive_diagnoses ( diagnoses_p xml, departments_p xml, nr_seq_episodio_p bigint, nr_atendimento_p bigint, nm_usuario_p text, reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, diag_code_p INOUT text) AS $body$
DECLARE

		
diagnostico_medico_w		diagnostico_medico%rowtype;
diagnostico_doenca_w		diagnostico_doenca%rowtype;
diag_doenca_inf_adic_w		diag_doenca_inf_adic%rowtype;

cd_doenca_superior_w	diagnostico_doenca.cd_doenca_superior%type;
cd_estabelecimento_w 	atendimento_paciente.cd_estabelecimento%type;
cd_pessoa_fisica_w	atendimento_paciente.cd_pessoa_fisica%type;

ds_erro_w		varchar(4000);

c01 CURSOR FOR
SELECT	a.*,
	row_number() OVER () - 1 id
from	xmltable('/Diagnoses/Diag' passing diagnoses_p columns
		code 		varchar(10) path '@Code',
		codetext 	varchar(240) path '@CodeText', --pending
		diagid 		varchar(255) path '@DiagId', --pending
		creationdate 	varchar(20) path '@CreationDate',
		modtype 	varchar(1) path '@ModType',
		primsec 	varchar(1) path '@PrimSec',
		primdiagnum 	varchar(5) path '@PrimDiagNum',
		source 		varchar(10) path '@Source', --pending
		diagtypeflags 	varchar(40) path '@DiagTypeFlags',
		loc 		varchar(2) path '@Loc',
		deptnum 	varchar(10) path '@DeptNum', --pending
		note 		varchar(255) path '@Note', --pending
		notforgr 	varchar(10) path '@NotForGr', --pending
		diagsureness	varchar(40) path '@DiagSureness',
		texttype	varchar(15) path '@TextType') a; --pending
BEGIN
-- insere todos diagnosticos numa tabela temporaria devido a necessidade de tratamento dos diagnosticos filhos
for	c01_w in c01 loop
	insert into diagnostico_drg_w(nr_id, cid_code) values (c01_w.id, c01_w.code);
end loop;

select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	usuario
where	nm_usuario = nm_usuario_p;

select	max(cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from	atendimento_paciente a
where	nr_seq_episodio = nr_seq_episodio_p;

for	c01_w in c01 loop
	begin
	reg_integracao_p.nm_tabela	:=	'DIAGNOSTICO_DOENCA';
	diagnostico_doenca_w		:=	null;
	diag_doenca_inf_adic_w		:=	null;
	
	/*'Change type: Empty or U (Unchanged), M (Modified), A (Added), R (Removed);'*/

	if (c01_w.source = 'KIS') then
		begin
		diagnostico_doenca_w.nr_seq_interno := somente_numero(obter_valor_campo_separador(c01_w.diagid, 1, '|'));
		
		select	*
		into STRICT	diagnostico_doenca_w
		from	diagnostico_doenca
		where	nr_seq_interno = diagnostico_doenca_w.nr_seq_interno;
		
		exception
		when others then
			diagnostico_doenca_w	:=	null;
		end;
	end if;
	
	if	(c01_w.modtype = 'R' AND diagnostico_doenca_w.nr_seq_interno IS NOT NULL AND diagnostico_doenca_w.nr_seq_interno::text <> '') then
		begin
		update	diagnostico_doenca
		set	ie_situacao = 'I',
			nm_usuario_inativacao	= nm_usuario_p,
			dt_inativacao		= clock_timestamp(),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_interno		= diagnostico_doenca_w.nr_seq_interno;
		
		update	diagnostico_doenca
		set	ie_situacao = 'I',
			nm_usuario_inativacao	= nm_usuario_p,
			dt_inativacao		= clock_timestamp(),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_atendimento		= diagnostico_doenca_w.nr_atendimento
		and 	cd_doenca_superior 	= diagnostico_doenca_w.cd_doenca
		and 	dt_diagnostico		= diagnostico_doenca_w.dt_diagnostico;
		end;
	elsif	((c01_w.modtype = 'A') or (c01_w.modtype = 'M' AND diagnostico_doenca_w.nr_seq_interno IS NOT NULL AND diagnostico_doenca_w.nr_seq_interno::text <> '')) then
		begin
		intpd_processar_atributo(reg_integracao_p, 'DT_DIAGNOSTICO', to_date(c01_w.creationdate, 'YYYYMMDDHH24MISS'), 'N', diagnostico_doenca_w.dt_diagnostico);
		intpd_processar_atributo(reg_integracao_p, 'NR_ATENDIMENTO', coalesce(diagnostico_doenca_w.nr_atendimento, nr_atendimento_p), 'N', diagnostico_doenca_w.nr_atendimento);
		intpd_processar_atributo(reg_integracao_p, 'CD_DOENCA', c01_w.code, 'N', diagnostico_doenca_w.cd_doenca);
		
		if (coalesce(diagnostico_doenca_w.nr_seq_interno::text, '') = '') then
			begin
			select	*
			into STRICT	diagnostico_doenca_w
			from	diagnostico_doenca
			where	nr_atendimento	= diagnostico_doenca_w.nr_atendimento
			and 	cd_doenca 	= diagnostico_doenca_w.cd_doenca
			and 	dt_diagnostico	= diagnostico_doenca_w.dt_diagnostico;
			
			diagnostico_doenca_w.ie_situacao		:=	'A';
			diagnostico_doenca_w.nm_usuario_inativacao	:=	null;
			diagnostico_doenca_w.dt_inativacao		:=	null;
			exception
			when others then
				diagnostico_doenca_w.nr_seq_interno	:=	null;
			end;
		end if;
		
		if (c01_w.texttype = 'H') then
			intpd_processar_atributo(reg_integracao_p, 'DS_DIAGNOSTICO', c01_w.codetext, 'N', diagnostico_doenca_w.ds_diagnostico);
		end if;		
		
		intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_ATEPACU', kodip_pck.get_atepacu(c01_w.deptnum, departments_p), 'N', diagnostico_doenca_w.nr_seq_atepacu);
		intpd_processar_atributo(reg_integracao_p, 'IE_STATUS_DIAG', c01_w.diagsureness, 'S', diagnostico_doenca_w.ie_status_diag);
		intpd_processar_atributo(reg_integracao_p, 'IE_LADO', c01_w.loc, 'S', diagnostico_doenca_w.ie_lado);
		
		if (upper(c01_w.notforgr) = 'TRUE') then
			intpd_processar_atributo(reg_integracao_p, 'IE_RELEVANTE_DRG', 'N', 'N', diagnostico_doenca_w.ie_relevante_drg);
		else
			intpd_processar_atributo(reg_integracao_p, 'IE_RELEVANTE_DRG',  'S', 'N', diagnostico_doenca_w.ie_relevante_drg);
		end if;
		
		select	max(cid_code)
		into STRICT 	cd_doenca_superior_w
		from 	diagnostico_drg_w
		where 	nr_id = c01_w.primdiagnum;
		
		intpd_processar_atributo(reg_integracao_p, 'CD_DOENCA_SUPERIOR', cd_doenca_superior_w, 'N', diagnostico_doenca_w.cd_doenca_superior);
		
		intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO', clock_timestamp(), 'N', diagnostico_doenca_w.dt_atualizacao);
		intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO', nm_usuario_p, 'N', diagnostico_doenca_w.nm_usuario);
		
		begin
		select  *
		into STRICT    diagnostico_medico_w
		from    diagnostico_medico
		where   nr_atendimento = diagnostico_doenca_w.nr_atendimento
		and 	dt_diagnostico = diagnostico_doenca_w.dt_diagnostico  LIMIT 1;
		exception
		when others then
			diagnostico_medico_w	:=	null;
		end;
		
		if (coalesce(diagnostico_medico_w.nr_atendimento::text, '') = '') then
			begin
			reg_integracao_p.nm_tabela	:= 'DIAGNOSTICO_MEDICO';
			
			select  max(cd_medico_atendimento)
			into STRICT    diagnostico_medico_w.cd_medico
			from    atendimento_paciente
			where   nr_atendimento = diagnostico_doenca_w.nr_atendimento;
			
			intpd_processar_atributo(reg_integracao_p, 'CD_MEDICO_ATENDIMENTO',
					diagnostico_medico_w.cd_medico, 'N', diagnostico_medico_w.cd_medico);
			intpd_processar_atributo(reg_integracao_p, 'DT_DIAGNOSTICO', diagnostico_doenca_w.dt_diagnostico, 'N', diagnostico_medico_w.dt_diagnostico);
			intpd_processar_atributo(reg_integracao_p, 'IE_TIPO_DIAGNOSTICO', 2, 'N', diagnostico_medico_w.ie_tipo_diagnostico);
			intpd_processar_atributo(reg_integracao_p, 'NR_ATENDIMENTO', diagnostico_doenca_w.nr_atendimento, 'N', diagnostico_medico_w.nr_atendimento);
			intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO', nm_usuario_p, 'N', diagnostico_medico_w.nm_usuario);
			intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO', clock_timestamp(), 'N', diagnostico_medico_w.dt_atualizacao);
			
			if (reg_integracao_p.qt_reg_log = 0) then
				insert into diagnostico_medico values (diagnostico_medico_w.*);
			end if;
			end;
		end if;
		
		if (coalesce(diagnostico_doenca_w.nr_seq_interno::text, '') = '') then
			begin
			select	nextval('diagnostico_doenca_seq')
			into STRICT	diagnostico_doenca_w.nr_seq_interno
			;
			
			intpd_processar_atributo(reg_integracao_p, 'IE_SIST_EXT_ORIGEM', '3M', 'N', diagnostico_doenca_w.ie_sist_ext_origem);
			intpd_processar_atributo(reg_integracao_p, 'IE_SITUACAO', 'A', 'N', diagnostico_doenca_w.ie_situacao);
			
			if (reg_integracao_p.qt_reg_log = 0) then
				insert into diagnostico_doenca values (diagnostico_doenca_w.*);
				
				if (get_submit_diag = 'S') then
					CALL liberar_diagnostico_doenca(
						diagnostico_doenca_w.nm_usuario,
						diagnostico_doenca_w.nr_atendimento,
						diagnostico_doenca_w.nr_seq_interno);
				end if;
			end if;
			end;
		else
			if (reg_integracao_p.qt_reg_log = 0) then
				update	diagnostico_doenca
				set	row = diagnostico_doenca_w
				where	nr_seq_interno = diagnostico_doenca_w.nr_seq_interno;
			end if;
		end if;
					
		if (coalesce(c01_w.note,'NULL') <> 'NULL') then
			begin
			reg_integracao_p.nm_tabela	:= 'DIAG_DOENCA_INF_ADIC';
			
			if (position('|' in c01_w.diagid) > 0) then
				diag_doenca_inf_adic_w.nr_sequencia	:=	somente_numero(obter_valor_campo_separador(c01_w.diagid, 2, '|'));
			end if;
			
			begin
			select	*
			into STRICT	diag_doenca_inf_adic_w
			from	diag_doenca_inf_adic
			where	nr_seq_diag_doenca = diagnostico_doenca_w.nr_seq_interno
			and	nr_sequencia = diag_doenca_inf_adic_w.nr_sequencia;
			exception
			when others then
				diag_doenca_inf_adic_w	:=	null;
			end;
			
			intpd_processar_atributo(reg_integracao_p, 'DS_DIAGNOSTICO', c01_w.note, 'N', diag_doenca_inf_adic_w.ds_diagnostico);
			intpd_processar_atributo(reg_integracao_p, 'DS_TITULO', c01_w.note, 'N', diag_doenca_inf_adic_w.ds_titulo);
			
			intpd_processar_atributo(reg_integracao_p, 'DT_ATUALIZACAO', clock_timestamp(), 'N', diag_doenca_inf_adic_w.dt_atualizacao);
			intpd_processar_atributo(reg_integracao_p, 'NM_USUARIO', nm_usuario_p, 'N', diag_doenca_inf_adic_w.nm_usuario);
			
			if (coalesce(diag_doenca_inf_adic_w.nr_sequencia::text, '') = '') then
				begin
				intpd_processar_atributo(reg_integracao_p, 'CD_PROFISSIONAL',
					obter_dados_usuario_opcao(nm_usuario_p, 'C'), 'N', diag_doenca_inf_adic_w.cd_profissional);
				intpd_processar_atributo(reg_integracao_p, 'DT_REGISTRO', clock_timestamp(), 'N', diag_doenca_inf_adic_w.dt_registro);
				intpd_processar_atributo(reg_integracao_p, 'IE_SITUACAO', 'A', 'N', diag_doenca_inf_adic_w.ie_situacao);
				intpd_processar_atributo(reg_integracao_p, 'NR_SEQ_DIAG_DOENCA',
					diagnostico_doenca_w.nr_seq_interno, 'N', diag_doenca_inf_adic_w.nr_seq_diag_doenca);
				
				select	nextval('diag_doenca_inf_adic_seq')
				into STRICT	diag_doenca_inf_adic_w.nr_sequencia
				;
				
				intpd_processar_atributo(reg_integracao_p, 'DT_LIBERACAO', clock_timestamp(), 'N', diag_doenca_inf_adic_w.dt_liberacao);
				
				if (reg_integracao_p.qt_reg_log = 0) then
					insert into diag_doenca_inf_adic values (diag_doenca_inf_adic_w.*);
				end if;
				end;
			else
				if (reg_integracao_p.qt_reg_log = 0) then
					update	diag_doenca_inf_adic
					set	row = diag_doenca_inf_adic_w
					where	nr_seq_diag_doenca = diagnostico_doenca_w.nr_seq_interno
					and	nr_sequencia = diag_doenca_inf_adic_w.nr_sequencia;
				end if;
			end if;
			end;
		end if;

		if (reg_integracao_p.qt_reg_log = 0) then
			CALL inserir_classif_diagnostico(
				c01_w.diagtypeflags,
				cd_estabelecimento_w, 
				nm_usuario_p, 
				nr_atendimento_p, 
				cd_pessoa_fisica_w, 
				diagnostico_doenca_w.cd_doenca, 
				diagnostico_doenca_w.dt_diagnostico);
		end if;
		end;
	end if;
	
	if (coalesce(c01_w.modtype,'X') <> 'R') then
		CALL kodip_pck.generate_items_reg('CID', diagnostico_doenca_w.dt_diagnostico, null, null, diagnostico_doenca_w.cd_doenca, c01_w.source, null, null);
	end if;
	
	reg_integracao_p := kodip_pck.record_log(nr_seq_episodio_p, reg_integracao_p);
	
	if (reg_integracao_p.qt_reg_log > 0) then
		rollback;
	end if;
	
	commit;
	exception
	when others then
		begin
		ds_erro_w	:=	substr('Error reading c01-Diagnoses/Diag: ' || sqlerrm || chr(13) || chr(10) ||
						dbms_utility.format_error_backtrace,1, 2000);
		CALL CALL kodip_pck.incluir_log(reg_integracao_p, ds_erro_w, 'KODIP-RECEIVE', 'W');
		rollback;
		end;
	end;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE kodip_pck.receive_diagnoses ( diagnoses_p xml, departments_p xml, nr_seq_episodio_p bigint, nr_atendimento_p bigint, nm_usuario_p text, reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, diag_code_p INOUT text) FROM PUBLIC;
