-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------
'Diag'
*/
CREATE OR REPLACE FUNCTION kodip_pck.get_diag ( nr_seq_documento_p text, nr_atendimento_p bigint) RETURNS SETOF T_DIAG AS $body$
DECLARE


_ora2pg_r RECORD;
nr_seq_episodio_w		episodio_paciente.nr_sequencia%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
ds_diagnostico_w		varchar(32000);

r_diag_w			r_diag;

c01 CURSOR FOR
SELECT	a.nr_seq_episodio,
	dd.nr_atendimento,
	dd.cd_doenca,
	cd.cd_doenca_cid,
	cd.ds_doenca_cid,
	dd.dt_diagnostico,
	dd.ie_lado,
	dd.nr_seq_interno,
	dd.ie_status_diag,
	CASE WHEN dd.ie_relevante_drg='N' THEN 'true' END  ie_not_for_drg,
	dd.ds_diagnostico,
	dd.nr_seq_atepacu
from	atendimento_paciente a,
	diagnostico_doenca dd,
	cid_doenca cd
where	a.nr_atendimento = dd.nr_atendimento
and	cd.cd_doenca_cid = dd.cd_doenca
and	(dd.dt_liberacao IS NOT NULL AND dd.dt_liberacao::text <> '')
and	dd.ie_situacao = 'A'
and	coalesce(dd.nm_usuario_inativacao::text, '') = ''
and	a.nr_seq_episodio = nr_seq_episodio_w;

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	diag_doenca_inf_adic
where	nr_seq_diag_doenca = c01_w.nr_seq_interno
and	ie_situacao = 'A'
order by nr_sequencia;

c02_w	c02%rowtype;


BEGIN
nr_seq_episodio_w	:=	somente_numero(nr_seq_documento_p);
nr_atendimento_w	:=	nr_atendimento_p;
SELECT * FROM kodip_pck.inicializacao(nr_seq_episodio_w, nr_atendimento_w, reg_integracao_w) INTO STRICT _ora2pg_r;
 nr_seq_episodio_w := _ora2pg_r.nr_seq_episodio_p; nr_atendimento_w := _ora2pg_r.nr_atendimento_p; reg_integracao_w := _ora2pg_r.reg_integracao_p;
reg_integracao_w.nm_elemento	:= 'Diag';

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	r_diag_w	:=	null;
	
	if (coalesce(c01_w.ds_diagnostico,'NULL') <> 'NULL') then
		begin
		reg_integracao_w.nm_tabela	:= 'DIAGNOSTICO_DOENCA';
		intpd_processar_atrib_envio(reg_integracao_w, 'DS_DIAGNOSTICO', 'CodeText', 'N', c01_w.ds_diagnostico, 'N', r_diag_w.codetext);
		end;
	else
		reg_integracao_w.nm_tabela	:= 'CID_DOENCA';
		intpd_processar_atrib_envio(reg_integracao_w, 'DS_DOENCA_CID', 'CodeText', 'N', c01_w.ds_doenca_cid, 'N', r_diag_w.codetext);
	end if;

	reg_integracao_w.nm_tabela	:= 'DIAGNOSTICO_DOENCA';
	intpd_processar_atrib_envio(reg_integracao_w, 'CD_DOENCA', 'Code', 'N', c01_w.cd_doenca, 'N', r_diag_w.code);	
	intpd_processar_atrib_envio(reg_integracao_w, 'DT_DIAGNOSTICO', 'CreationDate', 'N', to_char(c01_w.dt_diagnostico, 'YYYYMMDDHH24MISS'), 'N', r_diag_w.creationdate);
	intpd_processar_atrib_envio(reg_integracao_w, 'NR_SEQ_ATEPACU', 'DeptNum', 'N', kodip_pck.get_deptnum(c01_w.nr_atendimento, c01_w.nr_seq_atepacu, c01_w.dt_diagnostico), 'N', r_diag_w.deptnum);
	
	intpd_processar_atrib_envio(reg_integracao_w, 'IE_STATUS_DIAG', 'DiagSureness', 'N', c01_w.ie_status_diag, 'S', r_diag_w.diagsureness);
	intpd_processar_atrib_envio(reg_integracao_w, 'DiagTypeFlags', 'DiagTypeFlags', 'N', retornar_classif_diagnostico(c01_w.nr_seq_episodio, c01_w.cd_doenca_cid, c01_w.dt_diagnostico), 'N', r_diag_w.diagtypeflags);
	intpd_processar_atrib_envio(reg_integracao_w, 'IE_LADO', 'Loc', 'N', c01_w.ie_lado, 'S', r_diag_w.loc);
	intpd_processar_atrib_envio(reg_integracao_w, 'IE_RELEVANTE_DRG', 'NotForGr', 'N', c01_w.ie_not_for_drg, 'N', r_diag_w.notforgr);
	
	open c02;
	loop
	fetch c02 into	
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		begin
		select	c02_w.ds_diagnostico
		into STRICT	ds_diagnostico_w
		;
		exception
		when others then
			ds_diagnostico_w	:=	null;
		end;
		
		reg_integracao_w.nm_tabela	:= 'DIAG_DOENCA_INF_ADIC';
		intpd_processar_atrib_envio(reg_integracao_w, 'DS_DIAGNOSTICO', 'Note', 'N', coalesce(ds_diagnostico_w, c02_w.ds_titulo), 'N', r_diag_w.note);
		exit;
		end;
	end loop;
	close c02;
	
	intpd_processar_atrib_envio(reg_integracao_w, 'NR_SEQ_INTERNO', 'DiagId', 'N', c01_w.nr_seq_interno || '|' || c02_w.nr_sequencia, 'N', r_diag_w.diagid);
	
	/*'
	Pending of Definition:
	--CatVer
	'*/
	RETURN NEXT r_diag_w;
	end;
end loop;
close c01;

reg_integracao_w := kodip_pck.record_log(nr_seq_episodio_w, reg_integracao_w);
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION kodip_pck.get_diag ( nr_seq_documento_p text, nr_atendimento_p bigint) FROM PUBLIC;
