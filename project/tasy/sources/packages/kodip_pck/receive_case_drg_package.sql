-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE kodip_pck.receive_case_drg ( reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, nr_seq_episodio_p bigint, grouperresult_p xml, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



ds_erro_w			varchar(4000);
episodio_drg_w 		bigint;
dt_ref_drg_w			timestamp;
code_drg_w    		bigint;
vl_adicional_w		episodio_paciente_drg.vl_adicional%type;
vl_desconto_w		episodio_paciente_drg.vl_desconto%type;
x			bigint;

-- resultado drg
c01 CURSOR FOR
SELECT	*
from	xmltable('/GrRes/GrouperResult' passing  grouperresult_p columns
		drg 			varchar(15) path '@Drg',
		drgtext 		varchar(2000) path '@DrgText',
		drgtypecw 		varchar(5) path '@DRGTypeCw',
		cwtstd 			varchar(16) path '@CwtStd',
		baserate 		varchar(16) path '@Baserate',
		drgpricestd 		varchar(16) path '@DrgPriceStd',
		drgpriceadj 		varchar(16) path '@DrgPriceAdj',
		htppriceadjperday 	varchar(16) path '@HtpPriceAdjPerDay',
		ltppriceadjperday 	varchar(16) path '@LtpPriceAdjPerDay',
		daysexchtp 		varchar(16) path '@DaysExcHtp',
		daysbelowltp 		varchar(16) path '@DaysBelowLtp',
		averlos			varchar(16) path '@AverLos',
		ltp 			varchar(16) path '@Ltp',
		htp 			varchar(16) path '@Htp',
		zetotalprice 		varchar(16) path '@ZeTotalPrice',
		cwteff 			varchar(16) path '@CwtEff');

c01_w          c01%rowtype;			


BEGIN
reg_integracao_p := kodip_pck.receive_ze_procedures(reg_integracao_p, nr_seq_episodio_p, grouperresult_p, nr_atendimento_p, nm_usuario_p);
reg_integracao_p := kodip_pck.clear_case_drg(reg_integracao_p, nr_seq_episodio_p, nm_usuario_p);

-- insere resultado do drg no case
open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	select	coalesce(max(nr_sequencia) + 1, 1)
	into STRICT		episodio_drg_w
	from	episodio_paciente_drg;
	
	select	coalesce(obter_data_referencia_proc(nr_atendimento_p),clock_timestamp())
	into STRICT		dt_ref_drg_w
	;

	select	max(nr_sequencia)
	into STRICT		code_drg_w
	from	drg_procedimento
	where	cd_drg = c01_w.drg
	and	dt_ref_drg_w between coalesce(dt_inicio_vigencia,dt_ref_drg_w) and coalesce(dt_final_vigencia,dt_ref_drg_w+1);

	if (coalesce(code_drg_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1066234);
	end if;

	if (to_number(c01_w.drgpriceadj, '999999999999.9999') > 0) then
		vl_adicional_w := to_number(c01_w.drgpriceadj, '999999999999.9999');
		vl_desconto_w := 0;
	else
		vl_desconto_w := to_number(c01_w.drgpriceadj, '999999999999.9999');
		vl_adicional_w := 0;
	end if;

	insert into episodio_paciente_drg(nr_sequencia,
		nr_seq_episodio_paciente,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_drg_proc,
		ie_tipo_drg,
		tx_departamento,
		vl_base,
		vl_liquido,
		vl_desconto,
		vl_adicional,
		vl_adicional_dia,
		vl_desconto_dia,
		qt_dias_excedido,
		qt_dias_abaixo,
		qt_estadia_drg,
		qt_estadia_min,
		qt_estadia_max,
		vl_taxa,
		tx_ajuste,
		ie_situacao)
	values (episodio_drg_w,
		nr_seq_episodio_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		code_drg_w,
		obter_conversao_interna_int(null, 'episodio_paciente_drg', 'ie_tipo_drg', c01_w.drgtypecw,'3M'),
		to_number(c01_w.cwtstd, '999999999999.9999'),
		to_number(c01_w.baserate, '999999999999.9999'),
		to_number(c01_w.drgpricestd, '999999999999.9999'),
		vl_desconto_w,
		vl_adicional_w,
		to_number(c01_w.htppriceadjperday, '999999999999.9999'),
		to_number(c01_w.ltppriceadjperday, '999999999999.9999'),
		to_number(c01_w.daysexchtp, '999999999999.9999'),
		to_number(c01_w.daysbelowltp, '999999999999.9999'),
		to_number(c01_w.averlos, '999999999999.9999'),
		to_number(c01_w.ltp, '999999999999.9999'),
		to_number(c01_w.htp, '999999999999.9999'),
		to_number(c01_w.zetotalprice, '999999999999.9999'),
		to_number(c01_w.cwteff, '999999999999.9999'),
		'A');
		
	CALL billing_i18n_pck.set_inativar_drg('N');

	CALL gerar_drg_proc_pac_conta(nr_atendimento_p, nr_seq_episodio_p, episodio_drg_w, null, nm_usuario_p);

	if (current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens.count > 0) then

		x := 0;
		for 	x in 0..t_reg_itens_w.count -1 loop

			insert into episodio_paciente_drg_item(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_pac_drg,
				ie_tipo_item,
				cd_doenca,
				ie_origem_item,
				cd_procedimento,
				ie_origem_proced,
				dt_item,
				qt_horas_resp,
				nr_seq_propaci)
			values (	nextval('episodio_paciente_drg_item_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				episodio_drg_w,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].ie_tipo_item,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].cd_doenca,
				CASE WHEN current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].ie_origem_item='KIS' THEN 'TASY'  ELSE '3MKODIP' END ,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].cd_procedimento,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].ie_origem_proced,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].dt_item,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].qt_horas_resp,
				current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens[x].nr_seq_propaci);

		end loop;

	end if;
	commit;
	exception
	when others then
		begin
		ds_erro_w	:=	substr('Error reading c01-GrRes/GrouperResult: ' || sqlerrm || chr(13) || chr(10) ||
						dbms_utility.format_error_backtrace,1, 2000);
		CALL CALL kodip_pck.incluir_log(reg_integracao_p, ds_erro_w, 'KODIP-RECEIVE', 'W');
		rollback;
		end;
	end;
end loop;
close c01;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE kodip_pck.receive_case_drg ( reg_integracao_p INOUT gerar_int_padrao.reg_integracao_conv, nr_seq_episodio_p bigint, grouperresult_p xml, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;
