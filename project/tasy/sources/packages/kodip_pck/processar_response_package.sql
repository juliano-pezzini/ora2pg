-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE kodip_pck.processar_response ( xml_p text) AS $body$
DECLARE


_ora2pg_r RECORD;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
xml_w				xml;

nr_seq_episodio_w		atendimento_paciente.nr_seq_episodio%type;
nr_atendimento_w    		atendimento_paciente.nr_atendimento%type;
nm_usuario_w		      	varchar(15);

diag_code_w			varchar(30);
ds_erro_w			varchar(4000);
ie_status_w			varchar(15);

c001 CURSOR FOR
SELECT	*
from	xmltable('/PrCtxContainer/PrCtx' passing xml_w columns
		userid		varchar(15) path '@UserId',
		patcasea	xml path 'PatCaseA',
		cctxa		xml path 'CCtxA') a;

c01 CURSOR(patcasea xml) FOR
SELECT	*
from	xmltable('/PatCaseA/PatientCase' passing patcasea columns
		caseid			varchar(15) path '@CaseId',
		hmv				varchar(10) path '@Hmv',
		diagnoses		xml path 'Diagnoses',
		procedures		xml path 'Procedures',
		departments		xml path 'Departments',
		grres			xml path 'GrRes',
		prresult			xml path 'PrResult');

c02 CURSOR(cctxa xml) FOR
SELECT	*
from	xmltable('/CCtxA/CCtx' passing cctxa columns
		codingcanceled		varchar(15)	 path '@CodingCanceled',
		codingcatver		varchar(255)	 path '@CodingCatVer',
		codingtext		varchar(255)	 path '@CodingText',
		codingtype		bigint	 path '@CodingType',
		defaultopsdate		varchar(255)	 path '@DefaultOpsDate',
		modetype		varchar(255)	 path '@Mode',
		uselaststate		varchar(15)	 path '@UseLastState');
		
c02_w	c02%rowtype;
BEGIN
xml_w	:= xmltype(replace(xml_p, 'xmlns="http://www.3m.com/de/his/BusinessObjects/KodipDataModel"', ''));
CALL billing_i18n_pck.set_inativar_drg('N');

current_setting('kodip_pck.t_reg_itens_w')::t_reg_itens.delete;

for	c001_w in c001 loop
	begin
	nm_usuario_w	:=	c001_w.userid;
	
	for	r02_w in c02(c001_w.cctxa) loop
		c02_w	:=	r02_w;
	end loop;
	
	if (coalesce(upper(c02_w.codingcanceled),'FALSE') <> 'TRUE') then
		for	c01_w in c01(c001_w.patcasea) loop
			begin
			
			begin
			select	nr_sequencia
			into STRICT	nr_seq_episodio_w
			from	episodio_paciente
			where	nr_episodio	= somente_numero(c01_w.caseid)  LIMIT 1;
			exception
			when others then
				begin
				select	nr_sequencia
				into STRICT	nr_seq_episodio_w
				from	episodio_paciente
				where	nr_sequencia = somente_numero(c01_w.caseid);
				exception
				when others then
					nr_seq_episodio_w	:=	null;
				end;
			end;
			
			delete	FROM episodio_paciente_consist
			where	nr_seq_episodio = nr_seq_episodio_w
			and	nm_usuario_nrec = 'KODIP-RECEIVE';

			SELECT * FROM kodip_pck.inicializacao(nr_seq_episodio_w, nr_atendimento_w, reg_integracao_w) INTO STRICT _ora2pg_r;
 nr_seq_episodio_w := _ora2pg_r.nr_seq_episodio_p; nr_atendimento_w := _ora2pg_r.nr_atendimento_p; reg_integracao_w := _ora2pg_r.reg_integracao_p;
			intpd_reg_integracao_inicio(reg_integracao_w.nr_seq_fila_transmissao, 'R', reg_integracao_w);
						
			if (reg_integracao_w.nr_seq_fila_transmissao > 0) then
				delete	FROM intpd_log_recebimento
				where	nr_seq_fila = reg_integracao_w.nr_seq_fila_transmissao
				and	nm_usuario = 'KODIP-RECEIVE';
				
				update	intpd_fila_transmissao
				set	ds_xml = xml_p
				where	nr_sequencia = reg_integracao_w.nr_seq_fila_transmissao;
			end if;
			
			commit;
			
			SELECT * FROM kodip_pck.receive_diagnoses(
				c01_w.diagnoses, c01_w.departments, nr_seq_episodio_w, nr_atendimento_w, nm_usuario_w, reg_integracao_w, diag_code_w) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; diag_code_w := _ora2pg_r.diag_code_p;
			
			if (length(c01_w.hmv) > 0) then
				CALL kodip_pck.generate_items_reg('VENT', clock_timestamp(), null, null, diag_code_w, 'KIS', somente_numero(c01_w.hmv), null);
			end if;
			
			reg_integracao_w := kodip_pck.receive_procedures(
				c01_w.procedures, nr_seq_episodio_w, nr_atendimento_w, nm_usuario_w, reg_integracao_w, c01_w.departments);
				
			reg_integracao_w := kodip_pck.receive_case_drg(reg_integracao_w, nr_seq_episodio_w, c01_w.grres, nr_atendimento_w, nm_usuario_w);
			reg_integracao_w := kodip_pck.receive_pr_result(reg_integracao_w, nr_seq_episodio_w, c01_w.prresult);
			end;
		end loop;		
	end if;
	end;
end loop;

begin
select	'E'
into STRICT	ie_status_w
from	intpd_log_recebimento
where	nr_seq_fila = reg_integracao_w.nr_seq_fila_transmissao
and	ie_tipo = 'E'  LIMIT 1;
exception
when others then
	ie_status_w	:=	'S';
end;

update	intpd_fila_transmissao
set	dt_atualizacao = clock_timestamp(),
	dt_status = clock_timestamp(),
	ie_status = ie_status_w
where	nr_sequencia = reg_integracao_w.nr_seq_fila_transmissao;

CALL kodip_pck.set_seq_fila(null);
commit;

CALL billing_i18n_pck.set_inativar_drg('S');
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE kodip_pck.processar_response ( xml_p text) FROM PUBLIC;
