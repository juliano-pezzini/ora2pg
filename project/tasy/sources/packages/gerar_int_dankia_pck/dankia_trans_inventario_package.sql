-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE gerar_int_dankia_pck.dankia_trans_inventario ( cd_local_estoque_p bigint, cd_material_p bigint, qt_contagem_p bigint, nr_seq_lote_fornec_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text, cd_operacao_estoque_p INOUT text) AS $body$
DECLARE

		
		ds_lote_fornec_w	material_lote_fornec.ds_lote_fornec%type;
		dt_validade_w		material_lote_fornec.dt_validade%type;
		cd_material_estoque_w	material.cd_material_estoque%type;
		qt_saldo_disponivel_w	double precision;
		qt_saldo_atual_w		double precision;
		ie_estoque_lote_w		parametro_estoque.ie_estoque_lote%type;
		qt_movimento_w			movimento_estoque.qt_movimento%type;
		
		
BEGIN
		
		
		if (get_ie_int_dankia = 'S') and (gerar_int_dankia_pck.get_ie_local_dankia(cd_local_estoque_p) = 'S') then
			
			dt_mesano_referencia_w		:= trunc(clock_timestamp(),'mm');
			
			select	max(cd_material_estoque)
			into STRICT	cd_material_estoque_w
			from	material
			where	cd_material = cd_material_p;
			
			if (obter_se_material_estoque(cd_estabelecimento_p, cd_estabelecimento_p, cd_material_p) = 'N') then
				ds_erro_p := wheb_mensagem_pck.get_texto(342362);
				goto Final;
			end if;
			
			qt_saldo_atual_w		:= obter_saldo_disp_estoque(cd_estabelecimento_p, cd_material_p, cd_local_estoque_p, null);
			qt_saldo_disponivel_w	:= obter_saldo_disp_estoque(cd_estabelecimento_p, cd_material_p, cd_local_estoque_p, dt_mesano_referencia_w);
			
			if (nr_seq_lote_fornec_p IS NOT NULL AND nr_seq_lote_fornec_p::text <> '') then

				select	max(ds_lote_fornec),
					max(dt_validade)
				into STRICT	ds_lote_fornec_w,
					dt_validade_w
				from	material_lote_fornec
				where nr_sequencia = nr_seq_lote_fornec_p;
				
				select	coalesce(max(ie_estoque_lote),'N')
				into STRICT	ie_estoque_lote_w
				from	parametro_estoque
				where	cd_estabelecimento = cd_estabelecimento_p;
				
				if (ie_estoque_lote_w = 'S') and (substr(obter_se_material_estoque_lote(cd_estabelecimento_p, cd_material_p),1,1) = 'S') then
					qt_saldo_disponivel_w	:= obter_saldo_estoque_lote(cd_estabelecimento_p, cd_material_p, cd_local_estoque_p, dt_mesano_referencia_w, nr_seq_lote_fornec_p);
					qt_saldo_atual_w		:= qt_saldo_disponivel_w;
				end if;
			end if;
			
			qt_movimento_w := qt_contagem_p - qt_saldo_disponivel_w;

			ie_tipo_entrada_w := 'E';
			
			if (qt_movimento_w < 0) then
				ie_tipo_entrada_w := 'S';
				qt_movimento_w := (qt_movimento_w * -1);
			end if;
			
			qt_estoque_w := qt_movimento_w;
			
			if (coalesce(ie_tipo_entrada_w,'X') <> 'X') then
				select	min(cd_operacao_estoque)
				into STRICT	cd_operacao_estoque_w
				from	operacao_estoque
				where	ie_tipo_requisicao = 5
				and	ie_entrada_saida = ie_tipo_entrada_w
				and	ie_consignado	= '0'
				and	ie_situacao	= 'A';
			end if;
			
			if (qt_movimento_w = 0) then
				CALL sup_atualizar_saldo_invent(
							cd_estabelecimento_p,
							dt_mesano_referencia_w, 
							cd_local_estoque_p, 
							cd_material_p, 
							1,1,
							qt_movimento_w,
							nm_usuario_p,
							null);
				
			end if;

			if (coalesce(cd_operacao_estoque_w,0) <> 0) then
				begin

				select	nextval('movimento_estoque_seq')
				into STRICT	nr_movimento_w
				;
				
				insert into movimento_estoque(
					nr_movimento_estoque,
					cd_estabelecimento,
					cd_local_estoque,
					dt_movimento_estoque,
					cd_operacao_estoque,
					nr_seq_lote_fornec,
					cd_acao,
					cd_material,
					cd_material_estoque,
					cd_unidade_medida_estoque,
					cd_unidade_med_mov,
					dt_mesano_referencia,
					qt_movimento,
					qt_estoque,
					dt_atualizacao,
					nm_usuario,
					ie_origem_documento,
					ie_origem_proced,
					dt_processo,
					qt_inventario,
					ie_movto_consignado,
					ds_observacao,
					cd_lote_fabricacao,
					dt_validade)
				values ( nr_movimento_w,
					cd_estabelecimento_p,
					cd_local_estoque_p,
					clock_timestamp(),
					cd_operacao_estoque_w,
					nr_seq_lote_fornec_p,
					1,
					cd_material_p,
					cd_material_estoque_w,
					substr(obter_dados_material_estab(cd_material_p, cd_estabelecimento_p,'UME'),1,30),
					substr(obter_dados_material_estab(cd_material_p, cd_estabelecimento_p,'UME'),1,30),
					dt_mesano_referencia_w,
					qt_movimento_w,
					qt_estoque_w,
					clock_timestamp(),
					nm_usuario_p,
					5,
					1,
					null,
					qt_material_estoque_w,
					'N',
					WHEB_MENSAGEM_PCK.get_texto(927422),
					ds_lote_fornec_w,
					dt_validade_w);
				cd_operacao_estoque_p := cd_operacao_estoque_w;	
				end;
			end if;	
		end if;
		
		<<Final>>
		PERFORM set_config('gerar_int_dankia_pck.qt_existe_w', 0, false);
		end;

		

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_int_dankia_pck.dankia_trans_inventario ( cd_local_estoque_p bigint, cd_material_p bigint, qt_contagem_p bigint, nr_seq_lote_fornec_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text, cd_operacao_estoque_p INOUT text) FROM PUBLIC;
