-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION patientsearchfunctions.findpatients ( pInSst strArray ,pInWithAccents integer ,pInBirthL timestamp ,pInBirthH timestamp ,pInSex text ,pInCode text ,pInRNumL integer ,pInRNumH integer ) RETURNS PATIENTSEARCHFUNCTIONS.CURRESULT AS $body$
DECLARE

    lNumWords bigint := pInSst.COUNT;
    lIndexWords strArray := strArray();
    lIndexWordsWithAccents strArray;
    lIndexWord2 varchar(63);
    lIndexWord3 varchar(63);


BEGIN
    EXECUTE 'TRUNCATE TABLE W_PESSOA_FISICA_SEARCH';

    FOR i IN 1 .. pInSst.COUNT
    LOOP
      lIndexWords.extend;
      lIndexWords(i) := TasyAutoComplete.ToIndexWithoutAccents(pInSst(i));
    END LOOP;
    IF (lNumWords >= 2) THEN
      lIndexWord2 := lIndexWords(2);
    END IF;
    IF (lNumWords >= 3) THEN
      lIndexword3 := lIndexWords(3);
    END IF;

    IF (pInWithAccents = 0) THEN
      INSERT INTO W_PESSOA_FISICA_SEARCH
        SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TREAT[scr AS SCORING].matchRange AS matchRange
        FROM (
          SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TasyAutoComplete.getScore(nmIndex, lIndexWords) AS scr
          FROM (
            SELECT /*+INDEX(T, PESSOA_FISICA_NM_INDEX)*/ cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, patientsearchfunctions.patienttoindex(nm_pessoa_fisica, dt_nascimento) AS nmIndex
            FROM PESSOA_FISICA T
            WHERE (coalesce(pInCode::text, '') = '' OR cd_pessoa_fisica LIKE pInCode || '%')
            AND (coalesce(pInBirthL::text, '') = '' OR dt_nascimento >= pInBirthL)
            AND (coalesce(pInBirthH::text, '') = '' OR dt_nascimento <= pInBirthH)
            AND (coalesce(pInSex::text, '') = '' OR ie_sexo = pInSex)
          ) alias11
          WHERE nmIndex LIKE '%' || lIndexWords(1) || '%'
          AND (coalesce(lIndexWord2::text, '') = '' OR nmIndex LIKE '%' || lIndexWord2 || '%')
          AND (coalesce(lIndexWord3::text, '') = '' OR nmIndex LIKE '%' || lIndexWord3 || '%')
        ) alias17
        WHERE TREAT[scr AS SCORING](.itemScore IS NOT NULL AND .itemScore::text <> '')
        ORDER BY TREAT[scr AS SCORING].itemScore DESC, nm_pessoa_fisica;
    ELSE
      lIndexWordsWithAccents := strArray();

      FOR i IN 1 .. pInSst.COUNT
      LOOP
        lIndexWordsWithAccents.extend;
        lIndexWordsWithAccents(i) := TasyAutoComplete.ToIndexWithAccents(pInSst(i));
      END LOOP;

      INSERT INTO W_PESSOA_FISICA_SEARCH
        SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TREAT[scr AS SCORING].matchRange AS matchRange
        FROM (
          SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TasyAutoComplete.getScore(nmIndexWithAccents, lIndexWordsWithAccents) AS scr
          FROM (
            SELECT /*+INDEX(T, PESSOA_FISICA_NM_INDEX)*/ cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, patientsearchfunctions.patienttoindex(nm_pessoa_fisica, dt_nascimento) AS nmIndex, patientsearchfunctions.patienttoindexwithaccents(nm_pessoa_fisica, dt_nascimento) AS nmIndexWithAccents
            FROM PESSOA_FISICA T
            WHERE (coalesce(pInCode::text, '') = '' OR cd_pessoa_fisica LIKE pInCode || '%')
            AND (coalesce(pInBirthL::text, '') = '' OR dt_nascimento >= pInBirthL)
            AND (coalesce(pInBirthH::text, '') = '' OR dt_nascimento <= pInBirthH)
            AND (coalesce(pInSex::text, '') = '' OR ie_sexo = pInSex)
          ) alias11
          WHERE nmIndex LIKE '%' || lIndexWords(1) || '%'
          AND (coalesce(lIndexWord2::text, '') = '' OR nmIndex LIKE '%' || lIndexWord2 || '%')
          AND (coalesce(lIndexWord3::text, '') = '' OR nmIndex LIKE '%' || lIndexWord3 || '%')
        ) alias17
        WHERE TREAT[scr AS SCORING](.itemScore IS NOT NULL AND .itemScore::text <> '')
        ORDER BY TREAT[scr AS SCORING].itemScore DESC, nm_pessoa_fisica;
    END IF;

    RETURN patientsearchfunctions.fetchfromexisting(pInRNumL, pInRNumH);
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION patientsearchfunctions.findpatients ( pInSst strArray ,pInWithAccents integer ,pInBirthL timestamp ,pInBirthH timestamp ,pInSex text ,pInCode text ,pInRNumL integer ,pInRNumH integer ) FROM PUBLIC;
