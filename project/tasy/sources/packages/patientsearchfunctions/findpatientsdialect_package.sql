-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION patientsearchfunctions.findpatientsdialect ( pInSst strArray ,pInWithAccents integer ,pInBirthL timestamp ,pInBirthH timestamp ,pInSex text ,pInCode text ,pInRNumL integer ,pInRNumH integer ) RETURNS PATIENTSEARCHFUNCTIONS.CURRESULT AS $body$
DECLARE

    lNumWords bigint := pInSst.COUNT;
    lIndexWords strArray := strArray();
    lIndexWordsWithAccents strArray;
    lIndexWord2 varchar(63);
    lIndexWord3 varchar(63);
    l_cnt integer;
    v_sql_table varchar(4000);
    v_sql_insert varchar(4000);


BEGIN
    EXECUTE 'TRUNCATE TABLE W_PESSOA_FISICA_SEARCH';

    SELECT count(*) INTO STRICT l_cnt
    FROM all_objects
    WHERE object_type IN ('TABLE', 'VIEW')
      AND object_name = 'DF_PESSOA_FISICA';

    IF (l_cnt <= 0)
    THEN
         v_sql_table := 'CREATE TABLE "DF_PESSOA_FISICA" 
           (  
            "NR_SEQ_DIALECT_FIELD" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
            "CD_ENTITY" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
            "DS_DIALECT_FIELD_NAME" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
            "DS_DIALECT_FIELD_VALUE" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
            "DT_CREATION" DATE NOT NULL ENABLE, 
            "NM_CREATION_USER" VARCHAR2(15 BYTE) NOT NULL ENABLE, 
            "DT_UPDATE" DATE, 
            "NM_UPDATE_USER" VARCHAR2(15 BYTE), 
             CONSTRAINT "DF_PESSOA_FISICA_PK" PRIMARY KEY ("NR_SEQ_DIALECT_FIELD")
          )';

          EXECUTE v_sql_table;
    END IF;

    FOR i IN 1 .. pInSst.COUNT
    LOOP
      lIndexWords.extend;
      lIndexWords(i) := TasyAutoComplete.ToIndexWithoutAccents(pInSst(i));
    END LOOP;
    IF (lNumWords >= 2) THEN
      lIndexWord2 := lIndexWords(2);
    END IF;
    IF (lNumWords >= 3) THEN
      lIndexword3 := lIndexWords(3);
    END IF;

    IF (pInWithAccents = 0) THEN
      v_sql_insert := '
        INSERT INTO W_PESSOA_FISICA_SEARCH
        SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TREAT(scr AS SCORING).matchRange AS matchRange
        FROM (
          SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TasyAutoComplete.getScore(nmIndex, lIndexWords) AS scr
          FROM (
            SELECT /*+INDEX(T, PESSOA_FISICA_NM_INDEX)*/ T.cd_pessoa_fisica, T.nm_pessoa_fisica, T.dt_nascimento, T.ie_sexo, T.cd_pessoa_mae, patientsearchfunctions.patienttoindex(T.nm_pessoa_fisica, T.dt_nascimento) AS nmIndex
            FROM PESSOA_FISICA T
            WHERE (' || pInCode || ' IS NULL OR T.cd_pessoa_fisica LIKE ' || pInCode || '%")
                AND (' || pInBirthL || ' IS NULL OR T.dt_nascimento >= ' || pInBirthL || ')
                AND (' || pInBirthH || ' IS NULL OR T.dt_nascimento <= ' || pInBirthH || ')
                AND (' || pInSex || ' IS NULL OR T.ie_sexo = ' || pInSex || ')
            UNION ALL
            SELECT  T.cd_pessoa_fisica, DF.DS_DIALECT_FIELD_VALUE AS nm_pessoa_fisica, T.dt_nascimento, T.ie_sexo, T.cd_pessoa_mae, patientsearchfunctions.patienttoindex(DF.DS_DIALECT_FIELD_VALUE, T.dt_nascimento) AS nmIndex
            FROM PESSOA_FISICA T
            INNER JOIN DF_PESSOA_FISICA DF
                ON DF.CD_ENTITY = T.CD_PESSOA_FISICA
                AND UPPER(DF.DS_DIALECT_FIELD_NAME) LIKE "NM_PESSOA_FISICA%"
            WHERE (' || pInCode || ' IS NULL OR T.cd_pessoa_fisica LIKE ' || pInCode || '%")
                AND (' || pInBirthL || ' IS NULL OR T.dt_nascimento >= ' || pInBirthL || ')
                AND (' || pInBirthH || ' IS NULL OR T.dt_nascimento <= ' || pInBirthH || ')
                AND (' || pInSex || ' IS NULL OR T.ie_sexo = ' || pInSex || ')
          )
          WHERE nmIndex LIKE "%' || lIndexWords(1) || '%"
          AND (' || lIndexWord2 || ' IS NULL OR nmIndex LIKE "%' || lIndexWord2 || '%")
          AND (' || lIndexWord3 || ' IS NULL OR nmIndex LIKE "%' || lIndexWord3 || '%")
        )
        WHERE TREAT(scr AS SCORING).itemScore IS NOT NULL
        ORDER BY TREAT(scr AS SCORING).itemScore DESC, nm_pessoa_fisica';

      EXECUTE v_sql_insert;
    ELSE
      lIndexWordsWithAccents := strArray();

      FOR i IN 1 .. pInSst.COUNT
      LOOP
        lIndexWordsWithAccents.extend;
        lIndexWordsWithAccents(i) := TasyAutoComplete.ToIndexWithAccents(pInSst(i));
      END LOOP;

      v_sql_insert := '
      INSERT INTO W_PESSOA_FISICA_SEARCH
        SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TREAT(scr AS SCORING).matchRange AS matchRange
        FROM (
          SELECT cd_pessoa_fisica, nm_pessoa_fisica, dt_nascimento, ie_sexo, cd_pessoa_mae, TasyAutoComplete.getScore(nmIndexWithAccents, lIndexWordsWithAccents) AS scr
          FROM (
            SELECT /*+INDEX(T, PESSOA_FISICA_NM_INDEX)*/ T.cd_pessoa_fisica, T.nm_pessoa_fisica, T.dt_nascimento, T.ie_sexo, T.cd_pessoa_mae, patientsearchfunctions.patienttoindex(T.nm_pessoa_fisica, T.dt_nascimento) AS nmIndex, patientsearchfunctions.patienttoindexwithaccents(T.nm_pessoa_fisica, T.dt_nascimento) AS nmIndexWithAccents
            FROM PESSOA_FISICA T
            WHERE (' || pInCode || ' IS NULL OR T.cd_pessoa_fisica LIKE ' || pInCode || '%")
                AND (' || pInBirthL || ' IS NULL OR T.dt_nascimento >= ' || pInBirthL || ')
                AND (' || pInBirthH || ' IS NULL OR T.dt_nascimento <= ' || pInBirthH || ')
                AND (' || pInSex || ' IS NULL OR T.ie_sexo = ' || pInSex || ')
            UNION ALL
            SELECT  T.cd_pessoa_fisica, DF.DS_DIALECT_FIELD_VALUE AS nm_pessoa_fisica, T.dt_nascimento, T.ie_sexo, T.cd_pessoa_mae, patientsearchfunctions.patienttoindex(DF.DS_DIALECT_FIELD_VALUE, T.dt_nascimento) AS nmIndex, patientsearchfunctions.patienttoindexwithaccents(DF.DS_DIALECT_FIELD_VALUE, T.dt_nascimento) AS nmIndexWithAccents
            FROM PESSOA_FISICA T
            INNER JOIN DF_PESSOA_FISICA DF
                ON DF.CD_ENTITY = T.CD_PESSOA_FISICA
                AND UPPER(DF.DS_DIALECT_FIELD_NAME) LIKE "NM_PESSOA_FISICA%"
            WHERE (' || pInCode || ' IS NULL OR T.cd_pessoa_fisica LIKE ' || pInCode || '%")
                AND (' || pInBirthL || ' IS NULL OR T.dt_nascimento >= ' || pInBirthL || ')
                AND (' || pInBirthH || ' IS NULL OR T.dt_nascimento <= ' || pInBirthH || ')
                AND (' || pInSex || ' IS NULL OR T.ie_sexo = ' || pInSex || ')
          )
          WHERE nmIndex LIKE "%' || lIndexWords(1) || '%"
          AND (' || lIndexWord2 || ' IS NULL OR nmIndex LIKE "%' || lIndexWord2 || '%")
          AND (' || lIndexWord3 || ' IS NULL OR nmIndex LIKE "%' || lIndexWord3 || '%")
        )
        WHERE TREAT(scr AS SCORING).itemScore IS NOT NULL
        ORDER BY TREAT(scr AS SCORING).itemScore DESC, nm_pessoa_fisica';

      EXECUTE v_sql_insert;
    END IF;

    RETURN patientsearchfunctions.fetchfromexisting(pInRNumL, pInRNumH);
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION patientsearchfunctions.findpatientsdialect ( pInSst strArray ,pInWithAccents integer ,pInBirthL timestamp ,pInBirthH timestamp ,pInSex text ,pInCode text ,pInRNumL integer ,pInRNumH integer ) FROM PUBLIC;
