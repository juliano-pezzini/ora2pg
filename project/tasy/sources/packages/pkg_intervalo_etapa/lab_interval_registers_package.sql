-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--
-- dblink wrapper to call function pkg_intervalo_etapa.lab_interval_registers() as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION pkg_intervalo_etapa.lab_interval_registers (nr_seq_regra_p bigint, qtd_dias_p bigint) RETURNS SETOF LAB_INTERVAL_RETURN_TABLE AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	LAB_INTERVAL_RETURN_TABLE;
BEGIN
	v_query := 'SELECT * FROM pkg_intervalo_etapa.lab_interval_registers_atx ( ' || quote_nullable(nr_seq_regra_p) || ',' || quote_nullable(qtd_dias_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret LAB_INTERVAL_RETURN_TABLE);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION pkg_intervalo_etapa.lab_interval_registers_atx (nr_seq_regra_p bigint, qtd_dias_p bigint) RETURNS SETOF LAB_INTERVAL_RETURN_TABLE AS $body$
DECLARE
 records lab_interval_records_filtered;lab_records_r pkg_intervalo_etapa.lab_interval_records_filtered;
       ie_status_inicial_w integer;
       ie_status_final_w integer;

       c01 CURSOR FOR
              SELECT cd_estabelecimento,
                     cd_setor_atendimento,
                     nr_seq_exame,
                     nr_seq_grupo_exame,
                     cd_procedencia,
                     cd_laboratorio,
                     ie_tipo_atendimento,
                     ie_urgente,
                     ie_tempo_meta,
                     ie_tempo_limite,
                     ie_prioridade
             FROM regra_contr_etapa_amostra
             WHERE nr_seq_regra = nr_seq_regra_p
             ORDER BY coalesce(ie_prioridade,0) DESC , nr_sequencia DESC;

       c02 CURSOR FOR
              SELECT b.cd_pessoa_fisica,
                     f.cd_cgc_externo cd_laboratorio,
                     a.nr_seq_exame,
                     a.cd_material_exame,
                     f.nr_seq_grupo,
                     null ds_amostra,
                     b.nr_atendimento,
                     b.nr_prescricao,
                     a.ie_status_atend,
                     b.dt_prescricao,
                     TRUNC((clock_timestamp() - (SELECT min(g.dt_atualizacao) dt_atualizacao
                                       FROM prescr_proc_etapa g
                                       WHERE g.ie_etapa >= ie_status_inicial_w
                                       AND g.ie_etapa < ie_status_final_w
                                       AND g.nr_prescricao = a.nr_prescricao
                                       AND g.nr_seq_prescricao = a.nr_sequencia)) * 1440) qtd_minutos,
                     a.cd_setor_atendimento,
                     b.cd_estabelecimento,
                     c.cd_procedencia,
                     c.ie_tipo_atendimento,
                     a.ie_urgencia,
                     0 ie_prioridade,
                     e.ie_padrao_amostra,
                     a.nr_sequencia,
           h.nr_sequencia nr_seq_prescr_proc_mat
              FROM prescr_procedimento a
              INNER JOIN prescr_medica b ON a.nr_prescricao = b.nr_prescricao
              INNER JOIN atendimento_paciente c ON b.nr_atendimento = c.nr_atendimento
              INNER JOIN etapa_table_tmp d ON d.nr_prescricao = a.nr_prescricao AND d.nr_seq_prescricao = a.nr_sequencia AND d.ie_etapa = a.ie_status_atend
              INNER JOIN lab_parametro e ON e.cd_estabelecimento = b.cd_estabelecimento
              INNER JOIN exame_laboratorio f ON a.nr_seq_exame = f.nr_seq_exame
        INNER JOIN material_exame_lab g ON g.cd_material_exame = a.cd_material_exame
        INNER JOIN prescr_proc_material h ON h.nr_prescricao = a.nr_prescricao AND h.nr_seq_material = g.nr_sequencia
              WHERE a.ie_status_atend >= ie_status_inicial_w
              AND a.ie_status_atend < ie_status_final_w
              AND a.ie_exame_bloqueado <> 'S'
              AND coalesce(a.ie_suspenso, 'N') = 'N';


BEGIN 
    		  EXECUTE 'TRUNCATE TABLE etapa_table_tmp';

			  Insert Into 
				  etapa_table_tmp(
					  dt_atualizacao,
					  nr_prescricao,
					  nr_seq_prescricao,
					  ie_etapa,
					  nm_usuario
				  )
			  SELECT 
				  min(dt_atualizacao) dt_atualizacao,
				  nr_prescricao,
				  nr_seq_prescricao,
				  ie_etapa,
				  ' '
			  FROM 
				  prescr_proc_etapa
			  WHERE 
				  dt_atualizacao >= pkg_date_utils.START_OF(clock_timestamp() - qtd_dias_p, 'DD')
			  GROUP BY 
				  nr_prescricao,
				  nr_seq_prescricao,
				  ie_etapa;
				
			  commit;
	
              SELECT ie_status_inicial,
                     ie_status_final
              INTO STRICT ie_status_inicial_w,
                   ie_status_final_w
              FROM regra_interv_etapa_amostra
              WHERE nr_sequencia = nr_seq_regra_p;
              OPEN c02;
                   LOOP
                   FETCH c02 INTO
                         lab_records_r;
                   EXIT WHEN NOT FOUND; /* apply on c02 */
                        BEGIN
                             FOR lab_interval_rules IN c01
                             LOOP                   
                                 IF ((coalesce(lab_interval_rules.cd_estabelecimento, lab_records_r.cd_estabelecimento) = lab_records_r.cd_estabelecimento)
                                 AND (coalesce(lab_interval_rules.cd_setor_atendimento, lab_records_r.cd_setor_atendimento) = lab_records_r.cd_setor_atendimento)
                                 AND (coalesce(lab_interval_rules.nr_seq_exame, lab_records_r.nr_seq_exame) = lab_records_r.nr_seq_exame)
                                 AND (coalesce(lab_interval_rules.nr_seq_grupo_exame, lab_records_r.nr_seq_grupo_exame) = lab_records_r.nr_seq_grupo_exame)
                                 AND (coalesce(lab_interval_rules.cd_procedencia, lab_records_r.cd_procedencia) = lab_records_r.cd_procedencia)
                                 AND (coalesce(lab_interval_rules.cd_laboratorio, lab_records_r.cd_laboratorio) = lab_records_r.cd_laboratorio OR  coalesce(lab_records_r.cd_laboratorio::text, '') = '')
                                 AND (coalesce(lab_interval_rules.ie_tipo_atendimento, lab_records_r.ie_tipo_atendimento) = lab_records_r.ie_tipo_atendimento)
                                 AND (coalesce(lab_interval_rules.ie_urgente, lab_records_r.ie_urgente) = lab_records_r.ie_urgente OR  coalesce(lab_records_r.ie_urgente::text, '') = '')) THEN
                                     IF (lab_records_r.qtd_minutos < lab_interval_rules.ie_tempo_meta) THEN
                                        lab_records_r.ie_prioridade := 1;
                                     ELSIF (lab_records_r.qtd_minutos >= lab_interval_rules.ie_tempo_meta AND lab_records_r.qtd_minutos < lab_interval_rules.ie_tempo_limite) THEN
                                        lab_records_r.ie_prioridade := 2;
                                     ELSE
                                        lab_records_r.ie_prioridade := 3;
                                     END IF;
                   select  coalesce(lab_obter_codigo_barras(lab_records_r.ie_padrao_amostra, lab_records_r.nr_prescricao, lab_records_r.nr_sequencia, lab_records_r.nr_seq_prescr_proc_mat), '')
                   into STRICT  lab_records_r.ds_amostra
;

                                     RETURN NEXT lab_records_r;
                                     EXIT;
                                 END IF;
                             END LOOP;
                        END;
                   END LOOP;
              CLOSE c02;

              RETURN;
       END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_intervalo_etapa.lab_interval_registers (nr_seq_regra_p bigint, qtd_dias_p bigint) FROM PUBLIC; -- REVOKE ALL ON FUNCTION pkg_intervalo_etapa.lab_interval_registers_atx (nr_seq_regra_p bigint, qtd_dias_p bigint) FROM PUBLIC;
