-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE dpc_pkg.update_payload_data ( ds_value_p text, ds_payload_data_p philips_json, ds_colum_p text, cd_index_json_p philips_json ) AS $body$
DECLARE


    payload_index         varchar(10);
    payload_main_index    varchar(10);
    payload_sub_index_w   varchar(10);
    ds_value_w            varchar(255);
    regrex_exp_w          varchar(255);
    regrex_exp_sub_w      varchar(255);
    payload_table_index  varchar(10);
    ds_colum_w  varchar(255);



BEGIN

    begin
        payload_table_index := cd_index_json_p.get[ds_colum_p].value_of();
    exception
   	when others then
        payload_table_index := '1';
   end;

   begin
        payload_index := ds_payload_data_p.get[ds_colum_p].value_of();
    exception
   	when others then
        payload_index := '0';
   end;

    if ( position('_' in payload_index) > 0 ) then
        payload_main_index := substr(payload_index, 1, 1);
        payload_sub_index_w := substr(payload_index, 3);
        regrex_exp_w := payload_sub_index_w - '1';
        regrex_exp_w := '(^.{' || regrex_exp_w || '})(.{1})(.*)$';
        regrex_exp_sub_w := '\1' || ds_value_p || '\3';
    end if;

	if ( payload_index <> '0') then

		if ( position('_' in payload_index) = 0 and ( current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_index) is null or current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_index) = '' ) ) then
			current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_index) := ds_value_p;

		elsif ( position('_' in payload_index) > 0 and ( current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index) is not null ) ) then

			ds_value_w := regexp_replace( current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index), regrex_exp_w, regrex_exp_sub_w);
			current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index) := ds_value_w;

		elsif ( position('_' in payload_index) > 0 ) then

			PERFORM set_config('dpc_pkg.replace_store_index_w', payload_main_index, false);
			current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index) := '##################';
			ds_value_w := regexp_replace(current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index), regrex_exp_w, regrex_exp_sub_w);
			current_setting('dpc_pkg.payload_table')::payload_data_table(payload_table_index)(payload_main_index) := ds_value_w;
		end if;
	end if;


    if (ds_colum_p in ('CD_SURGERY', 'CD_SURGERY2', 'CD_SURGERY3', 'CD_SURGERY4' , 'CD_SURGERY5')) then
        select  CASE WHEN coalesce(max(ds_surgery_1)::text, '') = '' THEN  max(ds_surgery_2) WHEN coalesce(max(ds_surgery_1)::text, '') = '' THEN  max(ds_surgery_3) WHEN coalesce(max(ds_surgery_1)::text, '') = '' THEN  max(ds_surgery_4) WHEN coalesce(max(ds_surgery_1)::text, '') = '' THEN  max(ds_surgery_5)  ELSE max(ds_surgery_1) END
        into STRICT     ds_value_w
        from	dpc_surgery
        where ( cd_k_surgery_1 = ds_value_p or cd_k_surgery_2 = ds_value_p or cd_k_surgery_3 = ds_value_p or ds_surgery_4 = ds_value_p or cd_k_surgery_5 = ds_value_p);

        ds_colum_w := 'DS_SURGERY';
           if (ds_colum_p <> 'CD_SURGERY') then
           ds_colum_w := 'DS_SURGERY' || regexp_substr(ds_colum_p, '[[:digit:]]{1,2}$');
           end if;
        CALL dpc_pkg.update_payload_data(ds_value_w, ds_payload_data_p, ds_colum_w, cd_index_json_p);
    end if;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dpc_pkg.update_payload_data ( ds_value_p text, ds_payload_data_p philips_json, ds_colum_p text, cd_index_json_p philips_json ) FROM PUBLIC;
