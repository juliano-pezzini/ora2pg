-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE dpc_pkg.gen_update_proced (nr_seq_edition_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_origem_proced_w 	procedimento.ie_origem_proced%type := 22;
cd_area_procedimento_w  area_procedimento.cd_area_procedimento%type;
qtd_esp_w   		bigint;
qt_grupo_w  		bigint;
qt_proc_w   		bigint;
qtd_versao_w            bigint;
ds_name_w   		dpc_mdc.ds_name%type;
cd_mdc_w    		dpc_mdc.cd_mdc%type;
cd_dpc_w    		dpc_score.cd_dpc%type;
nm_dpc_w    		dpc_score.nm_dpc%type;
dt_start_w  		dpc_score.dt_start%type;
dt_end_w    		dpc_score.dt_end%type;
dt_start_dpc_w 		dpc_edition.dt_start%type;
cd_especialidade_w  	especialidade_proc.cd_especialidade%type;
cd_classification_w 	dpc_classification.cd_classification%type;
cd_grupo_proc_w     	grupo_proc.cd_grupo_proc%type;
cd_grupo_proc_actual_w  grupo_proc.cd_grupo_proc%type;
cd_procedimento_w       procedimento.cd_procedimento%type;
nr_sequencia_mdc_w      dpc_mdc.nr_sequencia%type;
nr_seq_classif_w        dpc_classification.nr_sequencia%type;
cd_k_surgery_1_w        dpc_surgery.cd_k_surgery_1%type;
ds_surgery_1_w          dpc_surgery.ds_surgery_1%type;
cd_k_surgery_2_w        dpc_surgery.cd_k_surgery_2%type;
ds_surgery_2_w          dpc_surgery.ds_surgery_2%type;
cd_k_surgery_3_w        dpc_surgery.cd_k_surgery_3%type;
ds_surgery_3_w          dpc_surgery.ds_surgery_3%type;
cd_k_surgery_4_w        dpc_surgery.cd_k_surgery_4%type;
ds_surgery_4_w          dpc_surgery.ds_surgery_4%type;
cd_k_surgery_5_w        dpc_surgery.cd_k_surgery_5%type;
ds_surgery_5_w          dpc_surgery.ds_surgery_5%type;
cd_surgery_w            dpc_surgery.cd_k_surgery_1%type;
ds_surgery_w            dpc_surgery.ds_surgery_1%type;
cd_treatment_1_w        dpc_treatment.cd_treatment_1%type;
ds_treatment_1_w        dpc_treatment.ds_treatment_1%type;
cd_treatment_2_w        dpc_treatment.cd_treatment_2%type;
ds_treatment_2_w        dpc_treatment.ds_treatment_2%type;
cd_treatment_w          dpc_treatment.cd_treatment_1%type;
ds_treatment_w          dpc_treatment.ds_treatment_1%type;
nr_count_w              integer;

c01 CURSOR FOR
SELECT 	ds_name,
	cd_mdc,
	nr_sequencia
from 	dpc_mdc
where 	nr_seq_edition = nr_seq_edition_p;

c02 CURSOR FOR
SELECT 	nr_sequencia
from 	dpc_classification
where 	nr_seq_edition = nr_seq_edition_p
and     cd_mdc = cd_mdc_w;

c03 CURSOR FOR
SELECT  cd_dpc,
	nm_dpc,
	dt_start,
	dt_end
from    dpc_score
where   nr_seq_edition = nr_seq_edition_p;

c04 CURSOR FOR
SELECT	cd_k_surgery_1,
        ds_surgery_1,
        cd_k_surgery_2,
        ds_surgery_2,
        cd_k_surgery_3,
        ds_surgery_3,
        cd_k_surgery_4,
        ds_surgery_4,
        cd_k_surgery_5,
        ds_surgery_5,
        dt_start,
        dt_end,
        cd_classification
from 	dpc_surgery
where 	nr_seq_edition = nr_seq_edition_p;

c05 CURSOR FOR
SELECT	cd_treatment_1,
        ds_treatment_1,
	cd_treatment_2,
        ds_treatment_2,
        dt_start,
        dt_end,
        cd_classification
from	dpc_treatment
where 	nr_seq_edition = nr_seq_edition_p;


BEGIN

select dt_start
into STRICT   dt_start_dpc_w
from   dpc_edition
where  nr_sequencia = nr_seq_edition_p;

select	coalesce(max(cd_area_procedimento),0) + 1
into STRICT    cd_area_procedimento_w
from    area_procedimento;

insert into area_procedimento(
	cd_area_procedimento,
	cd_original,             
	cd_sistema_ant,          
	ds_area_procedimento,    
	dt_atualizacao,          
	dt_atualizacao_nrec,     
	ie_origem_proced,        
	nm_usuario,              
	nm_usuario_nrec)
values (cd_area_procedimento_w,
	1,
	null,
	'DPC',
	clock_timestamp(),
	clock_timestamp(),
	ie_origem_proced_w,
	nm_usuario_p,
	nm_usuario_p);

	open C01;
	loop
	fetch c01 into
		ds_name_w,
		cd_mdc_w,
		nr_sequencia_mdc_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
		
		select  count(*)
		into STRICT    qtd_esp_w
		from 	especialidade_proc
		where   ie_origem_proced = ie_origem_proced_w
		and 	cd_original = nr_sequencia_mdc_w
		and     cd_area_procedimento = cd_area_procedimento_w;
		
		if (qtd_esp_w  = 0) then
		
			select	coalesce(max(cd_especialidade),0) + 1
			into STRICT    cd_especialidade_w
			from    especialidade_proc;	
		
			insert into especialidade_proc(
				cd_area_procedimento,
				cd_especialidade,        
				cd_especialidade_medica,
				cd_original,             
				cd_sistema_ant,          
				ds_especialidade,        
				dt_atualizacao,          
				dt_atualizacao_nrec,     
				ie_origem_proced,        
				nm_usuario,              
				nm_usuario_nrec)        
			values ( cd_area_procedimento_w,
				cd_especialidade_w,
				null,
				nr_sequencia_mdc_w,
				null,
				ds_name_w,
				clock_timestamp(),
				clock_timestamp(),
				ie_origem_proced_w,
				nm_usuario_p,
				nm_usuario_p);

		end if;
		
		open C02;
		loop
		fetch c02 into
			nr_seq_classif_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
			select count(*)
			into STRICT   qt_grupo_w
			from   grupo_proc
			where  ie_origem_proced = ie_origem_proced_w
			and    cd_especialidade = cd_especialidade_w 
			and    cd_original = nr_seq_classif_w;
		
			if (qt_grupo_w = 0) then
			
				select	coalesce(max(cd_grupo_proc),0) + 1
				into STRICT    cd_grupo_proc_w
				from    grupo_proc;
			
				insert into grupo_proc(
					cd_especialidade,
					cd_grupo_proc,           
					cd_original,             
					cd_sistema_ant,          
					ds_grupo_proc,           
					ds_observacao,           
					dt_atualizacao,          
					ie_origem_proced,        
					ie_situacao,             
					nm_usuario)
				values ( cd_especialidade_w,
					cd_grupo_proc_w,
					nr_seq_classif_w,
					null,
					ds_name_w,
					null,
					clock_timestamp(),
					ie_origem_proced_w,
					'A',
					nm_usuario_p);		
			end if;
		
		end;
		end loop;
		close C02;
		
	end;
	end loop;
	close C01;
		
	open c03;
	loop
	fetch c03 into
		cd_dpc_w,
		nm_dpc_w,
		dt_start_w,
		dt_end_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
                select  max(cd_classification)
                into STRICT    cd_classification_w
                from    dpc_conversion_table
                where   cd_dpc = cd_dpc_w;

                cd_grupo_proc_actual_w := dpc_pkg.get_grupo_proc(cd_classification_w, ie_origem_proced_w);

		select 	count(*)
		into STRICT   	qt_proc_w
		from   	procedimento
		where  	cd_procedimento_loc = cd_dpc_w
		and    	ie_origem_proced = ie_origem_proced_w;
		
		if (qt_proc_w = 0) then

			select nextval('procedimento_seq')
			into STRICT   cd_procedimento_w
			;

                        CALL dpc_pkg.insert_procedimento(    cd_procedimento_w,
                                                        nm_dpc_w,
                                                        'A',
                                                        cd_grupo_proc_actual_w,
                                                        1,
                                                        ie_origem_proced_w,
                                                        'N',
                                                        1,
                                                        'N',
                                                        'N',
                                                        'S',
                                                        'B',
                                                        'S',
                                                        cd_dpc_w,
                                                        nm_usuario_p);

                        CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                null,
                                                                null,
                                                                dt_start_dpc_w,
                                                                dt_end_w,
                                                                dt_start_w,
                                                                ie_origem_proced_w,
                                                                nm_usuario_p);

		else

                        qtd_versao_w := dpc_pkg.validate_procedimento_versao(cd_dpc_w, ie_origem_proced_w);			

			if (qtd_versao_w = 0) then

                                CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                        null,
                                                                        null,
                                                                        dt_start_dpc_w,
                                                                        dt_end_w,
                                                                        dt_start_w,
                                                                        ie_origem_proced_w,
                                                                        nm_usuario_p);
			end if;

		end if;

	end;
	end loop;
	close c03;

        open c04;
        loop
        fetch c04 into
                cd_k_surgery_1_w,
                ds_surgery_1_w,
                cd_k_surgery_2_w,
                ds_surgery_2_w,
                cd_k_surgery_3_w,
                ds_surgery_3_w,
                cd_k_surgery_4_w,
                ds_surgery_4_w,
                cd_k_surgery_5_w,
                ds_surgery_5_w,
                dt_start_w,
		dt_end_w,
                cd_classification_w;
        EXIT WHEN NOT FOUND; /* apply on c04 */
        begin
                for nr_count_w in 1..5
                loop
                        case nr_count_w
                                when 1 then
                                        cd_surgery_w := cd_k_surgery_1_w;
                                        ds_surgery_w := ds_surgery_1_w;
                                when 2 then
                                        cd_surgery_w := cd_k_surgery_2_w;
                                        ds_surgery_w := ds_surgery_2_w;
                                when 3 then
                                        cd_surgery_w := cd_k_surgery_3_w;
                                        ds_surgery_w := ds_surgery_3_w;
                                when 4 then
                                        cd_surgery_w := cd_k_surgery_4_w;
                                        ds_surgery_w := ds_surgery_4_w;
                                when 5 then
                                        cd_surgery_w := cd_k_surgery_5_w;
                                        ds_surgery_w := ds_surgery_5_w;
                        end case;

                        if (cd_surgery_w IS NOT NULL AND cd_surgery_w::text <> '' AND ds_surgery_w IS NOT NULL AND ds_surgery_w::text <> '') then

                                cd_grupo_proc_actual_w := dpc_pkg.get_grupo_proc(cd_classification_w, ie_origem_proced_w);

                                select 	count(*)
                                into STRICT   	qt_proc_w
                                from   	procedimento
                                where  	cd_procedimento_loc = cd_surgery_w
                                and    	ie_origem_proced = ie_origem_proced_w;

                                if (qt_proc_w = 0) then

                                        select nextval('procedimento_seq')
                                        into STRICT   cd_procedimento_w
;

                                        CALL dpc_pkg.insert_procedimento(    cd_procedimento_w,
                                                                        ds_surgery_w,
                                                                        'A',
                                                                        cd_grupo_proc_actual_w,
                                                                        1,
                                                                        ie_origem_proced_w,
                                                                        'N',
                                                                        1,
                                                                        'N',
                                                                        'N',
                                                                        'S',
                                                                        'B',
                                                                        'S',
                                                                        cd_surgery_w,
                                                                        nm_usuario_p);

                                        CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                                null,
                                                                                null,
                                                                                dt_start_dpc_w,
                                                                                dt_end_w,
                                                                                dt_start_w,
                                                                                ie_origem_proced_w,
                                                                                nm_usuario_p);

                                else

                                        qtd_versao_w := dpc_pkg.validate_procedimento_versao(cd_surgery_w, ie_origem_proced_w);			

                                        if (qtd_versao_w = 0) then

                                                CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                                        null,
                                                                                        null,
                                                                                        dt_start_dpc_w,
                                                                                        dt_end_w,
                                                                                        dt_start_w,
                                                                                        ie_origem_proced_w,
                                                                                        nm_usuario_p);
                                        end if;
                                end if;
                        end if;
                end loop;
        end;
        end loop;
        close c04;

        open c05;
        loop
        fetch c05 into
                cd_treatment_1_w,
                ds_treatment_1_w,
                cd_treatment_2_w,
                ds_treatment_2_w,
                dt_start_w,
                dt_end_w,
                cd_classification_w;
        EXIT WHEN NOT FOUND; /* apply on c05 */
        begin
                for nr_count_w in 1..2
                loop
                        case nr_count_w
                                when 1 then
                                        cd_treatment_w := cd_treatment_1_w;
                                        ds_treatment_w := ds_treatment_1_w;
                                when 2 then
                                        cd_treatment_w := cd_treatment_2_w;
                                        ds_treatment_w := ds_treatment_2_w;
                        end case;

                        if (cd_treatment_w IS NOT NULL AND cd_treatment_w::text <> '' AND ds_treatment_w IS NOT NULL AND ds_treatment_w::text <> '') then

                                cd_grupo_proc_actual_w := dpc_pkg.get_grupo_proc(cd_classification_w, ie_origem_proced_w);

                                select 	count(*)
                                into STRICT   	qt_proc_w
                                from   	procedimento
                                where  	cd_procedimento_loc = cd_treatment_w
                                and    	ie_origem_proced = ie_origem_proced_w;

                                if (qt_proc_w = 0) then

                                        select nextval('procedimento_seq')
                                        into STRICT   cd_procedimento_w
;

                                        CALL dpc_pkg.insert_procedimento(    cd_procedimento_w,
                                                                        ds_treatment_w,
                                                                        'A',
                                                                        cd_grupo_proc_actual_w,
                                                                        1,
                                                                        ie_origem_proced_w,
                                                                        'N',
                                                                        1,
                                                                        'N',
                                                                        'N',
                                                                        'S',
                                                                        'B',
                                                                        'S',
                                                                        cd_treatment_w,
                                                                        nm_usuario_p);

                                        CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                                null,
                                                                                null,
                                                                                dt_start_dpc_w,
                                                                                dt_end_w,
                                                                                dt_start_w,
                                                                                ie_origem_proced_w,
                                                                                nm_usuario_p);

                                else

                                        qtd_versao_w := dpc_pkg.validate_procedimento_versao(cd_treatment_w, ie_origem_proced_w);			

                                        if (qtd_versao_w = 0) then

                                                CALL dpc_pkg.insert_procedimento_versao(     cd_procedimento_w,
                                                                                        null,
                                                                                        null,
                                                                                        dt_start_dpc_w,
                                                                                        dt_end_w,
                                                                                        dt_start_w,
                                                                                        ie_origem_proced_w,
                                                                                        nm_usuario_p);
                                        end if;
                                end if;
                        end if;
                end loop;
        end;
        end loop;
        close c05;

	update  dpc_edition
	set     dt_atualizacao = clock_timestamp(),
		dt_procedure_update = clock_timestamp(),
		nm_usuario = nm_usuario_p
	where   nr_sequencia = nr_seq_edition_p;
			
commit;

end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dpc_pkg.gen_update_proced (nr_seq_edition_p bigint, nm_usuario_p text) FROM PUBLIC;
