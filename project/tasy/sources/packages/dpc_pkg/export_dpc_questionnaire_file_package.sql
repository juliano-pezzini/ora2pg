-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE dpc_pkg.export_dpc_questionnaire_file ( nr_atendimento_p bigint, nr_seq_patient_dpc_p bigint, cd_pessoa_fisica_p text, dt_start_p timestamp, dt_end_p timestamp, cd_department_p bigint, si_discharge_p text, si_questionnaire_status_p text, nm_usuario_p text, si_reacquisition_p text default 'N') AS $body$
DECLARE


	c01 CURSOR FOR
	SELECT
		a.nr_atendimento,
		b.nr_seq_patient_dpc,
		b.nr_sequencia nr_seq_questionnaire,
		lpad(b.cd_facility_code, 9, 0) cd_facility_code,
		lpad(coalesce(obter_dados_pf(obter_dados_atendimento(a.nr_atendimento,'CP'),'NP'), b.cd_data_identification), 10, 0) cd_data_identification,
		coalesce(b.cd_general_medical_info, 0) cd_general_medical_info,
		replace(to_char(a.dt_start_dpc, 'yyyy/mm/dd'), '/', '') dt_start_dpc
	from
		patient_dpc                 a,
		patient_dpc_questionnaire   b
	where
		 b.nr_seq_patient_dpc = a.nr_sequencia
		and b.ie_situacao = 'A'
		and a.nr_sequencia = coalesce(nr_seq_patient_dpc_p, a.nr_sequencia)
		and ( ( coalesce(cd_department_p::text, '') = '' )
			  or ( a.cd_departamento = cd_department_p ) )
		and a.nr_atendimento = coalesce(nr_atendimento_p, a.nr_atendimento)
		and obter_dados_atendimento(a.nr_atendimento, 'CP') = coalesce(cd_pessoa_fisica_p, obter_dados_atendimento(a.nr_atendimento
		, 'CP'))
		and ( ( coalesce(dt_start_p::text, '') = ''
				and coalesce(dt_end_p::text, '') = '' )
			  or ( (dt_start_p IS NOT NULL AND dt_start_p::text <> '')
				   and coalesce(dt_end_p::text, '') = ''
				   and trunc(a.dt_start_dpc, 'dd') >= dt_start_p )
			  or ( (dt_end_p IS NOT NULL AND dt_end_p::text <> '')
				   and coalesce(dt_start_p::text, '') = ''
				   and trunc(a.dt_start_dpc, 'dd') <= dt_end_p )
			  or ( trunc(a.dt_start_dpc, 'dd') between dt_start_p and dt_end_p ) )
		and ( si_discharge_p = '0'
			  or ( si_discharge_p = '1'
				   and (obter_dt_alta_medica(a.nr_atendimento) IS NOT NULL AND (obter_dt_alta_medica(a.nr_atendimento))::text <> '') )
			  or ( si_discharge_p = '2'
				   and coalesce(obter_dt_alta_medica(a.nr_atendimento)::text, '') = '' ) )
		and ( ( si_questionnaire_status_p = '0'
				and b.si_status in ( 1, 2, 3, 4) )
			  or ( b.si_status = si_questionnaire_status_p ) );

	r01_w                  c01%rowtype;

	c02 CURSOR FOR
	SELECT
		pdqf.cd_formulary,
		pdqf.cd_version,
		pdqf.nr_sequencia
	from
		pat_dpc_quest_form pdqf
	where
	 pdqf.nr_seq_dpc_quest = r01_w.nr_seq_questionnaire
	order by
		pdqf.cd_formulary;

	r02_w                  c02%rowtype;

	c03 CURSOR FOR
	SELECT m.* from (SELECT
            pdqi.nr_seq_quest_form nr_seq_quest_form,
            CASE WHEN pdqi.cd_group ='1435' THEN  '1401'  ELSE pdqi.cd_group END  cd_group,
            pdqi.ds_column ds_column,
            pdqi.ds_value ds_value,
            to_char(pdqi.dt_value, 'yyyymmdd') dt_value
        FROM
            pat_dpc_quest_item pdqi
        WHERE
             pdqi.nr_seq_quest_form = r02_w.nr_sequencia
        GROUP BY
            pdqi.nr_seq_quest_form,
            pdqi.cd_group,
            pdqi.ds_column,
            pdqi.ds_value,
            pdqi.dt_value
        ORDER BY
            pdqi.nr_seq_quest_form,
            pdqi.cd_group) m
    order by m.nr_seq_quest_form , 
    m.cd_group;



	r03_w                  c03%rowtype;
	payload_alter_w         varchar(10);WITH RECURSIVE cte AS (



	c04 CURSOR FOR
	SELECT regexp_substr(payload_alter_w,'[^,]+', 1, level) sub_index
	
	(regexp_substr(payload_alter_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(payload_alter_w, '[^,]+', 1, level))::text <> '')  UNION ALL



	c04 CURSOR FOR
	SELECT regexp_substr(payload_alter_w,'[^,]+', 1, level) sub_index
	
	(regexp_substr(payload_alter_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(payload_alter_w, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;

	r04_w                  c04%rowtype;
	ds_line_w              varchar(4000);
	ds_line_value_w              varchar(4000);
	cd_group_w             varchar(50);
	nr_order_w             bigint := 0;
	nr_number_of_times_w   bigint := 1;
	qt_count_w             bigint := 1;
	nr_serial_number_w     bigint := 0;
	w_ds_value             pat_dpc_quest_item.ds_value%type;
	w_ds_titulo_grupo      varchar(7);
	ds_payload_data_w      philips_json;
	cd_index_json_w            philips_json;
	group_count            smallint;
	payload_main_index     varchar(2);
	payload_sub_index      varchar(2);
	payload_alter_loop_w smallint := 1;
	max_record_w smallint := 10;
	payload_value_counter  bigint := 0;
	cd_version_w		varchar(50);
BEGIN

	PERFORM set_config('dpc_pkg.payload_array', payload_data_array('', '', '', '', '', '', '', '', ''), false);
	PERFORM set_config('dpc_pkg.replace_store_index_w', '0', false);
	PERFORM set_config('dpc_pkg.payload_table', payload_data_table(), false);

	delete from w_dpc_export
	where nm_usuario = nm_usuario_p;
	nr_order_w := nr_order_w + 1;
	ds_line_w := 'FACILITY CODE' || chr(9) || 'DATA IDENTIFICATION NUMBER' || chr(9) || 'DATE OF ADMISSION' || chr(9) ||
                     'NUMBER OF TIMES CONTROL' || chr(9) || 'GENERAL MEDICAL INFORMATION NUMBER' || chr(9) || 'CODE' || chr(9) ||
                     'VERSION' || chr(9) || 'SERIAL NUMBER' || chr(9) || 'PAYLOAD 1' || chr(9) || 'PAYLOAD 2' || chr(9) || 
                     'PAYLOAD 3' || chr(9) || 'PAYLOAD 4' || chr(9) || 'PAYLOAD 5' || chr(9) || 'PAYLOAD 6' || chr(9) || 
                     'PAYLOAD 7' || chr(9) || 'PAYLOAD 8' || chr(9) || 'PAYLOAD 9';
	insert into w_dpc_export(
		nr_sequencia,
		nr_seq_patient_dpc,
		nr_seq_dpc_quest,
		nr_order,
		ds_content,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec
	) values (
		nextval('w_dpc_export_seq'),
		null,
		null,
		nr_order_w,
		ds_line_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp()
	);

	commit;
	open c01;
	loop
		fetch c01 into r01_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			cd_group_w := null;
			qt_count_w := 1;
			ds_line_w := null;

			open c02;
			loop
				fetch c02 into r02_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
					open c03;
					loop
						fetch c03 into r03_w;
						EXIT WHEN NOT FOUND; /* apply on c03 */
						begin
							w_ds_value := r03_w.ds_value;
							if ( substr(r03_w.ds_column, 0, 2) = 'DT' ) then
								w_ds_value := r03_w.dt_value;
                                                                if (substr(r03_w.dt_value,1,4) = '9999') then
                                                                        w_ds_value := '99999999';
                                                                end if;
							end if;

							if (qt_count_w = 1) then
								PERFORM set_config('dpc_pkg.replace_store_index_w', '0', false);
							   PERFORM set_config('dpc_pkg.payload_array', payload_data_array('', '', '', '', '', '', '', '', '', ''), false);
							   for i in 1..max_record_w loop begin
							   current_setting('dpc_pkg.payload_table')::payload_data_table.extend(1);
							   current_setting('dpc_pkg.payload_table')::payload_data_table(i) := current_setting('dpc_pkg.payload_array')::payload_data_array;
							   end;
							   end loop;

								select  count(*)
								into STRICT 	group_count
								from 	pat_dpc_quest_item pdqi
								where  	pdqi.nr_seq_quest_form = r02_w.nr_sequencia
								and 	pdqi.cd_group = r03_w.cd_group
								group by pdqi.cd_group;

                                                                if (r03_w.cd_group = '1401') then
                                                                        group_count := 12;
                                                                end if;

								   begin
									select  substr(nm_titulo, 1, 7) nm_titulo_grupo
									into STRICT w_ds_titulo_grupo
									from dic_objeto_filtro_grupo
									where nr_sequencia = r03_w.cd_group;

								exception
									when others then
										 w_ds_titulo_grupo := null;
								end;

								ds_payload_data_w :=  dpc_pkg.get_payload_order(r03_w.cd_group);
								cd_index_json_w := dpc_pkg.get_index_order(r03_w.cd_group);

								select	dpc_pkg.get_version_quest_group(w_ds_titulo_grupo)
								into STRICT	cd_version_w
								;
								
								select	dpc_pkg.get_number_times_control(r01_w.nr_atendimento)
								into STRICT	nr_number_of_times_w
								;
								
								ds_line_value_w := r01_w.cd_facility_code
											 || chr(9)
											 || r01_w.cd_data_identification
											 || chr(9)
											 || r01_w.dt_start_dpc
											 || chr(9)
											 || nr_number_of_times_w
											 || chr(9)
											 || r01_w.cd_general_medical_info
											 || chr(9)
											 || w_ds_titulo_grupo
											 || chr(9)
											 || coalesce(cd_version_w, r02_w.cd_version);

							end if;

							if ( qt_count_w = 1  and  group_count <> qt_count_w ) then
							
								CALL dpc_pkg.update_payload_data(w_ds_value, ds_payload_data_w, r03_w.ds_column, cd_index_json_w);
								qt_count_w := qt_count_w + 1;

							elsif ( qt_count_w = group_count ) then
						
								CALL dpc_pkg.update_payload_data(w_ds_value, ds_payload_data_w, r03_w.ds_column, cd_index_json_w);
								begin
								   payload_alter_loop_w := ds_payload_data_w.get['PAYLOAD_ALTER_LOOP'].value_of();

								exception
								   when others then
										 payload_alter_loop_w := '1';
								   end;
								
									if ( current_setting('dpc_pkg.replace_store_index_w')::varchar(10) <> '0' ) then 

									   payload_alter_w := ds_payload_data_w.get['PAYLOAD_ALTER'].value_of();
									 for i  in 1..payload_alter_loop_w loop begin
									   open c04;
											loop
											fetch c04 into r04_w;
											EXIT WHEN NOT FOUND; /* apply on c04 */
											begin
											w_ds_value := current_setting('dpc_pkg.payload_table')::payload_data_table(i)(r04_w.sub_index);
											current_setting('dpc_pkg.payload_table')::payload_data_table(i)(r04_w.sub_index) := replace(w_ds_value, '#', ' ');
											end;
											end loop;
										close c04;
										end;
										end loop;

									end if;

								   for j in 1..payload_alter_loop_w loop begin

									  if (payload_alter_loop_w > 1) then
										nr_serial_number_w := j;
									  elsif (r03_w.cd_group = '1305') then
										nr_serial_number_w := 1;
									  elsif (r03_w.cd_group = '1436') then
										nr_serial_number_w := 2;
									  elsif (r03_w.cd_group = '1437') then
										nr_serial_number_w := 3;
									  elsif (r03_w.cd_group = '1438') then
										nr_serial_number_w := 4;
									  elsif (r03_w.cd_group = '1439') then
										nr_serial_number_w := 5;
									  else
										nr_serial_number_w := 0;
									  end if;

								   ds_line_w := ds_line_value_w || chr(9) || nr_serial_number_w;

								 payload_value_counter := 0;
								 if ( current_setting('dpc_pkg.payload_table')::(payload_data_table(j) IS NOT NULL AND (payload_data_table(j))::text <> '')) then
									for i in 1..9 loop begin								
                                        				    if(trim(current_setting('dpc_pkg.payload_table')::payload_data_table(j)(i)) is not null) then                                            
                                            				    	payload_value_counter := payload_value_counter+1;
                                        				    end if;
									end;
									ds_line_w := ds_line_w
											|| chr(9)
											|| current_setting('dpc_pkg.payload_table')::payload_data_table(j)(i);
									end loop;

								  if ( ds_line_w is  not null and payload_value_counter > 0) then
									nr_order_w := nr_order_w + 1;
								
									insert into w_dpc_export(
										nr_sequencia,
										nr_seq_patient_dpc,
										nr_seq_dpc_quest,
										nr_order,
										ds_content,
										nm_usuario,
										dt_atualizacao,
										nm_usuario_nrec,
										dt_atualizacao_nrec
									) values (
										nextval('w_dpc_export_seq'),
										r01_w.nr_seq_patient_dpc,
										r01_w.nr_seq_questionnaire,
										nr_order_w,
										ds_line_w,
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp()
									);

									commit;
									end if;
								end if;
								payload_value_counter := 0;
								end;
								end loop;

								qt_count_w := 1;
							else
								CALL dpc_pkg.update_payload_data(w_ds_value, ds_payload_data_w, r03_w.ds_column, cd_index_json_w);
								qt_count_w := qt_count_w + 1;

							end if;
						end;
					end loop;
					close c03;

				end;
			end loop;
			close c02;

		end;
	end loop;
	close c01;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dpc_pkg.export_dpc_questionnaire_file ( nr_atendimento_p bigint, nr_seq_patient_dpc_p bigint, cd_pessoa_fisica_p text, dt_start_p timestamp, dt_end_p timestamp, cd_department_p bigint, si_discharge_p text, si_questionnaire_status_p text, nm_usuario_p text, si_reacquisition_p text default 'N') FROM PUBLIC;
