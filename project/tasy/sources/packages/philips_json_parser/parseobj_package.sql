-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION philips_json_parser.parseobj (tokens lTokens, indx INOUT integer) AS $body$
DECLARE

    type memmap is table of bigint index by varchar(4000);
    mymap memmap;
    nullelemfound boolean := false;

    obj philips_json;
    tok rToken;
    mem_name varchar(4000);
    arr p_json_value_array := p_json_value_array();

BEGIN    
    while(indx <= tokens.count) loop
      tok := tokens(indx);

      case tok.type_name
      when 'STRING' then
      
        mem_name := substr(tok.data, 1, 4000);
        begin
          if (coalesce(mem_name::text, '') = '') then
            if (nullelemfound) then
              CALL philips_json_parser.p_error('Duplicate empty member: ', tok);
            else
              nullelemfound := true;
            end if;
          elsif ((mymap(mem_name) IS NOT NULL AND (mymap(mem_name))::text <> '')) then
            CALL philips_json_parser.p_error('Duplicate member name: '||mem_name, tok);
          end if;
        exception
          when no_data_found then mymap(mem_name) := 1;
        end;

        indx := indx + 1;
        if (indx > tokens.count) then CALL philips_json_parser.p_error('Unexpected end of input', tok); end if;
        tok := tokens(indx);
        indx := indx + 1;
        if (indx > tokens.count) then CALL philips_json_parser.p_error('Unexpected end of input', tok); end if;
        if (tok.type_name = ':') then

          declare
            jmb philips_json_value;
            x bigint;
          begin
            x := arr.count + 1;
            indx := philips_json_parser.parsemem(tokens, indx, mem_name, x);
            arr.extend;
            arr(x) := jmb;
          end;
        else
          CALL philips_json_parser.p_error('Expected '':''', tok);
        end if;

        if (indx > tokens.count) then CALL philips_json_parser.p_error('Unexpected end of input', tok); end if;

        tok := tokens(indx);
        if (tok.type_name = ',') then

          indx := indx + 1;
          tok := tokens(indx);
          if (tok.type_name = '}') then
            CALL philips_json_parser.p_error('Premature exit in philips_json object', tok);
          end if;
        elsif (tok.type_name != '}') then
           CALL philips_json_parser.p_error('A comma seperator is probably missing', tok);
        end if;
      when '}' then
        obj := philips_json();
        obj.json_data := arr;
        return;
      else
        CALL philips_json_parser.p_error('Expected string or }', tok);
      end case;
    end loop;

    CALL philips_json_parser.p_error('} not found', tokens(indx-1));

    return;

  end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION philips_json_parser.parseobj (tokens lTokens, indx INOUT integer) FROM PUBLIC;
