-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION philips_json_parser.parsearr (tokens lTokens, indx INOUT integer) AS $body$
DECLARE

    e_arr p_json_value_array := p_json_value_array();
    ret_list philips_json_list := philips_json_list();
    v_count bigint := 0;
    tok rToken;

BEGIN
    
    if (indx > tokens.count) then CALL philips_json_parser.p_error('more elements in array was excepted', tok); end if;
    tok := tokens(indx);
    while(tok.type_name != ']') loop
      e_arr.extend;
      v_count := v_count + 1;
      case tok.type_name
        when 'TRUE' then e_arr(v_count) := philips_json_value(true);
        when 'FALSE' then e_arr(v_count) := philips_json_value(false);
        when 'NULL' then e_arr(v_count) := philips_json_value;
        when 'STRING' then e_arr(v_count) := case when (tok.data_overflow IS NOT NULL AND tok.data_overflow::text <> '') then philips_json_value(tok.data_overflow) else philips_json_value(tok.data) end;
        when 'ESTRING' then e_arr(v_count) := philips_json_value(tok.data_overflow, false);
        when 'NUMBER' then e_arr(v_count) := philips_json_value((replace(tok.data, '.', current_setting('philips_json_parser.decimalpoint')::varchar(1)))::numeric );
        when '[' then
          declare e_list philips_json_list; begin
            indx := indx + 1;
            indx := philips_json_parser.parsearr(tokens, indx);
            e_arr(v_count) := e_list.to_json_value;
          end;
        when '{' then
          indx := indx + 1;
          e_arr(v_count) := parseObj[tokens, indx].to_json_value;
        else
          philips_json_parser.p_error('Expected a value', tok);
      end case;
      indx := indx + 1;
      if (indx > tokens.count) then CALL philips_json_parser.p_error('] not found', tok); end if;
      tok := tokens(indx);
      if (tok.type_name = ',') then --advance
        indx := indx + 1;
        if (indx > tokens.count) then CALL philips_json_parser.p_error('more elements in array was excepted', tok); end if;
        tok := tokens(indx);
        if (tok.type_name = ']') then --premature exit
          CALL philips_json_parser.p_error('Premature exit in array', tok);
        end if;
      elsif (tok.type_name != ']') then --error
        CALL philips_json_parser.p_error('Expected , or ]', tok);
      end if;

    end loop;
    ret_list.list_data := e_arr;
    return;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION philips_json_parser.parsearr (tokens lTokens, indx INOUT integer) FROM PUBLIC;
