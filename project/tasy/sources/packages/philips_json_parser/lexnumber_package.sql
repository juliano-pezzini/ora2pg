-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION philips_json_parser.lexnumber (jsrc INOUT json_src, tok INOUT rToken, indx INOUT integer) AS $body$
DECLARE

    numbuf varchar(4000) := '';
    buf varchar(4);
    checkLoop boolean;

BEGIN
    jsrc := philips_json_parser.next_char(indx, jsrc);
    if (buf = '-') then numbuf := '-'; indx := indx + 1; end if;
    jsrc := philips_json_parser.next_char(indx, jsrc);

    if (buf = '0') then
      numbuf := numbuf || '0'; indx := indx + 1;
      jsrc := philips_json_parser.next_char(indx, jsrc);
    elsif (buf >= '1' and buf <= '9') then
      numbuf := numbuf || buf; indx := indx + 1;

      jsrc := philips_json_parser.next_char(indx, jsrc);
      while(buf >= '0' and buf <= '9') loop
        numbuf := numbuf || buf; indx := indx + 1;
        jsrc := philips_json_parser.next_char(indx, jsrc);
      end loop;
    end if;

    if (buf = '.') then
      numbuf := numbuf || buf; indx := indx + 1;
      jsrc := philips_json_parser.next_char(indx, jsrc);
      checkLoop := FALSE;
      while(buf >= '0' and buf <= '9') loop
        checkLoop := TRUE;
        numbuf := numbuf || buf; indx := indx + 1;
        jsrc := philips_json_parser.next_char(indx, jsrc);
      end loop;
      if (not checkLoop) then
        CALL philips_json_parser.s_error('Expected: digits in fraction', tok);
      end if;
    end if;

    if (buf in ('e', 'E')) then
      numbuf := numbuf || buf; indx := indx + 1;
      jsrc := philips_json_parser.next_char(indx, jsrc);
      if (buf = '+' or buf = '-') then
        numbuf := numbuf || buf; indx := indx + 1;
        jsrc := philips_json_parser.next_char(indx, jsrc);
      end if;
      checkLoop := FALSE;
      while(buf >= '0' and buf <= '9') loop
        checkLoop := TRUE;
        numbuf := numbuf || buf; indx := indx + 1;
        jsrc := philips_json_parser.next_char(indx, jsrc);
      end loop;
      if (not checkLoop) then
        CALL philips_json_parser.s_error('Expected: digits in exp', tok);
      end if;
    end if;

    tok.data := numbuf;
    return;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION philips_json_parser.lexnumber (jsrc INOUT json_src, tok INOUT rToken, indx INOUT integer) FROM PUBLIC;
