-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE FUNCTION pkg_ventilator_days.get_tab_cd_pes_fis (P_START_DATE timestamp, P_END_DATE timestamp, P_YEAR bigint, P_QUARTER bigint, P_ESTAB bigint, P_SETOR bigint) RETURNS SETOF T_TAB_CD_PES_FIS AS $body$
DECLARE


  V_START_DATE timestamp;
  V_END_DATE   timestamp;
  NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;

  C_CD_PES_FIS CURSOR FOR
    SELECT DISTINCT UN.CD_PESSOA_FISICA
      FROM (SELECT NR_ATENDIMENTO,
                   CD_PESSOA_FISICA,
                   CD_ESTABELECIMENTO,
                   CD_SETOR_ATENDIMENTO,
                   DT_INI,
                   DT_FIM,
                   DT_ENTRADA,
                   DT_ALTA,
                   DT_ENTRADA_SETOR,
                   DT_SAIDA_SETOR
              FROM (SELECT U.NR_ATENDIMENTO,
                           AP.CD_PESSOA_FISICA,
                           S.CD_ESTABELECIMENTO,
                           U.CD_SETOR_ATENDIMENTO,
                           PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                           PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                           AP.DT_ENTRADA,
                           AP.DT_ALTA,
                           MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                           PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                U.DT_ENTRADA_UNIDADE,
                                                                U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR                                              
                      FROM (SELECT DISTINCT P.NR_ATENDIMENTO, 
                                            P.CD_PESSOA_FISICA,
                                            P.DT_ENTRADA,
                                            P.DT_ALTA 
                              FROM ATEND_PAC_DISPOSITIVO A,
                                   ATENDIMENTO_PACIENTE P 
                             WHERE A.NR_ATENDIMENTO = P.NR_ATENDIMENTO   
                               AND A.DT_INSTALACAO <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                               AND (coalesce(A.DT_RETIRADA::text, '') = '' OR
                                    A.DT_RETIRADA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE))
                               AND P.DT_ENTRADA <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                               AND (coalesce(P.DT_ALTA::text, '') = '' OR
                                    P.DT_ALTA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE))
                               AND EXISTS (SELECT 1
                                      FROM DISPOSITIVO D
                                     WHERE D.NR_SEQUENCIA = A.NR_SEQ_DISPOSITIVO
                                       AND D.IE_CLASSIF_DISP_NISS = 'VMI')) AP,
                           ATEND_PACIENTE_UNIDADE U,
                           SETOR_ATENDIMENTO S
                     WHERE AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                       AND S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                       AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO)   
                       AND CASE WHEN coalesce(P_ESTAB, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(P_ESTAB, 0)
                       AND CASE WHEN coalesce(P_SETOR, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(P_SETOR, 0)
                       AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                       AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                       AND U.DT_ENTRADA_UNIDADE <= PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                       AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                    U.DT_ENTRADA_UNIDADE,
                                                                    U.CD_SETOR_ATENDIMENTO),
                               PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                           PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                     GROUP BY U.NR_ATENDIMENTO,
                              AP.CD_PESSOA_FISICA,
                              S.CD_ESTABELECIMENTO,
                              U.CD_SETOR_ATENDIMENTO,
                              AP.DT_ENTRADA,
                              AP.DT_ALTA,
                              PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                   U.DT_ENTRADA_UNIDADE,
                                                                   U.CD_SETOR_ATENDIMENTO)) UN
             WHERE (coalesce(DT_ALTA::text, '') = '' OR DT_ENTRADA_SETOR <= DT_ALTA)
               AND (coalesce(DT_SAIDA_SETOR::text, '') = '' OR DT_SAIDA_SETOR >= DT_ENTRADA)) UN,
           ATEND_PAC_DISPOSITIVO AD
     WHERE AD.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
       AND EXISTS (SELECT 1
              FROM DISPOSITIVO D
             WHERE D.NR_SEQUENCIA = AD.NR_SEQ_DISPOSITIVO
               AND D.IE_CLASSIF_DISP_NISS = 'VMI')
       AND AD.DT_INSTALACAO <= LEAST(UN.DT_FIM, coalesce(UN.DT_SAIDA_SETOR, UN.DT_FIM))
       AND coalesce(AD.DT_RETIRADA, GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI)) >= GREATEST(UN.DT_ENTRADA_SETOR, UN.DT_INI);

  TYPE T_CD_PES_FIS IS TABLE OF C_CD_PES_FIS%ROWTYPE;
  R_CD_PES_FIS T_CD_PES_FIS;

  
BEGIN
  
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;

    IF (P_YEAR IS NOT NULL AND P_YEAR::text <> '') AND (P_QUARTER IS NOT NULL AND P_QUARTER::text <> '') THEN
    
      SELECT GREATEST(INI, coalesce(P_START_DATE, INI)) INI,
             LEAST(FIM, coalesce(P_END_DATE, FIM)) FIM
        INTO STRICT V_START_DATE,
             V_END_DATE
        FROM (SELECT TO_DATE(LPAD((P_QUARTER * 3) - 2, 2, '0') || P_YEAR, 'MMYYYY') INI,
                     LAST_DAY(TO_DATE(LPAD((P_QUARTER * 3), 2, '0') || P_YEAR, 'MMYYYY')) FIM
                ) alias13
       WHERE INI <= coalesce(P_END_DATE, INI)
         AND FIM >= coalesce(P_START_DATE, FIM);

      OPEN C_CD_PES_FIS;
      LOOP
        FETCH C_CD_PES_FIS BULK COLLECT INTO R_CD_PES_FIS LIMIT 1000;

          BEGIN
            FOR i IN R_CD_PES_FIS.FIRST..R_CD_PES_FIS.LAST LOOP
              RETURN NEXT R_CD_PES_FIS[i].CD_PESSOA_FISICA;
            END LOOP;
          EXCEPTION WHEN no_data_found THEN
            NULL;
          END;

        EXIT WHEN NOT FOUND; /* apply on C_CD_PES_FIS */
     
      END LOOP;
      CLOSE C_CD_PES_FIS;
  
    END IF;

    RETURN;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_ventilator_days.get_tab_cd_pes_fis (P_START_DATE timestamp, P_END_DATE timestamp, P_YEAR bigint, P_QUARTER bigint, P_ESTAB bigint, P_SETOR bigint) FROM PUBLIC;
