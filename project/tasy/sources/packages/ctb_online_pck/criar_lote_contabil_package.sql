-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_online_pck.criar_lote_contabil ( cd_tipo_lote_contabil_p lote_contabil.cd_tipo_lote_contabil%type, cd_estabelecimento_p lote_contabil.cd_estabelecimento%type, dt_referencia_p lote_contabil.dt_referencia%type, nm_usuario_p lote_contabil.nm_usuario%type, nr_lote_contabil_p INOUT lote_contabil.nr_lote_contabil%type, cd_convenio_p convenio.cd_convenio%type default null, ie_tipo_convenio_p convenio.ie_tipo_convenio%type default null, nr_grupo_contab_nf_p operacao_nota.nr_seq_grupo_contab%type default null) AS $body$
DECLARE


nr_seq_mes_ref_w        ctb_mes_ref.nr_sequencia%type;
nr_lote_contabil_w      lote_contabil.nr_lote_contabil%type;
cd_empresa_w            empresa.cd_empresa%type;
dt_inicio_ref_w         lote_contabil.dt_inicio_ref%type        := dt_referencia_p;
dt_fim_ref_w            lote_contabil.dt_fim_ref%type;
dt_inicio_ref_ww        lote_contabil.dt_inicio_ref%type        := null;
dt_fim_ref_ww           lote_contabil.dt_fim_ref%type           := null;
ie_periodo_w            ctb_regra_geracao_lote.ie_periodo%type;
qt_periodo_w            ctb_regra_geracao_lote.qt_periodo%type;
dt_referencia_w         lote_contabil.dt_inicio_ref%type;
cd_convenio_w           convenio.cd_convenio%type;
ie_tipo_convenio_w      convenio.ie_tipo_convenio%type;
ie_grupo_contab_nota_w  lote_contabil_parametro.ds_valor_parametro%type;


BEGIN

    cd_empresa_w := obter_empresa_estab(cd_estabelecimento_p);

    if (cd_tipo_lote_contabil_p = 6) then
        begin
        /* Lote Receita */


        select  y.ie_periodo,
                y.qt_periodo,
                y.cd_convenio,
                y.ie_tipo_convenio
        into STRICT    ie_periodo_w,
                qt_periodo_w,
                cd_convenio_w,
                ie_tipo_convenio_w
        from (SELECT  a.ie_periodo,
                        a.qt_periodo,
                        a.cd_convenio,
                        a.ie_tipo_convenio
                from    ctb_regra_geracao_lote_rec a
                where   coalesce(a.cd_estab_exclusivo,cd_estabelecimento_p) = cd_estabelecimento_p
                and     coalesce(a.ie_tipo_convenio,coalesce(ie_tipo_convenio_p,0)) = coalesce(ie_tipo_convenio_p,0)
                and     coalesce(a.cd_convenio,coalesce(cd_convenio_p,0)) = coalesce(cd_convenio_p,0)
                and     a.cd_empresa = cd_empresa_w
                order by coalesce(a.cd_convenio,0) desc,
                        coalesce(a.ie_tipo_convenio,0) desc,
                        coalesce(a.cd_estab_exclusivo,0) desc) y LIMIT 1;
        exception
            when no_data_found then
                -- Nao existe regra de geracao de lote contabil para o convenio informado

                CALL wheb_mensagem_pck.exibir_mensagem_abort(1115991);
            when others then
                -- Nao existe regra de geracao de lote contabil para o convenio informado

                CALL wheb_mensagem_pck.exibir_mensagem_abort(1115991);
        end;
    elsif (cd_tipo_lote_contabil_p in (2, 51)) then
        /* Lote de Notas Fiscais (Entrada e Saida) */


        begin
        select  x.ie_periodo,
                x.qt_periodo,
                CASE WHEN coalesce(x.nr_seq_grupo_contab,0)=0 THEN 'A'  ELSE x.nr_seq_grupo_contab END
        into STRICT    ie_periodo_w,
                qt_periodo_w,
                ie_grupo_contab_nota_w
        from (SELECT a.ie_periodo,
                        a.qt_periodo,
                        a.nr_seq_grupo_contab
                from    ctb_regra_geracao_lote a
                where   a.cd_tipo_lote_contabil = cd_tipo_lote_contabil_p
                and     a.cd_empresa = cd_empresa_w
                and     coalesce(cd_estab_exclusivo,cd_estabelecimento_p) = cd_estabelecimento_p
                and     coalesce(a.nr_seq_grupo_contab,0) = nr_grupo_contab_nf_p
                order by coalesce(cd_estab_exclusivo,0) desc) x LIMIT 1;
        exception
            when no_data_found then
                ie_periodo_w    := 'M';
                qt_periodo_w    := 30;
                ie_grupo_contab_nota_w := 'A';
            when others then
                ie_periodo_w    := 'M';
                qt_periodo_w    := 30;
                ie_grupo_contab_nota_w := 'A';
        end;
    else
        begin
        select  y.ie_periodo,
                y.qt_periodo
        into STRICT    ie_periodo_w,
                qt_periodo_w
        from (SELECT ie_periodo,
                        qt_periodo
                from    ctb_regra_geracao_lote a
                where   a.cd_tipo_lote_contabil = cd_tipo_lote_contabil_p
                and     a.cd_empresa = cd_empresa_w
                and     coalesce(cd_estab_exclusivo,cd_estabelecimento_p) = cd_estabelecimento_p
                order by coalesce(cd_estab_exclusivo,0) desc) y LIMIT 1;
        exception
            when no_data_found then
                ie_periodo_w := 'M';
                qt_periodo_w := 30;
            when others then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(279953, 'DS_ERRO=' || substr(sqlerrm, 1, 255));
        end;
    end if;

    --D = Diario

    --M = Mensal

    --S = Semanal

    --Q = Quinzenal

    --C = Customizado


    if (ie_periodo_w = 'D') then
        dt_inicio_ref_w := trunc(dt_referencia_p);
        dt_fim_ref_w    := fim_dia(dt_referencia_p);
    elsif (ie_periodo_w = 'M') then
        dt_inicio_ref_w := trunc(dt_referencia_p,'MONTH');
        dt_fim_ref_w    := fim_dia(trunc(last_day(dt_referencia_p)));
    elsif (ie_periodo_w = 'S') then
        dt_inicio_ref_w := trunc(dt_referencia_p,'day');
        dt_fim_ref_w    := fim_dia(trunc(dt_referencia_p,'day') + 6);

        if (to_char(dt_inicio_ref_w,'MM') < to_char(dt_fim_ref_w,'MM')) then
            dt_inicio_ref_ww := trunc(dt_fim_ref_w,'MONTH');
            dt_fim_ref_ww    := fim_dia(dt_fim_ref_w);
            dt_inicio_ref_w  := trunc(dt_inicio_ref_w);
            dt_fim_ref_w     := fim_dia(fim_mes(trunc(dt_inicio_ref_w,'MONTH')));
        end if;
    elsif (ie_periodo_w = 'Q') then
        if (to_char(dt_referencia_p,'DD') <= 15) then
            dt_inicio_ref_w := trunc(dt_referencia_p,'MONTH');
            dt_fim_ref_w    := fim_dia(trunc(dt_referencia_p,'MONTH') + 14);
        else
            dt_inicio_ref_w := trunc(dt_referencia_p,'MONTH') + 15;
            dt_fim_ref_w    := fim_dia(last_day(dt_referencia_p));
        end if;
    elsif (ie_periodo_w = 'C') then
        dt_inicio_ref_w := trunc(dt_referencia_p);
        dt_fim_ref_w    := fim_dia(dt_referencia_p + qt_periodo_w);
    end if;

    nr_seq_mes_ref_w := ctb_online_pck.get_ctb_mes_ref(dt_inicio_ref_w, cd_empresa_w, nm_usuario_p, nr_seq_mes_ref_w);

    select  coalesce(max(nr_lote_contabil),0) + 1
    into STRICT    nr_lote_contabil_w
    from    lote_contabil;

    if (cd_tipo_lote_contabil_p in (3, 8, 17, 25, 26, 52, 53)) then
        dt_referencia_w := fim_mes(dt_inicio_ref_w);
    else
        dt_referencia_w := dt_inicio_ref_w;
    end if;

    nr_lote_contabil_p := nr_lote_contabil_w;

    insert into lote_contabil(
        nr_lote_contabil,
        dt_referencia,
        cd_tipo_lote_contabil,
        dt_atualizacao,
        nm_usuario,
        cd_estabelecimento,
        ie_situacao,
        vl_debito,
        vl_credito,
        dt_integracao,
        dt_atualizacao_saldo,
        dt_consistencia,
        nm_usuario_original,
        nr_seq_mes_ref,
        ie_encerramento,
        ds_observacao,
        dt_inicio_ref,
        dt_fim_ref,
        ie_status_origem,
        dt_atualizacao_nrec,
        nm_usuario_nrec)
    values (
        nr_lote_contabil_w,
        dt_referencia_w,
        cd_tipo_lote_contabil_p,
        clock_timestamp(),
        nm_usuario_p,
        cd_estabelecimento_p,
        'A',
        null,
        null,
        null,
        null,
        null,
        nm_usuario_p,
        nr_seq_mes_ref_w,
        'N',
        wheb_mensagem_pck.get_texto(1076452),
        dt_inicio_ref_w,
        dt_fim_ref_w,
        'SO',
        clock_timestamp(),
        nm_usuario_p);

       commit;

    if (dt_inicio_ref_ww IS NOT NULL AND dt_inicio_ref_ww::text <> '' AND dt_fim_ref_ww IS NOT NULL AND dt_fim_ref_ww::text <> '') then /* Ajsute para os lotes semanais quando viram o mes*/


        nr_seq_mes_ref_w := ctb_online_pck.get_ctb_mes_ref(dt_inicio_ref_ww, cd_empresa_w, nm_usuario_p, nr_seq_mes_ref_w);

        select  coalesce(max(nr_lote_contabil),0) + 1
        into STRICT    nr_lote_contabil_w
        from    lote_contabil;

        insert into lote_contabil(
            nr_lote_contabil,
            dt_referencia,
            cd_tipo_lote_contabil,
            dt_atualizacao,
            nm_usuario,
            cd_estabelecimento,
            ie_situacao,
            vl_debito,
            vl_credito,
            dt_integracao,
            dt_atualizacao_saldo,
            dt_consistencia,
            nm_usuario_original,
            nr_seq_mes_ref,
            ie_encerramento,
            ds_observacao,
            dt_inicio_ref,
            dt_fim_ref,
            ie_status_origem,
            dt_atualizacao_nrec,
            nm_usuario_nrec)
        values (
            nr_lote_contabil_w,
            dt_inicio_ref_ww,
            cd_tipo_lote_contabil_p,
            clock_timestamp(),
            nm_usuario_p,
            cd_estabelecimento_p,
            'A',
            null,
            null,
            null,
            null,
            null,
            nm_usuario_p,
            nr_seq_mes_ref_w,
            'N',
            wheb_mensagem_pck.get_texto(1076452),
            dt_inicio_ref_ww,
            dt_fim_ref_ww,
            'SO',
            clock_timestamp(),
            nm_usuario_p);

        if (dt_referencia_p >= dt_inicio_ref_ww) then

            nr_lote_contabil_p := nr_lote_contabil_w;

        end if;

    end if;

    if (cd_tipo_lote_contabil_p = 6) then

        CALL ctb_online_pck.inserir_lote_contab_param(
            nr_lote_contabil_w,
            cd_tipo_lote_contabil_p,
            3,
            clock_timestamp(),
            nm_usuario_p,
            cd_convenio_w);

        CALL ctb_online_pck.inserir_lote_contab_param(
            nr_lote_contabil_w,
            cd_tipo_lote_contabil_p,
            5,
            clock_timestamp(),
            nm_usuario_p,
            ie_tipo_convenio_w);

    elsif (cd_tipo_lote_contabil_p in (2, 51)) then

        CALL ctb_online_pck.inserir_lote_contab_param(
            nr_lote_contabil_w,
            cd_tipo_lote_contabil_p,
            null,
            clock_timestamp(),
            nm_usuario_p,
            null,
            dt_referencia_w,
            ie_grupo_contab_nota_w);
    end if;

    commit;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_online_pck.criar_lote_contabil ( cd_tipo_lote_contabil_p lote_contabil.cd_tipo_lote_contabil%type, cd_estabelecimento_p lote_contabil.cd_estabelecimento%type, dt_referencia_p lote_contabil.dt_referencia%type, nm_usuario_p lote_contabil.nm_usuario%type, nr_lote_contabil_p INOUT lote_contabil.nr_lote_contabil%type, cd_convenio_p convenio.cd_convenio%type default null, ie_tipo_convenio_p convenio.ie_tipo_convenio%type default null, nr_grupo_contab_nf_p operacao_nota.nr_seq_grupo_contab%type default null) FROM PUBLIC;
