-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_online_pck.ctb_consistir_lote ( nr_lote_contabil_p bigint, ds_erro_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


ds_exception_w                  varchar(4000);
ds_erro_w                       varchar(2000) := null;
ds_erro_ww                      varchar(2000) := null;
ds_erro_movto_w                 ctb_movimento.ds_consistencia%type;
ds_log_lote_w                   varchar(2000);
vl_total_debito_w               ctb_movimento.vl_movimento%type := 0;
vl_total_credito_w              ctb_movimento.vl_movimento%type := 0;
ie_centro_custo_inativo_w       varchar(01);
ie_encerramento_w               lote_contabil.ie_encerramento%type;
cd_empresa_w                    ctb_mes_ref.cd_empresa%type;
cd_estabelecimento_w            lote_contabil.cd_estabelecimento%type;
ie_movto_valor_zerado_w         varchar(1);
ie_movto_valor_negativo_w       varchar(1);
ie_movto_centro_estab_w         varchar(1);
ie_consistir_data_movto_w       varchar(1);
ie_consiste_movto_pendente_w    varchar(1);
ie_consiste_revisao_w           tipo_lote_contabil.ie_consiste_revisao%type;
dt_referencia_w                 ctb_mes_ref.dt_referencia%type;
current_setting('ctb_online_pck.cd_tipo_lote_contabil_w')::ctb_regra_estab_dif.cd_tipo_lote_contabil%type         tipo_lote_contabil.cd_tipo_lote_contabil%type;
qt_tipo_lote_pl_w               bigint;
qt_mov_lote_pl_w                bigint;
ds_consistencia_w               ctb_movimento.ds_consistencia%type;
ie_ativo_const                  constant      varchar(01) := 'A';
ie_inativo_const                constant      varchar(01) := 'I';
ie_not_const                    constant      varchar(01) := 'N';
ie_yes_const                    constant      varchar(01) := 'S';
ie_x_const                      constant      varchar(01) := 'X';
ie_tipo_lote_const              constant      integer(02)       := 54;
ie_natureza_sped_const          constant      varchar(03) := '03';
mask_date_const                 constant      varchar(10) := 'dd/mm/yyyy';
tam_subst_reduzida_const        constant      integer(03)       := 255;
tam_subst_const                 constant      integer(04)       := 2000;
msg_280940                      constant      integer(06)       := 280940;
msg_280941                      constant      integer(06)       := 280941;
msg_280942                      constant      integer(06)       := 280942;
msg_280943                      constant      integer(06)       := 280943;
msg_280944                      constant      integer(06)       := 280944;
msg_280945                      constant      integer(06)       := 280945;
msg_280946                      constant      integer(06)       := 280946;
msg_280947                      constant      integer(06)       := 280947;
msg_280970                      constant      integer(06)       := 280970;
msg_280972                      constant      integer(06)       := 280972;
msg_280973                      constant      integer(06)       := 280973;
msg_280983                      constant      integer(06)       := 280983;
msg_280984                      constant      integer(06)       := 280984;
msg_280985                      constant      integer(06)       := 280985;
msg_280986                      constant      integer(06)       := 280986;
msg_280987                      constant      integer(06)       := 280987;
msg_280988                      constant      integer(06)       := 280988;
msg_280989                      constant      integer(06)       := 280989;
msg_280991                      constant      integer(06)       := 280991;
msg_280992                      constant      integer(06)       := 280992;
msg_280993                      constant      integer(06)       := 280993;
msg_280994                      constant      integer(06)       := 280994;
msg_280995                      constant      integer(06)       := 280995;
msg_280996                      constant      integer(06)       := 280996;
msg_280997                      constant      integer(06)       := 280997;
msg_317536                      constant      integer(06)       := 317536;
msg_317540                      constant      integer(06)       := 317540;
msg_351249                      constant      integer(06)       := 351249;
msg_378102                      constant      integer(06)       := 378102;
msg_404925                      constant      integer(06)       := 404945;
msg_448772                      constant      integer(06)       := 448772;
msg_1059206                     constant      integer(07)       := 1059206;
msg_1076393                     constant      integer(07)       := 1076393;



BEGIN

    CALL philips_contabil_pck.set_ie_consistindo_lote(ie_yes_const);

    CALL ctb_gerar_agrup_movto(nr_lote_contabil_p, nm_usuario_p);

    select  count(cd_tipo_lote_contabil)
    into STRICT    qt_tipo_lote_pl_w
    from    tipo_lote_contabil
    where   cd_tipo_lote_contabil = ie_tipo_lote_const;

    update  lote_contabil
    set     dt_consistencia   = NULL
    where   nr_lote_contabil = nr_lote_contabil_p;
    commit;

    if (coalesce(philips_contabil_pck.get_ie_reat_saldo(), ie_not_const) = ie_not_const) then

        update  ctb_movimento
        set     ds_consistencia   = NULL,
                ie_validacao      = NULL
        where   nr_lote_contabil = nr_lote_contabil_p
        and     (ds_consistencia IS NOT NULL AND ds_consistencia::text <> '');

    end if;

    commit;

    begin
        select  coalesce(b.ie_encerramento,ie_not_const),
                b.cd_estabelecimento,
                coalesce(a.ie_consiste_revisao,ie_yes_const),
                a.cd_tipo_lote_contabil
        into STRICT    ie_encerramento_w,
                cd_estabelecimento_w,
                ie_consiste_revisao_w,
                current_setting('ctb_online_pck.cd_tipo_lote_contabil_w')::ctb_regra_estab_dif.cd_tipo_lote_contabil%type
        from    tipo_lote_contabil a,
                lote_contabil b
        where   b.cd_tipo_lote_contabil = a.cd_tipo_lote_contabil
        and     b.nr_lote_contabil      = nr_lote_contabil_p;
    exception
        when no_data_found then
            ds_exception_w  := SUBSTR(SQLERRM, 1, tam_subst_const);
            CALL wheb_mensagem_pck.exibir_mensagem_abort( ds_mensagem_erro_p => ds_exception_w );
        when too_many_rows then
            ds_exception_w  := SUBSTR(SQLERRM, 1, tam_subst_const);
            CALL wheb_mensagem_pck.exibir_mensagem_abort( ds_mensagem_erro_p => ds_exception_w );
    end;

    begin
        select  b.cd_empresa,
                b.dt_referencia
        into STRICT    cd_empresa_w,
                dt_referencia_w
        from    ctb_mes_ref b,
                lote_contabil a
        where   a.nr_lote_contabil      = nr_lote_contabil_p
        and     a.nr_seq_mes_ref        = b.nr_sequencia;
    exception
        when no_data_found then
            ds_exception_w  := SUBSTR(SQLERRM, 1, tam_subst_const);
            CALL wheb_mensagem_pck.exibir_mensagem_abort( ds_mensagem_erro_p => ds_exception_w);
        when too_many_rows then
            ds_exception_w  := SUBSTR(SQLERRM, 1, tam_subst_const);
            CALL wheb_mensagem_pck.exibir_mensagem_abort( ds_mensagem_erro_p => ds_exception_w);
    end;

    ie_centro_custo_inativo_w       := coalesce(obter_valor_param_usuario(923, 43, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_yes_const);
    ie_movto_valor_zerado_w         := coalesce(obter_valor_param_usuario(923, 49, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_yes_const);
    ie_movto_valor_negativo_w       := coalesce(obter_valor_param_usuario(923, 51, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_not_const);
    ie_movto_centro_estab_w         := coalesce(obter_valor_param_usuario(923, 68, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_yes_const);
    ie_consistir_data_movto_w       := coalesce(obter_valor_param_usuario(923, 70, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_not_const);
    ie_consiste_movto_pendente_w    := coalesce(obter_valor_param_usuario(923, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), ie_not_const);

    select  coalesce(sum(vl_movimento),0)
    into STRICT    vl_total_debito_w
    from    ctb_movimento
    where   nr_lote_contabil = nr_lote_contabil_p
    and     (cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '');

    select  coalesce(sum(vl_movimento),0)
    into STRICT    vl_total_credito_w
    from    ctb_movimento
    where   nr_lote_contabil = nr_lote_contabil_p
    and     (cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '');

    if (vl_total_debito_w <> vl_total_credito_w) then

        ds_erro_w := wheb_mensagem_pck.get_texto(msg_280940) ||
                     wheb_mensagem_pck.get_texto(msg_280941) || vl_total_debito_w  ||
                     wheb_mensagem_pck.get_texto(msg_280942) || vl_total_credito_w || chr(13) || chr(10);

    end if;

    if (ie_movto_valor_zerado_w = ie_yes_const) then

        --Movimento contabil com valor zerado

        update  ctb_movimento
        set     ds_consistencia     = wheb_mensagem_pck.get_texto(msg_280943),
                ie_validacao        = '1'
        where   nr_lote_contabil    = nr_lote_contabil_p
        and     vl_movimento        = 0;
        commit;

    end if;

    if (ie_movto_valor_negativo_w  = ie_yes_const) then

        --Movimento contabil com valor negativo

        ds_consistencia_w := wheb_mensagem_pck.get_texto(msg_280944);
        update  ctb_movimento a
        set     a.ds_consistencia   = ds_consistencia_w,
                a.ie_validacao      = '2'
        where   a.nr_lote_contabil  = nr_lote_contabil_p
        and     a.vl_movimento      < 0;
        commit;

        update  ctb_movimento a
        set     a.ds_consistencia   = ds_consistencia_w,
                a.ie_validacao      = '2'
        where   a.nr_lote_contabil  = nr_lote_contabil_p
        and     exists (SELECT  1
                        from    ctb_movto_centro_custo b
                        where   b.nr_seq_movimento   = a.nr_sequencia
                        and     a.nr_lote_contabil   = nr_lote_contabil_p
                        and     b.vl_movimento       < 0);
        commit;

    end if;

    if (qt_tipo_lote_pl_w > 0) and (dt_referencia_w >=  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(to_date('01/12/2015', mask_date_const))) then

        --Informe o campo Mutacao PL pois a conta eh de Patrimonio Liquido

        update  ctb_movimento a
        set     a.ds_consistencia   = wheb_mensagem_pck.get_texto(msg_404925),
                a.ie_validacao      = '24'
        where   a.nr_lote_contabil  = nr_lote_contabil_p
        and     coalesce(a.nr_seq_mutacao_pl::text, '') = ''
        and     exists (SELECT  1
                        from    conta_contabil b
                        where   a.cd_conta_debito  = b.cd_conta_contabil
                        and     b.ie_natureza_sped = ie_natureza_sped_const

union all

                        SELECT  1
                        from    conta_contabil b
                        where   a.cd_conta_credito = b.cd_conta_contabil
                        and     b.ie_natureza_sped = ie_natureza_sped_const);
        commit;

        if (current_setting('ctb_online_pck.cd_tipo_lote_contabil_w')::ctb_regra_estab_dif.cd_tipo_lote_contabil%type = ie_tipo_lote_const) then

            select  count(nr_sequencia)
            into STRICT    qt_mov_lote_pl_w
            from    ctb_movimento a
            where   a.nr_lote_contabil         = nr_lote_contabil_p
            and     exists (SELECT  1
                            from    conta_contabil b
                            where   a.cd_conta_debito  = b.cd_conta_contabil
                            and     b.ie_natureza_sped = ie_natureza_sped_const

union all

                            SELECT  1
                            from    conta_contabil b
                            where   a.cd_conta_credito = b.cd_conta_contabil
                            and     b.ie_natureza_sped = ie_natureza_sped_const);

            if (qt_mov_lote_pl_w = 0) then

                --Deve existir pelo menos um movimento contabil em uma conta de Patrimonio Liquido neste lote

                update  ctb_movimento a
                set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_378102),
                        a.ie_validacao     = '23'
                where   a.nr_lote_contabil = nr_lote_contabil_p;
                commit;

            end if;

        end if;

    end if;

    --A conta contabil nao pode ser do tipo "Resultado" quando o lancamento eh extemporaneo.

    update  ctb_movimento a
    set     a.ds_consistencia     = wheb_mensagem_pck.get_texto(msg_1059206),
            a.ie_validacao        = '25'
    where   a.nr_lote_contabil    = nr_lote_contabil_p
    and     (a.dt_lancto_ext IS NOT NULL AND a.dt_lancto_ext::text <> '')
    and     exists ( SELECT 1
                     from    conta_contabil b,
                             ctb_grupo_conta c
                     where   c.ie_tipo           in ('R','C','D')
                     and     c.cd_grupo          = b.cd_grupo
                     and     b.cd_conta_contabil = a.cd_conta_credito

union all

                     SELECT 1
                     from    conta_contabil b,
                             ctb_grupo_conta c
                     where   c.ie_tipo           in ('R','C','D')
                     and     c.cd_grupo          = b.cd_grupo
                     and     b.cd_conta_contabil = a.cd_conta_debito );

    --Lancamento sem a apropriacao por centro de resultado. Esta conta contabil exige informacao do centro de custo.

    update  ctb_movimento a
    set     a.ds_consistencia     = wheb_mensagem_pck.get_texto(msg_280945),
            a.ie_validacao        = '3'
    where   a.nr_lote_contabil    = nr_lote_contabil_p
    and     ie_encerramento_w     = ie_not_const
    and     not exists ( SELECT  1
                         from    ctb_movto_centro_custo b
                         where   a.nr_sequencia  = b.nr_seq_movimento )
    and     exists ( select  1
                     from    conta_contabil b
                     where   a.cd_conta_debito   = b.cd_conta_contabil
                     and     b.ie_centro_custo   = ie_yes_const

union all

                     SELECT  1
                     from    conta_contabil b
                     where   a.cd_conta_credito  = b.cd_conta_contabil
                     and     b.ie_centro_custo   = ie_yes_const );
    commit;

    --Lancamento com a apropriacao indevida por centro de resultado. Esta conta contabil nao requer informacao do centro de custo.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280946),
            a.ie_validacao     = '4'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                     from    ctb_movto_centro_custo b
                     where   a.nr_sequencia          = b.nr_seq_movimento )
    and     not exists ( select  1
                         from    conta_contabil b
                         where   a.cd_conta_debito   = b.cd_conta_contabil
                         and     b.ie_centro_custo   in ('S','O')

union all

                         SELECT  1
                         from    conta_contabil b
                         where   a.cd_conta_credito  = b.cd_conta_contabil
                         and     b.ie_centro_custo   in ('S','O') );
    commit;

    --Lancamento com valor diferente da somatoria dos centros de custo.

    ds_consistencia_w := wheb_mensagem_pck.get_texto(msg_280947);

    merge into ctb_movimento x
    using( SELECT  a.nr_sequencia nr,
                      sum(b.vl_movimento) vl
              from    ctb_movimento a,
                      ctb_movto_centro_custo b
              where   a.nr_sequencia     = b.nr_seq_movimento
              and     a.nr_lote_contabil = nr_lote_contabil_p
              group by a.nr_sequencia
              having  count(*) > 0 ) y
    on (x.nr_sequencia = y.nr  and  x.vl_movimento <> y.vl)
    when matched then
    update
    set     x.ds_consistencia = ds_consistencia_w,
            x.ie_validacao    = '5';
    commit;

    --Existe diferenca de debito e credito no dia deste movimento.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280970),
            a.ie_validacao     = '6'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_movimento) in ( SELECT  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_movimento)
                                                                         from    ctb_movimento b
                                                                         where   b.nr_lote_contabil = nr_lote_contabil_p
                                                                         GROUP BY ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_movimento) );
    commit;

    if (ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(dt_referencia_w) >=  ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(to_date('01/04/2015', mask_date_const)) HAVING(sum(CASE WHEN coalesce(b.cd_conta_debito::text, '') = '' THEN 0  ELSE b.vl_movimento END ) <> sum(CASE WHEN coalesce(b.cd_conta_credito::text, '') = '' THEN 0  ELSE b.vl_movimento END ))
                                                                         ) then

        --Existem lancamentos com diferenca de debito e credito. Informacao obrigatoria para ECD (SPED Contabil)

        ds_consistencia_w := wheb_mensagem_pck.get_texto(msg_317540);

        update  ctb_movimento z
        set     z.ds_consistencia  = ds_consistencia_w,
                z.ie_validacao     = '21'
        where   z.nr_lote_contabil = nr_lote_contabil_p
        and     exists ( SELECT  1
                         from ( select  sum(x.vl_mov_deb) vl_mov_deb,
                                           sum(x.vl_mov_cred) vl_mov_cred,
                                           x.nr_agrup_sequencial
                                   from ( select   sum(a.vl_movimento) vl_mov_deb,
                                                      0 vl_mov_cred,
                                                      a.nr_agrup_sequencial
                                             from     ctb_movimento a
                                             where    a.nr_lote_contabil = nr_lote_contabil_p
                                             and      (cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '')
                                             group by a.nr_agrup_sequencial

union all

                                             SELECT   0 vl_mov_deb,
                                                      sum(a.vl_movimento) vl_mov_cred,
                                                      a.nr_agrup_sequencial
                                             from     ctb_movimento a
                                             where    a.nr_lote_contabil = nr_lote_contabil_p
                                             and      (cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '')
                                             group by a.nr_agrup_sequencial ) x
                                   group by x.nr_agrup_sequencial ) w
                         where   w.nr_agrup_sequencial = z.nr_agrup_sequencial
                         and     w.vl_mov_deb <> w.vl_mov_cred );
        commit;

        --Lancamentos sem fato contabil. Informacao obrigatoria para ECD (SPED Contabil).

        update  ctb_movimento a
        set     a.ds_consistencia = wheb_mensagem_pck.get_texto(msg_317536),
                a.ie_validacao    = '20'
        where   nr_lote_contabil  = nr_lote_contabil_p
        and     exists ( SELECT  1
                         from    ctb_movimento x
                         where   a.nr_sequencia              = x.nr_sequencia
                         and     a.nr_lote_contabil          = x.nr_lote_contabil
                         and     coalesce(x.nr_seq_agrupamento,0) = 0 );

    end if;

    commit;

    --O mes do movimento eh diferente da data de referencia

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280972),
            a.ie_validacao     = '7'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    ctb_mes_ref b
                    where   a.nr_seq_mes_ref     = b.nr_sequencia
                    and     ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(a.dt_movimento) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(b.dt_referencia) );
    commit;

    if (ie_consistir_data_movto_w = ie_yes_const) then

        --Dia do movimento eh maior que o dia do lote

        update  ctb_movimento a
        set     a.ds_consistencia       = wheb_mensagem_pck.get_texto(msg_280973),
                a.ie_validacao          = '8'
        where   a.nr_lote_contabil      = nr_lote_contabil_p
        and     exists ( SELECT  1
                        from    lote_contabil x
                        where   x.nr_lote_contabil       = a.nr_lote_contabil
                        and     pkg_date_utils.start_of( x.dt_referencia, 'DD', 0) < pkg_date_utils.start_of( a.dt_movimento, 'DD', 0 ) );
        commit;

    end if;

    --A conta contabil eh do tipo totalizadora

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280983),
            a.ie_validacao     = '9'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_debito = b.cd_conta_contabil
                    and     b.ie_tipo = 'T'

union

                    SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_credito = b.cd_conta_contabil
                    and     b.ie_tipo = 'T' );
    commit;

    --A conta contabil eh de outro estabelecimento

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280984),
            a.ie_validacao     = '10'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    conta_contabil_estab b
                    where   b.cd_conta_contabil = a.cd_conta_debito

union all

                    SELECT  1
                    from    conta_contabil_estab b
                    where   b.cd_conta_contabil = a.cd_conta_credito )
    and     not exists ( select  1
                        from    conta_contabil_estab c
                        where   c.cd_conta_contabil     = a.cd_conta_debito
                        and     c.cd_estabelecimento    = a.cd_estabelecimento
                        
union all

                        select  1
                        from    conta_contabil_estab c
                        where   c.cd_conta_contabil     = a.cd_conta_credito
                        and     c.cd_estabelecimento    = a.cd_estabelecimento );
    commit;

    --A conta contabil esta inativa.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280985),
            a.ie_validacao     = '11'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_debito = b.cd_conta_contabil
                    and     b.ie_situacao     <> ie_ativo_const

union

                    SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_credito = b.cd_conta_contabil
                    and     b.ie_situacao      <> ie_ativo_const );
    commit;

    --Falta informar o grupo no cadastro da conta.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280986),
            a.ie_validacao     = '12'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_debito = b.cd_conta_contabil
                    and     coalesce(b.cd_grupo::text, '') = ''

union

                    SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_credito = b.cd_conta_contabil
                    and     coalesce(b.cd_grupo::text, '') = '' );
    commit;

    --A conta contabil eh de outra empresa.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280987),
            a.ie_validacao     = '13'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_debito = b.cd_conta_contabil
                    and     b.cd_empresa      <> cd_empresa_w

union

                    SELECT  1
                    from    conta_contabil b
                    where   a.cd_conta_credito = b.cd_conta_contabil
                    and     b.cd_empresa       <> cd_empresa_w );
    commit;

    --Este historico eh de outra empresa.

    update  ctb_movimento a
    set     a.ds_consistencia   = wheb_mensagem_pck.get_texto(msg_280988),
            a.ie_validacao     = '14'
    where   a.nr_lote_contabil  = nr_lote_contabil_p
    and     not exists ( SELECT  1
                        from    historico_padrao_empresa_v b
                        where   a.cd_historico = b.cd_historico
                        and     b.cd_empresa   = cd_empresa_w );
    commit;

    --Este historico esta inativo.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280989),
            a.ie_validacao     = '15'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    historico_padrao b
                    where   a.cd_historico     = b.cd_historico
                    and     coalesce(b.ie_situacao,ie_inativo_const) <> ie_ativo_const );
    commit;

    --Movimento com centro de resultado totalizador.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280991),
            a.ie_validacao     = '16'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    centro_custo c,
                            ctb_movto_centro_custo b
                    where   b.nr_seq_movimento = a.nr_sequencia
                    and     b.cd_centro_custo  = c.cd_centro_custo
                    and     c.ie_tipo          = 'T' );
    commit;

    --Movimento com centro de resultado inativo.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280992),
            a.ie_validacao     = '17'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists( SELECT  1
                    from    centro_custo c,
                            ctb_movto_centro_custo b
                    where   b.nr_seq_movimento        = a.nr_sequencia
                    and     b.cd_centro_custo         = c.cd_centro_custo
                    and     c.ie_situacao             <> ie_ativo_const
                    and     ie_centro_custo_inativo_w = ie_yes_const
                    and     (((c.dt_fim_contabil IS NOT NULL AND c.dt_fim_contabil::text <> '')
                    and     c.dt_fim_contabil         <= a.dt_movimento)
                    or      coalesce(c.dt_fim_contabil::text, '') = '') );
    commit;

    if (ie_movto_centro_estab_w = ie_yes_const) then

        --Movimento com centro de resultado de estabelecimento diferente.

        update  ctb_movimento a
        set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280993),
                a.ie_validacao     = '18'
        where   a.nr_lote_contabil = nr_lote_contabil_p
        and     exists ( SELECT  1
                        from    centro_custo c,
                                ctb_movto_centro_custo b
                        where   b.nr_seq_movimento      = a.nr_sequencia
                        and     b.cd_centro_custo       = c.cd_centro_custo
                        and     c.cd_estabelecimento    <> cd_estabelecimento_w );

        commit;

     end if;

    if (ie_encerramento_w = ie_not_const and (ESTABLISHMENT_TIMEZONE_UTILS.startOfMonth(dt_referencia_w) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfYear(to_date('01/01/2019', mask_date_const)))) then

        update  ctb_movimento a
        set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280993),
                a.ie_validacao     = '18'
        where   a.nr_lote_contabil = nr_lote_contabil_p
        and     exists ( SELECT  1
                        from    centro_custo c,
                                ctb_movto_centro_custo b
                        where   b.nr_seq_movimento      = a.nr_sequencia
                        and     b.cd_centro_custo       = c.cd_centro_custo
                        and     c.cd_estabelecimento    <> a.cd_estabelecimento );
        commit;

    end if;

    --Centro de custo nao permitido, pertence a outra empresa.

    update  ctb_movimento a
    set     a.ds_consistencia  = wheb_mensagem_pck.get_texto(msg_351249),
            a.ie_validacao     = '22'
    where   a.nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                    from    estabelecimento b,
                            centro_custo c,
                            ctb_movto_centro_custo d,
                            empresa e
                    where   d.nr_seq_movimento       = a.nr_sequencia
                            and c.cd_estabelecimento = b.cd_estabelecimento
                            and b.cd_empresa         = e.cd_empresa
                            and d.cd_centro_custo    = c.cd_centro_custo
                            and e.cd_empresa         <> cd_empresa_w );
    commit;

    if (ie_consiste_movto_pendente_w = ie_yes_const) then
         if (ie_consiste_revisao_w = ie_yes_const) then

            --Movimento pendente para revisao.

            update  ctb_movimento
            set     ds_consistencia  = wheb_mensagem_pck.get_texto(msg_280994),
                    ie_validacao     = '19'
            where   nr_lote_contabil = nr_lote_contabil_p
            and     ie_revisado      <> ie_yes_const;

            commit;

        end if;

     end if;

    --Estabelecimento do movimento inativo.

    update  ctb_movimento a
    set     ds_consistencia  = wheb_mensagem_pck.get_texto(msg_1076393),
            ie_validacao     = '26'
    where   nr_lote_contabil = nr_lote_contabil_p
    and     exists ( SELECT  1
                     from    estabelecimento b
                     where   a.cd_estabelecimento               = b.cd_estabelecimento
                     and     coalesce(b.ie_situacao, ie_ativo_const) = ie_inativo_const );
    commit;

    select  coalesce(max(ds_consistencia), ie_x_const)
    into STRICT    ds_erro_movto_w
    from    ctb_movimento
    where   nr_lote_contabil  = nr_lote_contabil_p;

    if (ds_erro_movto_w  <> ie_x_const) then

        ds_erro_w       := substr(ds_erro_movto_w, 1, tam_subst_reduzida_const);

    end if;

    consiste_contas_vigencia_lote(nr_lote_contabil_p, ds_erro_ww);

    if (coalesce(ds_erro_ww,ie_x_const) = ie_x_const) then

        ctb_consistir_classif_lote(nr_lote_contabil_p, nm_usuario_p, ds_erro_ww);

    end if;

    if (ds_erro_ww IS NOT NULL AND ds_erro_ww::text <> '') then

        ds_erro_w := substr(ds_erro_w || ' - ' || ds_erro_ww, 1, tam_subst_const);

    end if;

    ds_log_lote_w   := substr(wheb_mensagem_pck.get_texto(msg_280996) || campo_mascara_virgula(vl_total_debito_w) ||
                              wheb_mensagem_pck.get_texto(msg_280995) || campo_mascara_virgula(vl_total_credito_w), 1, tam_subst_const);

    if (coalesce(ds_erro_w::text, '') = '') then

        update lote_contabil
        set     dt_consistencia         = clock_timestamp(),
                vl_debito               = vl_total_debito_w,
                vl_credito              = vl_total_credito_w
        where   nr_lote_contabil        = nr_lote_contabil_p;

        ds_log_lote_w := substr(wheb_mensagem_pck.get_texto(msg_280997) || campo_mascara_virgula(vl_total_debito_w) ||
                                wheb_mensagem_pck.get_texto(msg_280995) || campo_mascara_virgula(vl_total_credito_w), 1, tam_subst_const);

        commit;

    end if;

    CALL ctb_gravar_log_lote(nr_lote_contabil_p, 4, ds_log_lote_w,nm_usuario_p);
    CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
exception
    when no_data_found then
        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
        ds_exception_w := substr(sqlerrm,1,tam_subst_const);
        CALL wheb_mensagem_pck.exibir_mensagem_abort( nr_seq_mensagem_p => msg_448772,
                                                 vl_macros_p       => 'DS_ERRO='||ds_exception_w );
    when others then
        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
        ds_exception_w := substr(sqlerrm,1,tam_subst_const);
        CALL wheb_mensagem_pck.exibir_mensagem_abort( nr_seq_mensagem_p => msg_448772,
                                                 vl_macros_p       => 'DS_ERRO='||ds_exception_w );

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_online_pck.ctb_consistir_lote ( nr_lote_contabil_p bigint, ds_erro_p INOUT text, nm_usuario_p text) FROM PUBLIC;
