-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE ctb_online_pck.ctb_atualizar_saldo_movto (nr_seq_movto_p bigint, ie_acumular_p text, nm_usuario_p text, ie_commit_p text default 'S') AS $body$
DECLARE


  vl_movimento_w             ctb_movimento.vl_movimento%type;
  current_setting('ctb_online_pck.cd_conta_contabil_w')::ctb_regra_estab_dif.cd_conta_contabil%type        conta_contabil.cd_conta_contabil%type;
  ie_debito_credito_movito_w ctb_grupo_conta.ie_debito_credito%type;
  ie_debito_credito_w        ctb_grupo_conta.ie_debito_credito%type;
  ie_centro_custo_w          conta_contabil.ie_centro_custo%type;
  cd_estabelecimento_w       ctb_movimento.cd_estabelecimento%type;
  cd_classificacao_w         conta_contabil.cd_classificacao%type;
  cd_centro_custo_w          centro_custo.cd_centro_custo%type;
  nr_seq_saldo_w             ctb_saldo.nr_sequencia%type;
  cd_classif_sup_w           conta_contabil.cd_classif_superior%type;
  nr_lote_contabil_w         lote_contabil.nr_lote_contabil%type;
  nr_seq_mes_ref_w           ctb_mes_ref.nr_sequencia%type;
  dt_referencia_w            ctb_mes_ref.dt_referencia%type;
  vl_credito_w               ctb_movimento.vl_movimento%type;
  vl_debito_w                ctb_movimento.vl_movimento%type;
  cd_empresa_w               ctb_mes_ref.cd_empresa%type;
  ds_consistencia_w          ctb_movimento.ds_consistencia%type;
  nr_nivel_conta_w           integer;
  qt_movto_cc_w              integer;
  ie_eliminacao_lancto_w     ctb_movimento.ie_eliminacao_lancto%type;

  C01 CURSOR FOR
      SELECT b.cd_conta_contabil,
              'D',
              b.ie_centro_custo,
              c.ie_debito_credito,
              a.cd_classif_debito cd_classificacao,
              a.ie_eliminacao_lancto
      from   ctb_grupo_conta c,
              Conta_contabil  b,
              ctb_movimento   a
      where  a.nr_sequencia = nr_seq_movto_p
      and    a.cd_conta_debito = b.cd_conta_contabil
      and    b.cd_grupo = c.cd_grupo
      and    coalesce(a.dt_atualizacao_saldo::text, '') = ''

union all

      SELECT b.cd_conta_contabil,
              'C',
              b.ie_centro_custo,
              c.ie_debito_credito,
              a.cd_classif_credito cd_classificacao,
              a.ie_eliminacao_lancto
      from   ctb_grupo_conta c,
              Conta_contabil  b,
              ctb_movimento   a
      where  a.nr_sequencia = nr_seq_movto_p
      and    a.cd_conta_credito = b.cd_conta_contabil
      and    b.cd_grupo = c.cd_grupo
      and    coalesce(a.dt_atualizacao_saldo::text, '') = '';

  C02 CURSOR FOR
      SELECT cd_centro_custo,
              vl_movimento
      from   ctb_movto_centro_custo
      where  nr_seq_movimento = nr_seq_movto_p
      and    ie_centro_custo_w in ('S',
                                    'O')

union all

      SELECT null,
              vl_movimento_w
      
      where  ((ie_centro_custo_w = 'N') or (qt_movto_cc_w = 0));


BEGIN

  select a.vl_movimento,
          coalesce(a.cd_estabelecimento,b.cd_estabelecimento),
          a.nr_lote_contabil,
          a.ds_consistencia
  into STRICT   vl_movimento_w,
          cd_estabelecimento_w,
          nr_lote_contabil_w,
          ds_consistencia_w
  from   ctb_movimento a,
          lote_contabil b
  where  a.nr_sequencia = nr_seq_movto_p
  and    b.nr_lote_contabil = a.nr_lote_contabil;

  -- Verifica se o movimento nao possui inconsitencias, se tiver ignora o registro para nao atualizar o saldo

  if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
      update lote_contabil a
      set    a.dt_atualizacao_saldo  = NULL,
              a.dt_consistencia       = NULL
      where  a.nr_lote_contabil = nr_lote_contabil_w;
      return;
  end if;

  select count(nr_sequencia) into STRICT qt_movto_cc_w from ctb_movto_centro_custo where nr_seq_movimento = nr_seq_movto_p;

  select max(b.nr_sequencia),
          max(b.dt_referencia),
          max(b.cd_empresa)
  into STRICT   nr_seq_mes_ref_w,
          dt_referencia_w,
          cd_empresa_w
  from   lote_contabil a,
          ctb_mes_ref   b
  where  a.nr_seq_mes_ref = b.nr_sequencia
  and    a.nr_lote_contabil = nr_lote_contabil_w;

  open C01;
  loop

      fetch C01
          into current_setting('ctb_online_pck.cd_conta_contabil_w')::ctb_regra_estab_dif.cd_conta_contabil%type,
                ie_debito_credito_movito_w,
                ie_centro_custo_w,
                ie_debito_credito_w,
                cd_classificacao_w,
                ie_eliminacao_lancto_w;
      EXIT WHEN NOT FOUND; /* apply on C01 */

      begin
          if (ie_centro_custo_w = 'O') and (qt_movto_cc_w = 0) then
              ie_centro_custo_w := 'N';
          end if;

          cd_classif_sup_w := substr(ctb_obter_classif_conta_sup(cd_classificacao_w,
                                                                  dt_referencia_w,
                                                                  cd_empresa_w),
                                      1,40);
          nr_nivel_conta_w := CTB_Obter_Nivel_Classif_Conta(cd_classificacao_w);

          open C02;
          loop
              fetch C02
                  into cd_centro_custo_w,
                        vl_movimento_w;
              EXIT WHEN NOT FOUND; /* apply on C02 */
              begin

                  if (ie_debito_credito_movito_w = 'D') then
                      vl_debito_w := vl_movimento_w;
                  else
                      vl_credito_w := vl_movimento_w;
                  end if;

                  if (ie_debito_credito_w <> ie_debito_credito_movito_w) then
                      vl_movimento_w := vl_movimento_w * -1;
                  end if;

                  merge into ctb_saldo a
                  using(SELECT coalesce(max(nr_sequencia),0) nr_seq_saldo
                          from   ctb_saldo
                          where  nr_seq_mes_ref = nr_seq_mes_ref_w
                          and    cd_estabelecimento = cd_estabelecimento_w
                          and    cd_conta_contabil = current_setting('ctb_online_pck.cd_conta_contabil_w')::ctb_regra_estab_dif.cd_conta_contabil%type
                          and    coalesce(cd_centro_custo,0) = coalesce(cd_centro_custo_w,0)) b
                  on (b.nr_seq_saldo = a.nr_sequencia)
                  when matched then
                      update
                      set    dt_atualizacao   = clock_timestamp(),
                              vl_debito        = vl_debito + coalesce(vl_debito_w,0),
                              vl_credito       = vl_credito + coalesce(vl_credito_w,0),
                              vl_saldo         = vl_saldo + vl_movimento_w,
                              vl_movimento     = vl_movimento + vl_movimento_w,
                              vl_eliminacao    = coalesce(vl_eliminacao,0) + CASE WHEN ie_eliminacao_lancto_w='S' THEN vl_movimento_w  ELSE 0 END ,
                              nm_usuario       = nm_usuario_p,
                              cd_classificacao = cd_classificacao_w,
                              cd_classif_sup   = cd_classif_sup_w,
                              nr_nivel_conta   = nr_nivel_conta_w
                      where  nr_sequencia = b.nr_seq_saldo
                  when not matched then
                      insert(nr_sequencia,
                            nr_seq_mes_ref,
                            dt_atualizacao,
                            nm_usuario,
                            cd_estabelecimento,
                            cd_conta_contabil,
                            cd_centro_custo,
                            vl_debito,
                            vl_credito,
                            vl_movimento,
                            vl_saldo,
                            vl_eliminacao,
                            cd_classificacao,
                            cd_classif_sup,
                            nr_nivel_conta,
                            vl_encerramento)
                      values (nextval('ctb_saldo_seq'),
                            nr_seq_mes_ref_w,
                            clock_timestamp(),
                            nm_usuario_p,
                            cd_estabelecimento_w,
                            current_setting('ctb_online_pck.cd_conta_contabil_w')::ctb_regra_estab_dif.cd_conta_contabil%type,
                            cd_centro_custo_w,
                            coalesce(vl_debito_w,0),
                            coalesce(vl_credito_w,0),
                            vl_movimento_w,
                            vl_movimento_w,
                            CASE WHEN ie_eliminacao_lancto_w='S' THEN vl_movimento_w  ELSE 0 END ,
                            cd_classificacao_w,
                            cd_classif_sup_w,
                            nr_nivel_conta_w,
                            0);
              end;
          end loop;
          close C02;
      end;

  end loop;
  close C01;

  update ctb_movimento
  set    dt_atualizacao_saldo = clock_timestamp()
  where  nr_lote_contabil = nr_lote_contabil_w
  and    nr_sequencia = nr_seq_movto_p;

  CALL ctb_online_pck.atualizar_total_lote(nr_lote_contabil_w,'N');

  if (ie_commit_p = 'S') then
  commit;
  end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_online_pck.ctb_atualizar_saldo_movto (nr_seq_movto_p bigint, ie_acumular_p text, nm_usuario_p text, ie_commit_p text default 'S') FROM PUBLIC;
