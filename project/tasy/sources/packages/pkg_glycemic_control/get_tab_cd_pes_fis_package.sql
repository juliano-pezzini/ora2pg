-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE FUNCTION pkg_glycemic_control.get_tab_cd_pes_fis (P_START_DATE timestamp, P_END_DATE timestamp, P_YEAR bigint, P_QUARTER bigint, P_ESTAB bigint, P_SETOR bigint) RETURNS SETOF T_TAB_CD_PES_FIS AS $body$
DECLARE


  V_START_DATE timestamp;
  V_END_DATE   timestamp;
  NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;

  C_CD_PES_FIS CURSOR FOR
    SELECT DISTINCT CD_PESSOA_FISICA
      FROM (SELECT DISTINCT UN.CD_PESSOA_FISICA
              FROM (SELECT NR_ATENDIMENTO,
                           CD_PESSOA_FISICA,
                           CD_ESTABELECIMENTO,
                           CD_SETOR_ATENDIMENTO,
                           DT_INI,
                           DT_FIM,
                           DT_ENTRADA,
                           DT_ALTA,
                           DT_ENTRADA_SETOR,
                           DT_SAIDA_SETOR
                      FROM (SELECT U.NR_ATENDIMENTO,
                                   AP.CD_PESSOA_FISICA,
                                   S.CD_ESTABELECIMENTO,
                                   U.CD_SETOR_ATENDIMENTO,
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                                   AP.DT_ENTRADA,
                                   AP.DT_ALTA,
                                   MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR                                              
                              FROM (SELECT DISTINCT P.NR_ATENDIMENTO, 
                                                    P.CD_PESSOA_FISICA,
                                                    P.DT_ENTRADA,
                                                    P.DT_ALTA 
                                      FROM ATENDIMENTO_GLICEMIA A,
                                           ATENDIMENTO_PACIENTE P 
                                     WHERE A.NR_ATENDIMENTO = P.NR_ATENDIMENTO   
                                       AND (A.QT_GLICEMIA IS NOT NULL AND A.QT_GLICEMIA::text <> '')
                                       AND A.QT_GLICEMIA > 0
                                       AND A.QT_GLICEMIA <= 1500
                                       AND A.DT_CONTROLE BETWEEN P.DT_ENTRADA AND coalesce(P.DT_ALTA, A.DT_CONTROLE)
                                       AND A.DT_CONTROLE BETWEEN PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE)
                                                             AND PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                       AND P.DT_ENTRADA <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                       AND (coalesce(P.DT_ALTA::text, '') = '' OR
                                            P.DT_ALTA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE))) AP,
                                   ATEND_PACIENTE_UNIDADE U,
                                   SETOR_ATENDIMENTO S
                             WHERE AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                               AND S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                               AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO)
                               AND CASE WHEN coalesce(P_ESTAB, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(P_ESTAB, 0)
                               AND CASE WHEN coalesce(P_SETOR, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(P_SETOR, 0)
                               AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                               AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                               AND U.DT_ENTRADA_UNIDADE <= PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))         
                               AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                            U.DT_ENTRADA_UNIDADE,
                                                                            U.CD_SETOR_ATENDIMENTO),
                                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                             GROUP BY U.NR_ATENDIMENTO,
                                      AP.CD_PESSOA_FISICA,
                                      S.CD_ESTABELECIMENTO,
                                      U.CD_SETOR_ATENDIMENTO,
                                      AP.DT_ENTRADA,
                                      AP.DT_ALTA,
                                      PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                           U.DT_ENTRADA_UNIDADE,
                                                                           U.CD_SETOR_ATENDIMENTO)) UN
                     WHERE (coalesce(DT_ALTA::text, '') = '' OR DT_ENTRADA_SETOR <= DT_ALTA)
                       AND (coalesce(DT_SAIDA_SETOR::text, '') = '' OR DT_SAIDA_SETOR >= DT_ENTRADA)) UN,
                   ATENDIMENTO_GLICEMIA AG
             WHERE AG.NR_ATENDIMENTO = UN.NR_ATENDIMENTO
               AND (AG.QT_GLICEMIA IS NOT NULL AND AG.QT_GLICEMIA::text <> '')
               AND AG.QT_GLICEMIA > 0
               AND AG.QT_GLICEMIA <= 1500
               AND AG.DT_CONTROLE BETWEEN PKG_ATEND_PAC_UNID.GET_SYS_DT(UN.CD_ESTABELECIMENTO, V_START_DATE)
                                      AND PKG_ATEND_PAC_UNID.GET_SYS_DT(UN.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
               AND AG.DT_CONTROLE BETWEEN UN.DT_ENTRADA_SETOR AND coalesce(UN.DT_SAIDA_SETOR, AG.DT_CONTROLE)
            
UNION

            SELECT DISTINCT UN.CD_PESSOA_FISICA
              FROM (SELECT NR_ATENDIMENTO,
                           CD_PESSOA_FISICA,
                           CD_ESTABELECIMENTO,
                           CD_SETOR_ATENDIMENTO,
                           DT_INI,
                           DT_FIM,
                           DT_ENTRADA,
                           DT_ALTA,
                           DT_ENTRADA_SETOR,
                           DT_SAIDA_SETOR
                      FROM (SELECT U.NR_ATENDIMENTO,
                                   AP.CD_PESSOA_FISICA,
                                   S.CD_ESTABELECIMENTO,
                                   U.CD_SETOR_ATENDIMENTO,
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE) DT_INI,
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(V_END_DATE + 1, clock_timestamp())) DT_FIM,
                                   AP.DT_ENTRADA,
                                   AP.DT_ALTA,
                                   MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                   PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                        U.DT_ENTRADA_UNIDADE,
                                                                        U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR                                              
                              FROM (SELECT DISTINCT P.NR_ATENDIMENTO, 
                                                    P.CD_PESSOA_FISICA,
                                                    P.DT_ENTRADA,
                                                    P.DT_ALTA 
                                      FROM EXAME_LABORATORIO EL,
                                           EXAME_LAB_RESULTADO ER,
                                           EXAME_LAB_RESULT_ITEM EI,
                                           ATENDIMENTO_PACIENTE P
                                     WHERE EL.IE_TIPO_EXAME_REL = 8
                                       AND EL.NR_SEQ_EXAME = EI.NR_SEQ_EXAME
                                       AND EI.NR_SEQ_RESULTADO = ER.NR_SEQ_RESULTADO
                                       AND (ER.DT_RESULTADO IS NOT NULL AND ER.DT_RESULTADO::text <> '')
                                       AND (EI.QT_RESULTADO IS NOT NULL AND EI.QT_RESULTADO::text <> '')
                                       AND EI.QT_RESULTADO > 0
                                       AND EI.QT_RESULTADO <= 1500
                                       AND coalesce(ER.NR_ATENDIMENTO, OBTER_ATENDIMENTO_PRESCR(ER.NR_PRESCRICAO)) = P.NR_ATENDIMENTO   
                                       AND EI.DT_COLETA BETWEEN P.DT_ENTRADA AND coalesce(P.DT_ALTA, EI.DT_COLETA)
                                       AND EI.DT_COLETA BETWEEN PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE)
                                                            AND PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                       AND P.DT_ENTRADA <= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                       AND (coalesce(P.DT_ALTA::text, '') = '' OR
                                            P.DT_ALTA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(P.CD_ESTABELECIMENTO, V_START_DATE))) AP,
                                   ATEND_PACIENTE_UNIDADE U,
                                   SETOR_ATENDIMENTO S
                             WHERE AP.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                               AND S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                               AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO)
                               AND CASE WHEN coalesce(P_ESTAB, 0)=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = coalesce(P_ESTAB, 0)
                               AND CASE WHEN coalesce(P_SETOR, 0)=0 THEN  0  ELSE U.CD_SETOR_ATENDIMENTO END  = coalesce(P_SETOR, 0)
                               AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                               AND S.CD_CLASSIF_SETOR NOT IN ('6', '7', '10')
                               AND U.DT_ENTRADA_UNIDADE <= PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))         
                               AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                            U.DT_ENTRADA_UNIDADE,
                                                                            U.CD_SETOR_ATENDIMENTO),
                                       PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                                   PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                             GROUP BY U.NR_ATENDIMENTO,
                                      AP.CD_PESSOA_FISICA,
                                      S.CD_ESTABELECIMENTO,
                                      U.CD_SETOR_ATENDIMENTO,
                                      AP.DT_ENTRADA,
                                      AP.DT_ALTA,
                                      PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                           U.DT_ENTRADA_UNIDADE,
                                                                           U.CD_SETOR_ATENDIMENTO)) UN
                     WHERE (coalesce(DT_ALTA::text, '') = '' OR DT_ENTRADA_SETOR <= DT_ALTA)
                       AND (coalesce(DT_SAIDA_SETOR::text, '') = '' OR DT_SAIDA_SETOR >= DT_ENTRADA)) UN,
                   EXAME_LABORATORIO L,
                   EXAME_LAB_RESULTADO R,
                   EXAME_LAB_RESULT_ITEM I
             WHERE L.IE_TIPO_EXAME_REL = 8
               AND coalesce(R.NR_ATENDIMENTO, OBTER_ATENDIMENTO_PRESCR(R.NR_PRESCRICAO)) = UN.NR_ATENDIMENTO
               AND L.NR_SEQ_EXAME = I.NR_SEQ_EXAME
               AND I.NR_SEQ_RESULTADO = R.NR_SEQ_RESULTADO
               AND (R.DT_RESULTADO IS NOT NULL AND R.DT_RESULTADO::text <> '')
               AND (I.QT_RESULTADO IS NOT NULL AND I.QT_RESULTADO::text <> '')
               AND I.QT_RESULTADO > 0
               AND I.QT_RESULTADO <= 1500
               AND I.DT_COLETA BETWEEN PKG_ATEND_PAC_UNID.GET_SYS_DT(UN.CD_ESTABELECIMENTO, V_START_DATE)
                                   AND PKG_ATEND_PAC_UNID.GET_SYS_DT(UN.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
               AND I.DT_COLETA BETWEEN UN.DT_ENTRADA_SETOR AND coalesce(UN.DT_SAIDA_SETOR, I.DT_COLETA)) alias106
;

  TYPE T_CD_PES_FIS IS TABLE OF C_CD_PES_FIS%ROWTYPE;
  R_CD_PES_FIS T_CD_PES_FIS;

  
BEGIN
  
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;

    IF (P_YEAR IS NOT NULL AND P_YEAR::text <> '') AND (P_QUARTER IS NOT NULL AND P_QUARTER::text <> '') THEN
    
      SELECT GREATEST(INI, coalesce(P_START_DATE, INI)) INI,
             LEAST(FIM, coalesce(P_END_DATE, FIM)) FIM
        INTO STRICT V_START_DATE,
             V_END_DATE
        FROM (SELECT TO_DATE(LPAD((P_QUARTER * 3) - 2, 2, '0') || P_YEAR, 'MMYYYY') INI,
                     LAST_DAY(TO_DATE(LPAD((P_QUARTER * 3), 2, '0') || P_YEAR, 'MMYYYY')) FIM
                ) alias13
       WHERE INI <= coalesce(P_END_DATE, INI)
         AND FIM >= coalesce(P_START_DATE, FIM);

      OPEN C_CD_PES_FIS;
      LOOP
        FETCH C_CD_PES_FIS BULK COLLECT INTO R_CD_PES_FIS LIMIT 1000;

          BEGIN
            FOR i IN R_CD_PES_FIS.FIRST..R_CD_PES_FIS.LAST LOOP
              RETURN NEXT R_CD_PES_FIS[i].CD_PESSOA_FISICA;
            END LOOP;
          EXCEPTION WHEN no_data_found THEN
            NULL;
          END;

        EXIT WHEN NOT FOUND; /* apply on C_CD_PES_FIS */
     
      END LOOP;
      CLOSE C_CD_PES_FIS;
  
    END IF;

    RETURN;
  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION pkg_glycemic_control.get_tab_cd_pes_fis (P_START_DATE timestamp, P_END_DATE timestamp, P_YEAR bigint, P_QUARTER bigint, P_ESTAB bigint, P_SETOR bigint) FROM PUBLIC;
