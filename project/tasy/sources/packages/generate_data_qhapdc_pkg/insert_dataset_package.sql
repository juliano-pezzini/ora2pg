-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE generate_data_qhapdc_pkg.insert_dataset (nr_seq_lote_p bigint, nr_seq_arquivo_p bigint, ie_dataset_p text, nm_usuario_p text, nr_referencia_p bigint, nr_seq_dataset_p INOUT bigint, returned_value_p INOUT bigint, other_exception_p INOUT text) AS $body$
DECLARE

    nr_sequencia_w2           atendimento_paciente.nr_atendimento%TYPE := NULL;
    nr_sequencia_snp_w2        atendimento_paciente.nr_atendimento%TYPE := NULL;
    nr_seq_dataset_w          qhapdc_dataset_send.nr_sequencia%TYPE;
    nr_atendimento_w          atendimento_paciente.nr_atendimento%TYPE := NULL;
    nr_interno_conta_w        conta_paciente.nr_interno_conta%TYPE := NULL;
    nr_seq_nota_fiscal_w      nota_fiscal.nr_sequencia%TYPE := NULL;
    nr_seq_atend_prev_alta_w  atend_previsao_alta.nr_sequencia%TYPE := NULL;
    nr_seq_atend_alta_w       atendimento_alta.nr_sequencia%TYPE := NULL;
    nr_seq_arquivo_w          qhapdc_file.nr_sequencia%TYPE;
    nr_cd_pessao_fisicia_w    pessoa_fisica.cd_pessoa_fisica%TYPE;
    nr_cd_plano_convenio_w    varchar(1);
    nr_cd_usuario_convenio_w  atend_categoria_convenio.cd_usuario_convenio%TYPE;
    nr_discharge_date_w       atendimento_paciente.dt_alta%TYPE;
    patient_care_dept_w       atend_paciente_unidade.cd_setor_atendimento%TYPE;
    basic_care_unit_w         atend_paciente_unidade.cd_unidade_basica%TYPE;
    entry_date_w              atend_paciente_unidade.dt_entrada_unidade%TYPE;
    v_errm                    varchar(100 );
    nr_atendimento_admission  atendimento_paciente.nr_atendimento%TYPE;
    ds_erro_w                 varchar(2000);
    nr_seq_log_w              bigint;
    cd_type_accommodation_w   bigint;
    cd_pension_status_w       bigint;
    cd_psychiatric_w          bigint;
    ref_care_w                bigint;
    cd_previous_specialised_w bigint;
    CD_MEN_HEALTH_LEG_STATUS_w bigint;
    ie_employment_status_w    qhapdc_hcp_assessment_data.cd_employment_status%TYPE := 8;
    first_name_b_w            varchar(10);
    last_name_b_w             varchar(20);
    middle_name_b_w           varchar(20);
    street_of_address_c_w     varchar(100);
    ds_municipio_c_w          varchar(20);
    cd_cep_c_w                varchar(20);
    sg_estado_c_w             varchar(15);
    ie_sexo_b_w               varchar(5);
    dt_nascimento_b_w         timestamp;
    ie_estado_civil_b_w       varchar(10);
    cd_nacionalidade_b_w      varchar(8);
    cd_indigenous_status_d_w  bigint;
    principal_ref_service_w   qhapdc_segment_snp.principal_ref_service%TYPE;
    dt_snap_entrada_w         qhapdc_segment_snp.dt_snap_start%TYPE;
    dt_snap_alta_w            qhapdc_segment_snp.dt_snap_end%TYPE;
    nr_seq_etnia_b_w          qhapdc_hcp_assessment_data.cd_australian_islander
  %TYPE;
    cd_occupation_b_w         compl_pessoa_fisica.cd_profissao%TYPE;
    cd_employment_status_c_w  qhapdc_hcp_assessment_data.cd_employment_status%TYPE;
    cd_rfc_b_w                pessoa_fisica.cd_rfc%TYPE;
    ie_tipo_convenio_w        convenio.ie_tipo_convenio%TYPE;
    nr_telefone_home_c_w      compl_pessoa_fisica.nr_telefone%TYPE;
    nr_telefone_mobile_b_w    pessoa_fisica.nr_telefone_celular%TYPE;
    nr_telefone_bussiness_c_w compl_pessoa_fisica.nr_telefone%TYPE;
    islander_status_b_w       pessoa_fisica.nr_seq_etnia%TYPE;

    data_admission_time_w     qhapdc_segment_adm.dt_entry_time%TYPE;
    separation_date_w         qhapdc_segment_adm.dt_discharge%TYPE;
    chargable_status_w        qhapdc_segment_adm.ie_chargeable_statue%TYPE;
    mode_separation_w         qhapdc_segment_adm.nr_sepration_mode%TYPE;
    trans_hosp_to_w           qhapdc_segment_adm.cd_facility_to%TYPE;
    trans_hosp_from_w         qhapdc_segment_adm.cd_facility_from%TYPE;
    admitting_ward_w          qhapdc_segment_adm.cd_admiting_ward%TYPE;
    admitting_unit_w          qhapdc_segment_adm.cd_admitting_unit%TYPE;
    standard_unit_code_w      qhapdc_segment_adm.cd_stnrd_ward_code%TYPE;
    planned_same_day_w        qhapdc_segment_adm.ie_same_day%TYPE;
    treating_doctor_w         qhapdc_segment_adm.cd_physician_resp%TYPE;
    religion_w                qhapdc_segment_adm.nr_religion%TYPE;
    funding_source_w          qhapdc_segment_adm.cd_funding_source%TYPE;
    incident_date_w           qhapdc_segment_adm.dt_incident%TYPE;
    length_of_stay_w          qhapdc_segment_adm.qt_intense_care%TYPE;
    type_of_encounter_w       qhapdc_segment_adm.ie_encounter_nature%TYPE;
    care_type_w               qhapdc_segment_adm.nr_seq_care_type%TYPE;
    compensable_status_w      qhapdc_segment_adm.ie_compensable_status%TYPE;
    band_type_w               qhapdc_segment_adm.cd_band%TYPE;
    source_of_referral_w      qhapdc_segment_adm.cd_admission_detail%TYPE;
    snap_episode_num_w        qhapdc_segment_snp.AN_SNAP_GROUP%TYPE;
    cd_contract_type_w        qhapdc_segment_adm.CD_CONTRACT_TYPE%TYPE;
    ie_contract_role_w        qhapdc_segment_adm.IE_CONTRACT_ROLE%TYPE;
    loopCount            bigint;
    c_act_data CURSOR FOR
      SELECT apu.cd_setor_atendimento AS CD_SETOR_ATENDIMENTO, 
             apu.cd_unidade_basica    AS CD_UNIDADE_BASICA, 
             apu.dt_entrada_unidade   AS DT_ENTRADA_UNIDADE, 
             apu.dt_entrada_unidade   AS DT_ENTRADA_UNIDADE_TIME, 
             ap.nr_atendimento        AS nr_sequencia, 
             Get_conversion_qhapdc('QHAPDC_STANDARD_UNIT_CODE', 
             'MEDICO_CATEGORIA', 
             NULL, 
             pf.cd_cargo, 'I')        AS cd_cargo 
      FROM   atend_paciente_unidade apu, 
             pessoa_fisica pf, 
             atendimento_paciente ap 
      WHERE  ap.nr_atendimento = nr_referencia_p 
             AND ap.nr_atendimento = apu.nr_atendimento 
             AND pf.cd_pessoa_fisica = ap.cd_pessoa_fisica;
    r_atend_act               c_act_data%ROWTYPE;

    c_patient_visit_num CURSOR FOR 
    SELECT b.NR_ATENDIMENTO as encounter_id 
  , ROW_NUMBER() OVER (ORDER BY b.DT_ENTRADA) AS ItemNo
  from ATENDIMENTO_PACIENTE a,
  ATENDIMENTO_PACIENTE b
  where a.NR_ATENDIMENTO = nr_referencia_p 
  and (a.NR_ATEND_ORIGINAL IS NOT NULL AND a.NR_ATEND_ORIGINAL::text <> '')
  and b.NR_ATEND_ORIGINAL = a.NR_ATEND_ORIGINAL;

  r_patient_visit_num   c_patient_visit_num%ROWTYPE;

    c_mor_qhpdc CURSOR FOR 
      SELECT a.nr_atendimento, 
             a.cd_pessoa_fisica, 
             a.nr_atendimento                        nr_admission, 
             b.cd_doenca                             icd_codes, 
             b.cd_doenca                             ds_diseases, 
             c.cd_procedimento, 
             c.dt_procedimento, 
             CASE WHEN b.ie_classificacao_doenca='P' THEN  'PD'  ELSE 'OD' END  ie_clasification 
      FROM   atendimento_paciente a, 
             diagnostico_doenca b, 
             procedimento_paciente c, 
             procedimento d 
      WHERE  a.nr_atendimento = nr_referencia_p 
             AND a.nr_atendimento = b.nr_atendimento 
             AND (b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') 
             AND a.nr_atendimento = c.nr_atendimento 
             AND c.dt_procedimento BETWEEN b.dt_diagnostico AND (SELECT Min(x.dt_diagnostico) 
                                            FROM   diagnostico_doenca x 
                                            WHERE 
                 x.nr_atendimento = b.nr_atendimento 
                 AND 
                 x.dt_diagnostico > b.dt_diagnostico 
                                           ) 
             AND c.cd_procedimento = d.cd_procedimento 
             AND c.ie_origem_proced = d.ie_origem_proced 
             AND coalesce(c.cd_motivo_exc_conta::text, '') = '';
    r_atend_mor               c_mor_qhpdc%ROWTYPE;

BEGIN 
      IF ( ie_dataset_p = 'DVA' ) THEN 
        SELECT encounter.nr_atendimento             AS 
               Admission_Number_Or_Unique_no, 
               patient.cd_pessoa_fisica             AS Patient_Identifier, 
               Get_conversion_qhapdc('QHAPDC_DVA_CARD_TYPE', 'CONVENIO_PLANO', 
               NULL, 
               pat_category.cd_plano_convenio, 'I') AS DVA_Card_Type, 
               pat_category.cd_usuario_convenio     AS DVA_File_Number, 
               encounter.dt_alta                    AS discharge_date 
        INTO STRICT   nr_atendimento_w, nr_cd_pessao_fisicia_w, nr_cd_plano_convenio_w, 
               nr_cd_usuario_convenio_w, nr_discharge_date_w 
        FROM   atendimento_paciente encounter, 
               pessoa_fisica patient, 
               atend_categoria_convenio pat_category, 
               convenio insurance 
        WHERE  encounter.nr_atendimento = nr_referencia_p 
               AND patient.cd_pessoa_fisica = encounter.cd_pessoa_fisica 
               AND encounter.nr_atendimento = pat_category.nr_atendimento 
               AND insurance.cd_convenio = pat_category.cd_convenio 
               AND insurance.cd_externo = 'DVA'  LIMIT 1;
        
      if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
       SELECT nextval('qhapdc_dataset_send_seq') 
        INTO STRICT   nr_seq_dataset_w 
;

        INSERT INTO qhapdc_dataset_send(nr_sequencia, 
                     nm_usuario, 
                     dt_atualizacao, 
                     nm_usuario_nrec, 
                     dt_atualizacao_nrec, 
                     nr_seq_arquivo, 
                     ie_dataset, 
                     nr_atendimento, 
                     nr_interno_conta, 
                     nr_seq_nota_fiscal, 
                     nr_seq_atend_prev_alta, 
                     nr_seq_atend_alta) 
        VALUES (nr_seq_dataset_w, 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nr_seq_arquivo_p, 
                     ie_dataset_p, 
                     nr_referencia_p, 
                     nr_interno_conta_w, 
                     nr_seq_nota_fiscal_w, 
                     nr_seq_atend_prev_alta_w, 
                     nr_seq_atend_alta_w );

        nr_seq_dataset_p := nr_seq_dataset_w;
        
        INSERT INTO qhapdc_segment_dva(nr_sequencia, 
                     dt_atualizacao, 
                     nm_usuario, 
                     dt_atualizacao_nrec, 
                     nm_usuario_nrec, 
                     nr_atendimento, 
                     cd_plano_convenio, 
                     cd_usuario_convenio, 
                     nr_dataset) 
        VALUES ( nextval('qhapdc_segment_dva_seq'), 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     NULL, 
                     nr_referencia_p, 
                     nr_cd_plano_convenio_w, 
                     nr_cd_usuario_convenio_w, 
                     nr_seq_dataset_w );
        end if;
      END IF;

      IF ( ie_dataset_p = 'ACT' ) THEN 
      
       OPEN c_act_data;
         loopCount := 0;
        LOOP
            FETCH c_act_data INTO r_atend_act;

            EXIT WHEN NOT FOUND; /* apply on c_act_data */
             loopCount := loopCount + 1;
            IF (r_atend_act.nr_sequencia IS NOT NULL AND r_atend_act.nr_sequencia::text <> '') THEN
            
           if ( loopCount = 1) then
             SELECT nextval('qhapdc_dataset_send_seq') 
              INTO STRICT   nr_seq_dataset_w 
;

              INSERT INTO qhapdc_dataset_send(nr_sequencia, 
                           nm_usuario, 
                           dt_atualizacao, 
                           nm_usuario_nrec, 
                           dt_atualizacao_nrec, 
                           nr_seq_arquivo, 
                           ie_dataset, 
                           nr_atendimento, 
                           nr_interno_conta, 
                           nr_seq_nota_fiscal, 
                           nr_seq_atend_prev_alta, 
                           nr_seq_atend_alta) 
              VALUES (nr_seq_dataset_w, 
                           nm_usuario_p, 
                           clock_timestamp(), 
                           nm_usuario_p, 
                           clock_timestamp(), 
                           nr_seq_arquivo_p, 
                           ie_dataset_p, 
                           nr_referencia_p, 
                           nr_interno_conta_w, 
                           nr_seq_nota_fiscal_w, 
                           nr_seq_atend_prev_alta_w, 
                           nr_seq_atend_alta_w );

              nr_seq_dataset_p := nr_seq_dataset_w;
              
        end if;

              INSERT INTO qhapdc_segment_act(nr_sequencia, 
                           dt_atualizacao, 
                           nm_usuario, 
                           dt_atualizacao_nrec, 
                           nm_usuario_nrec, 
                           nr_atendimento, 
                           cd_department_encounter, 
                           cd_basic_care_unit, 
                           dt_dept_entry, 
                           dt_entry_time, 
                           cd_standard_unit_code, 
                           nr_dataset) 
              VALUES ( nextval('qhapdc_segment_act_seq'), 
                           clock_timestamp(), 
                           nm_usuario_p, 
                           clock_timestamp(), 
                           NULL, 
                           nr_referencia_p, 
                           r_atend_act.cd_setor_atendimento, 
                           r_atend_act.cd_unidade_basica, 
                           r_atend_act.dt_entrada_unidade, 
                           r_atend_act.dt_entrada_unidade_time, 
                           r_atend_act.cd_cargo, 
                           nr_seq_dataset_w );
            END IF;
        END LOOP;

        CLOSE c_act_data;
      END IF;

      IF ( ie_dataset_p = 'PAL' ) THEN 
      
        SELECT nextval('qhapdc_dataset_send_seq') 
        INTO STRICT   nr_seq_dataset_w 
;

        INSERT INTO qhapdc_dataset_send(nr_sequencia, 
                     nm_usuario, 
                     dt_atualizacao, 
                     nm_usuario_nrec, 
                     dt_atualizacao_nrec, 
                     nr_seq_arquivo, 
                     ie_dataset, 
                     nr_atendimento, 
                     nr_interno_conta, 
                     nr_seq_nota_fiscal, 
                     nr_seq_atend_prev_alta, 
                     nr_seq_atend_alta) 
        VALUES (nr_seq_dataset_w, 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nr_seq_arquivo_p, 
                     ie_dataset_p, 
                     nr_referencia_p, 
                     nr_interno_conta_w, 
                     nr_seq_nota_fiscal_w, 
                     nr_seq_atend_prev_alta_w, 
                     nr_seq_atend_alta_w );

        nr_seq_dataset_p := nr_seq_dataset_w;

        INSERT INTO qhapdc_segment_pal(nr_sequencia, 
                     dt_atualizacao, 
                     nm_usuario, 
                     dt_atualizacao_nrec, 
                     nm_usuario_nrec, 
                     nr_atendimento, 
                     prev_non_adm_pal, 
                     first_adm_pal, 
                     nr_dataset) 
        VALUES (nextval('qhapdc_segment_pal_seq'), 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     NULL, 
                     nr_referencia_p, 
                     '1', 
                     '1', 
                     nr_seq_dataset_w );
      END IF;

      --  insert into SNP segment table 
      IF ( ie_dataset_p = 'SNP' ) THEN 
      
      OPEN c_patient_visit_num;
        LOOP 
            FETCH c_patient_visit_num INTO r_patient_visit_num;

            EXIT WHEN NOT FOUND; /* apply on c_patient_visit_num */
               IF (r_patient_visit_num.ItemNo IS NOT NULL AND r_patient_visit_num.ItemNo::text <> '' AND r_patient_visit_num.encounter_id = nr_referencia_p ) THEN 
               snap_episode_num_w := TO_CHAR(r_patient_visit_num.ItemNo);

          end if;
        END LOOP;

       CLOSE c_patient_visit_num;

      
        SELECT ap.nr_atendimento, 
Get_conversion_qhapdc('QHAPDC_PRIN_REF_SERVICE', 'SUBMOTIVO_ALTA', NULL, sa.nr_sequencia, 'I'),
ap.dt_entrada, 
ap.dt_alta 
INTO STRICT   nr_sequencia_snp_w2, principal_ref_service_w, dt_snap_entrada_w, dt_snap_alta_w 
FROM   submotivo_alta sa, 
       atendimento_paciente ap 
WHERE  ap.nr_atendimento = nr_referencia_p 
       AND ap.cd_motivo_alta = sa.nr_sequencia  LIMIT 1;
       
       
 if (nr_sequencia_snp_w2 IS NOT NULL AND nr_sequencia_snp_w2::text <> '') then
  
   SELECT nextval('qhapdc_dataset_send_seq') 
        INTO STRICT   nr_seq_dataset_w 
;

        INSERT INTO qhapdc_dataset_send(nr_sequencia, 
               nm_usuario, 
               dt_atualizacao, 
               nm_usuario_nrec, 
               dt_atualizacao_nrec, 
               nr_seq_arquivo, 
               ie_dataset, 
               nr_atendimento, 
               nr_interno_conta, 
               nr_seq_nota_fiscal, 
               nr_seq_atend_prev_alta, 
               nr_seq_atend_alta) 
  VALUES (nr_seq_dataset_w, 
               nm_usuario_p, 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               nr_seq_arquivo_p, 
               ie_dataset_p, 
               nr_referencia_p, 
               nr_interno_conta_w, 
               nr_seq_nota_fiscal_w, 
               nr_seq_atend_prev_alta_w, 
               nr_seq_atend_alta_w );

  nr_seq_dataset_p := nr_seq_dataset_w;

  INSERT INTO qhapdc_segment_snp(nr_sequencia, 
               dt_atualizacao, 
               nm_usuario, 
               dt_atualizacao_nrec, 
               nm_usuario_nrec, 
               nr_atendimento, 
               snap_type, 
               an_snap_group, 
               dt_snap_start, 
               dt_snap_end, 
               multidisc_care_plan_flag, 
               dt_multidisc_care_plan, 
               principal_ref_service, 
               primary_impair_type, 
               ie_clinical_only, 
               nr_dataset) 
  VALUES (nextval('qhapdc_segment_snp_seq'), 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               NULL, 
               nr_referencia_p, 
               'RCA', 
               snap_episode_num_w, 
               dt_snap_entrada_w, 
               dt_snap_alta_w, 
               'N', 
               NULL, 
               principal_ref_service_w, 
               NULL, 
               1, 
               nr_seq_dataset_w );
               
nr_sequencia_snp_w2 := null;
end if;
END IF;

--  insert into MEN segment table 
IF ( ie_dataset_p = 'MEN' ) THEN 
  SELECT ap.nr_atendimento,
d.cd_employment_status,
d.cd_type_accommodation, 
d.cd_pension_status, 
d.cd_psychiatric, 
d.cd_previous_specialised,
d.CD_MEN_HEALTH_LEG_STATUS,
Get_conversion_qhapdc('QHAPDC_FURTHER_CARE', 'SUBMOTIVO_ALTA', NULL,(ap.nr_submotivo_alta), 'I')

INTO STRICT   nr_sequencia_w2,ie_employment_status_w, cd_type_accommodation_w, cd_pension_status_w, 
       cd_psychiatric_w, cd_previous_specialised_w, CD_MEN_HEALTH_LEG_STATUS_w, ref_care_w
FROM pessoa_fisica pf
LEFT OUTER JOIN compl_pessoa_fisica cp ON (pf.cd_pessoa_fisica = cp.cd_pessoa_fisica)
, atendimento_paciente ap
LEFT OUTER JOIN qhapdc_hcp_assessment_data d ON (ap.nr_atendimento = d.nr_atendimento)
WHERE ap.nr_atendimento = nr_referencia_p AND pf.cd_pessoa_fisica = ap.cd_pessoa_fisica   LIMIT 1;

if (nr_sequencia_w2 IS NOT NULL AND nr_sequencia_w2::text <> '') then
  SELECT nextval('qhapdc_dataset_send_seq') 
  INTO STRICT   nr_seq_dataset_w 
;

  INSERT INTO qhapdc_dataset_send(nr_sequencia, 
               nm_usuario, 
               dt_atualizacao, 
               nm_usuario_nrec, 
               dt_atualizacao_nrec, 
               nr_seq_arquivo, 
               ie_dataset, 
               nr_atendimento, 
               nr_interno_conta, 
               nr_seq_nota_fiscal, 
               nr_seq_atend_prev_alta, 
               nr_seq_atend_alta) 
  VALUES (nr_seq_dataset_w, 
               nm_usuario_p, 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               nr_seq_arquivo_p, 
               ie_dataset_p, 
               nr_referencia_p, 
               nr_interno_conta_w, 
               nr_seq_nota_fiscal_w, 
               nr_seq_atend_prev_alta_w, 
               nr_seq_atend_alta_w );

  nr_seq_dataset_p := nr_seq_dataset_w;

  INSERT INTO qhapdc_segment_men(nr_sequencia, 
               dt_atualizacao, 
               nm_usuario, 
               dt_atualizacao_nrec, 
               nm_usuario_nrec, 
               nr_atendimento, 
               ie_type_accommodation, 
               ie_employment_status, 
               pension_status, 
               ie_first_adm_psy, 
               ref_care, 
               ie_men_legal_status, 
               ie_prev_nadm_treatment, 
               nr_dataset) 
  VALUES (nextval('qhapdc_segment_men_seq'), 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               NULL, 
               nr_referencia_p, 
               cd_type_accommodation_w, 
               ie_employment_status_w, 
               cd_pension_status_w, 
               cd_psychiatric_w, 
               ref_care_w,
               CD_MEN_HEALTH_LEG_STATUS_w, 
               cd_previous_specialised_w, 
               nr_seq_dataset_w );
               
  nr_sequencia_w2 := null;
end if;
END IF;

IF ( ie_dataset_p = 'ADM' ) THEN 
SELECT
    max(cd_contract_type),
    max(cd_contract_role)
INTO STRICT
    cd_contract_type_w,
    ie_contract_role_w
FROM
    atendimento_paciente_inf
WHERE
    nr_atendimento = nr_referencia_p;

  SELECT ap.nr_atendimento,
    ap.dt_entrada                                              AS 
         DATA_ADMISSION_TIME, 
         ap.dt_alta                                                 AS 
         separation_date_w, 
         Get_conversion_qhapdc('QHAPDC_CHARGABLE_STATUS', 'TIPO_ACOMODACAO', 
         NULL, 
         ta.ie_classificacao, 'I')                                  AS 
         chargable_status, 
         Get_conversion_qhapdc('QHAPDC_SEPARATION_MODE', 'MOTIVO_ALTA', NULL, 
         ap.cd_motivo_alta, 'I')                                    AS 
         mode_separation_w, 
         Substr((SELECT a.cd_cnes 
                 FROM   pessoa_juridica a 
                 WHERE  a.cd_cgc = (SELECT x.cd_cgc 
                                    FROM   atendimento_transf x 
                                    WHERE  x.nr_sequencia = ap.nr_atendimento  LIMIT 1)  LIMIT 1), 1, 5)                      AS 
         TRANS_HOSP_to_w, 
         Substr((SELECT a.cd_cnes 
                 FROM   pessoa_juridica a 
                 WHERE  a.cd_cgc = ap.cd_cgc_indicacao  LIMIT 1), 1, 5)                      AS 
         Trans_hosp_from_w, 
         Substr((SELECT a.cd_setor_atendimento 
                 FROM   atend_paciente_unidade a 
                 WHERE  a.nr_atendimento = ap.nr_atendimento  LIMIT 1), 1, 6)                      AS 
         Admitting_Ward_w, 
         Substr((SELECT a.cd_unidade_basica 
                 FROM   atend_paciente_unidade a 
                 WHERE  a.nr_atendimento = ap.nr_atendimento  LIMIT 1), 1, 4)                      AS 
         Admitting_Unit_w, 
         Get_conversion_qhapdc('QHAPDC_STANDARD_UNIT_CODE', 'MEDICO_CATEGORIA', 
         NULL, ( 
         SELECT a.nr_seq_categoria 
         FROM   medico a 
         WHERE  a.nr_crm = ap.cd_medico_resp  LIMIT 1), 'I')                               AS 
         Standard_Unit_Code_w, 
         CASE coalesce(WHEN(SELECT a.qt_dia                  FROM   gestao_vaga a                  WHERE  a.nr_atendimento = ap.nr_atendimento  LIMIT 1)::text, '') = '' THEN  'Y'  ELSE 'N' END                        AS 
         Planned_same_day_w, 
         Substr(ap.cd_medico_resp, 1, 6)                            AS 
         Treating_Doctor_w, 
         Get_conversion_qhapdc('QHAPDC_FUNDING_SOURCE', 'CONVENIO', NULL, 
         ac.cd_convenio, 
         'I')                                                       AS 
         funding_source_w, 
         ap.dt_ocorrencia                                           AS 
         Incident_Date_w, 
         Cast(Substr(pf.cd_religiao, 1, 4) AS bigint)               AS 
         religion_w, 
         Substr(Obter_dias_internacao_uti(ap.nr_atendimento), 1, 7) AS 
         LENGTH_OF_STAY, 
         Substr(AP.ie_carater_inter_sus, -1, 1)                     AS 
         TYPE_OF_ENCOUNTER, 
         Get_conversion_qhapdc('QHAPDC_CARE_TYPE', null,9561, coalesce((select CD_CARE_TYPE FROM hcp_assessment_data WHERE
         nr_atendimento = ap.nr_atendimento ), '60') , 'I') AS care_type ,
         Get_conversion_qhapdc('QHAPDC_COMPENSABLE_STATUS', 'CONVENIO' 
         , NULL, 
         ac.cd_convenio, 'I')                                       AS 
         compensable_status, 
        Get_conversion_qhapdc('QHAPDC_BAND_TYPE', 'PROCEDIMENTO', NULL,
        (select distinct x.cd_procedimento
          from procedimento_paciente x, atendimento_paciente y
          where 1 =1
          and y.NR_SEQ_CLASSIFICACAO  = 5
          and x.nr_atendimento = ap.nr_atendimento 
          and x.cd_procedimento in ( select cd_procedimento from CONVENIO_REGRA_TAXA_CIR ) LIMIT 1),'I') AS
         band_type_w, 
         Get_conversion_qhapdc('QHAPDC_SOURCE_OF_REFERRAL', 'PROCEDENCIA', 
         NULL, 
         ap.cd_procedencia, 'I')                                    AS 
         source_of_referral 
  INTO STRICT   nr_sequencia_w2, data_admission_time_w, separation_date_w, chargable_status_w, 
         mode_separation_w, 
  trans_hosp_to_w, trans_hosp_from_w, admitting_ward_w, admitting_unit_w, 
  standard_unit_code_w, planned_same_day_w, treating_doctor_w, funding_source_w, 
  incident_date_w, religion_w, length_of_stay_w, type_of_encounter_w, 
  care_type_w, compensable_status_w, band_type_w, source_of_referral_w 
  FROM   atendimento_paciente ap, 
         pessoa_fisica pf, 
         atend_categoria_convenio ac, 
         tipo_acomodacao ta 
  WHERE  ap.nr_atendimento = nr_referencia_p 
         AND ap.cd_pessoa_fisica = pf.cd_pessoa_fisica 
         AND ac.nr_atendimento = ap.nr_atendimento 
         AND ac.cd_tipo_acomodacao = ta.cd_tipo_acomodacao  LIMIT 1;

 if (nr_sequencia_w2 IS NOT NULL AND nr_sequencia_w2::text <> '') then        
   SELECT nextval('qhapdc_dataset_send_seq') 
  INTO STRICT   nr_seq_dataset_w 
;

  INSERT INTO qhapdc_dataset_send(nr_sequencia, 
               nm_usuario, 
               dt_atualizacao, 
               nm_usuario_nrec, 
               dt_atualizacao_nrec, 
               nr_seq_arquivo, 
               ie_dataset, 
               nr_atendimento, 
               nr_interno_conta, 
               nr_seq_nota_fiscal, 
               nr_seq_atend_prev_alta, 
               nr_seq_atend_alta) 
  VALUES (nr_seq_dataset_w, 
               nm_usuario_p, 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               nr_seq_arquivo_p, 
               ie_dataset_p, 
               nr_referencia_p, 
               nr_interno_conta_w, 
               nr_seq_nota_fiscal_w, 
               nr_seq_atend_prev_alta_w, 
               nr_seq_atend_alta_w );

  nr_seq_dataset_p := nr_seq_dataset_w;

  INSERT INTO qhapdc_segment_adm(nr_sequencia, 
               dt_atualizacao, 
               nm_usuario, 
               dt_atualizacao_nrec, 
               nm_usuario_nrec, 
               nr_atendimento, 
               dt_entry, 
               dt_entry_time, 
               nr_seq_care_type, 
               dt_discharge, 
               dt_discharge_time, 
               cd_sepration_mode, 
               ie_encounter_nature, 
               cd_physician_resp, 
               ie_chargeable_statue, 
               ie_compensable_status, 
               dt_incident, 
               cd_band, 
               cd_admiting_ward, 
               cd_admitting_unit, 
               ie_same_day, 
               nr_religion, 
               cd_admission_detail, 
               nr_hosp_insurance, 
               nr_baby_admin_weig, 
               cd_stndrd_unit_code, 
               cd_qualification_status, 
               cd_contract_type,
               ie_contract_role,
               cd_stnrd_ward_code, 
               cd_funding_source, 
               cd_incident_flag, 
               cd_comp, 
               cd_motor_acc_inc, 
               cd_dva, 
               cd_ddc, 
               nr_language, 
               ie_interpreter_req, 
               nr_qas_number, 
               nr_provider_identifier, 
               qt_intense_care, 
               qt_ventilatory_support, 
               cd_facility_to, 
               cd_facility_from, 
               nr_dataset) 
  VALUES (nextval('qhapdc_segment_adm_seq'), 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               nm_usuario_p, 
               nr_referencia_p, 
               data_admission_time_w, 
               data_admission_time_w,-- entry time 
               care_type_w,-- care type 
               separation_date_w, 
               separation_date_w, 
               mode_separation_w, 
               type_of_encounter_w,-- ENCOUNTER NATURE 
               treating_doctor_w, 
               chargable_status_w, 
               compensable_status_w, 
               -- IE_COMPENSABLE_STATUS [NEED TO FILL - IMPROPER VALUE - INTERNALLY DISCUSS] 
               incident_date_w, 
               band_type_w,--BAND 
               admitting_ward_w, 
               admitting_unit_w, 
               planned_same_day_w, 
               religion_w, 
               source_of_referral_w, 
               8,-- Hosp insurance 
               NULL, 
               standard_unit_code_w, 
               NULL,
               cd_contract_type_w,
               ie_contract_role_w,
               NULL,
               funding_source_w, 
               NULL, 
               NULL, 
               NULL, 
               NULL, 
               NULL, 
               NULL,-- launguage 
               NULL, 
               NULL, 
               NULL,-- Provider identifier 
               length_of_stay_w, 
               0,-- ventilatory support  
               trans_hosp_to_w, 
               trans_hosp_from_w, 
               nr_seq_dataset_w );
               
nr_sequencia_w2 := null;
end if;
END IF;

IF ( ie_dataset_p = 'MOR' ) THEN 
  OPEN c_mor_qhpdc;

  LOOP 
      FETCH c_mor_qhpdc INTO r_atend_mor;
      loopCount :=0;
      EXIT WHEN NOT FOUND; /* apply on c_mor_qhpdc */
    
      IF (r_atend_mor.nr_atendimento IS NOT NULL AND r_atend_mor.nr_atendimento::text <> '') THEN 
       loopCount := loopCount + 1;
       if (loopCount = 1) then

        SELECT nextval('qhapdc_dataset_send_seq') 
        INTO STRICT   nr_seq_dataset_w 
;

        INSERT INTO qhapdc_dataset_send(nr_sequencia, 
                     nm_usuario, 
                     dt_atualizacao, 
                     nm_usuario_nrec, 
                     dt_atualizacao_nrec, 
                     nr_seq_arquivo, 
                     ie_dataset, 
                     nr_atendimento, 
                     nr_interno_conta, 
                     nr_seq_nota_fiscal, 
                     nr_seq_atend_prev_alta, 
                     nr_seq_atend_alta) 
        VALUES (nr_seq_dataset_w, 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     nr_seq_arquivo_p, 
                     ie_dataset_p, 
                     nr_referencia_p, 
                     nr_interno_conta_w, 
                     nr_seq_nota_fiscal_w, 
                     nr_seq_atend_prev_alta_w, 
                     nr_seq_atend_alta_w );

        nr_seq_dataset_p := nr_seq_dataset_w;
      
      end if;
        INSERT INTO qhapdc_segment_mor(nr_sequencia,
                     dt_atualizacao, 
                     nm_usuario, 
                     dt_atualizacao_nrec, 
                     nm_usuario_nrec, 
                     nr_atendimento, 
                     cd_disease_code, 
                     cd_diagnosis_code, 
                     ds_diagnosis_code, 
                     dt_procedure, 
                     ie_contract_flag, 
                     cd_diag_onset_type, 
                     nr_dataset) 
        VALUES (nextval('qhapdc_segment_mor_seq'), 
                     clock_timestamp(), 
                     nm_usuario_p, 
                     clock_timestamp(), 
                     NULL, 
                     r_atend_mor.nr_atendimento, 
                     r_atend_mor.icd_codes, 
                     r_atend_mor.ie_clasification, 
                     r_atend_mor.ds_diseases, 
                     r_atend_mor.dt_procedimento, 
                     NULL, 
                     NULL, 
                     nr_seq_dataset_w );
      END IF;
  END LOOP;

  CLOSE c_mor_qhpdc;
END IF;

IF ( ie_dataset_p = 'PAT' ) THEN 

  SELECT a.nr_atendimento, 
         b.cd_pessoa_fisica, 
         a.nr_atendimento 
         NR_ADMISSION, 
         Person_name_of_fml(b.nr_seq_person_name, 'FN') 
         NM_PESSOA_FISICA,-- NM_PESSOA_FISICA, 
         Person_name_of_fml(b.nr_seq_person_name, 'LN') 
         NM_PESSOA_LAST,-- NM_PESSOA_FISICA_Last,b.NR_SEQ_PERSON_NAME 
         Person_name_of_fml(b.nr_seq_person_name, 'MN') 
         NM_PESSOA_MIDDLE,-- NM_PESSOA_FISICA_MIDDLE, 
         Substr(c.nr_endereco 
                || ' ' 
                || c.ds_endereco, 1, 100)                                AS 
         STREET_OF_ADDRESS, 
         c.ds_municipio, 
         CASE WHEN(SELECT y.sg_pais                  FROM   compl_pessoa_fisica x,                         pais y                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         AND x.nr_seq_pais = y.nr_sequencia  LIMIT 1)='AU' THEN  c.cd_cep WHEN(SELECT y.sg_pais                  FROM   compl_pessoa_fisica x,                         pais y                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         AND x.nr_seq_pais = y.nr_sequencia  LIMIT 1)='NZ' THEN  9302 WHEN(SELECT y.sg_pais                  FROM   compl_pessoa_fisica x,                         pais y                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         AND x.nr_seq_pais = y.nr_sequencia  LIMIT 1)='PG' THEN  9301 coalesce(WHEN(SELECT y.sg_pais                  FROM   compl_pessoa_fisica x,                         pais y                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         AND x.nr_seq_pais = y.nr_sequencia  LIMIT 1)::text, '') = '' THEN  0989  ELSE 9399 END                            AS 
         postalCode, 
         CASE WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='NSW' THEN  1 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='VIC' THEN  2 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='QLD' THEN  3 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='SA' THEN  4 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='WA' THEN  5 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='TAS' THEN  6 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='NT' THEN  7 WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)='ACT' THEN  8 coalesce(WHEN(SELECT x.sg_estado                  FROM   compl_pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica  LIMIT 1)::text, '') = '' THEN  9  ELSE 0 END                               AS 
         state_of_resid, 
         CASE WHEN(SELECT x.ie_sexo                  FROM   pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         -- b.CD_PESSOA_FISICA 
  LIMIT 1)='M' THEN  1 WHEN(SELECT x.ie_sexo                  FROM   pessoa_fisica x                  WHERE  x.cd_pessoa_fisica = b.cd_pessoa_fisica                         
  LIMIT 1)='F' THEN  2  ELSE 3 END                               AS 
         IE_SEX 
         , 
         b.dt_nascimento, 
         Get_conversion_qhapdc('QHAPDC_MARITAL_STATUS', NULL, 5, 
         b.ie_estado_civil, 'I'), 
         Get_conversion_qhapdc('QHAPDC_COUNTRY_CODE', 'NACIONALIDADE', NULL, 
         b.cd_nacionalidade, 'I'), 
         d.cd_indigenous_status, 
         c.cd_profissao CD_OCCUPATION, 
         d.CD_EMPLOYMENT_STATUS, 
         b.cd_rfc, 
         d.cd_australian_islander 
         ISLANDER_STATUS, 
         c.nr_telefone 
         NR_TELEFONE_HOME, 
         b.nr_telefone_celular 
         NR_TELEFONE_MOBILE, 
         c.nr_telefone 
         NR_TELEFONE_BUSSINESS, 
         CASE WHEN(SELECT Max(d.ie_tipo_convenio)                  FROM   pessoa_titular_convenio e,                         convenio d                  WHERE  e.cd_convenio = d.cd_convenio                         AND e.cd_pessoa_fisica = b.cd_pessoa_fisica)=2 THEN  1  ELSE 9 END  AS 
         IE_TIPO_CONVENIO 
  INTO STRICT   nr_atendimento_w, nr_cd_pessao_fisicia_w, nr_atendimento_w, 
         first_name_b_w, 
  last_name_b_w, middle_name_b_w, street_of_address_c_w, ds_municipio_c_w, 
  cd_cep_c_w, sg_estado_c_w, ie_sexo_b_w, dt_nascimento_b_w, 
  ie_estado_civil_b_w, cd_nacionalidade_b_w, cd_indigenous_status_d_w, 
         cd_occupation_b_w, 
  cd_employment_status_c_w, cd_rfc_b_w, nr_seq_etnia_b_w, nr_telefone_home_c_w, 
  nr_telefone_mobile_b_w, nr_telefone_bussiness_c_w, ie_tipo_convenio_w 
  FROM atendimento_paciente a
LEFT OUTER JOIN qhapdc_hcp_assessment_data d ON (a.nr_atendimento = d.nr_atendimento)
, pessoa_fisica b
LEFT OUTER JOIN compl_pessoa_fisica c ON (b.cd_pessoa_fisica = c.cd_pessoa_fisica)
WHERE a.nr_atendimento = nr_referencia_p AND b.cd_pessoa_fisica = a.cd_pessoa_fisica   LIMIT 1;
   
   if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then      
      SELECT nextval('qhapdc_dataset_send_seq') 
  INTO STRICT   nr_seq_dataset_w 
;

  INSERT INTO qhapdc_dataset_send(nr_sequencia, 
               nm_usuario, 
               dt_atualizacao, 
               nm_usuario_nrec, 
               dt_atualizacao_nrec, 
               nr_seq_arquivo, 
               ie_dataset, 
               nr_atendimento, 
               nr_interno_conta, 
               nr_seq_nota_fiscal, 
               nr_seq_atend_prev_alta, 
               nr_seq_atend_alta) 
  VALUES (nr_seq_dataset_w, 
               nm_usuario_p, 
               clock_timestamp(), 
               nm_usuario_p, 
               clock_timestamp(), 
               nr_seq_arquivo_p, 
               ie_dataset_p, 
               nr_referencia_p, 
               nr_interno_conta_w, 
               nr_seq_nota_fiscal_w, 
               nr_seq_atend_prev_alta_w, 
               nr_seq_atend_alta_w );

  nr_seq_dataset_p := nr_seq_dataset_w;

  INSERT INTO qhapdc_segment_pat(nr_sequencia, 
               dt_atualizacao, 
               nm_usuario, 
               dt_atualizacao_nrec, 
               nm_usuario_nrec, 
               nr_atendimento, 
               nr_atendimento_admission, 
               ie_tipo_convenio, 
               cd_pessoa_fisica, 
               nm_pessoa_fisica, 
               nm_pessoa_middle, 
               nm_pessoa_last, 
               ie_sexo, 
               dt_nascimento, 
               ie_estado_civil, 
               cd_nacionalidade, 
               cd_rfc, 
               nr_telefone_celular, 
               ds_endereco_nr_endereco, 
               ds_municipio, 
               cd_cep, 
               sg_estado, 
               cd_profissao, 
               cd_profissao_employee_status, 
               nr_telefone, 
               nr_telefone_business_work, 
               nr_dataset, 
               nr_seq_etnia, 
               nr_seq_etnia_islander_status) 
  VALUES (nextval('qhapdc_segment_pat_seq'), 
              clock_timestamp(), 
              nm_usuario_p, 
              clock_timestamp(), 
              nm_usuario_p, 
              nr_referencia_p, 
              nr_referencia_p, 
              ie_tipo_convenio_w, 
              nr_cd_pessao_fisicia_w, 
              first_name_b_w, 
              middle_name_b_w, 
              last_name_b_w, 
              ie_sexo_b_w, 
              dt_nascimento_b_w, 
              ie_estado_civil_b_w, 
              cd_nacionalidade_b_w, 
              cd_rfc_b_w, 
              nr_telefone_mobile_b_w, 
              street_of_address_c_w, 
              ds_municipio_c_w, 
              cd_cep_c_w, 
              sg_estado_c_w, 
              cd_occupation_b_w, 
              cd_employment_status_c_w, 
              nr_telefone_home_c_w, 
              nr_telefone_bussiness_c_w, 
              nr_seq_dataset_w, 
              cd_indigenous_status_d_w, 
              nr_seq_etnia_b_w);
end if;
END IF;

returned_value_p := 1;

other_exception_p := NULL;
EXCEPTION 
  WHEN no_data_found THEN 
             nr_atendimento_w := -99;

             returned_value_p := 1; WHEN data_exception OR unique_violation OR
                                    invalid_cursor_state THEN 
             v_errm := Substr(SQLERRM, 1, 100);

             returned_value_p := 0;

             other_exception_p := v_errm;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_data_qhapdc_pkg.insert_dataset (nr_seq_lote_p bigint, nr_seq_arquivo_p bigint, ie_dataset_p text, nm_usuario_p text, nr_referencia_p bigint, nr_seq_dataset_p INOUT bigint, returned_value_p INOUT bigint, other_exception_p INOUT text) FROM PUBLIC;
