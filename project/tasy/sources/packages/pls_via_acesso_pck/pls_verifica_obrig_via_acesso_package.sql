-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_via_acesso_pck.pls_verifica_obrig_via_acesso ( dados_conta_p pls_via_acesso_pck.dados_conta, dados_conta_proc_p pls_via_acesso_pck.dados_conta_proc, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


qt_procedimento_w		pls_conta_proc.qt_procedimento_imp%type;
ie_origem_proced_w		pls_conta_proc.ie_origem_proced%type;
cd_procedimento_w		pls_conta_proc.cd_procedimento%type;
cd_proced_ant_w			pls_conta_proc.cd_procedimento%type;
ie_origem_proced_ant_w 		pls_conta_proc.ie_origem_proced%type;
var_cur_w 			integer;
var_exec_w			integer;
var_retorno_w			integer;
ds_sql_w			varchar(4000);
ie_grupo_servico_w		varchar(1)	:= 'S';
nr_seq_regra_w			pls_regra_via_acesso.nr_sequencia%type;
nr_seq_regra_ww			pls_regra_via_acesso.nr_sequencia%type;
ie_via_obrigatoria_w		pls_regra_via_acesso.ie_via_obrigatoria%type;
qt_proc_conta_w			pls_conta_proc.qt_procedimento%type;
dados_restricao_w		pls_via_acesso_pck.dados_restricao_select;
dados_regra_w			pls_via_acesso_pck.dados_regra;
ret_null_w			varchar(4000);
ie_excecao_w			varchar(1);
	
C01 CURSOR(	nr_seq_prestador_pc	pls_protocolo_conta.nr_seq_prestador%type,
		ie_origem_proced_pc	procedimento.ie_origem_proced%type,
		cd_procedimento_pc	procedimento.cd_procedimento%type,
		cd_grupo_proc_pc	procedimento.cd_grupo_proc%type,
		cd_especialidade_pc	pls_conta_proc_v.cd_especialidade%type,
		cd_area_procedimento_pc	pls_conta_proc_v.cd_area_procedimento%type,
		ie_tipo_guia_pc		pls_conta.ie_tipo_guia%type,
		dt_procedimento_pc	pls_conta_proc.dt_procedimento%type,
		ie_origem_conta_pc	pls_conta.ie_origem_conta%type)FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_grupo_servico,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.cd_area_procedimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_regra,
		a.qt_procedimento,
		a.nr_seq_prestador
	from	pls_regra_via_acesso	a
	where	a.ie_situacao	= 'A'
	and	((coalesce(a.nr_seq_prestador::text, '') = '') or (a.nr_seq_prestador = nr_seq_prestador_pc))
	and	((coalesce(a.cd_procedimento::text, '') = '') or (a.cd_procedimento	= cd_procedimento_pc AND a.ie_origem_proced = ie_origem_proced_pc))
	and	((coalesce(a.cd_grupo_proc::text, '') = '') or (a.cd_grupo_proc 	= cd_grupo_proc_pc))
	and	((coalesce(a.cd_especialidade::text, '') = '') or (a.cd_especialidade	= cd_especialidade_pc))
	and	((coalesce(a.cd_area_procedimento::text, '') = '') or (a.cd_area_procedimento	= cd_area_procedimento_pc))
	and	((coalesce(a.ie_tipo_guia::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_pc))
	and	((coalesce(a.ie_origem_conta::text, '') = '') or (a.ie_origem_conta	= ie_origem_conta_pc))
	and	dt_procedimento_pc 	between  coalesce(dt_inicio_vigencia,dt_procedimento_pc) and coalesce(dt_fim_vigencia,dt_procedimento_pc)
	and	((coalesce(a.nr_seq_grupo_servico::text, '') = '') or (exists (	SELECT	1						
								from	pls_proc_grup_serv_v 	grupo                      	
								where	grupo.nr_seq_grupo 	= a.nr_seq_grupo_servico           
								and	grupo.ie_origem_proced 	= ie_origem_proced_pc    
								and	grupo.cd_procedimento 	= cd_procedimento_pc )))
	order by a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento,
		a.nr_seq_grupo_servico,
		coalesce(nr_seq_prestador,0);

		
BEGIN
	
for r_c01_w in C01(	dados_conta_p.nr_seq_prestador_prot,
			dados_conta_proc_p.ie_origem_proced,
			dados_conta_proc_p.cd_procedimento,
			dados_conta_proc_p.cd_grupo_proc,
			dados_conta_proc_p.cd_especialidade,
			dados_conta_proc_p.cd_area_procedimento,
			dados_conta_p.ie_tipo_guia,
			dados_conta_proc_p.dt_procedimento,
			dados_conta_p.ie_origem_conta) loop
	begin
	
	ie_excecao_w	:= pls_via_acesso_pck.pls_se_excecao_via_acesso(r_c01_w.nr_sequencia, dados_conta_p.ie_origem_conta);
	
	if (ie_excecao_w	= 'N') then
		dados_regra_w.nr_seq_grupo_servico	:= r_c01_w.nr_seq_grupo_servico;
		dados_regra_w.cd_grupo_proc		:= r_c01_w.cd_grupo_proc;
		dados_regra_w.cd_especialidade		:= r_c01_w.cd_especialidade;
		dados_regra_w.cd_area_procedimento	:= r_c01_w.cd_area_procedimento;
		dados_regra_w.cd_procedimento		:= r_c01_w.cd_procedimento;
		dados_regra_w.ie_origem_proced		:= r_c01_w.ie_origem_proced;
		dados_regra_w.ie_regra			:= r_c01_w.ie_regra;
		dados_regra_w.qt_procedimento		:= r_c01_w.qt_procedimento;	
		dados_regra_w.nr_seq_prestador		:= r_c01_w.nr_seq_prestador;
		nr_seq_regra_ww				:= r_c01_w.nr_sequencia;
		dados_restricao_w.ds_restricao_proc 	:= '';
		dados_restricao_w.ds_restricao_partic	:= '';
		cd_proced_ant_w 			:= null;
		ie_origem_proced_ant_w 			:= null;
		--Tipo de guia diferente de resumo de internação ou aplicação da regra diferente de mesma guia
		if (dados_regra_w.ie_regra != 'MG') or (dados_conta_p.ie_tipo_guia != '5') then
			--Carrega as restrições vinculadas  ao procedimento
			dados_restricao_w.ds_restricao_proc := dados_restricao_w.ds_restricao_proc||pls_via_acesso_pck.pls_obter_restricao_via(	'RESTRICAO',dados_regra_w,var_cur_w,
																dados_conta_proc_p,dados_conta_p,'CP');
			-- Aqui é montado o select para recuperar os procedimentos que foram executados e se encaixam na regra montada.
			ds_sql_w :=	'select	sum(cp.qt_procedimento_imp) qt_procedimento,'  || pls_tipos_ocor_pck.enter_w ||
					'	cp.cd_procedimento, '  || pls_tipos_ocor_pck.enter_w ||
					'	cp.ie_origem_proced '  || pls_tipos_ocor_pck.enter_w ||
					'from	pls_conta_proc_v	cp '  || pls_tipos_ocor_pck.enter_w ||
					'where	cp.dt_procedimento_trunc	= :dt_procedimento_p '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.nr_seq_segurado		= :nr_seq_segurado_p '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.ie_glosa			= ''N'' '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.ie_status			not in (''M'',''D'') '  || pls_tipos_ocor_pck.enter_w ||
					'and	((cp.nr_seq_conta		= :nr_seq_conta_p)   or (cp.cd_guia_referencia	= :cd_guia_referencia_p))'  || pls_tipos_ocor_pck.enter_w ||
					dados_restricao_w.ds_restricao_proc || pls_tipos_ocor_pck.enter_w ||
					'group by	cp.nr_seq_conta,	cp.cd_procedimento, cp.ie_origem_proced '|| pls_tipos_ocor_pck.enter_w ||
					'order by 	cp.ie_origem_proced, cp.cd_procedimento ';
			
			-- Abrir um novo cursor
			var_cur_w := dbms_sql.open_cursor;
			begin
				-- Criar o cursor
				dbms_sql.parse(var_cur_w, ds_sql_w, 1);
				
				dbms_sql.bind_variable(var_cur_w, ':dt_procedimento_p', dados_conta_proc_p.dt_procedimento);				
				dbms_sql.bind_variable(var_cur_w, ':nr_seq_segurado_p', dados_conta_p.nr_seq_segurado);				
				dbms_sql.bind_variable(var_cur_w, ':nr_seq_conta_p', dados_conta_p.nr_seq_conta);				
				dbms_sql.bind_variable(var_cur_w, ':cd_guia_referencia_p', dados_conta_proc_p.cd_guia_referencia);
							
				--Atualiza as binds que serão utilizadas no select
				ret_null_w	:= pls_via_acesso_pck.pls_obter_restricao_via(	'BIND',dados_regra_w,var_cur_w,
				dados_conta_proc_p,dados_conta_p,'CP');
								
				--Executar select  dinamico
				dbms_sql.define_column(var_cur_w, 1, qt_procedimento_w);
				dbms_sql.define_column(var_cur_w, 2, cd_procedimento_w);
				dbms_sql.define_column(var_cur_w, 3, ie_origem_proced_w);
				var_exec_w := dbms_sql.execute(var_cur_w);
			
				loop
				var_retorno_w := dbms_sql.fetch_rows(var_cur_w);
				exit when var_retorno_w = 0;
					-- Pegar os dados do SQL dinamico
					dbms_sql.column_value(var_cur_w, 1, qt_procedimento_w);
					dbms_sql.column_value(var_cur_w, 2, cd_procedimento_w);
					dbms_sql.column_value(var_cur_w, 3, ie_origem_proced_w);
					
					if (coalesce(cd_proced_ant_w::text, '') = '') and (coalesce(ie_origem_proced_ant_w::text, '') = '') then
						qt_proc_conta_w := coalesce(qt_proc_conta_w,0) + qt_procedimento_w;
					elsif (cd_proced_ant_w != cd_procedimento_w) or (ie_origem_proced_ant_w != ie_origem_proced_w ) then
						qt_proc_conta_w := coalesce(qt_proc_conta_w,0) + qt_procedimento_w;
					elsif (qt_procedimento_w > 1) then
						qt_proc_conta_w := coalesce(qt_proc_conta_w,0) + qt_procedimento_w - 1;
					end if;
					cd_proced_ant_w := cd_procedimento_w;
					ie_origem_proced_ant_w:= ie_origem_proced_w;
				end loop; -- Contas filtradas
				dbms_sql.close_cursor(var_cur_w);
				
			end;		

		else
			begin
			dados_regra_w.ie_regra			:= null;
			--Verifica as contas de resumo de internação verificando onde existe conta proc diferente com mesmo medico executor ou prestador executor
			--Atualiza as restrições vinculadas ao procedimento
			dados_restricao_w.ds_restricao_proc := dados_restricao_w.ds_restricao_proc||pls_via_acesso_pck.pls_obter_restricao_via(	'RESTRICAO',dados_regra_w,var_cur_w,
																dados_conta_proc_p, dados_conta_p,'CP');
			--Monta as restrições ligadas ao participante que está vinculado ao procedimento
			dados_restricao_w.ds_restricao_partic := dados_restricao_w.ds_restricao_proc||pls_via_acesso_pck.pls_obter_restricao_via(	'RESTRICAO',dados_regra_w,var_cur_w,
			dados_conta_proc_p,dados_conta_p,'P');
			
			--Aqui é montado o select para recuperar os procedimentos que foram executados e se encaixam na regra montada.
			ds_sql_w :=	'select	sum(cp.qt_procedimento_imp) qt_procedimento'  || pls_tipos_ocor_pck.enter_w ||
					'from	pls_conta_proc_v	cp, '  || pls_tipos_ocor_pck.enter_w ||
					'	pls_proc_participante_v	pp  '  || pls_tipos_ocor_pck.enter_w ||
					'where	cp.dt_procedimento_trunc	= :dt_procedimento_p '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.nr_seq_segurado		= :nr_seq_segurado_p '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.ie_glosa			= ''N'' '  || pls_tipos_ocor_pck.enter_w ||
					'and	cp.ie_status			not in (''M'',''D'') '  || pls_tipos_ocor_pck.enter_w ||
					'and	((cp.nr_seq_conta		= :nr_seq_conta_p)   or (cp.cd_guia_referencia	= :cd_guia_referencia_p))'  || pls_tipos_ocor_pck.enter_w ||
					dados_restricao_w.ds_restricao_proc || pls_tipos_ocor_pck.enter_w ||
					'and	cp.nr_sequencia		= pp.nr_seq_conta_proc 			'|| pls_tipos_ocor_pck.enter_w ||
					'and	exists			(select	1				'|| pls_tipos_ocor_pck.enter_w ||	
					'				from	pls_conta_proc_v	ccp,	'|| pls_tipos_ocor_pck.enter_w ||
					'					pls_proc_participante_v	cpp	'|| pls_tipos_ocor_pck.enter_w ||
					'				where	ccp.dt_procedimento_trunc	= :dt_procedimento_p 	'|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.nr_seq_segurado		= :nr_seq_segurado_p	'|| pls_tipos_ocor_pck.enter_w ||
					'				and	((ccp.nr_seq_conta		= :nr_seq_conta_p)   or (ccp.cd_guia_referencia	= :cd_guia_referencia_p)) '|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.ie_glosa			= ''N''			'|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.nr_sequencia		!= cp.nr_sequencia	'|| pls_tipos_ocor_pck.enter_w ||
					'				and	cpp.cd_medico			= pp.cd_medico		'|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.ie_tipo_guia		= ''5''	'|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.nr_sequencia		= cpp.nr_seq_conta_proc	'|| pls_tipos_ocor_pck.enter_w ||
					'				and	ccp.ie_status			not in (''M'',''D'') 	'|| pls_tipos_ocor_pck.enter_w ||
					dados_restricao_w.ds_restricao_partic || ' ) ';
			-- Abrir um novo cursor
			var_cur_w := dbms_sql.open_cursor;
			begin
				-- Criar o cursor
				dbms_sql.parse(var_cur_w, ds_sql_w, 1);
				
				dbms_sql.bind_variable(var_cur_w, ':dt_procedimento_p', dados_conta_proc_p.dt_procedimento);
				dbms_sql.bind_variable(var_cur_w, ':nr_seq_segurado_p', dados_conta_p.nr_seq_segurado);
				dbms_sql.bind_variable(var_cur_w, ':nr_seq_conta_p', dados_conta_p.nr_seq_conta);
				dbms_sql.bind_variable(var_cur_w, ':cd_guia_referencia_p', dados_conta_proc_p.cd_guia_referencia);
				--Atualiza as binds que serão utilizadas no select
				ret_null_w	:= pls_via_acesso_pck.pls_obter_restricao_via(	'BIND',dados_regra_w,var_cur_w,
										dados_conta_proc_p,dados_conta_p,'CP');				
				
				--Executar select  dinamico
				dbms_sql.define_column(var_cur_w, 1, qt_proc_conta_w);
				var_exec_w := dbms_sql.execute(var_cur_w);
				loop
				var_retorno_w := dbms_sql.fetch_rows(var_cur_w);
				exit when var_retorno_w = 0;
					-- Pegar os dados do SQL dinamico
					dbms_sql.column_value(var_cur_w, 1, qt_proc_conta_w);
				end loop; -- Contas filtradas
				dbms_sql.close_cursor(var_cur_w);
			end;	
			
			if (coalesce(qt_proc_conta_w::text, '') = '') then
				qt_proc_conta_w := 0;
			end if;
			end;
		
		end if;
		
		if (qt_proc_conta_w	>= dados_regra_w.qt_procedimento) then
			nr_seq_regra_w		:= nr_seq_regra_ww;
		end if;
	end if;
	
	end;
end loop;

if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
	select	max(a.ie_via_obrigatoria)
	into STRICT	ie_via_obrigatoria_w
	from	pls_regra_via_acesso	a
	where	a.nr_sequencia	= nr_seq_regra_w;
end if;

if (coalesce(ie_via_obrigatoria_w::text, '') = '') then
	ie_via_obrigatoria_w	:= 'N';
end if;

update	pls_conta_proc
set	ie_via_obrigatoria	= ie_via_obrigatoria_w
where	nr_sequencia		= dados_conta_proc_p.nr_seq_conta_proc;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_via_acesso_pck.pls_verifica_obrig_via_acesso ( dados_conta_p pls_via_acesso_pck.dados_conta, dados_conta_proc_p pls_via_acesso_pck.dados_conta_proc, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
