-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--
-- dblink wrapper to call function apap_history_pck.get_history_information() as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION apap_history_pck.get_history_information ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, dt_start_p timestamp, dt_end_p timestamp, use_column_value_p text default 'N') RETURNS SETOF T_HISTORY_TABLE AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	T_HISTORY_TABLE;
BEGIN
	v_query := 'SELECT * FROM apap_history_pck.get_history_information_atx ( ' || quote_nullable(nr_seq_information_p) || ',' || quote_nullable(dt_start_p) || ',' || quote_nullable(dt_end_p) || ',' || quote_nullable(use_column_value_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret T_HISTORY_TABLE);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION apap_history_pck.get_history_information_atx ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, dt_start_p timestamp, dt_end_p timestamp, use_column_value_p text default 'N') RETURNS SETOF T_HISTORY_TABLE AS $body$
DECLARE


        cursor_id           integer;
        cursor_ret          integer;
        row_w               t_history_row;
        ds_type_w           varchar(255)   := NULL;
		ie_type_w           varchar(15)   := NULL;
        dt_action_w         timestamp            := NULL;
        dt_reference_w      timestamp            := NULL;
        nm_usuario_w        varchar(255)   := NULL;
        ds_action_w         varchar(4000)  := NULL;history RECORD;

BEGIN
    BEGIN
        /* -- get sql select -- */

        PERFORM set_config('apap_history_pck.w_sql', apap_history_pck.create_dinamic_sql(nr_seq_information_p, use_column_value_p), false);
        cursor_id := dbms_sql.open_cursor;

        dbms_sql.parse(cursor_id, current_setting('apap_history_pck.w_sql')::text, dbms_sql.native);

        DBMS_SQL.DEFINE_COLUMN(cursor_id,1,ds_type_w,255);
		DBMS_SQL.DEFINE_COLUMN(cursor_id,2,ie_type_w,15);
        DBMS_SQL.DEFINE_COLUMN(cursor_id,3,dt_action_w);
        DBMS_SQL.DEFINE_COLUMN(cursor_id,4,nm_usuario_w,255);
        DBMS_SQL.DEFINE_COLUMN(cursor_id,5,ds_action_w,4000);
        DBMS_SQL.DEFINE_COLUMN(cursor_id,6,dt_reference_w);


        /*
         * Below is filled in possible BIND variables of an SQL query.
         *
         */
        if (position(':DT_START_P' in current_setting('apap_history_pck.w_sql')::text) > 0) then
			dbms_sql.bind_variable(cursor_id, ':DT_START_P', dt_start_p);
		end if;
        if (position(':DT_END_P' in current_setting('apap_history_pck.w_sql')::text) > 0) then
			dbms_sql.bind_variable(cursor_id, ':DT_END_P', dt_end_p);
		end if;
        if (position(':NR_ATENDIMENTO_P' in current_setting('apap_history_pck.w_sql')::text) > 0) then
			dbms_sql.bind_variable(cursor_id, ':NR_ATENDIMENTO_P', current_setting('apap_history_pck.nr_atendimento_w')::w_apap_pac.nr_atendimento%TYPE);
		end if;
        if (position(':CD_PESSOA_FISICA_P' in current_setting('apap_history_pck.w_sql')::text) > 0) then
			dbms_sql.bind_variable(cursor_id, ':CD_PESSOA_FISICA_P', current_setting('apap_history_pck.cd_pessoa_fisica_w')::w_apap_pac.cd_pessoa_fisica%TYPE);
		end if;
        if (position(':NM_USUARIO_P' in current_setting('apap_history_pck.w_sql')::text) > 0) then
			dbms_sql.bind_variable(cursor_id, ':NM_USUARIO_P', wheb_usuario_pck.get_nm_usuario());
		end if;

        cursor_ret := dbms_sql.execute(cursor_id);

        LOOP IF DBMS_SQL.FETCH_ROWS(cursor_id) = 0 THEN EXIT;
        END IF;
            dbms_sql.column_value(cursor_id, 1, ds_type_w);
			dbms_sql.column_value(cursor_id, 2, ie_type_w);
            dbms_sql.column_value(cursor_id, 3, dt_action_w);
            dbms_sql.column_value(cursor_id, 4, nm_usuario_w);
            dbms_sql.column_value(cursor_id, 5, ds_action_w);
            dbms_sql.column_value(cursor_id, 6, dt_reference_w);

            row_w.ds_type             := ds_type_w;
			row_w.ie_type             := ie_type_w;
            row_w.dt_action           := dt_action_w;
            row_w.nm_usuario          := nm_usuario_w;
            row_w.ds_action           := ds_action_w;
            row_w.dt_reference        := dt_reference_w;
            RETURN NEXT row_w;
        END LOOP;
		DBMS_SQL.CLOSE_CURSOR(cursor_id);
        RETURN;
    EXCEPTION
    WHEN OTHERS THEN
        IF (use_column_value_p = 'N') THEN
            FOR history IN (SELECT ds_type,
					ie_type,
                    dt_action,
                    nm_usuario,
                    ds_action,
                    dt_reference
            FROM TABLE(apap_history_pck.get_history_information( nr_seq_information_p, dt_start_p, dt_end_p, 'Y')))
            LOOP
                row_w.ds_type             := history.ds_type;
				row_w.ie_type             := history.ie_type;
                row_w.dt_action           := history.dt_action;
                row_w.nm_usuario          := history.nm_usuario;
                row_w.ds_action           := history.ds_action;
                row_w.dt_reference        := history.dt_reference;
                RETURN NEXT row_w;
            END LOOP;
        END IF;
    END;
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION apap_history_pck.get_history_information ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, dt_start_p timestamp, dt_end_p timestamp, use_column_value_p text default 'N') FROM PUBLIC; -- REVOKE ALL ON FUNCTION apap_history_pck.get_history_information_atx ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, dt_start_p timestamp, dt_end_p timestamp, use_column_value_p text default 'N') FROM PUBLIC;
