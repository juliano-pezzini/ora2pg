-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION apap_history_pck.create_dinamic_sql ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, use_column_value_p text default 'N') RETURNS text AS $body$
DECLARE


        /* -- select informations attributes -- */

            nm_atributo_tabela_w w_apap_pac_informacao.nm_atributo_tabela%TYPE := NULL;
            nr_seq_linked_data_w w_apap_pac_informacao.nr_seq_linked_data%TYPE := NULL;
            nr_seq_documento_w w_apap_pac.nr_seq_documento%TYPE := NULL;
            ds_informacao_w varchar(255) := '';
            nr_seq_visao_w w_apap_pac_informacao.nr_seq_visao%TYPE := NULL;
            nm_atributo_status_w varchar(30) := NULL;
            nm_atributo_linked_w varchar(30) := NULL;
            nm_atributo_date_w varchar(30) := NULL;
            nm_tabela_w varchar(30) := NULL;
            ie_componente_w tabela_visao_atributo.ie_componente%TYPE := NULL;
            cd_dominio_w tabela_visao_atributo.cd_dominio%TYPE := NULL;
            ds_valores_w tabela_visao_atributo.ds_valores%TYPE := NULL;
			ds_unid_med_w	w_apap_pac_informacao.ds_unid_med%type;
			ie_aparelho_pa_w	w_apap_pac_informacao.ie_aparelho_pa%type;

        /* -- select personalized attributes -- */

            w_ie_replace_sql   boolean := false;
            w_header_sql   varchar(1000);
            w_row_hist      linked_data_historico%ROWTYPE;
            w_sql_linked    linked_data_historico.ds_sql%TYPE := '';
            w_cursor_hist CURSOR FOR SELECT
                                        *
                                    FROM linked_data_historico A
                                    WHERE
                                        A.nr_seq_linked_data = nr_seq_linked_data_w AND
                                        A.nr_seq_visao = nr_seq_visao_w AND
                                        (trim(both A.DS_SQL) IS NOT NULL AND (trim(both A.DS_SQL))::text <> '');
        /* -- select dynamic attributes -- */

            w_label_type    varchar(255);

BEGIN
        PERFORM set_config('apap_history_pck.w_sql', '', false);

        /* 
         * Gets all the important information of the selected attribute in the flowsheet.
         */
        SELECT
            MAX(A.nm_atributo_tabela), MAX(a.nr_seq_visao),
            MAX(c.nr_atendimento),     MAX(c.cd_pessoa_fisica),
            MAX(a.nr_seq_linked_data), MAX(a.nm_tabela), 
            MAX(A.nm_atributo_linked),  MAX(c.nr_seq_documento),
            MAX(f_situacao.nm_atributo) nm_atributo_status,
            MAX(f_data.nm_atributo)     nm_atributo_date,
			max(CASE WHEN obtain_user_locale(wheb_usuario_pck.get_nm_usuario)='ja_JP' THEN coalesce(substr(expressao_pck.obter_desc_expressao(E.cd_exp_informacao),1,50),A.nm_atributo_tabela)  ELSE a.ds_informacao END ),
            MAX(G.ie_componente), MAX(G.cd_dominio), MAX(G.ds_valores), max(a.ds_unid_med), coalesce(max(ie_aparelho_pa),'C')
        INTO STRICT 
            nm_atributo_tabela_w, nr_seq_visao_w, 
            current_setting('apap_history_pck.nr_atendimento_w')::w_apap_pac.nr_atendimento%TYPE, current_setting('apap_history_pck.cd_pessoa_fisica_w')::w_apap_pac.cd_pessoa_fisica%TYPE,
            nr_seq_linked_data_w, nm_tabela_w, 
            nm_atributo_linked_w, nr_seq_documento_w,
            nm_atributo_status_w, 
            nm_atributo_date_w, 
            ds_informacao_w,
            ie_componente_w, cd_dominio_w, ds_valores_w, ds_unid_med_w,ie_aparelho_pa_w
        FROM w_apap_pac_informacao A
        INNER JOIN w_apap_pac_grupo b ON
            A.nr_seq_apap_grupo = b.nr_sequencia
        INNER JOIN w_apap_pac C ON
            C.nr_sequencia = b.nr_seq_mod_apap
        INNER JOIN linked_data D ON
            D.nr_sequencia = a.nr_seq_linked_data
        INNER JOIN linked_data_atributo E ON
            E.nr_seq_linked_data = D.nr_sequencia AND
            E.nm_atributo_linked = A.nm_atributo_linked
        LEFT JOIN documento_atributo_ref f_situacao ON
            f_situacao.nr_seq_linked_data = D.nr_sequencia AND
            f_situacao.nr_seq_visao = A.nr_seq_visao AND
            f_situacao.ie_referencia = 'STATUS'
        LEFT JOIN documento_atributo_ref f_data ON
            f_data.nr_seq_linked_data = D.nr_sequencia AND
            f_data.nr_seq_visao = A.nr_seq_visao AND
            f_data.ie_referencia = 'A'
        LEFT JOIN tabela_visao_atributo G ON
            G.nr_sequencia = A.nr_seq_visao AND
            G.nm_atributo = A.nm_atributo_tabela
        WHERE
            A.nr_sequencia = nr_seq_information_p;

        /* 
         * Join select flowsheet comments
         */
		if (obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'ja_JP') then
			CALL apap_history_pck.concatenate_sql('select         
							expressao_pck.obter_desc_expressao(285521) DS_TYPE,
							''C'' IE_TYPE,
							DT_ATUALIZACAO_NREC DT_ACTION,
							NM_USUARIO,
							DS_COMENTARIO DS_ACTION,
							DT_APAP DT_REFERENCE
						from w_apap_pac_registro_hist
						WHERE
							NR_ATENDIMENTO = :NR_ATENDIMENTO_P AND
							NM_ATRIBUTO = ''' || nm_atributo_linked_w || ''' AND 
							NM_TABELA = ''' || nm_tabela_w || ''' AND
							NR_SEQ_DOCUMENTO = '|| nr_seq_documento_w ,'N');
		else
			CALL apap_history_pck.concatenate_sql('select         
							expressao_pck.obter_desc_expressao(285521) DS_TYPE,
							''C'' IE_TYPE,
							DT_ATUALIZACAO_NREC DT_ACTION,
							NM_USUARIO,
							DS_RESULT_DESC ||'||''': '''||'|| DS_COMENTARIO DS_ACTION,
							DT_APAP DT_REFERENCE
						from w_apap_pac_registro_hist
						WHERE
							NR_ATENDIMENTO = :NR_ATENDIMENTO_P AND
							NM_ATRIBUTO = ''' || nm_atributo_linked_w || ''' AND 
							NM_TABELA = ''' || nm_tabela_w || ''' AND
							NR_SEQ_DOCUMENTO = '|| nr_seq_documento_w ,'N');
		end if;

        /*
         * This cursor looks for selects linked to the record's view and linked data.
         * If there is a record marked to replace the default SQL, the script should not generate a dynamic query.
         *
         */
        FOR w_row_hist IN w_cursor_hist LOOP
            if (w_row_hist.IE_EXECUCAO_SQL = 'S') THEN
                w_ie_replace_sql := true;
            END IF;

            w_header_sql := ' SELECT @DS_TYPE@ DS_TYPE, ''R'' IE_TYPE, @DT_ACTION@  DT_ACTION, @NM_USUARIO@ NM_USUARIO,@DS_ACTION@ DS_ACTION,@DT_REFERENCE@ DT_REFERENCE FROM ( ';
            w_header_sql := REPLACE(w_header_sql,'@DS_TYPE@',w_row_hist.DS_ATRIBUTO_TIPO);
            w_header_sql := REPLACE(w_header_sql,'@DT_ACTION@',w_row_hist.DS_ATRIBUTO_DT_ACAO);
            w_header_sql := REPLACE(w_header_sql,'@NM_USUARIO@',w_row_hist.DS_ATRIBUTO_USUARIO);
            w_header_sql := REPLACE(w_header_sql,'@DS_ACTION@',w_row_hist.DS_ATRIBUTO_DESCRICAO);
            w_header_sql := REPLACE(w_header_sql,'@DT_REFERENCE@',w_row_hist.DS_ATRIBUTO_DT_REF);
            w_sql_linked  :=   w_sql_linked  || CHR(13) ||' UNION ALL ' || CHR(13);
            w_sql_linked  :=   w_sql_linked  || w_header_sql || w_row_hist.DS_SQL || ')';

        END LOOP;

        w_sql_linked  := regexp_replace(w_sql_linked, CHR(13) ||' UNION ALL ' || CHR(13),'',1,1);
        CALL apap_history_pck.concatenate_sql(w_sql_linked,'Y');


        /*
         * To create new sql joins, you need to add here.
         * You can use the syntax:
         *
         *   apap_history_pck.concatenate_sql( [SQL COMMAND], [CONCATENATE UNION ALL ( Y, N)])
         */
		/* -- Will generate the dynamic query only if the table is not W_APAP_TOTAL -- */

		IF (UPPER(nm_tabela_w) <> 'W_APAP_TOTAL') THEN

			/* -- check if the system should generate the dynamic query -- */

			IF (( w_ie_replace_sql = false OR coalesce(w_sql_linked::text, '') = '' ) AND (nm_atributo_date_w IS NOT NULL AND nm_atributo_date_w::text <> '') AND (nm_atributo_tabela_w IS NOT NULL AND nm_atributo_tabela_w::text <> '') ) THEN

                w_label_type := expressao_pck.obter_desc_expressao(849061);

				/* -- Check if columns that are used for the released registers exist in the table to prevent errors -- */

				SELECT
					COUNT(*)
				INTO STRICT
					current_setting('apap_history_pck.nr_exists_col_tab')::bigint
				FROM user_tab_cols a
				WHERE 
					UPPER(a.column_name) IN ('DT_LIBERACAO', 'NR_ATENDIMENTO', UPPER(nm_atributo_date_w), UPPER(nm_atributo_tabela_w))
					AND UPPER(a.table_name) = nm_tabela_w;
					
				PERFORM set_config('apap_history_pck.w_ds_where_sql', '', false);
				if (nm_tabela_w = 'ATENDIMENTO_SINAL_VITAL') then
					PERFORM set_config('apap_history_pck.w_ds_where_sql', ' and	((('''||ie_aparelho_pa_w||''' = ''C'') and (nvl(ie_aparelho_pa,''C'') in (''C'',''E''))) or ('''||ie_aparelho_pa_w||''' = ''I'') and (ie_aparelho_pa = ''I'')) ', false);
				end if;	

				IF (current_setting('apap_history_pck.nr_exists_col_tab')::bigint = 4) THEN
					/* -- join released register -- */

                    /* -- if the attribute is a lookup combobox, or if use_column_value_p = 'N', the presented value needs to be the description and not the code -- */

                    IF (ie_componente_w = 'lcb' AND use_column_value_p = 'N') THEN
                        /* -- if the register comes from a domain, recovers the domain description */

                        IF (cd_dominio_w IS NOT NULL AND cd_dominio_w::text <> '') THEN
                            PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || DOMINIO_PCK.OBTER_VALOR_DOMINIO( ' || cd_dominio_w || ', ' || nm_atributo_tabela_w || ')', false);
                        /* -- if not a domain and if the register has the values section defined, use that -- */

                        ELSIF (ds_valores_w IS NOT NULL AND ds_valores_w::text <> '') THEN
                            PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || (SELECT DS
                                                FROM ( 
                                                    ' || ds_valores_w || '
                                                ) B
                                                WHERE B.CD = a.' || nm_atributo_tabela_w || ')', false);
                        END IF;
                    /* -- if the attribute is not a lookup combobox, or if use_column_value_p = 'Y', use directly the value of the column -- */
                    ELSE
						if (obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'ja_JP') then
							PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || ' || nm_atributo_tabela_w, false);
						else	
							PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || ' || nm_atributo_tabela_w||'||'||''' '||ds_unid_med_w||'''', false);
						end if;	
                    END IF;
					
                    CALL apap_history_pck.concatenate_sql(' SELECT 
                                            ''' || w_label_type || ''' DS_TYPE,
											''L'' IE_TYPE,
                                            DT_LIBERACAO DT_ACTION, 
                                            a.NM_USUARIO, 
                                            ' || current_setting('apap_history_pck.w_ds_action_sql')::varchar(4000) || ' DS_ACTION,
                                            ' || nm_atributo_date_w ||' DT_REFERENCE
                                       FROM  '|| nm_tabela_w ||' a 
                                       WHERE ' || nm_atributo_tabela_w || ' IS NOT NULL '||
									   current_setting('apap_history_pck.w_ds_where_sql')::varchar(4000)||'
                                       AND   DT_LIBERACAO IS NOT NULL
                                       AND   NR_ATENDIMENTO = :NR_ATENDIMENTO_P');
				END IF;

				/* -- Check if columns that are used for the inactivated registers exist in the table to prevent errors  -- */

				SELECT
					COUNT(*)
				INTO STRICT
					current_setting('apap_history_pck.nr_exists_col_tab')::bigint
				FROM user_tab_cols a
				WHERE 
					UPPER(a.column_name) IN ('DT_INATIVACAO', 'IE_SITUACAO', 'NR_ATENDIMENTO', UPPER(nm_atributo_date_w), UPPER(nm_atributo_tabela_w))
					AND UPPER(a.table_name) = nm_tabela_w;

				IF (current_setting('apap_history_pck.nr_exists_col_tab')::bigint = 5) THEN

                    w_label_type := expressao_pck.obter_desc_expressao(331011);

                    /* -- if the attribute is a lookup combobox, or if use_column_value_p = 'N', the presented value needs to be the description and not the code -- */

                    IF (ie_componente_w = 'lcb' AND use_column_value_p = 'N') THEN
                        /* -- if the register comes from a domain, recovers the domain description */

                        IF (cd_dominio_w IS NOT NULL AND cd_dominio_w::text <> '') THEN
                            PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || DOMINIO_PCK.OBTER_VALOR_DOMINIO( ' || cd_dominio_w || ', ' || nm_atributo_tabela_w || ')', false);
                        /* -- if not a domain and if the register has the values section defined, use that -- */

                        ELSIF (ds_valores_w IS NOT NULL AND ds_valores_w::text <> '') THEN
                            PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || (SELECT DS
                                                FROM ( 
                                                    ' || ds_valores_w || '
                                                ) B
                                                WHERE B.CD = a.' || nm_atributo_tabela_w || ')', false);
                        END IF;
                    /* -- if the attribute is not a lookup combobox, or if use_column_value_p = 'Y', use directly the value of the column -- */
                    ELSE
                        if (obtain_user_locale(wheb_usuario_pck.get_nm_usuario) = 'ja_JP') then
							PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || ' || nm_atributo_tabela_w, false);
						else	
							PERFORM set_config('apap_history_pck.w_ds_action_sql', '''' || ds_informacao_w ||': '' || ' || nm_atributo_tabela_w||'||'||''' '||ds_unid_med_w||'''', false);
						end if;	
                    END IF;

					/* -- join inactivated register -- */

					CALL apap_history_pck.concatenate_sql(' SELECT  
											''' || w_label_type || ''' DS_TYPE,
											''I'' IE_TYPE,
											NVL(DT_INATIVACAO, DT_ATUALIZACAO) DT_ACTION, 
											a.NM_USUARIO, 
											' || current_setting('apap_history_pck.w_ds_action_sql')::varchar(4000) || ' DS_ACTION,
											' || nm_atributo_date_w ||' DT_REFERENCE
									   FROM '|| nm_tabela_w ||' a  
									   WHERE DT_LIBERACAO IS NOT NULL
									   AND   ' || nm_atributo_tabela_w || ' IS NOT NULL '||
									   current_setting('apap_history_pck.w_ds_where_sql')::varchar(4000)||'
									   AND   NR_ATENDIMENTO = :NR_ATENDIMENTO_P
									   AND   (IE_SITUACAO = ''I'' OR DT_INATIVACAO IS NOT NULL)');
				END IF;
			END IF;
		END IF;

        PERFORM set_config('apap_history_pck.w_sql', 'SELECT DS_TYPE, IE_TYPE, DT_ACTION, OBTER_NOME_USUARIO_UPPER(NM_USUARIO) NM_USUARIO, DS_ACTION,DT_REFERENCE FROM (' || current_setting('apap_history_pck.w_sql')::text || ') WHERE DT_REFERENCE BETWEEN :DT_START_P AND :DT_END_P ORDER BY DT_ACTION DESC', false);

        RETURN current_setting('apap_history_pck.w_sql')::text;

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION apap_history_pck.create_dinamic_sql ( nr_seq_information_p w_apap_pac_informacao.nr_sequencia%TYPE, use_column_value_p text default 'N') FROM PUBLIC;
