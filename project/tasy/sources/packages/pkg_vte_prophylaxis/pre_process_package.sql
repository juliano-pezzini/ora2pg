-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

  --
CREATE OR REPLACE PROCEDURE pkg_vte_prophylaxis.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) AS $body$
DECLARE

    --
    NM_USUARIO_W USUARIO.NM_USUARIO%TYPE;
    --
    C_ATEND CURSOR(V_START_DATE timestamp,
                    V_END_DATE   timestamp,
                    V_SETOR      bigint,
                    V_PATIENT    text) FOR
      SELECT CD_ESTABELECIMENTO,
             CD_SETOR_ATENDIMENTO,
             NR_ATENDIMENTO,
             DT_ENTRADA_SETOR,
             DT_SAIDA_SETOR,
             IE_AT_RISK,
             DT_FIRST_MED,
             IE_FIRST_MED,
             DT_FIRST_DEV,
             DT_FIRST_TREAT,
             IE_FIRST_TREAT,
             CASE WHEN IE_AT_RISK = 0 THEN 0
                  WHEN coalesce(DT_FIRST_TREAT::text, '') = '' THEN 4
                  WHEN TO_DATE(DT_FIRST_TREAT) - DT_ENTRADA_SETOR < 1 THEN 1
                  WHEN TO_DATE(DT_FIRST_TREAT) - DT_ENTRADA_SETOR <= 2 THEN 2
                  ELSE 3
             END IE_TIME_TREAT,
             IE_TYPE_TREAT
        FROM (SELECT CD_ESTABELECIMENTO,
                     CD_SETOR_ATENDIMENTO,
                     NR_ATENDIMENTO,
                     DT_ENTRADA_SETOR,
                     DT_SAIDA_SETOR,
                     IE_AT_RISK,
                     DT_FIRST_MED,
                     CASE WHEN coalesce(CD_FIRST_MED::text, '') = '' THEN  0 WHEN CD_FIRST_MED=27 THEN  1 WHEN CD_FIRST_MED=28 THEN  2 WHEN CD_FIRST_MED=29 THEN  3 WHEN CD_FIRST_MED=30 THEN  4 WHEN CD_FIRST_MED=31 THEN  5 WHEN CD_FIRST_MED=32 THEN  6  ELSE NULL END  IE_FIRST_MED,
                     DT_FIRST_DEV,
                     CASE WHEN IE_TYPE_TREAT=0 THEN  NULL WHEN IE_TYPE_TREAT=1 THEN  DT_FIRST_DEV WHEN IE_TYPE_TREAT=2 THEN  DT_FIRST_MED  ELSE LEAST(DT_FIRST_DEV, DT_FIRST_MED) END  DT_FIRST_TREAT,
                     CASE WHEN IE_TYPE_TREAT=3 THEN  CASE WHEN LEAST(DT_FIRST_DEV, DT_FIRST_MED)=DT_FIRST_MED THEN  2  ELSE 1 END   ELSE IE_TYPE_TREAT END  IE_FIRST_TREAT,
                     IE_TYPE_TREAT
                FROM (SELECT CD_ESTABELECIMENTO,
                             CD_SETOR_ATENDIMENTO,
                             NR_ATENDIMENTO,
                             DT_ENTRADA_SETOR,
                             DT_SAIDA_SETOR,
                             IE_AT_RISK,
                             DT_FIRST_MED,
                             CASE WHEN P_TYPE=3 THEN  NULL  ELSE CASE WHEN coalesce(DT_FIRST_MED::text, '') = '' THEN  NULL  ELSE pkg_vte_prophylaxis.get_cd_first_med(NR_ATENDIMENTO, DT_ENTRADA_SETOR, coalesce(DT_SAIDA_SETOR, DT_FIM)) END  END  CD_FIRST_MED,
                             DT_FIRST_DEV,
                             CASE WHEN coalesce(DT_FIRST_MED::text, '') = '' AND coalesce(DT_FIRST_DEV::text, '') = '' THEN 0
                                  WHEN coalesce(DT_FIRST_MED::text, '') = '' AND (DT_FIRST_DEV IS NOT NULL AND DT_FIRST_DEV::text <> '') THEN 1
                                  WHEN (DT_FIRST_MED IS NOT NULL AND DT_FIRST_MED::text <> '') AND coalesce(DT_FIRST_DEV::text, '') = '' THEN 2
                                  ELSE 3
                             END IE_TYPE_TREAT
                        FROM (SELECT CD_ESTABELECIMENTO,
                                     CD_SETOR_ATENDIMENTO,
                                     NR_ATENDIMENTO,
                                     DT_FIM,
                                     DT_ENTRADA_SETOR,
                                     DT_SAIDA_SETOR,
                                     IE_AT_RISK,
                                     CASE WHEN IE_AT_RISK=0 THEN  NULL  ELSE pkg_vte_prophylaxis.get_dt_first_med(NR_ATENDIMENTO, DT_ENTRADA_SETOR, coalesce(DT_SAIDA_SETOR, DT_FIM)) END  DT_FIRST_MED,
                                     CASE WHEN IE_AT_RISK=0 THEN  NULL  ELSE pkg_vte_prophylaxis.get_dt_first_dev(NR_ATENDIMENTO, DT_ENTRADA_SETOR, coalesce(DT_SAIDA_SETOR, DT_FIM)) END  DT_FIRST_DEV
                                FROM (SELECT CD_ESTABELECIMENTO,
                                             CD_SETOR_ATENDIMENTO,
                                             NR_ATENDIMENTO,
                                             DT_FIM,
                                             DT_ENTRADA_SETOR,
                                             DT_SAIDA_SETOR,
                                             CASE WHEN QT_DAYS_UNIT < 1 THEN 0 ELSE 1 END IE_AT_RISK
                                        FROM (SELECT CD_ESTABELECIMENTO,
                                                     CD_SETOR_ATENDIMENTO,
                                                     NR_ATENDIMENTO,
                                                     DT_FIM,
                                                     DT_ENTRADA_SETOR,
                                                     DT_SAIDA_SETOR,
                                                     coalesce(DT_SAIDA_SETOR, DT_FIM) - DT_ENTRADA_SETOR QT_DAYS_UNIT
                                                FROM (SELECT S.CD_ESTABELECIMENTO,
                                                             U.CD_SETOR_ATENDIMENTO,
                                                             U.NR_ATENDIMENTO,
                                                             LEAST(V_END_DATE + 1, clock_timestamp()) DT_FIM,
                                                             MIN(U.DT_ENTRADA_UNIDADE) DT_ENTRADA_SETOR,
                                                             PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                                                  U.DT_ENTRADA_UNIDADE,
                                                                                                  U.CD_SETOR_ATENDIMENTO) DT_SAIDA_SETOR                                              
                                                        FROM ATENDIMENTO_PACIENTE A,
                                                             ATEND_PACIENTE_UNIDADE U,
                                                             SETOR_ATENDIMENTO S
                                                       WHERE A.NR_ATENDIMENTO = U.NR_ATENDIMENTO
                                                         AND S.CD_SETOR_ATENDIMENTO = U.CD_SETOR_ATENDIMENTO
                                                         AND S.CD_CLASSIF_SETOR = '4'
                                                         AND U.IE_PASSAGEM_SETOR NOT IN ('S', 'L')
                                                         AND EXISTS (SELECT 1 FROM USUARIO_SETOR US WHERE US.NM_USUARIO_PARAM = NM_USUARIO_W AND US.CD_SETOR_ATENDIMENTO = S.CD_SETOR_ATENDIMENTO)
                                                         AND CASE WHEN P_CD_ESTAB=0 THEN  0  ELSE S.CD_ESTABELECIMENTO END  = P_CD_ESTAB
                                                         AND CASE WHEN V_SETOR=0 THEN  0  ELSE S.CD_SETOR_ATENDIMENTO END  = V_SETOR
                                                         AND (coalesce(V_PATIENT::text, '') = '' OR A.CD_PESSOA_FISICA = V_PATIENT)
                                                         AND A.DT_ENTRADA <= PKG_ATEND_PAC_UNID.GET_SYS_DT(A.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))
                                                         AND (coalesce(A.DT_ALTA::text, '') = '' OR
                                                              A.DT_ALTA >= PKG_ATEND_PAC_UNID.GET_SYS_DT(A.CD_ESTABELECIMENTO, V_START_DATE))
                                                         AND U.DT_ENTRADA_UNIDADE <= PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, LEAST(FIM_DIA(V_END_DATE), clock_timestamp()))         
                                                         AND coalesce(PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                                                      U.DT_ENTRADA_UNIDADE,
                                                                                                      U.CD_SETOR_ATENDIMENTO),
                                                                 PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)) >=
                                                             PKG_ATEND_PAC_UNID.GET_SYS_DT(S.CD_ESTABELECIMENTO, V_START_DATE)
                                                       GROUP BY U.NR_ATENDIMENTO,
                                                                S.CD_ESTABELECIMENTO,
                                                                U.CD_SETOR_ATENDIMENTO,
                                                                PKG_ATEND_PAC_UNID.GET_MAX_EXIT_UNIT(U.NR_ATENDIMENTO,
                                                                                                     U.DT_ENTRADA_UNIDADE,
                                                                                                     U.CD_SETOR_ATENDIMENTO)) alias45
                                                WHERE P_TYPE <> 3 
                                                   OR coalesce(DT_SAIDA_SETOR, DT_FIM) - DT_ENTRADA_SETOR >= 1) alias47) alias48) alias49) alias50) alias51;
    --
    TYPE T_ATEND IS TABLE OF C_ATEND%ROWTYPE;
    R_ATEND T_ATEND;
    --
    C_ESTAB CURSOR FOR
      SELECT D.CD_ESTABELECIMENTO,
             D.QUARTER,
             D.QT_STAYS,
             D.QT_DAYS,
             D.QT_AT_RISK,
             D.QT_TIME_1,
             D.QT_TIME_2,
             D.QT_TIME_3,
             D.QT_TIME_4,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_1 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_1,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_2 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_2,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_3 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_3,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_4 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_4,
             D.TOTAL_TREAT,
             D.QT_TREAT_1,
             D.QT_TREAT_2,
             D.QT_TREAT_3,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_1 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_1,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_2 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_2,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_3 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_3,
             D.QT_MED_1,
             D.QT_MED_2,
             D.QT_MED_3,
             D.QT_MED_4,
             D.QT_MED_5,
             D.QT_MED_6
        FROM (SELECT B.CD_ESTABELECIMENTO,
                     B.QUARTER,
                     SUM((CASE WHEN (C.CD_ESTABELECIMENTO IS NOT NULL AND C.CD_ESTABELECIMENTO::text <> '') THEN 1 ELSE 0 END)) QT_STAYS,
                     round((SUM(CASE WHEN coalesce(C.CD_ESTABELECIMENTO::text, '') = '' THEN                                       0  ELSE LEAST(coalesce(C.DT_SAIDA_SETOR, B.DT_FIM), B.DT_FIM) - GREATEST(C.DT_ENTRADA_SETOR, B.DT_INI) END ))::numeric, 1) QT_DAYS,
                     SUM(coalesce(C.IE_AT_RISK, 0)) QT_AT_RISK,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=1 THEN  1  ELSE 0 END ) QT_TIME_1,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=2 THEN  1  ELSE 0 END ) QT_TIME_2,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=3 THEN  1  ELSE 0 END ) QT_TIME_3,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=4 THEN  1  ELSE 0 END ) QT_TIME_4,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=0 THEN  0  ELSE 1 END ) TOTAL_TREAT,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=1 THEN  1  ELSE 0 END ) QT_TREAT_1,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=2 THEN  1  ELSE 0 END ) QT_TREAT_2,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=3 THEN  1  ELSE 0 END ) QT_TREAT_3,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=1 THEN  1  ELSE 0 END ) QT_MED_1,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=2 THEN  1  ELSE 0 END ) QT_MED_2,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=3 THEN  1  ELSE 0 END ) QT_MED_3,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=4 THEN  1  ELSE 0 END ) QT_MED_4,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=5 THEN  1  ELSE 0 END ) QT_MED_5,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=6 THEN  1  ELSE 0 END ) QT_MED_6
                FROM (SELECT DISTINCT A.CD_ESTABELECIMENTO,
                                      A.DT_INI_QUARTER DT_INI,
                                      LEAST(A.DT_END_QUARTER + 1, clock_timestamp()) DT_FIM,
                                      4 QUARTER
                        FROM W_VTE_PROPHYLAXIS A
                       WHERE CASE WHEN P_CD_SETOR=0 THEN  0  ELSE A.CD_SETOR_ATENDIMENTO END  = P_CD_SETOR) B
                LEFT JOIN W_VTE_PROPHYLAXIS C 
                       ON B.QUARTER = C.NR_QUARTER
                      AND B.CD_ESTABELECIMENTO = C.CD_ESTABELECIMENTO
               GROUP BY B.CD_ESTABELECIMENTO,
                        B.QUARTER) D;
    --
    TYPE T_ESTAB IS TABLE OF C_ESTAB%ROWTYPE;
    R_ESTAB T_ESTAB;
    --
    C_UNIT CURSOR(V_QUARTER bigint) FOR
      SELECT D.CD_ESTABELECIMENTO,
             D.CD_SETOR_ATENDIMENTO,
             D.QUARTER,
             D.QT_STAYS,
             D.QT_DAYS,
             D.QT_AT_RISK,
             D.QT_TIME_1,
             D.QT_TIME_2,
             D.QT_TIME_3,
             D.QT_TIME_4,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_1 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_1,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_2 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_2,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_3 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_3,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.QT_AT_RISK=0 THEN  0  ELSE round((100* D.QT_TIME_4 / D.QT_AT_RISK)::numeric, 1) END   ELSE 0 END  AVG_TIME_4,
             D.TOTAL_TREAT,
             D.QT_TREAT_1,
             D.QT_TREAT_2,
             D.QT_TREAT_3,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_1 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_1,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_2 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_2,
             CASE WHEN P_TYPE=1 THEN  CASE WHEN D.TOTAL_TREAT=0 THEN  0  ELSE round((100 * D.QT_TREAT_3 / D.TOTAL_TREAT)::numeric, 1) END   ELSE 0 END  AVG_TREAT_3,
             D.QT_MED_1,
             D.QT_MED_2,
             D.QT_MED_3,
             D.QT_MED_4,
             D.QT_MED_5,
             D.QT_MED_6
        FROM (SELECT B.CD_ESTABELECIMENTO,
                     B.CD_SETOR_ATENDIMENTO,
                     B.QUARTER,
                     SUM((CASE WHEN (C.CD_ESTABELECIMENTO IS NOT NULL AND C.CD_ESTABELECIMENTO::text <> '') THEN 1 ELSE 0 END)) QT_STAYS,
                     round((SUM(CASE WHEN coalesce(C.CD_ESTABELECIMENTO::text, '') = '' THEN                                       0  ELSE LEAST(coalesce(C.DT_SAIDA_SETOR, B.DT_FIM), B.DT_FIM) - GREATEST(C.DT_ENTRADA_SETOR, B.DT_INI) END ))::numeric, 1) QT_DAYS,
                     SUM(coalesce(C.IE_AT_RISK, 0)) QT_AT_RISK,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=1 THEN  1  ELSE 0 END ) QT_TIME_1,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=2 THEN  1  ELSE 0 END ) QT_TIME_2,             
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=3 THEN  1  ELSE 0 END ) QT_TIME_3,
                     SUM(CASE WHEN coalesce(C.IE_TIME_TREAT, 0)=4 THEN  1  ELSE 0 END ) QT_TIME_4,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=0 THEN  0  ELSE 1 END ) TOTAL_TREAT,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=1 THEN  1  ELSE 0 END ) QT_TREAT_1,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=2 THEN  1  ELSE 0 END ) QT_TREAT_2,
                     SUM(CASE WHEN coalesce(C.IE_TYPE_TREAT, 0)=3 THEN  1  ELSE 0 END ) QT_TREAT_3,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=1 THEN  1  ELSE 0 END ) QT_MED_1,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=2 THEN  1  ELSE 0 END ) QT_MED_2,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=3 THEN  1  ELSE 0 END ) QT_MED_3,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=4 THEN  1  ELSE 0 END ) QT_MED_4,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=5 THEN  1  ELSE 0 END ) QT_MED_5,
                     SUM(CASE WHEN coalesce(C.IE_FIRST_MED, 0)=6 THEN  1  ELSE 0 END ) QT_MED_6
                FROM (SELECT DISTINCT A.CD_ESTABELECIMENTO,
                                      A.CD_SETOR_ATENDIMENTO,
                                      A.DT_INI_QUARTER DT_INI,
                                      LEAST(A.DT_END_QUARTER + 1, clock_timestamp()) DT_FIM,
                                      V_QUARTER QUARTER
                        FROM W_VTE_PROPHYLAXIS A
                       WHERE CASE WHEN P_CD_SETOR=0 THEN  0  ELSE A.CD_SETOR_ATENDIMENTO END  = P_CD_SETOR) B
                LEFT JOIN W_VTE_PROPHYLAXIS C 
                       ON B.QUARTER = C.NR_QUARTER
                      AND B.CD_SETOR_ATENDIMENTO = C.CD_SETOR_ATENDIMENTO
               GROUP BY B.CD_ESTABELECIMENTO,
                        B.CD_SETOR_ATENDIMENTO,
                        B.QUARTER) D;
    --
    TYPE T_UNIT IS TABLE OF C_UNIT%ROWTYPE;
    R_UNIT T_UNIT;
    --  
  N RECORD;
BEGIN
    --
    NM_USUARIO_W := WHEB_USUARIO_PCK.GET_NM_USUARIO;
    --
    IF P_TYPE = 1 THEN
      FOR N IN (SELECT QUARTER,
                       GREATEST(INI, P_START_DATE) INI,
                       LEAST(FIM, P_END_DATE) FIM
                  FROM (SELECT 1 QUARTER,
                               TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3) -2, 2, '0') || SUBSTR(PR, -4), 'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3), 2, '0') || SUBSTR(PR, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))

UNION

                        SELECT 2 QUARTER,
                               TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3) -2, 2, '0') || SUBSTR(SEG, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3), 2, '0') || SUBSTR(SEG, -4), 'MMYYYY')) FIM 
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 3 QUARTER,
                               TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3) -2, 2, '0') || SUBSTR(TER, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3), 2, '0') || SUBSTR(TER, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 4 QUARTER,
                               TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3) -2, 2, '0') || SUBSTR(QUA, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3), 2, '0') || SUBSTR(QUA, -4), 'MMYYYY')) FIM 
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))) alias54
                 WHERE INI <= P_END_DATE
                   AND FIM >= P_START_DATE)
      LOOP

        OPEN C_ATEND(N.INI, N.FIM, CASE WHEN N.QUARTER = 4 THEN 0 ELSE P_CD_SETOR END, NULL);
        LOOP
          FETCH C_ATEND BULK COLLECT INTO R_ATEND LIMIT 1000;

            BEGIN
              FOR i IN R_ATEND.FIRST..R_ATEND.LAST LOOP
                INSERT INTO W_VTE_PROPHYLAXIS(
                  cd_estabelecimento, 
                  cd_setor_atendimento, 
                  nr_quarter, 
                  dt_ini_quarter,
                  dt_end_quarter,
                  nr_atendimento, 
                  dt_entrada_setor, 
                  dt_saida_setor, 
                  ie_at_risk, 
                  dt_first_med, 
                  ie_first_med, 
                  dt_first_dev, 
                  dt_first_treat, 
                  ie_first_treat, 
                  ie_time_treat, 
                  ie_type_treat)
                VALUES (
                  R_ATEND[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                  R_ATEND[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
                  N.QUARTER, --nr_quarter, 
                  N.INI, --dt_ini_quarter,
                  N.FIM, --dt_end_quarter,
                  R_ATEND[i].NR_ATENDIMENTO, --nr_atendimento, 
                  R_ATEND[i].DT_ENTRADA_SETOR, --dt_entrada_setor, 
                  R_ATEND[i].DT_SAIDA_SETOR, --dt_saida_setor, 
                  R_ATEND[i].IE_AT_RISK, --ie_at_risk, 
                  R_ATEND[i].DT_FIRST_MED, --dt_first_med, 
                  R_ATEND[i].IE_FIRST_MED, --ie_first_med, 
                  R_ATEND[i].DT_FIRST_DEV, --dt_first_dev, 
                  R_ATEND[i].DT_FIRST_TREAT, --dt_first_treat, 
                  R_ATEND[i].IE_FIRST_TREAT, --ie_first_treat, 
                  R_ATEND[i].IE_TIME_TREAT, --ie_time_treat, 
                  R_ATEND[i].IE_TYPE_TREAT); --ie_type_treat)
              END LOOP;
            EXCEPTION WHEN no_data_found THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_ATEND */
        END LOOP;
        CLOSE C_ATEND;

      END LOOP;

      FOR N IN (SELECT QUARTER,
                       GREATEST(INI, P_START_DATE) INI,
                       LEAST(FIM, P_END_DATE) FIM
                  FROM (SELECT 1 QUARTER,
                               TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3) -2, 2, '0') || SUBSTR(PR, -4), 'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(PR, 2, 1) * 3), 2, '0') || SUBSTR(PR, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 2 QUARTER,
                               TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3) -2, 2, '0') || SUBSTR(SEG, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(SEG, 2, 1) * 3), 2, '0') || SUBSTR(SEG, -4), 'MMYYYY')) FIM 
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 3 QUARTER,
                               TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3) -2, 2, '0') || SUBSTR(TER, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(TER, 2, 1) * 3), 2, '0') || SUBSTR(TER, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))
                        
UNION

                        SELECT 4 QUARTER,
                               TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3) -2, 2, '0') || SUBSTR(QUA, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3), 2, '0') || SUBSTR(QUA, -4), 'MMYYYY')) FIM 
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))) alias54
                 WHERE INI <= P_END_DATE
                   AND FIM >= P_START_DATE) 
      LOOP
      
        OPEN C_UNIT(N.QUARTER);
        LOOP
          FETCH C_UNIT BULK COLLECT INTO R_UNIT LIMIT 1000;

            BEGIN
              FOR i IN R_UNIT.FIRST..R_UNIT.LAST LOOP
                INSERT INTO W_VTE_PROPHYLAXIS_UNIT(
                  cd_estabelecimento, 
                  cd_setor_atendimento, 
                  nr_quarter, 
                  nr_stays, 
                  nr_days, 
                  nr_at_risk, 
                  nr_time_1, 
                  nr_time_2, 
                  nr_time_3, 
                  nr_time_4, 
                  nr_avg_time_1, 
                  nr_avg_time_2, 
                  nr_avg_time_3, 
                  nr_avg_time_4, 
                  nr_total_treat, 
                  nr_treat_1, 
                  nr_treat_2, 
                  nr_treat_3, 
                  nr_avg_treat_1, 
                  nr_avg_treat_2, 
                  nr_avg_treat_3, 
                  nr_med_1, 
                  nr_med_2, 
                  nr_med_3, 
                  nr_med_4, 
                  nr_med_5, 
                  nr_med_6)
                VALUES (
                  R_UNIT[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                  R_UNIT[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
                  R_UNIT[i].QUARTER, --nr_quarter, 
                  R_UNIT[i].QT_STAYS, --nr_stays, 
                  R_UNIT[i].QT_DAYS, --nr_days, 
                  R_UNIT[i].QT_AT_RISK, --nr_at_risk, 
                  R_UNIT[i].QT_TIME_1, --nr_time_1, 
                  R_UNIT[i].QT_TIME_2, --nr_time_2, 
                  R_UNIT[i].QT_TIME_3, --nr_time_3, 
                  R_UNIT[i].QT_TIME_4, --nr_time_4, 
                  R_UNIT[i].AVG_TIME_1, --nr_avg_time_1, 
                  R_UNIT[i].AVG_TIME_2, --nr_avg_time_2, 
                  R_UNIT[i].AVG_TIME_3, --nr_avg_time_3, 
                  R_UNIT[i].AVG_TIME_4, --nr_avg_time_4, 
                  R_UNIT[i].TOTAL_TREAT, --nr_total_treat, 
                  R_UNIT[i].QT_TREAT_1, --nr_treat_1, 
                  R_UNIT[i].QT_TREAT_2, --nr_treat_2, 
                  R_UNIT[i].QT_TREAT_3, --nr_treat_3, 
                  R_UNIT[i].AVG_TREAT_1, --nr_avg_treat_1, 
                  R_UNIT[i].AVG_TREAT_2, --nr_avg_treat_2, 
                  R_UNIT[i].AVG_TREAT_3, --nr_avg_treat_3, 
                  R_UNIT[i].QT_MED_1, --nr_med_1, 
                  R_UNIT[i].QT_MED_2, --nr_med_2, 
                  R_UNIT[i].QT_MED_3, --nr_med_3, 
                  R_UNIT[i].QT_MED_4, --nr_med_4, 
                  R_UNIT[i].QT_MED_5, --nr_med_5, 
                  R_UNIT[i].QT_MED_6); --nr_med_6)  
              END LOOP;
            EXCEPTION WHEN no_data_found THEN
              NULL;
            END;
            COMMIT;
          EXIT WHEN NOT FOUND; /* apply on C_UNIT */
        END LOOP;
        CLOSE C_UNIT;

        IF N.QUARTER = 4 THEN
          OPEN C_ESTAB;
          LOOP
            FETCH C_ESTAB BULK COLLECT INTO R_ESTAB LIMIT 1000;
              BEGIN
                FOR i IN R_ESTAB.FIRST..R_ESTAB.LAST LOOP
                  INSERT INTO W_VTE_PROPHYLAXIS_ESTAB(
                    cd_estabelecimento,
                    nr_stays, 
                    nr_days, 
                    nr_at_risk, 
                    nr_time_1, 
                    nr_time_2, 
                    nr_time_3, 
                    nr_time_4, 
                    nr_avg_time_1, 
                    nr_avg_time_2, 
                    nr_avg_time_3, 
                    nr_avg_time_4, 
                    nr_total_treat, 
                    nr_treat_1, 
                    nr_treat_2, 
                    nr_treat_3, 
                    nr_avg_treat_1, 
                    nr_avg_treat_2, 
                    nr_avg_treat_3, 
                    nr_med_1, 
                    nr_med_2, 
                    nr_med_3, 
                    nr_med_4, 
                    nr_med_5, 
                    nr_med_6)
                  VALUES (
                    R_ESTAB[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                    R_ESTAB[i].QT_STAYS, --nr_stays, 
                    R_ESTAB[i].QT_DAYS, --nr_days, 
                    R_ESTAB[i].QT_AT_RISK, --nr_at_risk, 
                    R_ESTAB[i].QT_TIME_1, --nr_time_1, 
                    R_ESTAB[i].QT_TIME_2, --nr_time_2, 
                    R_ESTAB[i].QT_TIME_3, --nr_time_3, 
                    R_ESTAB[i].QT_TIME_4, --nr_time_4, 
                    R_ESTAB[i].AVG_TIME_1, --nr_avg_time_1, 
                    R_ESTAB[i].AVG_TIME_2, --nr_avg_time_2, 
                    R_ESTAB[i].AVG_TIME_3, --nr_avg_time_3, 
                    R_ESTAB[i].AVG_TIME_4, --nr_avg_time_4, 
                    R_ESTAB[i].TOTAL_TREAT, --nr_total_treat, 
                    R_ESTAB[i].QT_TREAT_1, --nr_treat_1, 
                    R_ESTAB[i].QT_TREAT_2, --nr_treat_2, 
                    R_ESTAB[i].QT_TREAT_3, --nr_treat_3, 
                    R_ESTAB[i].AVG_TREAT_1, --nr_avg_treat_1, 
                    R_ESTAB[i].AVG_TREAT_2, --nr_avg_treat_2, 
                    R_ESTAB[i].AVG_TREAT_3, --nr_avg_treat_3, 
                    R_ESTAB[i].QT_MED_1, --nr_med_1, 
                    R_ESTAB[i].QT_MED_2, --nr_med_2, 
                    R_ESTAB[i].QT_MED_3, --nr_med_3, 
                    R_ESTAB[i].QT_MED_4, --nr_med_4, 
                    R_ESTAB[i].QT_MED_5, --nr_med_5, 
                    R_ESTAB[i].QT_MED_6); --nr_med_6)  
                END LOOP;
              EXCEPTION WHEN no_data_found THEN
                NULL;
              END;
              COMMIT;
            EXIT WHEN NOT FOUND; /* apply on C_ESTAB */
          END LOOP;
          CLOSE C_ESTAB;

        END IF;

      END LOOP;

    ELSE

      FOR N IN (SELECT QUARTER,
                       GREATEST(INI, P_START_DATE) INI,
                       LEAST(FIM, P_END_DATE) FIM
                  FROM (SELECT P_QUARTER QUARTER,
                               TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3) -2, 2, '0') || SUBSTR(QUA, -4),'MMYYYY') INI,
                               LAST_DAY(TO_DATE(LPAD((SUBSTR(QUA, 2, 1) * 3), 2, '0') || SUBSTR(QUA, -4), 'MMYYYY')) FIM
                          FROM TABLE(PKG_TRIMESTRE.BUSCAR_TRIMESTRES_PIPELINED(P_QUARTER, P_YEAR))) alias15
                 WHERE INI <= P_END_DATE
                   AND FIM >= P_START_DATE)
      LOOP

        OPEN C_ATEND(N.INI, N.FIM, P_CD_SETOR, CASE WHEN P_TYPE = 2 THEN NULL ELSE P_PATIENT END);
        LOOP
          FETCH C_ATEND BULK COLLECT INTO R_ATEND LIMIT 1000;

          BEGIN
              FOR i IN R_ATEND.FIRST..R_ATEND.LAST LOOP
                INSERT INTO W_VTE_PROPHYLAXIS(
                  cd_estabelecimento,
                  cd_setor_atendimento, 
                  nr_quarter, 
                  dt_ini_quarter,
                  dt_end_quarter,
                  nr_atendimento, 
                  dt_entrada_setor, 
                  dt_saida_setor, 
                  ie_at_risk, 
                  dt_first_med, 
                  ie_first_med, 
                  dt_first_dev, 
                  dt_first_treat, 
                  ie_first_treat, 
                  ie_time_treat, 
                  ie_type_treat)
                VALUES (
                  R_ATEND[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                  R_ATEND[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
                  N.QUARTER, --nr_quarter, 
                  N.INI, --dt_ini_quarter,
                  N.FIM, --dt_end_quarter,
                  R_ATEND[i].NR_ATENDIMENTO, --nr_atendimento, 
                  R_ATEND[i].DT_ENTRADA_SETOR, --dt_entrada_setor, 
                  R_ATEND[i].DT_SAIDA_SETOR, --dt_saida_setor, 
                  R_ATEND[i].IE_AT_RISK, --ie_at_risk, 
                  R_ATEND[i].DT_FIRST_MED, --dt_first_med, 
                  R_ATEND[i].IE_FIRST_MED, --ie_first_med, 
                  R_ATEND[i].DT_FIRST_DEV, --dt_first_dev, 
                  R_ATEND[i].DT_FIRST_TREAT, --dt_first_treat, 
                  R_ATEND[i].IE_FIRST_TREAT, --ie_first_treat, 
                  R_ATEND[i].IE_TIME_TREAT, --ie_time_treat, 
                  R_ATEND[i].IE_TYPE_TREAT); --ie_type_treat)
              END LOOP;
            EXCEPTION WHEN no_data_found THEN
              NULL;
            END;
            COMMIT;

          EXIT WHEN NOT FOUND; /* apply on C_ATEND */
        END LOOP;
        CLOSE C_ATEND;

        IF P_TYPE = 2 THEN
          OPEN C_UNIT(N.QUARTER);
          LOOP
            FETCH C_UNIT BULK COLLECT INTO R_UNIT LIMIT 1000;

              BEGIN
                FOR i IN R_UNIT.FIRST..R_UNIT.LAST LOOP
                  INSERT INTO W_VTE_PROPHYLAXIS_UNIT(
                    cd_estabelecimento, 
                    cd_setor_atendimento, 
                    nr_quarter, 
                    nr_stays, 
                    nr_days, 
                    nr_at_risk, 
                    nr_time_1, 
                    nr_time_2, 
                    nr_time_3, 
                    nr_time_4, 
                    nr_avg_time_1, 
                    nr_avg_time_2, 
                    nr_avg_time_3, 
                    nr_avg_time_4, 
                    nr_total_treat, 
                    nr_treat_1, 
                    nr_treat_2, 
                    nr_treat_3, 
                    nr_avg_treat_1, 
                    nr_avg_treat_2, 
                    nr_avg_treat_3, 
                    nr_med_1, 
                    nr_med_2, 
                    nr_med_3, 
                    nr_med_4, 
                    nr_med_5, 
                    nr_med_6)
                  VALUES (
                    R_UNIT[i].CD_ESTABELECIMENTO, --cd_estabelecimento, 
                    R_UNIT[i].CD_SETOR_ATENDIMENTO, --cd_setor_atendimento, 
                    R_UNIT[i].QUARTER, --nr_quarter, 
                    R_UNIT[i].QT_STAYS, --nr_stays, 
                    R_UNIT[i].QT_DAYS, --nr_days, 
                    R_UNIT[i].QT_AT_RISK, --nr_at_risk, 
                    R_UNIT[i].QT_TIME_1, --nr_time_1, 
                    R_UNIT[i].QT_TIME_2, --nr_time_2, 
                    R_UNIT[i].QT_TIME_3, --nr_time_3, 
                    R_UNIT[i].QT_TIME_4, --nr_time_4, 
                    R_UNIT[i].AVG_TIME_1, --nr_avg_time_1, 
                    R_UNIT[i].AVG_TIME_2, --nr_avg_time_2, 
                    R_UNIT[i].AVG_TIME_3, --nr_avg_time_3, 
                    R_UNIT[i].AVG_TIME_4, --nr_avg_time_4, 
                    R_UNIT[i].TOTAL_TREAT, --nr_total_treat, 
                    R_UNIT[i].QT_TREAT_1, --nr_treat_1, 
                    R_UNIT[i].QT_TREAT_2, --nr_treat_2, 
                    R_UNIT[i].QT_TREAT_3, --nr_treat_3, 
                    R_UNIT[i].AVG_TREAT_1, --nr_avg_treat_1, 
                    R_UNIT[i].AVG_TREAT_2, --nr_avg_treat_2, 
                    R_UNIT[i].AVG_TREAT_3, --nr_avg_treat_3, 
                    R_UNIT[i].QT_MED_1, --nr_med_1, 
                    R_UNIT[i].QT_MED_2, --nr_med_2, 
                    R_UNIT[i].QT_MED_3, --nr_med_3, 
                    R_UNIT[i].QT_MED_4, --nr_med_4, 
                    R_UNIT[i].QT_MED_5, --nr_med_5, 
                    R_UNIT[i].QT_MED_6); --nr_med_6)  
                END LOOP;
              EXCEPTION WHEN no_data_found THEN
                NULL;
              END;
              COMMIT;
            EXIT WHEN NOT FOUND; /* apply on C_UNIT */
          END LOOP;
          CLOSE C_UNIT;

        END IF;

      END LOOP;

    END IF;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pkg_vte_prophylaxis.pre_process ( P_START_DATE timestamp, P_END_DATE timestamp, P_CD_ESTAB bigint, P_CD_SETOR bigint, P_YEAR bigint, P_QUARTER bigint, P_TYPE bigint, P_PATIENT text) FROM PUBLIC;
