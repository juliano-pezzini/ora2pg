-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pfcs_pck_operating_rooms.calc_available_slots (cd_establishment_p bigint, nm_user_p text) AS $body$
DECLARE

        cur_booked_appointments CURSOR(nr_seq_organization_p  bigint) FOR
        SELECT appt.period_start dt_appt_start,
            appt.period_end dt_appt_end,
            appt.nr_seq_location
        from pfcs_patient pat,
            pfcs_appointment appt
        where upper(appt.si_status) = PFCS_PCK_CONSTANTS.SI_STATUS_BOOKED
            and appt.period_start < trunc(clock_timestamp() + interval '1 days')
            and appt.nr_seq_patient = pat.nr_sequencia
            and pat.nr_seq_organization = nr_seq_organization_p
        order by appt.period_start asc;

        cur_busy_slots CURSOR(  dt_appt_start_p  timestamp,
                                dt_appt_end_p  timestamp,
                                nr_seq_location_p  bigint,
                                qt_time_available_slot_p  bigint) FOR
        SELECT slt.period_start dt_slt_start,
            slt.period_end dt_slt_end
        from pfcs_slot slt,
            pfcs_schedule sch
        where slt.si_status = PFCS_PCK_CONSTANTS.SI_STATUS_FREE
            and slt.period_start > (clock_timestamp() + (qt_time_available_slot_p / 1440))
            and slt.period_end < trunc(clock_timestamp() + interval '1 days')
            and slt.nr_seq_schedule = sch.nr_sequencia
            and sch.nr_seq_location = nr_seq_location_p
            and sch.ie_active = PFCS_PCK_CONSTANTS.IE_TRUE
            and ( ( slt.period_start between dt_appt_start_p and dt_appt_end_p and slt.period_start <> dt_appt_end_p ) or ( dt_appt_end_p between slt.period_start and slt.period_end)
            );

        qt_time_available_slot_w        pfcs_general_rule.qt_time_avail_slot%type;
        pfcs_panel_seq_w                pfcs_panel.nr_sequencia%type;
        nr_seq_organization_w           pfcs_organization.nr_sequencia%type;
        qt_available_slots_w            integer := 0;
        qt_available_slots_minutes_w    integer := 0;
        qt_busy_slots_w                 integer := 0;
        qt_busy_slots_minutes_w         integer := 0;

BEGIN
        select  coalesce(max(qt_time_avail_slot),15)
        into STRICT    qt_time_available_slot_w
        from    pfcs_general_rule;

        nr_seq_organization_w := pfcs_pck_utils.get_organization_sequence(cd_establishment_p);

        select round(sum(slt.period_end - slt.period_start) * 1440), count(slt.nr_sequencia)
        into STRICT qt_available_slots_minutes_w, qt_available_slots_w
        from pfcs_slot slt,
            pfcs_schedule sch,
            unidade_atendimento uni,
            setor_atendimento sec
        where slt.si_status = PFCS_PCK_CONSTANTS.SI_STATUS_FREE
            and slt.period_start > (clock_timestamp() + (qt_time_available_slot_w / 1440))
            and slt.period_end < trunc(clock_timestamp() + interval '1 days')
            and slt.nr_seq_schedule = sch.nr_sequencia
            and uni.nr_seq_location = sch.nr_seq_location
            and sch.ie_active = PFCS_PCK_CONSTANTS.IE_TRUE
            and sec.cd_setor_atendimento = uni.cd_setor_atendimento
            and sec.cd_estabelecimento = cd_establishment_p;

        for c01_w in cur_booked_appointments(nr_seq_organization_w) loop
            for c02_w in cur_busy_slots(c01_w.dt_appt_start, c01_w.dt_appt_end, c01_w.nr_seq_location, qt_time_available_slot_w) loop
                qt_busy_slots_w := qt_busy_slots_w + 1;
                qt_busy_slots_minutes_w := (c02_w.dt_slt_end - c02_w.dt_slt_start) * 1440;
            end loop;
        end loop;

         := pfcs_pck.pfcs_generate_results(
            vl_indicator_p => qt_available_slots_w - qt_busy_slots_w, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_AVAILABLE_SLOTS, nr_seq_operational_level_p => cd_establishment_p, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);
         := pfcs_pck.pfcs_generate_results(
            vl_indicator_p => qt_available_slots_minutes_w - qt_busy_slots_minutes_w, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_VC_AVAILABLE_SLOTS, nr_seq_operational_level_p => cd_establishment_p, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);

        CALL pfcs_pck.pfcs_activate_records(
            nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_AVAILABLE_SLOTS,
            nr_seq_operational_level_p => cd_establishment_p,
            nm_usuario_p => nm_user_p);
        CALL pfcs_pck.pfcs_activate_records(
            nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_VC_AVAILABLE_SLOTS,
            nr_seq_operational_level_p => cd_establishment_p,
            nm_usuario_p => nm_user_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_operating_rooms.calc_available_slots (cd_establishment_p bigint, nm_user_p text) FROM PUBLIC;
