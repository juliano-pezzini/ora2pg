-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pfcs_pck_operating_rooms.calc_upcoming_surgeries (cd_establishment_p bigint, nm_user_p text) AS $body$
DECLARE

        pfcs_panel_seq_w        pfcs_panel.nr_sequencia%type;
        dt_start_next_w         pfcs_appointment.period_start%type;
        dt_end_next_w           pfcs_appointment.period_end%type;
        ds_specialty_w          pfcs_appointment.ds_specialty%type;
        ie_appt_status_w        pfcs_appointment.si_status%type;
        dt_estimated_end_last_w pfcs_procedure.period_start%type;
        cd_expression_w         pfcs_indicator.cd_exp_indicator%type;
        ds_color_w              pfcs_panel.cd_reference_aux%type;
        next_surg_timeframe_w   pfcs_panel.cd_reference_value%type;

BEGIN
        for c01_w in current_setting('pfcs_pck_operating_rooms.cur_rooms')::CURSOR(cd_establishment_p(cd_establishment_p) loop
            select  max(tab.period_start),
                    max(tab.period_end),
                    max(tab.ds_specialty),
                    max(tab.si_status)
            into STRICT    dt_start_next_w,
                    dt_end_next_w,
                    ds_specialty_w,
                    ie_appt_status_w
            from (
                SELECT  appt.period_start,
                        appt.period_end,
                        appt.ds_specialty,
                        appt.si_status
                from    pfcs_appointment appt
                where   appt.period_start >= clock_timestamp() and trunc(appt.period_start) = trunc(clock_timestamp())
                and     appt.nr_seq_location = c01_w.nr_seq_location
                order by appt.period_start asc
            ) tab LIMIT 1;

            select  max(proc.period_start + (appt.period_end - appt.period_start))
            into STRICT    dt_estimated_end_last_w
            from    pfcs_appointment appt,
                    pfcs_procedure proc
            where   proc.period_start < clock_timestamp()
            and     coalesce(proc.period_end::text, '') = ''
            and     upper(proc.si_status) = PFCS_PCK_CONSTANTS.SI_STATUS_IN_PROGRESS
            and     appt.nr_seq_procedure = proc.nr_sequencia
            and     appt.nr_seq_location = c01_w.nr_seq_location;

            CASE
                WHEN UPPER(ie_appt_status_w) = PFCS_PCK_CONSTANTS.SI_STATUS_CANCELLED  THEN
                    cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_CANCELLED;
                    ds_color_w := PFCS_PCK_CONSTANTS.CD_COLOR_RED;
                WHEN (dt_start_next_w IS NOT NULL AND dt_start_next_w::text <> '') and dt_start_next_w < dt_estimated_end_last_w THEN
                    cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_POSSIBLE_DELAY;
                    ds_color_w := PFCS_PCK_CONSTANTS.CD_COLOR_YELLOW;
                WHEN coalesce(dt_start_next_w::text, '') = '' THEN
                    cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_NA;
                    ds_color_w := null;
                ELSE
                    cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_CONFIRMED;
                    ds_color_w := null;
            END CASE;

            next_surg_timeframe_w := null;
            if (dt_start_next_w IS NOT NULL AND dt_start_next_w::text <> '') then
                next_surg_timeframe_w := to_char(dt_start_next_w, 'hh24:mi') || ' - ' ||  to_char(dt_end_next_w, 'hh24:mi');
            end if;

             := pfcs_pck.pfcs_generate_results(
                vl_indicator_p => cd_expression_w, ds_reference_value_p => c01_w.ds_location, ds_reference_aux_p => ds_specialty_w, cd_reference_value_p => next_surg_timeframe_w, cd_reference_aux_p => ds_color_w, nr_seq_operational_level_p => cd_establishment_p, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_UPCOMING_SURGERIES, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);
            end loop;

            CALL pfcs_pck.pfcs_activate_records(
                nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_UPCOMING_SURGERIES,
                nr_seq_operational_level_p => cd_establishment_p,
                nm_usuario_p => nm_user_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_operating_rooms.calc_upcoming_surgeries (cd_establishment_p bigint, nm_user_p text) FROM PUBLIC;
