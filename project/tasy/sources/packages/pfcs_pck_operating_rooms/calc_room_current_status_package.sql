-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pfcs_pck_operating_rooms.calc_room_current_status (cd_establishment_p bigint, nm_user_p text) AS $body$
DECLARE

        cur_procedures CURSOR(nr_seq_location_p bigint) FOR
        SELECT appt.period_start dt_appt_start,
            appt.period_end dt_appt_end,
            appt.ds_specialty,
            coalesce(proc.ds_coding_disp, appt.ds_reason) ds_procedure,
            proc.period_end dt_proc_end,
            proc.period_start dt_proc_start,
            pfcs_pck_utils.get_network_validation(pat.nr_sequencia) ie_in_network,
            enc.id_encounter nr_encounter,
            pat.patient_id id_patient,
            pfcs_get_human_name(pat.nr_sequencia, PFCS_PCK_CONSTANTS.DS_PATIENT) nm_patient,
            pat.gender ds_gender,
            round(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate)) qt_patient_age,
            enc.period_start dt_encounter_start,
            enc.dt_expected_discharge,
            appt.id_appointment cd_appointment
        from pfcs_appointment appt,
            pfcs_procedure proc,
            pfcs_patient pat,
            pfcs_encounter enc
        where (trunc(appt.period_start) = trunc(clock_timestamp()) or coalesce(proc.period_end::text, '') = '')
            and (proc.period_start IS NOT NULL AND proc.period_start::text <> '')
            and proc.cd_category = PFCS_PCK_CONSTANTS.CD_SURGICAL_PROCEDURE
            and upper(proc.si_status) in (
                PFCS_PCK_CONSTANTS.SI_STATUS_IN_PROGRESS,
                PFCS_PCK_CONSTANTS.SI_STATUS_COMPLETED
            )
            and upper(appt.si_status) in (
                PFCS_PCK_CONSTANTS.SI_STATUS_BOOKED,
                PFCS_PCK_CONSTANTS.SI_STATUS_ARRIVED,
                PFCS_PCK_CONSTANTS.SI_STATUS_FULFILLED)
            and appt.nr_seq_procedure = proc.nr_sequencia
            and proc.nr_seq_encounter = enc.nr_sequencia
            and enc.nr_seq_patient = pat.nr_sequencia
            and appt.nr_seq_location  = nr_seq_location_p;

        cur_slots CURSOR(nr_seq_location_p bigint) FOR
        SELECT slot.si_status,
            slot.period_start,
            slot.period_end
        from pfcs_slot slot,
             pfcs_schedule sch
        where trunc(slot.period_start) = trunc(clock_timestamp())
            and slot.nr_seq_schedule = sch.nr_sequencia
            and sch.nr_seq_location = nr_seq_location_p
            and sch.ie_active = PFCS_PCK_CONSTANTS.IE_TRUE;

        qt_busy_slots_w         integer := 0;
        qt_total_slots          integer := 0;
        qt_delayed_w            integer := 0;

        qt_time_delay_surg_w    PFCS_PCK_SUBTYPES.FLOAT_10_4_T;

        qt_time_w               pfcs_panel.vl_indicator%type;
        cd_expression_w         dic_expressao.cd_expressao%type;
        cd_color_w              pfcs_panel.cd_reference_value%type;

        pfcs_panel_seq_w        pfcs_panel.nr_sequencia%type;
        pfcs_panel_detail_seq_w pfcs_panel_detail.nr_sequencia%type;

BEGIN
        qt_time_delay_surg_w := isnumber(pfcs_pck_utils.get_general_rule_value('QT_TIME_DELAY_SURG', cd_establishment_p) / 1440);

        for c01_w in current_setting('pfcs_pck_operating_rooms.cur_rooms')::CURSOR(cd_establishment_p(cd_establishment_p) loop
            qt_time_w := null;
            cd_color_w := null;
            qt_busy_slots_w := 0;

            cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_FREE_TIMELINE;
            if c01_w.ie_census = PFCS_PCK_CONSTANTS.IE_BLOCKED_BEDS then
                cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_UNAVAILABLE_TIMELINE;
            end if;
            if pfcs_pck_operating_rooms.get_room_in_setup(c01_w.nr_seq_location) = PFCS_PCK_CONSTANTS.IE_YES then
                cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_IN_SETUP_TIMELINE;
            end if;

            for procedure_w in cur_procedures(c01_w.nr_seq_location) loop
                if (coalesce(procedure_w.dt_proc_end::text, '') = '') then
                    qt_time_w := (procedure_w.dt_appt_end - clock_timestamp()) * 1440;
                end if;

                if (coalesce(procedure_w.dt_proc_end::text, '') = '') then
                    cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_IN_PROGRESS;
                    if ( (procedure_w.dt_proc_start > (procedure_w.dt_appt_start + qt_time_delay_surg_w)) or
                         (clock_timestamp() > (procedure_w.dt_appt_end + qt_time_delay_surg_w)) ) then
                        cd_expression_w := PFCS_PCK_CONSTANTS.CD_EXPR_DELAYED_TIMELINE;
                        cd_color_w := PFCS_PCK_CONSTANTS.CD_COLOR_YELLOW;
                    end if;
                end if;

                if ( (procedure_w.dt_proc_end > (procedure_w.dt_appt_end + qt_time_delay_surg_w)) or
                      cd_expression_w = PFCS_PCK_CONSTANTS.CD_EXPR_DELAYED_TIMELINE ) then
                    qt_delayed_w := qt_delayed_w + 1;

                    select  nextval('pfcs_panel_detail_seq')
                    into STRICT    pfcs_panel_detail_seq_w
;

                    insert into pfcs_panel_detail(
                        nr_sequencia,
                        nm_usuario,
                        dt_atualizacao,
                        nm_usuario_nrec,
                        dt_atualizacao_nrec,
                        ie_situation,
                        nr_seq_indicator,
                        nr_seq_operational_level)
                    values (
                        pfcs_panel_detail_seq_w,
                        nm_user_p,
                        clock_timestamp(),
                        nm_user_p,
                        clock_timestamp(),
                        PFCS_PCK_CONSTANTS.IE_TEMPORARY,
                        PFCS_PCK_INDICATORS.NR_OR_DELAYED_SURGERY,
                        cd_establishment_p);

                    insert into pfcs_detail_patient(
                        nr_sequencia,
                        nm_usuario,
                        dt_atualizacao,
                        nm_usuario_nrec,
                        dt_atualizacao_nrec,
                        nr_seq_detail,
                        nr_encounter_varchar,
                        dt_entrance,
                        id_patient,
                        nm_patient,
                        ds_gender,
                        ds_age_range,
                        dt_expected_discharge,
                        ds_coverage_network)
                    values (
                        nextval('pfcs_detail_patient_seq'),
                        nm_user_p,
                        clock_timestamp(),
                        nm_user_p,
                        clock_timestamp(),
                        pfcs_panel_detail_seq_w,
                        procedure_w.nr_encounter,
                        procedure_w.dt_encounter_start,
                        procedure_w.id_patient,
                        procedure_w.nm_patient,
                        procedure_w.ds_gender,
                        procedure_w.qt_patient_age,
                        procedure_w.dt_expected_discharge,
                        procedure_w.ie_in_network);

                    insert into pfcs_detail_schedule(
                        nr_sequencia,
                        nm_usuario,
                        dt_atualizacao,
                        nm_usuario_nrec,
                        dt_atualizacao_nrec,
                        nr_seq_detail,
                        ds_procedure,
                        dt_schedule,
                        cd_appointment)
                    values (
                        nextval('pfcs_detail_schedule_seq'),
                        nm_user_p,
                        clock_timestamp(),
                        nm_user_p,
                        clock_timestamp(),
                        pfcs_panel_detail_seq_w,
                        procedure_w.ds_procedure,
                        procedure_w.dt_proc_start,
                        procedure_w.cd_appointment);
                end if;
            end loop;

            qt_total_slots := 0;
            for slot_w in cur_slots(c01_w.nr_seq_location) loop
                qt_total_slots := qt_total_slots + 1;
                if UPPER(slot_w.si_status) = PFCS_PCK_CONSTANTS.SI_STATUS_BUSY then
                    qt_busy_slots_w := qt_busy_slots_w + 1;
                end if;
            end loop;

             := pfcs_pck.pfcs_generate_results(
                vl_indicator_p => qt_time_w, vl_indicator_aux_p => cd_expression_w, ds_reference_value_p => c01_w.ds_location, vl_indicator_dec_p => dividir(dividendo_p => qt_busy_slots_w, divisor_p => qt_total_slots) * 100, cd_reference_value_p => cd_color_w, nr_seq_operational_level_p => cd_establishment_p, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_ROOM_STATUS, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);
        end loop;

         := pfcs_pck.pfcs_generate_results(
            vl_indicator_p => qt_delayed_w, nr_seq_operational_level_p => cd_establishment_p, nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_DELAYED_SURGERY, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);

        CALL pfcs_pck.pfcs_activate_records(
            nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_ROOM_STATUS,
            nr_seq_operational_level_p => cd_establishment_p,
            nm_usuario_p => nm_user_p);

        CALL pfcs_pck.pfcs_activate_records(
            nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_OR_DELAYED_SURGERY,
            nr_seq_operational_level_p => cd_establishment_p,
            nm_usuario_p => nm_user_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_operating_rooms.calc_room_current_status (cd_establishment_p bigint, nm_user_p text) FROM PUBLIC;
