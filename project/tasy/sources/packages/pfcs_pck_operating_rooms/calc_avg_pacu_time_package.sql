-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pfcs_pck_operating_rooms.calc_avg_pacu_time ( cd_establishment_p bigint, nm_user_p text, qt_previous_days_to_calc_p bigint default 0) AS $body$
DECLARE

        cur_patients CURSOR FOR
        SELECT distinct  enc.id_encounter nr_encounter,
            pat.patient_id id_patient,
            pfcs_get_human_name(pat.nr_sequencia, PFCS_PCK_CONSTANTS.DS_PATIENT) nm_patient,
            pat.gender ds_gender,
            round(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate)) qt_patient_age,
            enc.period_start dt_period_start,
            pfcs_pck_utils.get_full_location(enc.nr_seq_location) ds_location,
            pfcs_pck_utils.get_room_name(loc.nr_seq_location) ds_surgery_room,
            pfcs_pck_utils.get_discharge_date(enc.nr_sequencia) dt_discharge,
            proc.ds_coding_disp ds_procedure,
            proc.period_start dt_procedure,
            loc.period_start dt_pacu_entrance,
            loc.period_end dt_pacu_exit,
            round((loc.period_end - loc.period_start) * 1440) vl_pacu_los
        from pfcs_encounter enc,
            pfcs_patient pat,
            pfcs_encounter_location loc,
            unidade_atendimento uni,
            setor_atendimento sec,
            pfcs_procedure proc
        where (loc.period_start IS NOT NULL AND loc.period_start::text <> '')
            and (loc.period_end IS NOT NULL AND loc.period_end::text <> '')
            and enc.nr_seq_patient = pat.nr_sequencia
            and enc.nr_sequencia = loc.nr_seq_encounter
            and uni.nr_seq_location = loc.nr_seq_location
            and proc.nr_seq_patient = pat.nr_sequencia
            and sec.cd_setor_atendimento = uni.cd_setor_atendimento
            and sec.ie_situacao = PFCS_PCK_CONSTANTS.IE_ACTIVE
            and uni.ie_situacao = PFCS_PCK_CONSTANTS.IE_ACTIVE
            and trunc(loc.period_end) = trunc(clock_timestamp() - qt_previous_days_to_calc_p)
            and sec.ie_rpa = PFCS_PCK_CONSTANTS.IE_YES_BR
            and sec.cd_classif_setor = PFCS_PCK_CONSTANTS.CD_OR
            and sec.cd_estabelecimento = cd_establishment_p;

        TYPE qt_procedure_w         IS TABLE OF bigint INDEX BY varchar(255);
        TYPE qt_time_procedure_w    IS TABLE OF bigint INDEX BY varchar(255);
        procedures_w                qt_procedure_w;
        time_procedures_w           qt_time_procedure_w;

        pfcs_panel_seq_w            pfcs_panel.nr_sequencia%type;
        pfcs_panel_detail_seq_w     pfcs_panel_detail.nr_sequencia%type;
        nr_seq_observation_w        pfcs_observation.nr_sequencia%type;
        ds_procedure_w              pfcs_detail_schedule.ds_procedure%type;
        nr_seq_indicator_w          pfcs_panel.nr_seq_indicator%type;

        qt_patients_w               integer := 0;
        vl_pacu_time_w              bigint := 0;
        vl_pacu_weighted_mean_w     bigint := 0;

BEGIN
        nr_seq_indicator_w := case
            when qt_previous_days_to_calc_p = 0
                then PFCS_PCK_INDICATORS.NR_OR_AVG_PACU_TIME
                else PFCS_PCK_INDICATORS.NR_OR_PAST_AVG_PACU_TIME
            end;

        for c01_w in cur_patients loop
            qt_patients_w := qt_patients_w + 1;
            vl_pacu_time_w := (vl_pacu_time_w + c01_w.vl_pacu_los);

            if (procedures_w.EXISTS(c01_w.ds_procedure)) then
               procedures_w(c01_w.ds_procedure) := procedures_w(c01_w.ds_procedure) + 1;
               time_procedures_w(c01_w.ds_procedure) := time_procedures_w(c01_w.ds_procedure) +  c01_w.vl_pacu_los;
            else
               procedures_w(c01_w.ds_procedure) := 1;
               time_procedures_w(c01_w.ds_procedure) := c01_w.vl_pacu_los;
            end if;

            if (qt_previous_days_to_calc_p = 0) then
                select  nextval('pfcs_panel_detail_seq')
                into STRICT    pfcs_panel_detail_seq_w
;

                insert into pfcs_panel_detail(
                    nr_sequencia,
                    nm_usuario,
                    dt_atualizacao,
                    nm_usuario_nrec,
                    dt_atualizacao_nrec,
                    ie_situation,
                    nr_seq_indicator,
                    nr_seq_operational_level)
                values (
                    pfcs_panel_detail_seq_w,
                    nm_user_p,
                    clock_timestamp(),
                    nm_user_p,
                    clock_timestamp(),
                    PFCS_PCK_CONSTANTS.IE_TEMPORARY,
                    nr_seq_indicator_w,
                    cd_establishment_p);

                insert into pfcs_detail_bed(
                    nr_sequencia,
                    nm_usuario,
                    dt_atualizacao,
                    nm_usuario_nrec,
                    dt_atualizacao_nrec,
                    nr_seq_detail,
                    ds_location,
                    dt_entry_unit)
                values (
                    nextval('pfcs_detail_bed_seq'),
                    nm_user_p,
                    clock_timestamp(),
                    nm_user_p,
                    clock_timestamp(),
                    pfcs_panel_detail_seq_w,
                    (case when (c01_w.dt_discharge IS NOT NULL AND c01_w.dt_discharge::text <> '') then null else c01_w.ds_location end),
                    c01_w.dt_pacu_entrance);

                insert into pfcs_detail_patient(
                    nr_sequencia,
                    nm_usuario,
                    dt_atualizacao,
                    nm_usuario_nrec,
                    dt_atualizacao_nrec,
                    nr_seq_detail,
                    nr_encounter_varchar,
                    dt_entrance,
                    id_patient,
                    nm_patient,
                    ds_gender,
                    ds_age_range,
                    dt_last_entrance,
                    dt_last_discharge,
                    qt_time_total_hospitalization
                ) values (
                    nextval('pfcs_detail_patient_seq'),
                    nm_user_p,
                    clock_timestamp(),
                    nm_user_p,
                    clock_timestamp(),
                    pfcs_panel_detail_seq_w,
                    c01_w.nr_encounter,
                    c01_w.dt_period_start,
                    c01_w.id_patient,
                    c01_w.nm_patient,
                    c01_w.ds_gender,
                    c01_w.qt_patient_age,
                    c01_w.dt_pacu_entrance,
                    c01_w.dt_pacu_exit,
                    c01_w.vl_pacu_los
                );

                insert into pfcs_detail_schedule(
                    nr_sequencia,
                    nm_usuario,
                    dt_atualizacao,
                    nm_usuario_nrec,
                    dt_atualizacao_nrec,
                    nr_seq_detail,
                    ds_procedure,
                    dt_schedule)
                values (
                    nextval('pfcs_detail_schedule_seq'),
                    nm_user_p,
                    clock_timestamp(),
                    nm_user_p,
                    clock_timestamp(),
                    pfcs_panel_detail_seq_w,
                    c01_w.ds_procedure,
                    c01_w.dt_procedure);
            end if;
        end loop;

        if (get_avg_pacu_time_calc_type = PFCS_PCK_CONSTANTS.IE_WEIGHTED_MEAN) then
            ds_procedure_w := procedures_w.FIRST;
            WHILE (ds_procedure_w IS NOT NULL AND ds_procedure_w::text <> '') LOOP
                -- procedures average minutes * procedure weight
                vl_pacu_weighted_mean_w := vl_pacu_weighted_mean_w
                 + (dividir(dividendo_p => time_procedures_w(ds_procedure_w), divisor_p => procedures_w(ds_procedure_w))
                 *  procedures_w(ds_procedure_w));
                ds_procedure_w := procedures_w.NEXT(ds_procedure_w);
            END LOOP;
            vl_pacu_time_w := dividir(dividendo_p => vl_pacu_weighted_mean_w, divisor_p => qt_patients_w);
        else
            vl_pacu_time_w := dividir(dividendo_p => vl_pacu_time_w, divisor_p => qt_patients_w);
        end if;

         := pfcs_pck.pfcs_generate_results(
            vl_indicator_p => round(vl_pacu_time_w), vl_indicator_help_p => qt_patients_w, nr_seq_indicator_p => nr_seq_indicator_w, nr_seq_operational_level_p => cd_establishment_p, nm_usuario_p => nm_user_p, nr_seq_panel_p => pfcs_panel_seq_w);

        if (qt_previous_days_to_calc_p = 0) then
            CALL pfcs_pck.pfcs_update_detail(
                nr_seq_indicator_p => nr_seq_indicator_w,
                nr_seq_panel_p => pfcs_panel_seq_w,
                nr_seq_operational_level_p => cd_establishment_p,
                nm_usuario_p => nm_user_p);
        end if;

        CALL pfcs_pck.pfcs_activate_records(
            nr_seq_indicator_p => nr_seq_indicator_w,
            nr_seq_operational_level_p => cd_establishment_p,
            nm_usuario_p => nm_user_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pck_operating_rooms.calc_avg_pacu_time ( cd_establishment_p bigint, nm_user_p text, qt_previous_days_to_calc_p bigint default 0) FROM PUBLIC;
