-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_a500_pck.invalida_fat_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, ie_excluir_prot_imp_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Marca a fatura como invalida, possuindo a opcao de excluir os protocotos importados
	vinculados durante a importacao
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [X] Tasy (Delphi/Java) [X] Portal [X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
qt_fatura_w			integer;
ie_tipo_cobranca_fatura_w	ptu_fatura.ie_tipo_cobranca_fatura%type := 'C';


BEGIN
-- Primeiro busca a quantidade de faturas com o mesmo sequencial. Isso e necessario pois o sequencial pode ser gerado,

-- mas as rotinas que geram a fatura podem decidir nao gravar a mesma. Nestes casos as rotinas abaixo podem gerar erro

select	count(1)
into STRICT	qt_fatura_w
from	ptu_fatura
where	nr_sequencia	= nr_seq_fatura_p;

-- Deve existir a fatura

if (qt_fatura_w > 0) then
	-- Atualiza a fatura com o status de invalido

	CALL ptu_atualizar_status_fatura(nr_seq_fatura_p, 'I', null, nm_usuario_p);

	-- Se foi marcado para excluir os protocolos

	if (coalesce(ie_excluir_prot_imp_p, 'N') = 'S') then
		-- Busca o protocolo vinculado a fatura, e depois exclui ele.

		select	max(nr_seq_protocolo)
		into STRICT	nr_seq_protocolo_w
		from	pls_conta
		where	nr_seq_fatura = nr_seq_fatura_p;
		
		if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
			select	coalesce(max(ie_tipo_cobranca_fatura), 'C')
			into STRICT	ie_tipo_cobranca_fatura_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_fatura_p;
		end if;
		
		-- se achou algum protocolo vinculado na fatura

		if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') and (ie_tipo_cobranca_fatura_w <> 'A' ) then
			begin
				CALL pls_excluir_protocolo_imp(nr_seq_protocolo_w, nm_usuario_p, cd_estabelecimento_p);
			exception
			when others then
				null;
			end;
		end if;
	end if;

end if; -- Fim se existe a fatura

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_a500_pck.invalida_fat_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, ie_excluir_prot_imp_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
