-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_a500_pck.gerencia_imp_a500_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p text, dt_recebimento_p timestamp, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_fatura_p INOUT ptu_fatura.nr_sequencia%type) AS $body$
DECLARE

					
nr_seq_fatura_imp_w		ptu_fatura.nr_sequencia%type;
ie_parametro_33_w		varchar(1);
ds_erro_w			varchar(4000) := null;
ie_opcao_atual_w		ptu_processo_fatura.ie_tipo_processo%type := 'IA';
ie_tipo_cobranca_fatura_w	ptu_fatura.ie_tipo_cobranca_fatura%type;
qt_fatura_w			integer;


BEGIN
ie_opcao_atual_w := 'IA';

begin
	nr_seq_fatura_imp_w := ptu_a500_imp_pck.carregar_arq_a500_xml(nr_seq_arq_xml_p, ie_tipo_arquivo_p, nm_usuario_p, cd_estabelecimento_p, nr_seq_fatura_imp_w);
	
	if (nr_seq_fatura_imp_w IS NOT NULL AND nr_seq_fatura_imp_w::text <> '') then
		if (dt_recebimento_p IS NOT NULL AND dt_recebimento_p::text <> '') then
			update	ptu_fatura
			set	dt_recebimento_fatura	= dt_recebimento_p
			where	nr_sequencia 		= nr_seq_fatura_imp_w;
		end if;
		
		CALL pls_a500_pck.gerar_log_imp_a500(nr_seq_fatura_imp_w, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
	end if;
exception
when others then
	ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);
	
	select	count(1)
	into STRICT	qt_fatura_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_fatura_imp_w;
	
	if (qt_fatura_w = 0) then
		delete	FROM ptu_processo_fatura
		where	nr_seq_fatura	= nr_seq_fatura_imp_w;
		commit;
	else
		CALL pls_a500_pck.gerar_log_imp_a500(nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
	end if;
	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
end;

begin
	if (coalesce(ds_erro_w::text, '') = '') then
		Obter_Param_Usuario(1293, 33, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_33_w);
		
		if (coalesce(ie_parametro_33_w, 'N') <> 'S') then
			CALL pls_atualiza_receb_ptu_fatura(nr_seq_fatura_imp_w, dt_recebimento_p, nm_usuario_p);
		end if;
		
		CALL ptu_ajustar_fatura_pcmso(nr_seq_fatura_imp_w, null, cd_estabelecimento_p, nm_usuario_p, 'S');
		
		CALL pls_a500_pck.gerar_log_imp_a500(nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FI', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		
		ie_opcao_atual_w := 'CF';
		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
		
		ptu_consistir_fatura(nr_seq_fatura_imp_w, ds_erro_w, cd_estabelecimento_p, nm_usuario_p);
		
		if (pls_a500_pck.qt_inconsistencia_fat(nr_seq_fatura_imp_w) > 0) then	
			ds_erro_w := 'Foram encontradas inconsistencias no arquivo. Verifique as regras de inconsistencias.';
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		else
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'GC', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		end if;
	end if;
	
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		
		CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_imp_w, 'S', cd_estabelecimento_p, nm_usuario_p);
	end if;
exception
when others then
	ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);
	
	CALL pls_a500_pck.gerar_log_imp_a500(nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
	
	CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
end;

if (nr_seq_fatura_imp_w IS NOT NULL AND nr_seq_fatura_imp_w::text <> '') then
	select	coalesce(max(ie_tipo_cobranca_fatura), 'C')
	into STRICT	ie_tipo_cobranca_fatura_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_fatura_imp_w;
	
	if (ie_tipo_cobranca_fatura_w <> 'A' ) then
		CALL pls_cria_job_cta_med();
	else
		update	ptu_fatura
		set	ie_status	= 'V'
		where	ie_status	= 'EI'
		and	nr_sequencia	= nr_seq_fatura_imp_w;
		
		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, 'CF', 'FI', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
	end if;
end if;

nr_seq_fatura_p	:= nr_seq_fatura_imp_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_a500_pck.gerencia_imp_a500_xml ( nr_seq_arq_xml_p ptu_aviso_arq_xml.nr_sequencia%type, ie_tipo_arquivo_p text, dt_recebimento_p timestamp, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_fatura_p INOUT ptu_fatura.nr_sequencia%type) FROM PUBLIC;
