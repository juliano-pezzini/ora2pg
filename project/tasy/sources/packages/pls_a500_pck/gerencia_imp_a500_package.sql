-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_a500_pck.gerencia_imp_a500 ( nm_arquivo_p text, dt_recebimento_p timestamp default null, nm_usuario_p usuario.nm_usuario%type DEFAULT NULL, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, nr_seq_fatura_p INOUT ptu_fatura.nr_sequencia%type DEFAULT NULL) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Faz a leitura do arquivo A500 via UTL, gera a fatura e consiste ela
	
	A producao medica nao sera gerada nesta procedure, isto sera controlado
	por JOB em outras rotinas
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [X] Tasy (Delphi/Java) [X] Portal [X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_conteudo_w		varchar(4000);
ie_leitura_w		boolean := true;
nr_linha_w		bigint := 1;
ie_versao_w		varchar(10) := null;
nr_seq_fatura_w		ptu_fatura.nr_sequencia%type;
nr_seq_fatura_imp_w	ptu_fatura.nr_sequencia%type;
ds_erro_w		varchar(4000) := null;
nr_seq_protocolo_w	pls_protocolo_conta.nr_sequencia%type;
ie_opcao_atual_w	ptu_processo_fatura.ie_tipo_processo%type;
qt_fatura_w		integer;


BEGIN
-- Fatura que esta sendo gerada

select	nextval('ptu_fatura_seq')
into STRICT	nr_seq_fatura_imp_w
;

-- Retorno do sequencial da nova fatura

nr_seq_fatura_p := nr_seq_fatura_imp_w;

--------------------------------------- 1 - Inicia a leitura e importacao do arquivo A500.  --------------------------------------

-- Gerar log de inicio de importacao

ie_opcao_atual_w := 'IA';

-- Abre UTL FiLE pra leitura

CALL pls_utl_file_pck.nova_leitura(26, nm_arquivo_p);
while(ie_leitura_w) loop
	-- Ler a linha do arquivo

	SELECT * FROM pls_utl_file_pck.ler( ds_conteudo_w, ie_leitura_w) INTO STRICT  ds_conteudo_w, ie_leitura_w;
	
	-- Faz gravacao se estiver aberto

	if (ie_leitura_w) then
		-- A ptu_imp_fatura ainda gera alguns mensagem_abort para relatar inconsistencias, "quebrando" a sequencia de processamento de 

		-- varios arquivos selecionados. Quando estas mensagem ocorrem, o log devera ser gerado caso a fatura tambem tenha sido, e uma mensagem 

		-- sera exibida na tela.

		begin
			ptu_imp_fatura( ds_conteudo_w, 1, cd_estabelecimento_p, nr_linha_w, nm_usuario_p, ie_versao_w, nr_seq_fatura_w, nr_seq_fatura_imp_w);
			
			-- Se foi a primeira linha, grava o log da fatura

			if (nr_linha_w = 1) then
				if (dt_recebimento_p IS NOT NULL AND dt_recebimento_p::text <> '') and (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') then
					update	ptu_fatura
					set	dt_recebimento_fatura	= dt_recebimento_p
					where	nr_sequencia 		= nr_seq_fatura_w;
				end if;
				
				CALL pls_a500_pck.gerar_log_imp_a500(	nr_seq_fatura_imp_w, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
			end if;
			
			nr_linha_w := (nr_linha_w + 1);
		exception
			when others then
				-- Pega a mensagem de erro

				ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);

				-- Fecha o arquivo antes de sair da rotina

				CALL pls_utl_file_pck.fechar_arquivo();
				
				-- Verifica se a fatura existe, se existir sera gravado o log, caso contrario, sera tentado apagar algum eventual log "perdido"

				select	count(1)
				into STRICT	qt_fatura_w
				from	ptu_fatura
				where	nr_sequencia	= nr_seq_fatura_imp_w;
				
				-- Se nao existe fatura, apaga qualquer log que foi criado para ela

				if (qt_fatura_w = 0) then
				
					delete	FROM ptu_processo_fatura
					where	nr_seq_fatura	= nr_seq_fatura_imp_w;
					
					commit;
				else	-- senao grava o log, para que o usuario possa ver o mesmo
				
					CALL pls_a500_pck.gerar_log_imp_a500(	nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
				end if;
				
				-- Devolve a mensagem na tela, e para todo o processamento

				CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);			
		end;
	end if;
	
	-- Em caso de nao conseguir levantar a versao do arquivo, indicando que o arquivo esta corrompido ou tem o layout errado.

	if (coalesce(ie_versao_w::text, '') = '') and (nr_seq_fatura_imp_w IS NOT NULL AND nr_seq_fatura_imp_w::text <> '') and
		-- Atualmente, se gerou uma mensagem de erro controlada, nao deve entrar neste tipo de inconsistencia

		(coalesce(ds_erro_w::text, '') = '') then
		
		-- Excluir fatura inconsistente

		CALL ptu_excluir_fatura_inconsist(nr_seq_fatura_w,nm_usuario_p);
		
		-- Fecha o arquivo antes de sair da rotina

		CALL pls_utl_file_pck.fechar_arquivo();
		
		-- Se chegou aqui sem conseguir levantar a versao da fatura o arquivo e considerado corrompido ou diferente de A500

		ds_erro_w := 'Arquivo "'||nm_arquivo_p||'" corrompido ou layout incorreto.';
		
		-- Devolve a mensagem na tela, e para todo o processamento

		CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
		
	end if;
end loop;

-- A parte de leitura do arquivo, caso tenha algum erro, vai causar a interrupcao do processo. Agora quando o arquivo for considerado OK, 

-- todo o seu tratamento devera prosseguir de forma "silenciosa", apenas gerando os logs necessarios.

begin
	--Fecha o arquivo

	CALL pls_utl_file_pck.fechar_arquivo();

	if (coalesce(ds_erro_w::text, '') = '') then
		CALL ptu_ajustar_fatura_pcmso(nr_seq_fatura_imp_w,null,cd_estabelecimento_p,nm_usuario_p,'S');

		-- Gerar log de fim de importacao

		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FI', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');

		--------------------------------------- Consiste as faturas --------------------------------------

		ie_opcao_atual_w := 'CF';
		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
		
		ptu_consistir_fatura(nr_seq_fatura_imp_w,ds_erro_w,cd_estabelecimento_p,nm_usuario_p);
		
		-- Apos consistir a fatura, se tiver alguma inconsistencia "Prevista", o log e gerado de acordo

		if (pls_a500_pck.qt_inconsistencia_fat(nr_seq_fatura_imp_w) > 0) then	
			ds_erro_w := 'Foram encontradas inconsistencias no arquivo. Verifique as regras de inconsistencias.';
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		else
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'GC', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		end if;

	end if;

	-- Tratamento no final, para caso tenha acontecido algum erro "controlado" durante o processo 

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then		
		-- Grava o log

		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
		
		-- Invalida a Fatura.

		CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_imp_w, 'S', cd_estabelecimento_p, nm_usuario_p);
	end if;
exception
	-- Tratamento para caso aconteca algum erro "inesperado" durante o processo

	when others then	
	-- Pega a mensagem de erro

	ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);
		
	-- Grava o log

	CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_imp_w, ie_opcao_atual_w, 'FA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
	
	-- Invalida a fatura

	CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
end;

-- Gerar JOBs para gerar contas medicas e analise

CALL pls_cria_job_cta_med();
	
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_a500_pck.gerencia_imp_a500 ( nm_arquivo_p text, dt_recebimento_p timestamp default null, nm_usuario_p usuario.nm_usuario%type DEFAULT NULL, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type DEFAULT NULL, nr_seq_fatura_p INOUT ptu_fatura.nr_sequencia%type DEFAULT NULL) FROM PUBLIC;
