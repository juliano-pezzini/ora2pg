-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_a500_pck.gerar_analise_pend_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera as analises para as faturas que estao pendentes na importacao
	
	E feito uma verificacao se a fatura passada ainda esta pendente para
	gerar as analises. E imporatnte que nenhuma rotina fique entre
	o select que diz se esta pendente,  o if e a alteracao de estado no log, para que sejam 
	executados o mais rapido o possivel diminuindo a chance de que a fatura
	possa ter a geracao de analise duplicada.
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [X] Tasy (Delphi/Java) [X] Portal [X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_erro_w		varchar(4000) := null;
ie_opcao_atual_w	ptu_processo_fatura.ie_tipo_processo%type;
qt_a500_pendente_w	integer;
nr_seq_lote_conta_w	pls_protocolo_conta.nr_seq_lote_conta%type;
ie_processo_falha_w	ptu_processo_fatura.ie_tipo_processo%type;


BEGIN
-- so executa se foi informado ao menos uma fatura

if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
	-- Como esta rotina pode ser consumida por JOB, ou futuramente por opcao de mouse direito, foi adicionado ainda

	-- uma verificacao de seguranca, para confirmar se a fatura em si ainda estaa apta a ter a analise.

	select	count(1)
	into STRICT	qt_a500_pendente_w
	from	pls_a500_analise_pend_gerar_v
	where	nr_seq_fatura	= nr_seq_fatura_p;
	
	-- Essa validacao e necessaria pois essa rotina e chamada em job, para evitar que seja gerado

	-- mais de uma vez a analise de uma fatura.

	if (qt_a500_pendente_w > 0) then	
		-- Primeiro, marca o estagio anterior como finalizado (atualmente e o estagio de geracao de contas, por performance nao sera verificado se de fato e este estagio)

		-- nao e passado a data final, para manter o historico de quando foi terminado de gerar a conta medica

		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, 'GC', 'FI', nm_usuario_p, null, null, ds_erro_w, 'S');
				
		-- Busca o lote da conta no protocolo da fatura A500

		select	max(nr_seq_lote_conta)
		into STRICT	nr_seq_lote_conta_w
		from	pls_protocolo_conta a
		where	nr_sequencia	= (	SELECT	max(x.nr_seq_protocolo)
						from	ptu_fatura	x
						where	x.nr_sequencia	= nr_seq_fatura_p);
	
		begin
			ie_opcao_atual_w := 'GA';
		
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
			
			ptu_gerar_analise(nr_seq_fatura_p,nr_seq_lote_conta_w,cd_estabelecimento_p,ds_erro_w,ie_processo_falha_w,nm_usuario_p);
			
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'FI', nm_usuario_p, null, clock_timestamp(), null, 'S');
			
			-- Se ocorreu algum erro "controlado", entao a fatura e marcada como invalida

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				-- Invalida a fatura

				CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
				
				-- Grava o log atual com o erro

				ie_opcao_atual_w := coalesce(ie_processo_falha_w,ie_opcao_atual_w);
				CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'FA', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
			end if;
			
			
			-- Se nao ocorreu nenhum erro, libera a fatura

			if (coalesce(ds_erro_w::text, '') = '') then
				ptu_liberar_fat_importacao(nr_seq_fatura_p, ds_erro_w, cd_estabelecimento_p, nm_usuario_p);
			end if;
			
			-- Apos gerar a analise, se nao ocorreu nenhum erro, e replicado os anexos da fatura PTU.

			-- Essa etapa e tambem realizada no desktop, mas como o processo ficou assincrono por job,

			-- quando o desktop chama esta rotina, a analise ainda nao foi gerada, e nada e replicado.

			-- como a replicacao ja trata os anexos ja copiados, teoricamente nao teria problemas chamar ela aqui,

			-- uma vez que so dara problemas se a job e o desktop chamarem ela no exato instante.

			if (coalesce(ds_erro_w::text, '') = '') then			
				CALL pls_replica_anexo_fatura_ptu(nr_seq_fatura_p, nm_usuario_p);
			end if;
		exception
			when others then
				ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);
				
				-- Grava o log atual com o erro

				CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'FA', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
				
				-- Invalida a fatura

				CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
		end;
	end if; -- fim se a fatura estava pendente para geracao de analise
end if; -- fim se foi informado uma fatura

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_a500_pck.gerar_analise_pend_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
