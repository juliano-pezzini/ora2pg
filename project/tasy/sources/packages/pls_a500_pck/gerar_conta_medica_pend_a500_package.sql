-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_a500_pck.gerar_conta_medica_pend_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera as contas medicas para as faturas que estao pendentes na importacao
	
	E feito uma verificacao se a fatura passada ainda esta pendente para
	gerar as contas medicas. E imporatnte que nenhuma rotina fique entre
	o select que diz se esta pendente,  o if e a alteracao de estado no log, para que sejam 
	executados o mais rapido o possivel diminuindo a chance de que a fatura
	possa ter a geracao de contas medicas duplicada.
	
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionario [X] Tasy (Delphi/Java) [X] Portal [X]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


ds_erro_w		varchar(4000) := null;
nr_seq_lote_conta_w	pls_protocolo_conta.nr_seq_lote_conta%type;
ie_opcao_atual_w	ptu_processo_fatura.ie_tipo_processo%type;
qt_a500_pendente_w	integer;


BEGIN
-- Apenas executa se tem fatura informada

if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
	-- Como esta rotina pode ser consumida por JOB, ou futuramente por opcao de mouse direito, foi adicionado ainda

	-- uma verificacao de seguranca, para confirmar se a fatura em si ainda esta apta a ter a producao medica gerada, evitando gerar em duplicidade

	select	count(1)
	into STRICT	qt_a500_pendente_w
	from	pls_a500_conta_pend_gerar_v
	where	nr_seq_fatura	= nr_seq_fatura_p;
	
	-- se a fatura ainda esta pendente

	if (qt_a500_pendente_w > 0) then
		-- Primeiro, marca o estagio anterior como finalizado (atualmente e o estagio de consistencia, por performance nao sera verificado se de fato e este estagio

		-- Tambem inviabiliza essa fatura para ter as contas geradas novamente, evitando duplicidade, nao e passado a data final, para manter o historico de quando terminou de consistir

		CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, 'CF', 'FI', nm_usuario_p, null, null, ds_erro_w, 'S');
		
		begin
			ie_opcao_atual_w := 'GC';
			
			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'PR', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');

			ptu_gerar_pls_contas_medicas(nr_seq_fatura_p,nr_seq_lote_conta_w,ds_erro_w,cd_estabelecimento_p,nm_usuario_p);

			CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'GA', nm_usuario_p, null, clock_timestamp(), ds_erro_w, 'S');
			
			-- Se ocorreu algum erro "controlado", entao a fatura e marcada como invalida

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				-- Invalida a fatura

				CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
				
				-- Grava o log atual com o erro

				CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'FA', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
			end if;
			
		exception
			when others then
				-- Monta a mensagem de erro com call stack

				ds_erro_w := substr(sqlerrm || pls_util_pck.enter_w || 'Error Back Trace: ' || dbms_utility.format_error_backtrace, 1, 4000);
				
				-- Grava o log atual com o erro

				CALL pls_a500_pck.gerar_log_imp_a500( nr_seq_fatura_p, ie_opcao_atual_w, 'FA', nm_usuario_p, clock_timestamp(), null, ds_erro_w, 'S');
				
				-- Invalida a fatura

				CALL pls_a500_pck.invalida_fat_a500(nr_seq_fatura_p, 'S', cd_estabelecimento_p, nm_usuario_p);
		end;
	end if; -- Fim se fatura ainda esta pendente
end if; -- fim se tem fatura informada

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_a500_pck.gerar_conta_medica_pend_a500 ( nr_seq_fatura_p ptu_fatura.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
