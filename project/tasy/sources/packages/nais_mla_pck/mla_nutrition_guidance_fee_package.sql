-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.mla_nutrition_guidance_fee ( nr_seq_registro_p bigint, file_output_p INOUT text ) AS $body$
DECLARE


		cd_contin_flag_w      varchar(1) := 'C';
		loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        json_output_w         philips_json;
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list    philips_json_list;
        nr_order_pat_seq_w    integer;
        nr_patient_mrn_w      bigint;
        cd_physician_w        varchar(15);
        dt_liberacao_w        timestamp;
        cd_med_action_code    varchar(1000);
        cd_med_affairs_code1  varchar(1000);
        cd_med_affairs_code2  varchar(1000);
        cd_med_affairs_code3  varchar(1000);
        cd_pessoa_fisca_w     varchar(10);
        nr_seq_prod_reserva_w bigint;
        cd_pat_classif_w    varchar(1);
        nr_atendimento_w    bigint;
        nr_item_code_w      bigint;
        dt_exec_date_w      timestamp;
        qt_score_w          double precision;
        cd_internal_code_w  bigint;
        nr_seq_jpn_code_w   bigint;
        dt_calc_date_w      timestamp;
        cd_procedimento_w   numeric(20);
        ie_origem_check_w   bigint;
        cd_pessoa_fisica_w  varchar(10);
        nr_prontuario_w     bigint;
        current_setting('nais_mla_pck.nm_usuario_w')::varchar(20)        varchar(15);
        cd_user_person_w    varchar(10);
        nr_user_pront_w     bigint;
        nr_recomend_seq_w   bigint;
        ds_error_message_w  varchar(500) := null;
        nr_seq_int_call_log_w   bigint := 0;
		cd_dept_affair_w      nais_conversion_master%rowtype;
		cd_setor_atendimento_w	nut_orientacao_list.cd_setor_atendimento%type;
		cd_department_w		departamento_setor.cd_departamento%type;
		cd_med_details_w	nais_conversion_master%rowtype;
		cd_med_add_details_w nais_conversion_master%rowtype;
		ie_cont_orient_w	nut_orientacao_list.ie_cont_orient%type;
		ie_status_w			nut_orientacao_list.ie_guidance_fee%type;
        cd_proc_classif_w   nut_orientacao_list.ie_status%type;

        c01 CURSOR FOR
        SELECT
            cd_proc_classif_w	process_classif,
            'G0'    order_class,
            '01' 	department_code,
            ' ' 	ward_code,
            ' ' 	room_number,
            '1' 	blood_tranfusion_type,
            '00' 	insurance_number,
            cd_physician_w doctor_code,
            ' ' 	patient_newborn,
            ' ' 	prescription_classfication,
            ' ' 	requestor_code,
            ' ' 	mutual_exclusion_rule,
            ' ' 	division_number,
            ' ' 	blank_one,
            ' ' 	blank_two
;

        c02 CURSOR FOR
        SELECT
            ' '      execution_classification,
            to_char(dt_exec_date_w, 'YYYYMMDD') execution_date,
            to_char(dt_exec_date_w, 'HH24MI') execution_time,
            '   ' execution_op_code,
            ' ' execution_up_flag,
            '000000' execution_weight,
            '0' out_of_hours_flag,
            ' ' execution_blank
;

        c03 CURSOR FOR
        SELECT
            '   ' slip_code,
            '01' nr_data_class,
            '.1300' internal_code,
            ' '  dosage,
            ' ' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            ' ' free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno

		
union all

        SELECT
            '   ' slip_code,
            '01' nr_data_class,
			coalesce(to_char(cd_med_details_w.cd_medical_affair), '000000') internal_code,
            ' '  dosage,
            ' ' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            ' ' free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
        
        
union all

        select
            '   ' slip_code,                  -- Optional  (3)
            '04' nr_data_class,              -- Mandatory (2)
            ' ' internal_code,              --  Mandatory(6)
            ' '  dosage,                     -- Mandatory (9)
            ' '  unit,                       -- Optional  (2)
            ' '  times_num,                  -- Mandatory(2)
            ' '  free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            ' '  free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            'S' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
;

        r_c03                 c03%rowtype;


BEGIN
        begin
        select  dt_orient_nut,
                nr_seq_recomendacao,
                cd_pessoa_fisica,
                nm_usuario,
                cd_tipo_recomendacao,
				nr_atendimento,
				ie_cont_orient,
				ie_guidance_fee,
                cd_setor_atendimento,
                CASE WHEN ie_status='S' THEN  '3' WHEN ie_status='A' THEN  '1' END 
        into STRICT    dt_exec_date_w,
                nr_recomend_seq_w,
                cd_pessoa_fisica_w,
                current_setting('nais_mla_pck.nm_usuario_w')::varchar(20),
                cd_internal_code_w,
				nr_atendimento_w,
				ie_cont_orient_w,
				ie_status_w,
                cd_setor_atendimento_w,
                cd_proc_classif_w
        from    nut_orientacao_list
        where   nr_sequencia = nr_seq_registro_p;

	begin
		select a.nr_order_patient_seq
        into STRICT   nr_order_pat_seq_w
		from   cpoe_recomendacao c,
			   cpoe_order_unit a,
			   cpoe_tipo_pedido cp
		where  c.nr_sequencia = nr_recomend_seq_w
		and    a.nr_seq_cpoe_tipo_pedido = cp.nr_sequencia
		and    c.nr_seq_cpoe_order_unit = a.nr_sequencia
		and    cp.nr_seq_sub_grp = 'N';
		exception when others then
		nr_order_pat_seq_w := '00000000';
		end;

        select  cd_medico_resp
        into STRICT    cd_user_person_w
        from    atendimento_paciente
        where   nr_atendimento = nr_atendimento_w;

        select  nr_prontuario
        into STRICT    nr_prontuario_w
        from    pessoa_fisica
        where   cd_pessoa_fisica = cd_pessoa_fisica_w;

        select CASE WHEN obter_tipo_atendimento(nr_atendimento_w)='1' THEN  '2' WHEN obter_tipo_atendimento(nr_atendimento_w)='8' THEN  '1'  ELSE '1' END
        into STRICT   cd_pat_classif_w
;

		select obter_departamento_setor(cd_setor_atendimento_w)
		into STRICT   cd_department_w
		;


		cd_dept_affair_w := get_medicalaffair_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', cd_department_w, null, null);
		cd_med_details_w := get_medicalaffair_code('N', 'TIPO_RECOMENDACAO', 'CD_TIPO_RECOMENDACAO', ie_cont_orient_w||cd_internal_code_w , null, null);
        PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
        json_output_w := philips_json();
        PERFORM set_config('nais_mla_pck.json_output_list_w', philips_json_list(), false);
        CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.nais_common_header('KK', nr_seq_registro_p, '01', 'E', '1',810, 652);
        for r_c01 in c01 loop
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.process_classif, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.order_class, 2, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(nr_order_pat_seq_w), 8, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(nr_prontuario_w), 10, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(dt_exec_date_w, 'YYYYMMDD'), 8, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(cd_dept_affair_w.cd_medical_affair, ' '), 2, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(cd_pat_classif_w, 1, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 3, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 5, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blood_tranfusion_type, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.insurance_number, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(cd_user_person_w, 8, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.patient_newborn, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.prescription_classfication, 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.requestor_code, 3, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.mutual_exclusion_rule, 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.division_number, 4, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blank_one, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blank_two, 1, 'L');
        end loop;
        for r_c02 in c02 loop
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_classification, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_date, 8, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_time, 4, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_op_code, 3, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_up_flag, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_weight, 6, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.out_of_hours_flag, 1, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_blank, 8, 'R', ' ');
        end loop;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text('000', 3, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text('03', 2, 'L', '0');
         for r_c03 in c03 loop
            if ( r_c03.nr_data_class = '04' ) then
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.nr_data_class, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.days, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.times_num_04, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.days_num, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.digit_times_num, 3, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.digit_days_num, 3, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 50);
            elsif ( r_c03.nr_data_class = '01' ) then
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.nr_data_class, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.internal_code, 6, 'R', ' ');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(r_c03.dosage, ' '), 9, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.unit, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.times_num, 2, 'L', '0');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.free_input_flag, 1);
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(r_c03.free_comments, ' '), 40, 'R', ' ');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.med_change_impossible_flg, 1, 'R', ' ');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.general_name_med_flg, 1, 'R', ' ');
            end if;
         end loop;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 4, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(chr(13), 1, 'L');
            exception when others then
            ds_error_message_w := sqlerrm;
            end;
            json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());
            if (ds_error_message_w IS NOT NULL AND ds_error_message_w::text <> '') then
                record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), '260', 'nais.mla.nutritionguidancefee' ,
                        'E', 'E', null, 'KK', current_setting('nais_mla_pck.ds_line_w')::varchar(32767),substr(ds_error_message_w,1,499), 0,nr_seq_int_call_log_w, to_char(nr_seq_registro_p), 652,'E', ie_interface_type_p => '258',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
            end if;
            dbms_lob.createtemporary(file_output_p, true);
            current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.(file_output_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.mla_nutrition_guidance_fee ( nr_seq_registro_p bigint, file_output_p INOUT text ) FROM PUBLIC;
