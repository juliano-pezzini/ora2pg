-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.send_physiology_data (( nr_seq_register_p bigint, nr_order_unit_p cpoe_order_unit.nr_order_unit%type ) is nr_prescricao_w prescr_medica.nr_prescricao%type) RETURNS ACCINFORECTYP AS $body$
DECLARE

        PERFORM  nr_processing_class_w   process_classif,
                order_class_w           order_class,
                coalesce(a.nr_order_patient_seq, 0)  order_number,
                coalesce(obter_prontuario_paciente(obter_dados_prescricao(e.nr_prescricao , 'P' )), 0)         patient_identifier,
                to_char(e.dt_exam_exec, 'YYYYMMDD') consultation_date,
                case when (a.cd_especialidade_med IS NOT NULL AND a.cd_especialidade_med::text <> '') then
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', a.cd_especialidade_med), ' ') 
                     when (a.cd_departamento_med IS NOT NULL AND a.cd_departamento_med::text <> '') then 
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', a.cd_departamento_med), ' ')   
                     else '00'
                end as department_code,
                CASE WHEN nais_mla_pck.get_in_out_patient_classif(c.cd_pessoa_fisica, coalesce(e.dt_exam_exec,clock_timestamp()))='O' THEN 1  ELSE 2 END  patient_classification,
                coalesce(g.bed_id,' ') ward_code,
                coalesce(g.room_id, ' ') room_number,
                '1' blood_tranfusion_type,
                coalesce(c.nr_seq_nais_insurance, 0) insurance_number,
                coalesce(e.cd_doctor_id, '0') doctor_code,
                ' ' patient_newborn,
                ' ' prescription_classfication,
                ' ' requestor_code,   
                ' ' mutual_exclusion_rule,
                '0' division_number,
                ' ' blank_one,
                ' ' blank_two

        from    cpoe_order_unit a,
                cpoe_procedimento c,
                prescr_procedimento d,
                phy_exam_exec_info e,
                prescr_medica f,
                bft_encounter_v g
        where   a.nr_sequencia = c.nr_seq_cpoe_order_unit    
        and     c.nr_sequencia = d.nr_seq_proc_cpoe
        and     d.nr_prescricao = e.nr_prescricao
        and     e.nr_prescricao = f.nr_prescricao
        and     f.nr_atendimento = g.nr_atendimento
        and     a.nr_order_unit = nr_order_unit_p
        and 	e.nr_sequencia = nr_seq_register_p  LIMIT 1;

    --  End of Accounting Information
        c02 CURSOR FOR
        SELECT  ' ' execution_classification,
                to_char(a.dt_exam_exec, 'YYYYMMDD') execution_date,
                to_char(a.dt_exam_exec, 'HH24MI') execution_time,
                '   ' execution_op_code,
                ' ' execution_up_flag,
                '000000' execution_weight,
                '0' out_of_hours_flag,
                ' ' execution_blank
        from    phy_exam_exec_info a,
                prescr_medica e,
                bft_encounter_v f
        where   a.nr_prescricao = e.nr_prescricao
        and     e.nr_atendimento = f.encounter_id
        and     a.nr_sequencia = nr_seq_register_p;
    -- End of Execution Information
        c04 CURSOR FOR
        SELECT  a.nr_sequencia
        from    phy_exam_exec_proc a
        where   nr_seq_phy_exam_exec_info = nr_seq_register_p;

        c05 CURSOR FOR                            --procedure code
        SELECT  c.cd_procedure,
                coalesce(c.vl_amount_exec, 0)
        from    phy_exam_exec_info a,
                prescr_procedimento b,
                phy_exam_exec_proc c
        where   a.nr_prescricao = b.nr_prescricao
        and     a.nr_seq_order  = b.nr_sequencia
        and     a.nr_sequencia = c.nr_seq_phy_exam_exec_info
        and     c.nr_sequencia = nr_seq_interno_w;

        c06 CURSOR FOR  -- Additional data
        SELECT  b.cd_material_used,
                coalesce(b.vl_amount_used, 0)
        from    phy_exam_exec_proc a,
                phy_exam_exec_mat b
        where   a.nr_sequencia = b.nr_seq_phy_exam_exec_proc
        and     b.cd_material_classif = 2
        and     b.nr_seq_phy_exam_exec_proc = nr_seq_interno_w;

        c07 CURSOR FOR  -- Drug
        SELECT  b.cd_material_used,
                coalesce(b.vl_amount_used, 0)
        from    phy_exam_exec_proc a,
                phy_exam_exec_mat b
        where   a.nr_sequencia = b.nr_seq_phy_exam_exec_proc
        and     b.cd_material_classif = 0
        and     b.nr_seq_phy_exam_exec_proc = nr_seq_interno_w;

        c08 CURSOR FOR  -- Equipment
        SELECT  b.cd_material_used,
                coalesce(b.vl_amount_used, 0)
        from    phy_exam_exec_proc a,
                phy_exam_exec_mat b
        where   a.nr_sequencia = b.nr_seq_phy_exam_exec_proc
        and     b.cd_material_classif = 1
        and     b.nr_seq_phy_exam_exec_proc = nr_seq_interno_w;

        c09 CURSOR FOR
        SELECT  distinct(g.nr_sequencia),
                substr(obter_conversao_externa_int(null,'CPOE_STD_COMMENT','CD_EXTERNAL', coalesce(h.cd_external,' '), nm_usuario_w ),1,6)
        from    cpoe_order_unit a,
                cpoe_procedimento b,
                prescr_procedimento c,
                phy_exam_exec_info d,
                phy_exam_exec_proc e,
                cpoe_comment_linkage    g,
                cpoe_std_comment    h
        where   a.nr_sequencia = b.nr_seq_cpoe_order_unit
        and     b.nr_sequencia = c.nr_seq_proc_cpoe
        and     c.nr_prescricao = d.nr_prescricao
        and     d.nr_sequencia = e.nr_seq_phy_exam_exec_info
        and     a.nr_sequencia = g.nr_seq_cpoe_order_unit
        and     g.nr_seq_std_comment = h.nr_sequencia
        and     a.nr_order_unit = nr_order_unit_p
        and 	e.nr_sequencia = nr_seq_interno_w
        and     h.si_medical_account = 'Y'
        and     (h.cd_external IS NOT NULL AND h.cd_external::text <> '');

        r_c01_w                 accinforectyp;
        r_c02_w                 execinforedtyp;
        r_c03_w                 medtreatmentinforedtyp;
        cd_contin_flag_w        varchar(1):= 'C';
        loop_count_w            smallint := 0;
        inside_loop_count_w     smallint := 1;
        counter_w               smallint := 0;
        med_treatment_count_w   smallint := 0;
        medicine_loop_count_w   smallint := 0;
        array_length_w          smallint := 0;
        json_output_w           philips_json;

        cd_external_w                cpoe_std_comment.cd_external%type;
        nr_linkage_sequencia_w       cpoe_comment_linkage.nr_sequencia%type;

BEGIN

        PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w := 0;
        PERFORM set_config('nais_mla_pck.index_counter_w', 0, false);
        loop_count_w := 0;
        json_output_w := philips_json();
        PERFORM set_config('nais_mla_pck.med_treamtent', med_treamtent_array(), false);

        begin
            select  coalesce(max(a.nr_prescricao), 0),
                    CASE WHEN coalesce(max(a.ie_cancel), '0')='0' THEN  '01' WHEN coalesce(max(a.ie_cancel), '0')='1' THEN  '03' END ,
                    coalesce(max(c.nr_prontuario), 0),
                    coalesce(max(b.nr_atendimento), 0)
            into STRICT    nr_prescricao_w,
                    nr_processing_class_w,
                    nr_prontuario_w,
                    nr_atendimento_w
            from    phy_exam_exec_info a,
                    prescr_medica b,
                    pessoa_fisica c
            where   a.nr_prescricao = b.nr_prescricao
            and     b.cd_pessoa_fisica = c.cd_pessoa_fisica
            and     a.nr_sequencia = nr_seq_register_p;
        exception
        when others then
            PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while retriving the Processing classification for '||nr_seq_register_p||' '||sqlerrm, false);
        end;

        r_c03_w.slip_code := '   ';
        r_c03_w.nr_data_class := '01';
        r_c03_w.dosage := 0;
        r_c03_w.unit := ' ';
        r_c03_w.times_num := 1;
        r_c03_w.free_input_flag := 0;
        r_c03_w.free_comments := ' ';
        r_c03_w.med_change_impossible_flg := ' ';
        r_c03_w.general_name_med_flg := ' ';
        r_c03_w.days := 0;
        r_c03_w.times_num_04 := 0;
        r_c03_w.days_num := 0;
        r_c03_w.digit_times_num := 1;
        r_c03_w.digit_days_num := 1;
        r_c03_w.medi_blank := ' ';
        r_c03_w.eot := ' ';
        r_c03_w.nr_seq_interno := 0;

        open c04;			
        loop
        fetch c04 into
            nr_seq_interno_w;
            EXIT WHEN NOT FOUND; /* apply on c04 */
                medicine_loop_count_w := medicine_loop_count_w+1;
            begin
                open c05;			
                loop
                    fetch c05 into
                        cd_procedure_w,
                        vl_amount_exec_w;

                    EXIT WHEN NOT FOUND; /* apply on c05 */

                    procedure_data_w :=	get_medicalaffair_code('PH', 'PROC_INTERNO', 'NR_SEQUENCIA',cd_procedure_w, null, null);

                    current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_action_code_med_detail(order_class_w, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                    CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);

                    if (procedure_data_w.cd_medical_affair IS NOT NULL AND procedure_data_w.cd_medical_affair::text <> '') then
                        r_c03_w.internal_code := procedure_data_w.cd_medical_affair;
                        r_c03_w.dosage := (coalesce(vl_amount_exec_w, 0))::numeric *1000;
                        CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
                        CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;

                end loop;
                close c05;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Medical treatment information for Physiology procedure code '
||sqlerrm, false);
            end;
            begin
                open c07;			
                loop
                    fetch c07 into
                        cd_material_used_w,
                        vl_amount_used_w;
                    EXIT WHEN NOT FOUND; /* apply on c07 */

                    medicine_data_w := get_medicalaffair_code('PH', 'MATERIAL', 'CD_MATERIAL',cd_material_used_w, null, null);

                    if (medicine_data_w.cd_medical_affair IS NOT NULL AND medicine_data_w.cd_medical_affair::text <> '') then
                        r_c03_w.internal_code := medicine_data_w.cd_medical_affair;

                        if ((medicine_data_w.nr_conversion_factor IS NOT NULL AND medicine_data_w.nr_conversion_factor::text <> '') and vl_amount_used_w<>0) then
                            r_c03_w.dosage := ceil((vl_amount_used_w)::numeric /(medicine_data_w.nr_conversion_factor)::numeric );
                        else
                            r_c03_w.dosage := coalesce(vl_amount_used_w, 0);
                        end if;

                        CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
                        CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;

                end loop;
                close c07;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Medical treatment information for Drug '||sqlerrm, false);
            end;
            begin
                open c08;			
                loop
                    fetch c08 into
                        cd_material_used_w,
                        vl_amount_used_w;
                    EXIT WHEN NOT FOUND; /* apply on c08 */

                    material_data_w := get_medicalaffair_code('PH', 'MATERIAL', 'CD_MATERIAL',cd_material_used_w, null, null);

                    if (material_data_w.cd_medical_affair IS NOT NULL AND material_data_w.cd_medical_affair::text <> '') then
                        r_c03_w.internal_code := material_data_w.cd_medical_affair;

                        if ((material_data_w.nr_conversion_factor IS NOT NULL AND material_data_w.nr_conversion_factor::text <> '') and vl_amount_used_w<>0) then
                            r_c03_w.dosage := ceil((vl_amount_used_w)::numeric /(material_data_w.nr_conversion_factor)::numeric );
                        else
                            r_c03_w.dosage := coalesce(vl_amount_used_w, 0);
                        end if;

                        CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
                        CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;

                end loop;
                close c08;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Medical treatment information for Equipment '||sqlerrm, false);
            end;
            begin
                open c06;			
                loop
                    fetch c06 into
                        cd_material_used_w,
                        vl_amount_used_w;
                    EXIT WHEN NOT FOUND; /* apply on c06 */

                    addition_data_w := get_medicalaffair_code('PH', 'CPOE_PROCEDIMENTO', 'IE_LADO',cd_material_used_w, null, null);

                    if (addition_data_w.cd_additional_item IS NOT NULL AND addition_data_w.cd_additional_item::text <> '') then
                        r_c03_w.internal_code := addition_data_w.cd_additional_item;

                        if ((addition_data_w.nr_conversion_factor IS NOT NULL AND addition_data_w.nr_conversion_factor::text <> '') and vl_amount_used_w<>0) then
                            r_c03_w.dosage := ceil((vl_amount_used_w)::numeric /(addition_data_w.nr_conversion_factor)::numeric )*1000;
                        else
                            r_c03_w.dosage := (coalesce(vl_amount_used_w, 0))::numeric *1000;
                        end if;

                        CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
                        CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;

                end loop;
                close c06;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Medical treatment information for Additional data '||sqlerrm, false);
            end;

            begin
                open c09;
                loop
                fetch c09 into
                    nr_linkage_sequencia_w,
                    cd_external_w;
                    EXIT WHEN NOT FOUND; /* apply on c09 */
                        CALL CALL nais_mla_pck.process_receipt_comments(r_c03_w, cd_external_w, nr_linkage_sequencia_w);
                end loop;
                close c09;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Medical treatment information for comments and additional text '||sqlerrm, false);
            end;

            current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.add_date_class_med_detail(order_class_w, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
        end loop;
        close c04;
        loop_count_w := ceil(current_setting('nais_mla_pck.index_counter_w')::smallint / 10);
        for i in 1..loop_count_w loop begin
            if ( i = loop_count_w ) then
                cd_contin_flag_w := 'E';
            end if;

            CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.nais_common_header('KK', 0, nr_processing_class_w, cd_contin_flag_w, 1,
                               810, 944); --656
            begin
                open c01;
                loop
                    fetch c01 into r_c01_w;
                    EXIT WHEN NOT FOUND; /* apply on c01 */

                    CALL CALL CALL CALL CALL nais_mla_pck.common_accounting_info(r_c01_w);

                end loop;
                close c01;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Accounting information for '||nr_seq_register_p||' '||sqlerrm, false);
            end;

            begin
                open c02;
                loop
                    fetch c02 into r_c02_w;
                    EXIT WHEN NOT FOUND; /* apply on c02 */

                    CALL CALL CALL CALL CALL nais_mla_pck.common_execution_info(r_c02_w);

                end loop;
                close c02;
            exception
            when others then
                PERFORM set_config('nais_mla_pck.ds_error_w', current_setting('nais_mla_pck.ds_error_w')::varchar(4000)||' An error occured while forming the Execution information for '||nr_seq_register_p||' '||sqlerrm, false);
            end;

            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text('000', 3, 'R');
            med_treatment_count_w := mod(current_setting('nais_mla_pck.index_counter_w')::smallint,10);
            if (cd_contin_flag_w = 'C' or (cd_contin_flag_w = 'E' and med_treatment_count_w = 0)) then
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(10, 2, 'L', '0');
            else
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(med_treatment_count_w, 2, 'L', '0');
            end if;

            inside_loop_count_w := counter_w + 1;
            for x in inside_loop_count_w..inside_loop_count_w + 9 loop
                counter_w := counter_w + 1;
                current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array.extend;
                if ( cd_contin_flag_w = 'E' and current_setting('nais_mla_pck.med_treamtent')::coalesce(med_treamtent_array(x)::text, '') = '' ) then
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64);
                else
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array(x), 64, 'R');
                end if;

            end loop;

            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 4, 'R');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(chr(13), 1, 'R');

            json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());
            PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
        end;
        end loop;

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.send_physiology_data (( nr_seq_register_p bigint, nr_order_unit_p cpoe_order_unit.nr_order_unit%type ) is nr_prescricao_w prescr_medica.nr_prescricao%type) FROM PUBLIC;
