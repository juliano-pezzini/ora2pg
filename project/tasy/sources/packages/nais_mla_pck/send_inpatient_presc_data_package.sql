-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.send_inpatient_presc_data (( nr_prescricao_p bigint, c_order_unit_p text, order_class_type_p text, processing_classication_p text, nr_batch_number bigint default null, ds_file_output_p out text ) as c01 CURSOR ) AS $body$
DECLARE

         PERFORM     CASE WHEN processing_classication_p='nais.mla.InpatientPrescription.cancellation' THEN '03' WHEN processing_classication_p='nais.mla.InpatientPrescription' THEN '01' END      process_classif,
                    order_class_type_p                                    order_class,
                    a.NR_ORDER_PATIENT_SEQ                                order_number,
                    b.MEDICAL_RECORD_ID                                          patient_identifier,        
                    to_char(c.DT_INICIO, 'YYYYMMDD')                      consultation_date,
                    case when (a.cd_especialidade_med IS NOT NULL AND a.cd_especialidade_med::text <> '') then 
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', a.cd_especialidade_med), ' ') 
                     when (a.cd_departamento_med IS NOT NULL AND a.cd_departamento_med::text <> '') then 
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', a.cd_departamento_med), ' ')   
                     else '00'
					end as department_code,     
                    CASE WHEN nais_mla_pck.get_in_out_patient_classif(b.PATIENT_ID, NULL)='I' THEN  1 WHEN nais_mla_pck.get_in_out_patient_classif(b.PATIENT_ID, NULL)='O' THEN  2 END  patient_classification,
                    coalesce(b.bed_id, ' ')        ward_code,                 
                    coalesce(b.room_id, ' ')        room_number,               
                    '1'                        blood_tranfusion_type,     
                    '00'                       insurance_number,          
                    c.cd_medico                doctor_code,               
                    ' '                        patient_newborn,           
                    ' '                        prescription_classfication,
                    -- substr(p.NM_USUARIO,0,3)  requestor_code,            
                    '   '  requestor_code,    
                    ' '     mutual_exclusion_rule,     
                    '    '  division_number,           
                    ' '     blank_one,                 
                    ' '     blank_two                  
        from    prescr_material p,
                cpoe_material   c,
                bft_encounter_v b,
                cpoe_order_unit a,
                cpoe_tipo_pedido cp,	
                cpoe_rp          d
        where   p.nr_prescricao=nr_prescricao_p
                and b.encounter_id=c.nr_atendimento
                and p.nr_seq_mat_cpoe=c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit =a.nr_sequencia
                and a.NR_ORDER_UNIT=c_order_unit_p
                and  d.nr_sequencia = c.nr_seq_cpoe_rp
                and a.si_type_of_prescription in ('BRME','INPDP','INPR','INPT','INPI','INPAT')
                and cp.nr_seq_sub_grp            = 'ME'
                and (case 
                          when(order_class_type_p = 'H1') and  a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT') THEN (1)
                          when(order_class_type_p = 'H3') and  a.si_type_of_prescription ='INPDP'   THEN (1) 
                          when(order_class_type_p = 'HJ') and  a.si_type_of_prescription ='BRME'    THEN (1) 
                          else 0
                     end) = 1  LIMIT 1;



-----End of Accounting Info
c02 return;

-----End of Execution Info
--cursor for medical detail for  all prescription type HJ ,H1 and H3
  c03 return;


      --End of medical treatment                       
        r_c03                         c03%rowtype;
        r_c01_w                       accinforectyp;
        r_c02_w                       execinforedtyp;
        r_c03_w                       medtreatmentinforedtyp;
        order_class_w                 varchar(2) := '';
        cd_contin_flag_w              varchar(1) := 'C';
        loop_count_w                  smallint := 0;
        inside_loop_count_w           smallint := 1;
        counter_w                     smallint := 0;
        json_output_w                 philips_json;
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list            philips_json_list;
       processing_class               varchar(2) := '  ';
       ds_log_message_w               varchar(600);
       nr_seq_int_call_log_w          bigint   := 0;
       previous_cd_rp_w               cpoe_material.nr_seq_cpoe_rp%type :=0;
       current_rp_w                   cpoe_material.nr_seq_cpoe_rp%type :=0;
       ie_status_review_w              ap_lote_review.ie_status_review%type;





  comm RECORD;
BEGIN

        PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
        counter_w           := 0;
        inside_loop_count_w := 0;
        PERFORM set_config('nais_mla_pck.index_counter_w', 0, false);
        loop_count_w        := 0;
        json_output_w       := philips_json();
        PERFORM set_config('nais_mla_pck.json_output_list_w', philips_json_list(), false);


        select CASE WHEN processing_classication_p='nais.mla.InpatientPrescription.cancellation' THEN '03' WHEN processing_classication_p='nais.mla.InpatientPrescription' THEN '01' END
        into STRICT processing_class
;

         open c03;
         loop
            begin
                fetch c03 into r_c03_w;
                    exception
                    when others THEN

                   ds_log_message_w := 'Exception occured while forming cursor medical record for : '
                                    ||' Prescription number'
                                    || nr_prescricao_p
                                    || ' '
                                    ||sqlerrm;

                    if length(ds_log_message_w) < 500 then
                    record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), '260', processing_classication_p ,
                                'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E', ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                    else
                    record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), processing_classication_p, processing_classication_p, 
                                'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E',ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                    end if;

	        end;
            EXIT WHEN NOT FOUND; /* apply on c03 */


                current_rp_w :=nais_mla_pck.get_current_rp(r_c03_w.nr_seq_interno);


                    if previous_cd_rp_w <> current_rp_w then

                        current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_action_code_med_detail(order_class_type_p, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                        CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;

                    CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
                    CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);



                    current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_comment_code('Material', r_c03_w.nr_seq_interno, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                    <<inpatient_commnet_loop>>
					if current_setting('nais_mla_pck.ds_line_w')::(varchar(32767) IS NOT NULL AND (varchar(32767))::text <> '') then
                    for comm in (WITH RECURSIVE cte AS (
  SELECT regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767),'[^,]+', 1, level) c 
                                    regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), '[^,]+', 1, level) is not null   UNION ALL
  SELECT regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767),'[^,]+', 1, level) c 
                                    regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), '[^,]+', 1, level) is not null  JOIN cte c ON ()

) SELECT * FROM cte;
)
                    loop
                         CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(comm.c, current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end loop inpatient_commnet_loop;
					end if;

                    if current_rp_w <> r_c03_w.nr_seq_cpoe_rp  then

                         if order_class_type_p ='H3' then 
                              current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_additional_med_detail('fixedcode', r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                         end if;

                            current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.add_date_class_med_detail(order_class_type_p, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                            CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
                    end if;
                        previous_cd_rp_w :=current_rp_w;

         end loop;
         close c03;

        loop_count_w := ceil(current_setting('nais_mla_pck.index_counter_w')::smallint / 10);
           for i in 1..loop_count_w loop begin
                if ( i = loop_count_w ) then
                    cd_contin_flag_w := 'E';
                end if;
                if processing_classication_p ='nais.mla.InpatientPrescription.batch' then
                    select 
                    case when IE_STATUS_REVIEW = 'A'  then 
							'01'
                        when IE_STATUS_REVIEW = 'C'  then 
							'03'
                         else
							'  '
                    end as ie_status_review_w
                    into STRICT   processing_class
                    from   ap_lote_review
                    where nr_seq_lote =nr_batch_number;

                end if;

                  CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.nais_common_header('KK', 0, processing_class, cd_contin_flag_w, 1, 810, 944);

                    open c01;
                    loop
                    begin
                        fetch c01 into r_c01_w;
                         if processing_classication_p ='nais.mla.InpatientPrescription.batch' then
                                r_c01_w.process_classif :=processing_class;
                         end if;
                        exception
                        when others THEN
                        ds_log_message_w := 'Exception occured while forming cursor accounting record for : '
                                        ||' Prescription number'
                                        || nr_prescricao_p
                                        || ' '
                                        ||sqlerrm;

                            if length(ds_log_message_w) < 500 then
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), '260', processing_classication_p ,
                                        'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E', ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                            else
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), '260', processing_classication_p , 
                                        'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E', ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                            end if;
                    end;

                        EXIT WHEN NOT FOUND; /* apply on c01 */
                        CALL CALL CALL CALL CALL nais_mla_pck.common_accounting_info(r_c01_w);
                    end loop;
                    close c01;

                    open c02;
                    loop
                    begin
                        fetch c02 into r_c02_w;
                        exception
                        when others THEN
                        ds_log_message_w := 'Exception occured while forming cursor execution record for : '
                                        ||' Prescription number'
                                        || nr_prescricao_p
                                        || ' '
                                        ||sqlerrm;

                            if length(ds_log_message_w) < 500 then
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), '260', processing_classication_p ,
                                        'E', 'E', null, 'KK', null,ds_log_message_w, 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E', ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                            else
                            record_integration_call_log(wheb_usuario_pck.get_nm_usuario, 'NAIS', clock_timestamp(), '260', processing_classication_p , 
                                        'E', 'E', null, 'KK', null,substr(ds_log_message_w,1,499), 0,nr_seq_int_call_log_w, to_char(nr_prescricao_p), 944,'E', ie_interface_type_p => '254',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
                            end if;
                    end;

                        EXIT WHEN NOT FOUND; /* apply on c02 */
                        CALL CALL CALL CALL CALL nais_mla_pck.common_execution_info(r_c02_w);
                    end loop;
                    close c02;



            open c03;
            fetch c03 into r_c03;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.slip_code, 3, 'L');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(current_setting('nais_mla_pck.index_counter_w')::smallint, 0), 2, 'L', '0');

            close c03;
            inside_loop_count_w := counter_w + 1;
            for x in inside_loop_count_w..inside_loop_count_w + 9 loop
                counter_w := counter_w + 1;
                current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array.extend;
                if ( cd_contin_flag_w = 'E' and current_setting('nais_mla_pck.med_treamtent')::coalesce(med_treamtent_array(x)::text, '') = '' ) then
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64);
                else
                   PERFORM set_config('nais_mla_pck.ds_line_w', current_setting('nais_mla_pck.ds_line_w')::varchar(32767) || current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array(x), false);
                   -- nais_mla_pck.append_text(med_treamtent(x), 64, 'L', '');
                end if;

            end loop;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 4, 'R');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(chr(13), 1, 'R');


            ds_file_output_p:= ds_file_output_p || current_setting('nais_mla_pck.ds_line_w')::varchar(32767) ||',';

            PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
            end;
        end loop;

         PERFORM set_config('nais_mla_pck.ds_line_w', null, false);

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.send_inpatient_presc_data (( nr_prescricao_p bigint, c_order_unit_p text, order_class_type_p text, processing_classication_p text, nr_batch_number bigint default null, ds_file_output_p out text ) as c01 CURSOR ) FROM PUBLIC;
