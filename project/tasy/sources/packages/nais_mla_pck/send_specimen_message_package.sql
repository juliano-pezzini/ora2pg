-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.send_specimen_message ( nr_sequencia_p bigint, file_output_p INOUT text ) AS $body$
DECLARE

    c_order_unit varchar(100);
     ds_new_file_output_w text;
        ds_delete_file_output_w text;
        json_output_w                   philips_json;
        code_list_w                     varchar(10000);
        l_len_w                         integer;
        initial_value_w                 integer;
        val_w                           text;
        message_count_w                 integer := 0;
        diff_w                          integer := 1;
        qt_partially_received           integer := 0;
		nr_prescricao_w  prescr_procedimento.nr_prescricao%type;

     c05 CURSOR FOR
     SELECT distinct a.nr_order_unit order_unit
     from    cpoe_procedimento      c,
             prescr_procedimento    p ,
             cpoe_order_unit        a,
             cpoe_tipo_pedido       b,						
             prescr_medica          m,
             exame_laboratorio      e,
             proc_interno           pi,
             bft_encounter_v        v,
             prescr_procedimento_compl compl
     where   c.nr_sequencia=p.nr_seq_proc_cpoe 
                and p.nr_prescricao=m.nr_prescricao
                and m.nr_prescricao=p. nr_prescricao
                and  p.nr_seq_proc_compl = compl.nr_sequencia
                and compl.nr_sequencia = nr_sequencia_p
                and p.nr_seq_exame = e.nr_seq_exame
                and a.nr_seq_cpoe_tipo_pedido   = b.nr_sequencia
                and a.nr_sequencia              = c.nr_seq_cpoe_order_unit
                and coalesce(e.ie_controla_pendente,'S') = 'S' 
                and c.nr_atendimento =  v.encounter_id
                and obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'E0'
                and b.nr_seq_sub_grp            = 'L'
				and nais_mla_pck.get_in_out_patient_classif(v.PATIENT_ID, NULL)='I'
                and pi.nr_sequencia	= c.nr_seq_proc_interno;


BEGIN
        open c05;
          loop
                fetch c05 into c_order_unit;
                EXIT WHEN NOT FOUND; /* apply on c05 */
                 if (c_order_unit IS NOT NULL AND c_order_unit::text <> '') then

                select nr_prescricao
                into STRICT nr_prescricao_w
                from prescr_procedimento
                where nr_seq_proc_compl = nr_sequencia_p;
                --trigger new message
                ds_new_file_output_w := nais_mla_pck.send_specimen_data('01', nr_sequencia_p, c_order_unit);

                select count(*)
                into STRICT   qt_partially_received
                from prescr_procedimento p,
                     prescr_procedimento_compl compl
                where  p.nr_seq_proc_compl      = compl.nr_sequencia
                and    compl.ie_status_report   = 2
                and    p.nr_prescricao          = nr_prescricao_w
                and    p.nm_usuario          = 'ITECH';

                if qt_partially_received > 1 then

                --trigger delete message
                ds_delete_file_output_w := nais_mla_pck.send_specimen_data('03', nr_prescricao_w, c_order_unit);

                end if;

                file_output_p:= ds_new_file_output_w ||ds_delete_file_output_w;


                  SELECT sum(length(file_output_p) - length(replace(file_output_p, ',', null)) ) into STRICT message_count_w
;
                if message_count_w >= 1 then
                     for i in 1..message_count_w loop 
                         begin
                           if i = 1 then
                                        select instr(file_output_p, ',', 1, diff_w) into STRICT  l_len_w;
                                        initial_value_w := l_len_w - 1;
                                        select   substr(file_output_p, 0, l_len_w - 1) into STRICT val_w;
                           else
                                        diff_w := diff_w + 1;
                                        select instr(file_output_p, ',', 1, diff_w) into STRICT l_len_w;
                                        if l_len_w = 0 then
                                            select
                                                substr(file_output_p, initial_value_w + 1, length(file_output_p) - initial_value_w + 1) into STRICT val_w;
                                        else
                                            select
                                                replace(substr(file_output_p, initial_value_w + 1, l_len_w - initial_value_w),',',null) into STRICT val_w;
                                        end if;
                                        initial_value_w := l_len_w - 1;
                           end if;
                                        json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', val_w);
                                        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());
                        end;
                    end loop;
                end if;
                dbms_lob.createtemporary( file_output_p, true);
                current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.(file_output_p);

                end if;

          end loop;
        close c05;

      END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.send_specimen_message ( nr_sequencia_p bigint, file_output_p INOUT text ) FROM PUBLIC;
