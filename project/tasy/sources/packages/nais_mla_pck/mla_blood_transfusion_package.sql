-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


CREATE TYPE s_list AS (s_list bigint[1000]);


CREATE OR REPLACE PROCEDURE nais_mla_pck.mla_blood_transfusion ( nr_seq_registro_p bigint, file_output_p INOUT text ) AS $body$
DECLARE


		cd_contin_flag_w      varchar(1) := 'C';
		loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        json_output_w         philips_json;
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list    philips_json_list;
        nr_prescricao_w       bigint;
        dt_exec_date_w        timestamp;
        nr_patient_mrn_w      bigint;
        cd_physician_w        varchar(15);
        dt_liberacao_w        timestamp;
        cd_med_action_code    varchar(1000);
        cd_med_affairs_code1  varchar(1000);
        cd_med_affairs_code2  varchar(1000);
        cd_med_affairs_code3  varchar(1000);
        cd_pessoa_fisca_w     varchar(10);
        nr_seq_prod_reserva_w bigint;
        cd_pat_classif_w    varchar(1);
        nr_atendimento_w    bigint;
        nr_item_code_w      bigint;
		nr_order_pat_seq_w  integer;
        ds_error_message_w  varchar(500) := null;
        nr_seq_int_call_log_w   bigint := 0;
        nr_seq_reserva_w    san_reserva.nr_sequencia%type;
        nr_insurance_w      cpoe_order_unit.nr_seq_nais_insurance%type;
        cd_san_affair_w      nais_conversion_master%rowtype;
        nr_med_count_w       integer := 5;
        nr_counter_w         integer;
        nr_seq_item_w        integer;
        nr_count_w           integer := 0;
        nr_count_ww          integer;
        seq_list s_list := s_list();

        c01 CURSOR FOR
        SELECT
            '01'	process_classif,
            'KK'    order_class,
            '01' 	department_code,
            ' ' 	ward_code,
            ' ' 	room_number,
            '1' 	blood_tranfusion_type,
            nr_insurance_w 	insurance_number,
            cd_physician_w doctor_code,
            ' ' 	patient_newborn,
            ' ' 	prescription_classfication,
            ' ' 	requestor_code,
            ' ' 	mutual_exclusion_rule,
            ' ' 	division_number,
            ' ' 	blank_one,
            ' ' 	blank_two
;

        c02 CURSOR FOR
        SELECT
            ' '      execution_classification,
            to_char(dt_exec_date_w, 'YYYYMMDD') execution_date,
            to_char(dt_exec_date_w, 'HH24MI') execution_time,
            '   ' execution_op_code,
            ' ' execution_up_flag,
            '000000' execution_weight,
            '0' out_of_hours_flag,
            ' ' execution_blank
;

        c03 CURSOR FOR
        SELECT
            count(*) over () count_medi_details,         -- Mandatory (2)
            '   ' slip_code,                  -- Optional  (3)
            '01' nr_data_class,              -- Mandatory (2)
            coalesce(to_char(cd_san_affair_w.cd_medical_action), '000000') internal_code,              --  Mandatory(6)
            ' ' dosage,                     -- Mandatory (9)
            ' ' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            a.ds_observacao free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
        from
            prescr_solucao_evento a
        where a.nr_sequencia = nr_seq_registro_p

union all

        SELECT
            count(*) over () count_medi_details,         -- Mandatory (2)
            '   ' slip_code,                  -- Optional  (3)
            '01' nr_data_class,              -- Mandatory (2)
            coalesce(to_char(cd_san_affair_w.cd_medical_affair), '000000') internal_code,              --  Mandatory(6)
            ' ' dosage,                     -- Mandatory (9)
            ' ' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            a.ds_observacao free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
        from
            prescr_solucao_evento a
        where a.nr_sequencia = nr_seq_registro_p
        
union all

        select
            count(*) over () count_medi_details,         -- Mandatory (2)
            '   ' slip_code,                  -- Optional  (3)
            '01' nr_data_class,              -- Mandatory (2)
            coalesce(to_char(cd_san_affair_w.cd_medical_affair_two), '000000') internal_code,              --  Mandatory(6)
            to_char(nr_seq_item_w) dosage,                    -- Mandatory (9)
            'ml' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            a.ds_observacao free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
        from
            prescr_solucao_evento a
        where a.nr_sequencia = nr_seq_registro_p
        
union all

        select
            count(*) over () count_medi_details,         -- Mandatory (2)
            '   ' slip_code,                  -- Optional  (3)
            '01' nr_data_class,              -- Mandatory (2)
            coalesce(to_char(cd_san_affair_w.cd_medical_affair_three), '000000') internal_code,              --  Mandatory(6)
            to_char(nr_seq_item_w) dosage,                    -- Mandatory (9)
            'ml' unit,                       -- Optional  (2)
            '01' times_num,                  -- Mandatory(2)
            '01' free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            to_char(a.ds_observacao) free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
        from
            prescr_solucao_evento a
        where a.nr_sequencia = nr_seq_registro_p
        
union all

        select
            count(*) over () count_medi_details,         -- Mandatory (2)
            '   ' slip_code,                  -- Optional  (3)
            '04' nr_data_class,              -- Mandatory (2)
            ' ' internal_code,              --  Mandatory(6)
            ' '  dosage,                     -- Mandatory (9)
            ' '  unit,                       -- Optional  (2)
            ' '  times_num,                  -- Mandatory(2)
            ' '  free_input_flag,            -- Mandatory(1) , 0 : no free comments , 1 : free comments
            ' '  free_comments,              -- Optional (40)
            ' ' med_change_impossible_flg,  -- Optional (1)
            ' ' general_name_med_flg,       -- Optional (1)
            '00' days,                       --Optional (2) , if  data_class_no = '04'
            '00' times_num_04,               -- Mandatory (2) , if  data_class_no = '04'
            '00' days_num,                   -- Mandatory (2), if  data_class_no = '04'
            '001' digit_times_num,            -- Mandatory (3), if  data_class_no = '04'
            '001' digit_days_num,             -- Mandatory (3), if  data_class_no = '04'
            ' ' medi_blank,                 -- ALL SPACE (4)
            ' ' eot,                         -- ALL SPACE (1)
            0 nr_seq_interno
;

        c04 CURSOR FOR
        SELECT  nr_sequencia
        from    san_reserva_prod
        where   nr_seq_reserva = nr_seq_reserva_w;

        r_c03                 c03%rowtype;


BEGIN
        PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
        counter_w := 0;
        inside_loop_count_w := 0;
        PERFORM set_config('nais_mla_pck.index_counter_w', 0, false);
        loop_count_w := 0;
        json_output_w := philips_json();
        PERFORM set_config('nais_mla_pck.json_output_list_w', philips_json_list(), false);

        begin
        select nr_prescricao,
               dt_atualizacao,
               nr_seq_prod_reserva,
               nr_seq_reserva
        into STRICT   nr_prescricao_w,
               dt_exec_date_w,
               nr_seq_prod_reserva_w,
               nr_seq_reserva_w
        from   prescr_solucao_evento
        where  nr_sequencia = nr_seq_registro_p;
        exception when others then
        ds_error_message_w  := ds_error_message_w || 'Failed to retrieve reserved blood info' || sqlerrm;
        end;

        if coalesce(nr_prescricao_w::text, '') = '' then
            select coalesce(max(nr_prescricao), 0)
            into STRICT   nr_prescricao_w
            from   san_reserva
            where  nr_sequencia = nr_seq_reserva_w;
        end if;

		begin
		select a.nr_order_patient_seq,
               nais_mla_pck.get_insurance_number(a.nr_seq_nais_insurance)
		into STRICT   nr_order_pat_seq_w,
               nr_insurance_w
		from   prescr_procedimento p,
			   cpoe_hemoterapia c,
			   cpoe_order_unit a,
			   cpoe_tipo_pedido cp
		where  p.nr_prescricao = nr_prescricao_w
		and    p.nr_seq_proc_cpoe = c.nr_sequencia
		and    a.nr_seq_cpoe_tipo_pedido = cp.nr_sequencia
		and    c.nr_seq_cpoe_order_unit = a.nr_sequencia
		and    cp.nr_seq_sub_grp = 'BT';
		exception when no_data_found then
		nr_order_pat_seq_w := '00000000';
		end;

        begin
        select cd_medico,
               nr_atendimento,
               cd_pessoa_fisica,
               dt_liberacao
        into STRICT   cd_physician_w,
               nr_atendimento_w,
              cd_pessoa_fisca_w,
              dt_liberacao_w
        from   prescr_medica
        where  nr_prescricao = nr_prescricao_w;

        if coalesce(dt_liberacao_w::text, '') = '' then
            select  dt_reserva
            into STRICT    dt_liberacao_w
            from   san_reserva
            where  nr_sequencia = nr_seq_reserva_w;
        end if;

        select nr_prontuario
        into STRICT   nr_patient_mrn_w
        from   pessoa_fisica
        where  cd_pessoa_fisica = cd_pessoa_fisca_w;

        select CASE WHEN nais_mla_pck.get_in_out_patient_classif(cd_pessoa_fisca_w, dt_exec_date_w)='I' THEN  '2' WHEN nais_mla_pck.get_in_out_patient_classif(cd_pessoa_fisca_w, dt_exec_date_w)='O' THEN  '1'  ELSE '1' END
        into STRICT   cd_pat_classif_w
;

       select nr_seq_derivado
       into STRICT   nr_item_code_w
       from   san_producao
       where  nr_sequencia = (SELECT nr_seq_producao
                              from san_reserva_prod
                              where nr_sequencia = nr_seq_prod_reserva_w);
       exception when others then
       ds_error_message_w:= ds_error_message_w || 'error in medical details' || sqlerrm;
       end;

      cd_san_affair_w := get_medicalaffair_code('BT', 'SAN_DERIVADO', 'NR_SEQUENCIA', nr_item_code_w, null, null);
      
      for r_c04 in c04 loop 
        nr_count_w := nr_count_w + 1;
        seq_list.extend;
        seq_list(nr_count_w)  := r_c04.nr_sequencia;
      end loop;
      
      for nr_count_ww in 1 .. seq_list.count loop
        if (seq_list(nr_count_ww) = nr_seq_prod_reserva_w) then
            nr_seq_item_w := nr_count_ww;
        end if;
      end loop;
      CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.nais_common_header('KK', nr_seq_registro_p, '01', 'E', '1',810, 651);
      for r_c01 in c01 loop
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.process_classif, 2, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.order_class, 2, 'L', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(nr_order_pat_seq_w), 8, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(nr_patient_mrn_w), 10, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(dt_liberacao_w, 'YYYYMMDD'), 8, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.department_code, 2, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(cd_pat_classif_w), 1, 'L', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 3, 'R', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 5, 'R', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blood_tranfusion_type, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.insurance_number, 2, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(to_char(cd_physician_w), 8, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.patient_newborn, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.prescription_classfication, 1, 'R', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.requestor_code, 3, 'L', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.mutual_exclusion_rule, 1, 'R', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.division_number, 4, 'L', ' ');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blank_one, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c01.blank_two, 1, 'L');
      end loop;
      for r_c02 in c02 loop
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_classification, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_date, 8, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_time, 4, 'L', '0');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_op_code, 3, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_up_flag, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_weight, 6, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.out_of_hours_flag, 1, 'L');
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c02.execution_blank, 8, 'R', ' ');
      end loop;
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text('000', 3, 'L');
      if coalesce(cd_san_affair_w.cd_medical_affair::text, '') = '' then
        nr_med_count_w := nr_med_count_w - 1;
      end if;
      if coalesce(cd_san_affair_w.cd_medical_affair_two::text, '') = '' then
        nr_med_count_w := nr_med_count_w - 1;
      end if;
      if coalesce(cd_san_affair_w.cd_medical_affair_three::text, '') = '' then
        nr_med_count_w := nr_med_count_w - 1;
      end if;
      if coalesce(cd_san_affair_w.cd_medical_action::text, '') = '' then
        nr_med_count_w := nr_med_count_w - 1;
      end if;
        CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text('0'||to_char(nr_med_count_w), 2, 'L', '0');
	  for r_c03 in c03 loop
        if ( r_c03.nr_data_class = '04' ) then
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.nr_data_class, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.days, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.times_num_04, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.days_num, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.digit_times_num, 3, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.digit_days_num, 3, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 50);
        elsif ( r_c03.nr_data_class = '01' and r_c03.internal_code <> '000000') then
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.nr_data_class, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.internal_code, 6, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(r_c03.dosage, ' '), 9, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.unit, 2, 'L', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.times_num, 2, 'L', '0');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.free_input_flag, 1);
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(r_c03.free_comments, ' '), 40, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.med_change_impossible_flg, 1, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.general_name_med_flg, 1, 'R', ' ');
        end if;
	   end loop;
       for nr_counter_w in 1 .. (5 - nr_med_count_w) loop
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
       end loop;
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 4, 'R', ' ');
            CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(chr(13) || chr(10), 1, 'L');
            json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());
            if (ds_error_message_w IS NOT NULL AND ds_error_message_w::text <> '') then
               record_integration_call_log(coalesce(wheb_usuario_pck.get_nm_usuario , 'NAIS'), 'NAIS', clock_timestamp(), '260', 'nais.mla.bloodtransfusion' ,
-                        'E', 'E', null, 'KK', current_setting('nais_mla_pck.ds_line_w')::varchar(32767),substr(ds_error_message_w,1,499), 0,nr_seq_int_call_log_w, to_char(nr_seq_registro_p), 651,'E', ie_interface_type_p => '257',ie_tipo_error_p => 'MB',ds_conversion_log_p=>null,ie_message_code_p =>'KK');
            end if;
        dbms_lob.createtemporary(file_output_p, true);
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.(file_output_p);
    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.mla_blood_transfusion ( nr_seq_registro_p bigint, file_output_p INOUT text ) FROM PUBLIC;
