-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.send_inpatient_presc_message ( nr_prescricao_p bigint, processing_classication_p text, ds_file_output_p INOUT text ) AS $body$
DECLARE

        h3_count_w                      bigint;
        h1_count_w                      bigint;
        hj_count_w                      bigint;
        ds_file_output_p_final_w        text;
        json_output_w                   philips_json;
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list              philips_json_list;
        ds_file_output_p_h3_w           text;
        ds_file_output_p_h1_w           text;
        ds_file_output_p_hj_w           text;
        code_list_w                     varchar(10000);
        l_len_w                         bigint;
        initial_value_w                 bigint;
        val_w                           varchar(10000);
        message_count_w                 bigint := 0;
        diff_w                          bigint :=1;
        c_order_unit_w                  varchar(100);
        nr_seq_int_call_log_w           bigint  := 0;
        nr_cpoe_batch_order_unit_w      cpoe_order_unit.nr_order_unit%type;
        nr_prescricao_w                 ap_lote_review.nr_prescricao%type;


       c05 CURSOR FOR
          SELECT
                distinct a.NR_ORDER_UNIT order_unit
          from  prescr_material   p,
                cpoe_material     c,
                bft_encounter_v   b,
                cpoe_order_unit   a,
                cpoe_tipo_pedido  cp,	
                cpoe_rp           d
        where   p.nr_prescricao                 = nr_prescricao_p
                and b.encounter_id              = c.nr_atendimento
                and p.nr_seq_mat_cpoe           = c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit    = a.nr_sequencia
                and  d.nr_sequencia             = c.nr_seq_cpoe_rp
                and a.si_type_of_prescription in ('BRME','INPDP','INPR','INPT','INPI','INPAT')
                and cp.nr_seq_sub_grp            = 'ME';


BEGIN
    json_output_w       := philips_json();
    PERFORM set_config('nais_mla_pck.json_output_list_w', philips_json_list(), false);

if processing_classication_p  in ('nais.mla.InpatientPrescription.cancellation','nais.mla.InpatientPrescription') then
        select COUNT(CASE a.si_type_of_prescription  WHEN 'INPR'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPT'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPI'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPAT' THEN 1 END),
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPDP' THEN 1 END),
               COUNT(CASE a.si_type_of_prescription  WHEN 'BRME'  THEN 1 END)
        into STRICT    h1_count_w,
                h3_count_w,
                hj_count_w
        from    prescr_material     p,
                cpoe_material       c,
                bft_encounter_v     b,
                cpoe_order_unit     a,
                cpoe_tipo_pedido    cp,	
                cpoe_rp             d
        where   p.nr_prescricao                 = nr_prescricao_p
                and b.encounter_id              = c.nr_atendimento
                and p.nr_seq_mat_cpoe           = c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit    = a.nr_sequencia
                and d.nr_sequencia             = c.nr_seq_cpoe_rp
                and a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT','INPDP','BRME')
                and cp.nr_seq_sub_grp            = 'ME'
                and (case 
                          when(processing_classication_p = 'nais.mla.InpatientPrescription.cancellation') and  p.ie_suspenso ='S' THEN (1)
                          when(processing_classication_p = 'nais.mla.InpatientPrescription') and  p.ie_suspenso ='N' THEN (1)
                          else 0
                     end) = 1;
elsif processing_classication_p = 'nais.mla.InpatientPrescription.batch'  then 
    select  
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPR'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPT'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPI'  THEN 1 END)+
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPAT' THEN 1 END),
               COUNT(CASE a.si_type_of_prescription  WHEN 'INPDP' THEN 1 END),
               COUNT(CASE a.si_type_of_prescription  WHEN 'BRME'  THEN 1 END)
    into STRICT        h1_count_w,
                h3_count_w,
                hj_count_w 
    from        prescr_material     p,
                cpoe_material       c,
                bft_encounter_v     b,
                cpoe_order_unit     a,
                cpoe_tipo_pedido    cp,	
                cpoe_rp             d,
                ap_lote_review      w,
                ap_lote             ap
    where       p.nr_prescricao                 = w.nr_prescricao
                and b.encounter_id              = c.nr_atendimento
                and p.nr_seq_mat_cpoe           = c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit    = a.nr_sequencia
                and d.nr_sequencia              = c.nr_seq_cpoe_rp
                and cp.nr_seq_sub_grp           = 'ME'
                and w.nr_seq_lote               =   nr_prescricao_p 
                and ap.NR_SEQUENCIA =w.nr_seq_lote 
                and    a.nr_sequencia =w.NR_SEQ_CPOE_ORDER_UNIT
                and a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT','INPDP','BRME');

    select
                distinct a.NR_ORDER_UNIT order_unit,
                w. nr_prescricao
    into STRICT        nr_cpoe_batch_order_unit_w,
                nr_prescricao_w
   from        prescr_material     p,
                cpoe_material       c,
                bft_encounter_v     b,
                cpoe_order_unit     a,
                cpoe_tipo_pedido    cp,	
                cpoe_rp             d,
                ap_lote_review      w,
                ap_lote             ap
    where       p.nr_prescricao                 = w.nr_prescricao
                and b.encounter_id              = c.nr_atendimento
                and p.nr_seq_mat_cpoe           = c.nr_sequencia
                and a.nr_seq_cpoe_tipo_pedido   = cp.nr_sequencia
                and c.nr_seq_cpoe_order_unit    = a.nr_sequencia
                and d.nr_sequencia              = c.nr_seq_cpoe_rp
                and cp.nr_seq_sub_grp           = 'ME'
                and w.nr_seq_lote               =   nr_prescricao_p 
                and ap.NR_SEQUENCIA =w.nr_seq_lote 
                and  a.nr_sequencia =w.NR_SEQ_CPOE_ORDER_UNIT
                and a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT','INPDP','BRME');


    end if;
                 if    h1_count_w >  0 and  processing_classication_p  in ('nais.mla.InpatientPrescription.cancellation','nais.mla.InpatientPrescription') then
                open c05;
                    loop
                            fetch c05 into c_order_unit_w;
                            EXIT WHEN NOT FOUND; /* apply on c05 */
                            ds_file_output_p_h1_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_p, c_order_unit_w, 'H1', processing_classication_p, null);
                            ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_h1_w;
                    end loop;
                close c05;
                else
                            ds_file_output_p_h1_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_w, nr_cpoe_batch_order_unit_w, 'H1', processing_classication_p, nr_prescricao_p);
                            ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_h1_w;
                end if;

                if hj_count_w >  0 and  processing_classication_p  in ('nais.mla.InpatientPrescription.cancellation','nais.mla.InpatientPrescription') then 
                open c05;
                    loop
                            fetch c05 into c_order_unit_w;
                            EXIT WHEN NOT FOUND; /* apply on c05 */
                            ds_file_output_p_hj_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_p, c_order_unit_w, 'HJ', processing_classication_p, null);
                            ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_hj_w;
                    end loop;
                close c05;
                else
                 ds_file_output_p_h1_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_w, nr_cpoe_batch_order_unit_w, 'HJ', processing_classication_p, nr_prescricao_p);
                    ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_h1_w;
                end if;


                if h3_count_w >  0 and  processing_classication_p  in ('nais.mla.InpatientPrescription.cancellation','nais.mla.InpatientPrescription') then
                open c05;
                    loop
                            fetch c05 into c_order_unit_w;
                            EXIT WHEN NOT FOUND; /* apply on c05 */
                            ds_file_output_p_h3_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_p, c_order_unit_w, 'H3', processing_classication_p, null);
                            ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_h3_w;
                    end loop;
                    close c05;
                else
                 ds_file_output_p_h1_w := nais_mla_pck.send_inpatient_presc_data(nr_prescricao_w, nr_cpoe_batch_order_unit_w, 'H3', processing_classication_p, nr_prescricao_p);
                    ds_file_output_p_final_w:=ds_file_output_p_final_w ||ds_file_output_p_h1_w;
                end if;


        SELECT sum(length(ds_file_output_p_final_w) - length(replace(ds_file_output_p_final_w, ',', '')) ) into STRICT message_count_w
;
    if message_count_w >= 1 then
         for i in 1..message_count_w loop 
             begin
               if i = 1 then
                            select instr(ds_file_output_p_final_w, ',', 1, diff_w) into STRICT  l_len_w;
                            initial_value_w := l_len_w - 1;
                            select   substr(ds_file_output_p_final_w, 0, l_len_w - 1) into STRICT val_w;
               else
                            diff_w := diff_w + 1;
                            select instr(ds_file_output_p_final_w, ',', 1, diff_w) into STRICT l_len_w;
                            if l_len_w = 0 then
                                select
                                    substr(ds_file_output_p_final_w, initial_value_w + 1, length(ds_file_output_p_final_w) - initial_value_w + 1) into STRICT val_w;
                            else
                                select
                                    replace(substr(ds_file_output_p_final_w, initial_value_w + 1, l_len_w - initial_value_w),',',null) into STRICT val_w;
                            end if;
                            initial_value_w := l_len_w - 1;
               end if;
							json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', val_w);
                            current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());
            end;
        end loop;
    end if;
    dbms_lob.createtemporary( ds_file_output_p, true);
    current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.(ds_file_output_p);




    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.send_inpatient_presc_message ( nr_prescricao_p bigint, processing_classication_p text, ds_file_output_p INOUT text ) FROM PUBLIC;
