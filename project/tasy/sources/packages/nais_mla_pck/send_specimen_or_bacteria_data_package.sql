-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE nais_mla_pck.send_specimen_or_bacteria_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) AS $body$
DECLARE

         PERFORM
            '01'                                                    process_classif,
            CASE WHEN cd_classif_p='nais.mla.specimen.execution' THEN 'E0' WHEN cd_classif_p='nais.mla.bacteria' THEN 'E8' END     order_class,
            coalesce(a.NR_ORDER_PATIENT_SEQ, 0)                                             order_number,              
            coalesce(v.MEDICAL_RECORD_ID,0)                                                 patient_identifier,     
            coalesce(to_char(C.DT_INICIO, 'YYYYMMDD'),'        ')                            consultation_date,
            case when (a.cd_especialidade_med IS NOT NULL AND a.cd_especialidade_med::text <> '') then 
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'ESPECIALIDADE_MEDICA', 'CD_ESPECIALIDADE', a.cd_especialidade_med), ' ') 
                     when (a.cd_departamento_med IS NOT NULL AND a.cd_departamento_med::text <> '') then 
                         coalesce(nais_mla_pck.get_affairs_code('OS', 'DEPARTAMENTO_MEDICO', 'CD_DEPARTAMENTO', a.cd_departamento_med), ' ')   
                     else '00'
                end as department_code,         
            CASE WHEN get_patient_type(v.encounter_id, NULL)='IN' THEN  2 WHEN get_patient_type(v.encounter_id, NULL)='OP' THEN  1 END  												patient_classification ,
            CASE WHEN get_patient_type(v.encounter_id, NULL) ='IN' THEN coalesce(v.bed_id, ' ') WHEN get_patient_type(v.encounter_id, NULL) ='OP' THEN  ' ' END                                       ward_code,                 
            CASE WHEN get_patient_type(v.encounter_id, NULL) ='IN' THEN coalesce(v.room_id, ' ') WHEN get_patient_type(v.encounter_id, NULL) ='OP' THEN  ' ' END                                      room_number,             
            '1'                                                                        blood_tranfusion_type,   
            coalesce(nais_mla_pck.get_insurance_number(a.nr_seq_nais_insurance),00)                      insurance_number,       
            coalesce(c.cd_medico,' ')                                                       doctor_code,             
            ' '                                                                        patient_newborn,           
            ' '                                                                        prescription_classfication,
            '   '                                                                      requestor_code,        
            ' '                                                                        mutual_exclusion_rule,   
            '    '                                                                     division_number,                                             
            ' '                                                                        blank_one,          
            ' '                                                                        blank_two          
        from cpoe_procedimento c, 
             prescr_procedimento p ,
             cpoe_order_unit a,
             cpoe_tipo_pedido b,						
             prescr_medica m,
             exame_laboratorio e,
             proc_interno pi,
             bft_encounter_v v
        where   c.nr_sequencia=p.nr_seq_proc_cpoe 
                and p.nr_prescricao=m.nr_prescricao
                and m.nr_prescricao=nr_prescricao_p 
                and p.nr_seq_exame = e.nr_seq_exame
                and a.nr_seq_cpoe_tipo_pedido   = b.nr_sequencia
                and a.nr_sequencia              = c.nr_seq_cpoe_order_unit
                and coalesce(e.ie_controla_pendente,'S') = 'S' 
                and c.nr_atendimento =  v.encounter_id
                and pi.nr_sequencia	= c.nr_seq_proc_interno
                and a.nr_order_unit = order_unit_p
                 and (case 
                          when(cd_classif_p = 'nais.mla.specimen.execution') and  b.nr_seq_sub_grp  = 'L' and  obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'E0' THEN (1)
                          when(cd_classif_p = 'nais.mla.bacteria') and  b.nr_seq_sub_grp  = 'B' and  obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) = 'E8' THEN (1)
                          else 0
                     end) = 1  LIMIT 1;

          --  End of Accounting Information
        c02 return;

    c03 return;

        r_c03                 c03%rowtype;
        r_c01_w               accinforectyp;
        r_c02_w               execinforedtyp;
        r_c03_w               medtreatmentinforedtyp;
        cd_contin_flag_w      varchar(1) := 'C';
        order_class_w         varchar(2);
        loop_count_w          smallint := 0;
        inside_loop_count_w   smallint := 1;
        counter_w             smallint := 0;
        json_output_w		  philips_json;
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list    philips_json_list;



  comm RECORD;
BEGIN


    PERFORM set_config('nais_mla_pck.ds_line_w', null, false);
    counter_w           := 0;
    inside_loop_count_w :=0;
    PERFORM set_config('nais_mla_pck.index_counter_w', 0, false);
    loop_count_w        := 0;
    json_output_w       := philips_json();
    PERFORM set_config('nais_mla_pck.json_output_list_w', philips_json_list(), false);
    open c03;

        loop
            fetch c03 into r_c03_w;

            EXIT WHEN NOT FOUND; /* apply on c03 */
            open c01;
                loop
                    fetch c01 into r_c01_w;
                    EXIT WHEN NOT FOUND; /* apply on c01 */
                   order_class_w :=r_c01_w.order_class;
                end loop;
            close c01;

            if  c03%rowcount = 1 then
            current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_action_code_med_detail(order_class_w, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);
				
				if order_class_w ='E8' then
                
                current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_lab_test_med_detail(order_unit_p, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
                CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);

                end if;
			
            end if;

            CALL CALL CALL CALL nais_mla_pck.common_med_treatment_info(r_c03_w);
            CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);

            current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.get_comment_code('Exam', r_c03_w.nr_seq_interno, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            <<specimen_bacteria_comment_loop>>
			if current_setting('nais_mla_pck.ds_line_w')::(varchar(32767) IS NOT NULL AND (varchar(32767))::text <> '') then
            for comm in (WITH RECURSIVE cte AS (
  SELECT regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767),'[^,]+', 1, level) c 
                            regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), '[^,]+', 1, level) is not null   UNION ALL
  SELECT regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767),'[^,]+', 1, level) c 
                            regexp_substr(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), '[^,]+', 1, level) is not null  JOIN cte c ON ()

) SELECT * FROM cte;
)
            loop
                 CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(comm.c, current_setting('nais_mla_pck.index_counter_w')::smallint);
            end loop specimen_bacteria_comment_loop;
			end if;



        end loop;
            current_setting('nais_mla_pck.ds_line_w')::varchar(32767) := nais_mla_pck.add_date_class_med_detail(order_class_w, r_c03_w, current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
            CALL CALL CALL CALL nais_mla_pck.add_med_treatment_detail_array(current_setting('nais_mla_pck.ds_line_w')::varchar(32767), current_setting('nais_mla_pck.index_counter_w')::smallint);

        close c03;
        loop_count_w := ceil(current_setting('nais_mla_pck.index_counter_w')::smallint / 10);

        for i in 1..loop_count_w loop begin
            if ( i = loop_count_w ) then
                cd_contin_flag_w := 'E';
            end if;
            CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.nais_common_header('KK', 0, '01', cd_contin_flag_w, 1,
                                   810, 944);
            open c01;
                loop
                    fetch c01 into r_c01_w;
                    EXIT WHEN NOT FOUND; /* apply on c01 */
                    CALL CALL CALL CALL CALL nais_mla_pck.common_accounting_info(r_c01_w);
                end loop;
            close c01;

            open c02;
                loop
                    fetch c02 into r_c02_w;
                    EXIT WHEN NOT FOUND; /* apply on c02 */
                    CALL CALL CALL CALL CALL nais_mla_pck.common_execution_info(r_c02_w);
                end loop;
            close c02;

            open c03;
            fetch c03 into r_c03;
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(r_c03.slip_code, 3, 'L');
                CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(coalesce(current_setting('nais_mla_pck.index_counter_w')::smallint, 0), 2, 'L', '0');
            close c03;

            inside_loop_count_w := counter_w + 1;

            for x in inside_loop_count_w..inside_loop_count_w + 9 loop
                counter_w := counter_w + 1;

                current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array.extend;
                if ( cd_contin_flag_w = 'E' and current_setting('nais_mla_pck.med_treamtent')::coalesce(med_treamtent_array(x)::text, '') = '' ) then
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 64);
                else
                    CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(current_setting('nais_mla_pck.med_treamtent')::med_treamtent_array(x), 64, 'L', ' ');
                end if;

            end loop;


             CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(' ', 4, 'R');
              CALL CALL CALL CALL CALL CALL CALL CALL CALL CALL nais_mla_pck.append_text(chr(13), 1, 'R');

               json_output_w := nais_mla_pck.add_json_value(json_output_w, 'message', current_setting('nais_mla_pck.ds_line_w')::varchar(32767));
               current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.append(json_output_w.to_json_value());

        end;
        end loop;
        dbms_lob.createtemporary( file_output_p, true);
        current_setting('nais_mla_pck.json_output_list_w')::philips_json_list.(file_output_p);
		
		
		open c03;
                loop
                    fetch c03 into r_c03_w;
                    EXIT WHEN NOT FOUND; /* apply on c03 */
                           update prescr_procedimento
                           set    dt_integracao = clock_timestamp()
                           where  nr_prescricao=nr_prescricao_p 
                           and    nr_seq_interno =r_c03_w.nr_seq_interno;
                           commit;
                end loop;
        close c03;

    END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nais_mla_pck.send_specimen_or_bacteria_data (( nr_prescricao_p bigint, cd_classif_p text, order_unit_p text, file_output_p out text ) as c01 CURSOR ) FROM PUBLIC;
