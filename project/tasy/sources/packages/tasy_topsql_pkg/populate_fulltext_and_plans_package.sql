-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



-- Get SQL full text and SQL plans
CREATE OR REPLACE PROCEDURE tasy_topsql_pkg.populate_fulltext_and_plans () AS $body$
DECLARE

    l_sql_plan text;
    l_full_sqltext text;
    l_clob_length integer;

    
    
  sqls RECORD;
  sql_childs RECORD;
  sql_plan_line RECORD;

BEGIN
    DBMS_LOB.CREATETEMPORARY(l_sql_plan,false);

    FOR sqls IN (
        -- For each sql that was reported (insert or update into tasy_topsql_sqlarea_report) today
        SELECT sql_id 
        FROM tasy_topsql_sqlarea_report
        WHERE TRUNC(last_sample) = TRUNC(clock_timestamp())
        ) LOOP
            l_clob_length := octet_length(l_sql_plan);
            IF l_clob_length > 0 THEN
                DBMS_LOB.ERASE(l_sql_plan,l_clob_length);
            END IF;

            -- ### TODO: analyze the sql statement plan
            FOR sql_childs IN (
                -- Get all its active child numbers
                SELECT DISTINCT sql_id, plan_hash_value, MAX(child_number) AS child_number
                FROM gv_$sql
                WHERE sql_id = sqls.sql_id
                AND command_type IN (3,6,2,7) -- In order: SELECT, UPDATE, INSERT, DELETE
                GROUP BY sql_id, plan_hash_value
                ) LOOP
                    FOR sql_plan_line IN (
                        SELECT plan_table_output
                        FROM TABLE(dbms_xplan.display_cursor(sql_childs.sql_id, sql_childs.child_number, 'ALL -PROJECTION -ALIAS +NOTE'))
                        ) LOOP
                            -- For each child number, get the sql plan
                            DBMS_LOB.APPEND(l_sql_plan,sql_plan_line.plan_table_output || chr(10));
                    END LOOP;
            END LOOP;

            BEGIN
                -- Get the SQL full text
                SELECT sql_fulltext
                INTO STRICT l_full_sqltext
                FROM gv_$sqlarea
                WHERE sql_id = sqls.sql_id  LIMIT 1;
            EXCEPTION
                WHEN no_data_found THEN
                    l_full_sqltext := NULL;
            END;

            IF (l_full_sqltext IS NOT NULL AND l_full_sqltext::text <> '') THEN
                UPDATE tasy_topsql_sqlarea_report
                SET sql_fulltext = l_full_sqltext
                WHERE sql_id = sqls.sql_id;
            END IF;

            -- If the sql plan was found, update the respective column
            IF octet_length(l_sql_plan) > 0 AND l_sql_plan NOT LIKE '%cannot be found%' THEN
                UPDATE tasy_topsql_sqlarea_report
                SET last_sql_plans = trim(both l_sql_plan)
                WHERE sql_id = sqls.sql_id;
            END IF;

    END LOOP;
EXCEPTION
    WHEN SQLSTATE '50013' THEN
        RAISE EXCEPTION '%', 'Missing privilege on view "sys.gv_$sqlarea".'
        || ' Please grant SELECT on sys.gv_$sqlarea to TASY: ' || sqlerrm USING ERRCODE = '45016';
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tasy_topsql_pkg.populate_fulltext_and_plans () FROM PUBLIC;
