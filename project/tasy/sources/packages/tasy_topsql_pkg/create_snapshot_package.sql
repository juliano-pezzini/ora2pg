-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


/*
    Create snapshot at specified intervals (by a job)
    Snapshot id comes from the sequence "tasy_topsql_snap_seq"
    It is also responsible to call cleanup and report procedures

*/
CREATE OR REPLACE PROCEDURE tasy_topsql_pkg.create_snapshot () AS $body$
DECLARE

    l_snap_sql_minimal_executions bigint;
    l_snap_sql_minimal_elapsed bigint;
    l_number_of_sqls_per_snap bigint;
    l_number_of_snapshots_taken bigint;
    l_snap_sequence bigint;
    l_start_time bigint;
    l_capture_nobind_sql_data bigint;
    l_snap_nobind_sql_maxcount bigint;
    l_number_of_rows_created bigint;

    
    

BEGIN
    BEGIN
        l_start_time := DBMS_UTILITY.GET_TIME;
        SELECT
            number_of_sqls_per_snap,
            snap_sql_minimal_executions,
            snap_sql_minimal_elapsed,
            number_of_snapshots_taken,
            capture_nobind_sql_data,
            snap_nobind_sql_maxcount
        INTO STRICT
            l_number_of_sqls_per_snap,
            l_snap_sql_minimal_executions,
            l_snap_sql_minimal_elapsed,
            l_number_of_snapshots_taken,
            l_capture_nobind_sql_data,
            l_snap_nobind_sql_maxcount
        FROM
            tasy_topsql_control_tab
        
        WHERE sequence_number = 1;
    EXCEPTION
        WHEN no_data_found THEN
            INSERT INTO tasy_topsql_control_tab(
                sequence_number,
                last_updated,
                last_snap_id_reported,
                webservice_last_time,
                capture_nobind_sql_data,
                number_of_sqls_per_snap,
                number_of_sqls_per_report,
                snap_sql_minimal_executions,
                snap_sql_minimal_elapsed,
                snap_nobind_sql_maxcount,
                report_sql_minimal_executions,
                report_sql_minimal_elapsed,
                number_of_snapshots_to_retain,
                max_nobind_rows_top_keep,
                number_of_snapshots_taken,
                total_time_creating_snapthots,
                last_time_creating_snapthot,
                transfer_to_remote_db,
                remote_db_username,
                remote_db_password,
                remote_db_sqlnet_config
            ) VALUES (
                1, -- sequence_number
                clock_timestamp(), -- last_updated
                0, -- last_snap_id_reported
                clock_timestamp(), -- webservice_last_time
                1, -- capture_nobind_sql_data
                500, -- number_of_sqls_per_snap
                50, -- number_of_sqls_per_report
                5, -- snap_sql_minimal_executions
                900, -- snap_sql_minimal_elapsed
                100, -- snap_nobind_sql_maxcount
                5, -- report_sql_minimal_executions
                600, -- report_sql_minimal_elapsed
                2, -- number_of_snapshots_to_retain
                200, -- max_nobind_rows_top_keep
                0, -- number_of_snapshots_taken
                0, -- total_time_creating_snapthots
                0, -- last_time_creating_snapthot
                0, -- transfer_to_remote_db
                NULL, -- remote_db_username
                NULL, -- remote_db_password
                NULL -- remote_db_sqlnet_config
            );
            COMMIT;
            SELECT
                number_of_sqls_per_snap,
                snap_sql_minimal_executions,
                snap_sql_minimal_elapsed,
                number_of_snapshots_taken,
                capture_nobind_sql_data,
                snap_nobind_sql_maxcount
            INTO STRICT
                l_number_of_sqls_per_snap,
                l_snap_sql_minimal_executions,
                l_snap_sql_minimal_elapsed,
                l_number_of_snapshots_taken,
                l_capture_nobind_sql_data,
                l_snap_nobind_sql_maxcount
            FROM
                tasy_topsql_control_tab LIMIT 1;
    END;

    SELECT nextval('tasy_topsql_snap_seq')
    INTO STRICT l_snap_sequence
;

    INSERT INTO tasy_topsql_sqlarea(
        snap_id,
        sample_date,
        sql_id,
        object_name,
        module,
        action,
        executions,
        elapsed_time,
        cpu_time,
        disk_reads,
        buffer_gets,
        user_io_wait_time,
        rows_processed,
        command_type,
        sql_text
    )
    SELECT
        l_snap_sequence,
        clock_timestamp(),
        sql_id,
        object_name,
        module,
        action,
        executions,
        elapsed_time,
        cpu_time,
        disk_reads,
        buffer_gets,
        user_io_wait_time,
        rows_processed,
        command_type,
        sql_text
    FROM (
        SELECT
            a.sql_id AS sql_id,
            MAX(a.command_type) AS command_type,
            MAX(b.object_name) AS object_name,
            MAX(a.module) AS module,
            MAX(a.action) AS action,
            SUM(a.executions) AS executions,
            round(SUM(a.elapsed_time) / 1000000) elapsed_time,
            round(SUM(a.cpu_time) / 1000000) cpu_time,
            SUM(a.disk_reads) AS disk_reads,
            SUM(a.buffer_gets) AS buffer_gets,
            round(SUM(a.user_io_wait_time) / 1000000) user_io_wait_time,
            SUM(a.rows_processed) AS rows_processed,
            MAX(a.sql_text) AS sql_text
        FROM
            gv_$sqlarea a 
        LEFT OUTER JOIN dba_objects b ON (a.program_id = b.object_id)
        
        WHERE a.executions >= l_snap_sql_minimal_executions
        -- only SQLs that were parsed by Tasy schema      
        AND a.parsing_user_id IN (
                SELECT user_id
                FROM user_users)
        -- only SQLs that consumed at least X seconds
        AND a.elapsed_time/1000000 > l_snap_sql_minimal_elapsed
        GROUP BY 
            sql_id
        ORDER BY elapsed_time DESC) alias19 LIMIT (l_number_of_sqls_per_snap);

    GET DIAGNOSTICS l_number_of_rows_created = ROW_COUNT;

    -- If enabled, get "no bind" SQL data
    IF l_capture_nobind_sql_data = 1 THEN
        CALL tasy_topsql_pkg.gather_nobind_sql(l_snap_nobind_sql_maxcount);
    END IF;

    -- If rows were created, report/analyze data
    -- report_data commits
    IF l_number_of_rows_created > 0 THEN
        CALL tasy_topsql_pkg.report_data();
    END IF;

    -- Keep only data for the top-n last snapshots (depends on the values present in the configuration table)
    CALL tasy_topsql_pkg.remove_snap_data();

    -- Computes statstics about the current execution and global totals
    UPDATE tasy_topsql_control_tab
    SET number_of_snapshots_taken = l_number_of_snapshots_taken + 1,
    total_time_creating_snapthots = total_time_creating_snapthots + round((DBMS_UTILITY.GET_TIME - l_start_time) * 0.01,2),
    last_time_creating_snapthot = round((DBMS_UTILITY.GET_TIME - l_start_time) * 0.01,2);

    COMMIT;
EXCEPTION
    WHEN SQLSTATE '50013' THEN
        RAISE EXCEPTION '%', 'Missing privilege on view "sys.gv_$sqlarea".'
        || ' Please grant SELECT on sys.gv_$sqlarea to TASY' USING ERRCODE = '45011';
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tasy_topsql_pkg.create_snapshot () FROM PUBLIC;
