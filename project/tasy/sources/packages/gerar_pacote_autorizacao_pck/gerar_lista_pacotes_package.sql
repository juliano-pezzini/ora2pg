-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--###################################################################
CREATE OR REPLACE PROCEDURE gerar_pacote_autorizacao_pck.gerar_lista_pacotes () AS $body$
DECLARE


i				integer;
qt_proc_exigido_nao_autor_w	bigint;

c01 CURSOR FOR
SELECT	a.*
from	convenio_pacote_autor a
where	a.cd_convenio		= cd_convenio_w
and	a.cd_estabelecimento	= cd_estabelecimento_w
and	a.ie_situacao 		= 'A'
and	dt_autorizacao_w	between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,clock_timestamp() + interval '1 days')
and	exists (select	1
	from	convenio_pacote_autor_proc x,
		procedimento_autorizado y
	where	x.nr_seq_pacote		= a.nr_sequencia
	and	x.cd_procedimento	= y.cd_procedimento
	and	x.ie_origem_proced	= y.ie_origem_proced
	and	y.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint)
order by a.ie_prioridade,
	coalesce(a.ie_pacote_unico_pedido,'N') desc;

c01_w	c01%rowtype;


BEGIN

i := 0;
open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	/*Verifico se existem itens que estão no pacotes como exigidos e que não existem na autorização.
	Se existir, então não gera o pacote.*/
	select	count(*)
	into STRICT	qt_proc_exigido_nao_autor_w
	from	convenio_pacote_autor_proc a
	where	a.nr_seq_pacote			= c01_w.nr_sequencia
	and	coalesce(a.ie_exige_proc_autor,'N')	= 'S'
	and	not exists (SELECT	1
		from	procedimento_autorizado b
		where	b.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
		and	b.cd_procedimento	= a.cd_procedimento
		and	b.ie_origem_proced	= a.ie_origem_proced);

	if (qt_proc_exigido_nao_autor_w = 0) then

		current_setting('gerar_pacote_autorizacao_pck.lista_pacotes_w')::lista_pacotes_vt[i].nr_seq_pacote		:= c01_w.nr_sequencia;
		current_setting('gerar_pacote_autorizacao_pck.lista_pacotes_w')::lista_pacotes_vt[i].ie_pacote_unico_pedido	:= c01_w.ie_pacote_unico_pedido;
		current_setting('gerar_pacote_autorizacao_pck.lista_pacotes_w')::lista_pacotes_vt[i].ie_prioridade		:= c01_w.ie_prioridade;
		current_setting('gerar_pacote_autorizacao_pck.lista_pacotes_w')::lista_pacotes_vt[i].vl_honorario_pacote		:= c01_w.vl_honorario_pacote;

		CALL gerar_pacote_autorizacao_pck.gerar_proc_pacote(c01_w.nr_sequencia);

		CALL gerar_pacote_autorizacao_pck.gerar_mat_pacote(c01_w.nr_sequencia);

		CALL gerar_pacote_autorizacao_pck.criar_pacotes_autorizacao();

		i := i + 1;
	end if;

end loop;
close C01;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_pacote_autorizacao_pck.gerar_lista_pacotes () FROM PUBLIC;
