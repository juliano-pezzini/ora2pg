-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--###################################################################
CREATE OR REPLACE PROCEDURE gerar_pacote_autorizacao_pck.validar_pacotes () AS $body$
DECLARE


nr_seq_pacote_unico_w		bigint;
nr_seq_pacote_duplicado_w	bigint;
qt_item_w			bigint;

c01 CURSOR FOR
SELECT	b.nr_sequencia
from	autor_conv_pacote a,
	convenio_pacote_autor b
where	a.nr_seq_pacote			= b.nr_sequencia
and	a.nr_sequencia_autor		= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
and	a.ie_gerado			= 'N'
and	b.ie_pacote_unico_pedido	= 'S'
and	a.nr_sequencia			> nr_seq_pacote_unico_w
order by a.nr_sequencia;

c02 CURSOR FOR
SELECT	cd_procedimento,
	ie_origem_proced,
	ie_acao_duplic_diaria,
	qt_procedimento,
	ie_acao_proc_autor
from	convenio_pacote_autor_proc
where	nr_seq_pacote		= nr_seq_pacote_duplicado_w
and	dt_autorizacao_w	between coalesce(dt_inicio_vigencia,clock_timestamp() - interval '999 days') and coalesce(dt_fim_vigencia,clock_timestamp() + interval '999 days');

c02_w	c02%rowtype;


BEGIN

select	min(a.nr_sequencia)
into STRICT	nr_seq_pacote_unico_w
from	autor_conv_pacote a,
	convenio_pacote_autor b
where	a.nr_seq_pacote			= b.nr_sequencia
and	a.nr_sequencia_autor		= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
and	a.ie_gerado			= 'N'
and	b.ie_pacote_unico_pedido	= 'S';

if (nr_seq_pacote_unico_w IS NOT NULL AND nr_seq_pacote_unico_w::text <> '') then

	--Pego os pacotes cadastrados para o convênio que foram marcados como únicos e deixa na autorização apenas o primeiro que foi gerado.
	open C01;
	loop
	fetch C01 into
		nr_seq_pacote_duplicado_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		--Pego os procedimentos deste pacote para tratar o parâmetro de inclusoa/exclusao do item nos casos em que o pacote não é gerado.
		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			if (c02_w.ie_acao_duplic_diaria = 'E') then --Excluir o item na autorização se o pacote não for gerado.
				delete	from	procedimento_autorizado
				where	cd_procedimento		= c02_w.cd_procedimento
				and	ie_origem_proced	= c02_w.ie_origem_proced
				and	nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint;

				CALL gerar_pacote_autorizacao_pck.gravar_historico_item_pacote(c02_w.cd_procedimento, c02_w.ie_origem_proced, nr_seq_pacote_duplicado_w);

			else --Incluir o item na autorização se o pacote não for gerado.
				select	count(*)
				into STRICT	qt_item_w
				from	procedimento_autorizado
				where	nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
				and	cd_procedimento		= c02_w.cd_procedimento
				and	ie_origem_proced	= c02_w.ie_origem_proced;

				if (qt_item_w = 0) then

					insert into procedimento_autorizado(cd_procedimento,
						ie_origem_proced,
						qt_autorizada,
						qt_solicitada,
						dt_atualizacao,
						nm_usuario,
						nr_sequencia_autor,
						nr_sequencia,
						ds_observacao)
					values (c02_w.cd_procedimento,
						c02_w.ie_origem_proced,
						0,
						c02_w.qt_procedimento,
						clock_timestamp(),
						current_setting('gerar_pacote_autorizacao_pck.nm_usuario_w')::varchar(15),
						current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint,
						nextval('procedimento_autorizado_seq'),
						wheb_mensagem_pck.get_texto(346806,'nr_seq_pacote_p='||nr_seq_pacote_duplicado_w)); --Item gerado pela regra de pacote de autorização. Pacote #@nr_seq_pacote_p#@
				end if;

			end if;

			end;
		end loop;
		close C02;

		end;
	end loop;
	close C01;

	delete	from autor_conv_pacote a
	where	a.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
	and	a.ie_gerado		= 'N'
	and	a.nr_sequencia		> nr_seq_pacote_unico_w
	and	exists (SELECT 1
			from	convenio_pacote_autor b
			where	b.nr_sequencia			= a.nr_seq_pacote
			and	b.ie_pacote_unico_pedido	= 'S');

end if;

/*Excluo os pacotes que geraram sem itens preliminares*/

delete 	from autor_conv_pacote a
where	a.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
and	a.ie_gerado		= 'N'
and	not exists (SELECT	1
	from	proc_autor_pacote b
	where	b.nr_seq_pacote_autor	= a.nr_sequencia);

-- valido os pacotes exigidos.
CALL gerar_pacote_autorizacao_pck.validar_pacotes_exigidos();

end;

--###################################################################
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_pacote_autorizacao_pck.validar_pacotes () FROM PUBLIC;
