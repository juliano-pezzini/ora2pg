-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--###################################################################
CREATE OR REPLACE PROCEDURE gerar_pacote_autorizacao_pck.atualizar_itens_autorizacao () AS $body$
DECLARE


nr_seq_autor_pacote_item_w	bigint;
nr_seq_proc_autor_w		bigint;
qt_proc_w			bigint;
qt_proc_ja_pacote_w		bigint;
qt_pacote_w			bigint;

c01 CURSOR FOR
SELECT	a.*
from	autor_conv_pacote a
where	nr_sequencia_autor = current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
order by nr_sequencia asc;

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	a.nr_seq_proc_autor,
	a.qt_solicitada_pct,
	a.qt_solicitada_ant
from	proc_autor_pacote a
where	a.nr_seq_pacote_autor	= c01_w.nr_sequencia
and	not exists (select	1
	from	proc_autor_pacote x
	where	x.nr_seq_proc_autor = a.nr_seq_proc_autor
	and	x.nr_seq_pacote_autor < a.nr_seq_pacote_autor);

c02_w	c02%rowtype;

c03 CURSOR FOR
SELECT	a.nr_seq_mat_autor,
	a.qt_solicitada_pct,
	a.qt_solicitada_ant
from	material_autor_pacote a
where	a.nr_seq_pacote_autor	= c01_w.nr_sequencia;

c03_w	c03%rowtype;

c04 CURSOR FOR
SELECT	a.cd_procedimento,
	a.ie_origem_proced,
	a.qt_procedimento,
	a.ie_acao_proc_autor
from	convenio_pacote_autor_proc a
where	a.nr_seq_pacote		= c01_w.nr_seq_pacote
and	coalesce(a.ie_situacao,'A')	= 'A'
and	dt_autorizacao_w	between coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '999 days') and coalesce(a.dt_fim_vigencia,clock_timestamp() + interval '999 days');

c04_w	c04%rowtype;


BEGIN

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	open C02;
	loop
	fetch C02 into
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	max(nr_seq_autor_pacote)
		into STRICT	nr_seq_autor_pacote_item_w
		from	procedimento_autorizado
		where	nr_sequencia	= c02_w.nr_seq_proc_autor;

		if (coalesce(nr_seq_autor_pacote_item_w::text, '') = '') then --Verifico se o item já não está em um pacote.
			if (c02_w.qt_solicitada_pct < c02_w.qt_solicitada_ant) then

				update	procedimento_autorizado
				set	nr_seq_autor_pacote	= c01_w.nr_sequencia,
					qt_solicitada		= c02_w.qt_solicitada_pct
				where	nr_sequencia		= c02_w.nr_seq_proc_autor;

				CALL gerar_pacote_autorizacao_pck.descobrar_proc_autorizado(c02_w.nr_seq_proc_autor, c02_w.qt_solicitada_ant - c02_w.qt_solicitada_pct, c01_w.nr_sequencia);

			else
				update	procedimento_autorizado
				set	nr_seq_autor_pacote	= c01_w.nr_sequencia
				where	nr_sequencia		= c02_w.nr_seq_proc_autor;

			end if;
		end if;

		end;
	end loop;
	close C02;

	open C03;
	loop
	fetch C03 into
		c03_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		select	max(nr_seq_autor_pacote)
		into STRICT	nr_seq_autor_pacote_item_w
		from	material_autorizado
		where	nr_sequencia	= c03_w.nr_seq_mat_autor;

		if (coalesce(nr_seq_autor_pacote_item_w::text, '') = '') then --Verifico se o item já não está em um pacote.
			if (c03_w.qt_solicitada_pct < c03_w.qt_solicitada_ant) then

				update	material_autorizado
				set	nr_seq_autor_pacote	= c01_w.nr_sequencia,
					qt_solicitada		= c03_w.qt_solicitada_pct
				where	nr_sequencia		= c03_w.nr_seq_mat_autor;

				--gerar_pacote_autorizacao_pck.descobrar_mat_autorizado(c03_w.nr_seq_mat_autor, c03_w.qt_solicitada_ant - c03_w.qt_solicitada_pct, c01_w.nr_sequencia);
			else

				update	material_autorizado
				set	nr_seq_autor_pacote	= c01_w.nr_sequencia
				where	nr_sequencia		= c03_w.nr_seq_mat_autor;

			end if;
		end if;

		end;
	end loop;
	close C03;

	select	count(*),
		max(a.nr_seq_proc_autor)
	into STRICT	qt_proc_ja_pacote_w,
		nr_seq_proc_autor_w
	from	proc_autor_pacote a,
		autor_conv_pacote b
	where	a.nr_seq_pacote_autor 	= b.nr_sequencia
	and	b.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
	and	b.nr_seq_pacote		= c01_w.nr_seq_pacote
	and	not exists (SELECT	1
		from	proc_autor_pacote x
		where	x.nr_seq_proc_autor	= a.nr_seq_proc_autor
		and	x.nr_seq_pacote_autor	< c01_w.nr_sequencia);

	if (qt_proc_ja_pacote_w > 0) then

		--Tratamento para verificar os itens que estão na regra do pacote como 'Incluir' mas que não existem na autorização.
		open C04;
		loop
		fetch C04 into
			c04_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			if (c04_w.ie_acao_proc_autor = 'I') then

				select	count(*)
				into STRICT	qt_proc_w
				from	procedimento_autorizado
				where	nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
				and	cd_procedimento		= c04_w.cd_procedimento
				and	ie_origem_proced	= c04_w.ie_origem_proced;

				if (qt_proc_w = 0) then

						select	nextval('procedimento_autorizado_seq')
						into STRICT	nr_seq_proc_autor_w
						;

						insert into procedimento_autorizado(cd_procedimento,
							ie_origem_proced,
							qt_autorizada,
							qt_solicitada,
							dt_atualizacao,
							nm_usuario,
							nr_sequencia_autor,
							nr_sequencia,
							ds_observacao,
							nr_seq_autor_pacote)
						values (c04_w.cd_procedimento,
							c04_w.ie_origem_proced,
							0,
							c04_w.qt_procedimento,
							clock_timestamp(),
							current_setting('gerar_pacote_autorizacao_pck.nm_usuario_w')::varchar(15),
							current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint,
							nr_seq_proc_autor_w,
							wheb_mensagem_pck.get_texto(350638,'nr_seq_pacote_w='||c01_w.nr_sequencia),	--Procedimento incluído na autorização pelas regras do pacote #@nr_seq_pacote_w#@
							c01_w.nr_sequencia);

						insert 	into proc_autor_pacote(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							nr_seq_proc_autor,
							nr_seq_pacote_autor,
							qt_solicitada_pct,
							qt_solicitada_ant)
						values (nextval('proc_autor_pacote_seq'),
							clock_timestamp(),
							current_setting('gerar_pacote_autorizacao_pck.nm_usuario_w')::varchar(15),
							nr_seq_proc_autor_w,
							c01_w.nr_sequencia,
							0, --Gravo ambos com zero para saber que este item é gerado do desdobramento e identificar ao desfazer o pacote.
							0);
					end if;

			else

				select	count(1)
				into STRICT	qt_proc_w
				from	procedimento_autorizado
				where	cd_procedimento		= c04_w.cd_procedimento
				and	ie_origem_proced	= c04_w.ie_origem_proced
				and	nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint;

				if (qt_proc_w > 0) then

					delete	from procedimento_autorizado
					where	cd_procedimento		= c04_w.cd_procedimento
					and	ie_origem_proced	= c04_w.ie_origem_proced
					and	nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint;

					CALL gerar_pacote_autorizacao_pck.gravar_historico_item_pacote(c04_w.cd_procedimento, c04_w.ie_origem_proced, c01_w.nr_sequencia);
				end if;

			end if;

			end;
		end loop;
		close C04;
	end if;

	end;
end loop;
close C01;

---Excluir os pacotes que ficaram sem itens.
delete	from AUTOR_CONV_PACOTE a
where	a.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint
and	not exists (SELECT	1
			from	procedimento_autorizado b
			where	b.nr_seq_autor_pacote	= a.nr_sequencia)
and	not exists (select	1
			from	material_autorizado b
			where	b.nr_seq_autor_pacote	= a.nr_sequencia);


select	count(*)
into STRICT	qt_pacote_w
from	autor_conv_pacote a
where	a.nr_sequencia_autor	= current_setting('gerar_pacote_autorizacao_pck.nr_sequencia_autor_w')::bigint;

if (qt_pacote_w = 0) and (current_setting('gerar_pacote_autorizacao_pck.ds_pacotes_nao_gerados_w')::(varchar(2000) IS NOT NULL AND (varchar(2000))::text <> '')) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(352286,'ds_pacotes_w='||current_setting('gerar_pacote_autorizacao_pck.ds_pacotes_nao_gerados_w')::varchar(2000));
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_pacote_autorizacao_pck.atualizar_itens_autorizacao () FROM PUBLIC;
