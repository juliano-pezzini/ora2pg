-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE gerar_esocial_dados_pck.gerar_esocial_dados_pgto ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


	qt_registros_w 			bigint := 0;
	nr_count_prest_w		bigint:= 0;
	nr_seq_lote_w			esocial_lote.nr_sequencia%type;
	nr_Seq_new_lote_w		esocial_lote.nr_sequencia%type;
	nr_lote_pagamento_w		pls_lote_pagamento.nr_sequencia%type;
	dt_competencia_w		pls_lote_pagamento.dt_mes_competencia%type;
	dt_pagamento_w			pls_lote_pagamento.dt_mes_competencia%type;
	cd_retencao_w			tributo.cd_retencao%type;
	cd_retencao_ir_w		tributo.cd_retencao%type;
	vl_trib_inss_w			pls_pag_prest_venc_trib.vl_imposto%type;
	vl_base_inss_w			pls_pag_prest_venc_trib.vl_base_calculo%type;
	vl_deducao_inss_w		pessoa_fisica_trib.vl_tributo%type;
	vl_base_deducao_inss_w		pls_lote_ret_trib_val_dif.vl_base_calculo%type;
	vl_trib_ir_w			pls_pag_prest_venc_trib.vl_imposto%type := 0;
	vl_base_irf_w			pls_pag_prest_venc_trib.vl_base_calculo%type := 0;
	nr_seq_pagamento_w		esocial_dados_pagamento.nr_seq_pagamento%type;
	dt_liquidacao_w			titulo_pagar.dt_liquidacao%type;
	cd_pessoa_fisica_old_w  	pls_prestador.cd_pessoa_fisica%type;
	ie_aplica_deducao_w		boolean := true;

	c_prestador CURSOR FOR
		SELECT dt_mes_competencia,
			ie_tipo_operacao,
			nr_seq_prestador,
			cd_pessoa_fisica,
			vl_remuneracao,
			cd_externo_esocial,
			nr_seq_lote_pag,
			nr_titulo,
			dt_vencimento,
			ie_deducao
		from	(
				SELECT  l.dt_mes_competencia,
					CASE WHEN coalesce(p.ie_cancelamento,'X')='X' THEN 'I'  ELSE 'E' END  ie_tipo_operacao,
					max(p.nr_seq_prestador) nr_seq_prestador,
					pe.cd_pessoa_fisica,
					sum(i.vl_item) - sum(( 	select	coalesce(sum(x.vl_vencimento),0)
								from	pls_pag_prest_venc_valor x
								where	x.nr_seq_evento = ev.nr_sequencia
								and	x.nr_seq_vencimento = v.nr_sequencia
								and	x.ie_tipo_valor = 'PP')) vl_remuneracao,
					max(pe.cd_externo_esocial) cd_externo_esocial,
					l.nr_sequencia nr_seq_lote_pag,
					max(v.nr_titulo) nr_titulo,
					max(v.dt_vencimento) dt_vencimento,
					'S' ie_deducao
				from 	pls_lote_pagamento	l,
					pls_pagamento_prestador	p,
					pls_pag_prest_vencimento v,
					pls_pagamento_item 	i,
					pls_evento		ev,
					pls_prestador		pe
				where	l.nr_sequencia		= p.nr_seq_lote
				and 	p.nr_sequencia		= v.nr_seq_pag_prestador
				and 	p.nr_sequencia		= i.nr_seq_pagamento
				and	i.nr_seq_evento		= ev.nr_sequencia
				and	p.nr_seq_prestador	= pe.nr_sequencia
				and	coalesce(pe.cd_pessoa_fisica,'X') <> 'X'
				and 	l.ie_status		= 'D'
				and	((exists(	select	1
							from	pls_evento_tributo evt,
								tributo t
							where	evt.nr_seq_evento = ev.nr_sequencia
							and	evt.cd_tributo = t.cd_tributo
							and	t.ie_tipo_tributo = 'INSS'
							and	evt.ie_situacao = 'A'
							and	((current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type between coalesce(evt.dt_inicio_vigencia, current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type) and coalesce(evt.dt_fim_vigencia,current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type))
								or (current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type between coalesce(evt.dt_inicio_vigencia, current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type) and coalesce(evt.dt_fim_vigencia,current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type))))))
				and 	CASE WHEN ie_referencia_pgto_w='C' THEN l.dt_mes_competencia  ELSE v.dt_vencimento END  between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type
				group by p.nr_seq_prestador,
					pe.cd_pessoa_fisica,
					l.dt_mes_competencia,
					CASE WHEN coalesce(p.ie_cancelamento,'X')='X' THEN 'I'  ELSE 'E' END ,
					l.nr_sequencia
				
union all

				select	d.dt_mes_competencia,
					'I' ie_tipo_operacao,
					null nr_seq_prestador,
					b.cd_pessoa_fisica,
					sum(CASE WHEN coalesce(a.ie_natureza,'D')='D' THEN a.vl_imposto WHEN coalesce(a.ie_natureza,'D')='P' THEN  (a.vl_imposto * (-1)) END ) vl_remuneracao,
					null cd_externo_esocial,
					d.nr_sequencia nr_seq_lote_pag,
					null nr_titulo,
					null dt_vencimento,
					'N' ie_deducao
				from 	pls_lote_ret_trib_val_dif	a,
					pls_lote_ret_trib_prest		b,
					pls_lote_retencao_trib		c,
					pls_lote_pagamento		d			
				where	b.nr_sequencia			= a.nr_seq_trib_prest
				and	b.nr_seq_lote			= c.nr_sequencia
				and 	d.nr_seq_lote_ret_trib	= c.nr_sequencia
				and 	exists (select	1
						
						where	ie_referencia_pgto_w = 'C'
						and 	d.dt_mes_competencia between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type
						
union all

						select	1
						from	pls_pag_prest_vencimento f
						where	f.nr_seq_pag_prestador = (	select 	max(e.nr_Sequencia)
											from	pls_prestador e
											where	e.cd_pessoa_fisica = b.cd_pessoa_fisica)
						and 	ie_referencia_pgto_w <> 'C'
						and 	f.dt_vencimento between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type  LIMIT 1)
				group by b.cd_pessoa_fisica,
					d.dt_mes_competencia,
					d.nr_sequencia
				) alias42
			order by	cd_pessoa_fisica,
					nr_seq_lote_pag,
					vl_remuneracao desc;

	vet_prestadores c_prestador%rowtype;

	
BEGIN

	nr_seq_pagamento_w:= 0;
	cd_pessoa_fisica_old_w:= null;
	nr_seq_lote_w:= nr_seq_lote_p;
	
	-- Inserir dados dos prestadores
	open c_prestador;
	loop
	fetch c_prestador into
		vet_prestadores;
	EXIT WHEN NOT FOUND; /* apply on c_prestador */
		begin
		qt_registros_w := qt_registros_w + 1;

		select	max(b.cd_retencao),
			sum(a.vl_imposto),
			sum(a.vl_base_calculo)
		into STRICT	cd_retencao_w,
			vl_trib_inss_w,
			vl_base_inss_w
		from	esocial_regra_tributo		r,
			tributo				b,
			pls_pag_prest_venc_trib		a,
			pls_pag_prest_vencimento	x,
			pls_pagamento_prestador  	p,
			pls_prestador			pe,
			pls_lote_pagamento		l
		where	a.cd_tributo			= b.cd_tributo
		and	b.ie_tipo_tributo		= 'INSS'
		and	x.nr_sequencia			= a.nr_seq_vencimento
		and	x.nr_seq_pag_prestador  	= p.nr_sequencia
		and	p.nr_seq_prestador		= pe.nr_sequencia
		and	l.nr_sequencia			= p.nr_seq_lote
		and	r.cd_tributo			= b.cd_tributo
		and	pe.cd_pessoa_fisica		= vet_prestadores.cd_pessoa_fisica
		and 	nr_seq_prestador		= vet_prestadores.nr_seq_prestador
		and	r.nr_seq_esocial_regra		= current_setting('gerar_esocial_dados_pck.nr_seq_regra_w')::esocial_regra.nr_sequencia%type
		and 	CASE WHEN r.ie_referencia_tributo='C' THEN l.dt_mes_competencia  ELSE x.dt_vencimento END  between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type
		and	a.ie_pago_prev			= 'V'
		and	l.nr_sequencia 			= vet_prestadores.nr_seq_lote_pag;

		select	max(coalesce(b.cd_retencao, 0)),
			sum(a.vl_imposto),
			sum(a.vl_base_calculo - a.vl_base_adic)
		into STRICT	cd_retencao_ir_w,
			vl_trib_ir_w,
			vl_base_irf_w
		from	esocial_regra_tributo		r,
			tributo				b,
			pls_pag_prest_venc_trib		a,
			pls_pag_prest_vencimento	x,
			pls_pagamento_prestador  	p,
			pls_prestador			pe,
			pls_lote_pagamento		l
		where	a.cd_tributo			= b.cd_tributo
		and	b.ie_tipo_tributo		= 'IR'
		and	x.nr_sequencia			= a.nr_seq_vencimento
		and	x.nr_seq_pag_prestador  	= p.nr_sequencia
		and	p.nr_seq_prestador		= pe.nr_sequencia
		and	l.nr_sequencia			= p.nr_seq_lote
		and	r.cd_tributo			= b.cd_tributo
		and	pe.cd_pessoa_fisica		= vet_prestadores.cd_pessoa_fisica
		and 	nr_seq_prestador		= vet_prestadores.nr_seq_prestador
		and	r.nr_seq_esocial_regra		= current_setting('gerar_esocial_dados_pck.nr_seq_regra_w')::esocial_regra.nr_sequencia%type
		and 	CASE WHEN r.ie_referencia_tributo='C' THEN l.dt_mes_competencia  ELSE x.dt_vencimento END  between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type
		and	a.ie_pago_prev			= 'V'
		and	l.nr_sequencia 			= vet_prestadores.nr_seq_lote_pag;

		if	(((cd_pessoa_fisica_old_w <> vet_prestadores.cd_pessoa_fisica) or (ie_aplica_deducao_w)) and (vet_prestadores.ie_deducao = 'S')) then
			begin
			
			-- Descontar ou somar o valor de diferenca do tributo (pasta Retencao tributos) conforme o campo natureza (desconto ou provento)
			select	sum(CASE WHEN coalesce(a.ie_natureza,'D')='D' THEN a.vl_imposto WHEN coalesce(a.ie_natureza,'D')='P' THEN  (a.vl_imposto * (-1)) END ),
				sum(a.vl_base_calculo)
			into STRICT	vl_deducao_inss_w,
				vl_base_deducao_inss_w
			from 	pls_lote_ret_trib_val_dif	a,
				pls_lote_ret_trib_prest		b,
				pls_lote_retencao_trib		c
			where	b.nr_sequencia		= a.nr_seq_trib_prest
			and	b.nr_seq_lote		= c.nr_sequencia
			and	c.dt_mes_referencia between current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type and current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type
			and	b.cd_pessoa_fisica	= vet_prestadores.cd_pessoa_fisica;
			
			if (coalesce(vl_trib_inss_w,0) >= coalesce(vl_deducao_inss_w,0)) then
				begin
				vl_trib_inss_w	:= coalesce(vl_trib_inss_w,0) - coalesce(vl_deducao_inss_w,0);
				vl_base_inss_w	:= coalesce(vl_base_inss_w,0) - coalesce(vl_base_deducao_inss_w,0);
				ie_aplica_deducao_w:= false;
				cd_pessoa_fisica_old_w := vet_prestadores.cd_pessoa_fisica;
				end;
			end if;			
				
			end;
		end if;
		
		if (vet_prestadores.ie_deducao = 'N') then
			begin
			
			select 	max(nr_Sequencia),
				max(cd_externo_esocial)
			into STRICT	vet_prestadores.nr_seq_prestador,
				vet_prestadores.cd_externo_esocial
			from	pls_prestador
			where	cd_pessoa_fisica = vet_prestadores.cd_pessoa_fisica;
			
			select	max(b.nr_titulo) nr_titulo,
				max(b.dt_vencimento) dt_vencimento
			into STRICT	vet_prestadores.nr_titulo,
				vet_prestadores.dt_vencimento
			from	pls_pagamento_prestador	a,
				pls_pag_prest_vencimento b
			where	a.nr_sequencia		= b.nr_seq_pag_prestador
			and 	a.nr_seq_lote		= vet_prestadores.nr_seq_lote_pag;
			
			end;
		end if;
		

		/*
		select	nvl(sum(a.vl_tributo),0)
		into	vl_deducao_inss_w
		from 	pessoa_fisica_trib	a,
			tributo			b,
			pls_lote_pagamento	l
		where	a.cd_tributo		= b.cd_tributo
		and	b.ie_tipo_tributo	= 'INSS'
		and	a.nr_seq_lote_pgto	= l.nr_sequencia
		and	a.cd_pessoa_fisica	= vet_prestadores.cd_pessoa_fisica;
		--and 	decode(ie_referencia_tributo_w,'C',l.dt_mes_competencia,x.dt_vencimento) between dt_inicio_w and dt_fim_w;*/
		begin

			select	nvl(dt_liquidacao, decode(ie_referencia_pgto_w, 'C', vet_prestadores.dt_mes_competencia, vet_prestadores.dt_vencimento))
			into	dt_liquidacao_w
			from	titulo_pagar
			where 	nr_titulo = vet_prestadores.nr_titulo
			and		rownum = 1;

		exception
		when others then

			dt_liquidacao_w:= vet_prestadores.dt_vencimento;

			if	(ie_referencia_pgto_w = 'C') then

				dt_liquidacao_w:= vet_prestadores.dt_mes_competencia;

			end if;

		end;
		
		if	(nvl(nr_count_prest_w, 0) = 99999999) then
			begin
			
			select	esocial_lote_seq.nextval
			into	nr_Seq_new_lote_w
			from	dual;
			
			insert into esocial_lote (	cd_empresa,
							cd_estabelecimento,
							dt_atualizacao,
							dt_fim,
							dt_geracao,
							dt_geracao_xml,
							dt_inicio,
							dt_liberacao,
							ie_dados_compl,
							ie_dados_pagamento,
							ie_dados_prestador,
							nm_usuario,
							nr_sequencia)
							select	cd_empresa,
								cd_estabelecimento,
								dt_atualizacao,
								dt_fim,
								dt_geracao,
								dt_geracao_xml,
								dt_inicio,
								dt_liberacao,
								ie_dados_compl,
								ie_dados_pagamento,
								ie_dados_prestador,
								nm_usuario,
								nr_Seq_new_lote_w 
							from 	esocial_lote
							where nr_Sequencia = nr_seq_lote_w;
							
			commit;
			
			nr_count_prest_w:= 0;
			
			update	esocial_lote
			set	dt_geracao	= sysdate,
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_Seq_new_lote_w;
			
			nr_seq_lote_w:= nr_Seq_new_lote_w;
			
			commit;
			
			end;
		else
			nr_count_prest_w:= nr_count_prest_w + 1;
		end if;
		
		begin
		
		/*Realizado select para a busca da sequencia de pagamento de meses anteriores ou do proprio lote*/

		select	max(coalesce(nr_seq_pagamento, 0)) + 1
		into STRICT	nr_seq_pagamento_w
		from (	SELECT	max(coalesce(a.nr_seq_pagamento, 0)) nr_seq_pagamento
				from	esocial_dados_pagamento a,
					esocial_lote b,
					pls_prestador c
				where 	a.nr_seq_esocial_lote	= b.nr_sequencia
				and	a.nr_seq_prestador	= c.nr_sequencia
				and 	c.cd_pessoa_fisica 	= vet_prestadores.cd_pessoa_fisica
				and 	a.dt_competencia between pkg_date_utils.start_of(current_setting('gerar_esocial_dados_pck.dt_inicio_w')::esocial_lote.dt_inicio%type, 'MONTH', 0) and pkg_date_utils.end_of(current_setting('gerar_esocial_dados_pck.dt_fim_w')::esocial_lote.dt_fim%type, 'MONTH', 0)
				
union	all

				PERFORM	max(coalesce(a.nr_seq_pagamento, 0)) nr_seq_pagamento
				from	esocial_dados_pagamento a,
					esocial_lote b,
					pls_prestador c
				where 	a.nr_seq_esocial_lote	= b.nr_sequencia
				and	a.nr_seq_prestador	= c.nr_sequencia
				and 	c.cd_pessoa_fisica 	= vet_prestadores.cd_pessoa_fisica
				and 	a.nr_seq_esocial_lote 	= nr_seq_lote_w) alias10;
		
		exception
		when others then
			nr_seq_pagamento_w:= 1;
		end;		
		
		insert into esocial_dados_pagamento(	nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							cd_empresa,
							cd_retencao,
							dt_competencia,
							dt_pagamento,
							ie_tipo_operacao,
							nr_cadastro_colab,
							nr_lote_pagamento,
							nr_seq_esocial_lote,
							nr_seq_pagamento,
							vl_rendimento_bruto,
							vl_trib_inss,
							vl_base_inss,
							vl_deducao_inss,
							vl_trib_ir,
							vl_base_irf,
							nr_seq_prestador,
							cd_filial_colab)
					values (	nextval('esocial_dados_pagamento_seq'),
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							current_setting('gerar_esocial_dados_pck.cd_empresa_w')::esocial_lote.cd_empresa%type,
							coalesce(cd_retencao_ir_w, 588),
							vet_prestadores.dt_mes_competencia,
							dt_liquidacao_w,
							vet_prestadores.ie_tipo_operacao,
							vet_prestadores.cd_externo_esocial,
							vet_prestadores.nr_seq_lote_pag,
							nr_seq_lote_w,
							coalesce(nr_seq_pagamento_w, 1),
							vet_prestadores.vl_remuneracao,
							coalesce(vl_trib_inss_w,0),
							coalesce(vl_base_inss_w,0),
							coalesce(vl_deducao_inss_w,0),
							coalesce(vl_trib_ir_w,0),
							coalesce(vl_base_irf_w,0),
							vet_prestadores.nr_seq_prestador,
							current_setting('gerar_esocial_dados_pck.cd_filial_colab_pag_w')::esocial_dados_pagamento.cd_filial_colab%type);


		if (mod(qt_registros_w,1000) = 0) then
			commit;
		end if;
		
		if ( cd_pessoa_fisica_old_w <> vet_prestadores.cd_pessoa_fisica) then
			begin
			cd_pessoa_fisica_old_w:= vet_prestadores.cd_pessoa_fisica;
			ie_aplica_deducao_w:= true;
			end;
		end if;
		

		end;
	end loop;
	close c_prestador;

	commit;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_esocial_dados_pck.gerar_esocial_dados_pgto ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;
