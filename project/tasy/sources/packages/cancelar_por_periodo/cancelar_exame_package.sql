-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE cancelar_por_periodo.cancelar_exame (dt_inicial_p timestamp, dt_final_p timestamp, hr_inicial_p timestamp, hr_final_p timestamp, cd_agenda_p bigint, cd_dia_semana_p bigint, cd_motivo_p bigint, cd_pessoa_fisica_p text) AS $body$
DECLARE


dt_inicial_w timestamp;
dt_final_w timestamp;
hr_inicial_w timestamp;
hr_final_w timestamp;

ds_avisos_w text;
ds_avisos_temp_w varchar(4000);

dt_agenda_padrao_w varchar(20);
ie_dia_semana_agen_w smallint;
qt_registros_w integer;
dt_formatada_w varchar(255);

cd_estabelecimento_w integer;
nm_pessoa_fisica_w varchar(255);
cd_perfil_w integer;

ie_remover_lista_espera_w varchar(1);
ie_cancelar_com_atend_w varchar(1);
ie_todos_pac_espera_w varchar(1);
ie_cancelar_futuros varchar(1);
ie_status_lista_espera_w varchar(1);

C01 CURSOR FOR
  SELECT dt_agenda,
    hr_inicio,
    nr_atendimento,
    nr_sequencia,
    cd_agenda,
    cd_pessoa_fisica,
    nr_seq_lista
  from agenda_paciente
  where ie_status_agenda not in ('L', 'B', 'F', 'I', 'A', 'O', 'E', 'C')
  and cd_agenda = cd_agenda_p
  and ((cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '') or (nm_paciente IS NOT NULL AND nm_paciente::text <> ''))
  and dt_agenda between dt_inicial_w and dt_final_w
  order by dt_agenda;

BEGIN

  CALL cancelar_por_periodo.validar_data_hora(dt_inicial_p, dt_final_p, hr_inicial_p, hr_final_p);

  cd_estabelecimento_w := obter_estabelecimento_ativo;
  nm_pessoa_fisica_w := obter_usuario_ativo;
  cd_perfil_w := obter_perfil_ativo;

  Obter_Param_Usuario(820, 455, cd_perfil_w, nm_pessoa_fisica_w, cd_estabelecimento_w, ie_cancelar_com_atend_w);
  Obter_Param_Usuario(820, 61, cd_perfil_w, nm_pessoa_fisica_w, cd_estabelecimento_w, ie_remover_lista_espera_w);
  Obter_Param_Usuario(820, 111, cd_perfil_w, nm_pessoa_fisica_w, cd_estabelecimento_w, ie_todos_pac_espera_w);
  Obter_Param_Usuario(820, 249, cd_perfil_w, nm_pessoa_fisica_w, cd_estabelecimento_w, ie_cancelar_futuros);
  Obter_Param_Usuario(820, 427, cd_perfil_w, nm_pessoa_fisica_w, cd_estabelecimento_w, ie_status_lista_espera_w);
  dt_agenda_padrao_w := 'vazio';
  dt_inicial_w := trunc(coalesce(dt_inicial_p, clock_timestamp()));
  dt_final_w := fim_dia(coalesce(dt_final_p, to_date('9999', 'yyyy')));

  for c_01 in C01 loop

    if to_char(c_01.dt_agenda, 'dd/mm/yyyy') <> dt_agenda_padrao_w then

      dt_agenda_padrao_w := to_char(c_01.hr_inicio, 'dd/mm/yyyy');
      hr_inicial_w := to_date(dt_agenda_padrao_w || to_char(hr_inicial_p, 'HH24:mi') , 'dd/mm/yyyy HH24:mi');
      hr_final_w  := to_date(dt_agenda_padrao_w || to_char(hr_final_p, 'HH24:mi') , 'dd/mm/yyyy HH24:mi');
      ie_dia_semana_agen_w := Obter_Cod_Dia_Semana(c_01.dt_agenda);
    end if;

    if (c_01.hr_inicio between hr_inicial_w and hr_final_w) and (coalesce(cd_dia_semana_p::text, '') = '' or ie_dia_semana_agen_w = cd_dia_semana_p or (cd_dia_semana_p = 9 and ie_dia_semana_agen_w not in (1,7))) then

        dt_formatada_w := pkg_date_formaters.to_varchar(c_01.hr_inicio, 'short', cd_estabelecimento_w, nm_pessoa_fisica_w);

        if ie_cancelar_com_atend_w = 'N' and (c_01.nr_atendimento IS NOT NULL AND c_01.nr_atendimento::text <> '') then

          PERFORM set_config('cancelar_por_periodo.ds_texto_retorno_w', current_setting('cancelar_por_periodo.ds_texto_retorno_w')::text || dt_formatada_w || ' - ' || ' bloqueio parametro 455. procurara expressao depois' || chr(10), false);

        elsif (obter_agenda_regra_permissao(cd_pessoa_fisica_p, c_01.cd_agenda,'CO', cd_perfil_w) <> 'S' and
              obter_agenda_regra_permissao(cd_pessoa_fisica_p, c_01.cd_agenda, 'ST',cd_perfil_w) <> 'S') or (obter_agenda_regra_permissao(cd_pessoa_fisica_p, c_01.cd_agenda, 'C',cd_perfil_w) <> 'S') then

          PERFORM set_config('cancelar_por_periodo.ds_texto_retorno_w', current_setting('cancelar_por_periodo.ds_texto_retorno_w')::text || dt_formatada_w || ' - ' || ' bloqueio por permissao da agenda. procurara expressao depois' || chr(10), false);

        else
          if ie_remover_lista_espera_w = 'S' then
            select	count(*)
            into STRICT qt_registros_w
            from	agenda_lista_espera
            where	nr_seq_agenda = c_01.nr_sequencia;

            if qt_registros_w > 0 then
              CALL excluir_agenda_lista_espera(c_01.nr_sequencia);
            end if;
          end if;
          ds_avisos_temp_w := '';
          if ie_todos_pac_espera_w = 'S' and Obter_Se_Pac_Espera_Agenda(c_01.cd_agenda) = 'S' then
            ds_avisos_temp_w := ' - ' || wheb_mensagem_pck.get_texto(38607, null) || chr(10);
          elsif ie_todos_pac_espera_w = 'N' and Obter_Se_Pac_Espera_Hor_Agenda(c_01.cd_agenda, c_01.dt_agenda) = 'S' then
            ds_avisos_temp_w := ' - ' || wheb_mensagem_pck.get_texto(38607, null) || chr(10);
          end if;

          CALL Alterar_status_agenda(c_01.cd_agenda, c_01.nr_sequencia, 'C', cd_motivo_p, null, 'N', nm_pessoa_fisica_w, null);
          CALL cancelar_autor_conv_agenda(c_01.nr_sequencia, cd_estabelecimento_w, cd_perfil_w, nm_pessoa_fisica_w);

          if ie_cancelar_futuros = 'S' and obter_se_pac_agexame_futura(c_01.nr_sequencia) = 'S' then
            CALL Cancelar_AgeExame_Futura(c_01.cd_agenda, c_01.dt_agenda, c_01.cd_pessoa_fisica, cd_motivo_p, null, nm_pessoa_fisica_w);
          end if;
          if ie_status_lista_espera_w <> 'N' and ie_remover_lista_espera_w = 'N' and (c_01.nr_seq_lista IS NOT NULL AND c_01.nr_seq_lista::text <> '') then
            if ie_status_lista_espera_w = 'S' then
              ie_status_lista_espera_w := 'C';
            end if;
            CALL Cancelar_agenda_lista_espera(c_01.nr_seq_lista, nm_pessoa_fisica_w, ie_status_lista_espera_w);
          end if;
          if (ds_avisos_temp_w IS NOT NULL AND ds_avisos_temp_w::text <> '') then
            ds_avisos_w := ds_avisos_w || dt_formatada_w || chr(10) || ds_avisos_temp_w;
          end if;
          CALL cancelar_por_periodo.cancelar_integrada(c_01.nr_sequencia, 'E', nm_pessoa_fisica_w);
        end if;
    end if;

  end loop;
  if (ds_avisos_w IS NOT NULL AND ds_avisos_w::text <> '') then
    PERFORM set_config('cancelar_por_periodo.ds_texto_retorno_w', current_setting('cancelar_por_periodo.ds_texto_retorno_w')::text || chr(10) || 'Avisos:' || chr(10) || ds_avisos_w, false);
  end if;
end;


$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_por_periodo.cancelar_exame (dt_inicial_p timestamp, dt_final_p timestamp, hr_inicial_p timestamp, hr_final_p timestamp, cd_agenda_p bigint, cd_dia_semana_p bigint, cd_motivo_p bigint, cd_pessoa_fisica_p text) FROM PUBLIC;
