-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_consistir_diops_pck.pls_diops_consist_balancete ( nr_seq_periodo_p bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE

	
	cd_conta_contabil_w		conta_contabil.cd_conta_contabil%type;
	cd_classif_conta_sup_w		conta_contabil.cd_classif_superior%type;
	cd_empresa_ww			empresa.cd_empresa%type;
	cd_primeiro_digito_conta_w	varchar(255);
	cd_setimo_digito_conta_w	varchar(255);
	ie_debito_credito_w		ctb_grupo_conta.ie_debito_credito%type;
	ie_tipo_conta_w			conta_contabil.ie_tipo%type;
	ie_tipo_operadora_w		pls_outorgante.ie_tipo_outorgante%type;
	vl_credito_w			ctb_saldo.vl_saldo%type;
	vl_debito_w			ctb_saldo.vl_saldo%type;
	vl_saldo_w			ctb_saldo.vl_saldo%type;
	vl_saldo_ant_balancete_w	ctb_saldo.vl_saldo%type;
	vl_saldo_balancete_w		ctb_saldo.vl_saldo%type;
	vl_saldo_final_ativo_w		ctb_saldo.vl_saldo%type;
	vl_saldo_final_despesa_w	ctb_saldo.vl_saldo%type;
	vl_saldo_final_passivo_w	ctb_saldo.vl_saldo%type;
	vl_saldo_periodo_ant_w		ctb_saldo.vl_saldo%type;
	vl_saldo_final_receita_w	ctb_saldo.vl_saldo%type;
	ie_conta_redutora_w		diops_trans_conta_contab.ie_redutora%type;
	vl_saldo_conta_w		ctb_saldo.vl_saldo%type;
	qt_periodos_ant_w		smallint;

	c_conta_contabeis CURSOR FOR
		SELECT	'1' ie_tipo_balancete,
			'A' ie_tipo_grupo_conta,
			coalesce(b.vl_saldo_anterior,0) vl_saldo_anterior,
			coalesce(b.vl_saldo_final,0) vl_saldo_final,
			coalesce(b.vl_creditos,0) vl_credito,
			coalesce(b.vl_debitos,0) vl_debito,
			b.ds_conta,
			23 nr_quadro
		from 	diops_fin_mov_ativo	b,
			diops_periodo		a
		where	a.nr_sequencia	= b.nr_seq_periodo
		and	a.nr_sequencia	= nr_seq_periodo_p
		
union all

		SELECT	'2' ie_tipo_balancete,
			'P' ie_tipo_grupo_conta,
			coalesce(b.vl_saldo_anterior,0) vl_saldo_anterior,
			coalesce(b.vl_saldo_final,0) vl_saldo_final,
			coalesce(b.vl_creditos,0) vl_credito,
			coalesce(b.vl_debitos,0) vl_debito,
			b.ds_conta,
			24 nr_quadro
		from 	diops_fin_mov_passivo	b,
			diops_periodo		a
		where	a.nr_sequencia	= b.nr_seq_periodo
		and	a.nr_sequencia	= nr_seq_periodo_p
		
union all

		select	'3' ie_tipo_balancete,
			'C' ie_tipo_grupo_conta,
			coalesce(b.vl_saldo_anterior,0) vl_saldo_anterior,
			coalesce(b.vl_saldo_final,0) vl_saldo_final,
			coalesce(b.vl_creditos,0) vl_credito,
			coalesce(b.vl_debitos,0) vl_debito,
			b.ds_conta,
			25 nr_quadro
		from 	diops_fin_mov_receita	b,
			diops_periodo		a
		where	a.nr_sequencia	= b.nr_seq_periodo
		and	a.nr_sequencia	= nr_seq_periodo_p
		
union all

		select	'4' ie_tipo_balancete,
			'D' ie_tipo_grupo_conta,
			coalesce(b.vl_saldo_anterior,0) vl_saldo_anterior,
			coalesce(b.vl_saldo_final,0) vl_saldo_final,
			coalesce(b.vl_creditos,0) vl_credito,
			coalesce(b.vl_debitos,0) vl_debito,
			b.ds_conta,
			26 nr_quadro
		from 	diops_fin_mov_despesa	b,
			diops_periodo		a
		where	a.nr_sequencia	= b.nr_seq_periodo
		and	a.nr_sequencia	= nr_seq_periodo_p;
	
	vet_contas_contabeis_w		c_conta_contabeis%rowtype;
	
	c_contas_nove_digitos CURSOR FOR
		SELECT 	a.cd_conta_contabil
		from	conta_contabil 		a
		where	length(replace(a.cd_classificacao_atual,'.','')) <= 9
		and 	substr(a.cd_classificacao_atual,0,1) <> '7'
		and	substr(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type), 1, 1) = 'S'
		and	a.ie_diops <> 'S'
		and	a.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type;
	
	vet_contas_nove_digitos_w	c_contas_nove_digitos%rowtype;
	
	
BEGIN

	delete	
	from 	diops_periodo_inconsist a
	where	a.nr_seq_periodo	= nr_seq_periodo_p
	and	a.nr_seq_inconsistencia	in (49,50,51,52,53,55,56,57,58,59,60,89);
	
	commit;

	select 	max(a.ie_tipo_outorgante)
	into STRICT	ie_tipo_operadora_w
	from 	pls_outorgante a
	where	a.cd_estabelecimento = cd_estabelecimento_p;
	
	open c_contas_nove_digitos;
	loop
	fetch c_contas_nove_digitos into	
		vet_contas_nove_digitos_w;
	EXIT WHEN NOT FOUND; /* apply on c_contas_nove_digitos */
		begin
		-- Requirement 5.1: Check the accounting accounts with 9 or less digits that are not parameterized to integrate the DIOPS
		
		PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', vet_contas_nove_digitos_w.cd_conta_contabil, false);
		CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 49);
		
		end;
	end loop;
	close c_contas_nove_digitos;
	
	commit;
	
	select	count(1)
	into STRICT	qt_periodos_ant_w
	from	diops_periodo
	where 	dt_periodo_final < current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type
	and 	coalesce(ie_tipo_periodo_diops, 'X') = 'F'  LIMIT 1;
	
	open c_conta_contabeis;
	loop
	fetch c_conta_contabeis into	
		vet_contas_contabeis_w;
	EXIT WHEN NOT FOUND; /* apply on c_conta_contabeis */
		begin
		/* The board number is dynamically obtained from the cursor and assigned here.
		When adding an inconsistency to this cursor, pay attention if it won't negatively impact the call for the inconsistency verification of the other boards. */
		PERFORM set_config('pls_consistir_diops_pck.nr_quadro_w', vet_contas_contabeis_w.nr_quadro, false);
		
		select	coalesce(max(c.cd_conta_contabil),'0')
		into STRICT	cd_conta_contabil_w
		from	conta_contabil c
		where	c.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
		and	substr(obter_se_conta_vigente2(c.cd_conta_contabil, c.dt_inicio_vigencia, c.dt_fim_vigencia, current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type), 1, 1) = 'S'
		and	replace(c.cd_classificacao_atual,'.','') = vet_contas_contabeis_w.ds_conta;
		
		select	coalesce(max(ie_redutora), 'N')
		into STRICT	ie_conta_redutora_w
		from	diops_trans_conta_contab a,
			diops_trans_conta b,
			diops_transacao c
		where	a.nr_seq_trans_conta = b.nr_sequencia
		and	b.nr_seq_transacao = c.nr_sequencia
		and	a.cd_conta_contabil = cd_conta_contabil_w
		and	c.nr_sequencia = current_setting('pls_consistir_diops_pck.nr_seq_transacao_w')::diops_transacao.nr_sequencia%type;

		if (vet_contas_contabeis_w.ds_conta in ('1','2','3','4')) then	
			-- Requirement 5.2: Compare the DIOPS balance values with accounting 
			select	coalesce(sum(v.vl_saldo),0)
			into STRICT	vl_saldo_balancete_w
			from	ctb_balancete_v v,
				ctb_mes_ref r
			where	v.nr_seq_mes_ref = r.nr_sequencia
			and	v.cd_classificacao = vet_contas_contabeis_w.ds_conta
			and	trunc(r.dt_referencia,'month') = trunc(current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,'month')
			and	v.ie_normal_encerramento = 'N'
			and	(
					(
					exists (SELECT	1
						from	empresa z,
							estabelecimento y,
							diops_estab_adicional x
						where	x.cd_estabelecimento = v.cd_estabelecimento
						and	x.cd_estabelecimento = y.cd_estabelecimento
						and	y.cd_empresa = z.cd_empresa
						and	z.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
						
union all

						SELECT	1
						
						where	v.cd_estabelecimento = cd_estabelecimento_p)
					)
				
				or (
					exists (select	1
						from	empresa z,
							estabelecimento y,
							diops_estab_adicional x
						where	x.cd_estabelecimento = obter_estab_financeiro(v.cd_estabelecimento)
						and	x.cd_estabelecimento = y.cd_estabelecimento
						and	y.cd_empresa = z.cd_empresa
						and	z.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
						
union all

						select	1
						
						where	obter_estab_financeiro(v.cd_estabelecimento) = cd_estabelecimento_p)
					)
				);
			
			select	coalesce(sum(v.vl_saldo_ant),0)
			into STRICT	vl_saldo_ant_balancete_w
			from	ctb_balancete_v v,
				ctb_mes_ref r
			where	v.nr_seq_mes_ref = r.nr_sequencia
			and	v.cd_classificacao = vet_contas_contabeis_w.ds_conta
			and	trunc(r.dt_referencia,'month') = trunc(current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type,'month')
			and	v.ie_normal_encerramento = 'N'
			and	(
					(
					exists (SELECT	1
						from	empresa z,
							estabelecimento y,
							diops_estab_adicional x
						where	x.cd_estabelecimento = v.cd_estabelecimento
						and	x.cd_estabelecimento = y.cd_estabelecimento
						and	y.cd_empresa = z.cd_empresa
						and	z.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
						
union all

						SELECT	1
						
						where	v.cd_estabelecimento = cd_estabelecimento_p)
					)
				
				or (
					exists (select	1
						from	empresa z,
							estabelecimento y,
							diops_estab_adicional x
						where	x.cd_estabelecimento = obter_estab_financeiro(v.cd_estabelecimento)
						and	x.cd_estabelecimento = y.cd_estabelecimento
						and	y.cd_empresa = z.cd_empresa
						and	z.cd_empresa = current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
						
union all

						select	1
						
						where	obter_estab_financeiro(v.cd_estabelecimento) = cd_estabelecimento_p)
					)
				);		
			
			if (coalesce(vl_saldo_balancete_w,0) <> coalesce(vet_contas_contabeis_w.vl_saldo_final,0)) then
				PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
				PERFORM set_config('pls_consistir_diops_pck.ds_tipo_saldo_macro_w', wheb_mensagem_pck.get_texto(402580), false);
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 50);
			end if;

			if (coalesce(vl_saldo_ant_balancete_w,0) <> coalesce(vet_contas_contabeis_w.vl_saldo_anterior,0)) then
				PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
				PERFORM set_config('pls_consistir_diops_pck.ds_tipo_saldo_macro_w', wheb_mensagem_pck.get_texto(820747), false);
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 50);
			end if;
		end if;
		
		if (vet_contas_contabeis_w.ie_tipo_balancete = '1' and substr(vet_contas_contabeis_w.ds_conta,0,1) in ('1','2','3','4')) then	
			select 	coalesce(max(b.vl_saldo_final),0) vl_saldo
			into STRICT	vl_saldo_periodo_ant_w
			from 	diops_fin_mov_ativo	b,
				diops_periodo		a
			where	a.nr_sequencia = b.nr_seq_periodo
			and	b.ds_conta = vet_contas_contabeis_w.ds_conta
			and	a.dt_periodo_final between add_months(current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type,-3) and add_months(current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,-3)
			and 	coalesce(a.ie_tipo_periodo_diops, 'X') = 'F';
		end if;
		
		if (vet_contas_contabeis_w.ie_tipo_balancete = '2' and substr(vet_contas_contabeis_w.ds_conta,0,1) in ('1','2','3','4')) then
			select coalesce(max(b.vl_saldo_final),0) vl_saldo
			into STRICT	vl_saldo_periodo_ant_w
			from 	diops_fin_mov_passivo	b,
				diops_periodo		a
			where	a.nr_sequencia = b.nr_seq_periodo
			and	b.ds_conta = vet_contas_contabeis_w.ds_conta
			and	a.dt_periodo_final between add_months(current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type,-3) and add_months(current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,-3)
			and 	coalesce(a.ie_tipo_periodo_diops, 'X') = 'F';
		end if;
		
		if (vet_contas_contabeis_w.ie_tipo_balancete = '3' and substr(vet_contas_contabeis_w.ds_conta,0,1) in ('1','2','3','4')) then
			select 	coalesce(max(b.vl_saldo_final), vet_contas_contabeis_w.vl_saldo_anterior) vl_saldo
			into STRICT	vl_saldo_periodo_ant_w
			from 	diops_fin_mov_receita	b,
				diops_periodo		a
			where	a.nr_sequencia = b.nr_seq_periodo
			and	b.ds_conta = vet_contas_contabeis_w.ds_conta
			and	a.dt_periodo_final between add_months(current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type,-3) and add_months(current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,-3)
			and	pkg_date_utils.extract_field('YEAR', current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type) = pkg_date_utils.extract_field('YEAR', a.dt_periodo_final)
			and 	coalesce(a.ie_tipo_periodo_diops, 'X') = 'F';
		end if;
		
		if (vet_contas_contabeis_w.ie_tipo_balancete = '4' and substr(vet_contas_contabeis_w.ds_conta,0,1) in ('1','2','3','4')) then
			select 	coalesce(max(b.vl_saldo_final),vet_contas_contabeis_w.vl_saldo_anterior) vl_saldo
			into STRICT	vl_saldo_periodo_ant_w
			from 	diops_fin_mov_despesa	b,
				diops_periodo		a
			where	a.nr_sequencia = b.nr_seq_periodo
			and	b.ds_conta = vet_contas_contabeis_w.ds_conta
			and	a.dt_periodo_final between add_months(current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type,-3) and add_months(current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,-3)
			and	pkg_date_utils.extract_field('YEAR', current_setting('pls_consistir_diops_pck.dt_periodo_inicial_w')::diops_periodo.dt_periodo_inicial%type) = pkg_date_utils.extract_field('YEAR', a.dt_periodo_final)
			and 	coalesce(a.ie_tipo_periodo_diops, 'X') = 'F';
		end if;
		
		if (vl_saldo_periodo_ant_w <> vet_contas_contabeis_w.vl_saldo_anterior) and (qt_periodos_ant_w <> 0) then
			--Requirement 5.3: Check if the final balance from the last period is equal to the starting balance of the period being validated
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 51);
		end if;	
		
		cd_empresa_ww := obter_empresa_estab(cd_estabelecimento_p);

		select 	max(a.ie_debito_credito)
		into STRICT	ie_debito_credito_w
		from 	ctb_grupo_conta	a
		where 	a.ie_tipo 	= vet_contas_contabeis_w.ie_tipo_grupo_conta
		and	a.cd_empresa 	= cd_empresa_ww;
		
		if (ie_conta_redutora_w = 'S') then
			vl_saldo_conta_w := vet_contas_contabeis_w.vl_saldo_final * -1;
		else
			vl_saldo_conta_w := vet_contas_contabeis_w.vl_saldo_final;
		end if;

		if (ie_debito_credito_w = 'D') then
			vl_saldo_w := vet_contas_contabeis_w.vl_saldo_anterior + vet_contas_contabeis_w.vl_debito - vet_contas_contabeis_w.vl_credito;
			-- Requirement 5.6: Corcerning the negative or positive value of the balance
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			
			if (vet_contas_contabeis_w.ie_tipo_balancete = '1' and vl_saldo_conta_w < 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '2' and vl_saldo_conta_w > 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '3' and vl_saldo_conta_w > 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '4' and vl_saldo_conta_w < 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			end if;
			
		end if;

		if (ie_debito_credito_w = 'C') then
			vl_saldo_w := vet_contas_contabeis_w.vl_saldo_anterior - vet_contas_contabeis_w.vl_debito + vet_contas_contabeis_w.vl_credito;
			-- Requirement 5.6: Corcerning the negative or positive value of the balance
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);

			if (vet_contas_contabeis_w.ie_tipo_balancete = '1' and vl_saldo_conta_w > 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '2' and vl_saldo_conta_w < 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '3' and vl_saldo_conta_w < 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			elsif (vet_contas_contabeis_w.ie_tipo_balancete = '4' and vl_saldo_conta_w > 0) then
				CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 55);
			
			end if;
		end if;
		
		if (vl_saldo_w <> vet_contas_contabeis_w.vl_saldo_final) then	
			--Requirement 5.5:  Verify if the calculation of the balances matches the final balance.(Inconsistent account movement value)
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 53);
		end if;
		
		select 	substr(vet_contas_contabeis_w.ds_conta,0,1)
		into STRICT	cd_primeiro_digito_conta_w
		;
		
		select (substr(vet_contas_contabeis_w.ds_conta,7,1))
		into STRICT	cd_setimo_digito_conta_w
		;
		
		PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
		
		if (ie_tipo_operadora_w = 3 and cd_primeiro_digito_conta_w in ('3','4') and cd_setimo_digito_conta_w not in ('1','2','7')) then
			-- Requirement 5.7
			PERFORM set_config('pls_consistir_diops_pck.ds_possui_ato_macro_w', wheb_mensagem_pck.get_texto(820757), false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 56);
		end if;
		
		if (ie_tipo_operadora_w <> 3 and cd_primeiro_digito_conta_w in ('3','4') and cd_setimo_digito_conta_w <> '0') then
			-- Requirement 5.7
			PERFORM set_config('pls_consistir_diops_pck.ds_possui_ato_macro_w', wheb_mensagem_pck.get_texto(820758), false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 56);
		end if;
		
		if (vet_contas_contabeis_w.ds_conta = '1') then
			vl_saldo_final_ativo_w := vet_contas_contabeis_w.vl_saldo_final;
		end if;
		
		if (vet_contas_contabeis_w.ds_conta = '2') then
			vl_saldo_final_passivo_w := vet_contas_contabeis_w.vl_saldo_final;
		end if;
		
		if (vet_contas_contabeis_w.ds_conta = '3') then
			vl_saldo_final_receita_w := vet_contas_contabeis_w.vl_saldo_final;
		end if;
		
		if (vet_contas_contabeis_w.ds_conta = '4') then
			vl_saldo_final_despesa_w := vet_contas_contabeis_w.vl_saldo_final;
		end if;

		select 	max(coalesce(ctb_obter_classif_conta_sup(a.cd_classificacao,current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type,a.cd_empresa),'0')),
			max(ie_tipo)
		into STRICT	cd_classif_conta_sup_w,
			ie_tipo_conta_w
		from	conta_contabil a
		where	a.cd_conta_contabil = cd_conta_contabil_w;
		
		if (cd_classif_conta_sup_w = '0') and (ie_tipo_conta_w = 'A') then	
			-- Requirement 5.9
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 58);
		end if;

		if (length(cd_classif_conta_sup_w) < 9) and (ie_tipo_conta_w = 'A') then	
			-- Requirement 5.10
			select	max(a.cd_conta_contabil)
			into STRICT	current_setting('pls_consistir_diops_pck.cd_conta_superior_macro_w')::conta_contabil.cd_conta_contabil%type
			from	conta_contabil a
			where	a.cd_classificacao_atual	= cd_classif_conta_sup_w
			and	a.cd_empresa			= current_setting('pls_consistir_diops_pck.cd_empresa_w')::empresa.cd_empresa%type
			and	substr(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type), 1, 1) = 'S'
			and	current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type between coalesce(a.dt_inicio_vigencia,current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type) and coalesce(a.dt_fim_vigencia,current_setting('pls_consistir_diops_pck.dt_periodo_final_w')::diops_periodo.dt_periodo_final%type);

			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 59);
		end if;
		
		if ((cd_primeiro_digito_conta_w = '7') and (coalesce(vet_contas_contabeis_w.vl_saldo_final,0) <> 0)) then	
			-- Requirement 5.11
			PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
			CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 60);
		end if;
		
		end;
	
	end loop;
	close c_conta_contabeis;
						
	if (vl_saldo_final_ativo_w - vl_saldo_final_passivo_w <> vl_saldo_final_receita_w - vl_saldo_final_despesa_w) then
		-- Requirement 5.8
		PERFORM set_config('pls_consistir_diops_pck.cd_conta_macro_w', cd_conta_contabil_w, false);
		CALL pls_consistir_diops_pck.pls_gravar_consistencia(nr_seq_periodo_p, cd_estabelecimento_p, 57);
	end if;
	
	PERFORM set_config('pls_consistir_diops_pck.nr_quadro_w', 0, false);
	
	CALL pls_consistir_diops_pck.diops_totalizador_conta_ativo(nr_seq_periodo_p,cd_estabelecimento_p);
	CALL pls_consistir_diops_pck.diops_totalizador_conta_pass(nr_seq_periodo_p,cd_estabelecimento_p);
	CALL pls_consistir_diops_pck.diops_totalizador_conta_desp(nr_seq_periodo_p,cd_estabelecimento_p);
	CALL pls_consistir_diops_pck.diops_totalizador_conta_rec(nr_seq_periodo_p,cd_estabelecimento_p);
	
	commit;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_diops_pck.pls_diops_consist_balancete ( nr_seq_periodo_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;
