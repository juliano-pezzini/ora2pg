-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lanc_programado_pck.gerencia_valor_acumulado ( ie_tipo_acao_p text, nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_regra_lanc_p pls_pp_lanc_programado.nr_sequencia%type, nr_seq_regra_lanc_det_p pls_pp_lanc_prog_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_vencimento_p pls_pp_lanc_prog_regra.ie_vencimento_lvf%type, nr_seq_item_p INOUT pls_pp_item_lote_lp_v.nr_sequencia%type, vl_acumulado_p INOUT bigint, cd_centro_custo_p pls_pp_item_lote.cd_centro_custo%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_item_w		pls_util_cta_pck.t_number_table;
tb_seq_item_orig_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_w		pls_util_cta_pck.t_varchar2_table_5;

dt_inicio_w		timestamp;
dt_fim_w		timestamp;

c01 CURSOR(	nr_seq_item_pc			pls_pp_item_lote_lp_v.nr_sequencia%type,
		nr_seq_prestador_pc		pls_prestador.nr_sequencia%type,
		nr_seq_evento_pc		pls_evento.nr_sequencia%type,
		nr_seq_regra_lanc_pc		pls_pp_lanc_programado.nr_sequencia%type,
		nr_seq_regra_lanc_det_pc	pls_pp_lanc_prog_regra.nr_sequencia%type,
		ie_vencimento_pc		pls_pp_lanc_prog_regra.ie_vencimento_lvf%type,
		dt_inicio_pc			timestamp,
		dt_fim_pc			timestamp) FOR
	-- tudo o que não for nem ano e nem mês
	SELECT	nr_seq_item_pc nr_seq_item,
		a.nr_sequencia nr_seq_item_origem,
		'1' ie_tipo
	from	pls_pp_item_lote_lp_v a
	where 	ie_vencimento_pc = 'N'
	and	a.nr_seq_prestador = nr_seq_prestador_pc
	and	a.nr_seq_evento = nr_seq_evento_pc
	and	a.nr_seq_lanc_prog = nr_seq_regra_lanc_pc
	and	a.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_pc
	and	a.ie_cancelado = 'N'
	
union all

	-- tudo o que for por ano ou mês
	SELECT	nr_seq_item_pc nr_seq_item,
		a.nr_sequencia nr_seq_item_origem,
		'1' ie_tipo
	from	pls_pp_item_lote_lp_v a
	where 	ie_vencimento_pc != 'N'
	and	a.nr_seq_prestador = nr_seq_prestador_pc
	and	a.nr_seq_evento = nr_seq_evento_pc
	and	a.nr_seq_lanc_prog = nr_seq_regra_lanc_pc
	and	a.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_pc
	and	a.ie_cancelado = 'N'
	and	a.dt_item between dt_inicio_pc and dt_fim_pc;


BEGIN
-- se o vencimento dos valores for por mês
if (ie_vencimento_p = 'M') then
	dt_inicio_w := pls_util_pck.inicio_mes(pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w);
	dt_fim_w := pls_util_pck.fim_mes(pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w);

-- se o vencimento dos valores for por ano
elsif (ie_vencimento_p = 'A') then
	dt_inicio_w := pls_util_pck.inicio_ano(pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w);
	dt_fim_w := pls_util_pck.fim_ano(pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w);
else
	dt_inicio_w := null;
	dt_fim_w := null;
end if;

-- somente busca o valor caso ele ainda não exista
if (coalesce(vl_acumulado_p::text, '') = '') then

	-- somente valor faz select e retorna no parâmetro out
	-- demais situações alimentam a tabela PLS_PP_ITEM_LOTE_ORIGEM e retornam o valor no out
	-- se este select for alterado, favor revisar também o do cursor c01
	select	sum(vl_item)
	into STRICT	vl_acumulado_p
	from (
		-- tudo o que não for nem ano e nem mês
		SELECT	abs(a.vl_item) vl_item
		from	pls_pp_item_lote_lp_v a
		where 	ie_vencimento_p = 'N'
		and	a.nr_seq_prestador = nr_seq_prestador_p
		and	a.nr_seq_evento = nr_seq_evento_p
		and	a.nr_seq_lanc_prog = nr_seq_regra_lanc_p
		and	a.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_p
		and	a.ie_cancelado = 'N'
		
union all

		-- tudo o que for por ano ou mês
		SELECT	abs(a.vl_item) vl_item
		from	pls_pp_item_lote_lp_v a
		where 	ie_vencimento_p != 'N'
		and	a.nr_seq_prestador = nr_seq_prestador_p
		and	a.nr_seq_evento = nr_seq_evento_p
		and	a.nr_seq_lanc_prog = nr_seq_regra_lanc_p
		and	a.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_p
		and	a.ie_cancelado = 'N'
		and	a.dt_item between dt_inicio_w and dt_fim_w
		) alias5;

	-- tratamento para caso não tenha registro não pode retornar nulo
	vl_acumulado_p := coalesce(vl_acumulado_p, 0);
end if;

if (ie_tipo_acao_p = 'REGISTRAR_DADOS') then
	-- gera um item zerado
	nr_seq_item_p := pls_pp_lote_pagamento_pck.gera_pp_item_lote(	nr_seq_lote_p, '2', nr_seq_prestador_p, nr_seq_prest_origem_p, nr_seq_evento_p, pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w, nm_usuario_p, cd_centro_custo_p, nr_seq_item_p, nr_seq_regra_lanc_p, nr_seq_regra_lanc_det_p);

	-- percorre o cursor para inserir itens
	open c01(	nr_seq_item_p, nr_seq_prestador_p, nr_seq_evento_p,
			nr_seq_regra_lanc_p, nr_seq_regra_lanc_det_p, ie_vencimento_p,
			dt_inicio_w, dt_fim_w);
	loop
		fetch c01 bulk collect into 	tb_seq_item_w, tb_seq_item_orig_w,
						tb_ie_tipo_w
		limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_seq_item_w.count = 0;
		-- insere no banco
		SELECT * FROM pls_pp_lanc_programado_pck.inserir_valores_origem(	nr_seq_lote_p, tb_seq_item_w, tb_seq_item_orig_w, tb_ie_tipo_w) INTO STRICT _ora2pg_r;
 tb_seq_item_w := _ora2pg_r.tb_seq_item_p; tb_seq_item_orig_w := _ora2pg_r.tb_seq_item_orig_p; tb_ie_tipo_w := _ora2pg_r.tb_ie_tipo_p;
	end loop;
	close c01;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lanc_programado_pck.gerencia_valor_acumulado ( ie_tipo_acao_p text, nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_regra_lanc_p pls_pp_lanc_programado.nr_sequencia%type, nr_seq_regra_lanc_det_p pls_pp_lanc_prog_regra.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_vencimento_p pls_pp_lanc_prog_regra.ie_vencimento_lvf%type, nr_seq_item_p INOUT pls_pp_item_lote_lp_v.nr_sequencia%type, vl_acumulado_p INOUT bigint, cd_centro_custo_p pls_pp_item_lote.cd_centro_custo%type) FROM PUBLIC;
