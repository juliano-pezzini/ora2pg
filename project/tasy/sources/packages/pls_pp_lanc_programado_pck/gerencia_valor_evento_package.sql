-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lanc_programado_pck.gerencia_valor_evento ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_regra_lanc_p pls_pp_lanc_programado.nr_sequencia%type, nr_seq_regra_lanc_det_p pls_pp_lanc_prog_regra.nr_sequencia%type, ie_tipo_evento_filtro_p pls_pp_lanc_prog_regra.ie_tipo_evento%type, nr_seq_evento_filtro_p pls_evento.nr_sequencia%type, ie_natureza_filtro_p pls_evento.ie_natureza%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_item_p INOUT pls_pp_item_lote_lp_v.nr_sequencia%type, vl_total_evento_p INOUT bigint, cd_centro_custo_p pls_pp_item_lote.cd_centro_custo%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_item_w		pls_util_cta_pck.t_number_table;
tb_seq_item_orig_w	pls_util_cta_pck.t_number_table;
tb_ie_tipo_w		pls_util_cta_pck.t_varchar2_table_5;
tb_vl_item_w		pls_util_cta_pck.t_number_table;
ie_natureza_w		pls_evento.ie_natureza%type;

c01 CURSOR(	nr_seq_lote_pc			pls_pp_lote.nr_sequencia%type,
		nr_seq_item_pc			pls_pp_item_lote_lp_v.nr_sequencia%type,
		nr_seq_prestador_pc		pls_prestador.nr_sequencia%type,
		ie_tipo_evento_pc		pls_pp_lanc_prog_regra.ie_tipo_evento%type,
		nr_seq_evento_pc		pls_pp_lanc_prog_regra.nr_seq_evento%type,
		nr_seq_regra_lanc_det_pc	pls_pp_lanc_prog_regra.nr_sequencia%type,
		ie_natureza_pc			pls_evento.ie_natureza%type) FOR
	-- quando for selecionado todos os eventos
	SELECT	nr_seq_item_pc nr_seq_item,
		a.nr_sequencia nr_seq_item_origem,
		'2' ie_tipo,
		a.vl_item
	from	pls_pp_item_lote_lp_v a,
		pls_evento b
	where 	b.nr_sequencia		= a.nr_seq_evento
	and	a.nr_seq_lote 		= nr_seq_lote_pc
	and	a.nr_seq_prestador 	= nr_seq_prestador_pc
	and	ie_tipo_evento_pc 	= 'A'
	and (b.ie_natureza		= ie_natureza_pc or ie_natureza_pc = 'A')
	and	coalesce(nr_seq_evento_pc::text, '') = ''
	-- tira fora os eventos da exceção
	and	not exists (	SELECT	1
				from	pls_pp_lanc_prog_regra_ex b
				where	b.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_pc
				and	b.nr_seq_evento = a.nr_seq_evento)
	
union all

	-- filtra um evento específico
	-- esse não tem exceção, pois não faz sentido colocar exceção em
	select	nr_seq_item_pc nr_seq_item,
		a.nr_sequencia nr_seq_item_origem,
		'2' ie_tipo,
		a.vl_item
	from	pls_pp_item_lote_lp_v a,
		pls_evento b
	where 	b.nr_sequencia		= a.nr_seq_evento
	and	a.nr_seq_lote 		= nr_seq_lote_pc
	and	a.nr_seq_prestador 	= nr_seq_prestador_pc
	and	a.nr_seq_evento 	= nr_seq_evento_pc
	and (b.ie_natureza		= ie_natureza_pc or ie_natureza_pc = 'A')
	
union all

	-- filtra um tipo de evento específico
	select	nr_seq_item_pc nr_seq_item,
		a.nr_sequencia nr_seq_item_origem,
		'2' ie_tipo,
		a.vl_item
	from	pls_pp_item_lote_lp_v a,
		pls_evento b
	where 	b.nr_sequencia		= a.nr_seq_evento
	and	a.nr_seq_lote		= nr_seq_lote_pc
	and	a.nr_seq_prestador	= nr_seq_prestador_pc
	and	b.ie_tipo_evento	= ie_tipo_evento_pc
	and (b.ie_natureza		= ie_natureza_pc or ie_natureza_pc = 'A')
	and	coalesce(nr_seq_evento_pc::text, '') = ''
	-- tira fora os eventos da exceção
	and	not exists (	select	1
				from	pls_pp_lanc_prog_regra_ex b
				where	b.nr_seq_lanc_prog_regra = nr_seq_regra_lanc_det_pc
				and	b.nr_seq_evento = a.nr_seq_evento);

BEGIN
vl_total_evento_p := 0;
ie_natureza_w := 'A';

-- Ambos e desconto, impacta somente em provento
if (ie_tipo_evento_filtro_p = 'A') and (ie_natureza_filtro_p = 'D') then
	ie_natureza_w := 'P';
end if;

-- gera um novo item quando não existe um
if (coalesce(nr_seq_item_p::text, '') = '') then
	-- gera um item zerado
	nr_seq_item_p := pls_pp_lote_pagamento_pck.gera_pp_item_lote(	nr_seq_lote_p, '2', nr_seq_prestador_p, nr_seq_prest_origem_p, nr_seq_evento_p, pls_pp_lote_pagamento_pck.dt_referencia_lote_ini_w, nm_usuario_p, cd_centro_custo_p, nr_seq_item_p, nr_seq_regra_lanc_p, nr_seq_regra_lanc_det_p);
end if;

open c01(	nr_seq_lote_p, nr_seq_item_p, nr_seq_prestador_p,
		ie_tipo_evento_filtro_p, nr_seq_evento_filtro_p, nr_seq_regra_lanc_det_p, ie_natureza_w);
loop
	fetch c01 bulk collect into 	tb_seq_item_w, tb_seq_item_orig_w,
					tb_ie_tipo_w, tb_vl_item_w
	limit pls_util_pck.qt_registro_transacao_w;
	exit when tb_seq_item_w.count = 0;

	-- armazena o valor total dos eventos que a regra sinaliza para considerar
	for i in tb_seq_item_w.first..tb_seq_item_w.last loop
		vl_total_evento_p := vl_total_evento_p + coalesce(tb_vl_item_w(i), 0);
	end loop;

	-- envia os valores para o banco de dados
	SELECT * FROM pls_pp_lanc_programado_pck.inserir_valores_origem(	nr_seq_lote_p, tb_seq_item_w, tb_seq_item_orig_w, tb_ie_tipo_w) INTO STRICT _ora2pg_r;
 tb_seq_item_w := _ora2pg_r.tb_seq_item_p; tb_seq_item_orig_w := _ora2pg_r.tb_seq_item_orig_p; tb_ie_tipo_w := _ora2pg_r.tb_ie_tipo_p;
end loop;
close c01;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lanc_programado_pck.gerencia_valor_evento ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, nr_seq_evento_p pls_evento.nr_sequencia%type, nr_seq_regra_lanc_p pls_pp_lanc_programado.nr_sequencia%type, nr_seq_regra_lanc_det_p pls_pp_lanc_prog_regra.nr_sequencia%type, ie_tipo_evento_filtro_p pls_pp_lanc_prog_regra.ie_tipo_evento%type, nr_seq_evento_filtro_p pls_evento.nr_sequencia%type, ie_natureza_filtro_p pls_evento.ie_natureza%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_item_p INOUT pls_pp_item_lote_lp_v.nr_sequencia%type, vl_total_evento_p INOUT bigint, cd_centro_custo_p pls_pp_item_lote.cd_centro_custo%type) FROM PUBLIC;
