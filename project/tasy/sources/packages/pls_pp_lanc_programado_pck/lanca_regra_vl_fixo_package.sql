-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_pp_lanc_programado_pck.lanca_regra_vl_fixo ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, r_c_regra_p c_regra, r_c_det_regra_p c_det_regra, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_novo_item_w	pls_pp_item_lote_lp_v.nr_sequencia%type;
vl_acumulado_w		pls_pp_item_lote_lp_v.vl_liquido%type;
vl_diferenca_w		pls_pp_item_lote_lp_v.vl_liquido%type;
vl_total_evento_w	pls_pp_item_lote_lp_v.vl_liquido%type;
vl_lancar_evento_w	pls_pp_item_lote_lp_v.vl_liquido%type;


BEGIN
-- inicialização
nr_seq_novo_item_w := null;

-- obtém o valor acumulado na vl_acumulado_w
SELECT * FROM pls_pp_lanc_programado_pck.gerencia_valor_acumulado(	'SOMENTE_VALOR', nr_seq_lote_p, nr_seq_prestador_p, nr_seq_prest_origem_p, r_c_regra_p.nr_seq_evento, r_c_det_regra_p.nr_seq_lanc_prog, r_c_det_regra_p.nr_seq_regra_lanc_det, nm_usuario_p, r_c_det_regra_p.ie_vencimento_lvf, nr_seq_novo_item_w, vl_acumulado_w, r_c_regra_p.cd_centro_custo) INTO STRICT nr_seq_novo_item_w, vl_acumulado_w;

-- se todos os lançamentos já feitos são menores que o valor limite
if (vl_acumulado_w < r_c_det_regra_p.vl_total_lvf) then

	-- registra todos os valores que são considerados para o cálculo da base acumulada
	SELECT * FROM pls_pp_lanc_programado_pck.gerencia_valor_acumulado(	'REGISTRAR_DADOS', nr_seq_lote_p, nr_seq_prestador_p, nr_seq_prest_origem_p, r_c_regra_p.nr_seq_evento, r_c_det_regra_p.nr_seq_lanc_prog, r_c_det_regra_p.nr_seq_regra_lanc_det, nm_usuario_p, r_c_det_regra_p.ie_vencimento_lvf, nr_seq_novo_item_w, vl_acumulado_w, r_c_regra_p.cd_centro_custo) INTO STRICT nr_seq_novo_item_w, vl_acumulado_w;

	-- atribui para iniciar as comparações
	vl_lancar_evento_w := r_c_det_regra_p.vl_fixo_lvf;

	-- diferença de valores para utilizar na comparação antes de lançar o valor
	vl_diferenca_w := (r_c_det_regra_p.vl_total_lvf - vl_acumulado_w);

	-- tratamento para lançar somente o saldo que falta para atingir o limite da regra
	if (vl_lancar_evento_w > vl_diferenca_w) then
		vl_lancar_evento_w := vl_diferenca_w;
	end if;

	-- verifica se trata-se de evento de desconto, caso seja é necessário converter o valor para negativo
	if (r_c_regra_p.ie_natureza = 'D') then

		vl_lancar_evento_w := pls_util_pck.obter_valor_negativo(vl_lancar_evento_w);
	end if;

	-- faz o update no banco de dados
	update	pls_pp_item_lote_lp_v
	set	vl_item = vl_lancar_evento_w,
		vl_glosa = 0,
		vl_liquido = vl_lancar_evento_w
	where	nr_sequencia = nr_seq_novo_item_w;
	commit;
end if;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_lanc_programado_pck.lanca_regra_vl_fixo ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_prest_origem_p pls_prestador.nr_sequencia%type, r_c_regra_p c_regra, r_c_det_regra_p c_det_regra, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
