-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>INSERIR PROCEDIMENTO<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--



CREATE OR REPLACE PROCEDURE mprev_pop_alvo_pck.selecionar_proc ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) AS $body$
DECLARE


	c_regra_proc CURSOR(nr_seq_regra_cubo_pc	bigint) FOR
		SELECT	a.nr_sequencia,
		        a.cd_procedimento,
		        a.ie_origem_proced,
			a.qt_ocorrencia,
			a.ie_incluir,
			a.ie_busca
		from	mprev_regra_cubo_proc a
		where	a.nr_seq_regra_cubo	= nr_seq_regra_cubo_pc;

	c_regra_proc_adic CURSOR(nr_seq_proc_pc	bigint) FOR
		SELECT 	a.nr_sequencia,
			a.cd_procedimento,
			a.ie_origem_proced,
			a.qt_ocorrencia
		from 	hdm_regra_cubo_proc_adic a
		where 	a.nr_seq_regra_cubo_proc = nr_seq_proc_pc;
		
	regra_proc_w		regra_proc;
	regra_proc_adic_w	regra_proc;
	nr_seq_benef_w		bigint;
	cursor_w		sql_pck.t_cursor;

	-- Tabela para inserir a sequencia do beneficiario que retorna do select dinamico "ds_select_w".

	tb_pop_alvo_sel_proc_w	pls_util_cta_pck.t_number_table;

	
BEGIN

	/* Monta select dinamico*/


	/*ds_select_w	:=	' select	benef.nr_sequencia ' || enter_w ||
				' from		mprev_benef_cubo_ops benef, ' || enter_w ||
				'  		mprev_conta_proc_cubo_ops x, ' || enter_w ||
				'		mprev_conta_cubo_ops y ' || enter_w ||
				' where 	1 = 1 ';*/


	if (nr_seq_regra_cubo_p IS NOT NULL AND nr_seq_regra_cubo_p::text <> '')then
		for r_c_regra_proc in c_regra_proc(nr_seq_regra_cubo_p) loop
			PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', null, false);
			regra_proc_w.nr_sequencia	:= r_c_regra_proc.nr_sequencia;
			regra_proc_w.cd_procedimento	:= r_c_regra_proc.cd_procedimento;
			regra_proc_w.ie_origem_proced	:= r_c_regra_proc.ie_origem_proced;
			regra_proc_w.qt_ocorrencia	:= r_c_regra_proc.qt_ocorrencia;
			regra_proc_w.ie_busca 		:= r_c_regra_proc.ie_busca;
			regra_proc_w.ie_incluir		:= r_c_regra_proc.ie_incluir;

			if (regra_proc_w.ie_busca = 'CO') then
				PERFORM set_config('mprev_pop_alvo_pck.ds_select_w', ' select	benef.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' from		mprev_benef_cubo_ops benef, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							'  		mprev_conta_proc_cubo_ops x, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							'		mprev_conta_cubo_ops y ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' where 	x.nr_seq_conta_cubo_ops = y.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' and		benef.nr_sequencia = y.nr_seq_benef_cubo ', false);	
			elsif (regra_proc_w.ie_busca = 'AO') then
				PERFORM set_config('mprev_pop_alvo_pck.ds_select_w', ' select	benef.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' from		mprev_benef_cubo_ops benef, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							'  		mprev_guia_proc_cubo_ops x, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							'		mprev_guia_plano_cubo_ops y ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' where 	x.nr_seq_guia_cubo = y.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
							' and		benef.nr_sequencia = y.nr_seq_benef_cubo ', false);			
			end if;

			PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', mprev_pop_alvo_pck.obter_restricao_proc(regra_proc_w) ||' --'|| regra_proc_w.cd_procedimento, false);

			PERFORM set_config('mprev_pop_alvo_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_pck.ds_select_w')::varchar(2000) ||current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type|| current_setting('mprev_pop_alvo_pck.ds_restricao_w')::varchar(4000), false);			
			
			for r_c_regra_proc_adic in c_regra_proc_adic(r_c_regra_proc.nr_sequencia) loop
				begin				
				--regra_proc_w.nr_sequencia	:= r_c_regra_proc_adic.nr_sequencia;

				regra_proc_adic_w.cd_procedimento	:= r_c_regra_proc_adic.cd_procedimento;
				regra_proc_adic_w.ie_origem_proced	:= r_c_regra_proc_adic.ie_origem_proced;
				regra_proc_adic_w.qt_ocorrencia		:= r_c_regra_proc_adic.qt_ocorrencia;
				
				PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', mprev_pop_alvo_pck.obter_restricao_proc(regra_proc_adic_w) ||'  --'|| regra_proc_adic_w.cd_procedimento, false);
				
				PERFORM set_config('mprev_pop_alvo_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_pck.ds_select_comp_w')::varchar(4000) ||current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type|| 'intersect' ||current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type||  current_setting('mprev_pop_alvo_pck.ds_select_w')::varchar(2000) ||current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type|| current_setting('mprev_pop_alvo_pck.ds_restricao_w')::varchar(4000), false);
				
				end;
			end loop;
			
			current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind := sql_pck.executa_sql_cursor(current_setting('mprev_pop_alvo_pck.ds_select_comp_w')::varchar(4000), current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind);
			
			loop

				tb_pop_alvo_sel_proc_w.delete;

				fetch	cursor_w bulk collect
				into	tb_pop_alvo_sel_proc_w
				limit	current_setting('mprev_pop_alvo_pck.qt_reg_commit_w')::integer;

				exit when tb_pop_alvo_sel_proc_w.count = 0;

				-- Incluir as pessoas na selecao

				forall i in tb_pop_alvo_sel_proc_w.first .. tb_pop_alvo_sel_proc_w.last
					insert into mprev_pop_alvo_selecao(nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_populacao_alvo, nr_seq_benef_cubo, ie_selecionar,
						nm_tabela_regra_cubo, nr_seq_tabela_regra_cubo)
					values (nextval('mprev_pop_alvo_selecao_seq'), nm_usuario_p, clock_timestamp(),
						nr_seq_populacao_p, tb_pop_alvo_sel_proc_w(i),
						regra_proc_w.ie_incluir, 'MPREV_REGRA_CUBO_PROC', 1);
				commit;
			end loop;
			close cursor_w;
		end loop;
		commit;
	end if;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_pop_alvo_pck.selecionar_proc ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) FROM PUBLIC;
