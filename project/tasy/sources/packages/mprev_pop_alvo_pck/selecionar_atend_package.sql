-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>INSERIR ATENDIMENTO<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--



CREATE OR REPLACE PROCEDURE mprev_pop_alvo_pck.selecionar_atend ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) AS $body$
DECLARE


	c_regra_atend CURSOR(nr_seq_regra_cubo_pc	bigint, ie_busca_pc  text) FOR
		SELECT	a.nr_sequencia,
		        a.qt_ocorrencia_minima,
		        a.qt_ocorrencia_maxima,
			a.ie_tipo_guia,
			a.nr_seq_tipo_atendimento,
		        a.ie_carater_internacao,
		        a.nr_seq_clinica,
		        a.cd_especialidade,
			a.nr_seq_prestador_exec,
			a.cd_medico_executor,
			a.cd_medico_solicitante,
			a.ie_incluir,
			a.ie_busca
		from	mprev_regra_cubo_atend a
		where	a.nr_seq_regra_cubo	= nr_seq_regra_cubo_pc
		and     a.ie_busca = ie_busca_pc;

	regra_atend_w	regra_atend;
	nr_seq_benef_w	bigint;
	cursor_w	sql_pck.t_cursor;

	-- Tabela para inserir a sequencia do beneficiario que retorna do select dinamico "ds_select_w".

	tb_pop_alvo_sel_atend_w	pls_util_cta_pck.t_number_table;

	
BEGIN

	update	mprev_populacao_alvo
	set	dt_inicio_filtro_atend	= clock_timestamp()
	where	nr_sequencia	= nr_seq_populacao_p;

	if (nr_seq_regra_cubo_p IS NOT NULL AND nr_seq_regra_cubo_p::text <> '')then

		/* Monta select dinamico */


		/*  Conta medica OPS */


		PERFORM set_config('mprev_pop_alvo_pck.ds_select_w', ' select	benef.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' from		mprev_benef_cubo_ops benef, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' 		mprev_conta_cubo_ops conta ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' where		conta.nr_seq_benef_cubo = benef.nr_sequencia ', false);

		for r_c_regra_atend in c_regra_atend(nr_seq_regra_cubo_p, 'CO') loop

			regra_atend_w.qt_ocorrencia_minima	:= coalesce(r_c_regra_atend.qt_ocorrencia_minima,0);
			regra_atend_w.qt_ocorrencia_maxima	:= coalesce(r_c_regra_atend.qt_ocorrencia_maxima,9999999999);
			regra_atend_w.ie_tipo_guia		:= r_c_regra_atend.ie_tipo_guia;
			regra_atend_w.nr_seq_tipo_atendimento	:= r_c_regra_atend.nr_seq_tipo_atendimento;
			regra_atend_w.ie_carater_internacao	:= r_c_regra_atend.ie_carater_internacao;
			regra_atend_w.nr_seq_clinica		:= r_c_regra_atend.nr_seq_clinica;
			regra_atend_w.cd_especialidade		:= r_c_regra_atend.cd_especialidade;
			regra_atend_w.nr_seq_prestador_exec	:= r_c_regra_atend.nr_seq_prestador_exec;
			regra_atend_w.cd_medico_executor	:= r_c_regra_atend.cd_medico_executor;
			regra_atend_w.cd_medico_solicitante	:= r_c_regra_atend.cd_medico_solicitante;
			regra_atend_w.ie_incluir		:= r_c_regra_atend.ie_incluir;
			regra_atend_w.ie_busca			:= r_c_regra_atend.ie_busca;

			PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', mprev_pop_alvo_pck.obter_restricao_atend(regra_atend_w), false);

			PERFORM set_config('mprev_pop_alvo_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_pck.ds_select_w')::varchar(2000) || current_setting('mprev_pop_alvo_pck.ds_restricao_w')::varchar(4000), false);

			current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind := sql_pck.executa_sql_cursor(current_setting('mprev_pop_alvo_pck.ds_select_comp_w')::varchar(4000), current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind);

			loop

				tb_pop_alvo_sel_atend_w.delete;

				fetch	cursor_w bulk collect
				into	tb_pop_alvo_sel_atend_w
				limit	current_setting('mprev_pop_alvo_pck.qt_reg_commit_w')::integer;

				exit when tb_pop_alvo_sel_atend_w.count = 0;

				-- Incluir as pessoas na selecao

				forall i in tb_pop_alvo_sel_atend_w.first .. tb_pop_alvo_sel_atend_w.last
					insert into mprev_pop_alvo_selecao(nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_populacao_alvo, nr_seq_benef_cubo, ie_selecionar,
						nm_tabela_regra_cubo, nr_seq_tabela_regra_cubo)
					values (nextval('mprev_pop_alvo_selecao_seq'), nm_usuario_p, clock_timestamp(),
						nr_seq_populacao_p, tb_pop_alvo_sel_atend_w(i),
						regra_atend_w.ie_incluir, 'MPREV_REGRA_CUBO_ATEND', 3);
				commit;
			end loop;
			close cursor_w;
		end loop;

		/* Monta select dinamico */


		/*  Autorizacao OPS */


		PERFORM set_config('mprev_pop_alvo_pck.ds_select_w', ' select	benef.nr_sequencia 				' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' from		mprev_benef_cubo_ops benef, 			' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' 		mprev_guia_plano_cubo_ops conta			' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
					' where		conta.nr_seq_benef_cubo = benef.nr_sequencia	', false);

		for r_c_regra_atend in c_regra_atend(nr_seq_regra_cubo_p, 'AO') loop

			regra_atend_w.qt_ocorrencia_minima	:= coalesce(r_c_regra_atend.qt_ocorrencia_minima,0);
			regra_atend_w.qt_ocorrencia_maxima	:= coalesce(r_c_regra_atend.qt_ocorrencia_maxima,9999999999);
			regra_atend_w.ie_tipo_guia		:= r_c_regra_atend.ie_tipo_guia;
			regra_atend_w.nr_seq_tipo_atendimento	:= r_c_regra_atend.nr_seq_tipo_atendimento;
			regra_atend_w.ie_carater_internacao	:= r_c_regra_atend.ie_carater_internacao;
			regra_atend_w.nr_seq_clinica		:= r_c_regra_atend.nr_seq_clinica;
			regra_atend_w.cd_especialidade		:= r_c_regra_atend.cd_especialidade;
			regra_atend_w.nr_seq_prestador_exec	:= r_c_regra_atend.nr_seq_prestador_exec;
			regra_atend_w.cd_medico_executor	:= r_c_regra_atend.cd_medico_executor;
			regra_atend_w.cd_medico_solicitante	:= r_c_regra_atend.cd_medico_solicitante;
			regra_atend_w.ie_incluir		:= r_c_regra_atend.ie_incluir;
			regra_atend_w.ie_busca			:= r_c_regra_atend.ie_busca;

			PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', mprev_pop_alvo_pck.obter_restricao_atend(regra_atend_w), false);

			PERFORM set_config('mprev_pop_alvo_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_pck.ds_select_w')::varchar(2000) || current_setting('mprev_pop_alvo_pck.ds_restricao_w')::varchar(4000), false);

			current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind := sql_pck.executa_sql_cursor(current_setting('mprev_pop_alvo_pck.ds_select_comp_w')::varchar(4000), current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind);

			loop

				tb_pop_alvo_sel_atend_w.delete;

				fetch	cursor_w bulk collect
				into	tb_pop_alvo_sel_atend_w
				limit	current_setting('mprev_pop_alvo_pck.qt_reg_commit_w')::integer;

				exit when tb_pop_alvo_sel_atend_w.count = 0;

				-- Incluir as pessoas na selecao

				forall i in tb_pop_alvo_sel_atend_w.first .. tb_pop_alvo_sel_atend_w.last
					insert into mprev_pop_alvo_selecao(nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_populacao_alvo, nr_seq_benef_cubo, ie_selecionar,
						nm_tabela_regra_cubo, nr_seq_tabela_regra_cubo)
					values (nextval('mprev_pop_alvo_selecao_seq'), nm_usuario_p, clock_timestamp(),
						nr_seq_populacao_p, tb_pop_alvo_sel_atend_w(i),
						regra_atend_w.ie_incluir, 'MPREV_REGRA_CUBO_ATEND', 3);

				commit;
			end loop;
			close cursor_w;
		end loop;


		commit;
	end if;

	update	mprev_populacao_alvo
	set	dt_fim_filtro_atend	= clock_timestamp()
	where	nr_sequencia	= nr_seq_populacao_p;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_pop_alvo_pck.selecionar_atend ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) FROM PUBLIC;
