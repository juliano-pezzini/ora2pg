-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



	-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>INSERIR PESSOAS<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--



CREATE OR REPLACE PROCEDURE mprev_pop_alvo_pck.selecionar_pessoa ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) AS $body$
DECLARE


	c_regra_pessoa CURSOR(nr_seq_regra_cubo_pc	bigint) FOR
		SELECT	a.nr_sequencia,
		        a.ie_sexo,
		        a.qt_idade_minima,
		        a.qt_idade_maxima,
		        a.ie_participante,
		        a.ie_grupo_controle,
			a.ie_incluir,
				a.nr_seq_parentesco,
				a.nr_seq_classif_beneficiario
		from	mprev_regra_cubo_pessoa a
		where	a.nr_seq_regra_cubo	= nr_seq_regra_cubo_pc;

	regra_pessoa_w			regra_pessoa;
	nr_seq_benef_w			bigint;
	cursor_w			sql_pck.t_cursor;

	-- Tabela para inserir a sequencia do beneficiario que retorna do select dinamico "ds_select_w".

	tb_pop_alvo_sel_pessoa_w	pls_util_cta_pck.t_number_table;

	
BEGIN

	update	mprev_populacao_alvo
	set	dt_inicio_filtro_pessoa	= clock_timestamp()
	where	nr_sequencia	= nr_seq_populacao_p;

	/* Montar select dinamico e criar pessoas que possuem beneficiarios */


	PERFORM set_config('mprev_pop_alvo_pck.ds_select_w', ' select	benef.nr_sequencia ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
				' from		mprev_benef_cubo_ops benef, ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
				' 		mprev_pessoa_cubo_ops pessoa ' || current_setting('mprev_pop_alvo_pck.enter_w')::pls_util_pck.enter_w%type ||
				' where 	benef.nr_seq_pessoa_cubo = pessoa.nr_sequencia ', false);

	if (nr_seq_regra_cubo_p IS NOT NULL AND nr_seq_regra_cubo_p::text <> '')then
		for r_c_regra_pessoa in c_regra_pessoa(nr_seq_regra_cubo_p) loop
			regra_pessoa_w.ie_sexo		        := r_c_regra_pessoa.ie_sexo;
			regra_pessoa_w.qt_idade_minima          := r_c_regra_pessoa.qt_idade_minima;
			regra_pessoa_w.qt_idade_maxima          := r_c_regra_pessoa.qt_idade_maxima;
			regra_pessoa_w.ie_participante          := r_c_regra_pessoa.ie_participante;
			regra_pessoa_w.ie_grupo_controle	:= r_c_regra_pessoa.ie_grupo_controle;
			regra_pessoa_w.ie_incluir		:= r_c_regra_pessoa.ie_incluir;
			regra_pessoa_w.nr_seq_parentesco		:= r_c_regra_pessoa.nr_seq_parentesco;
			regra_pessoa_w.nr_seq_classif_beneficiario		:= r_c_regra_pessoa.nr_seq_classif_beneficiario;

			PERFORM set_config('mprev_pop_alvo_pck.ds_restricao_w', mprev_pop_alvo_pck.obter_restricao_pessoa(regra_pessoa_w), false);

			PERFORM set_config('mprev_pop_alvo_pck.ds_select_comp_w', current_setting('mprev_pop_alvo_pck.ds_select_w')::varchar(2000) || current_setting('mprev_pop_alvo_pck.ds_restricao_w')::varchar(4000) || ' group by benef.nr_sequencia ', false);

			current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind := sql_pck.executa_sql_cursor(current_setting('mprev_pop_alvo_pck.ds_select_comp_w')::varchar(4000), current_setting('mprev_pop_alvo_pck.bind_sql_w')::sql_pck.t_dado_bind);

			loop

				tb_pop_alvo_sel_pessoa_w.delete;

				fetch	cursor_w bulk collect
				into	tb_pop_alvo_sel_pessoa_w
				limit	current_setting('mprev_pop_alvo_pck.qt_reg_commit_w')::integer;

				exit when tb_pop_alvo_sel_pessoa_w.count = 0;

				-- Incluir as pessoas na selecao

				forall i in tb_pop_alvo_sel_pessoa_w.first .. tb_pop_alvo_sel_pessoa_w.last
					insert into mprev_pop_alvo_selecao(nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_populacao_alvo, nr_seq_benef_cubo, ie_selecionar,
						nm_tabela_regra_cubo, nr_seq_tabela_regra_cubo)
					values (nextval('mprev_pop_alvo_selecao_seq'), nm_usuario_p, clock_timestamp(),
						nr_seq_populacao_p, tb_pop_alvo_sel_pessoa_w(i),
						regra_pessoa_w.ie_incluir, 'MPREV_REGRA_CUBO_PESSOA', 7);
				commit;
			end loop;
			close cursor_w;
		end loop;
		commit;



	end if;

	update	mprev_populacao_alvo
	set	dt_fim_filtro_pessoa	= clock_timestamp()
	where	nr_sequencia	= nr_seq_populacao_p;

	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_pop_alvo_pck.selecionar_pessoa ( nr_seq_regra_cubo_p bigint, nr_seq_populacao_p bigint, nm_usuario_p text) FROM PUBLIC;
