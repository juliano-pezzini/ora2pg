-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE hpms_proposal_request_pck.validate_proposal ( nr_seq_prop_online_p pls_proposta_online.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:

validate proposal before finalize
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ x] Outros: HTML5
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

qt_nao_vinculado_w	smallint;
qt_inconsistencia_w	smallint;
nr_seq_plano_w		pls_proposta_online.nr_seq_plano%type;
nr_contrato_mesmo_plano_w pls_contrato.nr_contrato%type;
nr_protocolo_ans_w	pls_plano.nr_protocolo_ans%type;
vl_titulos_inadimp_w	bigint;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_pessoa_fisica,
		b.nr_cpf
	from	pls_proposta_benef_online a,
		pessoa_fisica b
	where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	nr_seq_prop_online = nr_seq_prop_online_p;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_solic_prop_validacao
	where	ie_situacao = 'A';

C03 CURSOR(cd_pessoa_fisica_pc pessoa_fisica.cd_pessoa_fisica%type, nr_cpf_pc pessoa_fisica.nr_cpf%type) FOR
	SELECT	p.cd_pessoa_fisica
	from	pls_contrato c,
		pls_contrato_pagador p
	where	p.nr_seq_contrato = c.nr_sequencia
	and	c.cd_pf_estipulante = cd_pessoa_fisica_pc
	
union all

	SELECT	p.cd_pessoa_fisica
	from	pls_contrato c,
		pls_contrato_pagador p
	where	p.nr_seq_contrato = c.nr_sequencia
	and exists (select 	1
		    from 	pessoa_fisica x
		    where 	c.cd_pf_estipulante = x.cd_pessoa_fisica
		    and   	x.nr_cpf = nr_cpf_pc);

C04 CURSOR(cd_pessoa_fisica_pc pessoa_fisica.cd_pessoa_fisica%type, nr_cpf_pc pessoa_fisica.nr_cpf%type) FOR
	SELECT	b.cd_pessoa_fisica
	from	pls_segurado a,
		pls_contrato_pagador b
	where	a.nr_seq_pagador = b.nr_sequencia
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_pc
	
union all

	SELECT	b.cd_pessoa_fisica
	from	pls_segurado a,
		pls_contrato_pagador b
	where	a.nr_seq_pagador = b.nr_sequencia
	and exists (	select	1
			from	pessoa_fisica x
			where	x.cd_pessoa_fisica = a.cd_pessoa_fisica
			and	x.nr_cpf = nr_cpf_pc);

BEGIN
	CALL CALL CALL CALL CALL hpms_proposal_request_pck.carregar_parametros(cd_estabelecimento_p);
	
	select	count(1)
	into STRICT	qt_nao_vinculado_w
	from	pls_proposta_benef_online
	where	nr_seq_prop_online = nr_seq_prop_online_p
	and	coalesce(cd_pessoa_fisica::text, '') = '';
	
	if (qt_nao_vinculado_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1116617);
	end if;
	
	select	nr_seq_plano
	into STRICT	nr_seq_plano_w
	from	pls_proposta_online
	where	nr_sequencia = nr_seq_prop_online_p;
	
	delete FROM pls_proposta_on_inconsist where (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

	for c01_w in C01 loop
		begin
			for c02_w in C02 loop
			begin
				if (c02_w.nr_sequencia = 1) then -- Pessoa fisica possui beneficiario ativo com o mesmo registro de produto
					begin
						select	nr_protocolo_ans
						into STRICT	nr_protocolo_ans_w
						from	pls_plano
						where	nr_sequencia = nr_seq_plano_w;
					exception
					when others then
						nr_protocolo_ans_w	:= null;
					end;
					
					select	max(c.nr_contrato)
					into STRICT	nr_contrato_mesmo_plano_w
					from	pls_contrato	c,
						pls_segurado	b,
						pls_plano	a
					where	a.nr_sequencia	= b.nr_seq_plano
					and	c.nr_sequencia		= b.nr_seq_contrato
					and	b.cd_pessoa_fisica	= c01_w.cd_pessoa_fisica
					and	trim(both a.nr_protocolo_ans) = trim(both nr_protocolo_ans_w)
					and (coalesce(b.dt_rescisao::text, '') = '' or b.dt_rescisao	> clock_timestamp())
					and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '');

					if (nr_contrato_mesmo_plano_w IS NOT NULL AND nr_contrato_mesmo_plano_w::text <> '') then
						CALL hpms_proposal_request_pck.insert_inconsistency(nr_seq_prop_online_p, c01_w.nr_sequencia, c02_w.nr_sequencia, nm_usuario_p);
					end if;
				elsif (c02_w.nr_Sequencia = 2) then --Pessoa fisica inadimplente (Pagador)
					vl_titulos_inadimp_w := pls_obter_debitos_pf(c01_w.cd_pessoa_fisica, 'COD', 'P', current_setting('hpms_proposal_request_pck.qt_dias_inadimplencia_w')::pls_param_proposta_online.qt_dias_inadimplencia%type);

					if (vl_titulos_inadimp_w = 0) then
						vl_titulos_inadimp_w := pls_obter_debitos_pf(c01_w.cd_pessoa_fisica, 'CPF', 'P', current_setting('hpms_proposal_request_pck.qt_dias_inadimplencia_w')::pls_param_proposta_online.qt_dias_inadimplencia%type);
					end if;

					if (vl_titulos_inadimp_w > 0) then
						CALL hpms_proposal_request_pck.insert_inconsistency(nr_seq_prop_online_p, c01_w.nr_sequencia, c02_w.nr_sequencia, nm_usuario_p);
					end if;
				
				elsif (c02_w.nr_Sequencia = 3) then --Pessoa fisica com estipulante inadimplente
					vl_titulos_inadimp_w := 0;

					for c03_w in C03(c01_w.cd_pessoa_fisica, c01_w.nr_cpf) loop
					begin
						vl_titulos_inadimp_w := vl_titulos_inadimp_w + pls_obter_debitos_pf(c03_w.cd_pessoa_fisica, 'COD', 'P', current_setting('hpms_proposal_request_pck.qt_dias_inadimplencia_w')::pls_param_proposta_online.qt_dias_inadimplencia%type);
					end;
					end loop;

					if (vl_titulos_inadimp_w > 0) then
						CALL hpms_proposal_request_pck.insert_inconsistency(nr_seq_prop_online_p, c01_w.nr_sequencia, c02_w.nr_sequencia, nm_usuario_p);
					end if;

				elsif (c02_w.nr_Sequencia = 4) then --Pessoa fisica com beneficiario inadimplente
					vl_titulos_inadimp_w := 0;

					for c04_w in C04(c01_w.cd_pessoa_fisica, c01_w.nr_cpf) loop
					begin
						vl_titulos_inadimp_w := vl_titulos_inadimp_w + pls_obter_debitos_pf(c04_w.cd_pessoa_fisica, 'COD', 'P', current_setting('hpms_proposal_request_pck.qt_dias_inadimplencia_w')::pls_param_proposta_online.qt_dias_inadimplencia%type);
					end;
					end loop;

					if (vl_titulos_inadimp_w > 0) then
						CALL hpms_proposal_request_pck.insert_inconsistency(nr_seq_prop_online_p, c01_w.nr_sequencia, c02_w.nr_sequencia, nm_usuario_p);
					end if;
				end if;
			end;
			end loop;
		end;
	end loop;

	select	count(1)
	into STRICT	qt_inconsistencia_w
	from	pls_proposta_on_inconsist
	where	nr_seq_proposta = nr_seq_prop_online_p
	and	coalesce(dt_liberacao::text, '') = '';
	
	if (qt_inconsistencia_w > 0) then
		update	pls_proposta_online
		set	ie_status = 'I',
			dt_validacao  = NULL,
			dt_atualizacao = clock_timestamp(), 
			nm_usuario = nm_usuario_p 
		where	nr_sequencia = nr_seq_prop_online_p;
	else 
		update	pls_proposta_online 
		set	ie_status = 'A',
			dt_validacao = clock_timestamp(),
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p 
		where	nr_sequencia = nr_seq_prop_online_p;
	end if;
	commit;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hpms_proposal_request_pck.validate_proposal ( nr_seq_prop_online_p pls_proposta_online.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
