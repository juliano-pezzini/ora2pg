-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_cta_pagto_faturamento_pck.pls_atualizar_conta_resumo ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


vl_exame_coleta_w		pls_conta_proc.vl_exame_coleta%type := 0;
nm_prestador_pgto_w		pls_conta_medica_resumo.nm_prestador_pgto%type;
vl_sum_glosa_w			pls_conta.vl_glosa%type;
vl_glosa_original_w		pls_conta.vl_glosa%type;
vl_glosa_calc_w			pls_conta.vl_glosa%type;
vl_tolerancia_w			pls_conta.vl_glosa%type := 1.00;
vl_dif_glosa_w			pls_conta.vl_glosa%type;
tb_dados_pagto_fat_w		table_dados_pagto_fat;
tb_vl_glosa_w			dbms_sql.number_table;
tb_seq_resumo_w			dbms_sql.number_table;
tb_dados_resumo_item_w		table_dados_resumo_item;
tb_seq_contas_del_w		dbms_sql.number_table;
nr_index_w			integer;
nr_index_glosa_w		integer;
nr_index_contas_del_w		integer;
nr_index_resumo_item_w		integer;
nr_seq_index_contas_del_w	integer;
ie_resolveu_dif_w		boolean;

C01 CURSOR(	nr_seq_conta_pc pls_conta.nr_sequencia%type) FOR
	SELECT	'P' ie_tipo_item,
		coalesce(a.nr_seq_prestador_exec, a.nr_seq_prestador_prot) nr_seq_prestador_pgto,
		a.ie_status ie_status,
		a.nr_sequencia nr_seq_item,
		a.nr_sequencia nr_seq_proc,
		null nr_seq_mat,
		coalesce(a.vl_prestador,a.vl_liberado) vl_liberado,
		a.nr_seq_prest_pgto_coleta nr_seq_prest_pgto_coleta,
		a.vl_exame_coleta vl_exame_coleta,
		a.cd_procedimento cd_procedimento,
		a.ie_origem_proced ie_origem_proced,
		a.nr_seq_proc_ref nr_seq_proc_ref,
		null nr_seq_partic,
		a.ie_glosa ie_glosa,
		a.nr_seq_conta nr_seq_conta
	from	pls_conta_proc_v		a
	where	a.nr_seq_conta		=  nr_seq_conta_pc
	and	a.ie_status <> 'D'
	and	a.ie_status_conta <> 'S'
	
union all

	--Valores do MÉDICO EXECUTOR da CONTA 
	SELECT	'C' Ie_Tipo_Item,
		coalesce(a.nr_seq_prestador_exec, a.nr_seq_prestador_prot),
		a.ie_status,
		a.nr_sequencia,
		a.nr_sequencia,
		null ,
		a.vl_pag_medico_conta,
		null,
		0,
		a.cd_procedimento,
		a.ie_origem_proced,
		0,
		null,
		a.Ie_Glosa,
		a.nr_seq_conta
	From	pls_conta_proc_v a
	where	a.nr_seq_conta		=  nr_seq_conta_pc
	And	a.Ie_Glosa = 'N'
	And (	select 	count(1) from pls_proc_participante X
			where	 x.nr_seq_conta_proc = a.nr_sequencia) > 0
	And	A.Ie_Status <> 'D'
	and	a.ie_status_conta <>'S'
	
union all

	-- Valores dos materiais 
	select	'M' ie_tipo_item,
		coalesce(a.nr_seq_prestador_exec, a.nr_seq_prestador_prot),
		a.ie_status,
		a.nr_sequencia,
		null,
		a.nr_sequencia,
		a.vl_liberado,
		null,
		0,
		null, 
		null,
		0,
		null,
		a.ie_glosa,
		a.nr_seq_conta
	from	pls_conta_mat_v		a
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.ie_status <> 'D'
	and	a.ie_status_conta <> 'S'
	
union all

	-- Valores do procedimento INTERCÂMBIO 
	select	'I' ie_tipo_item,
		null nr_seq_prestador_exec,
		a.ie_status,
		a.nr_sequencia nr_seq_item,
		a.nr_sequencia nr_seq_proc,
		null nr_seq_mat,
		(a.vl_procedimento_ptu + a.vl_co_ptu + a.vl_material_ptu) vl_liberado, 
		null nr_seq_prest_pgto_coleta,
		0 vl_exame_coleta,
		a.cd_procedimento,
		a.ie_origem_proced,
		0,
		null,
		a.ie_glosa,
		a.nr_seq_conta
	from	pls_conta_proc_v	a
	where	a.nr_seq_conta		=  nr_seq_conta_pc
	and	a.ie_tipo_conta		= 'C' --intercâmbio cobranca
	and	a.ie_status <> 'D'
	and	a.ie_status_conta <> 'S'
	
union all

	-- Valores dos materiais 
	select	'I' ie_tipo_item,
		null,
		a.ie_status,
		a.nr_sequencia ,
		null,
		a.nr_sequencia,
		a.vl_material_ptu, 
		null,
		0,
		null,
		null,
		0,
		null,
		a.ie_glosa,
		a.nr_seq_conta
	from	pls_conta_mat_v		a
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.ie_status <> 'D'
	and	a.ie_status_conta <> 'S'
	
union all

	select	'R' ie_tipo_item,
		coalesce(b.nr_seq_prestador_pgto, coalesce(a.nr_seq_prestador_exec, a.nr_seq_prestador_prot)),
		a.ie_status, 
		a.nr_sequencia,
		a.nr_sequencia,
		null ,
		a.vl_prestador,
		null,
		a.vl_exame_coleta,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_proc_ref,
		b.nr_sequencia,
		a.ie_glosa,
		a.nr_seq_conta
	from	pls_conta_proc_v	a,
		pls_proc_participante	b
	where	a.nr_seq_conta		=  nr_seq_conta_pc
	and	a.ie_status <> 'D'
	and	a.ie_status_conta <> 'S'
	and	a.ie_glosa = 'N'
	and	b.nr_seq_conta_proc	= a.nr_sequencia;
	
cs_resumo_proc CURSOR(nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_resumo,
		a.vl_liberado vl_lib_resumo,
		a.vl_glosa vl_glosa_resumo,
		-- Soma o valor de glosa do resumo para este procedimento
		(SELECT	sum(x.vl_glosa)
		from	pls_conta_medica_resumo x
		where	x.nr_seq_conta_proc = a.nr_seq_conta_proc
		and	x.nr_seq_conta = a.nr_seq_conta
		and	x.ie_tipo_item <> 'I'
		and	x.ie_situacao = 'A') vl_glosa_outros,
		b.vl_liberado vl_lib_conta,
		b.vl_glosa vl_glosa_conta
	from	pls_conta_medica_resumo	a,
		pls_conta_proc_v		b
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	(a.nr_seq_conta_proc IS NOT NULL AND a.nr_seq_conta_proc::text <> '')
	and	a.ie_tipo_item		<> 'I'
	and	a.ie_situacao = 'A'
	and	b.nr_sequencia		= a.nr_seq_conta_proc;
	
cs_resumo_mat CURSOR(nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_resumo,
		a.vl_liberado vl_lib_resumo,
		a.vl_glosa vl_glosa_resumo,
		-- Soma o valor de glosa do resumo para este material
		(SELECT	sum(x.vl_glosa)
		from	pls_conta_medica_resumo x
		where	x.nr_seq_conta_mat = a.nr_seq_conta_mat
		and	x.nr_seq_conta = a.nr_seq_conta
		and	x.nr_sequencia <> a.nr_sequencia
		and	x.ie_tipo_item <> 'I'
		and	x.ie_situacao = 'A' ) vl_glosa_outros,
		b.vl_liberado vl_lib_conta,
		b.vl_glosa vl_glosa_conta
	from	pls_conta_medica_resumo	a,
		pls_conta_mat_v		b
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	(a.nr_seq_conta_mat IS NOT NULL AND a.nr_seq_conta_mat::text <> '')
	and	a.ie_tipo_item		<> 'I'
	and	a.ie_situacao = 'A'
	and	b.nr_sequencia		= a.nr_seq_conta_mat;
BEGIN

tb_dados_pagto_fat_w := pls_cta_pagto_faturamento_pck.limpar_dados_pagto_fat(tb_dados_pagto_fat_w);
nr_index_glosa_w	:= 0;
nr_index_w	:= 0;
tb_vl_glosa_w.delete;	
tb_seq_resumo_w.delete;	
tb_seq_contas_del_w.delete;
nr_seq_index_contas_del_w := 0;

for r_contas_w in pls_cta_consistir_pck.c_contas(nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop

	--pls_delete_conta_medica_resumo(r_contas_w.nr_seq_conta, null, null, nm_usuario_P);
	tb_seq_contas_del_w(nr_seq_index_contas_del_w) := r_contas_w.nr_seq_conta;
	
	--Incrementa o indice 
	nr_seq_index_contas_del_w := nr_seq_index_contas_del_w + 1;
	
	for r_C01_w in C01(r_contas_w.nr_seq_conta) loop
		
		/*OS 425485 - Diogo : Retiradas as restrições para que o prestador pagamento sepre se mantenha atualizado na pls_conta_medica_resumo*/

		if	((r_C01_w.nr_seq_prestador_pgto IS NOT NULL AND r_C01_w.nr_seq_prestador_pgto::text <> '') or (r_C01_w.ie_tipo_item = 'I')) then
				
			--verificar tx_coleta com DIogo			
			/*Atualizar a referencia do procedimento*/

			if (r_C01_w.nr_seq_proc_ref IS NOT NULL AND r_C01_w.nr_seq_proc_ref::text <> '') then
				vl_exame_coleta_w	:= 0;
			else
				if (r_C01_w.vl_exame_coleta < 0) then
					vl_exame_coleta_w	:= 0;
				else
					vl_exame_coleta_w := r_C01_w.vl_exame_coleta;
				end if;
			end if;
		
			if	((vl_exame_coleta_w <> 0) or (coalesce(r_C01_w.nr_seq_prest_pgto_coleta::text, '') = '')) then
			
				tb_dados_resumo_item_w.nr_seq_proc(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_proc;			
				tb_dados_resumo_item_w.nr_seq_partic(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_partic;		
				tb_dados_resumo_item_w.nr_seq_mat(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_mat;		
				tb_dados_resumo_item_w.ie_tipo_item(nr_index_resumo_item_w)	:= r_C01_w.ie_tipo_item;		
				tb_dados_resumo_item_w.nr_seq_prest_pagto_coleta(nr_index_resumo_item_w) := 0;
				nr_index_resumo_item_w := nr_index_resumo_item_w + 1;
							
			end if;			
			
			/* Gerar o pagamento do prestador executor do exame de coleta 
			OPS - Prestadores / Prestadores / Exames de coleta */
			if (r_C01_w.nr_seq_prest_pgto_coleta IS NOT NULL AND r_C01_w.nr_seq_prest_pgto_coleta::text <> '') then
				
				/* Inserir o pagamento do prestador da regra */
		
				tb_dados_resumo_item_w.nr_seq_proc(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_proc;			
				tb_dados_resumo_item_w.nr_seq_partic(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_partic;		
				tb_dados_resumo_item_w.nr_seq_mat(nr_index_resumo_item_w)	:= r_C01_w.nr_seq_mat;		
				tb_dados_resumo_item_w.ie_tipo_item(nr_index_resumo_item_w)	:= r_C01_w.ie_tipo_item;		
				tb_dados_resumo_item_w.nr_seq_prest_pagto_coleta(nr_index_resumo_item_w) := r_C01_w.nr_seq_prest_pgto_coleta;
				nr_index_resumo_item_w := nr_index_resumo_item_w + 1;
				
				if (r_C01_w.ie_glosa <> 'S')	then
					
					nm_prestador_pgto_w	:= substr(pls_obter_dados_prestador(r_C01_w.nr_seq_prestador_pgto,'N'),1,255);
					
					--Insere valores nas variáveis tabela
					tb_dados_pagto_fat_w.nr_seq_item(nr_index_w) 		:= r_C01_w.nr_seq_item;	
					tb_dados_pagto_fat_w.nr_seq_conta(nr_index_w)		:= r_C01_w.nr_seq_conta;
					tb_dados_pagto_fat_w.vl_hm(nr_index_w)			:= 0;	
					tb_dados_pagto_fat_w.nm_prestador_pgto(nr_index_w) 	:= nm_prestador_pgto_w;
					
					if (vl_exame_coleta_w	<> 0) then
						--Insere valores nas variáveis tabela									
						tb_dados_pagto_fat_w.vl_liberado(nr_index_w)		:= vl_exame_coleta_w;
						tb_dados_pagto_fat_w.vl_lib_original(nr_index_w)	:= vl_exame_coleta_w;	
						tb_dados_pagto_fat_w.ds_tipo_item(nr_index_w)		:= 'Prestador (Taxa de Coleta)';									
						tb_dados_pagto_fat_w.qt_item(nr_index_w)		:= 1;
						tb_dados_pagto_fat_w.vl_material_pag(nr_index_w) 	:= 0;		
						tb_dados_pagto_fat_w.vl_co_pag(nr_index_w)		:= vl_exame_coleta_w;	
						tb_dados_pagto_fat_w.nr_seq_prestador_pagto(nr_index_w)	:= r_C01_w.nr_seq_prestador_pgto;											
					else
						nm_prestador_pgto_w	:= substr(pls_obter_dados_prestador(r_C01_w.nr_seq_prest_pgto_coleta,'N'),1,255);
						--Atualizar o pagamento da coleta do prestador executor da conta 
						--Insere valores nas variáveis tabela				
						tb_dados_pagto_fat_w.vl_liberado(nr_index_w)		:= r_C01_w.vl_liberado - vl_exame_coleta_w;	
						tb_dados_pagto_fat_w.vl_lib_original(nr_index_w)	:= r_C01_w.vl_liberado - vl_exame_coleta_w;	
						tb_dados_pagto_fat_w.ds_tipo_item(nr_index_w)		:= 'Prestador';	
						tb_dados_pagto_fat_w.vl_material_pag(nr_index_w) 	:= 0;
						tb_dados_pagto_fat_w.qt_item(nr_index_w)		:= null;
						tb_dados_pagto_fat_w.vl_co_pag(nr_index_w)		:= vl_exame_coleta_w;
						tb_dados_pagto_fat_w.nr_seq_prestador_pagto(nr_index_w)	:= r_C01_w.nr_seq_prest_pgto_coleta;			
					end if;
						nr_index_w := nr_index_w + 1;		
				end if;
			end if;		
		end if;
		
		--Quando alguma das estruturas atingir a quantidade de registros pré-definida, então manda para o banco tudo.
		if	((nr_seq_index_contas_del_w	 =  pls_util_cta_pck.qt_registro_transacao_w) or ( nr_index_resumo_item_w 	 =  pls_util_cta_pck.qt_registro_transacao_w) or ( nr_index_w 			>=  pls_util_cta_pck.qt_registro_transacao_w))then		
			
			CALL pls_cta_pagto_faturamento_pck.delete_conta_medica_resumo(tb_seq_contas_del_w, nm_usuario_p);
			tb_seq_contas_del_w.delete;
			nr_seq_index_contas_del_w := 0;		
			
			--Deve ser revista a pls_inserir_conta_resumo_item e a mesma deve utilizar insert e update em lote(forall)
--			inserir_conta_resumo_item(tb_dados_resumo_item_w, nm_usuario_p, '');
			--Quando um dos indices atingir a quantidade predefinida, deve-se mandar executar todas
			--as funcionalidades em lote, por causa de interdependências
			tb_dados_resumo_item_w := pls_cta_pagto_faturamento_pck.limpa_tabelas_resumo_item(tb_dados_resumo_item_w);
			nr_index_resumo_item_w := 0;
			
			CALL pls_cta_pagto_faturamento_pck.update_conta_resumo(tb_dados_pagto_fat_w);
			tb_dados_pagto_fat_w := pls_cta_pagto_faturamento_pck.limpar_dados_pagto_fat(tb_dados_pagto_fat_w);
			nr_index_w := 0;
		end if;
	end loop;
	
end loop;

--Para garantir que todos os registros da variáveis tabela sejam mandados para o banco.
CALL pls_cta_pagto_faturamento_pck.update_conta_resumo(tb_dados_pagto_fat_w);

for r_contas_w in pls_cta_consistir_pck.c_contas(nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p, nr_seq_conta_p) loop
	-- Sessão do descarrego: VL_GLOSA; 
	-- Somanr o valor de glosa do resumo
	select	coalesce(sum(a.vl_glosa), 0)
	into STRICT	vl_sum_glosa_w
	from	pls_conta_medica_resumo	a
	where	a.nr_seq_conta = nr_seq_conta_p
	and	a.ie_tipo_item <> 'I'
	and	a.ie_situacao = 'A';

	-- Obter o valor de glosa da conta. 
	select	a.vl_glosa
	into STRICT	vl_glosa_original_w
	from	pls_conta a
	where	a.nr_sequencia = r_contas_w.nr_seq_conta;

	-- Se o valor de glosa gravado no resumo for maior que o valor de glosa informado no resumo deve ser rateado.
	if (vl_sum_glosa_w > vl_glosa_original_w) then
		
		-- Calcula o valor de diferença entre os valores.
		vl_dif_glosa_w	:= vl_sum_glosa_w - vl_glosa_original_w;
		
		-- Se for maior que o valor de tolerância não faremos o acerto
		if (vl_dif_glosa_w <= vl_tolerancia_w) then
			
			ie_resolveu_dif_w	:= false;
			
			-- Varrer os registros do resumo gerados para esta conta.
			for	rw_resumo_w in cs_resumo_proc(r_contas_w.nr_seq_conta) loop
							
				vl_glosa_calc_w	:= null;
				
				-- Se o valor do resumo tiver maior que o valor original tem que descontar a diferença.
				if (rw_resumo_w.vl_glosa_outros >  rw_resumo_w.vl_glosa_conta) then
					
					-- calcula o novo valor de glosa pra o registro no resumo
					vl_glosa_calc_w := rw_resumo_w.vl_glosa_resumo - (rw_resumo_w.vl_glosa_outros - rw_resumo_w.vl_glosa_conta);
					
					-- Desconta a diferença do valor de diferença da conta
					vl_dif_glosa_w	:= vl_dif_glosa_w - (rw_resumo_w.vl_glosa_resumo - vl_glosa_calc_w);
					
					-- Se não tem mais diferença acabou não precisa mais processar nada.
					if (vl_dif_glosa_w = 0) then
						
						ie_resolveu_dif_w	:= true;
					end if;
				end if;
				
				-- se calculou novo valor de glosa atualiza o item.
				if (vl_glosa_calc_w IS NOT NULL AND vl_glosa_calc_w::text <> '') then
					
					tb_vl_glosa_w(nr_index_glosa_w)	 := vl_glosa_calc_w;
					tb_seq_resumo_w(nr_index_glosa_w):= rw_resumo_w.nr_seq_resumo;	
					
					update	pls_conta_medica_resumo
					set	vl_glosa = vl_glosa_calc_w
					where	nr_sequencia = rw_resumo_w.nr_seq_resumo;
				end if;
				
				if (nr_index_glosa_w = pls_util_cta_pck.qt_registro_transacao_w) then
					
					CALL pls_cta_pagto_faturamento_pck.atualiza_valor_glosa(tb_vl_glosa_w, tb_seq_resumo_w);
					tb_vl_glosa_w.delete;
					tb_seq_resumo_w.delete;
					nr_index_glosa_w := 0;
				else
					nr_index_glosa_w := nr_index_glosa_w + 1;
				end if;
				
				-- se tiver resolvido sai do loop.
				exit when ie_resolveu_dif_w;
				
			end loop;
			
			-- Se já tiver resolvido nem mexe nos materiais.
			if (not ie_resolveu_dif_w) then
				
				-- Varre o resumo dos materiais para a conta e seguir a mesma idéia  dos procedimentos.
				for	rw_resumo_w in cs_resumo_mat(r_contas_w.nr_seq_conta) loop
								
					vl_glosa_calc_w	:= null;
					
					-- Se o valor de glosa do resumo for maior que do material então deve descontar a difereça.
					if (rw_resumo_w.vl_glosa_outros >  rw_resumo_w.vl_glosa_conta) then
						
						-- Calcula o novo valor de glosa
						vl_glosa_calc_w := rw_resumo_w.vl_glosa_resumo - (rw_resumo_w.vl_glosa_outros - rw_resumo_w.vl_glosa_conta);
						
						--- atualiza a diferença;
						vl_dif_glosa_w	:= vl_dif_glosa_w - (rw_resumo_w.vl_glosa_resumo - vl_glosa_calc_w);
						
						-- Se não tem mais diferença acabou.
						if (vl_dif_glosa_w = 0) then
							
							ie_resolveu_dif_w	:= true;
						end if;
					end if;
					
					-- Se tem novo valor calculado atualiza o valor do resumo.
					if (vl_glosa_calc_w IS NOT NULL AND vl_glosa_calc_w::text <> '') then
						
						tb_vl_glosa_w(nr_index_glosa_w)	 := vl_glosa_calc_w;
						tb_seq_resumo_w(nr_index_glosa_w):= rw_resumo_w.nr_seq_resumo;
					end if;
					
					--Se a quantidade de registros nas variaveis tabela atingir a qtde definida
					if (nr_index_glosa_w = pls_util_cta_pck.qt_registro_transacao_w) then
						
						CALL pls_cta_pagto_faturamento_pck.atualiza_valor_glosa(tb_vl_glosa_w, tb_seq_resumo_w);
						tb_vl_glosa_w.delete;
						tb_seq_resumo_w.delete;
						nr_index_glosa_w := 0;
					else
						nr_index_glosa_w := nr_index_glosa_w + 1;
					end if;
					
					-- se tiver resolvido não precisa verificar os demais itens.
					exit when ie_resolveu_dif_w;
				end loop;
			end if;
		end if;
	end if;
end loop;
--Garantir que todos os registros nas variaveis tabela, sejam enviados para o banco.
CALL pls_cta_pagto_faturamento_pck.atualiza_valor_glosa(tb_vl_glosa_w, tb_seq_resumo_w);

END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE pls_cta_pagto_faturamento_pck.pls_atualizar_conta_resumo ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;
