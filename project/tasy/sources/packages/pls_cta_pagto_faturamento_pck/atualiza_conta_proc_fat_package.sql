-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


--Faturamento, atualizar dados conta_proc
CREATE OR REPLACE PROCEDURE pls_cta_pagto_faturamento_pck.atualiza_conta_proc_fat ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_excluir_fat_p text) AS $body$
DECLARE


ie_calcula_preco_benef_w	varchar(10);
qt_pos_estabelecido_w		integer;
vl_tot_beneficiario_w		double precision;
dados_segurado_w		table_dados_segurado;
dados_parametros_w		table_dados_parametros;
tb_seq_proc_w			dbms_sql.number_table;
tb_seq_contas_w			dbms_sql.number_table;
tb_seq_contas_pos_w		dbms_sql.number_table;
tb_total_benef_w		dbms_sql.number_table;
nr_index_proc_w			integer;
dados_pos_estab_w		table_dados_pos_estab;
index_dados_pos_estab_w		integer;


C01 CURSOR(	nr_seq_lote_pc			pls_lote_protocolo_conta.nr_sequencia%type,
		nr_seq_protocolo_pc		pls_protocolo_conta.nr_sequencia%type,
		nr_seq_lote_processo_pc		pls_cta_lote_processo.nr_sequencia%type,
		nr_seq_conta_pc			pls_conta.nr_sequencia%type,
		nr_seq_proc_pc			pls_conta_proc.nr_sequencia%type)FOR
		
	SELECT	proc.nr_sequencia,
		proc.nr_seq_conta,
		proc.vl_liberado,
		proc.ie_glosa,
		proc.qt_procedimento,
		proc.cd_estabelecimento,
		proc.nr_seq_segurado	
	from	pls_conta_proc_v proc
	where	proc.nr_sequencia 	= nr_seq_proc_pc
	and	proc.ie_status 	in ('A', 'F', 'L', 'P', 'U')
	
union all

	SELECT	proc.nr_sequencia,
		proc.nr_seq_conta,
		proc.vl_liberado,
		proc.ie_glosa,
		proc.qt_procedimento,
		proc.cd_estabelecimento,
		proc.nr_seq_segurado
	from	pls_conta_proc_v proc
	where	proc.nr_seq_conta 	= nr_seq_conta_pc
	and	coalesce(nr_seq_proc_pc::text, '') = ''
	and	proc.ie_status 	in ('A', 'F', 'L', 'P', 'U')
	
union all

	select	proc.nr_sequencia,
		proc.nr_seq_conta,
		proc.vl_liberado,
		proc.ie_glosa,
		proc.qt_procedimento,
		proc.cd_estabelecimento,
		proc.nr_seq_segurado
	from	pls_conta_proc_v proc
	where	proc.nr_seq_protocolo 	= nr_seq_protocolo_pc
	and	coalesce(nr_seq_conta_pc::text, '') = ''
	and	proc.ie_status 	in ('A', 'F', 'L', 'P', 'U')
	
union all

	select	proc.nr_sequencia,
		proc.nr_seq_conta,
		proc.vl_liberado,
		proc.ie_glosa,
		proc.qt_procedimento,
		proc.cd_estabelecimento,
		proc.nr_seq_segurado
	from	pls_conta_proc_v proc
	where	proc.nr_seq_lote_conta 	= nr_seq_lote_pc
	and	coalesce(nr_seq_conta_pc::text, '') = ''
	and	coalesce(nr_seq_protocolo_pc::text, '') = ''	
	and	proc.ie_status 	in ('A', 'F', 'L', 'P', 'U')
	
union all

	select	proc.nr_sequencia,
		proc.nr_seq_conta,
		proc.vl_liberado,
		proc.ie_glosa,
		proc.qt_procedimento,
		proc.cd_estabelecimento,
		proc.nr_seq_segurado
	from	pls_conta_proc_v proc
	where	coalesce(nr_seq_lote_pc::text, '') = ''
	and	coalesce(nr_seq_conta_pc::text, '') = ''
	and	coalesce(nr_seq_protocolo_pc::text, '') = ''	
	and	proc.ie_status 	in ('A', 'F', 'L', 'P', 'U')
	and	exists (select	1
			from	pls_cta_lote_proc_conta lote
			where	lote.nr_seq_lote_processo	= nr_seq_lote_processo_pc 
			and     lote.nr_seq_conta  		= proc.nr_seq_conta );	
BEGIN

--Record com informações da pls_parâmetros
dados_parametros_w := pls_cta_pagto_faturamento_pck.obter_dados_parametros(cd_estabelecimento_p);

dados_pos_estab_w := pls_cta_pagto_faturamento_pck.limpar_tabelas_dados_pos_estab(dados_pos_estab_w);
tb_seq_proc_w.delete;
tb_seq_contas_w.delete;
tb_seq_contas_pos_w.delete;
tb_total_benef_w.delete;
nr_index_proc_w	:= 0;
index_dados_pos_estab_w	:= 0;

for	r_C01_w in C01(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
			nr_seq_conta_p, nr_seq_conta_proc_p) loop

	if (r_C01_w.ie_glosa <> 'S') then
		--Atualizar o valor de coparticipação do item 
				
	
		-- Verificar se existe valor de pós para o item 
		qt_pos_estabelecido_w := pls_cta_pagto_faturamento_pck.obter_qt_pos_estab(r_C01_w.nr_sequencia, 'P');

		if (qt_pos_estabelecido_w	> 0) then
			
			--CPO - Calcula preço pela tabela de preço da OPS
			ie_calcula_preco_benef_w := pls_obter_dados_conta(r_C01_w.nr_seq_conta, 'CPO');
			
			--Se o calculo do custo operacional segue a tabela de preço da operadora, então não precisa atualizar nada 
			--ie_calculo_pos_estab(Contrato, prestador e operadora)
			if	((ie_calcula_preco_benef_w <> 'S') and ( dados_parametros_w.ie_calculo_pos_estab in ('C','P','O'))) then
				
				dados_pos_estab_w.vl_liberado(index_dados_pos_estab_w) 	:= r_C01_w.vl_liberado;
				dados_pos_estab_w.qt_item(index_dados_pos_estab_w) 	:= r_C01_w.qt_procedimento;
				dados_pos_estab_w.nr_seq_item(index_dados_pos_estab_w) 	:= r_C01_w.nr_sequencia;
				
				select 	sum(vl_beneficiario)
				into STRICT	vl_tot_beneficiario_w
				from	pls_conta_pos_estabelecido
				where	nr_seq_conta	= r_C01_w.nr_seq_conta;	
			
				if (vl_tot_beneficiario_w	> 0) then
				
					if (not tb_seq_contas_pos_w.exists(r_C01_w.nr_seq_conta)) then
					
						tb_seq_contas_pos_w(r_C01_w.nr_seq_conta) 	:= r_C01_w.nr_seq_conta;
						tb_total_benef_w(r_C01_w.nr_seq_conta) 		:= vl_tot_beneficiario_w;
					end if;
					
				end if;
				
				if ( index_dados_pos_estab_w = pls_util_cta_pck.qt_registro_transacao_w) then
					CALL pls_cta_pagto_faturamento_pck.atualiza_dados_pos_estab(dados_pos_estab_w, tb_seq_contas_pos_w, tb_total_benef_w, 'P');
					dados_pos_estab_w := pls_cta_pagto_faturamento_pck.limpar_tabelas_dados_pos_estab(dados_pos_estab_w);
					tb_seq_contas_pos_w.delete;
					index_dados_pos_estab_w := 0;
				else
					index_dados_pos_estab_w := index_dados_pos_estab_w + 1;
				end if;
			end if;
			
		end if;
	end if;
end loop;

--Para garantir que todos os registros das variáveis tabela sejam atualizados no banco
CALL pls_cta_pagto_faturamento_pck.zera_valores_coparticipacao(tb_seq_proc_w, tb_seq_contas_w, 'P');
CALL pls_cta_pagto_faturamento_pck.atualiza_dados_pos_estab(dados_pos_estab_w, tb_seq_contas_pos_w, tb_total_benef_w, 'P');

for	r_C01_w in C01(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
			nr_seq_conta_p, nr_seq_conta_proc_p) loop

	--Record com informações do segurado
	dados_segurado_w := pls_cta_pagto_faturamento_pck.obter_dados_segurado(r_C01_w.nr_seq_segurado);
	
	if (r_C01_w.ie_glosa <> 'S') then

				
		-- Verificar se existe valor de custo operacional para o item 
		qt_pos_estabelecido_w := pls_cta_pagto_faturamento_pck.obter_qt_pos_estab(r_C01_w.nr_sequencia, 'P');

		if (qt_pos_estabelecido_w	> 0) then
		
			--Geração de pós-estabelecido na consistência da conta
			if (dados_parametros_w.ie_geracao_pos_estabelecido = 'C' ) then
				CALL pls_gerar_valor_pos_estab( r_C01_w.nr_seq_conta, nm_usuario_p,'C', r_C01_w.nr_sequencia, null, 'A');
			end if;
		end if;	
		
	else
		if (coalesce(ie_excluir_fat_p,'S') = 'S') then
		
			delete	FROM pls_conta_proc_aprop
			where	nr_seq_conta_proc = r_C01_w.nr_sequencia;
			
			delete	FROM pls_conta_copartic_aprop
			where	NR_SEQ_CONTA_COPARTICIPACAO in (SELECT	nr_sequencia
								from	pls_conta_coparticipacao
								where	nr_seq_conta_proc = r_C01_w.nr_sequencia);
		
			delete	FROM pls_conta_coparticipacao
			where	nr_seq_conta_proc = r_C01_w.nr_sequencia;
			
			delete	FROM pls_conta_pos_estabelecido
			where	nr_seq_conta_proc = r_C01_w.nr_sequencia
			and	ie_status_faturamento	!= 'A'
			and	ie_cobrar_mensalidade	!= 'A';
		end if;
	end if;
			
end loop;
	
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE pls_cta_pagto_faturamento_pck.atualiza_conta_proc_fat ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_excluir_fat_p text) FROM PUBLIC;
