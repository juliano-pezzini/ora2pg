-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION pls_qtde_execucao_pck.pls_obter_conta_simul ( dt_procedimento_p timestamp, dt_inicio_proc_p timestamp, dados_conta_p pls_via_acesso_pck.dados_conta, nr_seq_regra_p bigint) RETURNS varchar AS $body$
DECLARE


ie_retorno_w			varchar(1)	:= 'N';
qt_proc_conta_tot_w		integer	:= 0;
ie_pegou_w			varchar(15)	:= 'N';
qt_max_proced_w			pls_regra_tipo_exec_item.qt_proc_final%type;
qt_min_proced_w			pls_regra_tipo_exec_item.qt_procedimento%type;
cd_proc_regra_w			pls_regra_tipo_exec_item.cd_procedimento%type;
ie_origem_proced_regra_w	pls_regra_tipo_exec_item.ie_origem_proced%type;
ie_valido_w			varchar(255)	:= 'S';
ie_procedimento_fora_regra_w	varchar(1) := 'N';
qt_proc_regra_w			integer;
ie_considerar_horario_w		pls_regra_tipo_exec_item.ie_considerar_horario%type;
qt_horario_w			pls_regra_tipo_exec_item.qt_horario%type;
ie_tipo_qt_horario_w		pls_regra_tipo_exec_item.ie_tipo_qt_horario%type;
qt_minuto_w			integer;
ie_procedimento_valido_w	boolean;
ie_intervalor_ok_w		varchar(1);
ie_grau_participacao_w		pls_regra_tipo_execucao.ie_grau_participacao%type;
ie_mesmo_prestador_w		pls_regra_tipo_execucao.ie_mesmo_prestador%type;
/*
ie_tipo =  	A - verificase procedimento é válido
	B - Verifica se tem procedimentos com mesas definições de horários,
		porém não estao na regra de quantidade de execução
*/
ie_itens_horario_fora_regra_w	varchar(1);

--Irá varer as regras
C00 CURSOR(nr_seq_regra_pc	pls_regra_tipo_exec_item.nr_seq_regra%type)FOR
	SELECT	a.cd_procedimento	cd_procedimento,
		a.ie_origem_proced	ie_origem_proced,
		coalesce(max(a.ie_considerar_horario),'S') ie_considerar_horario,
		coalesce(max(a.qt_horario),0)	qt_horario,
		max(a.ie_tipo_qt_horario)	ie_tipo_qt_horario
	from	pls_regra_tipo_exec_item a
	where	a.nr_seq_regra		= nr_seq_regra_pc
	and	a.ie_situacao		= 'A'
	group by a.cd_procedimento,
		a.ie_origem_proced;

--Irá varer os procedimento respeitando a data e a guia de referencia
 C01 CURSOR(	nr_seq_regra_pc			pls_regra_tipo_exec_item.nr_sequencia%type,
		cd_guia_referencia_pc		pls_conta_proc_v.cd_guia_referencia%type,
		nr_seq_segurado_pc		pls_conta_proc_v.nr_seq_segurado%type,
		dt_procedimento_pc		pls_conta_proc_v.dt_procedimento_trunc%type,
		hr_inicio_proc_pc		pls_conta_proc_v.hr_inicio_proc%type,
		qt_minuto_pc			integer,
		cd_procedimento_pc		pls_conta_proc.cd_procedimento%type,
		ie_origem_proced_pc		pls_conta_proc.ie_origem_proced%type,
		ie_considerar_horario_pc	pls_regra_tipo_exec_item.ie_considerar_horario%type,
		ie_grau_participacao_pc		pls_regra_tipo_execucao.ie_grau_participacao%type,
		nr_seq_grau_partic_conta_pc	pls_conta_proc_v.nr_seq_grau_partic_conta%type)FOR
	SELECT	a.qt_procedimento_imp,
		a.cd_procedimento cd_procedimento,
		a.ie_origem_proced ie_origem_proced,
		a.ie_glosa,
		a.cd_guia,
		a.cd_guia_referencia,
		a.hr_inicio_proc,
		a.ie_status,
		pls_obter_minutos_intervalo(a.hr_inicio_proc , hr_inicio_proc_pc, qt_minuto_pc)  ie_intervalo_ok,
		a.nr_sequencia,
		a.nr_seq_prestador_exec
	from	pls_conta_proc_v	a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.dt_procedimento_trunc	= dt_procedimento_pc
	and	a.cd_guia_referencia	= cd_guia_referencia_pc
	and	a.cd_procedimento	= cd_procedimento_pc
	and	a.ie_origem_proced	= ie_origem_proced_pc
	and	coalesce(nr_seq_proc_ref::text, '') = ''
	and	ie_considerar_horario_pc	!= 'S'
	and	ie_grau_participacao_pc		= 'N'
	
union all

	SELECT	a.qt_procedimento_imp,
		a.cd_procedimento cd_procedimento,
		a.ie_origem_proced ie_origem_proced,
		a.ie_glosa,
		a.cd_guia,
		a.cd_guia_referencia,
		a.hr_inicio_proc,
		a.ie_status,
		'N'  ie_intervalo_ok,
		a.nr_sequencia,
		a.nr_seq_prestador_exec
	from	pls_conta_proc_v	a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.dt_procedimento_trunc	= dt_procedimento_pc
	and	a.cd_guia_referencia	= cd_guia_referencia_pc
	and	a.cd_procedimento	= cd_procedimento_pc
	and	a.ie_origem_proced	= ie_origem_proced_pc
	and	coalesce(nr_seq_proc_ref::text, '') = ''
	and	ie_considerar_horario_pc 	= 'S'
	and	ie_grau_participacao_pc 	= 'N'
	
union all

	select	a.qt_procedimento_imp,
		a.cd_procedimento cd_procedimento,
		a.ie_origem_proced ie_origem_proced,
		a.ie_glosa,
		a.cd_guia,
		a.cd_guia_referencia,
		a.hr_inicio_proc,
		a.ie_status,
		pls_obter_minutos_intervalo(a.hr_inicio_proc , hr_inicio_proc_pc, qt_minuto_pc)  ie_intervalo_ok,
		a.nr_sequencia,
		a.nr_seq_prestador_exec
	from	pls_conta_proc_v	a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.dt_procedimento_trunc	= dt_procedimento_pc
	and	a.cd_guia_referencia	= cd_guia_referencia_pc
	and	a.cd_procedimento	= cd_procedimento_pc
	and	a.ie_origem_proced	= ie_origem_proced_pc
	and	coalesce(nr_seq_proc_ref::text, '') = ''
	and	ie_considerar_horario_pc	!= 'S'
	and	ie_grau_participacao_pc		= 'S'
	and	a.nr_seq_grau_partic_conta	= nr_seq_grau_partic_conta_pc
	
union all

	select	a.qt_procedimento_imp,
		a.cd_procedimento cd_procedimento,
		a.ie_origem_proced ie_origem_proced,
		a.ie_glosa,
		a.cd_guia,
		a.cd_guia_referencia,
		a.hr_inicio_proc,
		a.ie_status,
		'N'  ie_intervalo_ok,
		a.nr_sequencia,
		a.nr_seq_prestador_exec
	from	pls_conta_proc_v	a
	where	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.dt_procedimento_trunc	= dt_procedimento_pc
	and	a.cd_guia_referencia	= cd_guia_referencia_pc
	and	a.cd_procedimento	= cd_procedimento_pc
	and	a.ie_origem_proced	= ie_origem_proced_pc
	and	coalesce(nr_seq_proc_ref::text, '') = ''
	and	ie_considerar_horario_pc 	= 'S'
	and	ie_grau_participacao_pc 	= 'S'
	and	a.nr_seq_grau_partic_conta	= nr_seq_grau_partic_conta_pc
	order by	cd_procedimento,
			ie_origem_proced;
BEGIN

ie_retorno_w	:= 'N';
qt_proc_conta_tot_w		:= 0;

select	coalesce(max(ie_grau_participacao),'N'),
	coalesce(max(ie_mesmo_prestador),'N')
into STRICT	ie_grau_participacao_w,
	ie_mesmo_prestador_w
from	pls_regra_tipo_execucao
where	nr_sequencia = nr_seq_regra_p;

for r_C00_w in C00(nr_seq_regra_p) loop
	begin

	cd_proc_regra_w			:= r_C00_w.cd_procedimento;
	ie_origem_proced_regra_w	:= r_C00_w.ie_origem_proced;
	ie_considerar_horario_w		:= r_C00_w.ie_considerar_horario;
	qt_horario_w			:= r_C00_w.qt_horario;
	ie_tipo_qt_horario_w		:= r_C00_w.ie_tipo_qt_horario;
	ie_pegou_w			:= 'S';
	if (ie_tipo_qt_horario_w = 'H') then
		qt_minuto_w := coalesce(qt_horario_w,0) * 60;
	elsif (ie_tipo_qt_horario_w = 'M') then
		qt_minuto_w := coalesce(qt_horario_w,0);
	end if;

	if (coalesce(qt_minuto_w::text, '') = '') then
		begin
		qt_minuto_w	:= 0;
		end;
	end if;

	if (ie_valido_w = 'S') then
		-- Verificar se todos os procedimentos com mesmo horário estão dentro da regra de quantidade de execução
		--Será verificado se na conta existe aLgum procedimento que não se encaixa na quantidade de execução.
		--No caso do retorno ser positivo a regra será inválida
		for r_C01_w in C01(	nr_seq_regra_p, dados_conta_p.cd_guia_referencia, dados_conta_p.nr_seq_segurado,
					dt_procedimento_p, dt_inicio_proc_p, qt_minuto_w,
					cd_proc_regra_w, ie_origem_proced_regra_w, ie_considerar_horario_w,
					ie_grau_participacao_w,dados_conta_p.nr_seq_grau_partic) loop

			ie_procedimento_valido_w := true;

			if (r_C01_w.ie_glosa <> 'N') then
				ie_procedimento_valido_w := false;
			end if;

			if (ie_procedimento_valido_w) and (r_c01_w.nr_seq_prestador_exec != dados_conta_p.nr_seq_prestador) and (ie_mesmo_prestador_w = 'S') then
				ie_procedimento_valido_w := false;
			end if;
			-- se não saiu na regra acimaa
			if (ie_procedimento_valido_w) then
				--Quando considerar horário, então para o procedimento ser válido, então a hora inicio deve ser igual a hora inicio passada por parâmetro
				if (ie_considerar_horario_w = 'S') then

					if (r_C01_w.hr_inicio_proc <> dt_inicio_proc_p) then

						ie_procedimento_valido_w := false;
					end if;

				--Quando regra não considerar horario, então verificar intervalo entre inicio proc e inicio proc parâmetro
				else
					if ( r_C01_w.ie_intervalo_ok <> 'S') then
						ie_procedimento_valido_w := false;
					end if;
				end if;
			end if;

			--Se alguma das restrições anteriores não foi atendida(entrou em algum if), então a quantidade deste procedimento não é considerada.
			if (ie_procedimento_valido_w) then

				qt_proc_conta_tot_w		:= qt_proc_conta_tot_w + r_C01_w.qt_procedimento_imp;

			end if;

		end loop;

		--Quando for passado o parametro 'B' é por que existe a necessidade de obter se existem procedimentos dentro dos critérios estabelecidos, porem o
		-- mesmo não se encontra na regra de quantidade de execução
	end if;

	end;
end loop;

if (qt_proc_conta_tot_w >= 2) then

	ie_valido_w := 'S';
else
	ie_valido_w := 'N';
end if;

if (ie_pegou_w = 'S') then
	ie_retorno_w	:= ie_valido_w;
end if;

return	ie_retorno_w;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_qtde_execucao_pck.pls_obter_conta_simul ( dt_procedimento_p timestamp, dt_inicio_proc_p timestamp, dados_conta_p pls_via_acesso_pck.dados_conta, nr_seq_regra_p bigint) FROM PUBLIC;
