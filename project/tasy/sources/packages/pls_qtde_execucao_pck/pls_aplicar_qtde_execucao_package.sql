-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_qtde_execucao_pck.pls_aplicar_qtde_execucao ( dados_conta_p pls_via_acesso_pck.dados_conta, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Rotina responsável por aplicar a regra de quantidade de execução
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dt_procedimento_w		pls_conta_proc_v.dt_procedimento_trunc%type;
dt_procedimento_ww		pls_conta_proc_v.dt_procedimento_trunc%type;
dt_inicio_proc_w		pls_conta_proc_v.hr_inicio_proc%type;
dt_inicio_proc_ww		pls_conta_proc_v.hr_inicio_proc%type;
hr_inicio_proc_w		pls_conta_proc_v.hr_inicio_proc%type;
nr_seq_regra_ww			varchar(2000);
ie_simultaneo_w			varchar(255);
ie_via_acesso_inf_w		varchar(1)	:= 'S';
qt_minuto_w			bigint;
qt_item_ref_w			integer;
nr_seq_regra_w			pls_regra_tipo_exec_item.nr_seq_regra%type;
qt_proc_regra_w			pls_regra_tipo_exec_item.qt_procedimento%type;
qt_proc_final_w			pls_regra_tipo_exec_item.qt_proc_final%type;
cd_proc_regra_w			pls_regra_tipo_exec_item.cd_procedimento%type;
ie_origem_proced_regra_w	pls_regra_tipo_exec_item.ie_origem_proced%type;
ie_atu_via_acesso_padrao_w	boolean;
qt_pos_proc_w			integer;
nr_seq_conta_proc_w		pls_conta_proc_v.nr_sequencia%type;
cd_procedimento_w		pls_conta_proc_v.cd_procedimento%type;
ie_origem_proced_w		pls_conta_proc_v.ie_origem_proced%type;
tx_item_w			pls_conta_proc_v.tx_item%type;
cd_procedimento_ww		pls_conta_proc_v.cd_procedimento%type;
ie_origem_proced_ww		pls_conta_proc_v.ie_origem_proced%type;
nr_seq_proc_ref_w		pls_conta_proc_v.nr_seq_proc_ref%type;
ie_via_acesso_imp_w		pls_conta_proc_v.ie_via_acesso_imp%type;
ie_via_acesso_ww		pls_conta_proc_v.ie_via_acesso%type;
nr_seq_regra_proc_via_w		pls_conta_proc_v.nr_sequencia%type;
ie_via_acesso_ant_w		pls_conta_proc_v.ie_via_acesso%type;
nr_seq_regra_via_acesso_w	pls_regra_tipo_exec_item.nr_sequencia%type;
ie_considerar_horario_w		pls_regra_tipo_exec_item.ie_considerar_horario%type;
qt_horario_w			pls_regra_tipo_exec_item.qt_horario%type;
ie_tipo_qt_horario_w		pls_regra_tipo_exec_item.ie_tipo_qt_horario%type;
tx_item_qtde_exec_w		pls_regra_tipo_exec_item.tx_item%type;
qt_proc_processar_w		integer;
qt_proc_processado_w		integer;
ie_preco_w			pls_plano.ie_preco%type;
qt_proc_fora_da_conta_w		integer := 0;

C_Regras CURSOR(	nr_seq_regra_pc		pls_regra_tipo_exec_item.nr_seq_regra%type,
			cd_procedimento_pc	pls_conta_proc.cd_procedimento%type,
			ie_origem_proced_pc	pls_conta_proc.ie_origem_proced%type,
			ie_preco_pc		pls_regra_tipo_execucao.ie_preco%type)FOR
	SELECT	a.nr_seq_regra,
		coalesce(b.ie_alterar_se_maior,'N') ie_alterar_se_maior
	from	pls_regra_tipo_exec_item a,
		pls_regra_tipo_execucao b
	where	b.nr_sequencia		= a.nr_seq_regra
	and	b.ie_situacao 	= 'A'
	and	a.ie_situacao	= 'A'
	and	((b.ie_preco 	= ie_preco_pc) or (coalesce(b.ie_preco::text, '') = ''))
	and	exists ( SELECT  1
			from	pls_regra_tipo_exec_item
			where	nr_sequencia = a.nr_sequencia
			and	cd_procedimento = cd_procedimento_pc
			and	ie_origem_proced = ie_origem_proced_pc)
	group by a.nr_seq_regra, coalesce(b.ie_alterar_se_maior,'N')
	order by coalesce(count(a.nr_sequencia),0) desc,
		coalesce(sum(a.qt_procedimento),0) desc;

--Irá varer a regra
C00 CURSOR(	nr_seq_regra_pc		pls_regra_tipo_exec_item.nr_seq_regra%type)FOR
	SELECT	coalesce(a.qt_procedimento,0) qt_procedimento,
		coalesce(a.qt_proc_final,99999) qt_proc_final,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_sequencia,
		a.ie_considerar_horario,
		coalesce(a.qt_horario,0) qt_horario,
		a.ie_tipo_qt_horario,
		a.tx_item,
		a.ie_via_acesso
	from	pls_regra_tipo_exec_item a,
		pls_regra_tipo_execucao b
	where	a.nr_seq_regra = nr_seq_regra_pc
	and	a.nr_seq_regra = b.nr_sequencia
	and	a.ie_situacao = 'A'
	order by coalesce(a.qt_procedimento,0) desc,
		 coalesce(a.cd_procedimento,0);

C01 CURSOR(	cd_guia_referencia_pc		pls_conta_proc_v.cd_guia_referencia%type,
		nr_seq_segurado_pc		pls_conta_v.nr_seq_segurado%type)FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.qt_procedimento_imp,
		a.dt_procedimento_trunc,
		a.dt_inicio_proc,
		a.hr_inicio_proc,
		a.dt_fim_proc,
		a.nr_seq_proc_ref,
		a.ie_via_acesso_imp,
		a.ie_via_acesso,
		a.nr_seq_regra_via_acesso,
		(	SELECT	count(1)
			from	pls_conta_proc		c
			where	c.nr_seq_proc_ref	= a.nr_sequencia) qt_item_ref,
		nr_seq_conta
	from	pls_conta_proc_v	a
	where	a.cd_guia_referencia	= cd_guia_referencia_pc
	and	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.ie_glosa		= 'N'
	order by
		dt_procedimento_trunc,
		dt_inicio_proc,
		nr_seq_proc_ref,
		qt_item_ref desc,
		nr_seq_conta,
		nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		dt_fim_proc;
BEGIN

select 	count(1)
into STRICT	qt_proc_processar_w
from	pls_conta_proc_v	a
where	a.cd_guia_referencia	= dados_conta_p.cd_guia_referencia
and	a.nr_seq_segurado	= dados_conta_p.nr_seq_segurado
and	a.ie_glosa		= 'N';

if (dados_conta_p.nr_seq_segurado IS NOT NULL AND dados_conta_p.nr_seq_segurado::text <> '') then
	select	max(ie_preco)
	into STRICT	ie_preco_w
	from	pls_plano a,
		pls_segurado b
	where	a.nr_sequencia = b.nr_seq_plano
	and	b.nr_sequencia = dados_conta_p.nr_seq_segurado;
end if;

--Rotina responsável por desmembrar os procedimentos da conta, ou seja, caso um procedimento possua qt. apresentada = 5,
--esta rotina irá criar 5 registros com quantidade apresentada 1
--utilizada a pls_des_proced_via_acesso da pls_via_acesso_pck, a mesma atende a necessidade aqui.
for r_C01 in C01(	dados_conta_p.cd_guia_referencia,
			dados_conta_p.nr_seq_segurado ) loop
begin
	nr_seq_conta_proc_w	:= r_C01.nr_sequencia;
	cd_procedimento_w	:= r_C01.cd_procedimento;
	ie_origem_proced_w	:= r_C01.ie_origem_proced;
	dt_procedimento_w	:= r_C01.dt_procedimento_trunc;
	dt_inicio_proc_w	:= r_C01.dt_inicio_proc;
	hr_inicio_proc_w	:= r_C01.hr_inicio_proc;
	nr_seq_proc_ref_w	:= r_C01.nr_seq_proc_ref;
	ie_via_acesso_imp_w	:= r_C01.ie_via_acesso_imp;
	ie_via_acesso_ww	:= r_C01.ie_via_acesso;
	nr_seq_regra_via_acesso_w:=r_C01.nr_seq_regra_via_acesso;
	qt_item_ref_w		:= r_C01.qt_item_ref;

	update	pls_conta_proc
	set	nr_seq_regra_tipo_exec  = NULL
	where	nr_sequencia = nr_seq_conta_proc_w;

	for rc_regras in C_Regras(nr_seq_regra_w, cd_procedimento_w, ie_origem_proced_w, ie_preco_w) loop

		select  count(1)
		into STRICT	qt_proc_fora_da_conta_w
		from   pls_regra_tipo_execucao a,
		       pls_regra_tipo_exec_item b
		where  a.nr_sequencia = b.nr_seq_regra
		and    a.nr_sequencia = rc_regras.nr_seq_regra
		and    a.ie_situacao = 'A'
		and	b.ie_situacao = 'A'
		and    not exists (SELECT 1
				  from    pls_conta_proc_v c
				  where   cd_procedimento = b.cd_procedimento
				  and     ie_origem_proced = b.ie_origem_proced
				  and     nr_seq_conta_princ = dados_conta_p.nr_seq_conta
				  and     ie_status not in ('D','M')
				  );

		if (qt_proc_fora_da_conta_w = 0) then

			for r_C00 in C00(rc_regras.nr_seq_regra) loop
			begin

				nr_seq_regra_w := rc_regras.nr_seq_regra;

				select 	count(1)
				into STRICT	qt_proc_processado_w
				from	pls_conta_proc_v	a
				where	a.cd_guia_referencia	= dados_conta_p.cd_guia_referencia
				and	a.nr_seq_segurado	= dados_conta_p.nr_seq_segurado
				and	(a.nr_seq_regra_tipo_exec IS NOT NULL AND a.nr_seq_regra_tipo_exec::text <> '')
				and	a.ie_glosa		= 'N';

				if (qt_proc_processar_w > qt_proc_processado_w) then

					qt_proc_regra_w		:= r_C00.qt_procedimento;
					qt_proc_final_w		:= r_C00.qt_proc_final;
					cd_proc_regra_w		:= r_C00.cd_procedimento;
					ie_origem_proced_regra_w:= r_C00.ie_origem_proced;
					nr_seq_regra_proc_via_w	:= r_C00.nr_sequencia;
					ie_considerar_horario_w	:= r_C00.ie_considerar_horario;
					qt_horario_w		:= r_C00.qt_horario;
					ie_tipo_qt_horario_w	:= r_C00.ie_tipo_qt_horario;
					tx_item_qtde_exec_w	:= r_C00.tx_item;

					qt_pos_proc_w	:= 0;
					if (ie_tipo_qt_horario_w = 'H') then
						qt_minuto_w := coalesce(qt_horario_w,0) * 60;
					elsif (ie_tipo_qt_horario_w = 'M') then
						qt_minuto_w := coalesce(qt_horario_w,0);
					end if;

					--Irá verificar se o procedimento que está sendo verificado se encaixa na regra
					ie_simultaneo_w	:= pls_qtde_execucao_pck.pls_obter_conta_simul( dt_procedimento_w, hr_inicio_proc_w, dados_conta_p, nr_seq_regra_w);

					if (ie_simultaneo_w = 'S') then
						if (cd_procedimento_w	= cd_proc_regra_w) and (ie_origem_proced_w	= ie_origem_proced_regra_w) then
							--Irá ser realizada a leitura dos valores antigos para futura comparação
							--Criada a estrutura desta forma para os casos onde a regra for de 2 a 99 por exemplo..
							if (coalesce(dt_inicio_proc_ww::text, '') = '') then
								dt_inicio_proc_ww	:= dt_inicio_proc_w;
							end if;

							if (coalesce(dt_procedimento_ww::text, '') = '') then
								dt_procedimento_ww	:= dt_procedimento_w;
							end if;

							if (coalesce(cd_procedimento_ww::text, '') = '') then
								cd_procedimento_ww	:= cd_procedimento_w;
							end if;

							if (coalesce(ie_origem_proced_ww::text, '') = '') then
								ie_origem_proced_ww	:= ie_origem_proced_w;
							end if;
							--Ira verificar se já existe um procedimento executado no mesmo dia e hora caso já exista será acresentado mais um
							if (coalesce(cd_procedimento_w,0) = coalesce(cd_procedimento_ww,0)) and (coalesce(ie_origem_proced_w,0) = coalesce(ie_origem_proced_ww,0)) and
								(((coalesce(dt_inicio_proc_w,to_date('01/01/1900'))	= coalesce(dt_inicio_proc_ww,to_date('01/01/1900'))) and (coalesce(ie_considerar_horario_w,'S') = 'S')) or
								((pls_obter_minutos_intervalo(to_date(dt_inicio_proc_w,'dd/mm/yyyy hh24:mi:ss'),to_date(dt_inicio_proc_ww,'dd/mm/yyyy hh24:mi:ss'),qt_minuto_w) = 'S')and (ie_considerar_horario_w = 'N'))) and (coalesce(dt_procedimento_w,to_date('01/01/1900')) = coalesce(dt_procedimento_ww,to_date('01/01/1900'))) then
								if (coalesce(nr_seq_proc_ref_w::text, '') = '') then
									qt_pos_proc_w	:= qt_pos_proc_w + 1;

								end if;
							else
								qt_pos_proc_w	:= 1;
							end if;

							dt_procedimento_ww	:=  dt_procedimento_w;
							dt_inicio_proc_ww	:=  dt_inicio_proc_w;
							cd_procedimento_ww	:= cd_procedimento_w;
							ie_origem_proced_ww	:= ie_origem_proced_w;

							--Será verificado se a quantidade se encaixa na permitida pela quantidade de execução
							if (qt_pos_proc_w >= qt_proc_regra_w) and (qt_pos_proc_w <= qt_proc_final_w) then

								tx_item_w	:= tx_item_qtde_exec_w;

								update	pls_conta_proc
								set	tx_item			= tx_item_w,
									nr_seq_regra_tipo_exec	= nr_seq_regra_w,
									ie_via_acesso		= CASE WHEN r_C00.ie_via_acesso = NULL THEN  ie_via_acesso  ELSE r_C00.ie_via_acesso END
								where	nr_sequencia		= nr_seq_conta_proc_w
								and	((coalesce(ie_tx_manual::text, '') = '') or (ie_tx_manual != 'S'))
								and	((tx_item >= tx_item_w) or (rc_regras.ie_alterar_se_maior = 'N'));

							else

								if (nr_seq_proc_ref_w IS NOT NULL AND nr_seq_proc_ref_w::text <> '') then

										tx_item_w	:= tx_item_qtde_exec_w;

										update	pls_conta_proc
										set	tx_item			= tx_item_w,
											nr_seq_regra_tipo_exec	= nr_seq_regra_w,
											ie_via_acesso		= CASE WHEN r_C00.ie_via_acesso = NULL THEN  ie_via_acesso  ELSE r_C00.ie_via_acesso END
										where	nr_sequencia		= nr_seq_conta_proc_w
										and	((coalesce(ie_tx_manual::text, '') = '') or (ie_tx_manual != 'S'))
										and	((tx_item >= tx_item_w) or (rc_regras.ie_alterar_se_maior = 'N'));

								end if;

							end if;

						end if;
					end if;

				end if;
			end;
			end loop;
		end if;
	end loop;

	end;
end loop;


END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_qtde_execucao_pck.pls_aplicar_qtde_execucao ( dados_conta_p pls_via_acesso_pck.dados_conta, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;
