-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE PROCEDURE pls_gerencia_autogerado_pck.pls_define_se_autogerado ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type default null) AS $body$
DECLARE


cd_procedimento_w		pls_conta_proc.cd_procedimento%type;
ie_origem_proced_w		pls_conta_proc.ie_origem_proced%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
ie_tem_excecao_w		varchar(1);
ie_glosa_w			pls_conta.ie_glosa%type;
dados_prestador_solic_w		pls_cta_valorizacao_pck.dados_prestador_solic;
dados_prestador_prot_w		pls_cta_valorizacao_pck.dados_prestador_prot;
dados_prestador_exec_w		pls_cta_valorizacao_pck.dados_prestador_exec;
dados_regra_w			pls_gerencia_autogerado_pck.dados_regra;
ret_null_w			pls_gerencia_autogerado_pck.dados_restricao;
var_cur_w 			integer;
var_exec_w			integer;
var_retorno_w			integer;
qt_iteracoes_w			integer;
ds_sql_w			varchar(4000);
ds_sql_orig_w			varchar(4000);
tb_seq_autogerado		dbms_sql.number_table;
tb_seq_conta_proc		dbms_sql.number_table;
ds_restricao_regra_w		pls_gerencia_autogerado_pck.dados_restricao;
qtde_prest_exec_w		integer;
qtde_prest_solic_w		integer;
qt_conta_lote_w			integer;
nr_seq_prest_condicao_um_w	varchar(30);
nr_seq_prest_condicao_dois_w	varchar(30);
ie_valido_w			varchar(1);
ie_primeira_condicao_ant_w	pls_regra_autogerado.ie_primeira_condicao%type;
ie_segunda_condicao_ant_w	pls_regra_autogerado.ie_segunda_condicao%type;
nr_seq_grupo_um_ant_w		pls_preco_prestador.nr_seq_grupo%type;
nr_seq_grupo_dois_ant_w		pls_preco_prestador.nr_seq_grupo%type;
nr_seq_prestador_um_ant_w	pls_conta.nr_seq_prestador_exec%type;
nr_seq_prestador_dois_ant_w	pls_conta.nr_seq_prestador_exec%type;

C01 CURSOR(cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type) FOR
	SELECT	a.nr_sequencia,
			a.nr_seq_grupo_servico,
			a.ie_origem_medico_solic,
			a.nr_seq_grupo_med_solic,
			a.nr_seq_grupo_med_exec,
			a.cd_procedimento,
			a.ie_origem_proced,
			a.cd_grupo_proc,
			a.cd_especialidade,
			a.cd_area_procedimento,
			a.nr_seq_tipo_acomodacao,
			a.nr_seq_tipo_atendimento,
			a.nr_seq_prestador,
			a.nr_seq_plano,
			a.nr_seq_classif_solic,
			a.nr_seq_classif_prot,
			a.nr_seq_classificacao,
			a.ie_tipo_guia,
			a.cd_prestador,
			a.ie_tipo_segurado,
			a.nr_seq_grupo_prest_exec,
			a.nr_seq_grupo_prest_solic,
			a.nr_seq_tipo_prest_solic,
			a.nr_seq_tipo_prest_prot,
			a.nr_seq_tipo_prestador,
			a.nr_seq_grupo_rec,
			a.ie_primeira_condicao,
			a.ie_segunda_condicao,
			a.ie_vinc_internacao,
			a.ie_regime_atendimento,
			a.ie_saude_ocupacional
	from	pls_regra_autogerado	a
	where	a.cd_estabelecimento	= cd_estabelecimento_pc
	and	a.ie_situacao		= 'A';

BEGIN

-- se for por lote de processo busca tudo da pls_cta_lote_proc_cta_temp que ? alimentada na pls_cta_lote_proc_cta_temp

-- isso ? um tratamento de performance

if (nr_seq_lote_processo_p IS NOT NULL AND nr_seq_lote_processo_p::text <> '') then

	-- se n?o tiver registros na tabela manda gerar

	select	count(1)
	into STRICT	qt_conta_lote_w
	from	pls_cta_lote_proc_cta_temp;
	
	if (qt_conta_lote_w = 0) then
		CALL gera_cta_temp_lote_processo(nr_seq_lote_processo_p);
	end if;
end if;

--Limpa informa??es de autogerado nos procedimentos(ie_autogerado e nr_seq_autogerado)

CALL pls_gerencia_autogerado_pck.pls_atualiza_autogerado(	nr_seq_lote_p, nr_seq_protocolo_p, nr_seq_lote_processo_p,
							nr_seq_conta_p, nr_seq_analise_p, pls_util_cta_pck.num_table_vazia_w,
							pls_util_cta_pck.num_table_vazia_w, 'L', nm_usuario_p);

for r_c01_w in C01(cd_estabelecimento_p) loop
	begin	
	
	dados_regra_w.nr_seq_regra				:= r_c01_w.nr_sequencia;
	dados_regra_w.nr_seq_grupo_servico		:= r_c01_w.nr_seq_grupo_servico;
	dados_regra_w.ie_origem_medico_solic	:= r_c01_w.ie_origem_medico_solic;
	dados_regra_w.nr_seq_grupo_med_solic	:= r_c01_w.nr_seq_grupo_med_solic;
	dados_regra_w.nr_seq_grupo_med_exec		:= r_c01_w.nr_seq_grupo_med_exec;
	dados_regra_w.cd_procedimento			:= r_c01_w.cd_procedimento;
	dados_regra_w.ie_origem_proced			:= r_c01_w.ie_origem_proced;
	dados_regra_w.cd_grupo_proc				:= r_c01_w.cd_grupo_proc;
	dados_regra_w.cd_especialidade			:= r_c01_w.cd_especialidade;
	dados_regra_w.cd_area_procedimento		:= r_c01_w.cd_area_procedimento;
	dados_regra_w.nr_seq_tipo_acomodacao	:= r_c01_w.nr_seq_tipo_acomodacao;
	dados_regra_w.nr_seq_tipo_atendimento	:= r_c01_w.nr_seq_tipo_atendimento;
	dados_regra_w.nr_seq_prestador			:= r_c01_w.nr_seq_prestador;
	dados_regra_w.nr_seq_plano				:= r_c01_w.nr_seq_plano;
	dados_regra_w.nr_seq_classif_solic		:= r_c01_w.nr_seq_classif_solic;
	dados_regra_w.nr_seq_classif_prot		:= r_c01_w.nr_seq_classif_prot;
	dados_regra_w.nr_seq_classificacao		:= r_c01_w.nr_seq_classificacao;
	dados_regra_w.ie_tipo_guia				:= r_c01_w.ie_tipo_guia;
	dados_regra_w.cd_prestador				:= r_c01_w.cd_prestador;
	dados_regra_w.ie_tipo_segurado			:= r_c01_w.ie_tipo_segurado;
	dados_regra_w.nr_seq_grupo_prest_exec	:= r_c01_w.nr_seq_grupo_prest_exec;
	dados_regra_w.nr_seq_grupo_prest_solic	:= r_c01_w.nr_seq_grupo_prest_solic;
	dados_regra_w.nr_seq_tipo_prest_solic	:= r_c01_w.nr_seq_tipo_prest_solic;
	dados_regra_w.nr_seq_tipo_prest_prot	:= r_c01_w.nr_seq_tipo_prest_prot;
	dados_regra_w.nr_seq_tipo_prestador		:= r_c01_w.nr_seq_tipo_prestador;
	dados_regra_w.nr_seq_grupo_rec			:= r_c01_w.nr_seq_grupo_rec;
	dados_regra_w.ie_primeira_condicao		:= r_c01_w.ie_primeira_condicao;
	dados_regra_w.ie_segunda_condicao		:= r_c01_w.ie_segunda_condicao;
	dados_regra_w.ie_vinc_internacao		:= r_c01_w.ie_vinc_internacao;
	dados_regra_w.ie_regime_atendimento		:= r_c01_w.ie_regime_atendimento;
	dados_regra_w.ie_saude_ocupacional		:= r_c01_w.ie_saude_ocupacional;	
	
	--Obt?m a restri??o dos procedimentos

	ds_restricao_regra_w := pls_gerencia_autogerado_pck.pls_obter_restricao_regra_aut(	'RESTRICAO',dados_regra_w,var_cur_w,
															nr_seq_lote_p,	nr_seq_protocolo_p, nr_seq_lote_processo_p,
															nr_seq_conta_p, nr_seq_analise_p);
	
	ds_sql_orig_w	:= 	'select	cp.cd_procedimento, '  || pls_util_pck.enter_w ||
			'	cp.ie_origem_proced, '  || pls_util_pck.enter_w ||
			'	cp.nr_sequencia, '  || pls_util_pck.enter_w ||
			'	cp.nr_seq_prestador_exec, '  || pls_util_pck.enter_w ||
			'	cp.nr_seq_prestador_prot, '  || pls_util_pck.enter_w ||
			'	cp.nr_seq_prestador_solic, '  || pls_util_pck.enter_w ||
			'	cp.cd_prestador_exec, '  || pls_util_pck.enter_w ||
			'	cp.cd_prestador_prot, '  || pls_util_pck.enter_w ||
			'	cp.cd_prestador_solic, '  || pls_util_pck.enter_w ||
			'	cp.ie_glosa, ' || pls_util_pck.enter_w ||
			'   cp.nr_seq_tipo_prest_exec ' || pls_util_pck.enter_w ||
			ds_restricao_regra_w.ds_campos || pls_util_pck.enter_w ||
			'from	pls_conta_proc_v	cp '  || pls_util_pck.enter_w||
			'where	cp.nr_seq_autogerado	is null '  || pls_util_pck.enter_w ||
			'and	cp.ie_status		in (''A'',''U'',''S'',''L'',''P'',''C'') '  || pls_util_pck.enter_w;
								
	-- Aqui ? montado o select para recuperar os procedimentos que foram executados e se encaixam na regra montada.

	ds_sql_w :=	ds_sql_orig_w ||pls_util_pck.enter_w||
				ds_restricao_regra_w.ds_restricao || pls_util_pck.enter_w;
	-- Abrir um novo cursor

	var_cur_w := dbms_sql.open_cursor;
	
	begin
		-- Criar o cursor

		dbms_sql.parse(var_cur_w, ds_sql_w, 1);

		--Atualiza as binds que ser?o utilizadas no select

		ret_null_w	:= pls_gerencia_autogerado_pck.pls_obter_restricao_regra_aut('BIND',dados_regra_w,var_cur_w,
								nr_seq_lote_p,	nr_seq_protocolo_p, nr_seq_lote_processo_p,
								nr_seq_conta_p, nr_seq_analise_p);				

				
		--Executar select  dinamico

		dbms_sql.define_column(var_cur_w, 1, cd_procedimento_w);
		dbms_sql.define_column(var_cur_w, 2, ie_origem_proced_w);
		dbms_sql.define_column(var_cur_w, 3, nr_seq_conta_proc_w );
		dbms_sql.define_column(var_cur_w, 4, dados_prestador_exec_w.nr_seq_prestador);
		dbms_sql.define_column(var_cur_w, 5, dados_prestador_prot_w.nr_seq_prestador);
		dbms_sql.define_column(var_cur_w, 6, dados_prestador_solic_w.nr_seq_prestador);
		dbms_sql.define_column(var_cur_w, 7, dados_prestador_exec_w.cd_prestador, 30);
		dbms_sql.define_column(var_cur_w, 8, dados_prestador_prot_w.cd_prestador, 30);
		dbms_sql.define_column(var_cur_w, 9, dados_prestador_solic_w.cd_prestador, 30);
		dbms_sql.define_column(var_cur_w, 10, ie_glosa_w, 1);
		dbms_sql.define_column(var_cur_w, 11, dados_prestador_exec_w.nr_seq_tipo_prestador);
		dbms_sql.define_column(var_cur_w, 12, qtde_prest_exec_w);
		dbms_sql.define_column(var_cur_w, 13, qtde_prest_solic_w);
		var_exec_w := dbms_sql.execute(var_cur_w);
	
		qt_iteracoes_w := 0;
		
		loop
			var_retorno_w := dbms_sql.fetch_rows(var_cur_w);

		exit when var_retorno_w = 0;
		
			-- Pegar os dados do SQL dinamico

			dbms_sql.column_value(var_cur_w, 1, cd_procedimento_w);
			dbms_sql.column_value(var_cur_w, 2, ie_origem_proced_w);
			dbms_sql.column_value(var_cur_w, 3, nr_seq_conta_proc_w );
			dbms_sql.column_value(var_cur_w, 4, dados_prestador_exec_w.nr_seq_prestador);
			dbms_sql.column_value(var_cur_w, 5, dados_prestador_prot_w.nr_seq_prestador);
			dbms_sql.column_value(var_cur_w, 6, dados_prestador_solic_w.nr_seq_prestador);
			dbms_sql.column_value(var_cur_w, 7, dados_prestador_exec_w.cd_prestador);
			dbms_sql.column_value(var_cur_w, 8, dados_prestador_prot_w.cd_prestador);
			dbms_sql.column_value(var_cur_w, 9, dados_prestador_solic_w.cd_prestador);
			dbms_sql.column_value(var_cur_w, 10, ie_glosa_w);
			dbms_sql.column_value(var_cur_w, 11, dados_prestador_exec_w.nr_seq_tipo_prestador);
			dbms_sql.column_value(var_cur_w, 12, qtde_prest_exec_w);
			dbms_sql.column_value(var_cur_w, 13, qtde_prest_solic_w);
			
			ie_valido_w	:= 'S';
			-- foi feito o filtro aqui abaixo pelo motivo que o mesmo ? de alto custo para o comando SQL, visto que em muitas regras n?o ? montado um select

			-- com v?rios filtros o que causa grande processamento para o banco de dados

			if	(dados_regra_w.ie_primeira_condicao IS NOT NULL AND dados_regra_w.ie_primeira_condicao::text <> '' AND dados_regra_w.ie_segunda_condicao IS NOT NULL AND dados_regra_w.ie_segunda_condicao::text <> '') then
				if (dados_regra_w.ie_primeira_condicao = 1) then /* Prestador executor */

					nr_seq_prest_condicao_um_w	:=  dados_prestador_exec_w.nr_seq_prestador;
				elsif (dados_regra_w.ie_primeira_condicao = 2) then /* Prestador do protocolo */

					nr_seq_prest_condicao_um_w	:=  dados_prestador_prot_w.nr_seq_prestador;
				elsif (dados_regra_w.ie_primeira_condicao = 3) then /* Prestador solicitante na conta */

					nr_seq_prest_condicao_um_w	:=  dados_prestador_solic_w.nr_seq_prestador;	
				elsif (dados_regra_w.ie_primeira_condicao = 4) then	-- Grupo prestador executor
					if (coalesce(ie_primeira_condicao_ant_w,0)	= dados_regra_w.ie_primeira_condicao) and (coalesce(nr_seq_prestador_um_ant_w,0)	= dados_prestador_exec_w.nr_seq_prestador)and (coalesce(nr_seq_grupo_um_ant_w,0)		= dados_regra_w.nr_seq_grupo_prest_exec)then
						nr_seq_prest_condicao_um_w	:= nr_seq_prest_condicao_um_w;
					else
						begin
						        select	z.nr_seq_grupo
							into STRICT	nr_seq_prest_condicao_um_w
							from	pls_preco_prestador z
							where	z.nr_seq_grupo 		= dados_regra_w.nr_seq_grupo_prest_exec
							and	z.nr_seq_prestador 	= dados_prestador_exec_w.nr_seq_prestador;
						exception
						when others then
							nr_seq_prest_condicao_um_w	:= -1;
						end;
						nr_seq_grupo_um_ant_w		:= dados_regra_w.nr_seq_grupo_prest_exec;
						nr_seq_prestador_um_ant_w	:= dados_prestador_exec_w.nr_seq_prestador;
					end if;
					
				
				elsif (dados_regra_w.ie_primeira_condicao = 5) then	--  Grupo prestador solicitante
					
					if (coalesce(ie_primeira_condicao_ant_w,0)	= dados_regra_w.ie_primeira_condicao) and (coalesce(nr_seq_prestador_um_ant_w,0)	= dados_prestador_solic_w.nr_seq_prestador)and (coalesce(nr_seq_grupo_um_ant_w,0)		= dados_regra_w.nr_seq_grupo_prest_solic)then
						nr_seq_prest_condicao_um_w	:= nr_seq_prest_condicao_um_w;
					else
						begin
						        select	z.nr_seq_grupo
							into STRICT	nr_seq_prest_condicao_um_w
							from	pls_preco_prestador z
							where	z.nr_seq_grupo 		= dados_regra_w.nr_seq_grupo_prest_solic
							and	z.nr_seq_prestador 	= dados_prestador_solic_w.nr_seq_prestador;
						exception
						when others then
							nr_seq_prest_condicao_um_w	:= -1;
						end;
						nr_seq_grupo_um_ant_w		:= dados_regra_w.nr_seq_grupo_prest_solic;
						nr_seq_prestador_um_ant_w	:= dados_prestador_solic_w.nr_seq_prestador;
					end if;
					
					
				elsif (dados_regra_w.ie_primeira_condicao	= 6) then --C?digo prestador executor
	
					nr_seq_prest_condicao_um_w	:= dados_prestador_exec_w.cd_prestador;
					
				elsif (dados_regra_w.ie_primeira_condicao	= 7) then --C?digo prestador solicitante
				
					nr_seq_prest_condicao_um_w	:= dados_prestador_solic_w.cd_prestador;
					
				elsif (dados_regra_w.ie_primeira_condicao	= 8) then --C?digo prestador protocolo
				
					nr_seq_prest_condicao_um_w	:= dados_prestador_prot_w.cd_prestador;
				end if;	
				
				if (dados_regra_w.ie_segunda_condicao = 1) then /* Prestador executor */

					nr_seq_prest_condicao_dois_w	:=  dados_prestador_exec_w.nr_seq_prestador;
				elsif (dados_regra_w.ie_segunda_condicao = 2) then /* Prestador do protocolo */

					nr_seq_prest_condicao_dois_w	:=  dados_prestador_prot_w.nr_seq_prestador;
				elsif (dados_regra_w.ie_segunda_condicao = 3) then /* Prestador solicitante na conta */

					nr_seq_prest_condicao_dois_w	:=  dados_prestador_solic_w.nr_seq_prestador;	
				elsif (dados_regra_w.ie_segunda_condicao = 4) then	-- Grupo prestador executor
					
					if (coalesce(ie_segunda_condicao_ant_w,0)	= dados_regra_w.ie_segunda_condicao) and (coalesce(nr_seq_prestador_dois_ant_w,0)	= dados_prestador_exec_w.nr_seq_prestador)and (coalesce(nr_seq_grupo_dois_ant_w,0)		= dados_regra_w.nr_seq_grupo_prest_exec)then
						nr_seq_prest_condicao_dois_w	:= nr_seq_prest_condicao_dois_w;
					else
						begin
						        select	z.nr_seq_grupo
							into STRICT	nr_seq_prest_condicao_dois_w
							from	pls_preco_prestador z
							where	z.nr_seq_grupo 		= dados_regra_w.nr_seq_grupo_prest_exec
							and	z.nr_seq_prestador 	= dados_prestador_exec_w.nr_seq_prestador;
						exception
						when others then
							nr_seq_prest_condicao_dois_w	:= -1;
						end;
						nr_seq_grupo_dois_ant_w		:=  dados_regra_w.nr_seq_grupo_prest_exec;
						nr_seq_prestador_dois_ant_w	:= dados_prestador_exec_w.nr_seq_prestador;
					end if;
	
					
				elsif (dados_regra_w.ie_segunda_condicao = 5) then	--  Grupo prestador solicitante
					
					if (coalesce(ie_segunda_condicao_ant_w,0)	= dados_regra_w.ie_segunda_condicao) and (coalesce(nr_seq_prestador_dois_ant_w,0)	= dados_prestador_solic_w.nr_seq_prestador)and (coalesce(nr_seq_grupo_dois_ant_w,0)		= dados_regra_w.nr_seq_grupo_prest_solic)then
						nr_seq_prest_condicao_dois_w	:= nr_seq_prest_condicao_dois_w;
					else
						begin
						        select	z.nr_seq_grupo
							into STRICT	nr_seq_prest_condicao_dois_w
							from	pls_preco_prestador z
							where	z.nr_seq_grupo 		= dados_regra_w.nr_seq_grupo_prest_solic
							and	z.nr_seq_prestador 	= dados_prestador_solic_w.nr_seq_prestador;
						exception
						when others then
							nr_seq_prest_condicao_dois_w	:= -1;
						end;
						nr_seq_grupo_dois_ant_w		:=  dados_regra_w.nr_seq_grupo_prest_solic;
						nr_seq_prestador_dois_ant_w	:= dados_prestador_solic_w.nr_seq_prestador;
					end if;
					
					
				elsif (dados_regra_w.ie_segunda_condicao	= 6) then --C?digo prestador executor
	
					nr_seq_prest_condicao_dois_w	:= dados_prestador_exec_w.cd_prestador;
					
				elsif (dados_regra_w.ie_segunda_condicao	= 7) then --C?digo prestador solicitante
				
					nr_seq_prest_condicao_dois_w	:= dados_prestador_solic_w.cd_prestador;
					
				elsif (dados_regra_w.ie_segunda_condicao	= 8) then --C?digo prestador protocolo
				
					nr_seq_prest_condicao_dois_w	:= dados_prestador_prot_w.cd_prestador;
				end if;	
				
				if (nr_seq_prest_condicao_um_w <> nr_seq_prest_condicao_dois_w) then
					ie_valido_w := 'N';
				end if;
				ie_primeira_condicao_ant_w := dados_regra_w.ie_primeira_condicao;
				ie_segunda_condicao_ant_w  := dados_regra_w.ie_segunda_condicao;
			end if;
			
			if (ie_glosa_w = 'N' and coalesce(qtde_prest_exec_w, 1) != 0 and coalesce(qtde_prest_solic_w, 1) != 0) and (ie_valido_w = 'S') then
			
				--Obt?m se existe uma exce??o da regra de autogerado para o procedimento

				ie_tem_excecao_w := pls_gerencia_autogerado_pck.pls_verifica_excecao(r_c01_w.nr_sequencia, ie_origem_proced_w, cd_procedimento_w, dados_prestador_exec_w.cd_prestador, dados_prestador_exec_w.nr_seq_tipo_prestador);
				
				if (ie_tem_excecao_w = 'N') then		
					
					tb_seq_autogerado(qt_iteracoes_w)	:= r_c01_w.nr_sequencia;
					tb_seq_conta_proc(qt_iteracoes_w)	:= nr_seq_conta_proc_w;
									
					if (qt_iteracoes_w = pls_util_cta_pck.qt_registro_transacao_w) then
						--Atualiza a informa??o de autogerado nos procedimentos que encaixarem

						CALL pls_gerencia_autogerado_pck.pls_atualiza_autogerado(null, null, null,
									null, null, tb_seq_conta_proc,
									tb_seq_autogerado, 'A', nm_usuario_p);
									
						qt_iteracoes_w := 0;
						tb_seq_conta_proc.delete;
						tb_seq_autogerado.delete;
					else
						qt_iteracoes_w := qt_iteracoes_w + 1;
					end if;
				end if;
			end if;
			
		end loop; -- Contas filtradas
		
		-- chama novamente para executar os que sobraram do loop acima

		CALL pls_gerencia_autogerado_pck.pls_atualiza_autogerado(null, null, null,
					null, null, tb_seq_conta_proc, 
					tb_seq_autogerado, 'A', nm_usuario_p);
		qt_iteracoes_w := 0;
		tb_seq_conta_proc.delete;
		tb_seq_autogerado.delete;
	end;
	dbms_sql.close_cursor(var_cur_w);
	end;
end loop;

END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_autogerado_pck.pls_define_se_autogerado ( nr_seq_lote_p pls_lote_protocolo_conta.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_lote_processo_p pls_cta_lote_processo.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_analise_p pls_analise_conta.nr_sequencia%type default null) FROM PUBLIC;
