-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


CREATE TYPE T_REC AS (NR_SEQ_MONIT  DOC_EXPORT_MONIT.NR_SEQUENCIA%TYPE,
                          NR_SEQ_REPORT DOC_EXPORT_MONIT.NR_SEQ_AUTO_IMP%TYPE);


CREATE OR REPLACE PROCEDURE doc_export_auto_pkg.exec_doc_monit () AS $body$
DECLARE


    DS_OLD_W     RELATORIO_DINAMICO.DS_LABEL%TYPE;
    DS_NEW_W     RELATORIO_DINAMICO.DS_LABEL%TYPE;
    DT_W         DOC_EXPORT_MONIT.DT_ULTIMA_EXEC%TYPE;
    DS_REPORTS_W RELATORIO_DINAMICO.DS_SQL%TYPE;
    NR_EXEC_W    DOC_EXPORT_EXECUCAO.NR_SEQUENCIA%TYPE;
    NR_FILA_W    FILA_IMPRESSAO_ADT.NR_SEQUENCIA%TYPE;
    TYPE T_REPORT IS TABLE OF T_REC;
    R_REPORT T_REPORT;

    C_MONITS CURSOR FOR
      SELECT NM_TABELA,
             MAX(QT_REGISTROS_TABELA) QT_REGISTROS_ANTERIOR,
             MAX(DT_ATUALIZACAO_TABELA) DT_ATUALIZACAO_ANTERIOR,
             NULL QT_REGISTROS_NOVA,
             NULL DT_ATUALIZACAO_NOVA
        FROM DOC_EXPORT_MONIT
       GROUP BY NM_TABELA;

    TYPE T_MONITS IS TABLE OF C_MONITS%ROWTYPE;
    R_MONITS T_MONITS;

    C_REPORTS CURSOR(DS_REPORTS_P RELATORIO_DINAMICO.DS_SQL%TYPE) FOR
      SELECT (COLUMN_VALUE)::numeric  NR_REPORT
        FROM TABLE(doc_export_auto_pkg.split_text(DS_REPORTS_P, ';'));

    TYPE T_REPORTS IS TABLE OF C_REPORTS%ROWTYPE;
    R_REPORTS T_REPORTS;


BEGIN

    DT_W := clock_timestamp();
    DS_REPORTS_W := NULL;

    OPEN C_MONITS;
    LOOP
      FETCH C_MONITS BULK COLLECT INTO R_MONITS LIMIT 100;
      EXIT WHEN R_MONITS.COUNT = 0;

      FOR i IN R_MONITS.FIRST..R_MONITS.LAST LOOP

        DS_OLD_W := NULL;

        IF R_MONITS[i](.QT_REGISTROS_ANTERIOR IS NOT NULL AND .QT_REGISTROS_ANTERIOR::text <> '') THEN

          DS_OLD_W := TO_CHAR(R_MONITS[i].DT_ATUALIZACAO_ANTERIOR,
                              'YYYY/MM/DD HH24:MI:SS')
                      || ';' || R_MONITS[i].QT_REGISTROS_ANTERIOR;

        END IF;

        DS_NEW_W := doc_export_auto_pkg.get_table_info(R_MONITS[i].NM_TABELA, DT_W);

        IF (DS_NEW_W IS NOT NULL AND DS_NEW_W::text <> '') THEN

          R_MONITS[i].DT_ATUALIZACAO_NOVA := SUBSTR(DS_NEW_W, 1, 19);
          R_MONITS[i].QT_REGISTROS_NOVA := SUBSTR(DS_NEW_W, 21);

        END IF;

        IF (coalesce(DS_OLD_W::text, '') = '' AND (DS_NEW_W IS NOT NULL AND DS_NEW_W::text <> '')) OR ((DS_OLD_W IS NOT NULL AND DS_OLD_W::text <> '') AND coalesce(DS_NEW_W::text, '') = '') OR (DS_OLD_W <> DS_NEW_W) THEN

          UPDATE DOC_EXPORT_MONIT
             SET DT_ATUALIZACAO = clock_timestamp(),
                 DT_ULTIMA_EXEC = DT_W,
                 QT_REGISTROS_TABELA = R_MONITS[i].QT_REGISTROS_NOVA,
                 DT_ATUALIZACAO_TABELA = TO_DATE(R_MONITS[i].DT_ATUALIZACAO_NOVA, 'YYYY/MM/DD HH24:MI:SS')
           WHERE NM_TABELA = R_MONITS[i].NM_TABELA
       RETURNING NR_SEQUENCIA, NR_SEQ_AUTO_IMP
            BULK COLLECT INTO R_REPORT;

          FOR j in R_REPORT.FIRST..R_REPORT.LAST LOOP

            INSERT INTO DOC_EXPORT_LOG(
              nr_sequencia,
              nr_seq_monit,
              nr_seq_auto_imp,
              nm_tabela,
              dt_execucao,
              dt_atualizacao_nrec,
              qt_registros_anterior,
              dt_atualizacao_anterior,
              qt_registros_nova,
              dt_atualizacao_nova)
            VALUES (
              nextval('doc_export_log_seq'),
              R_REPORT[j].NR_SEQ_MONIT,
              R_REPORT[j].NR_SEQ_REPORT,
              R_MONITS[i].NM_TABELA,
              DT_W,
              clock_timestamp(),
              R_MONITS[i].QT_REGISTROS_ANTERIOR,
              R_MONITS[i].DT_ATUALIZACAO_ANTERIOR,
              R_MONITS[i].QT_REGISTROS_NOVA,
              TO_DATE(R_MONITS[i].DT_ATUALIZACAO_NOVA, 'YYYY/MM/DD HH24:MI:SS'));

            IF doc_export_auto_pkg.get_is_listed(DS_REPORTS_W,
                             R_REPORT[j].NR_SEQ_REPORT) = 'N' THEN

              DS_REPORTS_W := CASE
                                WHEN (DS_REPORTS_W IS NOT NULL AND DS_REPORTS_W::text <> '')
                                THEN DS_REPORTS_W || ';'
                              END || R_REPORT[j].NR_SEQ_REPORT;

            END IF;

          END LOOP;

        ELSE

          UPDATE DOC_EXPORT_MONIT
             SET DT_ATUALIZACAO = clock_timestamp(),
                 DT_ULTIMA_EXEC = DT_W,
                 QT_REGISTROS_TABELA = R_MONITS[i].QT_REGISTROS_ANTERIOR,
                 DT_ATUALIZACAO_TABELA = R_MONITS[i].DT_ATUALIZACAO_ANTERIOR
           WHERE NM_TABELA = R_MONITS[i].NM_TABELA;

        END IF;

      END LOOP;
      COMMIT;

    END LOOP;

    IF (DS_REPORTS_W IS NOT NULL AND DS_REPORTS_W::text <> '') THEN

      OPEN C_REPORTS(DS_REPORTS_W);
      LOOP
        FETCH C_REPORTS BULK COLLECT INTO R_REPORTS LIMIT 100;
        EXIT WHEN R_REPORTS.COUNT = 0;

        FOR i IN R_REPORTS.FIRST..R_REPORTS.LAST LOOP

          SELECT nextval('doc_export_execucao_seq'),
                 nextval('fila_impressao_adt_seq')
            INTO STRICT NR_EXEC_W, NR_FILA_W
;

          INSERT INTO DOC_EXPORT_EXECUCAO(
            nr_sequencia,
            nr_seq_auto_imp,
            nr_seq_fila_adt,
            dt_execucao,
            dt_atualizacao_nrec)
          VALUES (
            NR_EXEC_W,
            R_REPORTS[i].NR_REPORT,
            NR_FILA_W,
            DT_W,
            clock_timestamp()
          );

          INSERT INTO FILA_IMPRESSAO_ADT(
            nr_sequencia,
            nr_atendimento,
            nr_seq_relatorio_auto_imp,
            dt_atualizacao,
            nr_seq_doc_export_exec)
          VALUES (
            NR_FILA_W,
            NULL,
            R_REPORTS[i].NR_REPORT,
            clock_timestamp(),
            NR_EXEC_W
          );

          UPDATE DOC_EXPORT_LOG L
             SET NR_SEQ_EXEC = NR_EXEC_W,
                 DT_ATUALIZACAO = clock_timestamp()
           WHERE NR_SEQ_AUTO_IMP = R_REPORTS[i].NR_REPORT
             AND coalesce(DT_ATUALIZACAO::text, '') = '';

        END LOOP;
        COMMIT;

      END LOOP;
      CLOSE C_REPORTS;

    END IF;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE doc_export_auto_pkg.exec_doc_monit () FROM PUBLIC;
