-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';




CREATE OR REPLACE FUNCTION doc_export_auto_pkg.get_objects (DS_FROMS_P RELATORIO.DS_SQL%TYPE) RETURNS SETOF T_TAB_OBJS AS $body$
DECLARE


    DS_OBJECTS_W RELATORIO_DINAMICO.DS_SQL%TYPE;
    DS_OBJECT_W  RELATORIO.DS_SQL%TYPE;
    NR_DOT_W     RELATORIO.NR_SEQUENCIA%TYPE;

    C_FROMS CURSOR(DS_FROM_P RELATORIO.DS_SQL%TYPE) FOR
      SELECT COLUMN_VALUE DS_FROM
        FROM TABLE(doc_export_auto_pkg.split_text(DS_FROMS_P, '";"'));

    TYPE T_FROMS IS TABLE OF C_FROMS%ROWTYPE;
    R_FROMS T_FROMS;

    C_OBJECTS CURSOR(DS_FROM_P RELATORIO.DS_SQL%TYPE) FOR
      SELECT SUBSTR(DS_FROM_P,
                    NR_START_OBJECT,
                    CASE WHEN NR_END_OBJECT=0 THEN                            LENGTH(DS_FROM_P) + 1  ELSE NR_END_OBJECT END  - NR_START_OBJECT) DS_OBJECT,
             '' IE_TYPE
        FROM (WITH RECURSIVE cte AS (
SELECT CASE WHEN LEVEL=1 THEN                             1  ELSE REGEXP_INSTR(DS_FROM_P,                                         ',| join ',                                         1,                                         LEVEL - 1,                                         1,                                         'i') END  NR_START_OBJECT,
                     REGEXP_INSTR(DS_FROM_P,
                                  ',| join ',
                                  1,
                                  LEVEL,
                                  0,
                                  'i') NR_END_OBJECT

       CASE WHEN LEVEL=1 THEN                              1  ELSE REGEXP_INSTR(DS_FROM_P,                                          ',| join ',                                          1,                                          LEVEL - 1,                                          1,                                          'i') END  > 0  UNION ALL
SELECT CASE WHEN LEVEL=1 THEN                             1  ELSE REGEXP_INSTR(DS_FROM_P,                                         ',| join ',                                         1,                                         LEVEL - 1,                                         1,                                         'i') END  NR_START_OBJECT,
                     REGEXP_INSTR(DS_FROM_P,
                                  ',| join ',
                                  1,
                                  LEVEL,
                                  0,
                                  'i') NR_END_OBJECT
          
       CASE WHEN LEVEL=1 THEN                              1  ELSE REGEXP_INSTR(DS_FROM_P,                                          ',| join ',                                          1,                                          LEVEL - 1,                                          1,                                          'i') END  > 0 JOIN cte c ON ()

) SELECT * FROM cte;
) alias6;

    R_OBJECTS T_TAB_OBJS;


BEGIN

    DS_OBJECTS_W := NULL;

    IF (DS_FROMS_P IS NOT NULL AND DS_FROMS_P::text <> '') THEN

      OPEN C_FROMS(DS_FROMS_P);
      LOOP
        FETCH C_FROMS BULK COLLECT INTO R_FROMS LIMIT 100;
        EXIT WHEN R_FROMS.COUNT = 0;

        FOR i IN R_FROMS.FIRST..R_FROMS.LAST LOOP

          OPEN C_OBJECTS(R_FROMS[i].DS_FROM);
          LOOP
            FETCH C_OBJECTS BULK COLLECT INTO R_OBJECTS LIMIT 100;
            EXIT WHEN R_OBJECTS.COUNT = 0;

            FOR j IN R_OBJECTS.FIRST..R_OBJECTS.LAST LOOP

              DS_OBJECT_W := UPPER(trim(both R_OBJECTS[j].DS_OBJECT));

              IF SUBSTR(DS_OBJECT_W, 1, 7) = 'TABLE (' THEN

                DS_OBJECT_W := doc_export_auto_pkg.normalize_object(SUBSTR(DS_OBJECT_W, 8));

                NR_DOT_W := position('.' in DS_OBJECT_W);

                IF NR_DOT_W > 0 THEN

                  DS_OBJECT_W := SUBSTR(DS_OBJECT_W, 1, NR_DOT_W - 1);

                  IF doc_export_auto_pkg.get_is_listed(DS_OBJECTS_W, DS_OBJECT_W) = 'N' THEN

                    IF doc_export_auto_pkg.get_is_object(DS_OBJECT_W, 'PACKAGE') = 'S' THEN

                      DS_OBJECTS_W := CASE
                                        WHEN (DS_OBJECTS_W IS NOT NULL AND DS_OBJECTS_W::text <> '')
                                        THEN DS_OBJECTS_W || ';'
                                      END || DS_OBJECT_W;

                      R_OBJECTS[j].DS_OBJECT := DS_OBJECT_W;
                      R_OBJECTS[j].IE_TYPE := 'PACKAGE';
                      RETURN NEXT R_OBJECTS(j);

                    END IF;

                  END IF;

                ELSE

                  IF doc_export_auto_pkg.get_is_listed(DS_OBJECTS_W,
                                   DS_OBJECT_W) = 'N' THEN

                    IF doc_export_auto_pkg.get_is_object(DS_OBJECT_W,
                                     'FUNCTION') = 'S' THEN

                      DS_OBJECTS_W := CASE
                                        WHEN (DS_OBJECTS_W IS NOT NULL AND DS_OBJECTS_W::text <> '')
                                        THEN DS_OBJECTS_W || ';'
                                      END || DS_OBJECT_W;

                      R_OBJECTS[j].DS_OBJECT := DS_OBJECT_W;
                      R_OBJECTS[j].IE_TYPE := 'FUNCTION';
                      RETURN NEXT R_OBJECTS(j);

                    END IF;

                  END IF;

                END IF;

              ELSIF SUBSTR(DS_OBJECT_W, 1, 8) <> '( SELECT' THEN

                DS_OBJECT_W := doc_export_auto_pkg.normalize_object(DS_OBJECT_W);

                IF doc_export_auto_pkg.get_is_listed(DS_OBJECTS_W,
                                 DS_OBJECT_W) = 'N' THEN

                  IF doc_export_auto_pkg.get_is_table(DS_OBJECT_W) = 'S' THEN

                    DS_OBJECTS_W := CASE
                                     WHEN (DS_OBJECTS_W IS NOT NULL AND DS_OBJECTS_W::text <> '')
                                     THEN DS_OBJECTS_W || ';'
                                   END || DS_OBJECT_W;

                    R_OBJECTS[j].DS_OBJECT := DS_OBJECT_W;
                    R_OBJECTS[j].IE_TYPE := 'TABLE';
                    RETURN NEXT R_OBJECTS(j);

                  ELSIF doc_export_auto_pkg.get_is_object(DS_OBJECT_W, 'VIEW') = 'S' THEN

                    DS_OBJECTS_W := CASE
                                     WHEN (DS_OBJECTS_W IS NOT NULL AND DS_OBJECTS_W::text <> '')
                                     THEN DS_OBJECTS_W || ';'
                                   END || DS_OBJECT_W;

                    R_OBJECTS[j].DS_OBJECT := DS_OBJECT_W;
                    R_OBJECTS[j].IE_TYPE := 'VIEW';
                    RETURN NEXT R_OBJECTS(j);

                  END IF;

                END IF;

              END IF;
            END LOOP;

          END LOOP;
          CLOSE C_OBJECTS;

        END LOOP;

      END LOOP;
      CLOSE C_FROMS;

    END IF;

    RETURN;

  END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION doc_export_auto_pkg.get_objects (DS_FROMS_P RELATORIO.DS_SQL%TYPE) FROM PUBLIC;
