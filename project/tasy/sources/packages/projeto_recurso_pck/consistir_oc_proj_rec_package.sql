-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';

	
	--Cons>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Verifica se deve ser consistido a ordem de compra <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--	

	/*
	Objetivo: Consistir a liberacao da ordem de compra caso o projeto recurso nao tenha saldo suficiente para suportar essa ordem.
		     Consistir a liberacao e estornacao da ordem de compra se o projeto vinculado ao item possui data de encerramento.	
	Parametros: 
	nr_ordem_compra_p = Numero de sequencia da ordem de compra
	nm_usuario_p = Nome do usuario.
	cd_estabelecimento_p = Codigo do estabelecimento logado pelo usuario.
	ie_acao_p = Flag para identificacao da acao a ser executada pelo usuario: 
		'L' para liberacao, 
		'E' para estorno.
	*/



CREATE OR REPLACE FUNCTION projeto_recurso_pck.consistir_oc_proj_rec ( nr_ordem_compra_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text default 'L') RETURNS varchar AS $body$
DECLARE

	
	ie_consiste_saldo_proj_w 	varchar(15);
	nr_seq_proj_rec_w		projeto_recurso.nr_sequencia%type;
	vl_total_ordem_w		double precision := 0;
	nr_item_solic_compra_des_w	solic_compra_item.nr_item_solic_compra%type;
	nr_solic_compra_desc_w		solic_compra.nr_solic_compra%type;
	vl_desconsiderar_solic_w	projeto_recurso_saldo.vl_comprometido%type;
	qt_material_ordem_desc_w	ordem_compra_item.qt_material%type;
	qt_material_solic_desc_w	solic_compra_item.qt_material%type;
	vl_comprometido_w		projeto_recurso_saldo.vl_comprometido%type;
	ie_considera_vl_compr_saldo_w	varchar(1) := 'N';
	ds_erro_w			varchar(2000);	
	qt_proj_fim_exec		bigint;	
	
	c01 CURSOR FOR
	SELECT	nr_seq_proj_rec
	from	ordem_compra_item
	where	nr_ordem_compra = nr_ordem_compra_p
	and	(nr_seq_proj_rec IS NOT NULL AND nr_seq_proj_rec::text <> '')
	and	ie_consiste_saldo_proj_w = 'S'
	group by nr_seq_proj_rec;
	
	c02 CURSOR FOR
	SELECT	nr_item_solic_compra,
		nr_solic_compra,
		qt_material
	from	ordem_compra_item
	where	nr_ordem_compra = nr_ordem_compra_p
	and	nr_solic_compra > 0;
	
	
BEGIN	

	select 	count(*)
	into STRICT	qt_proj_fim_exec
	from 	projeto_recurso 
	where 	nr_sequencia in (SELECT	nr_seq_proj_rec
							from	ordem_compra_item
							where	nr_ordem_compra = nr_ordem_compra_p
							and	(nr_seq_proj_rec IS NOT NULL AND nr_seq_proj_rec::text <> ''))
	and	(dt_fim_exec IS NOT NULL AND dt_fim_exec::text <> '')		
	and (trunc(dt_fim_exec,'dd') < trunc(clock_timestamp(),'dd'));
	
	if (qt_proj_fim_exec > 0) then
		ds_erro_w := wheb_mensagem_pck.get_texto(779607);
	end if;
	
	if ( ie_acao_p = 'L' ) then
		begin
		select coalesce(max(obter_valor_param_usuario(917, 229, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'C')
		into STRICT ie_consiste_saldo_proj_w
		;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_proj_rec_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			
			/*  obtem o valor total da ordem de compra criada agora*/


			select	coalesce(sum(obter_valor_ordem_proj_rec(a.nr_ordem_compra,nr_seq_proj_rec_w)),0)
			into STRICT	vl_total_ordem_w
			from	ordem_compra a
			where	coalesce(a.nr_seq_motivo_cancel::text, '') = ''
			and	a.nr_ordem_compra = nr_ordem_compra_p
			and exists (	SELECT	1
					from	ordem_compra_item b
					where	a.nr_ordem_compra = b.nr_ordem_compra
					and	b.nr_seq_proj_rec = nr_seq_proj_rec_w);
					
			vl_desconsiderar_solic_w := 0;
			vl_comprometido_w := 0;
			
			/* Obtem o valor comprometido do projeto recurso */


			select 	ie_considera_vl_compr_saldo
			into STRICT	ie_considera_vl_compr_saldo_w
			from   	parametro_compras
			where  	cd_estabelecimento = obter_estabelecimento_ativo();
			
			
			if ('S' = ie_considera_vl_compr_saldo_w) then
			
				open c02;
				loop
				fetch c02 into	
					nr_item_solic_compra_des_w,
					nr_solic_compra_desc_w,
					qt_material_ordem_desc_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					
					select	b.vl_unit_previsto,
						b.qt_material
					into STRICT	vl_desconsiderar_solic_w,
						qt_material_solic_desc_w
					from 	solic_compra a,
						solic_compra_item b
					where	a.nr_solic_compra = b.nr_solic_compra
					and	a.nr_solic_compra = nr_solic_compra_desc_w
					and	b.nr_item_solic_compra = nr_item_solic_compra_des_w;
					
					if (qt_material_ordem_desc_w < qt_material_solic_desc_w) then
						vl_comprometido_w :=  vl_comprometido_w + (vl_desconsiderar_solic_w * (qt_material_solic_desc_w - qt_material_ordem_desc_w));
					else
						vl_comprometido_w :=  vl_comprometido_w + (vl_desconsiderar_solic_w * qt_material_solic_desc_w);
					end if;
					
				end loop;
				close c02;
			
			end if;
			
			
			
			if	((projeto_recurso_pck.obter_vl_saldo_proj_rec(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) + vl_comprometido_w) < vl_total_ordem_w) then
				
				
				ds_erro_w := wheb_mensagem_pck.get_texto(499515,
				'VL_PROJ_REC_W='|| campo_mascara_virgula_casas(projeto_recurso_pck.obter_vl_proj_rec(nr_seq_proj_rec_w),4) ||						
				';VL_TOTAL_REAL_PROJ_REC_W='|| campo_mascara_virgula_casas(projeto_recurso_pck.obter_vl_realizado(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p),4) ||
				';VL_TOTAL_COMP_PROJ_REC_W='|| campo_mascara_virgula_casas((projeto_recurso_pck.obter_vl_comprometido(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) - vl_comprometido_w),4) ||
				';VL_SALDO_PROJ_REC_W='|| campo_mascara_virgula_casas((projeto_recurso_pck.obter_vl_saldo_proj_rec(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) + vl_comprometido_w),4) ||
				';VL_ORDEM_W='|| campo_mascara_virgula_casas(vl_total_ordem_w,4));
				/*O projeto recurso nao tem saldo suficiente para atender essa ordem de compra.
				Valor do projeto: #@VL_PROJ_REC_W#@
				Total realizado: #@VL_TOTAL_REAL_PROJ_REC_W#@
				Total comprometido: #@VL_TOTAL_COMP_PROJ_REC_W#@
				Saldo do projeto: #@VL_SALDO_PROJ_REC_W#@
				Valor desta ordem: #@VL_ORDEM_W#@.*/
	
				
			end if;	
			
			end;
		end loop;
		close C01;
		end;
	end if;
	
	return ds_erro_w;
						
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION projeto_recurso_pck.consistir_oc_proj_rec ( nr_ordem_compra_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text default 'L') FROM PUBLIC;
