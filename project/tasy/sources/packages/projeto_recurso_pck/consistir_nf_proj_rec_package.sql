-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


	--Cons>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Verifica se deve ser consistido a nota fiscal<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--		

	/*
	Objetivo: Consistir o calculo da nota fiscal caso o projeto recurso nao tenha saldo suficiente para suportar essa NF.
		      Consistir o calculo e a estornacao da nota fiscal se o projeto vinculado ao item possui data de encerramento.	
	Parametros: 
	nr_seq_nf_p = Numero de sequencia da nota fiscal
	nm_usuario_p = Nome do usuario.
	cd_estabelecimento_p = Codigo do estabelecimento logado pelo usuario.
	ie_acao_p = Flag para identificacao da acao a ser executada pelo usuario: 
		'L' para liberacao, 
		'E' para estorno.
	*/



CREATE OR REPLACE PROCEDURE projeto_recurso_pck.consistir_nf_proj_rec ( nr_seq_nf_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text default 'L', ie_commit_p text default 'S') AS $body$
DECLARE

	
	ie_consiste_saldo_proj_w 	varchar(15);
	nr_seq_proj_rec_w		projeto_recurso.nr_sequencia%type;
	vl_total_nf_w			nota_fiscal_item.vl_liquido%type;
	
	nr_item_oci_des_w		nota_fiscal_item.nr_item_oci%type;
	nr_ordem_compra_desc_w		nota_fiscal_item.nr_ordem_compra%type;
	vl_desconsiderar_ordem_w	projeto_recurso_saldo.vl_comprometido%type;
	qt_item_nf_desc_w		nota_fiscal_item.qt_item_nf%type;
	qt_material_ordem_desc_w	solic_compra_item.qt_material%type;
	vl_comprometido_w		projeto_recurso_saldo.vl_comprometido%type;
	
	ie_considerar_trib_saldo_w 	projeto_recurso.ie_considerar_trib_saldo%type;
	
	qt_proj_fim_exec		bigint;
	
	c01 CURSOR FOR
	SELECT	nr_seq_proj_rec
	from	nota_fiscal_item
	where	nr_sequencia = nr_seq_nf_p
	and	(nr_seq_proj_rec IS NOT NULL AND nr_seq_proj_rec::text <> '')
	and	ie_consiste_saldo_proj_w = 'S'
	group by nr_seq_proj_rec;
	
	c02 CURSOR FOR
	SELECT	nr_item_oci,
		nr_ordem_compra,
		qt_item_nf
	from	nota_fiscal_item
	where	nr_sequencia = nr_seq_nf_p
	and nr_seq_proj_rec = nr_seq_proj_rec_w
	and	nr_ordem_compra > 0;
	
	
BEGIN
	
	select 	count(*)
	into STRICT	qt_proj_fim_exec
	from 	projeto_recurso 
	where 	nr_sequencia in (SELECT	nr_seq_proj_rec
							from	nota_fiscal_item
							where	nr_sequencia = nr_seq_nf_p
							and		(nr_seq_proj_rec IS NOT NULL AND nr_seq_proj_rec::text <> ''))
	and	(dt_fim_exec IS NOT NULL AND dt_fim_exec::text <> '')		
	and (trunc(dt_fim_exec,'dd') < trunc(clock_timestamp(),'dd'));
	
	CALL delete_nota_fiscal_consist(nr_seq_nf_p,'E', ie_commit_p);
	
	if (qt_proj_fim_exec > 0) then
		CALL gravar_nota_fiscal_consist(
					nr_seq_nf_p,
					wheb_mensagem_pck.get_texto(779607),
					'S','E',
					wheb_mensagem_pck.get_texto(779607),
					nm_usuario_p,'S');
	end if;
	
	if ( ie_acao_p = 'L' ) then
		begin	
		select coalesce(max(obter_valor_param_usuario(40, 478, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'C')
		into STRICT ie_consiste_saldo_proj_w
		;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_proj_rec_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			
			select 	ie_considerar_trib_saldo
			into STRICT	ie_considerar_trib_saldo_w
			from	projeto_recurso
			where	nr_sequencia = nr_seq_proj_rec_w;
			
			
			/*  obtem o valor total da nota fiscal criada agora*/


			if (ie_considerar_trib_saldo_w = 'S') then
			
				select  round((projeto_recurso_pck.aplica_desc_acre_nf(nr_seq_nf_p , coalesce(sum(b.vl_liquido),0)))::numeric,2)
				into STRICT	vl_total_nf_w
				from    nota_fiscal a,
					nota_fiscal_item b
				where   a.nr_sequencia = b.nr_sequencia
				and	a.nr_sequencia = nr_seq_nf_p
				and	b.nr_seq_proj_rec = nr_seq_proj_rec_w;
		
			else
				select  round((projeto_recurso_pck.aplica_desc_acre_nf(nr_seq_nf_p , coalesce(sum(b.vl_liquido),0)))::numeric,2) - coalesce(sum(projeto_recurso_pck.obter_vl_total_trib_nf(nr_seq_nf_p,b.nr_item_nf)),0)
				into STRICT	vl_total_nf_w
				from    nota_fiscal a,
					nota_fiscal_item b
				where   a.nr_sequencia = b.nr_sequencia
				and	a.nr_sequencia = nr_seq_nf_p
				and	b.nr_seq_proj_rec = nr_seq_proj_rec_w;
				
				
			end if;
			
			vl_desconsiderar_ordem_w := 0;
			vl_comprometido_w := 0;
			
			open c02;
			loop
			fetch c02 into	
				nr_item_oci_des_w,
				nr_ordem_compra_desc_w,
				qt_item_nf_desc_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				
				
				select	round((projeto_recurso_pck.aplica_desc_acre_oc(nr_ordem_compra_desc_w ,projeto_recurso_pck.obter_vl_liq_oci(nr_ordem_compra_desc_w, nr_item_oci_des_w, ie_considerar_trib_saldo_w)))::numeric,2),
					b.qt_material
				into STRICT	vl_desconsiderar_ordem_w,
					qt_material_ordem_desc_w
				from 	ordem_compra a,
					ordem_compra_item b
				where	a.nr_ordem_compra = b.nr_ordem_compra
				and	a.nr_ordem_compra = nr_ordem_compra_desc_w
				and	b.nr_item_oci = nr_item_oci_des_w;
				
				if (qt_item_nf_desc_w < qt_material_ordem_desc_w) then
					vl_comprometido_w :=  vl_comprometido_w + (dividir_sem_round(vl_desconsiderar_ordem_w,qt_material_ordem_desc_w) * qt_item_nf_desc_w);
				else
					vl_comprometido_w :=  vl_comprometido_w + vl_desconsiderar_ordem_w;
				end if;
				
			end loop;
			close c02;
		
			if	((projeto_recurso_pck.obter_vl_saldo_proj_rec(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) + vl_comprometido_w) < vl_total_nf_w) then
				
				CALL gravar_nota_fiscal_consist(
					nr_seq_nf_p,
					wheb_mensagem_pck.get_texto(414879), /*O projeto recurso nao tem saldo suficiente para atender essa nota fiscal*/

					'S','E',
					wheb_mensagem_pck.get_texto(512548,
						'VL_PROJ_REC_W='|| campo_mascara_virgula_casas(projeto_recurso_pck.obter_vl_proj_rec(nr_seq_proj_rec_w),4) ||						
						';VL_TOTAL_REAL_PROJ_REC_W='|| campo_mascara_virgula_casas(projeto_recurso_pck.obter_vl_realizado(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p),4) ||
						';VL_TOTAL_COMP_PROJ_REC_W='|| campo_mascara_virgula_casas((projeto_recurso_pck.obter_vl_comprometido(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) - vl_comprometido_w),4) ||
						';VL_SALDO_PROJ_REC_W='|| campo_mascara_virgula_casas((projeto_recurso_pck.obter_vl_saldo_proj_rec(nr_seq_proj_rec_w, nm_usuario_p, cd_estabelecimento_p) + vl_comprometido_w),4) ||
						';VL_NF_W='|| campo_mascara_virgula_casas(vl_total_nf_w,4)),
					nm_usuario_p,'S');
					/*Valor do projeto: #@VL_PROJ_REC_W#@
					Total realizado: #@VL_TOTAL_REAL_PROJ_REC_W#@
					Total comprometido: #@VL_TOTAL_COMP_PROJ_REC_W#@
					Saldo do projeto: #@VL_SALDO_PROJ_REC_W#@
					Valor desta nota: #@VL_NF_W#@.*/
	
			end if;
			
			end;
		end loop;
		close C01;
		end;
	end if;
	
	END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE projeto_recurso_pck.consistir_nf_proj_rec ( nr_seq_nf_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text default 'L', ie_commit_p text default 'S') FROM PUBLIC;
